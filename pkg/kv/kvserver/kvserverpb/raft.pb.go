// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/kvserverpb/raft.proto

package kvserverpb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	livenesspb "github.com/cockroachdb/cockroach/pkg/kv/kvserver/liveness/livenesspb"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	tracingpb "github.com/cockroachdb/cockroach/pkg/util/tracing/tracingpb"
	errorspb "github.com/cockroachdb/errors/errorspb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	raftpb "go.etcd.io/raft/v3/raftpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SnapshotRequest_Priority int32

const (
	SnapshotRequest_UNKNOWN SnapshotRequest_Priority = 0
	// RECOVERY is used for a Raft-initiated snapshots and for
	// up-replication snapshots (i.e. when a dead node has been
	// removed and the range needs to be up-replicated).
	SnapshotRequest_RECOVERY SnapshotRequest_Priority = 1
	// REBALANCE is used for snapshots involved in rebalancing.
	SnapshotRequest_REBALANCE SnapshotRequest_Priority = 2
)

var SnapshotRequest_Priority_name = map[int32]string{
	0: "UNKNOWN",
	1: "RECOVERY",
	2: "REBALANCE",
}

var SnapshotRequest_Priority_value = map[string]int32{
	"UNKNOWN":   0,
	"RECOVERY":  1,
	"REBALANCE": 2,
}

func (x SnapshotRequest_Priority) String() string {
	return proto.EnumName(SnapshotRequest_Priority_name, int32(x))
}

func (SnapshotRequest_Priority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{5, 0}
}

type SnapshotRequest_Strategy int32

const (
	// KV_BATCH snapshots stream batches of KV pairs for all keys in a
	// range from the sender the the receiver. These KV pairs are then
	// combined into a large RocksDB WriteBatch that is atomically
	// applied.
	SnapshotRequest_KV_BATCH SnapshotRequest_Strategy = 0
)

var SnapshotRequest_Strategy_name = map[int32]string{
	0: "KV_BATCH",
}

var SnapshotRequest_Strategy_value = map[string]int32{
	"KV_BATCH": 0,
}

func (x SnapshotRequest_Strategy) String() string {
	return proto.EnumName(SnapshotRequest_Strategy_name, int32(x))
}

func (SnapshotRequest_Strategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{5, 1}
}

// Type is used for metrics collection on the receiver side. See
// applySnapshot in replica_raftstorage.go.
type SnapshotRequest_Type int32

const (
	// VIA_SNAPSHOT_QUEUE indicates the snapshots sent by the raft snapshot
	// queue to all types of replicas.
	SnapshotRequest_VIA_SNAPSHOT_QUEUE SnapshotRequest_Type = 0
	// INITIAL indicates the initial snapshots sent to LEARNER (before they're
	// promoted to full voters) and NON_VOTER replicas for upreplication.
	//
	// As of the time of writing, we only send this snapshot from the
	// initializeRaftLearners after creating a new LEARNER or NON_VOTER replica.
	SnapshotRequest_INITIAL SnapshotRequest_Type = 1
)

var SnapshotRequest_Type_name = map[int32]string{
	0: "VIA_SNAPSHOT_QUEUE",
	1: "INITIAL",
}

var SnapshotRequest_Type_value = map[string]int32{
	"VIA_SNAPSHOT_QUEUE": 0,
	"INITIAL":            1,
}

func (x SnapshotRequest_Type) String() string {
	return proto.EnumName(SnapshotRequest_Type_name, int32(x))
}

func (SnapshotRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{5, 2}
}

// QueueName indicates the source of the snapshot. Snapshots are prioritized
// within a queue and round-robin selected between queues for both the sending
// and receiving side.
type SnapshotRequest_QueueName int32

const (
	SnapshotRequest_OTHER               SnapshotRequest_QueueName = 0
	SnapshotRequest_REPLICATE_QUEUE     SnapshotRequest_QueueName = 1
	SnapshotRequest_RAFT_SNAPSHOT_QUEUE SnapshotRequest_QueueName = 2
)

var SnapshotRequest_QueueName_name = map[int32]string{
	0: "OTHER",
	1: "REPLICATE_QUEUE",
	2: "RAFT_SNAPSHOT_QUEUE",
}

var SnapshotRequest_QueueName_value = map[string]int32{
	"OTHER":               0,
	"REPLICATE_QUEUE":     1,
	"RAFT_SNAPSHOT_QUEUE": 2,
}

func (x SnapshotRequest_QueueName) String() string {
	return proto.EnumName(SnapshotRequest_QueueName_name, int32(x))
}

func (SnapshotRequest_QueueName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{5, 3}
}

type SnapshotResponse_Status int32

const (
	SnapshotResponse_UNKNOWN  SnapshotResponse_Status = 0
	SnapshotResponse_ACCEPTED SnapshotResponse_Status = 1
	SnapshotResponse_APPLIED  SnapshotResponse_Status = 2
	SnapshotResponse_ERROR    SnapshotResponse_Status = 3
)

var SnapshotResponse_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "ACCEPTED",
	2: "APPLIED",
	3: "ERROR",
}

var SnapshotResponse_Status_value = map[string]int32{
	"UNKNOWN":  0,
	"ACCEPTED": 1,
	"APPLIED":  2,
	"ERROR":    3,
}

func (x SnapshotResponse_Status) String() string {
	return proto.EnumName(SnapshotResponse_Status_name, int32(x))
}

func (SnapshotResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{6, 0}
}

// RaftHeartbeat is a request that contains the barebones information for a
// raftpb.MsgHeartbeat raftpb.Message. RaftHeartbeats are coalesced and sent
// in a RaftMessageRequest, and reconstructed by the receiver into individual
// raftpb.Message protos.
type RaftHeartbeat struct {
	RangeID                   github_com_cockroachdb_cockroach_pkg_roachpb.RangeID   `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	FromReplicaID             github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID `protobuf:"varint,2,opt,name=from_replica_id,json=fromReplicaId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID" json:"from_replica_id,omitempty"`
	ToReplicaID               github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID `protobuf:"varint,3,opt,name=to_replica_id,json=toReplicaId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID" json:"to_replica_id,omitempty"`
	Term                      uint64                                                 `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Commit                    uint64                                                 `protobuf:"varint,5,opt,name=commit,proto3" json:"commit,omitempty"`
	Quiesce                   bool                                                   `protobuf:"varint,6,opt,name=quiesce,proto3" json:"quiesce,omitempty"`
	LaggingFollowersOnQuiesce []livenesspb.Liveness                                  `protobuf:"bytes,8,rep,name=lagging_followers_on_quiesce,json=laggingFollowersOnQuiesce,proto3" json:"lagging_followers_on_quiesce"`
	// This field helps migrate in the lagging_followers_on_quiesce field. For
	// messages sent by versions of Cockroach that do not know about the
	// lagging_followers_on_quiesce field (i.e. v20.1), we need to assume that all
	// replicas are lagging, not that none of them are.
	//
	// TODO(nvanbenschoten): Migration path:
	// v20.2: Add this field. Always set to true when quiesce == true.
	//        Consult field on receiver. Consider all replicas "lagging"
	//        if not set to true on liveness change.
	// v22.1: Keep sending. Stop consulting.
	// v22.2: Remove field.
	LaggingFollowersOnQuiesceAccurate bool `protobuf:"varint,10,opt,name=lagging_followers_on_quiesce_accurate,json=laggingFollowersOnQuiesceAccurate,proto3" json:"lagging_followers_on_quiesce_accurate,omitempty"`
}

func (m *RaftHeartbeat) Reset()         { *m = RaftHeartbeat{} }
func (m *RaftHeartbeat) String() string { return proto.CompactTextString(m) }
func (*RaftHeartbeat) ProtoMessage()    {}
func (*RaftHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{0}
}
func (m *RaftHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RaftHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftHeartbeat.Merge(m, src)
}
func (m *RaftHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *RaftHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_RaftHeartbeat proto.InternalMessageInfo

// RaftMessageRequest is the request used to send raft messages using our
// protobuf-based RPC codec. If a RaftMessageRequest has a non-empty number of
// heartbeats or heartbeat_resps, the contents of the message field is treated
// as a dummy message and discarded. A coalesced heartbeat request's replica
// descriptor's range ID must be zero.
type RaftMessageRequest struct {
	RangeID github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	// Optionally, the start key of the sending replica. This is only populated
	// as a "hint" under certain conditions.
	RangeStartKey github_com_cockroachdb_cockroach_pkg_roachpb.RKey `protobuf:"bytes,8,opt,name=range_start_key,json=rangeStartKey,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RKey" json:"range_start_key,omitempty"`
	FromReplica   roachpb.ReplicaDescriptor                         `protobuf:"bytes,2,opt,name=from_replica,json=fromReplica,proto3" json:"from_replica"`
	ToReplica     roachpb.ReplicaDescriptor                         `protobuf:"bytes,3,opt,name=to_replica,json=toReplica,proto3" json:"to_replica"`
	Message       raftpb.Message                                    `protobuf:"bytes,4,opt,name=message,proto3" json:"message"`
	// Is this a quiesce request? A quiesce request is a MsgHeartbeat
	// which is requesting the recipient to stop ticking its local
	// replica as long as the current Raft state matches the heartbeat
	// Term/Commit. If the Term/Commit match, the recipient is marked as
	// quiescent. If they don't match, the message is passed along to
	// Raft which will generate a MsgHeartbeatResp that will unquiesce
	// the sender.
	Quiesce bool `protobuf:"varint,5,opt,name=quiesce,proto3" json:"quiesce,omitempty"`
	// If quiesce is true, this set contains liveness information about
	// the replicas that were dead when the leader decided to quiesce and
	// were lagging behind the quiescence log index (meaning they would
	// have prevented quiescence had they been alive). If any replica
	// (leader or follower) becomes aware that a replica in this set has
	// become live, it should unquiesce the range so that the replica can
	// be caught back up.
	LaggingFollowersOnQuiesce []livenesspb.Liveness `protobuf:"bytes,9,rep,name=lagging_followers_on_quiesce,json=laggingFollowersOnQuiesce,proto3" json:"lagging_followers_on_quiesce"`
	// A coalesced heartbeat request is any RaftMessageRequest with a nonzero number of
	// heartbeats or heartbeat_resps.
	Heartbeats     []RaftHeartbeat `protobuf:"bytes,6,rep,name=heartbeats,proto3" json:"heartbeats"`
	HeartbeatResps []RaftHeartbeat `protobuf:"bytes,7,rep,name=heartbeat_resps,json=heartbeatResps,proto3" json:"heartbeat_resps"`
}

func (m *RaftMessageRequest) Reset()         { *m = RaftMessageRequest{} }
func (m *RaftMessageRequest) String() string { return proto.CompactTextString(m) }
func (*RaftMessageRequest) ProtoMessage()    {}
func (*RaftMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{1}
}
func (m *RaftMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RaftMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftMessageRequest.Merge(m, src)
}
func (m *RaftMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *RaftMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RaftMessageRequest proto.InternalMessageInfo

type RaftMessageRequestBatch struct {
	Requests []RaftMessageRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests"`
}

func (m *RaftMessageRequestBatch) Reset()         { *m = RaftMessageRequestBatch{} }
func (m *RaftMessageRequestBatch) String() string { return proto.CompactTextString(m) }
func (*RaftMessageRequestBatch) ProtoMessage()    {}
func (*RaftMessageRequestBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{2}
}
func (m *RaftMessageRequestBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftMessageRequestBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RaftMessageRequestBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftMessageRequestBatch.Merge(m, src)
}
func (m *RaftMessageRequestBatch) XXX_Size() int {
	return m.Size()
}
func (m *RaftMessageRequestBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftMessageRequestBatch.DiscardUnknown(m)
}

var xxx_messageInfo_RaftMessageRequestBatch proto.InternalMessageInfo

type RaftMessageResponseUnion struct {
	Error *roachpb.Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RaftMessageResponseUnion) Reset()         { *m = RaftMessageResponseUnion{} }
func (m *RaftMessageResponseUnion) String() string { return proto.CompactTextString(m) }
func (*RaftMessageResponseUnion) ProtoMessage()    {}
func (*RaftMessageResponseUnion) Descriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{3}
}
func (m *RaftMessageResponseUnion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftMessageResponseUnion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RaftMessageResponseUnion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftMessageResponseUnion.Merge(m, src)
}
func (m *RaftMessageResponseUnion) XXX_Size() int {
	return m.Size()
}
func (m *RaftMessageResponseUnion) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftMessageResponseUnion.DiscardUnknown(m)
}

var xxx_messageInfo_RaftMessageResponseUnion proto.InternalMessageInfo

// RaftMessageResponse may be sent to the sender of a
// RaftMessageRequest. RaftMessage does not use the usual
// request/response pattern; it is primarily modeled as a one-way
// stream of requests. Normal 'responses' are usually sent as new
// requests on a separate stream in the other direction.
// RaftMessageResponse is not sent for every RaftMessageRequest, but
// may be used for certain error conditions.
type RaftMessageResponse struct {
	RangeID     github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	FromReplica roachpb.ReplicaDescriptor                            `protobuf:"bytes,2,opt,name=from_replica,json=fromReplica,proto3" json:"from_replica"`
	ToReplica   roachpb.ReplicaDescriptor                            `protobuf:"bytes,3,opt,name=to_replica,json=toReplica,proto3" json:"to_replica"`
	Union       RaftMessageResponseUnion                             `protobuf:"bytes,4,opt,name=union,proto3" json:"union"`
}

func (m *RaftMessageResponse) Reset()         { *m = RaftMessageResponse{} }
func (m *RaftMessageResponse) String() string { return proto.CompactTextString(m) }
func (*RaftMessageResponse) ProtoMessage()    {}
func (*RaftMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{4}
}
func (m *RaftMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RaftMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftMessageResponse.Merge(m, src)
}
func (m *RaftMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *RaftMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RaftMessageResponse proto.InternalMessageInfo

// SnapshotRequest is the request used to send streaming snapshot requests.
type SnapshotRequest struct {
	Header *SnapshotRequest_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// A RocksDB BatchRepr. Multiple kv_batches may be sent across multiple request messages.
	KVBatch []byte `protobuf:"bytes,2,opt,name=kv_batch,json=kvBatch,proto3" json:"kv_batch,omitempty"`
	Final   bool   `protobuf:"varint,4,opt,name=final,proto3" json:"final,omitempty"`
}

func (m *SnapshotRequest) Reset()         { *m = SnapshotRequest{} }
func (m *SnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*SnapshotRequest) ProtoMessage()    {}
func (*SnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{5}
}
func (m *SnapshotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotRequest.Merge(m, src)
}
func (m *SnapshotRequest) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotRequest proto.InternalMessageInfo

type SnapshotRequest_Header struct {
	// The replica state at the time the snapshot was generated. Note
	// that ReplicaState.Desc differs from the above range_descriptor
	// field which holds the updated descriptor after the new replica
	// has been added while ReplicaState.Desc holds the descriptor
	// before the new replica has been added.
	State ReplicaState `protobuf:"bytes,5,opt,name=state,proto3" json:"state"`
	// The inner raft message is of type MsgSnap, and its snapshot data contains a UUID.
	RaftMessageRequest RaftMessageRequest `protobuf:"bytes,2,opt,name=raft_message_request,json=raftMessageRequest,proto3" json:"raft_message_request"`
	// The estimated size of the range, to be used in reservation decisions.
	RangeSize int64 `protobuf:"varint,3,opt,name=range_size,json=rangeSize,proto3" json:"range_size,omitempty"`
	// The priority of the snapshot.
	// Deprecated, prefer sender_queue_priority.
	// TODO(abaptist): Remove this field for v23.1.
	Priority SnapshotRequest_Priority `protobuf:"varint,6,opt,name=priority,proto3,enum=cockroach.kv.kvserver.kvserverpb.SnapshotRequest_Priority" json:"priority,omitempty"`
	// The strategy of the snapshot.
	Strategy SnapshotRequest_Strategy `protobuf:"varint,7,opt,name=strategy,proto3,enum=cockroach.kv.kvserver.kvserverpb.SnapshotRequest_Strategy" json:"strategy,omitempty"`
	// The type of the snapshot.
	// Deprecated, prefer sender_queue_name.
	// TODO(abaptist): Remove this field for v23.1.
	Type SnapshotRequest_Type `protobuf:"varint,9,opt,name=type,proto3,enum=cockroach.kv.kvserver.kvserverpb.SnapshotRequest_Type" json:"type,omitempty"`
	// Whether the snapshot uses the unreplicated RaftTruncatedState or not.
	// This is always true for snapshots generated in v21.1+ clusters. In v20.2
	// it was possible for ranges to be using the replicated variant. v21.1
	// therefore had code expecting that possibility (unlike v21.2 code, where
	// this field is assumed to always be true and thus never read). For
	// compatibility with v21.1 nodes however, v21.2 has to explicitly set this
	// field to true. In v22.1 we can remove it entirely seeing as how v21.2
	// code never reads the field.
	//
	// TODO(irfansharif): Remove this in v22.1.
	DeprecatedUnreplicatedTruncatedState bool `protobuf:"varint,8,opt,name=deprecated_unreplicated_truncated_state,json=deprecatedUnreplicatedTruncatedState,proto3" json:"deprecated_unreplicated_truncated_state,omitempty"`
	// The sending queue's name, to be utilized to ensure fairness across
	// different snapshot sending sources. The default queue name, OTHER, is
	// reserved for any uncategorized and unprioritized snapshots, and requests
	// with sender queue name OTHER may not specify a non-zero
	// sender_queue_priority.  To prioritize snapshots categorized as OTHER,
	// first move them to a different queue name.
	SenderQueueName SnapshotRequest_QueueName `protobuf:"varint,10,opt,name=sender_queue_name,json=senderQueueName,proto3,enum=cockroach.kv.kvserver.kvserverpb.SnapshotRequest_QueueName" json:"sender_queue_name,omitempty"`
	// The sending queue's priority, to be utilized to prioritize snapshots
	// from a particular sending source.
	SenderQueuePriority float64 `protobuf:"fixed64,11,opt,name=sender_queue_priority,json=senderQueuePriority,proto3" json:"sender_queue_priority,omitempty"`
}

func (m *SnapshotRequest_Header) Reset()         { *m = SnapshotRequest_Header{} }
func (m *SnapshotRequest_Header) String() string { return proto.CompactTextString(m) }
func (*SnapshotRequest_Header) ProtoMessage()    {}
func (*SnapshotRequest_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{5, 0}
}
func (m *SnapshotRequest_Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotRequest_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SnapshotRequest_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotRequest_Header.Merge(m, src)
}
func (m *SnapshotRequest_Header) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotRequest_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotRequest_Header.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotRequest_Header proto.InternalMessageInfo

type SnapshotResponse struct {
	Status SnapshotResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=cockroach.kv.kvserver.kvserverpb.SnapshotResponse_Status" json:"status,omitempty"`
	// Message is a message explaining an ERROR return value. It is not set for any
	// other status.
	//
	// As of 23.1, the encoded_error field is always used instead. 23.1 itself
	// needs to populate both due to needing to be compatible with 22.2. Once
	// the MinSupportedVersion is 23.1, this can be removed.
	DeprecatedMessage string `protobuf:"bytes,2,opt,name=deprecated_message,json=deprecatedMessage,proto3" json:"deprecated_message,omitempty"`
	// Traces from snapshot processing, returned on status APPLIED or ERROR.
	CollectedSpans []tracingpb.RecordedSpan `protobuf:"bytes,4,rep,name=collected_spans,json=collectedSpans,proto3" json:"collected_spans"`
	// encoded_error encodes the error when the status is ERROR.
	//
	// MIGRATION: only guaranteed to be set when the message field is no longer there.
	EncodedError errorspb.EncodedError `protobuf:"bytes,5,opt,name=encoded_error,json=encodedError,proto3" json:"encoded_error"`
}

func (m *SnapshotResponse) Reset()         { *m = SnapshotResponse{} }
func (m *SnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*SnapshotResponse) ProtoMessage()    {}
func (*SnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{6}
}
func (m *SnapshotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotResponse.Merge(m, src)
}
func (m *SnapshotResponse) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotResponse proto.InternalMessageInfo

// DelegateSnapshotRequest is the request used to delegate send snapshot requests.
type DelegateSnapshotRequest struct {
	RangeID github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	// The replica that delegates the snapshot request, in most cases the leader/leaseholder.
	// The snapshot request should originate from the coordinator.
	CoordinatorReplica roachpb.ReplicaDescriptor `protobuf:"bytes,2,opt,name=coordinator_replica,json=coordinatorReplica,proto3" json:"coordinator_replica"`
	// The replica receiving the snapshot.
	RecipientReplica roachpb.ReplicaDescriptor `protobuf:"bytes,3,opt,name=recipient_replica,json=recipientReplica,proto3" json:"recipient_replica"`
	// The replica selected to act as the snapshot sender.
	DelegatedSender roachpb.ReplicaDescriptor `protobuf:"bytes,4,opt,name=delegated_sender,json=delegatedSender,proto3" json:"delegated_sender"`
	// The priority of the snapshot.
	Priority SnapshotRequest_Priority `protobuf:"varint,5,opt,name=priority,proto3,enum=cockroach.kv.kvserver.kvserverpb.SnapshotRequest_Priority" json:"priority,omitempty"`
	// The sending queue's name.
	SenderQueueName SnapshotRequest_QueueName `protobuf:"varint,9,opt,name=sender_queue_name,json=senderQueueName,proto3,enum=cockroach.kv.kvserver.kvserverpb.SnapshotRequest_QueueName" json:"sender_queue_name,omitempty"`
	// The sending queue's priority.
	SenderQueuePriority float64 `protobuf:"fixed64,10,opt,name=sender_queue_priority,json=senderQueuePriority,proto3" json:"sender_queue_priority,omitempty"`
	// The type of the snapshot.
	Type SnapshotRequest_Type `protobuf:"varint,6,opt,name=type,proto3,enum=cockroach.kv.kvserver.kvserverpb.SnapshotRequest_Type" json:"type,omitempty"`
	// The Raft term of the coordinator (in most cases the leaseholder) replica.
	// The term is used during snapshot receiving to reject messages from an older term.
	Term uint64 `protobuf:"varint,7,opt,name=term,proto3" json:"term,omitempty"`
	// The truncated state of the Raft log on the coordinator replica.
	TruncatedState *roachpb.RaftTruncatedState `protobuf:"bytes,8,opt,name=truncated_state,json=truncatedState,proto3" json:"truncated_state,omitempty"`
}

func (m *DelegateSnapshotRequest) Reset()         { *m = DelegateSnapshotRequest{} }
func (m *DelegateSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*DelegateSnapshotRequest) ProtoMessage()    {}
func (*DelegateSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{7}
}
func (m *DelegateSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DelegateSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateSnapshotRequest.Merge(m, src)
}
func (m *DelegateSnapshotRequest) XXX_Size() int {
	return m.Size()
}
func (m *DelegateSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateSnapshotRequest proto.InternalMessageInfo

type DelegateSnapshotResponse struct {
	SnapResponse *SnapshotResponse `protobuf:"bytes,1,opt,name=snapResponse,proto3" json:"snapResponse,omitempty"`
	// collected_spans stores trace spans recorded during the execution of this
	// request.
	CollectedSpans []tracingpb.RecordedSpan `protobuf:"bytes,2,rep,name=collected_spans,json=collectedSpans,proto3" json:"collected_spans"`
}

func (m *DelegateSnapshotResponse) Reset()         { *m = DelegateSnapshotResponse{} }
func (m *DelegateSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*DelegateSnapshotResponse) ProtoMessage()    {}
func (*DelegateSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{8}
}
func (m *DelegateSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DelegateSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateSnapshotResponse.Merge(m, src)
}
func (m *DelegateSnapshotResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelegateSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateSnapshotResponse proto.InternalMessageInfo

// ConfChangeContext is encoded in the raftpb.ConfChange.Context field.
type ConfChangeContext struct {
	CommandID string `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	// Payload is the application-level command (i.e. an encoded
	// kvserverpb.RaftCommand).
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ConfChangeContext) Reset()         { *m = ConfChangeContext{} }
func (m *ConfChangeContext) String() string { return proto.CompactTextString(m) }
func (*ConfChangeContext) ProtoMessage()    {}
func (*ConfChangeContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_755441ac72dfaa3b, []int{9}
}
func (m *ConfChangeContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfChangeContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConfChangeContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfChangeContext.Merge(m, src)
}
func (m *ConfChangeContext) XXX_Size() int {
	return m.Size()
}
func (m *ConfChangeContext) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfChangeContext.DiscardUnknown(m)
}

var xxx_messageInfo_ConfChangeContext proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.kv.kvserver.kvserverpb.SnapshotRequest_Priority", SnapshotRequest_Priority_name, SnapshotRequest_Priority_value)
	proto.RegisterEnum("cockroach.kv.kvserver.kvserverpb.SnapshotRequest_Strategy", SnapshotRequest_Strategy_name, SnapshotRequest_Strategy_value)
	proto.RegisterEnum("cockroach.kv.kvserver.kvserverpb.SnapshotRequest_Type", SnapshotRequest_Type_name, SnapshotRequest_Type_value)
	proto.RegisterEnum("cockroach.kv.kvserver.kvserverpb.SnapshotRequest_QueueName", SnapshotRequest_QueueName_name, SnapshotRequest_QueueName_value)
	proto.RegisterEnum("cockroach.kv.kvserver.kvserverpb.SnapshotResponse_Status", SnapshotResponse_Status_name, SnapshotResponse_Status_value)
	proto.RegisterType((*RaftHeartbeat)(nil), "cockroach.kv.kvserver.kvserverpb.RaftHeartbeat")
	proto.RegisterType((*RaftMessageRequest)(nil), "cockroach.kv.kvserver.kvserverpb.RaftMessageRequest")
	proto.RegisterType((*RaftMessageRequestBatch)(nil), "cockroach.kv.kvserver.kvserverpb.RaftMessageRequestBatch")
	proto.RegisterType((*RaftMessageResponseUnion)(nil), "cockroach.kv.kvserver.kvserverpb.RaftMessageResponseUnion")
	proto.RegisterType((*RaftMessageResponse)(nil), "cockroach.kv.kvserver.kvserverpb.RaftMessageResponse")
	proto.RegisterType((*SnapshotRequest)(nil), "cockroach.kv.kvserver.kvserverpb.SnapshotRequest")
	proto.RegisterType((*SnapshotRequest_Header)(nil), "cockroach.kv.kvserver.kvserverpb.SnapshotRequest.Header")
	proto.RegisterType((*SnapshotResponse)(nil), "cockroach.kv.kvserver.kvserverpb.SnapshotResponse")
	proto.RegisterType((*DelegateSnapshotRequest)(nil), "cockroach.kv.kvserver.kvserverpb.DelegateSnapshotRequest")
	proto.RegisterType((*DelegateSnapshotResponse)(nil), "cockroach.kv.kvserver.kvserverpb.DelegateSnapshotResponse")
	proto.RegisterType((*ConfChangeContext)(nil), "cockroach.kv.kvserver.kvserverpb.ConfChangeContext")
}

func init() { proto.RegisterFile("kv/kvserver/kvserverpb/raft.proto", fileDescriptor_755441ac72dfaa3b) }

var fileDescriptor_755441ac72dfaa3b = []byte{
	// 1637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x41, 0x73, 0xdb, 0xc6,
	0x15, 0x26, 0x24, 0x90, 0x04, 0x1f, 0x45, 0x11, 0x5e, 0x39, 0x31, 0xa3, 0xb6, 0x92, 0x82, 0x49,
	0x5a, 0x4d, 0x27, 0x01, 0x27, 0xb4, 0x9b, 0x69, 0xd3, 0x13, 0x49, 0xd1, 0x23, 0x4a, 0x8a, 0x44,
	0x2f, 0x29, 0x65, 0xda, 0x4c, 0x83, 0x59, 0x82, 0x2b, 0x0a, 0x23, 0x12, 0x80, 0x17, 0x4b, 0xb5,
	0xf2, 0x3f, 0xe8, 0xad, 0x3f, 0xa1, 0xf7, 0xfe, 0x11, 0xdf, 0x9a, 0xde, 0x72, 0xe8, 0x68, 0x5a,
	0xf9, 0xd0, 0x53, 0x0f, 0xbd, 0xe6, 0xd4, 0xd9, 0xc5, 0x02, 0x84, 0x64, 0xb9, 0x09, 0x6b, 0xbb,
	0xd3, 0x13, 0x77, 0x17, 0x6f, 0xbf, 0x87, 0x7d, 0xef, 0x7b, 0xdf, 0xc3, 0x12, 0xde, 0x3f, 0xbf,
	0xa8, 0x9f, 0x5f, 0x44, 0x94, 0x5d, 0x50, 0x96, 0x0e, 0xc2, 0x61, 0x9d, 0x91, 0x53, 0x6e, 0x87,
	0x2c, 0xe0, 0x01, 0xda, 0x72, 0x03, 0xf7, 0x9c, 0x05, 0xc4, 0x3d, 0xb3, 0xcf, 0x2f, 0xec, 0xc4,
	0xc6, 0x9e, 0x1b, 0xaf, 0xbf, 0x43, 0x19, 0x0b, 0x58, 0x14, 0x0e, 0xeb, 0xf1, 0x20, 0xde, 0xb8,
	0x7e, 0x5f, 0x6e, 0xba, 0xbd, 0xfa, 0x83, 0x64, 0xd5, 0xf3, 0x39, 0x65, 0x3e, 0x99, 0x38, 0x73,
	0x5f, 0xeb, 0xef, 0x26, 0x0f, 0xa7, 0x94, 0x93, 0x11, 0xe1, 0x44, 0xad, 0xdb, 0xd9, 0xd7, 0x9c,
	0x78, 0x17, 0xd4, 0xa7, 0x51, 0x94, 0x0e, 0xc2, 0x61, 0x3a, 0x54, 0xf6, 0xd6, 0x2b, 0x8e, 0x15,
	0x71, 0xc2, 0xa9, 0xb2, 0x79, 0x4f, 0xf8, 0xad, 0x5f, 0x3c, 0x94, 0x67, 0xbd, 0x71, 0xe4, 0xf5,
	0xfb, 0xe3, 0x60, 0x1c, 0xc8, 0x61, 0x5d, 0x8c, 0xd4, 0xea, 0x4f, 0x67, 0xdc, 0x9b, 0xd4, 0x39,
	0x23, 0xae, 0xe7, 0x8f, 0x93, 0x5f, 0xb1, 0x91, 0xba, 0x01, 0x1b, 0xd1, 0x91, 0x13, 0x85, 0xc4,
	0x8f, 0x6d, 0xad, 0x7f, 0xea, 0x50, 0xc1, 0xe4, 0x94, 0xef, 0x52, 0xc2, 0xf8, 0x90, 0x12, 0x8e,
	0xbe, 0x02, 0x83, 0x11, 0x7f, 0x4c, 0x1d, 0x6f, 0x54, 0xd3, 0xb6, 0xb4, 0x6d, 0xbd, 0xd5, 0xbe,
	0xbe, 0xda, 0x2c, 0x62, 0xb1, 0xd6, 0xdd, 0xf9, 0xf6, 0x6a, 0xf3, 0xd1, 0xd8, 0xe3, 0x67, 0xb3,
	0xa1, 0xed, 0x06, 0xd3, 0x7a, 0x1a, 0xf2, 0xd1, 0x70, 0x3e, 0xae, 0x87, 0xe7, 0xe3, 0xba, 0x0a,
	0x90, 0xad, 0xf6, 0xe1, 0xa2, 0x04, 0xed, 0x8e, 0x50, 0x04, 0xd5, 0x53, 0x16, 0x4c, 0x1d, 0x46,
	0xc3, 0x89, 0xe7, 0x12, 0xe1, 0x66, 0x69, 0x4b, 0xdb, 0xae, 0xb4, 0xf6, 0xaf, 0xaf, 0x36, 0x2b,
	0x8f, 0x59, 0x30, 0xc5, 0xf1, 0x13, 0xe9, 0xec, 0xd3, 0xc5, 0x9c, 0x25, 0x3b, 0x71, 0xe5, 0x34,
	0x03, 0x34, 0x42, 0x53, 0xa8, 0xf0, 0x20, 0xeb, 0x72, 0x59, 0xba, 0xec, 0x5e, 0x5f, 0x6d, 0x96,
	0x07, 0xc1, 0x9b, 0x70, 0x58, 0xe6, 0xc1, 0xdc, 0x1d, 0x02, 0x9d, 0x53, 0x36, 0xad, 0xe9, 0x22,
	0x7e, 0x58, 0x8e, 0xd1, 0xbb, 0x50, 0x70, 0x83, 0xe9, 0xd4, 0xe3, 0xb5, 0xbc, 0x5c, 0x55, 0x33,
	0x54, 0x83, 0xe2, 0xd3, 0x99, 0x47, 0x23, 0x97, 0xd6, 0x0a, 0x5b, 0xda, 0xb6, 0x81, 0x93, 0x29,
	0x7a, 0x06, 0x3f, 0x9c, 0x90, 0xf1, 0xd8, 0xf3, 0xc7, 0xce, 0x69, 0x30, 0x99, 0x04, 0xbf, 0xa5,
	0x2c, 0x72, 0x02, 0xdf, 0x49, 0xcc, 0x8d, 0xad, 0xe5, 0xed, 0x72, 0xe3, 0xa1, 0x7d, 0x37, 0xef,
	0x53, 0xa6, 0xcd, 0xd9, 0x67, 0x1f, 0xa8, 0x61, 0x4b, 0x7f, 0x7e, 0xb5, 0x99, 0xc3, 0xef, 0x29,
	0xf8, 0xc7, 0x09, 0xfa, 0x91, 0xff, 0x44, 0xf9, 0xee, 0xc1, 0x87, 0xff, 0xc9, 0xb7, 0x43, 0x5c,
	0x77, 0xc6, 0x08, 0xa7, 0x35, 0x90, 0xef, 0xfc, 0xfe, 0x2b, 0x91, 0x9a, 0xca, 0x70, 0x4f, 0x37,
	0x8a, 0xa6, 0x61, 0xfd, 0x2b, 0x0f, 0x48, 0xf0, 0xed, 0x73, 0x1a, 0x45, 0x64, 0x4c, 0x31, 0x7d,
	0x3a, 0xa3, 0xd1, 0xdb, 0x27, 0xdd, 0x6f, 0xa0, 0x1a, 0xe3, 0x47, 0x9c, 0x30, 0xee, 0x9c, 0xd3,
	0xcb, 0x9a, 0xb1, 0xa5, 0x6d, 0xaf, 0xb4, 0x7e, 0xf6, 0xed, 0xd5, 0xe6, 0x27, 0x8b, 0x61, 0xef,
	0xd3, 0x4b, 0x5c, 0x91, 0x68, 0x7d, 0x01, 0xb6, 0x4f, 0x2f, 0xd1, 0xe7, 0xb0, 0x92, 0xe5, 0xb4,
	0x24, 0x74, 0xb9, 0xf1, 0x41, 0x26, 0x33, 0xb7, 0x08, 0xb3, 0x43, 0x23, 0x97, 0x79, 0x21, 0x0f,
	0x98, 0x4a, 0x45, 0x39, 0xc3, 0x57, 0xd4, 0x05, 0x98, 0xb3, 0x55, 0x52, 0x75, 0x31, 0xb0, 0x52,
	0xca, 0x45, 0x54, 0x87, 0xe2, 0x34, 0x0e, 0xb5, 0x24, 0x63, 0xb9, 0x51, 0xb5, 0x63, 0x19, 0xb1,
	0x55, 0x06, 0xd4, 0x96, 0xc4, 0x2a, 0x4b, 0xc7, 0xfc, 0x62, 0x74, 0x2c, 0xbd, 0x45, 0x3a, 0x1e,
	0x03, 0x9c, 0x25, 0x0a, 0x15, 0xd5, 0x0a, 0xd2, 0x53, 0xdd, 0xfe, 0x2e, 0xc1, 0xb7, 0x6f, 0x28,
	0x9b, 0xf2, 0x92, 0x01, 0x42, 0x5f, 0x41, 0x35, 0x9d, 0x39, 0x8c, 0x46, 0x61, 0x54, 0x2b, 0xbe,
	0x0e, 0xf6, 0x6a, 0x8a, 0x86, 0x05, 0xd8, 0x9e, 0x6e, 0x80, 0x59, 0xb6, 0x9e, 0xc2, 0x83, 0x97,
	0x29, 0xdf, 0x22, 0xdc, 0x3d, 0x43, 0x27, 0x60, 0xb0, 0x78, 0x1e, 0xd5, 0x34, 0xe9, 0xf9, 0xd1,
	0xf7, 0xf3, 0x7c, 0x0b, 0x2c, 0x76, 0x9f, 0x62, 0x59, 0x3d, 0xa8, 0xdd, 0xb0, 0x8a, 0xc2, 0xc0,
	0x8f, 0xe8, 0xb1, 0xef, 0x05, 0x3e, 0xb2, 0x21, 0x2f, 0x1b, 0x9d, 0x2c, 0xb4, 0x72, 0xa3, 0x76,
	0xdb, 0x61, 0x38, 0xb4, 0x3b, 0xe2, 0x39, 0x8e, 0xcd, 0x3e, 0xd3, 0x9f, 0xff, 0x71, 0x53, 0xb3,
	0xfe, 0xb1, 0x04, 0x6b, 0x77, 0x40, 0xbe, 0xf5, 0xca, 0xfd, 0xff, 0x2d, 0xad, 0x13, 0xc8, 0xcf,
	0x44, 0x40, 0x55, 0x61, 0x7d, 0xb6, 0x60, 0xe2, 0x32, 0x29, 0x51, 0xd8, 0x31, 0x9c, 0xf5, 0x67,
	0x03, 0xaa, 0x7d, 0x9f, 0x84, 0xd1, 0x59, 0xc0, 0x13, 0x7d, 0xec, 0x41, 0xe1, 0x8c, 0x92, 0x11,
	0x4d, 0x92, 0xf6, 0xf3, 0xef, 0x76, 0x76, 0x0b, 0xc2, 0xde, 0x95, 0xfb, 0xb1, 0xc2, 0x41, 0x3f,
	0x06, 0xe3, 0xfc, 0xc2, 0x19, 0x0a, 0x16, 0xca, 0x98, 0xae, 0xb4, 0xca, 0x22, 0x6f, 0xfb, 0x27,
	0x92, 0x98, 0xb8, 0x78, 0x7e, 0x11, 0x33, 0xf4, 0x3e, 0xe4, 0x4f, 0x3d, 0x9f, 0x4c, 0xe4, 0x29,
	0x0d, 0x1c, 0x4f, 0xd6, 0xff, 0x9a, 0x87, 0x42, 0x0c, 0x88, 0xba, 0x90, 0x97, 0x5f, 0x2b, 0x52,
	0x2e, 0xca, 0x8d, 0x8f, 0x5f, 0xf1, 0x66, 0x11, 0x0f, 0x18, 0x19, 0xd3, 0x79, 0x68, 0xfb, 0x62,
	0x53, 0x72, 0x72, 0x89, 0x80, 0x26, 0x70, 0x5f, 0x88, 0x93, 0xa3, 0xb4, 0xc8, 0x51, 0x74, 0x56,
	0x39, 0x7f, 0x9d, 0xca, 0x40, 0xec, 0xe5, 0x9e, 0xf3, 0x23, 0x00, 0xd5, 0x13, 0xbc, 0x67, 0x54,
	0x52, 0x61, 0x19, 0x97, 0x62, 0x5d, 0xf7, 0x9e, 0x51, 0x51, 0x9a, 0x21, 0xf3, 0x02, 0xe6, 0xf1,
	0x4b, 0xd9, 0x98, 0x57, 0xbf, 0x4f, 0x86, 0x6f, 0x07, 0xbd, 0xa7, 0x10, 0x70, 0x8a, 0x25, 0x70,
	0x23, 0x2e, 0x3a, 0xe2, 0xf8, 0xb2, 0x56, 0xfc, 0x6f, 0x71, 0xfb, 0x0a, 0x01, 0xa7, 0x58, 0x68,
	0x0f, 0x74, 0x7e, 0x19, 0x0a, 0x19, 0x16, 0x98, 0x9f, 0x2e, 0x8e, 0x39, 0xb8, 0x0c, 0x29, 0x96,
	0x18, 0xe8, 0x18, 0x7e, 0x32, 0xa2, 0x21, 0xa3, 0x2e, 0xe1, 0x74, 0xe4, 0xcc, 0x7c, 0x55, 0x2f,
	0x62, 0xc2, 0xd9, 0xcc, 0x8f, 0x47, 0x71, 0xd6, 0x0d, 0x49, 0x8b, 0x0f, 0xe6, 0xe6, 0xc7, 0x19,
	0xeb, 0x41, 0x62, 0x2c, 0x93, 0x8d, 0xc6, 0x70, 0x2f, 0xa2, 0xfe, 0x88, 0x32, 0xe7, 0xe9, 0x8c,
	0xce, 0xa8, 0xe3, 0x93, 0x69, 0xfc, 0x01, 0xb1, 0xda, 0xf8, 0xe5, 0xe2, 0xef, 0xfb, 0x44, 0x60,
	0x1c, 0x92, 0x29, 0xc5, 0xd5, 0x18, 0x35, 0x5d, 0x40, 0x0d, 0x78, 0xe7, 0x86, 0xa3, 0x34, 0x91,
	0xe5, 0x2d, 0x6d, 0x5b, 0xc3, 0x6b, 0x19, 0xfb, 0x24, 0x43, 0x7b, 0xba, 0xa1, 0x99, 0x4b, 0x7b,
	0xba, 0xa1, 0x9b, 0x79, 0xeb, 0x11, 0x18, 0xc9, 0x3a, 0x2a, 0x43, 0xf1, 0xf8, 0x70, 0xff, 0xf0,
	0xe8, 0x8b, 0x43, 0x33, 0x87, 0x56, 0xc0, 0xc0, 0x9d, 0xf6, 0xd1, 0x49, 0x07, 0xff, 0xca, 0xd4,
	0x50, 0x05, 0x4a, 0xb8, 0xd3, 0x6a, 0x1e, 0x34, 0x0f, 0xdb, 0x1d, 0x73, 0xc9, 0xaa, 0x81, 0x91,
	0xe4, 0x45, 0x18, 0xee, 0x9f, 0x38, 0xad, 0xe6, 0xa0, 0xbd, 0x6b, 0xe6, 0xac, 0x4f, 0x40, 0x17,
	0xd1, 0x45, 0xef, 0x02, 0x3a, 0xe9, 0x36, 0x9d, 0xfe, 0x61, 0xb3, 0xd7, 0xdf, 0x3d, 0x1a, 0x38,
	0x4f, 0x8e, 0x3b, 0xc7, 0x1d, 0x33, 0x27, 0x7c, 0x74, 0x0f, 0xbb, 0x83, 0x6e, 0xf3, 0xc0, 0xd4,
	0x2c, 0xdd, 0x58, 0x32, 0x97, 0xac, 0x1d, 0x28, 0xcd, 0xcf, 0x53, 0x82, 0xfc, 0xd1, 0x60, 0xb7,
	0x83, 0xcd, 0x1c, 0x5a, 0x83, 0x2a, 0xee, 0xf4, 0x0e, 0xba, 0xed, 0xe6, 0xa0, 0xa3, 0xf6, 0x6b,
	0xe8, 0x01, 0xac, 0xe1, 0xe6, 0xe3, 0xc1, 0x6d, 0x60, 0x71, 0x9c, 0x65, 0x53, 0xb7, 0x7e, 0xbf,
	0x0c, 0xe6, 0x3c, 0x7a, 0x4a, 0xb8, 0x9f, 0x40, 0x41, 0x64, 0x70, 0x16, 0x49, 0x49, 0x59, 0x6d,
	0xfc, 0x62, 0x91, 0x0c, 0xc4, 0x18, 0x76, 0x5f, 0x02, 0x60, 0x05, 0x84, 0x3e, 0x06, 0x94, 0xa1,
	0x4d, 0xf2, 0xdd, 0x21, 0xaa, 0xb7, 0x84, 0xef, 0xcd, 0x9f, 0xa8, 0x3a, 0x14, 0x1f, 0x65, 0x6e,
	0x30, 0x99, 0x50, 0x97, 0xab, 0x3b, 0x49, 0x54, 0xd3, 0x65, 0x0f, 0xb4, 0x33, 0xaf, 0x22, 0xee,
	0x32, 0xb6, 0xba, 0xc3, 0xd8, 0xe9, 0x5d, 0xc6, 0xc6, 0xea, 0x2e, 0xd3, 0x0f, 0x49, 0x22, 0x9f,
	0xab, 0x29, 0x98, 0x58, 0x8c, 0xd0, 0x3e, 0x54, 0xa8, 0xef, 0x06, 0xe2, 0xc2, 0x13, 0xf7, 0xbb,
	0x58, 0xa0, 0xb6, 0x32, 0xe0, 0xc9, 0x7d, 0xd0, 0xee, 0xc4, 0x86, 0xb2, 0xef, 0x29, 0xb8, 0x15,
	0x9a, 0x59, 0xb3, 0x9a, 0x50, 0x88, 0x0f, 0xfb, 0x12, 0x1f, 0x9a, 0xed, 0x76, 0xa7, 0x37, 0xe8,
	0xec, 0x98, 0x9a, 0x78, 0xd4, 0xec, 0xf5, 0x0e, 0xba, 0x9d, 0x1d, 0x73, 0x49, 0xe4, 0xac, 0x83,
	0xf1, 0x11, 0x36, 0x97, 0x2d, 0x41, 0x2a, 0x5d, 0xe5, 0xe2, 0x4f, 0x05, 0x78, 0xb0, 0x43, 0x27,
	0x74, 0x4c, 0x38, 0xbd, 0xad, 0xf2, 0x6f, 0xbb, 0x97, 0x7e, 0x09, 0x6b, 0x6e, 0x10, 0xb0, 0x91,
	0xe7, 0x13, 0x1e, 0xb0, 0xd7, 0x68, 0xa9, 0x28, 0x03, 0x93, 0xb4, 0xc3, 0x2f, 0xe0, 0x1e, 0xa3,
	0xae, 0x17, 0x7a, 0xd4, 0xe7, 0xaf, 0xd1, 0x60, 0xcd, 0x14, 0x24, 0x01, 0x3e, 0x06, 0x73, 0xa4,
	0x02, 0x36, 0x72, 0xe2, 0xca, 0x55, 0x2d, 0x77, 0x11, 0xdc, 0x6a, 0x8a, 0xd1, 0x97, 0x10, 0x37,
	0xf4, 0x3d, 0xff, 0x06, 0xf5, 0xfd, 0x4e, 0x91, 0x2b, 0xfd, 0x2f, 0x45, 0x0e, 0x5e, 0x29, 0x72,
	0x69, 0x93, 0x28, 0xbc, 0x81, 0x26, 0x91, 0x5c, 0x72, 0x8b, 0x99, 0x4b, 0xee, 0x21, 0x54, 0xef,
	0x6a, 0x10, 0xe5, 0xc6, 0x87, 0x77, 0xa5, 0x8a, 0x9c, 0xf2, 0x9b, 0x1d, 0x02, 0xaf, 0xf2, 0x1b,
	0x73, 0xeb, 0x2f, 0x1a, 0xd4, 0x5e, 0xae, 0x16, 0xa5, 0x60, 0x27, 0xb0, 0x12, 0xf9, 0x24, 0x4c,
	0xe6, 0xea, 0xd3, 0xa8, 0xb1, 0xb8, 0x8e, 0xe1, 0x1b, 0x38, 0x77, 0xe9, 0xd2, 0xd2, 0x9b, 0xd3,
	0x25, 0xeb, 0x4b, 0xb8, 0xd7, 0x0e, 0xfc, 0xd3, 0xf6, 0x99, 0xa8, 0xca, 0x76, 0xe0, 0x73, 0xfa,
	0x3b, 0x8e, 0x3e, 0x02, 0x70, 0x83, 0xe9, 0x94, 0xf8, 0xa3, 0xa4, 0xf8, 0x4b, 0xad, 0xca, 0xf5,
	0xd5, 0x66, 0xa9, 0x1d, 0xaf, 0x76, 0x77, 0x70, 0x49, 0x19, 0x74, 0x47, 0xe2, 0x92, 0x16, 0x92,
	0xcb, 0x49, 0x40, 0xe2, 0xff, 0x4e, 0x56, 0x70, 0x32, 0x6d, 0x7d, 0xf4, 0xfc, 0xef, 0x1b, 0xb9,
	0xe7, 0xd7, 0x1b, 0xda, 0xd7, 0xd7, 0x1b, 0xda, 0x37, 0xd7, 0x1b, 0xda, 0xdf, 0xae, 0x37, 0xb4,
	0x3f, 0xbc, 0xd8, 0xc8, 0x7d, 0xfd, 0x62, 0x23, 0xf7, 0xcd, 0x8b, 0x8d, 0xdc, 0xaf, 0x61, 0x1e,
	0x88, 0x61, 0x41, 0xfe, 0x09, 0xf4, 0xf0, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x20, 0x98,
	0x65, 0x5e, 0x13, 0x00, 0x00,
}

func (m *RaftHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LaggingFollowersOnQuiesceAccurate {
		i--
		if m.LaggingFollowersOnQuiesceAccurate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.LaggingFollowersOnQuiesce) > 0 {
		for iNdEx := len(m.LaggingFollowersOnQuiesce) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LaggingFollowersOnQuiesce[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Quiesce {
		i--
		if m.Quiesce {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Commit != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.Commit))
		i--
		dAtA[i] = 0x28
	}
	if m.Term != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x20
	}
	if m.ToReplicaID != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.ToReplicaID))
		i--
		dAtA[i] = 0x18
	}
	if m.FromReplicaID != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.FromReplicaID))
		i--
		dAtA[i] = 0x10
	}
	if m.RangeID != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RaftMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LaggingFollowersOnQuiesce) > 0 {
		for iNdEx := len(m.LaggingFollowersOnQuiesce) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LaggingFollowersOnQuiesce[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.RangeStartKey) > 0 {
		i -= len(m.RangeStartKey)
		copy(dAtA[i:], m.RangeStartKey)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.RangeStartKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.HeartbeatResps) > 0 {
		for iNdEx := len(m.HeartbeatResps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HeartbeatResps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Heartbeats) > 0 {
		for iNdEx := len(m.Heartbeats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heartbeats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Quiesce {
		i--
		if m.Quiesce {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.ToReplica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.FromReplica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.RangeID != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RaftMessageRequestBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMessageRequestBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftMessageRequestBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RaftMessageResponseUnion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMessageResponseUnion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftMessageResponseUnion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RaftMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Union.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.ToReplica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.FromReplica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.RangeID != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Final {
		i--
		if m.Final {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.KVBatch) > 0 {
		i -= len(m.KVBatch)
		copy(dAtA[i:], m.KVBatch)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.KVBatch)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotRequest_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotRequest_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotRequest_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SenderQueuePriority != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SenderQueuePriority))))
		i--
		dAtA[i] = 0x59
	}
	if m.SenderQueueName != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.SenderQueueName))
		i--
		dAtA[i] = 0x50
	}
	if m.Type != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x48
	}
	if m.DeprecatedUnreplicatedTruncatedState {
		i--
		if m.DeprecatedUnreplicatedTruncatedState {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Strategy != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.Strategy))
		i--
		dAtA[i] = 0x38
	}
	if m.Priority != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.RangeSize != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.RangeSize))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.RaftMessageRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *SnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EncodedError.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.CollectedSpans) > 0 {
		for iNdEx := len(m.CollectedSpans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CollectedSpans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DeprecatedMessage) > 0 {
		i -= len(m.DeprecatedMessage)
		copy(dAtA[i:], m.DeprecatedMessage)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.DeprecatedMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegateSnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateSnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateSnapshotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SenderQueuePriority != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SenderQueuePriority))))
		i--
		dAtA[i] = 0x51
	}
	if m.SenderQueueName != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.SenderQueueName))
		i--
		dAtA[i] = 0x48
	}
	if m.TruncatedState != nil {
		{
			size, err := m.TruncatedState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Term != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x38
	}
	if m.Type != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.Priority != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.DelegatedSender.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.RecipientReplica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CoordinatorReplica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.RangeID != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegateSnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateSnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateSnapshotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollectedSpans) > 0 {
		for iNdEx := len(m.CollectedSpans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CollectedSpans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SnapResponse != nil {
		{
			size, err := m.SnapResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfChangeContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfChangeContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfChangeContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CommandID) > 0 {
		i -= len(m.CommandID)
		copy(dAtA[i:], m.CommandID)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.CommandID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaft(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RaftHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeID != 0 {
		n += 1 + sovRaft(uint64(m.RangeID))
	}
	if m.FromReplicaID != 0 {
		n += 1 + sovRaft(uint64(m.FromReplicaID))
	}
	if m.ToReplicaID != 0 {
		n += 1 + sovRaft(uint64(m.ToReplicaID))
	}
	if m.Term != 0 {
		n += 1 + sovRaft(uint64(m.Term))
	}
	if m.Commit != 0 {
		n += 1 + sovRaft(uint64(m.Commit))
	}
	if m.Quiesce {
		n += 2
	}
	if len(m.LaggingFollowersOnQuiesce) > 0 {
		for _, e := range m.LaggingFollowersOnQuiesce {
			l = e.Size()
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	if m.LaggingFollowersOnQuiesceAccurate {
		n += 2
	}
	return n
}

func (m *RaftMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeID != 0 {
		n += 1 + sovRaft(uint64(m.RangeID))
	}
	l = m.FromReplica.Size()
	n += 1 + l + sovRaft(uint64(l))
	l = m.ToReplica.Size()
	n += 1 + l + sovRaft(uint64(l))
	l = m.Message.Size()
	n += 1 + l + sovRaft(uint64(l))
	if m.Quiesce {
		n += 2
	}
	if len(m.Heartbeats) > 0 {
		for _, e := range m.Heartbeats {
			l = e.Size()
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	if len(m.HeartbeatResps) > 0 {
		for _, e := range m.HeartbeatResps {
			l = e.Size()
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	l = len(m.RangeStartKey)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	if len(m.LaggingFollowersOnQuiesce) > 0 {
		for _, e := range m.LaggingFollowersOnQuiesce {
			l = e.Size()
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	return n
}

func (m *RaftMessageRequestBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	return n
}

func (m *RaftMessageResponseUnion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}

func (m *RaftMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeID != 0 {
		n += 1 + sovRaft(uint64(m.RangeID))
	}
	l = m.FromReplica.Size()
	n += 1 + l + sovRaft(uint64(l))
	l = m.ToReplica.Size()
	n += 1 + l + sovRaft(uint64(l))
	l = m.Union.Size()
	n += 1 + l + sovRaft(uint64(l))
	return n
}

func (m *SnapshotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	l = len(m.KVBatch)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.Final {
		n += 2
	}
	return n
}

func (m *SnapshotRequest_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RaftMessageRequest.Size()
	n += 1 + l + sovRaft(uint64(l))
	if m.RangeSize != 0 {
		n += 1 + sovRaft(uint64(m.RangeSize))
	}
	l = m.State.Size()
	n += 1 + l + sovRaft(uint64(l))
	if m.Priority != 0 {
		n += 1 + sovRaft(uint64(m.Priority))
	}
	if m.Strategy != 0 {
		n += 1 + sovRaft(uint64(m.Strategy))
	}
	if m.DeprecatedUnreplicatedTruncatedState {
		n += 2
	}
	if m.Type != 0 {
		n += 1 + sovRaft(uint64(m.Type))
	}
	if m.SenderQueueName != 0 {
		n += 1 + sovRaft(uint64(m.SenderQueueName))
	}
	if m.SenderQueuePriority != 0 {
		n += 9
	}
	return n
}

func (m *SnapshotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovRaft(uint64(m.Status))
	}
	l = len(m.DeprecatedMessage)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	if len(m.CollectedSpans) > 0 {
		for _, e := range m.CollectedSpans {
			l = e.Size()
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	l = m.EncodedError.Size()
	n += 1 + l + sovRaft(uint64(l))
	return n
}

func (m *DelegateSnapshotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeID != 0 {
		n += 1 + sovRaft(uint64(m.RangeID))
	}
	l = m.CoordinatorReplica.Size()
	n += 1 + l + sovRaft(uint64(l))
	l = m.RecipientReplica.Size()
	n += 1 + l + sovRaft(uint64(l))
	l = m.DelegatedSender.Size()
	n += 1 + l + sovRaft(uint64(l))
	if m.Priority != 0 {
		n += 1 + sovRaft(uint64(m.Priority))
	}
	if m.Type != 0 {
		n += 1 + sovRaft(uint64(m.Type))
	}
	if m.Term != 0 {
		n += 1 + sovRaft(uint64(m.Term))
	}
	if m.TruncatedState != nil {
		l = m.TruncatedState.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.SenderQueueName != 0 {
		n += 1 + sovRaft(uint64(m.SenderQueueName))
	}
	if m.SenderQueuePriority != 0 {
		n += 9
	}
	return n
}

func (m *DelegateSnapshotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SnapResponse != nil {
		l = m.SnapResponse.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	if len(m.CollectedSpans) > 0 {
		for _, e := range m.CollectedSpans {
			l = e.Size()
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	return n
}

func (m *ConfChangeContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommandID)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}

func sovRaft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaft(x uint64) (n int) {
	return sovRaft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RaftMessageResponseUnion) GetValue() interface{} {
	if this.Error != nil {
		return this.Error
	}
	return nil
}

func (this *RaftMessageResponseUnion) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *roachpb.Error:
		this.Error = vt
	default:
		return false
	}
	return true
}
func (m *RaftHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromReplicaID", wireType)
			}
			m.FromReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromReplicaID |= github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToReplicaID", wireType)
			}
			m.ToReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToReplicaID |= github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			m.Commit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quiesce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Quiesce = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaggingFollowersOnQuiesce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LaggingFollowersOnQuiesce = append(m.LaggingFollowersOnQuiesce, livenesspb.Liveness{})
			if err := m.LaggingFollowersOnQuiesce[len(m.LaggingFollowersOnQuiesce)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaggingFollowersOnQuiesceAccurate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LaggingFollowersOnQuiesceAccurate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FromReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quiesce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Quiesce = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heartbeats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heartbeats = append(m.Heartbeats, RaftHeartbeat{})
			if err := m.Heartbeats[len(m.Heartbeats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatResps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeartbeatResps = append(m.HeartbeatResps, RaftHeartbeat{})
			if err := m.HeartbeatResps[len(m.HeartbeatResps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeStartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RangeStartKey = append(m.RangeStartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RangeStartKey == nil {
				m.RangeStartKey = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaggingFollowersOnQuiesce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LaggingFollowersOnQuiesce = append(m.LaggingFollowersOnQuiesce, livenesspb.Liveness{})
			if err := m.LaggingFollowersOnQuiesce[len(m.LaggingFollowersOnQuiesce)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftMessageRequestBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMessageRequestBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMessageRequestBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, RaftMessageRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftMessageResponseUnion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMessageResponseUnion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMessageResponseUnion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &roachpb.Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FromReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Union", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Union.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &SnapshotRequest_Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KVBatch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KVBatch = append(m.KVBatch[:0], dAtA[iNdEx:postIndex]...)
			if m.KVBatch == nil {
				m.KVBatch = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Final = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotRequest_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftMessageRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RaftMessageRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeSize", wireType)
			}
			m.RangeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= SnapshotRequest_Priority(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			m.Strategy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Strategy |= SnapshotRequest_Strategy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedUnreplicatedTruncatedState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeprecatedUnreplicatedTruncatedState = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SnapshotRequest_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderQueueName", wireType)
			}
			m.SenderQueueName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderQueueName |= SnapshotRequest_QueueName(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderQueuePriority", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SenderQueuePriority = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SnapshotResponse_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecatedMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedSpans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectedSpans = append(m.CollectedSpans, tracingpb.RecordedSpan{})
			if err := m.CollectedSpans[len(m.CollectedSpans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EncodedError.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegateSnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateSnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateSnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoordinatorReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecipientReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatedSender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegatedSender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= SnapshotRequest_Priority(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SnapshotRequest_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TruncatedState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TruncatedState == nil {
				m.TruncatedState = &roachpb.RaftTruncatedState{}
			}
			if err := m.TruncatedState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderQueueName", wireType)
			}
			m.SenderQueueName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderQueueName |= SnapshotRequest_QueueName(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderQueuePriority", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SenderQueuePriority = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegateSnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateSnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateSnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SnapResponse == nil {
				m.SnapResponse = &SnapshotResponse{}
			}
			if err := m.SnapResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedSpans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectedSpans = append(m.CollectedSpans, tracingpb.RecordedSpan{})
			if err := m.CollectedSpans[len(m.CollectedSpans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfChangeContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfChangeContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfChangeContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaft = fmt.Errorf("proto: unexpected end of group")
)
