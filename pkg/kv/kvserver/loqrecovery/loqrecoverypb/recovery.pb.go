// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/loqrecovery/loqrecoverypb/recovery.proto

package loqrecoverypb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DescriptorChangeType int32

const (
	DescriptorChangeType_Split         DescriptorChangeType = 0
	DescriptorChangeType_Merge         DescriptorChangeType = 1
	DescriptorChangeType_ReplicaChange DescriptorChangeType = 2
)

var DescriptorChangeType_name = map[int32]string{
	0: "Split",
	1: "Merge",
	2: "ReplicaChange",
}

var DescriptorChangeType_value = map[string]int32{
	"Split":         0,
	"Merge":         1,
	"ReplicaChange": 2,
}

func (x DescriptorChangeType) String() string {
	return proto.EnumName(DescriptorChangeType_name, int32(x))
}

func (DescriptorChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a2cc96948b3cab0, []int{0}
}

// DescriptorChangeInfo future descriptor change info extracted from commit
// triggers in raft log.
type DescriptorChangeInfo struct {
	// Change type.
	ChangeType DescriptorChangeType `protobuf:"varint,1,opt,name=changeType,proto3,enum=cockroach.kv.kvserver.loqrecovery.loqrecoverypb.DescriptorChangeType" json:"changeType,omitempty"`
	// Range descriptor containing new state of for replica change updates and
	// LHS for split and merge operations.
	Desc *roachpb.RangeDescriptor `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// Optional range descriptor with is populated for split and merge changes
	// and contains RHS descriptor for the operation.
	OtherDesc *roachpb.RangeDescriptor `protobuf:"bytes,3,opt,name=otherDesc,proto3" json:"otherDesc,omitempty"`
}

func (m *DescriptorChangeInfo) Reset()         { *m = DescriptorChangeInfo{} }
func (m *DescriptorChangeInfo) String() string { return proto.CompactTextString(m) }
func (*DescriptorChangeInfo) ProtoMessage()    {}
func (*DescriptorChangeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2cc96948b3cab0, []int{0}
}
func (m *DescriptorChangeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescriptorChangeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DescriptorChangeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescriptorChangeInfo.Merge(m, src)
}
func (m *DescriptorChangeInfo) XXX_Size() int {
	return m.Size()
}
func (m *DescriptorChangeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DescriptorChangeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DescriptorChangeInfo proto.InternalMessageInfo

// ReplicaInfo contains info about state of range replica for the purpose of range
// recovery. This information should be enough for recovery algorithm to pick a
// survivor replica in when not replicas are available.
// Information includes range descriptor as well as parts of raft state.
type ReplicaInfo struct {
	NodeID                   github_com_cockroachdb_cockroach_pkg_roachpb.NodeID  `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	StoreID                  github_com_cockroachdb_cockroach_pkg_roachpb.StoreID `protobuf:"varint,2,opt,name=store_id,json=storeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StoreID" json:"store_id,omitempty"`
	Desc                     roachpb.RangeDescriptor                              `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc"`
	RaftAppliedIndex         uint64                                               `protobuf:"varint,4,opt,name=raft_applied_index,json=raftAppliedIndex,proto3" json:"raft_applied_index,omitempty"`
	RaftCommittedIndex       uint64                                               `protobuf:"varint,5,opt,name=raft_committed_index,json=raftCommittedIndex,proto3" json:"raft_committed_index,omitempty"`
	RaftLogDescriptorChanges []DescriptorChangeInfo                               `protobuf:"bytes,6,rep,name=raft_log_descriptor_changes,json=raftLogDescriptorChanges,proto3" json:"raft_log_descriptor_changes,omitempty"`
}

func (m *ReplicaInfo) Reset()         { *m = ReplicaInfo{} }
func (m *ReplicaInfo) String() string { return proto.CompactTextString(m) }
func (*ReplicaInfo) ProtoMessage()    {}
func (*ReplicaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2cc96948b3cab0, []int{1}
}
func (m *ReplicaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaInfo.Merge(m, src)
}
func (m *ReplicaInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaInfo proto.InternalMessageInfo

// Collection of replica information gathered in a collect-info run.
// ReplicaInfo in Replicas does not have to be constrained to a single node,
// but in practice info collected from remote cluster will contain info per
// node. In case of offline collection, replicas will belong to all stores
// provided to the command regardless of owning node.
type NodeReplicaInfo struct {
	Replicas []ReplicaInfo `protobuf:"bytes,1,rep,name=replicas,proto3" json:"replicas"`
}

func (m *NodeReplicaInfo) Reset()         { *m = NodeReplicaInfo{} }
func (m *NodeReplicaInfo) String() string { return proto.CompactTextString(m) }
func (*NodeReplicaInfo) ProtoMessage()    {}
func (*NodeReplicaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2cc96948b3cab0, []int{2}
}
func (m *NodeReplicaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeReplicaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeReplicaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReplicaInfo.Merge(m, src)
}
func (m *NodeReplicaInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeReplicaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReplicaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReplicaInfo proto.InternalMessageInfo

// Replica info collected from one or more nodes of a cluster.
type ClusterReplicaInfo struct {
	// ClusterID contains id of the cluster from which info was collected.
	ClusterID string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Descriptors contains range descriptors collected from meta ranges.
	// Descriptors are optional and only present in collected info if system
	// ranges didn't lose quorum. It could also be partial in some cases.
	Descriptors []roachpb.RangeDescriptor `protobuf:"bytes,2,rep,name=descriptors,proto3" json:"descriptors,omitempty"`
	// LocalInfo contains one or more NodeReplicaInfo structs each containing a
	// subset of full info. They are not guaranteed to be split by node, each
	// element should contain disjoint subset of replica infos.
	LocalInfo []NodeReplicaInfo `protobuf:"bytes,3,rep,name=local_info,json=localInfo,proto3" json:"local_info"`
}

func (m *ClusterReplicaInfo) Reset()         { *m = ClusterReplicaInfo{} }
func (m *ClusterReplicaInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterReplicaInfo) ProtoMessage()    {}
func (*ClusterReplicaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2cc96948b3cab0, []int{3}
}
func (m *ClusterReplicaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterReplicaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterReplicaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterReplicaInfo.Merge(m, src)
}
func (m *ClusterReplicaInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClusterReplicaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterReplicaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterReplicaInfo proto.InternalMessageInfo

// ReplicaUpdate contains information that needs to be updated on replica on the node
// to make it a designated survivor so that replica could act as a source of truth when
// doing loss of quorum recovery.
type ReplicaUpdate struct {
	RangeID       github_com_cockroachdb_cockroach_pkg_roachpb.RangeID   `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty" yaml:"RangeID"`
	StartKey      RecoveryKey                                            `protobuf:"bytes,2,opt,name=start_key,json=startKey,proto3,casttype=RecoveryKey" json:"start_key,omitempty" yaml:"StartKey"`
	OldReplicaID  github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID `protobuf:"varint,3,opt,name=old_replica_id,json=oldReplicaId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID" json:"old_replica_id,omitempty" yaml:"OldReplicaID"`
	NewReplica    roachpb.ReplicaDescriptor                              `protobuf:"bytes,4,opt,name=new_replica,json=newReplica,proto3" json:"new_replica" yaml:"NewReplica"`
	NextReplicaID github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID `protobuf:"varint,5,opt,name=next_replica_id,json=nextReplicaId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID" json:"next_replica_id,omitempty" yaml:"NextReplicaID"`
}

func (m *ReplicaUpdate) Reset()      { *m = ReplicaUpdate{} }
func (*ReplicaUpdate) ProtoMessage() {}
func (*ReplicaUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2cc96948b3cab0, []int{4}
}
func (m *ReplicaUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicaUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaUpdate.Merge(m, src)
}
func (m *ReplicaUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaUpdate proto.InternalMessageInfo

// ReplicaUpdatePlan Collection of updates for all recoverable replicas in the cluster.
type ReplicaUpdatePlan struct {
	Updates []ReplicaUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates"`
	// PlanID contains ID generated by cli when generating recovery plan and is subsequently
	// used for status checks and auditing purposes.
	PlanID github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,2,opt,name=plan_id,json=planId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"plan_id"`
	// DecommissionedNodeIDs is a set of node IDs that need to be marked as decommissioned as a
	// part of loss of quorum recovery process.
	DecommissionedNodeIDs []github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,3,rep,packed,name=decommissioned_node_ids,json=decommissionedNodeIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"decommissioned_node_ids,omitempty"`
	// ClusterID contains id of the cluster from which info was collected.
	ClusterID string `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (m *ReplicaUpdatePlan) Reset()         { *m = ReplicaUpdatePlan{} }
func (m *ReplicaUpdatePlan) String() string { return proto.CompactTextString(m) }
func (*ReplicaUpdatePlan) ProtoMessage()    {}
func (*ReplicaUpdatePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2cc96948b3cab0, []int{5}
}
func (m *ReplicaUpdatePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaUpdatePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicaUpdatePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaUpdatePlan.Merge(m, src)
}
func (m *ReplicaUpdatePlan) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaUpdatePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaUpdatePlan.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaUpdatePlan proto.InternalMessageInfo

// ReplicaRecoveryRecord is a struct that loss of quorum recovery commands
// write to the store locally when replicas are rewritten to preserve information
// about changes. This records are then consumed on startup to post data to
// appropriate destinations like log, rangelog etc.
// This struct is a union of all necessary information that is needed by all
// downstream destinations.
type ReplicaRecoveryRecord struct {
	// Timestamp of loss of quorum recovery application phase. Timestamp is chosen by process
	// rewriting changes before any replica is rewritten. All events created by single process
	// will share the same timestamp. Different processes updating different stores will
	// produce different timestamps even if updates originated from the same recovery plan.
	// Expressed as nanoseconds since the Unix epoch.
	Timestamp       int64                                                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RangeID         github_com_cockroachdb_cockroach_pkg_roachpb.RangeID   `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty" yaml:"RangeID"`
	StartKey        RecoveryKey                                            `protobuf:"bytes,3,opt,name=start_key,json=startKey,proto3,casttype=RecoveryKey" json:"start_key,omitempty" yaml:"StartKey"`
	EndKey          RecoveryKey                                            `protobuf:"bytes,4,opt,name=end_key,json=endKey,proto3,casttype=RecoveryKey" json:"end_key,omitempty" yaml:"StartKey"`
	OldReplicaID    github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID `protobuf:"varint,5,opt,name=old_replica_id,json=oldReplicaId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID" json:"old_replica_id,omitempty" yaml:"OldReplicaID"`
	NewReplica      roachpb.ReplicaDescriptor                              `protobuf:"bytes,6,opt,name=new_replica,json=newReplica,proto3" json:"new_replica" yaml:"NewReplica"`
	RangeDescriptor roachpb.RangeDescriptor                                `protobuf:"bytes,7,opt,name=range_descriptor,json=rangeDescriptor,proto3" json:"range_descriptor" yaml:"RangeDescriptor"`
}

func (m *ReplicaRecoveryRecord) Reset()         { *m = ReplicaRecoveryRecord{} }
func (m *ReplicaRecoveryRecord) String() string { return proto.CompactTextString(m) }
func (*ReplicaRecoveryRecord) ProtoMessage()    {}
func (*ReplicaRecoveryRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2cc96948b3cab0, []int{6}
}
func (m *ReplicaRecoveryRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaRecoveryRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicaRecoveryRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaRecoveryRecord.Merge(m, src)
}
func (m *ReplicaRecoveryRecord) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaRecoveryRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaRecoveryRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaRecoveryRecord proto.InternalMessageInfo

// NodeRecoveryStatus contains information about loss of quorum recovery
// operations of a node.
type NodeRecoveryStatus struct {
	// PendingPlanID contains an ID or recovery plan that is staged on the node for
	// application on the next restart.
	PendingPlanID *github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,1,opt,name=pending_plan_id,json=pendingPlanId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"pending_plan_id,omitempty"`
	// AppliedPlanID contains an ID of recovery plan that was processed last.
	// If plan application succeeded, then ApplyError will be nil, otherwise it will
	// contain an error message.
	AppliedPlanID *github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,2,opt,name=applied_plan_id,json=appliedPlanId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"applied_plan_id,omitempty"`
	// LastProcessingTime is a node wall clock time when last recovery plan was applied.
	ApplyTimestamp *time.Time `protobuf:"bytes,3,opt,name=apply_timestamp,json=applyTimestamp,proto3,stdtime" json:"apply_timestamp,omitempty"`
	// If most recent recovery plan application failed, Error will contain
	// aggregated error messages containing all encountered errors.
	Error string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *NodeRecoveryStatus) Reset()         { *m = NodeRecoveryStatus{} }
func (m *NodeRecoveryStatus) String() string { return proto.CompactTextString(m) }
func (*NodeRecoveryStatus) ProtoMessage()    {}
func (*NodeRecoveryStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2cc96948b3cab0, []int{7}
}
func (m *NodeRecoveryStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeRecoveryStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeRecoveryStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRecoveryStatus.Merge(m, src)
}
func (m *NodeRecoveryStatus) XXX_Size() int {
	return m.Size()
}
func (m *NodeRecoveryStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRecoveryStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRecoveryStatus proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.kv.kvserver.loqrecovery.loqrecoverypb.DescriptorChangeType", DescriptorChangeType_name, DescriptorChangeType_value)
	proto.RegisterType((*DescriptorChangeInfo)(nil), "cockroach.kv.kvserver.loqrecovery.loqrecoverypb.DescriptorChangeInfo")
	proto.RegisterType((*ReplicaInfo)(nil), "cockroach.kv.kvserver.loqrecovery.loqrecoverypb.ReplicaInfo")
	proto.RegisterType((*NodeReplicaInfo)(nil), "cockroach.kv.kvserver.loqrecovery.loqrecoverypb.NodeReplicaInfo")
	proto.RegisterType((*ClusterReplicaInfo)(nil), "cockroach.kv.kvserver.loqrecovery.loqrecoverypb.ClusterReplicaInfo")
	proto.RegisterType((*ReplicaUpdate)(nil), "cockroach.kv.kvserver.loqrecovery.loqrecoverypb.ReplicaUpdate")
	proto.RegisterType((*ReplicaUpdatePlan)(nil), "cockroach.kv.kvserver.loqrecovery.loqrecoverypb.ReplicaUpdatePlan")
	proto.RegisterType((*ReplicaRecoveryRecord)(nil), "cockroach.kv.kvserver.loqrecovery.loqrecoverypb.ReplicaRecoveryRecord")
	proto.RegisterType((*NodeRecoveryStatus)(nil), "cockroach.kv.kvserver.loqrecovery.loqrecoverypb.NodeRecoveryStatus")
}

func init() {
	proto.RegisterFile("kv/kvserver/loqrecovery/loqrecoverypb/recovery.proto", fileDescriptor_5a2cc96948b3cab0)
}

var fileDescriptor_5a2cc96948b3cab0 = []byte{
	// 1175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xfa, 0x33, 0x1e, 0xc7, 0x49, 0x3a, 0x24, 0xc5, 0x14, 0xf0, 0x46, 0x2b, 0x90, 0x22,
	0x54, 0x76, 0x51, 0x5a, 0xf5, 0x50, 0x2a, 0xda, 0x3a, 0xae, 0xc4, 0xaa, 0x10, 0xa2, 0x4d, 0x73,
	0xe9, 0x21, 0x66, 0xbd, 0x33, 0xd9, 0xac, 0xbc, 0xde, 0xd9, 0xee, 0x8e, 0xd3, 0xf8, 0xc6, 0x0d,
	0x24, 0x10, 0xea, 0x91, 0x0b, 0x12, 0xff, 0x03, 0xff, 0x01, 0xa7, 0x1c, 0x7b, 0x2c, 0x1c, 0x16,
	0x70, 0x6e, 0x1c, 0x73, 0x41, 0xe2, 0x84, 0xe6, 0x63, 0xed, 0x75, 0x0a, 0x95, 0x9d, 0x56, 0x88,
	0xd3, 0xce, 0xbc, 0x79, 0xef, 0xf7, 0x3e, 0xe6, 0x7d, 0xcc, 0x82, 0xeb, 0xbd, 0x23, 0xa3, 0x77,
	0x14, 0xe3, 0xe8, 0x08, 0x47, 0x86, 0x4f, 0x1e, 0x45, 0xd8, 0x21, 0x47, 0x38, 0x1a, 0x66, 0xd7,
	0x61, 0xd7, 0x48, 0x97, 0x7a, 0x18, 0x11, 0x4a, 0xa0, 0xe1, 0x10, 0xa7, 0x17, 0x11, 0xdb, 0x39,
	0xd4, 0x7b, 0x47, 0x7a, 0x2a, 0xaf, 0x67, 0x64, 0xf4, 0x29, 0xf9, 0x2b, 0x97, 0x39, 0x73, 0xd8,
	0x35, 0xfa, 0x98, 0xda, 0xc8, 0xa6, 0xb6, 0x00, 0xba, 0xb2, 0xea, 0x12, 0x97, 0xf0, 0xa5, 0xc1,
	0x56, 0x92, 0xaa, 0xba, 0x84, 0xb8, 0x3e, 0x36, 0xf8, 0xae, 0x3b, 0x38, 0x30, 0xa8, 0xd7, 0xc7,
	0x31, 0xb5, 0xfb, 0xa1, 0x60, 0xd0, 0xfe, 0x54, 0xc0, 0x6a, 0x1b, 0xc7, 0x4e, 0xe4, 0x85, 0x94,
	0x44, 0x5b, 0x87, 0x76, 0xe0, 0x62, 0x33, 0x38, 0x20, 0x10, 0x03, 0xe0, 0xf0, 0xdd, 0x83, 0x61,
	0x88, 0x1b, 0xca, 0xba, 0xb2, 0xb1, 0xb4, 0x79, 0x4f, 0x9f, 0xd3, 0x5a, 0xfd, 0x3c, 0x34, 0x03,
	0xb3, 0x32, 0xc0, 0xf0, 0x06, 0x28, 0x22, 0x1c, 0x3b, 0x8d, 0xfc, 0xba, 0xb2, 0x51, 0xdb, 0xd4,
	0x32, 0x0a, 0xa4, 0x9f, 0xba, 0xc5, 0x78, 0x27, 0x38, 0x16, 0xe7, 0x87, 0x77, 0x40, 0x95, 0xd0,
	0x43, 0x1c, 0xb1, 0x83, 0x46, 0x61, 0x66, 0xe1, 0x89, 0x90, 0xf6, 0x7d, 0x11, 0xd4, 0x2c, 0x1c,
	0xfa, 0x9e, 0x63, 0x73, 0x87, 0x1f, 0x82, 0x4a, 0x40, 0x10, 0xee, 0x78, 0x88, 0x7b, 0x5b, 0x6a,
	0xdd, 0x1d, 0x25, 0x6a, 0x79, 0x9b, 0x20, 0x6c, 0xb6, 0xff, 0x4a, 0xd4, 0x6b, 0xae, 0x47, 0x0f,
	0x07, 0x5d, 0xdd, 0x21, 0xfd, 0xc9, 0x9d, 0xa1, 0xee, 0x64, 0x6d, 0x84, 0x3d, 0xd7, 0x48, 0xf5,
	0x0a, 0x31, 0xab, 0xcc, 0x10, 0x4d, 0x04, 0xf7, 0xc1, 0x42, 0x4c, 0x49, 0xc4, 0xc1, 0xf3, 0x1c,
	0x7c, 0x6b, 0x94, 0xa8, 0x95, 0x5d, 0x46, 0xe3, 0xe8, 0xd7, 0xe7, 0x42, 0x97, 0x72, 0x56, 0x85,
	0x83, 0x9a, 0x08, 0xde, 0x92, 0x51, 0x9c, 0x39, 0x10, 0xad, 0xe2, 0x49, 0xa2, 0xe6, 0x64, 0x2c,
	0xaf, 0x02, 0x18, 0xd9, 0x07, 0xb4, 0x63, 0x87, 0xa1, 0xef, 0x61, 0xd4, 0xf1, 0x02, 0x84, 0x8f,
	0x1b, 0xc5, 0x75, 0x65, 0xa3, 0x68, 0xad, 0xb0, 0x93, 0xbb, 0xe2, 0xc0, 0x64, 0x74, 0xf8, 0x01,
	0x58, 0xe5, 0xdc, 0x0e, 0xe9, 0xf7, 0x3d, 0x4a, 0xc7, 0xfc, 0x25, 0xce, 0xcf, 0x91, 0xb6, 0xd2,
	0x23, 0x21, 0xf1, 0xa3, 0x02, 0xde, 0xe4, 0x22, 0x3e, 0x71, 0x3b, 0x68, 0x6c, 0x43, 0x47, 0xa4,
	0x41, 0xdc, 0x28, 0xaf, 0x17, 0x36, 0x6a, 0xaf, 0x20, 0xb9, 0xd8, 0x35, 0xb6, 0xde, 0x67, 0x8e,
	0xfd, 0x91, 0xa8, 0xef, 0xbe, 0x40, 0xe3, 0x55, 0xd2, 0xf7, 0x28, 0xee, 0x87, 0x74, 0x68, 0x35,
	0x18, 0xdb, 0x27, 0xc4, 0x3d, 0x8f, 0x15, 0x6b, 0x8f, 0xc0, 0x32, 0xbb, 0xc5, 0x6c, 0x8a, 0xec,
	0x83, 0x85, 0x48, 0x6c, 0xe3, 0x86, 0xc2, 0x8d, 0xbe, 0x35, 0xb7, 0xd1, 0x19, 0x3c, 0x79, 0x09,
	0x63, 0x4c, 0xed, 0xdb, 0x3c, 0x80, 0x5b, 0xfe, 0x20, 0xa6, 0x38, 0xca, 0xaa, 0xbd, 0x0a, 0x80,
	0x23, 0xa8, 0x69, 0x72, 0x56, 0x5b, 0xf5, 0x51, 0xa2, 0x56, 0x25, 0xaf, 0xd9, 0xb6, 0xaa, 0x92,
	0xc1, 0x44, 0xd0, 0x01, 0xb5, 0x89, 0xc7, 0x71, 0x23, 0xcf, 0xed, 0x9c, 0x25, 0x25, 0xde, 0x96,
	0x91, 0x5b, 0xcb, 0x88, 0x67, 0x22, 0x95, 0x45, 0x65, 0xdd, 0xc1, 0x27, 0x8e, 0xed, 0x77, 0xbc,
	0xe0, 0x80, 0x34, 0x0a, 0x5c, 0xc7, 0x9d, 0xb9, 0x63, 0x71, 0x2e, 0xbe, 0x32, 0x1e, 0x55, 0x8e,
	0xcc, 0x08, 0xda, 0x4f, 0x45, 0x50, 0x97, 0x0c, 0x7b, 0x21, 0xb2, 0x29, 0x86, 0x21, 0x58, 0x88,
	0x98, 0xdd, 0x69, 0x24, 0x0a, 0xad, 0x3d, 0x56, 0x49, 0xdc, 0x17, 0xb3, 0x7d, 0x96, 0xa8, 0x4b,
	0x43, 0xbb, 0xef, 0xdf, 0xd4, 0x24, 0x41, 0x9b, 0xbb, 0xb6, 0xa4, 0xa0, 0x55, 0xe1, 0x6a, 0x4c,
	0x04, 0x6f, 0x83, 0x6a, 0x4c, 0xed, 0x88, 0x76, 0x7a, 0x78, 0xc8, 0x8b, 0x77, 0xb1, 0xa5, 0x9d,
	0x25, 0xea, 0xb2, 0xd0, 0xb3, 0xcb, 0x8e, 0xee, 0xe3, 0x21, 0x53, 0x54, 0xb3, 0xa4, 0x6b, 0xf7,
	0xf1, 0xd0, 0x5a, 0x88, 0xe5, 0x09, 0xfc, 0x52, 0x01, 0x4b, 0xc4, 0x47, 0x1d, 0x79, 0xcd, 0xcc,
	0xf2, 0x02, 0xef, 0x01, 0xf6, 0x28, 0x51, 0x17, 0x3f, 0xf3, 0x51, 0x1a, 0x02, 0x66, 0xfe, 0x6b,
	0x02, 0x36, 0x4b, 0x65, 0xd0, 0x37, 0xe6, 0xf3, 0x21, 0x15, 0xb5, 0x16, 0xc9, 0x04, 0x08, 0xc1,
	0xcf, 0x41, 0x2d, 0xc0, 0x8f, 0x53, 0x43, 0x78, 0x85, 0xd7, 0x36, 0xdf, 0xf9, 0xa7, 0xd4, 0x10,
	0x1c, 0x99, 0xe4, 0x78, 0x83, 0x5d, 0xcd, 0x59, 0xa2, 0x5e, 0x12, 0xf6, 0x6d, 0xe3, 0xc7, 0x92,
	0x47, 0xb3, 0x40, 0x30, 0xde, 0xc0, 0xaf, 0x15, 0xb0, 0x1c, 0xe0, 0x63, 0x9a, 0x75, 0xb6, 0xc4,
	0x9d, 0x75, 0x46, 0x89, 0x5a, 0xdf, 0xc6, 0xc7, 0x34, 0xeb, 0xed, 0x6a, 0x8a, 0x96, 0x21, 0xbf,
	0x8c, 0xbb, 0xf5, 0x20, 0x83, 0x84, 0x6e, 0x16, 0xbf, 0xfb, 0x41, 0xcd, 0x69, 0xdf, 0x14, 0xc0,
	0xa5, 0xa9, 0x24, 0xda, 0xf1, 0xed, 0x00, 0xee, 0x83, 0xca, 0x80, 0xef, 0xd2, 0x52, 0xfe, 0xe8,
	0xa2, 0xa5, 0x2c, 0x40, 0x65, 0xf2, 0xa6, 0xa0, 0x0c, 0x3f, 0xf4, 0xed, 0x20, 0xed, 0xf8, 0x8b,
	0xad, 0x7b, 0xec, 0xfc, 0x97, 0x59, 0x07, 0xc9, 0x80, 0x7a, 0xbe, 0x31, 0x18, 0x78, 0x48, 0xdf,
	0xdb, 0x33, 0xdb, 0x6c, 0x12, 0x31, 0xab, 0xd9, 0x48, 0x61, 0xa8, 0x26, 0x82, 0x5f, 0x29, 0xe0,
	0x75, 0x84, 0x79, 0x13, 0x8e, 0x63, 0x8f, 0x04, 0x18, 0x75, 0xe4, 0xf8, 0x8a, 0x79, 0x3d, 0x96,
	0x5a, 0x3b, 0xa3, 0x44, 0x5d, 0x6b, 0x4f, 0xb1, 0x88, 0xb1, 0x14, 0x5f, 0x74, 0x9c, 0xad, 0xa1,
	0xe7, 0xd1, 0x50, 0x7c, 0xae, 0x3f, 0x15, 0x5f, 0xdc, 0x9f, 0xb4, 0x2f, 0x4a, 0x60, 0x4d, 0x46,
	0x2e, 0xad, 0x17, 0xf6, 0x8d, 0x10, 0x7c, 0x0b, 0x54, 0xc7, 0xcf, 0x13, 0x51, 0xdc, 0xd6, 0x84,
	0x30, 0x55, 0xf9, 0xf9, 0xff, 0xbe, 0xf2, 0x0b, 0x17, 0xa8, 0xfc, 0x0f, 0x41, 0x05, 0x07, 0x88,
	0x8b, 0x17, 0x67, 0x16, 0x2f, 0xe3, 0x00, 0xfd, 0x4b, 0xdb, 0x28, 0xfd, 0x2f, 0xda, 0x46, 0xf9,
	0xd5, 0xb7, 0x8d, 0x3e, 0x58, 0x11, 0x77, 0x3b, 0x99, 0x31, 0x8d, 0xca, 0xcc, 0x6f, 0x99, 0xa6,
	0x54, 0x72, 0x39, 0x93, 0x00, 0x93, 0x63, 0xcd, 0x5a, 0x8e, 0xce, 0x51, 0x7e, 0xce, 0x03, 0x28,
	0x66, 0x8f, 0x08, 0xfb, 0x2e, 0xb5, 0xe9, 0x20, 0x86, 0x21, 0x58, 0x0e, 0x71, 0x80, 0xbc, 0xc0,
	0xed, 0xa4, 0xa5, 0xab, 0xf0, 0x6b, 0xfb, 0xf8, 0xe2, 0x65, 0x5b, 0xdf, 0x11, 0x88, 0xb2, 0x7a,
	0xeb, 0x61, 0x66, 0x8b, 0x98, 0xc6, 0xf4, 0xd1, 0x35, 0xdd, 0x2c, 0x5e, 0x46, 0xa3, 0x7c, 0xad,
	0xa5, 0x1a, 0xed, 0xcc, 0x16, 0x41, 0x53, 0x68, 0x1c, 0x76, 0x26, 0x95, 0x26, 0x1e, 0x8d, 0x57,
	0x74, 0xf1, 0xab, 0xa0, 0xa7, 0xbf, 0x0a, 0xfa, 0x83, 0x94, 0xa3, 0x55, 0x7c, 0xf2, 0xab, 0xaa,
	0x58, 0x4b, 0x5c, 0x70, 0x4c, 0x85, 0xab, 0xa0, 0x84, 0xa3, 0x88, 0x44, 0xa2, 0xe2, 0x2d, 0xb1,
	0x79, 0xef, 0xf6, 0xf3, 0xff, 0x13, 0xfc, 0xa1, 0x5f, 0x05, 0xa5, 0xdd, 0xd0, 0xf7, 0xe8, 0x4a,
	0x8e, 0x2d, 0x3f, 0xc5, 0x91, 0x8b, 0x57, 0x14, 0x78, 0x69, 0x3c, 0xdf, 0x05, 0xeb, 0x4a, 0xbe,
	0x65, 0x9c, 0xfc, 0xde, 0xcc, 0x9d, 0x8c, 0x9a, 0xca, 0xd3, 0x51, 0x53, 0x79, 0x36, 0x6a, 0x2a,
	0xbf, 0x8d, 0x9a, 0xca, 0x93, 0xd3, 0x66, 0xee, 0xe9, 0x69, 0x33, 0xf7, 0xec, 0xb4, 0x99, 0x7b,
	0x58, 0x9f, 0x6a, 0xc3, 0xdd, 0x32, 0xb7, 0xf8, 0xda, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb6,
	0xc1, 0x33, 0x50, 0x81, 0x0d, 0x00, 0x00,
}

func (m *DescriptorChangeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescriptorChangeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescriptorChangeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OtherDesc != nil {
		{
			size, err := m.OtherDesc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRecovery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Desc != nil {
		{
			size, err := m.Desc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRecovery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChangeType != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.ChangeType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RaftLogDescriptorChanges) > 0 {
		for iNdEx := len(m.RaftLogDescriptorChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RaftLogDescriptorChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecovery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.RaftCommittedIndex != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.RaftCommittedIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.RaftAppliedIndex != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.RaftAppliedIndex))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Desc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRecovery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.StoreID != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.StoreID))
		i--
		dAtA[i] = 0x10
	}
	if m.NodeID != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeReplicaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeReplicaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeReplicaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Replicas) > 0 {
		for iNdEx := len(m.Replicas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Replicas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecovery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClusterReplicaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterReplicaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterReplicaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocalInfo) > 0 {
		for iNdEx := len(m.LocalInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LocalInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecovery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Descriptors) > 0 {
		for iNdEx := len(m.Descriptors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Descriptors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecovery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClusterID) > 0 {
		i -= len(m.ClusterID)
		copy(dAtA[i:], m.ClusterID)
		i = encodeVarintRecovery(dAtA, i, uint64(len(m.ClusterID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplicaUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextReplicaID != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.NextReplicaID))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.NewReplica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRecovery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.OldReplicaID != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.OldReplicaID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintRecovery(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.RangeID != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicaUpdatePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaUpdatePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaUpdatePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterID) > 0 {
		i -= len(m.ClusterID)
		copy(dAtA[i:], m.ClusterID)
		i = encodeVarintRecovery(dAtA, i, uint64(len(m.ClusterID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DecommissionedNodeIDs) > 0 {
		dAtA6 := make([]byte, len(m.DecommissionedNodeIDs)*10)
		var j5 int
		for _, num1 := range m.DecommissionedNodeIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintRecovery(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.PlanID.Size()
		i -= size
		if _, err := m.PlanID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRecovery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecovery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplicaRecoveryRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaRecoveryRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaRecoveryRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RangeDescriptor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRecovery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.NewReplica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRecovery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.OldReplicaID != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.OldReplicaID))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EndKey) > 0 {
		i -= len(m.EndKey)
		copy(dAtA[i:], m.EndKey)
		i = encodeVarintRecovery(dAtA, i, uint64(len(m.EndKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintRecovery(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RangeID != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x10
	}
	if m.Timestamp != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeRecoveryStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeRecoveryStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeRecoveryStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintRecovery(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if m.ApplyTimestamp != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ApplyTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ApplyTimestamp):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintRecovery(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppliedPlanID != nil {
		{
			size := m.AppliedPlanID.Size()
			i -= size
			if _, err := m.AppliedPlanID.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintRecovery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PendingPlanID != nil {
		{
			size := m.PendingPlanID.Size()
			i -= size
			if _, err := m.PendingPlanID.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintRecovery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecovery(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecovery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DescriptorChangeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangeType != 0 {
		n += 1 + sovRecovery(uint64(m.ChangeType))
	}
	if m.Desc != nil {
		l = m.Desc.Size()
		n += 1 + l + sovRecovery(uint64(l))
	}
	if m.OtherDesc != nil {
		l = m.OtherDesc.Size()
		n += 1 + l + sovRecovery(uint64(l))
	}
	return n
}

func (m *ReplicaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovRecovery(uint64(m.NodeID))
	}
	if m.StoreID != 0 {
		n += 1 + sovRecovery(uint64(m.StoreID))
	}
	l = m.Desc.Size()
	n += 1 + l + sovRecovery(uint64(l))
	if m.RaftAppliedIndex != 0 {
		n += 1 + sovRecovery(uint64(m.RaftAppliedIndex))
	}
	if m.RaftCommittedIndex != 0 {
		n += 1 + sovRecovery(uint64(m.RaftCommittedIndex))
	}
	if len(m.RaftLogDescriptorChanges) > 0 {
		for _, e := range m.RaftLogDescriptorChanges {
			l = e.Size()
			n += 1 + l + sovRecovery(uint64(l))
		}
	}
	return n
}

func (m *NodeReplicaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Replicas) > 0 {
		for _, e := range m.Replicas {
			l = e.Size()
			n += 1 + l + sovRecovery(uint64(l))
		}
	}
	return n
}

func (m *ClusterReplicaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterID)
	if l > 0 {
		n += 1 + l + sovRecovery(uint64(l))
	}
	if len(m.Descriptors) > 0 {
		for _, e := range m.Descriptors {
			l = e.Size()
			n += 1 + l + sovRecovery(uint64(l))
		}
	}
	if len(m.LocalInfo) > 0 {
		for _, e := range m.LocalInfo {
			l = e.Size()
			n += 1 + l + sovRecovery(uint64(l))
		}
	}
	return n
}

func (m *ReplicaUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeID != 0 {
		n += 1 + sovRecovery(uint64(m.RangeID))
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovRecovery(uint64(l))
	}
	if m.OldReplicaID != 0 {
		n += 1 + sovRecovery(uint64(m.OldReplicaID))
	}
	l = m.NewReplica.Size()
	n += 1 + l + sovRecovery(uint64(l))
	if m.NextReplicaID != 0 {
		n += 1 + sovRecovery(uint64(m.NextReplicaID))
	}
	return n
}

func (m *ReplicaUpdatePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovRecovery(uint64(l))
		}
	}
	l = m.PlanID.Size()
	n += 1 + l + sovRecovery(uint64(l))
	if len(m.DecommissionedNodeIDs) > 0 {
		l = 0
		for _, e := range m.DecommissionedNodeIDs {
			l += sovRecovery(uint64(e))
		}
		n += 1 + sovRecovery(uint64(l)) + l
	}
	l = len(m.ClusterID)
	if l > 0 {
		n += 1 + l + sovRecovery(uint64(l))
	}
	return n
}

func (m *ReplicaRecoveryRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovRecovery(uint64(m.Timestamp))
	}
	if m.RangeID != 0 {
		n += 1 + sovRecovery(uint64(m.RangeID))
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovRecovery(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovRecovery(uint64(l))
	}
	if m.OldReplicaID != 0 {
		n += 1 + sovRecovery(uint64(m.OldReplicaID))
	}
	l = m.NewReplica.Size()
	n += 1 + l + sovRecovery(uint64(l))
	l = m.RangeDescriptor.Size()
	n += 1 + l + sovRecovery(uint64(l))
	return n
}

func (m *NodeRecoveryStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PendingPlanID != nil {
		l = m.PendingPlanID.Size()
		n += 1 + l + sovRecovery(uint64(l))
	}
	if m.AppliedPlanID != nil {
		l = m.AppliedPlanID.Size()
		n += 1 + l + sovRecovery(uint64(l))
	}
	if m.ApplyTimestamp != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ApplyTimestamp)
		n += 1 + l + sovRecovery(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRecovery(uint64(l))
	}
	return n
}

func sovRecovery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecovery(x uint64) (n int) {
	return sovRecovery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DescriptorChangeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescriptorChangeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescriptorChangeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			m.ChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeType |= DescriptorChangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desc == nil {
				m.Desc = &roachpb.RangeDescriptor{}
			}
			if err := m.Desc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OtherDesc == nil {
				m.OtherDesc = &roachpb.RangeDescriptor{}
			}
			if err := m.OtherDesc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= github_com_cockroachdb_cockroach_pkg_roachpb.StoreID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Desc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftAppliedIndex", wireType)
			}
			m.RaftAppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftAppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftCommittedIndex", wireType)
			}
			m.RaftCommittedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftCommittedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftLogDescriptorChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftLogDescriptorChanges = append(m.RaftLogDescriptorChanges, DescriptorChangeInfo{})
			if err := m.RaftLogDescriptorChanges[len(m.RaftLogDescriptorChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeReplicaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeReplicaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeReplicaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicas = append(m.Replicas, ReplicaInfo{})
			if err := m.Replicas[len(m.Replicas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterReplicaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterReplicaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterReplicaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Descriptors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Descriptors = append(m.Descriptors, roachpb.RangeDescriptor{})
			if err := m.Descriptors[len(m.Descriptors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalInfo = append(m.LocalInfo, NodeReplicaInfo{})
			if err := m.LocalInfo[len(m.LocalInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldReplicaID", wireType)
			}
			m.OldReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldReplicaID |= github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextReplicaID", wireType)
			}
			m.NextReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextReplicaID |= github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaUpdatePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaUpdatePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaUpdatePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, ReplicaUpdate{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PlanID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_roachpb.NodeID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRecovery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DecommissionedNodeIDs = append(m.DecommissionedNodeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRecovery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRecovery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRecovery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DecommissionedNodeIDs) == 0 {
					m.DecommissionedNodeIDs = make([]github_com_cockroachdb_cockroach_pkg_roachpb.NodeID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_roachpb.NodeID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRecovery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DecommissionedNodeIDs = append(m.DecommissionedNodeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DecommissionedNodeIDs", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaRecoveryRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaRecoveryRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaRecoveryRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldReplicaID", wireType)
			}
			m.OldReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldReplicaID |= github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RangeDescriptor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeRecoveryStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeRecoveryStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeRecoveryStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingPlanID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cockroachdb_cockroach_pkg_util_uuid.UUID
			m.PendingPlanID = &v
			if err := m.PendingPlanID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedPlanID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cockroachdb_cockroach_pkg_util_uuid.UUID
			m.AppliedPlanID = &v
			if err := m.AppliedPlanID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplyTimestamp == nil {
				m.ApplyTimestamp = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ApplyTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecovery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecovery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecovery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecovery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecovery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecovery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecovery = fmt.Errorf("proto: unexpected end of group")
)
