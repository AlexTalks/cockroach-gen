// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/kvflowcontrol/kvflowinspectpb/kvflowinspect.proto

package kvflowinspectpb

import (
	fmt "fmt"
	kvflowcontrolpb "github.com/cockroachdb/cockroach/pkg/kv/kvserver/kvflowcontrol/kvflowcontrolpb"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ControllerRequest is used to inspect the state of the node-level
// kvflowcontrol.Controller.
type ControllerRequest struct {
}

func (m *ControllerRequest) Reset()         { *m = ControllerRequest{} }
func (m *ControllerRequest) String() string { return proto.CompactTextString(m) }
func (*ControllerRequest) ProtoMessage()    {}
func (*ControllerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60c39f1ce766adc1, []int{0}
}
func (m *ControllerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControllerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ControllerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerRequest.Merge(m, src)
}
func (m *ControllerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ControllerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerRequest proto.InternalMessageInfo

// ControllerResponse is the response structure for inspecting the node-level
// kvflowcontrol.Controller, a snapshot of its in-memory state. Data is
// organized in the following structure:
//
// - [stream]
//   - tenant id
//   - store id
//   - available regular tokens
//   - available elastic tokens
type ControllerResponse struct {
	Streams []Stream `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams"`
}

func (m *ControllerResponse) Reset()         { *m = ControllerResponse{} }
func (m *ControllerResponse) String() string { return proto.CompactTextString(m) }
func (*ControllerResponse) ProtoMessage()    {}
func (*ControllerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60c39f1ce766adc1, []int{1}
}
func (m *ControllerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControllerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ControllerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerResponse.Merge(m, src)
}
func (m *ControllerResponse) XXX_Size() int {
	return m.Size()
}
func (m *ControllerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerResponse proto.InternalMessageInfo

// HandlesRequest is used to inspect the state of named kvflowcontrol.Handles,
// identified by owning replica's range ID.
type HandlesRequest struct {
	RangeIDs []github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,1,rep,packed,name=range_ids,json=rangeIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_ids,omitempty"`
}

func (m *HandlesRequest) Reset()         { *m = HandlesRequest{} }
func (m *HandlesRequest) String() string { return proto.CompactTextString(m) }
func (*HandlesRequest) ProtoMessage()    {}
func (*HandlesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60c39f1ce766adc1, []int{2}
}
func (m *HandlesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandlesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HandlesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandlesRequest.Merge(m, src)
}
func (m *HandlesRequest) XXX_Size() int {
	return m.Size()
}
func (m *HandlesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HandlesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HandlesRequest proto.InternalMessageInfo

// HandlesResponse is the response structure for inspecting named
// kvflowcontrol.Handles, a snapshot their in-memory state. If no handles are
// specified, we'll sift through all available ones. For each handle, data is
// organized in the following structure:
//
// - range id
// - [connected streams]
//   - stream:
//   - tenant id
//   - store id
//   - available regular tokens
//   - available elastic tokens
//   - [tracked token deductions]
//   - raft log position
//   - priority
//   - tokens
type HandlesResponse struct {
	Handles []Handle `protobuf:"bytes,1,rep,name=handles,proto3" json:"handles"`
}

func (m *HandlesResponse) Reset()         { *m = HandlesResponse{} }
func (m *HandlesResponse) String() string { return proto.CompactTextString(m) }
func (*HandlesResponse) ProtoMessage()    {}
func (*HandlesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60c39f1ce766adc1, []int{3}
}
func (m *HandlesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandlesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HandlesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandlesResponse.Merge(m, src)
}
func (m *HandlesResponse) XXX_Size() int {
	return m.Size()
}
func (m *HandlesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HandlesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HandlesResponse proto.InternalMessageInfo

// Handle represents the in-memory state of a given kvflowcontrol.Handle.
type Handle struct {
	RangeID          github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	ConnectedStreams []ConnectedStream                                    `protobuf:"bytes,2,rep,name=connected_streams,json=connectedStreams,proto3" json:"connected_streams"`
}

func (m *Handle) Reset()         { *m = Handle{} }
func (m *Handle) String() string { return proto.CompactTextString(m) }
func (*Handle) ProtoMessage()    {}
func (*Handle) Descriptor() ([]byte, []int) {
	return fileDescriptor_60c39f1ce766adc1, []int{4}
}
func (m *Handle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Handle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Handle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Handle.Merge(m, src)
}
func (m *Handle) XXX_Size() int {
	return m.Size()
}
func (m *Handle) XXX_DiscardUnknown() {
	xxx_messageInfo_Handle.DiscardUnknown(m)
}

var xxx_messageInfo_Handle proto.InternalMessageInfo

// ConnectedStream represents the in-memory state of a connected stream,
// typically hanging off a kvflowcontrol.Handle.
type ConnectedStream struct {
	Stream            Stream             `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream"`
	TrackedDeductions []TrackedDeduction `protobuf:"bytes,2,rep,name=tracked_deductions,json=trackedDeductions,proto3" json:"tracked_deductions"`
}

func (m *ConnectedStream) Reset()         { *m = ConnectedStream{} }
func (m *ConnectedStream) String() string { return proto.CompactTextString(m) }
func (*ConnectedStream) ProtoMessage()    {}
func (*ConnectedStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_60c39f1ce766adc1, []int{5}
}
func (m *ConnectedStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectedStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConnectedStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectedStream.Merge(m, src)
}
func (m *ConnectedStream) XXX_Size() int {
	return m.Size()
}
func (m *ConnectedStream) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectedStream.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectedStream proto.InternalMessageInfo

// Stream represents a given kvflowcontrol.Stream and the number of tokens
// available for it (as maintained by the node-level kvflowcontrol.Controller).
type Stream struct {
	TenantID               roachpb.TenantID                                     `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id"`
	StoreID                github_com_cockroachdb_cockroach_pkg_roachpb.StoreID `protobuf:"varint,2,opt,name=store_id,json=storeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StoreID" json:"store_id,omitempty"`
	AvailableRegularTokens int64                                                `protobuf:"varint,3,opt,name=available_regular_tokens,json=availableRegularTokens,proto3" json:"available_regular_tokens,omitempty"`
	AvailableElasticTokens int64                                                `protobuf:"varint,4,opt,name=available_elastic_tokens,json=availableElasticTokens,proto3" json:"available_elastic_tokens,omitempty"`
}

func (m *Stream) Reset()         { *m = Stream{} }
func (m *Stream) String() string { return proto.CompactTextString(m) }
func (*Stream) ProtoMessage()    {}
func (*Stream) Descriptor() ([]byte, []int) {
	return fileDescriptor_60c39f1ce766adc1, []int{6}
}
func (m *Stream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Stream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stream.Merge(m, src)
}
func (m *Stream) XXX_Size() int {
	return m.Size()
}
func (m *Stream) XXX_DiscardUnknown() {
	xxx_messageInfo_Stream.DiscardUnknown(m)
}

var xxx_messageInfo_Stream proto.InternalMessageInfo

// TrackedDeductions represents a tracked token deduction, as typically done by
// a kvflowcontrol.Handle.
type TrackedDeduction struct {
	Priority        int32                           `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Tokens          int64                           `protobuf:"varint,2,opt,name=tokens,proto3" json:"tokens,omitempty"`
	RaftLogPosition kvflowcontrolpb.RaftLogPosition `protobuf:"bytes,3,opt,name=raft_log_position,json=raftLogPosition,proto3" json:"raft_log_position"`
}

func (m *TrackedDeduction) Reset()         { *m = TrackedDeduction{} }
func (m *TrackedDeduction) String() string { return proto.CompactTextString(m) }
func (*TrackedDeduction) ProtoMessage()    {}
func (*TrackedDeduction) Descriptor() ([]byte, []int) {
	return fileDescriptor_60c39f1ce766adc1, []int{7}
}
func (m *TrackedDeduction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackedDeduction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TrackedDeduction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackedDeduction.Merge(m, src)
}
func (m *TrackedDeduction) XXX_Size() int {
	return m.Size()
}
func (m *TrackedDeduction) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackedDeduction.DiscardUnknown(m)
}

var xxx_messageInfo_TrackedDeduction proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ControllerRequest)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowinspectpb.ControllerRequest")
	proto.RegisterType((*ControllerResponse)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowinspectpb.ControllerResponse")
	proto.RegisterType((*HandlesRequest)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowinspectpb.HandlesRequest")
	proto.RegisterType((*HandlesResponse)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowinspectpb.HandlesResponse")
	proto.RegisterType((*Handle)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowinspectpb.Handle")
	proto.RegisterType((*ConnectedStream)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowinspectpb.ConnectedStream")
	proto.RegisterType((*Stream)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowinspectpb.Stream")
	proto.RegisterType((*TrackedDeduction)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowinspectpb.TrackedDeduction")
}

func init() {
	proto.RegisterFile("kv/kvserver/kvflowcontrol/kvflowinspectpb/kvflowinspect.proto", fileDescriptor_60c39f1ce766adc1)
}

var fileDescriptor_60c39f1ce766adc1 = []byte{
	// 640 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0xb4, 0x4d, 0xd3, 0xad, 0x44, 0x9b, 0x05, 0x55, 0x51, 0x91, 0x9c, 0xc8, 0xa7,
	0x9c, 0x6c, 0xa9, 0xe5, 0x80, 0x84, 0xb8, 0xa4, 0xa9, 0x44, 0x10, 0x42, 0xc8, 0xed, 0x05, 0x90,
	0xb0, 0x36, 0xeb, 0xad, 0x6b, 0xd9, 0xdd, 0x75, 0x77, 0x37, 0xae, 0xe0, 0x29, 0x78, 0x0c, 0x9e,
	0x82, 0x73, 0x8f, 0x3d, 0xf6, 0x14, 0xd1, 0xf4, 0xc2, 0x33, 0x70, 0x42, 0xde, 0x3f, 0x69, 0x93,
	0x0b, 0x25, 0x70, 0xdb, 0xfd, 0x26, 0xf3, 0x9b, 0xf9, 0x3c, 0x63, 0x07, 0xbc, 0xcc, 0xca, 0x20,
	0x2b, 0x05, 0xe1, 0x25, 0xe1, 0x41, 0x56, 0x9e, 0xe4, 0xec, 0x02, 0x33, 0x2a, 0x39, 0xcb, 0xcd,
	0x2d, 0xa5, 0xa2, 0x20, 0x58, 0x16, 0xa3, 0xf9, 0xbb, 0x5f, 0x70, 0x26, 0x19, 0xdc, 0xc7, 0x0c,
	0x67, 0x9c, 0x21, 0x7c, 0xea, 0x67, 0xa5, 0x6f, 0x41, 0xfe, 0x1c, 0xc8, 0x5f, 0x00, 0xed, 0x3e,
	0x49, 0x58, 0xc2, 0x54, 0x7e, 0x50, 0x9d, 0x34, 0x6a, 0x17, 0x2a, 0x4c, 0x31, 0x0a, 0x62, 0x24,
	0x91, 0xd1, 0xfe, 0xd8, 0x9d, 0xb9, 0xcd, 0xba, 0xb3, 0x25, 0x55, 0xba, 0xf7, 0x18, 0xb4, 0x0e,
	0xb4, 0x90, 0x13, 0x1e, 0x92, 0xf3, 0x31, 0x11, 0xd2, 0x3b, 0x07, 0xf0, 0xbe, 0x28, 0x0a, 0x46,
	0x05, 0x81, 0x1f, 0xc1, 0xba, 0x90, 0x9c, 0xa0, 0x33, 0xd1, 0x76, 0xba, 0x2b, 0xbd, 0xcd, 0xbd,
	0x17, 0xfe, 0x12, 0xd6, 0xfc, 0x23, 0xc5, 0xe8, 0xaf, 0x5e, 0x4e, 0x3a, 0xb5, 0xd0, 0x12, 0x3d,
	0x01, 0x1e, 0xbd, 0x42, 0x34, 0xce, 0x89, 0x30, 0x4d, 0x40, 0x04, 0x36, 0x38, 0xa2, 0x09, 0x89,
	0xd2, 0x58, 0x17, 0x5c, 0xeb, 0x0f, 0xa6, 0x93, 0x4e, 0x33, 0xac, 0xc4, 0xe1, 0x40, 0xfc, 0x9a,
	0x74, 0x9e, 0x25, 0xa9, 0x3c, 0x1d, 0x8f, 0x7c, 0xcc, 0xce, 0x82, 0x59, 0x2b, 0xf1, 0xe8, 0xee,
	0x1c, 0x14, 0x59, 0x12, 0x98, 0x87, 0xe6, 0x9b, 0xc4, 0xb0, 0xa9, 0xb0, 0xc3, 0x58, 0x78, 0x14,
	0x6c, 0xcd, 0x8a, 0xde, 0x99, 0x3c, 0xd5, 0xd2, 0x3f, 0x99, 0xd4, 0x58, 0x6b, 0xd2, 0x10, 0xbd,
	0x1b, 0x07, 0x34, 0x74, 0x04, 0x7e, 0x02, 0x4d, 0xeb, 0xae, 0xed, 0x74, 0x9d, 0xde, 0x5a, 0xff,
	0x60, 0x3a, 0xe9, 0xac, 0x9b, 0x1e, 0x97, 0xf6, 0xb6, 0x6e, 0xbc, 0xc1, 0x0b, 0xd0, 0xc2, 0x8c,
	0x52, 0x82, 0x25, 0x89, 0x23, 0x3b, 0xb6, 0xba, 0x72, 0x34, 0x58, 0xca, 0xd1, 0x81, 0xa5, 0xcd,
	0xcd, 0x6f, 0x1b, 0xcf, 0xcb, 0xc2, 0xfb, 0xe9, 0x80, 0xad, 0x85, 0xdf, 0xc2, 0xf7, 0xa0, 0xa1,
	0x5b, 0x50, 0x56, 0xff, 0xcb, 0xe2, 0x18, 0x20, 0xfc, 0x02, 0xa0, 0xe4, 0x08, 0x67, 0x24, 0x8e,
	0x62, 0x12, 0x8f, 0xb1, 0x4c, 0x19, 0xb5, 0x46, 0x0f, 0x97, 0x2a, 0x73, 0xac, 0x71, 0x03, 0x4b,
	0x33, 0x05, 0x5b, 0x72, 0x41, 0x17, 0xde, 0xb7, 0x3a, 0x68, 0x18, 0x87, 0xaf, 0xc1, 0x86, 0x24,
	0x14, 0x51, 0x69, 0xe7, 0xb9, 0xb9, 0xf7, 0xf4, 0x5e, 0x75, 0x3b, 0xa6, 0x63, 0xf5, 0x9b, 0xe1,
	0xa0, 0xbf, 0x5d, 0x31, 0xab, 0x6d, 0xb6, 0x4a, 0xd8, 0xd4, 0xf9, 0xc3, 0xb8, 0x5a, 0x0d, 0x21,
	0x19, 0x57, 0xab, 0x51, 0xef, 0x3a, 0xbd, 0x55, 0xbd, 0x1a, 0x47, 0x95, 0xb6, 0xc4, 0x6a, 0x98,
	0xbc, 0xea, 0x55, 0xab, 0x0e, 0x31, 0x7c, 0x0e, 0xda, 0xa8, 0x44, 0x69, 0x8e, 0x46, 0x39, 0x89,
	0x38, 0x49, 0xc6, 0x39, 0xe2, 0x91, 0x64, 0x19, 0xa1, 0xa2, 0xbd, 0xd2, 0x75, 0x7a, 0x2b, 0xe1,
	0xce, 0x2c, 0x1e, 0xea, 0xf0, 0xb1, 0x8a, 0xce, 0x67, 0x92, 0x1c, 0x09, 0x99, 0x62, 0x9b, 0xb9,
	0xba, 0x90, 0x79, 0xa8, 0xc3, 0x3a, 0xd3, 0xfb, 0xee, 0x80, 0xed, 0xc5, 0x07, 0x0b, 0x77, 0x41,
	0xb3, 0xe0, 0x29, 0xe3, 0xa9, 0xfc, 0xac, 0xdf, 0x81, 0x70, 0x76, 0x87, 0x3b, 0xa0, 0x61, 0xc0,
	0x75, 0x05, 0x36, 0x37, 0x58, 0x82, 0x16, 0x47, 0x27, 0x32, 0xca, 0x59, 0x12, 0x15, 0x4c, 0xa4,
	0x15, 0x48, 0x75, 0xfd, 0x77, 0x7b, 0x3d, 0xfb, 0x28, 0xfa, 0x21, 0x3a, 0x91, 0x6f, 0x58, 0xf2,
	0xce, 0xb0, 0xcc, 0xb4, 0xb7, 0xf8, 0x82, 0x5c, 0x5c, 0xde, 0xb8, 0xb5, 0xcb, 0xa9, 0xeb, 0x5c,
	0x4d, 0x5d, 0xe7, 0x7a, 0xea, 0x3a, 0x3f, 0xa6, 0xae, 0xf3, 0xf5, 0xd6, 0xad, 0x5d, 0xdd, 0xba,
	0xb5, 0xeb, 0x5b, 0xb7, 0xf6, 0xe1, 0xed, 0x83, 0xa6, 0xf2, 0xe0, 0xff, 0x92, 0x51, 0x43, 0x7d,
	0xa0, 0xf7, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x91, 0xa3, 0xa1, 0x7f, 0x06, 0x00, 0x00,
}

func (m *ControllerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControllerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControllerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ControllerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControllerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControllerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Streams) > 0 {
		for iNdEx := len(m.Streams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Streams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKvflowinspect(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HandlesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandlesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HandlesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RangeIDs) > 0 {
		dAtA2 := make([]byte, len(m.RangeIDs)*10)
		var j1 int
		for _, num1 := range m.RangeIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintKvflowinspect(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HandlesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandlesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HandlesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Handles) > 0 {
		for iNdEx := len(m.Handles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Handles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKvflowinspect(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Handle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Handle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Handle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectedStreams) > 0 {
		for iNdEx := len(m.ConnectedStreams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConnectedStreams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKvflowinspect(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RangeID != 0 {
		i = encodeVarintKvflowinspect(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConnectedStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectedStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectedStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrackedDeductions) > 0 {
		for iNdEx := len(m.TrackedDeductions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrackedDeductions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKvflowinspect(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Stream.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintKvflowinspect(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Stream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvailableElasticTokens != 0 {
		i = encodeVarintKvflowinspect(dAtA, i, uint64(m.AvailableElasticTokens))
		i--
		dAtA[i] = 0x20
	}
	if m.AvailableRegularTokens != 0 {
		i = encodeVarintKvflowinspect(dAtA, i, uint64(m.AvailableRegularTokens))
		i--
		dAtA[i] = 0x18
	}
	if m.StoreID != 0 {
		i = encodeVarintKvflowinspect(dAtA, i, uint64(m.StoreID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.TenantID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintKvflowinspect(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TrackedDeduction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackedDeduction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackedDeduction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RaftLogPosition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintKvflowinspect(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Tokens != 0 {
		i = encodeVarintKvflowinspect(dAtA, i, uint64(m.Tokens))
		i--
		dAtA[i] = 0x10
	}
	if m.Priority != 0 {
		i = encodeVarintKvflowinspect(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintKvflowinspect(dAtA []byte, offset int, v uint64) int {
	offset -= sovKvflowinspect(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ControllerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ControllerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Streams) > 0 {
		for _, e := range m.Streams {
			l = e.Size()
			n += 1 + l + sovKvflowinspect(uint64(l))
		}
	}
	return n
}

func (m *HandlesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RangeIDs) > 0 {
		l = 0
		for _, e := range m.RangeIDs {
			l += sovKvflowinspect(uint64(e))
		}
		n += 1 + sovKvflowinspect(uint64(l)) + l
	}
	return n
}

func (m *HandlesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Handles) > 0 {
		for _, e := range m.Handles {
			l = e.Size()
			n += 1 + l + sovKvflowinspect(uint64(l))
		}
	}
	return n
}

func (m *Handle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeID != 0 {
		n += 1 + sovKvflowinspect(uint64(m.RangeID))
	}
	if len(m.ConnectedStreams) > 0 {
		for _, e := range m.ConnectedStreams {
			l = e.Size()
			n += 1 + l + sovKvflowinspect(uint64(l))
		}
	}
	return n
}

func (m *ConnectedStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Stream.Size()
	n += 1 + l + sovKvflowinspect(uint64(l))
	if len(m.TrackedDeductions) > 0 {
		for _, e := range m.TrackedDeductions {
			l = e.Size()
			n += 1 + l + sovKvflowinspect(uint64(l))
		}
	}
	return n
}

func (m *Stream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TenantID.Size()
	n += 1 + l + sovKvflowinspect(uint64(l))
	if m.StoreID != 0 {
		n += 1 + sovKvflowinspect(uint64(m.StoreID))
	}
	if m.AvailableRegularTokens != 0 {
		n += 1 + sovKvflowinspect(uint64(m.AvailableRegularTokens))
	}
	if m.AvailableElasticTokens != 0 {
		n += 1 + sovKvflowinspect(uint64(m.AvailableElasticTokens))
	}
	return n
}

func (m *TrackedDeduction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Priority != 0 {
		n += 1 + sovKvflowinspect(uint64(m.Priority))
	}
	if m.Tokens != 0 {
		n += 1 + sovKvflowinspect(uint64(m.Tokens))
	}
	l = m.RaftLogPosition.Size()
	n += 1 + l + sovKvflowinspect(uint64(l))
	return n
}

func sovKvflowinspect(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKvflowinspect(x uint64) (n int) {
	return sovKvflowinspect(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ControllerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowinspect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControllerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControllerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowinspect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControllerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowinspect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControllerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControllerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Streams = append(m.Streams, Stream{})
			if err := m.Streams[len(m.Streams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowinspect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandlesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowinspect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandlesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandlesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_roachpb.RangeID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowKvflowinspect
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RangeIDs = append(m.RangeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowKvflowinspect
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthKvflowinspect
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthKvflowinspect
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RangeIDs) == 0 {
					m.RangeIDs = make([]github_com_cockroachdb_cockroach_pkg_roachpb.RangeID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_roachpb.RangeID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowKvflowinspect
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RangeIDs = append(m.RangeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowinspect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandlesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowinspect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandlesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandlesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handles = append(m.Handles, Handle{})
			if err := m.Handles[len(m.Handles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowinspect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Handle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowinspect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Handle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Handle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedStreams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectedStreams = append(m.ConnectedStreams, ConnectedStream{})
			if err := m.ConnectedStreams[len(m.ConnectedStreams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowinspect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectedStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowinspect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectedStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectedStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackedDeductions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackedDeductions = append(m.TrackedDeductions, TrackedDeduction{})
			if err := m.TrackedDeductions[len(m.TrackedDeductions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowinspect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowinspect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TenantID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= github_com_cockroachdb_cockroach_pkg_roachpb.StoreID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableRegularTokens", wireType)
			}
			m.AvailableRegularTokens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableRegularTokens |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableElasticTokens", wireType)
			}
			m.AvailableElasticTokens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableElasticTokens |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowinspect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackedDeduction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowinspect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackedDeduction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackedDeduction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			m.Tokens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tokens |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftLogPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RaftLogPosition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowinspect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowinspect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKvflowinspect(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKvflowinspect
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKvflowinspect
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKvflowinspect
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKvflowinspect
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKvflowinspect
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKvflowinspect        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKvflowinspect          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKvflowinspect = fmt.Errorf("proto: unexpected end of group")
)

