// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/kvflowcontrol/kvflowcontrolpb/kvflowcontrol.proto

package kvflowcontrolpb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RaftAdmissionMeta contains information used by admission control for the
// select raft commands that use replication admission control. It contains a
// subset of the fields in kvserverpb.RaftCommand to selectively decode
// state[1]. When marshaling a RaftCommand, we willfully include this data in
// the prefix of the marshaled byte buffer. Information about whether this data
// is present is captured in the first byte of the encoded raft proposal -- see
// raftlog.EntryEncoding.
//
// [1]: The field tags and types must be kept identical with what's found there.
type RaftAdmissionMeta struct {
	// AdmissionPriority of the command (maps to admission.WorkPriority); used
	// within a tenant below-raft for replication admission control.
	AdmissionPriority int32 `protobuf:"varint,18,opt,name=admission_priority,json=admissionPriority,proto3" json:"admission_priority,omitempty"`
	// AdmissionCreateTime is equivalent to Time.UnixNano() at the creation time
	// of the request, or a parent request, for which this command is a part of.
	// It's used within a tenant below-raft for replication admission control; see
	// admission.WorkInfo.CreateTime for details.
	AdmissionCreateTime int64 `protobuf:"varint,19,opt,name=admission_create_time,json=admissionCreateTime,proto3" json:"admission_create_time,omitempty"`
	// AdmissionOriginNode captures where this raft command originated. It's used
	// to inform said node of this raft command's (virtual) admission in order for
	// it to release flow tokens for subsequent commands.
	AdmissionOriginNode github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,20,opt,name=admission_origin_node,json=admissionOriginNode,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"admission_origin_node,omitempty"`
}

func (m *RaftAdmissionMeta) Reset()         { *m = RaftAdmissionMeta{} }
func (m *RaftAdmissionMeta) String() string { return proto.CompactTextString(m) }
func (*RaftAdmissionMeta) ProtoMessage()    {}
func (*RaftAdmissionMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_1540d617309b666a, []int{0}
}
func (m *RaftAdmissionMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftAdmissionMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RaftAdmissionMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftAdmissionMeta.Merge(m, src)
}
func (m *RaftAdmissionMeta) XXX_Size() int {
	return m.Size()
}
func (m *RaftAdmissionMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftAdmissionMeta.DiscardUnknown(m)
}

var xxx_messageInfo_RaftAdmissionMeta proto.InternalMessageInfo

// AdmittedRaftLogEntries represents a set of raft log entries that were
// admitted below raft. These are identified by:
// - the range ID (there's one per raft group);
// - the admission priority of all said entries;
// - the (inclusive) raft log position up-to-which we've admitted entries;
// - the store ID on which these raft logs were admitted.
//
// This is used as part replication admission control to release, at the origin,
// the specific flow tokens acquired when replicating these log entries along
// this particular "replication stream" (i.e. flowing to a particular store,
// remote or otherwise).
type AdmittedRaftLogEntries struct {
	// RangeID of the raft group these entries belong to. This is the range on
	// whose behalf work was admitted.
	RangeID github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	// AdmissionPriority of all admitted entries (maps to admissionpb.WorkPriority).
	AdmissionPriority int32 `protobuf:"varint,2,opt,name=admission_priority,json=admissionPriority,proto3" json:"admission_priority,omitempty"`
	// UpToRaftLogPosition (inclusive) of the highest entry that was admitted.
	// Within a given priority, admission takes place in raft log order (i.e.
	// entries with lower terms get admitted first, or with lower indexes within
	// the same term). So the value here implies admission of all entries that
	// sort before and have the same priority.
	UpToRaftLogPosition RaftLogPosition `protobuf:"bytes,3,opt,name=up_to_raft_log_position,json=upToRaftLogPosition,proto3" json:"up_to_raft_log_position"`
	// StoreID on which this raft log entry was admitted.
	//
	// TODO(irfansharif): We can avoid sending this for every logically admitted
	// message if the raft transport stream we were sending it on had some
	// handshake protocol at the start, where the client identified itself by its
	// NodeID. That way the origin replica receiving this information can infer
	// the StoreID where this work was done since we we never store multiple
	// replicas of a range on the same {single,multi}-store node.
	StoreID github_com_cockroachdb_cockroach_pkg_roachpb.StoreID `protobuf:"varint,4,opt,name=store_id,json=storeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StoreID" json:"store_id,omitempty"`
}

func (m *AdmittedRaftLogEntries) Reset()      { *m = AdmittedRaftLogEntries{} }
func (*AdmittedRaftLogEntries) ProtoMessage() {}
func (*AdmittedRaftLogEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_1540d617309b666a, []int{1}
}
func (m *AdmittedRaftLogEntries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdmittedRaftLogEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdmittedRaftLogEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdmittedRaftLogEntries.Merge(m, src)
}
func (m *AdmittedRaftLogEntries) XXX_Size() int {
	return m.Size()
}
func (m *AdmittedRaftLogEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_AdmittedRaftLogEntries.DiscardUnknown(m)
}

var xxx_messageInfo_AdmittedRaftLogEntries proto.InternalMessageInfo

// RaftLogPosition is a point on the raft log, identified by a term and an
// index.
type RaftLogPosition struct {
	Term  uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *RaftLogPosition) Reset()      { *m = RaftLogPosition{} }
func (*RaftLogPosition) ProtoMessage() {}
func (*RaftLogPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_1540d617309b666a, []int{2}
}
func (m *RaftLogPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftLogPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RaftLogPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftLogPosition.Merge(m, src)
}
func (m *RaftLogPosition) XXX_Size() int {
	return m.Size()
}
func (m *RaftLogPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftLogPosition.DiscardUnknown(m)
}

var xxx_messageInfo_RaftLogPosition proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RaftAdmissionMeta)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowcontrolpb.RaftAdmissionMeta")
	proto.RegisterType((*AdmittedRaftLogEntries)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowcontrolpb.AdmittedRaftLogEntries")
	proto.RegisterType((*RaftLogPosition)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowcontrolpb.RaftLogPosition")
}

func init() {
	proto.RegisterFile("kv/kvserver/kvflowcontrol/kvflowcontrolpb/kvflowcontrol.proto", fileDescriptor_1540d617309b666a)
}

var fileDescriptor_1540d617309b666a = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0xf5, 0x7e, 0x71, 0xbf, 0xa0, 0xe5, 0x80, 0xea, 0x04, 0xb0, 0x38, 0xd8, 0x51, 0x4e, 0xb9,
	0x60, 0x4b, 0x0d, 0x12, 0x12, 0x12, 0x87, 0xa6, 0xe1, 0x10, 0x09, 0x4a, 0x65, 0x7a, 0xe2, 0x80,
	0x65, 0x7b, 0x37, 0xee, 0xca, 0xb1, 0x67, 0xb5, 0xde, 0x18, 0xb8, 0xf1, 0x13, 0x7a, 0xe4, 0xc8,
	0xcf, 0xc9, 0xb1, 0xc7, 0x9e, 0x22, 0x70, 0xfe, 0x45, 0x4f, 0x68, 0x37, 0x6e, 0xda, 0x44, 0xaa,
	0x54, 0x7a, 0x9b, 0x99, 0xb7, 0xf3, 0x66, 0xde, 0x5b, 0x0d, 0x7e, 0x9b, 0x55, 0x7e, 0x56, 0x95,
	0x54, 0x54, 0x54, 0xf8, 0x59, 0x35, 0x9d, 0xc1, 0xd7, 0x04, 0x0a, 0x29, 0x60, 0xb6, 0x9d, 0xf1,
	0x78, 0x3b, 0xf7, 0xb8, 0x00, 0x09, 0xd6, 0x30, 0x81, 0x24, 0x13, 0x10, 0x25, 0x67, 0x5e, 0x56,
	0x79, 0xd7, 0x44, 0xde, 0xf6, 0xd3, 0x1d, 0xa2, 0x17, 0xdd, 0x14, 0x52, 0xd0, 0xfd, 0xbe, 0x8a,
	0xd6, 0x54, 0xfd, 0x15, 0xc2, 0xfb, 0x41, 0x34, 0x95, 0x87, 0x24, 0x67, 0x65, 0xc9, 0xa0, 0xf8,
	0x40, 0x65, 0x64, 0xbd, 0xc4, 0x56, 0x74, 0x5d, 0x08, 0xb9, 0x60, 0x20, 0x98, 0xfc, 0x6e, 0x5b,
	0x3d, 0x34, 0xd8, 0x0b, 0xf6, 0x37, 0xc8, 0x49, 0x03, 0x58, 0x07, 0xf8, 0xe9, 0xcd, 0xf3, 0x44,
	0xd0, 0x48, 0xd2, 0x50, 0xb2, 0x9c, 0xda, 0x9d, 0x1e, 0x1a, 0xb4, 0x82, 0xce, 0x06, 0x3c, 0xd2,
	0xd8, 0x29, 0xcb, 0xa9, 0x95, 0xdd, 0xee, 0x01, 0xc1, 0x52, 0x56, 0x84, 0x05, 0x10, 0x6a, 0x77,
	0xd5, 0x94, 0xd1, 0xeb, 0xab, 0xa5, 0x3b, 0x4c, 0x99, 0x3c, 0x9b, 0xc7, 0x5e, 0x02, 0xb9, 0xbf,
	0x51, 0x4c, 0xe2, 0x9b, 0xd8, 0xe7, 0x59, 0xea, 0xeb, 0x88, 0xc7, 0xde, 0x31, 0x10, 0x3a, 0x19,
	0xdf, 0x1a, 0xf6, 0x51, 0x93, 0xaa, 0x72, 0xff, 0xbc, 0x85, 0x9f, 0x29, 0x85, 0x52, 0x52, 0xa2,
	0xd4, 0xbe, 0x87, 0xf4, 0x5d, 0x21, 0x05, 0xa3, 0xa5, 0xf5, 0x05, 0x3f, 0x12, 0x51, 0x91, 0xd2,
	0x90, 0x11, 0x1b, 0xa9, 0x75, 0x47, 0x47, 0xf5, 0xd2, 0x6d, 0x07, 0xaa, 0x36, 0x19, 0x5f, 0x2d,
	0xdd, 0x57, 0xff, 0xb4, 0x45, 0xd3, 0x17, 0xb4, 0x35, 0xe9, 0x84, 0xdc, 0x61, 0xe5, 0x7f, 0x77,
	0x59, 0xf9, 0x03, 0xe1, 0xe7, 0x73, 0x1e, 0x4a, 0x08, 0x45, 0x34, 0x95, 0xe1, 0x0c, 0xd2, 0x90,
	0x43, 0xc9, 0x24, 0x83, 0xc2, 0x6e, 0xf5, 0xd0, 0xe0, 0xf1, 0xc1, 0xd8, 0x7b, 0xc0, 0xef, 0x7b,
	0x8d, 0xea, 0x93, 0x86, 0x6b, 0x64, 0x2e, 0x96, 0xae, 0x11, 0x74, 0xe6, 0xfc, 0x14, 0x76, 0x20,
	0xe5, 0x48, 0x29, 0x41, 0x68, 0x47, 0xcc, 0x1e, 0x1a, 0x98, 0x6b, 0x47, 0x3e, 0xa9, 0xda, 0x03,
	0x1c, 0x69, 0xfa, 0x82, 0xb6, 0x26, 0x9d, 0x90, 0x37, 0xe6, 0xcf, 0x5f, 0xae, 0xd1, 0x3f, 0xc4,
	0x4f, 0x76, 0x07, 0x5b, 0xd8, 0x94, 0x54, 0xe4, 0xfa, 0x1b, 0xcc, 0x40, 0xc7, 0x56, 0x17, 0xef,
	0xb1, 0x82, 0xd0, 0x6f, 0xda, 0x31, 0x33, 0x58, 0x27, 0x6b, 0x8a, 0x11, 0x5f, 0xfc, 0x71, 0x8c,
	0x45, 0xed, 0xa0, 0x8b, 0xda, 0x41, 0x97, 0xb5, 0x83, 0x7e, 0xd7, 0x0e, 0x3a, 0x5f, 0x39, 0xc6,
	0xc5, 0xca, 0x31, 0x2e, 0x57, 0x8e, 0xf1, 0xf9, 0xf8, 0x5e, 0x9b, 0xde, 0xfb, 0x18, 0xe3, 0xff,
	0xf5, 0xd1, 0x0c, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x41, 0xac, 0xf1, 0x5a, 0xc0, 0x03, 0x00,
	0x00,
}

func (m *RaftAdmissionMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftAdmissionMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftAdmissionMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdmissionOriginNode != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.AdmissionOriginNode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.AdmissionCreateTime != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.AdmissionCreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.AdmissionPriority != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.AdmissionPriority))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	return len(dAtA) - i, nil
}

func (m *AdmittedRaftLogEntries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdmittedRaftLogEntries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdmittedRaftLogEntries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StoreID != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.StoreID))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.UpToRaftLogPosition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AdmissionPriority != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.AdmissionPriority))
		i--
		dAtA[i] = 0x10
	}
	if m.RangeID != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RaftLogPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLogPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftLogPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Term != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintKvflowcontrol(dAtA []byte, offset int, v uint64) int {
	offset -= sovKvflowcontrol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RaftAdmissionMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdmissionPriority != 0 {
		n += 2 + sovKvflowcontrol(uint64(m.AdmissionPriority))
	}
	if m.AdmissionCreateTime != 0 {
		n += 2 + sovKvflowcontrol(uint64(m.AdmissionCreateTime))
	}
	if m.AdmissionOriginNode != 0 {
		n += 2 + sovKvflowcontrol(uint64(m.AdmissionOriginNode))
	}
	return n
}

func (m *AdmittedRaftLogEntries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeID != 0 {
		n += 1 + sovKvflowcontrol(uint64(m.RangeID))
	}
	if m.AdmissionPriority != 0 {
		n += 1 + sovKvflowcontrol(uint64(m.AdmissionPriority))
	}
	l = m.UpToRaftLogPosition.Size()
	n += 1 + l + sovKvflowcontrol(uint64(l))
	if m.StoreID != 0 {
		n += 1 + sovKvflowcontrol(uint64(m.StoreID))
	}
	return n
}

func (m *RaftLogPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovKvflowcontrol(uint64(m.Term))
	}
	if m.Index != 0 {
		n += 1 + sovKvflowcontrol(uint64(m.Index))
	}
	return n
}

func sovKvflowcontrol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKvflowcontrol(x uint64) (n int) {
	return sovKvflowcontrol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftAdmissionMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowcontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftAdmissionMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftAdmissionMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionPriority", wireType)
			}
			m.AdmissionPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdmissionPriority |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionCreateTime", wireType)
			}
			m.AdmissionCreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdmissionCreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionOriginNode", wireType)
			}
			m.AdmissionOriginNode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdmissionOriginNode |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowcontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowcontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdmittedRaftLogEntries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowcontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdmittedRaftLogEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdmittedRaftLogEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionPriority", wireType)
			}
			m.AdmissionPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdmissionPriority |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpToRaftLogPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKvflowcontrol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKvflowcontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpToRaftLogPosition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= github_com_cockroachdb_cockroach_pkg_roachpb.StoreID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowcontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowcontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftLogPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowcontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLogPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLogPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowcontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowcontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKvflowcontrol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKvflowcontrol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKvflowcontrol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKvflowcontrol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKvflowcontrol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKvflowcontrol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKvflowcontrol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKvflowcontrol = fmt.Errorf("proto: unexpected end of group")
)

