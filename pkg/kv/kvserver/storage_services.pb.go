// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/storage_services.proto

package kvserver

import (
	context "context"
	fmt "fmt"
	kvserverpb "github.com/cockroachdb/cockroach/pkg/kv/kvserver/kvserverpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("kv/kvserver/storage_services.proto", fileDescriptor_3502c2db1ab71edb)
}

var fileDescriptor_3502c2db1ab71edb = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x33, 0x0a, 0xb2, 0x0e, 0x82, 0xee, 0xb0, 0x5e, 0x72, 0x18, 0x70, 0x4f, 0x22, 0x98,
	0x74, 0x23, 0x1e, 0xf4, 0xe6, 0x56, 0x05, 0x0f, 0x0b, 0xa5, 0x3d, 0x08, 0x5e, 0x64, 0x3a, 0xbc,
	0x26, 0x43, 0xd2, 0xcc, 0x38, 0x33, 0x0d, 0x42, 0xaf, 0x9e, 0x3c, 0x09, 0x7e, 0x0c, 0xbf, 0x48,
	0x8f, 0x3d, 0xf6, 0xa8, 0xe9, 0xb7, 0xf0, 0x24, 0x49, 0x33, 0x34, 0xad, 0x96, 0xa6, 0xde, 0x5e,
	0xa7, 0xff, 0xdf, 0xfb, 0xff, 0x78, 0x10, 0x7c, 0x99, 0x16, 0x61, 0x5a, 0x18, 0xd0, 0x05, 0xe8,
	0xd0, 0x58, 0xa9, 0x59, 0x0c, 0x1f, 0xab, 0x9f, 0x82, 0x83, 0x09, 0x94, 0x96, 0x56, 0x92, 0x73,
	0x2e, 0x79, 0xaa, 0x25, 0xe3, 0x49, 0xd0, 0x24, 0xfc, 0x47, 0x6d, 0xcc, 0x0d, 0x6a, 0x1c, 0x6a,
	0x36, 0xb1, 0x1b, 0xca, 0x7f, 0xd8, 0x8e, 0x30, 0x25, 0x9a, 0xe7, 0x8b, 0x58, 0xc6, 0xb2, 0x1e,
	0xc3, 0x6a, 0xda, 0xbc, 0x46, 0x3f, 0x6e, 0xe3, 0xbb, 0x37, 0xb3, 0xcc, 0x8a, 0x21, 0x9b, 0x58,
	0xf2, 0x15, 0xe1, 0x07, 0xd5, 0x70, 0x03, 0xc6, 0xb0, 0x18, 0xae, 0x99, 0xe5, 0x09, 0x79, 0x11,
	0x6c, 0x35, 0xd2, 0x22, 0x70, 0xab, 0x83, 0x6d, 0x7b, 0xd0, 0x62, 0x86, 0xf0, 0x69, 0x06, 0xc6,
	0xd6, 0xa8, 0xff, 0xfc, 0x44, 0xd4, 0x28, 0x99, 0x1b, 0xb8, 0xf4, 0x1e, 0xa3, 0x1e, 0x22, 0x73,
	0x7c, 0xaf, 0xfa, 0x73, 0x94, 0x33, 0x65, 0x12, 0x69, 0xc9, 0xd5, 0xf1, 0x65, 0x2e, 0xdb, 0x48,
	0xf8, 0xd1, 0x29, 0xc8, 0x4e, 0xf9, 0x77, 0x84, 0x2f, 0x5e, 0x43, 0x06, 0x31, 0xb3, 0xb0, 0x63,
	0xd1, 0xe1, 0x1a, 0x8e, 0xdb, 0xb7, 0x79, 0xf9, 0x3f, 0x68, 0xdb, 0x2a, 0xfa, 0x7d, 0x0b, 0xe3,
	0x01, 0xe8, 0x21, 0xa8, 0x4c, 0x70, 0x46, 0x34, 0xbe, 0xdf, 0x97, 0x59, 0x06, 0xdc, 0xf6, 0x13,
	0xe0, 0xa9, 0x99, 0x4d, 0xc9, 0xd3, 0x03, 0x1d, 0x7b, 0x39, 0xa7, 0x14, 0x74, 0x8d, 0x3b, 0x0d,
	0x32, 0xc7, 0xe4, 0x3d, 0x13, 0xf6, 0xad, 0xd4, 0xaf, 0x54, 0x6d, 0x61, 0x85, 0xcc, 0x49, 0xef,
	0xc0, 0x9e, 0xbf, 0xa3, 0xae, 0xf9, 0xea, 0x04, 0xe2, 0x1f, 0xe5, 0xcd, 0x09, 0xde, 0xe5, 0xc2,
	0x1e, 0x2b, 0x6f, 0x45, 0x3b, 0x96, 0xef, 0x10, 0xae, 0x3c, 0xfa, 0x82, 0xf0, 0xd9, 0x00, 0xf4,
	0xc8, 0x4a, 0x0d, 0xe4, 0x33, 0x3e, 0xef, 0xcb, 0xa9, 0x62, 0xdc, 0xbe, 0xc9, 0x63, 0x91, 0xc3,
	0x48, 0xb1, 0x9c, 0x84, 0x07, 0xaf, 0xb9, 0x97, 0x74, 0x1e, 0xbd, 0xee, 0x80, 0xd3, 0xb8, 0x7e,
	0xb2, 0xf8, 0x45, 0xbd, 0x45, 0x49, 0xd1, 0xb2, 0xa4, 0x68, 0x55, 0x52, 0xf4, 0xb3, 0xa4, 0xe8,
	0xdb, 0x9a, 0x7a, 0xcb, 0x35, 0xf5, 0x56, 0x6b, 0xea, 0x7d, 0x38, 0x73, 0x7b, 0xc6, 0x77, 0xea,
	0x8f, 0xfc, 0xd9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x7c, 0x24, 0x56, 0x6d, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MultiRaftClient is the client API for MultiRaft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MultiRaftClient interface {
	RaftMessageBatch(ctx context.Context, opts ...grpc.CallOption) (MultiRaft_RaftMessageBatchClient, error)
	RaftSnapshot(ctx context.Context, opts ...grpc.CallOption) (MultiRaft_RaftSnapshotClient, error)
	DelegateRaftSnapshot(ctx context.Context, opts ...grpc.CallOption) (MultiRaft_DelegateRaftSnapshotClient, error)
}

type multiRaftClient struct {
	cc *grpc.ClientConn
}

func NewMultiRaftClient(cc *grpc.ClientConn) MultiRaftClient {
	return &multiRaftClient{cc}
}

func (c *multiRaftClient) RaftMessageBatch(ctx context.Context, opts ...grpc.CallOption) (MultiRaft_RaftMessageBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MultiRaft_serviceDesc.Streams[0], "/cockroach.storage.MultiRaft/RaftMessageBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiRaftRaftMessageBatchClient{stream}
	return x, nil
}

type MultiRaft_RaftMessageBatchClient interface {
	Send(*kvserverpb.RaftMessageRequestBatch) error
	Recv() (*kvserverpb.RaftMessageResponse, error)
	grpc.ClientStream
}

type multiRaftRaftMessageBatchClient struct {
	grpc.ClientStream
}

func (x *multiRaftRaftMessageBatchClient) Send(m *kvserverpb.RaftMessageRequestBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *multiRaftRaftMessageBatchClient) Recv() (*kvserverpb.RaftMessageResponse, error) {
	m := new(kvserverpb.RaftMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *multiRaftClient) RaftSnapshot(ctx context.Context, opts ...grpc.CallOption) (MultiRaft_RaftSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MultiRaft_serviceDesc.Streams[1], "/cockroach.storage.MultiRaft/RaftSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiRaftRaftSnapshotClient{stream}
	return x, nil
}

type MultiRaft_RaftSnapshotClient interface {
	Send(*kvserverpb.SnapshotRequest) error
	Recv() (*kvserverpb.SnapshotResponse, error)
	grpc.ClientStream
}

type multiRaftRaftSnapshotClient struct {
	grpc.ClientStream
}

func (x *multiRaftRaftSnapshotClient) Send(m *kvserverpb.SnapshotRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *multiRaftRaftSnapshotClient) Recv() (*kvserverpb.SnapshotResponse, error) {
	m := new(kvserverpb.SnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *multiRaftClient) DelegateRaftSnapshot(ctx context.Context, opts ...grpc.CallOption) (MultiRaft_DelegateRaftSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MultiRaft_serviceDesc.Streams[2], "/cockroach.storage.MultiRaft/DelegateRaftSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiRaftDelegateRaftSnapshotClient{stream}
	return x, nil
}

type MultiRaft_DelegateRaftSnapshotClient interface {
	Send(*kvserverpb.DelegateSnapshotRequest) error
	Recv() (*kvserverpb.DelegateSnapshotResponse, error)
	grpc.ClientStream
}

type multiRaftDelegateRaftSnapshotClient struct {
	grpc.ClientStream
}

func (x *multiRaftDelegateRaftSnapshotClient) Send(m *kvserverpb.DelegateSnapshotRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *multiRaftDelegateRaftSnapshotClient) Recv() (*kvserverpb.DelegateSnapshotResponse, error) {
	m := new(kvserverpb.DelegateSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MultiRaftServer is the server API for MultiRaft service.
type MultiRaftServer interface {
	RaftMessageBatch(MultiRaft_RaftMessageBatchServer) error
	RaftSnapshot(MultiRaft_RaftSnapshotServer) error
	DelegateRaftSnapshot(MultiRaft_DelegateRaftSnapshotServer) error
}

// UnimplementedMultiRaftServer can be embedded to have forward compatible implementations.
type UnimplementedMultiRaftServer struct {
}

func (*UnimplementedMultiRaftServer) RaftMessageBatch(srv MultiRaft_RaftMessageBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method RaftMessageBatch not implemented")
}
func (*UnimplementedMultiRaftServer) RaftSnapshot(srv MultiRaft_RaftSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method RaftSnapshot not implemented")
}
func (*UnimplementedMultiRaftServer) DelegateRaftSnapshot(srv MultiRaft_DelegateRaftSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method DelegateRaftSnapshot not implemented")
}

func RegisterMultiRaftServer(s *grpc.Server, srv MultiRaftServer) {
	s.RegisterService(&_MultiRaft_serviceDesc, srv)
}

func _MultiRaft_RaftMessageBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MultiRaftServer).RaftMessageBatch(&multiRaftRaftMessageBatchServer{stream})
}

type MultiRaft_RaftMessageBatchServer interface {
	Send(*kvserverpb.RaftMessageResponse) error
	Recv() (*kvserverpb.RaftMessageRequestBatch, error)
	grpc.ServerStream
}

type multiRaftRaftMessageBatchServer struct {
	grpc.ServerStream
}

func (x *multiRaftRaftMessageBatchServer) Send(m *kvserverpb.RaftMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *multiRaftRaftMessageBatchServer) Recv() (*kvserverpb.RaftMessageRequestBatch, error) {
	m := new(kvserverpb.RaftMessageRequestBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MultiRaft_RaftSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MultiRaftServer).RaftSnapshot(&multiRaftRaftSnapshotServer{stream})
}

type MultiRaft_RaftSnapshotServer interface {
	Send(*kvserverpb.SnapshotResponse) error
	Recv() (*kvserverpb.SnapshotRequest, error)
	grpc.ServerStream
}

type multiRaftRaftSnapshotServer struct {
	grpc.ServerStream
}

func (x *multiRaftRaftSnapshotServer) Send(m *kvserverpb.SnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *multiRaftRaftSnapshotServer) Recv() (*kvserverpb.SnapshotRequest, error) {
	m := new(kvserverpb.SnapshotRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MultiRaft_DelegateRaftSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MultiRaftServer).DelegateRaftSnapshot(&multiRaftDelegateRaftSnapshotServer{stream})
}

type MultiRaft_DelegateRaftSnapshotServer interface {
	Send(*kvserverpb.DelegateSnapshotResponse) error
	Recv() (*kvserverpb.DelegateSnapshotRequest, error)
	grpc.ServerStream
}

type multiRaftDelegateRaftSnapshotServer struct {
	grpc.ServerStream
}

func (x *multiRaftDelegateRaftSnapshotServer) Send(m *kvserverpb.DelegateSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *multiRaftDelegateRaftSnapshotServer) Recv() (*kvserverpb.DelegateSnapshotRequest, error) {
	m := new(kvserverpb.DelegateSnapshotRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MultiRaft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.storage.MultiRaft",
	HandlerType: (*MultiRaftServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RaftMessageBatch",
			Handler:       _MultiRaft_RaftMessageBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RaftSnapshot",
			Handler:       _MultiRaft_RaftSnapshot_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DelegateRaftSnapshot",
			Handler:       _MultiRaft_DelegateRaftSnapshot_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "kv/kvserver/storage_services.proto",
}

// PerReplicaClient is the client API for PerReplica service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PerReplicaClient interface {
	CollectChecksum(ctx context.Context, in *CollectChecksumRequest, opts ...grpc.CallOption) (*CollectChecksumResponse, error)
	WaitForApplication(ctx context.Context, in *WaitForApplicationRequest, opts ...grpc.CallOption) (*WaitForApplicationResponse, error)
	WaitForReplicaInit(ctx context.Context, in *WaitForReplicaInitRequest, opts ...grpc.CallOption) (*WaitForReplicaInitResponse, error)
}

type perReplicaClient struct {
	cc *grpc.ClientConn
}

func NewPerReplicaClient(cc *grpc.ClientConn) PerReplicaClient {
	return &perReplicaClient{cc}
}

func (c *perReplicaClient) CollectChecksum(ctx context.Context, in *CollectChecksumRequest, opts ...grpc.CallOption) (*CollectChecksumResponse, error) {
	out := new(CollectChecksumResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerReplica/CollectChecksum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perReplicaClient) WaitForApplication(ctx context.Context, in *WaitForApplicationRequest, opts ...grpc.CallOption) (*WaitForApplicationResponse, error) {
	out := new(WaitForApplicationResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerReplica/WaitForApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perReplicaClient) WaitForReplicaInit(ctx context.Context, in *WaitForReplicaInitRequest, opts ...grpc.CallOption) (*WaitForReplicaInitResponse, error) {
	out := new(WaitForReplicaInitResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerReplica/WaitForReplicaInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerReplicaServer is the server API for PerReplica service.
type PerReplicaServer interface {
	CollectChecksum(context.Context, *CollectChecksumRequest) (*CollectChecksumResponse, error)
	WaitForApplication(context.Context, *WaitForApplicationRequest) (*WaitForApplicationResponse, error)
	WaitForReplicaInit(context.Context, *WaitForReplicaInitRequest) (*WaitForReplicaInitResponse, error)
}

// UnimplementedPerReplicaServer can be embedded to have forward compatible implementations.
type UnimplementedPerReplicaServer struct {
}

func (*UnimplementedPerReplicaServer) CollectChecksum(ctx context.Context, req *CollectChecksumRequest) (*CollectChecksumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectChecksum not implemented")
}
func (*UnimplementedPerReplicaServer) WaitForApplication(ctx context.Context, req *WaitForApplicationRequest) (*WaitForApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForApplication not implemented")
}
func (*UnimplementedPerReplicaServer) WaitForReplicaInit(ctx context.Context, req *WaitForReplicaInitRequest) (*WaitForReplicaInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForReplicaInit not implemented")
}

func RegisterPerReplicaServer(s *grpc.Server, srv PerReplicaServer) {
	s.RegisterService(&_PerReplica_serviceDesc, srv)
}

func _PerReplica_CollectChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectChecksumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerReplicaServer).CollectChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.storage.PerReplica/CollectChecksum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerReplicaServer).CollectChecksum(ctx, req.(*CollectChecksumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerReplica_WaitForApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerReplicaServer).WaitForApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.storage.PerReplica/WaitForApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerReplicaServer).WaitForApplication(ctx, req.(*WaitForApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerReplica_WaitForReplicaInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForReplicaInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerReplicaServer).WaitForReplicaInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.storage.PerReplica/WaitForReplicaInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerReplicaServer).WaitForReplicaInit(ctx, req.(*WaitForReplicaInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PerReplica_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.storage.PerReplica",
	HandlerType: (*PerReplicaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectChecksum",
			Handler:    _PerReplica_CollectChecksum_Handler,
		},
		{
			MethodName: "WaitForApplication",
			Handler:    _PerReplica_WaitForApplication_Handler,
		},
		{
			MethodName: "WaitForReplicaInit",
			Handler:    _PerReplica_WaitForReplicaInit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kv/kvserver/storage_services.proto",
}

// PerStoreClient is the client API for PerStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PerStoreClient interface {
	CompactEngineSpan(ctx context.Context, in *CompactEngineSpanRequest, opts ...grpc.CallOption) (*CompactEngineSpanResponse, error)
}

type perStoreClient struct {
	cc *grpc.ClientConn
}

func NewPerStoreClient(cc *grpc.ClientConn) PerStoreClient {
	return &perStoreClient{cc}
}

func (c *perStoreClient) CompactEngineSpan(ctx context.Context, in *CompactEngineSpanRequest, opts ...grpc.CallOption) (*CompactEngineSpanResponse, error) {
	out := new(CompactEngineSpanResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerStore/CompactEngineSpan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerStoreServer is the server API for PerStore service.
type PerStoreServer interface {
	CompactEngineSpan(context.Context, *CompactEngineSpanRequest) (*CompactEngineSpanResponse, error)
}

// UnimplementedPerStoreServer can be embedded to have forward compatible implementations.
type UnimplementedPerStoreServer struct {
}

func (*UnimplementedPerStoreServer) CompactEngineSpan(ctx context.Context, req *CompactEngineSpanRequest) (*CompactEngineSpanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompactEngineSpan not implemented")
}

func RegisterPerStoreServer(s *grpc.Server, srv PerStoreServer) {
	s.RegisterService(&_PerStore_serviceDesc, srv)
}

func _PerStore_CompactEngineSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompactEngineSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerStoreServer).CompactEngineSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.storage.PerStore/CompactEngineSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerStoreServer).CompactEngineSpan(ctx, req.(*CompactEngineSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PerStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.storage.PerStore",
	HandlerType: (*PerStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompactEngineSpan",
			Handler:    _PerStore_CompactEngineSpan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kv/kvserver/storage_services.proto",
}
