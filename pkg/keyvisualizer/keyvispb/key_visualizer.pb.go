// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: keyvisualizer/keyvispb/key_visualizer.proto

package keyvispb

import (
	context "context"
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateBoundariesRequest struct {
	// Boundaries aren't required to be contiguous, but they must not overlap.
	// Boundaries do not need to be sorted.
	Boundaries []roachpb.Span `protobuf:"bytes,1,rep,name=boundaries,proto3" json:"boundaries"`
	Time       time.Time      `protobuf:"bytes,2,opt,name=time,proto3,stdtime" json:"time"`
}

func (m *UpdateBoundariesRequest) Reset()         { *m = UpdateBoundariesRequest{} }
func (m *UpdateBoundariesRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBoundariesRequest) ProtoMessage()    {}
func (*UpdateBoundariesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9c83b7ebc656f2, []int{0}
}
func (m *UpdateBoundariesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBoundariesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpdateBoundariesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBoundariesRequest.Merge(m, src)
}
func (m *UpdateBoundariesRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBoundariesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBoundariesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBoundariesRequest proto.InternalMessageInfo

type UpdateBoundariesResponse struct {
}

func (m *UpdateBoundariesResponse) Reset()         { *m = UpdateBoundariesResponse{} }
func (m *UpdateBoundariesResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateBoundariesResponse) ProtoMessage()    {}
func (*UpdateBoundariesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9c83b7ebc656f2, []int{1}
}
func (m *UpdateBoundariesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBoundariesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpdateBoundariesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBoundariesResponse.Merge(m, src)
}
func (m *UpdateBoundariesResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBoundariesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBoundariesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBoundariesResponse proto.InternalMessageInfo

type GetSamplesRequest struct {
	// A node_id of 0 indicates the server should issue a fan-out to all nodes.
	NodeID             github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	CollectedOnOrAfter time.Time                                           `protobuf:"bytes,2,opt,name=collected_on_or_after,json=collectedOnOrAfter,proto3,stdtime" json:"collected_on_or_after"`
}

func (m *GetSamplesRequest) Reset()         { *m = GetSamplesRequest{} }
func (m *GetSamplesRequest) String() string { return proto.CompactTextString(m) }
func (*GetSamplesRequest) ProtoMessage()    {}
func (*GetSamplesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9c83b7ebc656f2, []int{2}
}
func (m *GetSamplesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSamplesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSamplesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSamplesRequest.Merge(m, src)
}
func (m *GetSamplesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSamplesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSamplesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSamplesRequest proto.InternalMessageInfo

// SpanStats is used by the SpanStatsCollector to count the requests to a
// a specific roachpb.Span.
type SpanStats struct {
	Span roachpb.Span `protobuf:"bytes,1,opt,name=span,proto3" json:"span"`
	// requests is the tally of successful roachpb.RequestUnion.Requests sent
	// during a sample.
	Requests uint64 `protobuf:"varint,2,opt,name=requests,proto3" json:"requests,omitempty"`
}

func (m *SpanStats) Reset()         { *m = SpanStats{} }
func (m *SpanStats) String() string { return proto.CompactTextString(m) }
func (*SpanStats) ProtoMessage()    {}
func (*SpanStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9c83b7ebc656f2, []int{3}
}
func (m *SpanStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SpanStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanStats.Merge(m, src)
}
func (m *SpanStats) XXX_Size() int {
	return m.Size()
}
func (m *SpanStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanStats.DiscardUnknown(m)
}

var xxx_messageInfo_SpanStats proto.InternalMessageInfo

// Sample is a sample collected by the SpanStatsCollector. An array of Samples
// comprise a keyvispb.GetSamplesResponse.
type Sample struct {
	// sample_time is the time the sample ended.
	SampleTime time.Time `protobuf:"bytes,1,opt,name=sample_time,json=sampleTime,proto3,stdtime" json:"sample_time"`
	// span_stats does not need to be sorted lexicographically.
	SpanStats []SpanStats `protobuf:"bytes,2,rep,name=span_stats,json=spanStats,proto3" json:"span_stats"`
}

func (m *Sample) Reset()         { *m = Sample{} }
func (m *Sample) String() string { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()    {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9c83b7ebc656f2, []int{4}
}
func (m *Sample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(m, src)
}
func (m *Sample) XXX_Size() int {
	return m.Size()
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

type GetSamplesResponse struct {
	Samples []Sample `protobuf:"bytes,1,rep,name=samples,proto3" json:"samples"`
}

func (m *GetSamplesResponse) Reset()         { *m = GetSamplesResponse{} }
func (m *GetSamplesResponse) String() string { return proto.CompactTextString(m) }
func (*GetSamplesResponse) ProtoMessage()    {}
func (*GetSamplesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9c83b7ebc656f2, []int{5}
}
func (m *GetSamplesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSamplesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSamplesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSamplesResponse.Merge(m, src)
}
func (m *GetSamplesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSamplesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSamplesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSamplesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UpdateBoundariesRequest)(nil), "cockroach.keyvisualizer.keyvispb.UpdateBoundariesRequest")
	proto.RegisterType((*UpdateBoundariesResponse)(nil), "cockroach.keyvisualizer.keyvispb.UpdateBoundariesResponse")
	proto.RegisterType((*GetSamplesRequest)(nil), "cockroach.keyvisualizer.keyvispb.GetSamplesRequest")
	proto.RegisterType((*SpanStats)(nil), "cockroach.keyvisualizer.keyvispb.SpanStats")
	proto.RegisterType((*Sample)(nil), "cockroach.keyvisualizer.keyvispb.Sample")
	proto.RegisterType((*GetSamplesResponse)(nil), "cockroach.keyvisualizer.keyvispb.GetSamplesResponse")
}

func init() {
	proto.RegisterFile("keyvisualizer/keyvispb/key_visualizer.proto", fileDescriptor_4f9c83b7ebc656f2)
}

var fileDescriptor_4f9c83b7ebc656f2 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0xbd, 0x7d, 0xf2, 0xa4, 0xed, 0x54, 0x48, 0xb0, 0x02, 0x35, 0xb2, 0x90, 0x13, 0xf9,
	0x14, 0xa9, 0xd2, 0x5a, 0x24, 0x1c, 0x78, 0x11, 0x87, 0x46, 0x20, 0xa8, 0x90, 0x28, 0x4a, 0x78,
	0x91, 0x22, 0x81, 0xb5, 0xb6, 0xb7, 0xae, 0x95, 0xc4, 0xbb, 0x78, 0x37, 0x48, 0xe1, 0x2b, 0x70,
	0xa9, 0x38, 0x71, 0xe5, 0xdb, 0xe4, 0xd8, 0x63, 0x4f, 0x01, 0x92, 0x6f, 0xc1, 0x09, 0x79, 0xfd,
	0x92, 0x42, 0x41, 0x69, 0xb8, 0xcd, 0xee, 0xf8, 0x37, 0xf3, 0x9f, 0xdd, 0xff, 0x1a, 0xf6, 0x06,
	0x6c, 0xf2, 0x3e, 0x92, 0x63, 0x3a, 0x8c, 0x3e, 0xb0, 0xc4, 0xc9, 0x56, 0xc2, 0x4b, 0x03, 0x77,
	0xb9, 0x4f, 0x44, 0xc2, 0x15, 0xc7, 0x0d, 0x9f, 0xfb, 0x83, 0x84, 0x53, 0xff, 0x98, 0xfc, 0x82,
	0x91, 0x02, 0x33, 0xb1, 0xce, 0x0a, 0xcf, 0x09, 0xa8, 0xa2, 0x19, 0x65, 0x5e, 0x0f, 0x79, 0xc8,
	0x75, 0xe8, 0xa4, 0x51, 0xbe, 0x7b, 0x33, 0xe4, 0x3c, 0x1c, 0x32, 0x87, 0x8a, 0xc8, 0xa1, 0x71,
	0xcc, 0x15, 0x55, 0x11, 0x8f, 0x65, 0x9e, 0xad, 0xe7, 0x59, 0xbd, 0xf2, 0xc6, 0x47, 0x8e, 0x8a,
	0x46, 0x4c, 0x2a, 0x3a, 0x12, 0xd9, 0x07, 0xf6, 0x27, 0x04, 0xbb, 0x2f, 0x45, 0x40, 0x15, 0xeb,
	0xf0, 0x71, 0x1c, 0xd0, 0x24, 0x62, 0xb2, 0xcb, 0xde, 0x8d, 0x99, 0x54, 0xf8, 0x01, 0x80, 0x57,
	0x6e, 0xd6, 0x50, 0xe3, 0xbf, 0xe6, 0x4e, 0x6b, 0x97, 0x2c, 0xb5, 0xe7, 0x1a, 0x49, 0x4f, 0xd0,
	0xb8, 0x53, 0x99, 0xce, 0xea, 0x46, 0xf7, 0x1c, 0x80, 0xef, 0x40, 0x25, 0xed, 0x56, 0xdb, 0x68,
	0xa0, 0xe6, 0x4e, 0xcb, 0x24, 0x99, 0x14, 0x52, 0x48, 0x21, 0x2f, 0x0a, 0x29, 0x9d, 0xad, 0x94,
	0x3d, 0xf9, 0x5a, 0x47, 0x5d, 0x4d, 0xd8, 0x26, 0xd4, 0x2e, 0x6a, 0x92, 0x82, 0xc7, 0x92, 0xd9,
	0x53, 0x04, 0xd7, 0x1e, 0x33, 0xd5, 0xa3, 0x23, 0x31, 0x5c, 0x4a, 0xed, 0xc3, 0x66, 0xcc, 0x03,
	0xe6, 0x46, 0x41, 0x0d, 0x35, 0x50, 0xf3, 0xff, 0xce, 0xfe, 0x7c, 0x56, 0xaf, 0x3e, 0xe3, 0x01,
	0x3b, 0x78, 0xf8, 0x63, 0x56, 0x6f, 0x87, 0x91, 0x3a, 0x1e, 0x7b, 0xc4, 0xe7, 0x23, 0xa7, 0xd4,
	0x1f, 0x78, 0xcb, 0xd8, 0x11, 0x83, 0xd0, 0x29, 0xe6, 0xc9, 0xb0, 0x6e, 0x35, 0xad, 0x78, 0x10,
	0xe0, 0xd7, 0x70, 0xc3, 0xe7, 0xc3, 0x21, 0xf3, 0x15, 0x0b, 0x5c, 0x1e, 0xbb, 0x3c, 0x71, 0xe9,
	0x91, 0x62, 0xc9, 0x5a, 0x83, 0xe1, 0xb2, 0xc4, 0x61, 0x7c, 0x98, 0xec, 0xa7, 0xbc, 0xdd, 0x87,
	0xed, 0xf4, 0xe8, 0x7a, 0x8a, 0x2a, 0x89, 0x6f, 0x41, 0x45, 0x0a, 0x1a, 0x6b, 0xf9, 0x2b, 0x8f,
	0x59, 0x7f, 0x8a, 0x4d, 0xd8, 0x4a, 0xb2, 0xf9, 0xa5, 0xd6, 0x52, 0xe9, 0x96, 0x6b, 0xfb, 0x0b,
	0x82, 0x6a, 0x76, 0x46, 0xf8, 0x11, 0xec, 0x48, 0x1d, 0xb9, 0xfa, 0x3a, 0xd0, 0x1a, 0xaa, 0x21,
	0x03, 0xd3, 0x14, 0x7e, 0x0e, 0x90, 0x76, 0x75, 0x65, 0x2a, 0xb7, 0xb6, 0xa1, 0xdd, 0xb0, 0x47,
	0x56, 0x39, 0x99, 0x94, 0x13, 0xe6, 0xd2, 0xb7, 0x65, 0xb1, 0x61, 0xbf, 0x05, 0x7c, 0xfe, 0x26,
	0xb3, 0x0b, 0xc6, 0x4f, 0x60, 0x33, 0xeb, 0x5a, 0x58, 0xae, 0x79, 0x89, 0x26, 0x1a, 0xc8, 0x3b,
	0x14, 0x78, 0xeb, 0xf3, 0x06, 0x5c, 0x79, 0xca, 0x26, 0xaf, 0x4a, 0x00, 0x7f, 0x44, 0x70, 0xf5,
	0x77, 0x67, 0xe1, 0xbb, 0xab, 0xeb, 0xff, 0xe5, 0x85, 0x98, 0xf7, 0xfe, 0x05, 0xcd, 0x8d, 0x6c,
	0xe0, 0x09, 0xc0, 0x72, 0x7e, 0xdc, 0x5e, 0x5d, 0xeb, 0x82, 0xef, 0xcd, 0xdb, 0xeb, 0x41, 0x45,
	0xeb, 0xce, 0x9b, 0xe9, 0x77, 0xcb, 0x98, 0xce, 0x2d, 0x74, 0x3a, 0xb7, 0xd0, 0xd9, 0xdc, 0x42,
	0xdf, 0xe6, 0x16, 0x3a, 0x59, 0x58, 0xc6, 0xe9, 0xc2, 0x32, 0xce, 0x16, 0x96, 0xd1, 0xbf, 0x7f,
	0xa9, 0x27, 0xf3, 0xe7, 0xbf, 0x9e, 0x57, 0xd5, 0xae, 0x6a, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0x87, 0x91, 0x8a, 0x44, 0x16, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyVisualizerClient is the client API for KeyVisualizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyVisualizerClient interface {
	// UpdateBoundaries tells KV which spans to collect statistics for.
	UpdateBoundaries(ctx context.Context, in *UpdateBoundariesRequest, opts ...grpc.CallOption) (*UpdateBoundariesResponse, error)
	// GetSamples gets the collected samples from KV. It initiates a fan-out to all
	// nodes when GetSamplesRequest.node_id is set to 0. Otherwise, it returns
	// samples obtained from stores on the desired node.
	GetSamples(ctx context.Context, in *GetSamplesRequest, opts ...grpc.CallOption) (*GetSamplesResponse, error)
}

type keyVisualizerClient struct {
	cc *grpc.ClientConn
}

func NewKeyVisualizerClient(cc *grpc.ClientConn) KeyVisualizerClient {
	return &keyVisualizerClient{cc}
}

func (c *keyVisualizerClient) UpdateBoundaries(ctx context.Context, in *UpdateBoundariesRequest, opts ...grpc.CallOption) (*UpdateBoundariesResponse, error) {
	out := new(UpdateBoundariesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.keyvisualizer.keyvispb.KeyVisualizer/UpdateBoundaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyVisualizerClient) GetSamples(ctx context.Context, in *GetSamplesRequest, opts ...grpc.CallOption) (*GetSamplesResponse, error) {
	out := new(GetSamplesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.keyvisualizer.keyvispb.KeyVisualizer/GetSamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyVisualizerServer is the server API for KeyVisualizer service.
type KeyVisualizerServer interface {
	// UpdateBoundaries tells KV which spans to collect statistics for.
	UpdateBoundaries(context.Context, *UpdateBoundariesRequest) (*UpdateBoundariesResponse, error)
	// GetSamples gets the collected samples from KV. It initiates a fan-out to all
	// nodes when GetSamplesRequest.node_id is set to 0. Otherwise, it returns
	// samples obtained from stores on the desired node.
	GetSamples(context.Context, *GetSamplesRequest) (*GetSamplesResponse, error)
}

// UnimplementedKeyVisualizerServer can be embedded to have forward compatible implementations.
type UnimplementedKeyVisualizerServer struct {
}

func (*UnimplementedKeyVisualizerServer) UpdateBoundaries(ctx context.Context, req *UpdateBoundariesRequest) (*UpdateBoundariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoundaries not implemented")
}
func (*UnimplementedKeyVisualizerServer) GetSamples(ctx context.Context, req *GetSamplesRequest) (*GetSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSamples not implemented")
}

func RegisterKeyVisualizerServer(s *grpc.Server, srv KeyVisualizerServer) {
	s.RegisterService(&_KeyVisualizer_serviceDesc, srv)
}

func _KeyVisualizer_UpdateBoundaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBoundariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyVisualizerServer).UpdateBoundaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.keyvisualizer.keyvispb.KeyVisualizer/UpdateBoundaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyVisualizerServer).UpdateBoundaries(ctx, req.(*UpdateBoundariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyVisualizer_GetSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyVisualizerServer).GetSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.keyvisualizer.keyvispb.KeyVisualizer/GetSamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyVisualizerServer).GetSamples(ctx, req.(*GetSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyVisualizer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.keyvisualizer.keyvispb.KeyVisualizer",
	HandlerType: (*KeyVisualizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateBoundaries",
			Handler:    _KeyVisualizer_UpdateBoundaries_Handler,
		},
		{
			MethodName: "GetSamples",
			Handler:    _KeyVisualizer_GetSamples_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keyvisualizer/keyvispb/key_visualizer.proto",
}

func (m *UpdateBoundariesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBoundariesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBoundariesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Time):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintKeyVisualizer(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.Boundaries) > 0 {
		for iNdEx := len(m.Boundaries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Boundaries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeyVisualizer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBoundariesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBoundariesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBoundariesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetSamplesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSamplesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSamplesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CollectedOnOrAfter, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CollectedOnOrAfter):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintKeyVisualizer(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if m.NodeID != 0 {
		i = encodeVarintKeyVisualizer(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpanStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpanStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Requests != 0 {
		i = encodeVarintKeyVisualizer(dAtA, i, uint64(m.Requests))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintKeyVisualizer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Sample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpanStats) > 0 {
		for iNdEx := len(m.SpanStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpanStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeyVisualizer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.SampleTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.SampleTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintKeyVisualizer(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetSamplesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSamplesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSamplesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Samples) > 0 {
		for iNdEx := len(m.Samples) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Samples[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeyVisualizer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeyVisualizer(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeyVisualizer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateBoundariesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Boundaries) > 0 {
		for _, e := range m.Boundaries {
			l = e.Size()
			n += 1 + l + sovKeyVisualizer(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovKeyVisualizer(uint64(l))
	return n
}

func (m *UpdateBoundariesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetSamplesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovKeyVisualizer(uint64(m.NodeID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CollectedOnOrAfter)
	n += 1 + l + sovKeyVisualizer(uint64(l))
	return n
}

func (m *SpanStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Span.Size()
	n += 1 + l + sovKeyVisualizer(uint64(l))
	if m.Requests != 0 {
		n += 1 + sovKeyVisualizer(uint64(m.Requests))
	}
	return n
}

func (m *Sample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.SampleTime)
	n += 1 + l + sovKeyVisualizer(uint64(l))
	if len(m.SpanStats) > 0 {
		for _, e := range m.SpanStats {
			l = e.Size()
			n += 1 + l + sovKeyVisualizer(uint64(l))
		}
	}
	return n
}

func (m *GetSamplesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Samples) > 0 {
		for _, e := range m.Samples {
			l = e.Size()
			n += 1 + l + sovKeyVisualizer(uint64(l))
		}
	}
	return n
}

func sovKeyVisualizer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeyVisualizer(x uint64) (n int) {
	return sovKeyVisualizer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateBoundariesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyVisualizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBoundariesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBoundariesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boundaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyVisualizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Boundaries = append(m.Boundaries, roachpb.Span{})
			if err := m.Boundaries[len(m.Boundaries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyVisualizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyVisualizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBoundariesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyVisualizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBoundariesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBoundariesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipKeyVisualizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSamplesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyVisualizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSamplesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSamplesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyVisualizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedOnOrAfter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyVisualizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CollectedOnOrAfter, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyVisualizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyVisualizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyVisualizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			m.Requests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyVisualizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Requests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeyVisualizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyVisualizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyVisualizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.SampleTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyVisualizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanStats = append(m.SpanStats, SpanStats{})
			if err := m.SpanStats[len(m.SpanStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyVisualizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSamplesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyVisualizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSamplesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSamplesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Samples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyVisualizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Samples = append(m.Samples, Sample{})
			if err := m.Samples[len(m.Samples)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyVisualizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyVisualizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeyVisualizer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeyVisualizer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyVisualizer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyVisualizer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeyVisualizer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeyVisualizer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeyVisualizer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeyVisualizer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeyVisualizer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeyVisualizer = fmt.Errorf("proto: unexpected end of group")
)

