// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: repstream/streampb/stream.proto

package streampb

import (
	fmt "fmt"
	jobspb "github.com/cockroachdb/cockroach/pkg/jobs/jobspb"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	util "github.com/cockroachdb/cockroach/pkg/util"
	hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StreamReplicationStatus_StreamStatus int32

const (
	// Stream is running. Consumers should continue to heartbeat.
	StreamReplicationStatus_STREAM_ACTIVE StreamReplicationStatus_StreamStatus = 0
	// Stream stopped running. Consumers should stop heartbeating and
	// optionally start a new replication stream.
	StreamReplicationStatus_STREAM_INACTIVE StreamReplicationStatus_StreamStatus = 1
	// Stream replication is paused. Consumers can resume the job and start heartbeating.
	StreamReplicationStatus_STREAM_PAUSED StreamReplicationStatus_StreamStatus = 2
	// Stream status is unknown. Consumers should retry heartbeating.
	StreamReplicationStatus_UNKNOWN_STREAM_STATUS_RETRY StreamReplicationStatus_StreamStatus = 4
)

var StreamReplicationStatus_StreamStatus_name = map[int32]string{
	0: "STREAM_ACTIVE",
	1: "STREAM_INACTIVE",
	2: "STREAM_PAUSED",
	4: "UNKNOWN_STREAM_STATUS_RETRY",
}

var StreamReplicationStatus_StreamStatus_value = map[string]int32{
	"STREAM_ACTIVE":               0,
	"STREAM_INACTIVE":             1,
	"STREAM_PAUSED":               2,
	"UNKNOWN_STREAM_STATUS_RETRY": 4,
}

func (x StreamReplicationStatus_StreamStatus) String() string {
	return proto.EnumName(StreamReplicationStatus_StreamStatus_name, int32(x))
}

func (StreamReplicationStatus_StreamStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e5b61105bf62591e, []int{4, 0}
}

// ReplicationProducerSpec is the specification returned by the replication
// producer job when it is created.
type ReplicationProducerSpec struct {
	StreamID StreamID `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3,casttype=StreamID" json:"stream_id,omitempty"`
	// ReplicationStartTime is the initial timestamp from which the replication
	// producer job will begin streaming MVCC revisions. This timestamp is picked
	// once when the replication producer job is created, and is never updated
	// through the lifetime of a replication stream. This will be the timestamp as
	// of which each partition will perform its initial rangefeed scan.
	ReplicationStartTime hlc.Timestamp `protobuf:"bytes,2,opt,name=replication_start_time,json=replicationStartTime,proto3" json:"replication_start_time"`
}

func (m *ReplicationProducerSpec) Reset()         { *m = ReplicationProducerSpec{} }
func (m *ReplicationProducerSpec) String() string { return proto.CompactTextString(m) }
func (*ReplicationProducerSpec) ProtoMessage()    {}
func (*ReplicationProducerSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5b61105bf62591e, []int{0}
}
func (m *ReplicationProducerSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationProducerSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicationProducerSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationProducerSpec.Merge(m, src)
}
func (m *ReplicationProducerSpec) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationProducerSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationProducerSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationProducerSpec proto.InternalMessageInfo

// StreamPartitionSpec is the stream partition specification.
type StreamPartitionSpec struct {
	// PreviousHighWaterTimestamp specifies the timestamp from which spans will
	// start ingesting data in the replication job. This timestamp is empty unless
	// the replication job resumes after a progress checkpoint has been recorded.
	// While it is empty we use the InitialScanTimestamp described below.
	PreviousHighWaterTimestamp hlc.Timestamp `protobuf:"bytes,1,opt,name=previous_high_water_timestamp,json=previousHighWaterTimestamp,proto3" json:"previous_high_water_timestamp"`
	// InitialScanTimestamp is the timestamp at which the partition will run the
	// initial rangefeed scan before replicating further changes to the target
	// spans. This timestamp is always non-empty, but a partition will only run an
	// initial scan if no progress has been recorded prior to the current
	// resumption of the replication job. Otherwise, all spans will start
	// ingesting data from the PreviousHighWaterTimestamp described above.
	InitialScanTimestamp hlc.Timestamp `protobuf:"bytes,4,opt,name=initial_scan_timestamp,json=initialScanTimestamp,proto3" json:"initial_scan_timestamp"`
	// List of spans to stream.
	Spans  []roachpb.Span                      `protobuf:"bytes,2,rep,name=spans,proto3" json:"spans"`
	Config StreamPartitionSpec_ExecutionConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config"`
}

func (m *StreamPartitionSpec) Reset()         { *m = StreamPartitionSpec{} }
func (m *StreamPartitionSpec) String() string { return proto.CompactTextString(m) }
func (*StreamPartitionSpec) ProtoMessage()    {}
func (*StreamPartitionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5b61105bf62591e, []int{1}
}
func (m *StreamPartitionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamPartitionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StreamPartitionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamPartitionSpec.Merge(m, src)
}
func (m *StreamPartitionSpec) XXX_Size() int {
	return m.Size()
}
func (m *StreamPartitionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamPartitionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_StreamPartitionSpec proto.InternalMessageInfo

// ExecutionConfig describes various knobs to control execution behavior
// of the stream.  If unspecified, reasonable defaults will be set.
type StreamPartitionSpec_ExecutionConfig struct {
	// Controls the number of concurrent scan requests issued during initial scan.
	InitialScanParallelism int32 `protobuf:"varint,1,opt,name=initial_scan_parallelism,json=initialScanParallelism,proto3" json:"initial_scan_parallelism,omitempty"`
	// Controls how often checkpoint records are published.
	MinCheckpointFrequency time.Duration `protobuf:"bytes,2,opt,name=min_checkpoint_frequency,json=minCheckpointFrequency,proto3,stdduration" json:"min_checkpoint_frequency"`
	// Controls batch size in bytes.
	BatchByteSize int64 `protobuf:"varint,3,opt,name=batch_byte_size,json=batchByteSize,proto3" json:"batch_byte_size,omitempty"`
}

func (m *StreamPartitionSpec_ExecutionConfig) Reset()         { *m = StreamPartitionSpec_ExecutionConfig{} }
func (m *StreamPartitionSpec_ExecutionConfig) String() string { return proto.CompactTextString(m) }
func (*StreamPartitionSpec_ExecutionConfig) ProtoMessage()    {}
func (*StreamPartitionSpec_ExecutionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5b61105bf62591e, []int{1, 0}
}
func (m *StreamPartitionSpec_ExecutionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamPartitionSpec_ExecutionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StreamPartitionSpec_ExecutionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamPartitionSpec_ExecutionConfig.Merge(m, src)
}
func (m *StreamPartitionSpec_ExecutionConfig) XXX_Size() int {
	return m.Size()
}
func (m *StreamPartitionSpec_ExecutionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamPartitionSpec_ExecutionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StreamPartitionSpec_ExecutionConfig proto.InternalMessageInfo

type ReplicationStreamSpec struct {
	Partitions     []ReplicationStreamSpec_Partition `protobuf:"bytes,1,rep,name=partitions,proto3" json:"partitions"`
	SourceTenantID roachpb.TenantID                  `protobuf:"bytes,2,opt,name=source_tenant_id,json=sourceTenantId,proto3" json:"source_tenant_id"`
}

func (m *ReplicationStreamSpec) Reset()         { *m = ReplicationStreamSpec{} }
func (m *ReplicationStreamSpec) String() string { return proto.CompactTextString(m) }
func (*ReplicationStreamSpec) ProtoMessage()    {}
func (*ReplicationStreamSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5b61105bf62591e, []int{2}
}
func (m *ReplicationStreamSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationStreamSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicationStreamSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationStreamSpec.Merge(m, src)
}
func (m *ReplicationStreamSpec) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationStreamSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationStreamSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationStreamSpec proto.InternalMessageInfo

type ReplicationStreamSpec_Partition struct {
	// ID of the node this partition resides
	NodeID github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	// The SQL address of the node.
	SQLAddress util.UnresolvedAddr `protobuf:"bytes,2,opt,name=sql_address,json=sqlAddress,proto3" json:"sql_address"`
	// Locality of the node
	Locality roachpb.Locality `protobuf:"bytes,3,opt,name=locality,proto3" json:"locality"`
	// The spec of the processor responsible for streaming this partition
	PartitionSpec *StreamPartitionSpec `protobuf:"bytes,4,opt,name=partition_spec,json=partitionSpec,proto3" json:"partition_spec,omitempty"`
}

func (m *ReplicationStreamSpec_Partition) Reset()         { *m = ReplicationStreamSpec_Partition{} }
func (m *ReplicationStreamSpec_Partition) String() string { return proto.CompactTextString(m) }
func (*ReplicationStreamSpec_Partition) ProtoMessage()    {}
func (*ReplicationStreamSpec_Partition) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5b61105bf62591e, []int{2, 0}
}
func (m *ReplicationStreamSpec_Partition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationStreamSpec_Partition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicationStreamSpec_Partition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationStreamSpec_Partition.Merge(m, src)
}
func (m *ReplicationStreamSpec_Partition) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationStreamSpec_Partition) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationStreamSpec_Partition.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationStreamSpec_Partition proto.InternalMessageInfo

// StreamEvent describes a replication stream event
type StreamEvent struct {
	// Only 1 field ought to be set.
	Batch      *StreamEvent_Batch            `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	Checkpoint *StreamEvent_StreamCheckpoint `protobuf:"bytes,2,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
}

func (m *StreamEvent) Reset()         { *m = StreamEvent{} }
func (m *StreamEvent) String() string { return proto.CompactTextString(m) }
func (*StreamEvent) ProtoMessage()    {}
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5b61105bf62591e, []int{3}
}
func (m *StreamEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StreamEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent.Merge(m, src)
}
func (m *StreamEvent) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent proto.InternalMessageInfo

type StreamEvent_Batch struct {
	KeyValues []roachpb.KeyValue             `protobuf:"bytes,1,rep,name=key_values,json=keyValues,proto3" json:"key_values"`
	Ssts      []roachpb.RangeFeedSSTable     `protobuf:"bytes,2,rep,name=ssts,proto3" json:"ssts"`
	DelRanges []roachpb.RangeFeedDeleteRange `protobuf:"bytes,3,rep,name=del_ranges,json=delRanges,proto3" json:"del_ranges"`
}

func (m *StreamEvent_Batch) Reset()         { *m = StreamEvent_Batch{} }
func (m *StreamEvent_Batch) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_Batch) ProtoMessage()    {}
func (*StreamEvent_Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5b61105bf62591e, []int{3, 0}
}
func (m *StreamEvent_Batch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StreamEvent_Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_Batch.Merge(m, src)
}
func (m *StreamEvent_Batch) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_Batch proto.InternalMessageInfo

// Checkpoint represents stream checkpoint.
type StreamEvent_StreamCheckpoint struct {
	ResolvedSpans []jobspb.ResolvedSpan `protobuf:"bytes,2,rep,name=resolved_spans,json=resolvedSpans,proto3" json:"resolved_spans"`
}

func (m *StreamEvent_StreamCheckpoint) Reset()         { *m = StreamEvent_StreamCheckpoint{} }
func (m *StreamEvent_StreamCheckpoint) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_StreamCheckpoint) ProtoMessage()    {}
func (*StreamEvent_StreamCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5b61105bf62591e, []int{3, 1}
}
func (m *StreamEvent_StreamCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_StreamCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StreamEvent_StreamCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_StreamCheckpoint.Merge(m, src)
}
func (m *StreamEvent_StreamCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_StreamCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_StreamCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_StreamCheckpoint proto.InternalMessageInfo

type StreamReplicationStatus struct {
	StreamStatus StreamReplicationStatus_StreamStatus `protobuf:"varint,1,opt,name=stream_status,json=streamStatus,proto3,enum=cockroach.repstream.streampb.StreamReplicationStatus_StreamStatus" json:"stream_status,omitempty"`
	// Current protected timestamp for spans being replicated. It is absent
	// when the replication stream is 'STOPPED'.
	ProtectedTimestamp *hlc.Timestamp `protobuf:"bytes,2,opt,name=protected_timestamp,json=protectedTimestamp,proto3" json:"protected_timestamp,omitempty"`
}

func (m *StreamReplicationStatus) Reset()         { *m = StreamReplicationStatus{} }
func (m *StreamReplicationStatus) String() string { return proto.CompactTextString(m) }
func (*StreamReplicationStatus) ProtoMessage()    {}
func (*StreamReplicationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5b61105bf62591e, []int{4}
}
func (m *StreamReplicationStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamReplicationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StreamReplicationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamReplicationStatus.Merge(m, src)
}
func (m *StreamReplicationStatus) XXX_Size() int {
	return m.Size()
}
func (m *StreamReplicationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamReplicationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StreamReplicationStatus proto.InternalMessageInfo

type StreamIngestionStats struct {
	// The status of current stream producer job.
	ProducerStatus *StreamReplicationStatus `protobuf:"bytes,1,opt,name=producer_status,json=producerStatus,proto3" json:"producer_status,omitempty"`
	// The error when trying to reach the current stream producer job.
	ProducerError string `protobuf:"bytes,2,opt,name=producer_error,json=producerError,proto3" json:"producer_error,omitempty"`
	// Stream ingestion details.
	IngestionDetails *jobspb.StreamIngestionDetails `protobuf:"bytes,3,opt,name=ingestion_details,json=ingestionDetails,proto3" json:"ingestion_details,omitempty"`
	// Stream ingestion progress, including each partition ingestion progress.
	IngestionProgress *jobspb.StreamIngestionProgress `protobuf:"bytes,4,opt,name=ingestion_progress,json=ingestionProgress,proto3" json:"ingestion_progress,omitempty"`
	// Current replication lag information. It is absent if no ingestion progress
	// has been recorded yet.
	ReplicationLagInfo *StreamIngestionStats_ReplicationLagInfo `protobuf:"bytes,5,opt,name=replication_lag_info,json=replicationLagInfo,proto3" json:"replication_lag_info,omitempty"`
}

func (m *StreamIngestionStats) Reset()         { *m = StreamIngestionStats{} }
func (m *StreamIngestionStats) String() string { return proto.CompactTextString(m) }
func (*StreamIngestionStats) ProtoMessage()    {}
func (*StreamIngestionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5b61105bf62591e, []int{5}
}
func (m *StreamIngestionStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamIngestionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StreamIngestionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamIngestionStats.Merge(m, src)
}
func (m *StreamIngestionStats) XXX_Size() int {
	return m.Size()
}
func (m *StreamIngestionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamIngestionStats.DiscardUnknown(m)
}

var xxx_messageInfo_StreamIngestionStats proto.InternalMessageInfo

type StreamIngestionStats_ReplicationLagInfo struct {
	// The timestamp at which we have confirmed all partitions have ingested to.
	// The cutover can only happen when this timestamp is not less than the
	// above cutover timestamp, i.e., this is max timestamp we can cut over.
	MinIngestedTimestamp hlc.Timestamp `protobuf:"bytes,1,opt,name=min_ingested_timestamp,json=minIngestedTimestamp,proto3" json:"min_ingested_timestamp"`
	// The difference between destination cluster's current time and
	// the ingestion high watermark.
	ReplicationLag                time.Duration `protobuf:"bytes,2,opt,name=replication_lag,json=replicationLag,proto3,stdduration" json:"replication_lag"`
	LatestCheckpointedTimestamp   hlc.Timestamp `protobuf:"bytes,3,opt,name=latest_checkpointed_timestamp,json=latestCheckpointedTimestamp,proto3" json:"latest_checkpointed_timestamp"`
	EarliestCheckpointedTimestamp hlc.Timestamp `protobuf:"bytes,4,opt,name=earliest_checkpointed_timestamp,json=earliestCheckpointedTimestamp,proto3" json:"earliest_checkpointed_timestamp"`
	// Lag between the slowest ingested timestamp to the fastest ingested timestamp
	// among all partitions.
	SlowestFastestIngestionLag time.Duration `protobuf:"bytes,7,opt,name=slowest_fastest_ingestion_lag,json=slowestFastestIngestionLag,proto3,stdduration" json:"slowest_fastest_ingestion_lag"`
}

func (m *StreamIngestionStats_ReplicationLagInfo) Reset() {
	*m = StreamIngestionStats_ReplicationLagInfo{}
}
func (m *StreamIngestionStats_ReplicationLagInfo) String() string { return proto.CompactTextString(m) }
func (*StreamIngestionStats_ReplicationLagInfo) ProtoMessage()    {}
func (*StreamIngestionStats_ReplicationLagInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5b61105bf62591e, []int{5, 0}
}
func (m *StreamIngestionStats_ReplicationLagInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamIngestionStats_ReplicationLagInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StreamIngestionStats_ReplicationLagInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamIngestionStats_ReplicationLagInfo.Merge(m, src)
}
func (m *StreamIngestionStats_ReplicationLagInfo) XXX_Size() int {
	return m.Size()
}
func (m *StreamIngestionStats_ReplicationLagInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamIngestionStats_ReplicationLagInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StreamIngestionStats_ReplicationLagInfo proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.repstream.streampb.StreamReplicationStatus_StreamStatus", StreamReplicationStatus_StreamStatus_name, StreamReplicationStatus_StreamStatus_value)
	proto.RegisterType((*ReplicationProducerSpec)(nil), "cockroach.repstream.streampb.ReplicationProducerSpec")
	proto.RegisterType((*StreamPartitionSpec)(nil), "cockroach.repstream.streampb.StreamPartitionSpec")
	proto.RegisterType((*StreamPartitionSpec_ExecutionConfig)(nil), "cockroach.repstream.streampb.StreamPartitionSpec.ExecutionConfig")
	proto.RegisterType((*ReplicationStreamSpec)(nil), "cockroach.repstream.streampb.ReplicationStreamSpec")
	proto.RegisterType((*ReplicationStreamSpec_Partition)(nil), "cockroach.repstream.streampb.ReplicationStreamSpec.Partition")
	proto.RegisterType((*StreamEvent)(nil), "cockroach.repstream.streampb.StreamEvent")
	proto.RegisterType((*StreamEvent_Batch)(nil), "cockroach.repstream.streampb.StreamEvent.Batch")
	proto.RegisterType((*StreamEvent_StreamCheckpoint)(nil), "cockroach.repstream.streampb.StreamEvent.StreamCheckpoint")
	proto.RegisterType((*StreamReplicationStatus)(nil), "cockroach.repstream.streampb.StreamReplicationStatus")
	proto.RegisterType((*StreamIngestionStats)(nil), "cockroach.repstream.streampb.StreamIngestionStats")
	proto.RegisterType((*StreamIngestionStats_ReplicationLagInfo)(nil), "cockroach.repstream.streampb.StreamIngestionStats.ReplicationLagInfo")
}

func init() { proto.RegisterFile("repstream/streampb/stream.proto", fileDescriptor_e5b61105bf62591e) }

var fileDescriptor_e5b61105bf62591e = []byte{
	// 1369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xc1, 0x6e, 0xdb, 0x46,
	0x13, 0x36, 0x6d, 0xc9, 0x96, 0xc7, 0x91, 0x2c, 0x6f, 0xfc, 0x3b, 0xfa, 0x95, 0x5a, 0x0a, 0x54,
	0xb4, 0x0d, 0x7a, 0xa0, 0x10, 0x07, 0x01, 0x8a, 0x02, 0x01, 0x2a, 0xd9, 0x0a, 0xaa, 0xc4, 0x75,
	0x5d, 0x52, 0x4e, 0x90, 0x00, 0x09, 0xb1, 0x22, 0x57, 0xd4, 0x46, 0x14, 0x49, 0x73, 0x57, 0x4e,
	0x9d, 0x17, 0xe8, 0xb5, 0xc7, 0xbe, 0x43, 0xdf, 0xa1, 0x97, 0x02, 0x45, 0x8e, 0x41, 0x0f, 0x45,
	0x4e, 0x6e, 0x2b, 0x5f, 0xfa, 0x0a, 0xed, 0xa9, 0xe0, 0x72, 0x49, 0x51, 0x8e, 0x60, 0xc8, 0xbd,
	0x48, 0xbb, 0xdf, 0xce, 0x7c, 0xb3, 0xf3, 0x71, 0x76, 0x76, 0xa1, 0x1a, 0x10, 0x9f, 0xf1, 0x80,
	0xe0, 0x61, 0x3d, 0xfa, 0xf3, 0xbb, 0x72, 0xa0, 0xfa, 0x81, 0xc7, 0x3d, 0xf4, 0x81, 0xe9, 0x99,
	0x83, 0xc0, 0xc3, 0x66, 0x5f, 0x4d, 0x4c, 0xd5, 0xd8, 0xb4, 0xbc, 0x21, 0x56, 0xfc, 0x6e, 0x1d,
	0xfb, 0x34, 0x72, 0x28, 0xa3, 0x18, 0xb2, 0x30, 0xc7, 0x12, 0xdb, 0x7a, 0xe9, 0x75, 0x59, 0x3d,
	0xfc, 0xf1, 0xbb, 0xe2, 0x2f, 0xc6, 0x63, 0xdb, 0x21, 0xe1, 0x38, 0x65, 0x5f, 0x1a, 0x71, 0xea,
	0xd4, 0xfb, 0x8e, 0x59, 0xe7, 0x74, 0x48, 0x18, 0xc7, 0x43, 0x5f, 0xae, 0x94, 0xc5, 0xca, 0xc8,
	0x0d, 0x08, 0xf3, 0x9c, 0x13, 0x62, 0x19, 0xd8, 0xb2, 0x02, 0xb9, 0xb6, 0x69, 0x7b, 0xb6, 0x27,
	0x86, 0xf5, 0x70, 0x24, 0xd1, 0x8a, 0xed, 0x79, 0xb6, 0x43, 0xea, 0x62, 0xd6, 0x1d, 0xf5, 0xea,
	0xd6, 0x28, 0xc0, 0x9c, 0x7a, 0x6e, 0xb4, 0x5e, 0xfb, 0x51, 0x81, 0x1b, 0x1a, 0xf1, 0x1d, 0x6a,
	0x0a, 0xf4, 0x30, 0xf0, 0xac, 0x91, 0x49, 0x02, 0xdd, 0x27, 0x26, 0xba, 0x07, 0xab, 0x51, 0xaa,
	0x06, 0xb5, 0x4a, 0xca, 0x2d, 0xe5, 0xf6, 0x52, 0xb3, 0x34, 0x3e, 0xab, 0xe6, 0x74, 0x01, 0xb6,
	0xf7, 0xfe, 0x49, 0x8d, 0xb5, 0x5c, 0x64, 0xda, 0xb6, 0xd0, 0x53, 0xd8, 0x0a, 0x26, 0x8c, 0x06,
	0xe3, 0x38, 0xe0, 0x46, 0x98, 0x49, 0x69, 0xf1, 0x96, 0x72, 0x7b, 0x6d, 0x67, 0x5b, 0x9d, 0x88,
	0x1a, 0xe6, 0xa3, 0xf6, 0x1d, 0x53, 0xed, 0xc4, 0x99, 0x36, 0x33, 0x6f, 0xce, 0xaa, 0x0b, 0xda,
	0x66, 0x8a, 0x42, 0x0f, 0x19, 0x42, 0x83, 0xda, 0xcf, 0x19, 0xb8, 0x1e, 0x45, 0x3c, 0xc4, 0x01,
	0xa7, 0x62, 0x31, 0xdc, 0x69, 0x0f, 0xb6, 0xfd, 0x80, 0x9c, 0x50, 0x6f, 0xc4, 0x8c, 0x3e, 0xb5,
	0xfb, 0xc6, 0x2b, 0xcc, 0x49, 0x60, 0x24, 0xf2, 0x89, 0xdd, 0xcf, 0x19, 0xb9, 0x1c, 0x33, 0x7d,
	0x49, 0xed, 0xfe, 0x93, 0x90, 0x27, 0xb1, 0x08, 0x53, 0xa3, 0x2e, 0xe5, 0x14, 0x3b, 0x06, 0x33,
	0xb1, 0x9b, 0x0a, 0x90, 0xb9, 0x42, 0x6a, 0x92, 0x42, 0x37, 0xb1, 0x3b, 0xa1, 0xbe, 0x0b, 0x59,
	0xe6, 0x63, 0x97, 0x95, 0x16, 0x6f, 0x2d, 0xdd, 0x5e, 0xdb, 0xb9, 0x91, 0x62, 0x92, 0x65, 0xa2,
	0xea, 0x3e, 0x76, 0x25, 0x47, 0x64, 0x8b, 0x0c, 0x58, 0x36, 0x3d, 0xb7, 0x47, 0xed, 0xd2, 0x92,
	0x88, 0xdf, 0x50, 0x2f, 0xab, 0x57, 0x75, 0x86, 0x74, 0x6a, 0xeb, 0x5b, 0x62, 0x8e, 0xc2, 0xd9,
	0xae, 0x20, 0x92, 0xfc, 0x92, 0xb6, 0xfc, 0xab, 0x02, 0xeb, 0x17, 0x2c, 0xd0, 0x67, 0x50, 0x9a,
	0x12, 0xc1, 0xc7, 0x01, 0x76, 0x1c, 0xe2, 0x50, 0x36, 0x14, 0x3a, 0x67, 0xb5, 0xad, 0x54, 0x86,
	0x87, 0x93, 0x55, 0xf4, 0x1c, 0x4a, 0x43, 0xea, 0x1a, 0x66, 0x9f, 0x98, 0x03, 0xdf, 0xa3, 0x2e,
	0x37, 0x7a, 0x01, 0x39, 0x1e, 0x11, 0xd7, 0x3c, 0x95, 0xb5, 0xf1, 0x7f, 0x35, 0xaa, 0x57, 0x35,
	0xae, 0x57, 0x75, 0x4f, 0xd6, 0x6b, 0x33, 0x17, 0x6e, 0xec, 0x87, 0xdf, 0xab, 0x8a, 0xb6, 0x35,
	0xa4, 0xee, 0x6e, 0xc2, 0xf1, 0x20, 0xa6, 0x40, 0x1f, 0xc3, 0x7a, 0x17, 0x73, 0xb3, 0x6f, 0x74,
	0x4f, 0x39, 0x31, 0x18, 0x7d, 0x4d, 0x84, 0x2c, 0x4b, 0x5a, 0x5e, 0xc0, 0xcd, 0x53, 0x4e, 0x74,
	0xfa, 0x9a, 0xd4, 0x7e, 0xc9, 0xc0, 0xff, 0xb4, 0x74, 0x79, 0x85, 0xaa, 0x88, 0x3a, 0x32, 0x01,
	0xfc, 0x58, 0x1d, 0x56, 0x52, 0xc4, 0x97, 0xb8, 0x7f, 0xb9, 0xa6, 0x33, 0x89, 0xd4, 0x44, 0x63,
	0xa9, 0x67, 0x8a, 0x16, 0x3d, 0x87, 0x22, 0xf3, 0x46, 0x81, 0x49, 0x0c, 0x4e, 0x5c, 0xec, 0xf2,
	0xf0, 0x74, 0x45, 0xd9, 0xdf, 0x9c, 0xf1, 0xd1, 0x3b, 0xc2, 0xa6, 0xbd, 0xd7, 0xdc, 0x0a, 0x89,
	0xc6, 0x67, 0xd5, 0x82, 0x2e, 0x9c, 0x63, 0x5c, 0x2b, 0xb0, 0xf4, 0xdc, 0x2a, 0xff, 0xb5, 0x08,
	0xab, 0x49, 0x78, 0xf4, 0x0c, 0x56, 0x5c, 0xcf, 0x22, 0xf1, 0x09, 0xce, 0x36, 0x1b, 0xe3, 0xb3,
	0xea, 0xf2, 0x81, 0x67, 0x11, 0x71, 0x7e, 0xef, 0xda, 0x94, 0xf7, 0x47, 0x5d, 0xd5, 0xf4, 0x86,
	0xf5, 0x24, 0xb6, 0xd5, 0x9d, 0x8c, 0xeb, 0xfe, 0xc0, 0xae, 0xc7, 0x7b, 0x89, 0xdc, 0xb4, 0xe5,
	0x90, 0xb1, 0x6d, 0x21, 0x1d, 0xd6, 0xd8, 0xb1, 0x23, 0x7a, 0x10, 0x61, 0x4c, 0xe6, 0x50, 0xb9,
	0x78, 0x04, 0x8e, 0x92, 0x6e, 0xd5, 0xb0, 0xac, 0xa0, 0x89, 0x64, 0x1a, 0xa0, 0x7f, 0xb3, 0xdf,
	0x88, 0x3c, 0x35, 0x60, 0xc7, 0x8e, 0x1c, 0xa3, 0xfb, 0x90, 0x73, 0x3c, 0x13, 0x3b, 0x94, 0x9f,
	0xca, 0xa2, 0x9e, 0xa5, 0xca, 0xbe, 0x34, 0x91, 0xf2, 0x26, 0x2e, 0x68, 0x00, 0x85, 0x44, 0x6a,
	0x83, 0xf9, 0xc4, 0x94, 0x27, 0xf3, 0xce, 0x95, 0x4f, 0x46, 0x73, 0x63, 0x7c, 0x56, 0xcd, 0x4f,
	0x41, 0x5a, 0xde, 0x4f, 0x4f, 0x6b, 0x7f, 0x2f, 0xc1, 0x5a, 0xe4, 0xd9, 0x3a, 0x21, 0x2e, 0x47,
	0x2d, 0xc8, 0x8a, 0x4a, 0x93, 0xed, 0xa6, 0x3e, 0x4f, 0x4c, 0xe1, 0xa9, 0x36, 0x43, 0x37, 0x2d,
	0xf2, 0x46, 0xcf, 0x00, 0x26, 0x47, 0x44, 0xca, 0xfa, 0xf9, 0xfc, 0x5c, 0xd1, 0x78, 0x72, 0x40,
	0xb4, 0x14, 0x5b, 0xf9, 0x37, 0x05, 0xb2, 0x22, 0x18, 0xfa, 0x02, 0x60, 0x40, 0x4e, 0x8d, 0x13,
	0xec, 0x8c, 0x48, 0x5c, 0xeb, 0xb3, 0xa4, 0x7e, 0x44, 0x4e, 0x1f, 0x87, 0x36, 0x52, 0xea, 0xd5,
	0x81, 0x9c, 0x87, 0x9f, 0x2a, 0xc3, 0x18, 0x8f, 0x3b, 0xd6, 0x87, 0x33, 0x7c, 0x35, 0xec, 0xda,
	0xe4, 0x01, 0x21, 0x96, 0xae, 0x77, 0x70, 0xd7, 0x89, 0x39, 0x84, 0x1b, 0xda, 0x07, 0xb0, 0x88,
	0x63, 0x04, 0xa1, 0x0d, 0x2b, 0x2d, 0x09, 0x92, 0x4f, 0x2e, 0x23, 0xd9, 0x23, 0x0e, 0xe1, 0x44,
	0x4c, 0xe3, 0xcd, 0x58, 0xc4, 0x11, 0x73, 0x56, 0x76, 0xa1, 0x78, 0x31, 0x71, 0xd4, 0x81, 0x42,
	0x72, 0x53, 0xa6, 0x9b, 0x6b, 0x3a, 0x0a, 0x3b, 0x76, 0x54, 0x71, 0x27, 0x47, 0xf7, 0xb3, 0xaa,
	0x49, 0x87, 0x54, 0xb3, 0xcd, 0x07, 0x29, 0x8c, 0x3d, 0xcc, 0xe4, 0x94, 0xe2, 0x62, 0xed, 0xa7,
	0x45, 0xb8, 0x11, 0x05, 0x9c, 0xea, 0x00, 0x98, 0x8f, 0x18, 0xb2, 0x21, 0x2f, 0x2f, 0x4e, 0x26,
	0x00, 0x51, 0x0f, 0x85, 0x9d, 0xe6, 0x3c, 0xdf, 0xf0, 0x3d, 0x36, 0x89, 0x47, 0x13, 0xed, 0x1a,
	0x4b, 0xcd, 0xd0, 0x01, 0x5c, 0x0f, 0x1b, 0x25, 0x31, 0x39, 0xb1, 0x52, 0x97, 0xd1, 0x3c, 0xf7,
	0xac, 0x86, 0x12, 0xcf, 0x04, 0xab, 0xbd, 0x84, 0x6b, 0xe9, 0x68, 0x68, 0x03, 0xf2, 0x7a, 0x47,
	0x6b, 0x35, 0xbe, 0x32, 0x1a, 0xbb, 0x9d, 0xf6, 0xe3, 0x56, 0x71, 0x01, 0x5d, 0x87, 0x75, 0x09,
	0xb5, 0x0f, 0x24, 0xa8, 0xa4, 0xec, 0x0e, 0x1b, 0x47, 0x7a, 0x6b, 0xaf, 0xb8, 0x88, 0xaa, 0x70,
	0xf3, 0xe8, 0xe0, 0xd1, 0xc1, 0xd7, 0x4f, 0x0e, 0x0c, 0xb9, 0xa4, 0x77, 0x1a, 0x9d, 0x23, 0xdd,
	0xd0, 0x5a, 0x1d, 0xed, 0x69, 0x31, 0x53, 0x3b, 0x5f, 0x81, 0x4d, 0xf9, 0x7a, 0x08, 0x3f, 0x60,
	0x9c, 0x30, 0x43, 0x2f, 0x60, 0xdd, 0x97, 0xcf, 0x90, 0xb4, 0x7e, 0x6b, 0x3b, 0xf7, 0xfe, 0x93,
	0x7e, 0x5a, 0x21, 0x66, 0x93, 0x49, 0x7d, 0x04, 0x09, 0x62, 0x90, 0x20, 0xf0, 0x02, 0xa1, 0xd7,
	0xaa, 0x96, 0x8f, 0xd1, 0x56, 0x08, 0xa2, 0x17, 0xb0, 0x41, 0xe3, 0x8d, 0x19, 0x16, 0xe1, 0x98,
	0x3a, 0x4c, 0x76, 0xa4, 0x3b, 0x97, 0xd4, 0xcf, 0x85, 0x94, 0xf6, 0x22, 0x47, 0xad, 0x48, 0x2f,
	0x20, 0x08, 0x03, 0x9a, 0xf0, 0xfb, 0x81, 0x67, 0x8b, 0x26, 0x1a, 0x75, 0xab, 0x9d, 0xf9, 0x03,
	0x1c, 0x4a, 0x4f, 0x6d, 0xb2, 0xdb, 0x18, 0x42, 0xaf, 0x20, 0xfd, 0x8c, 0x32, 0x1c, 0x6c, 0x1b,
	0xd4, 0xed, 0x79, 0xa5, 0xac, 0x08, 0xd2, 0x9a, 0x47, 0xce, 0xe9, 0x6f, 0x93, 0xbe, 0xed, 0xf6,
	0xb1, 0xdd, 0x76, 0x7b, 0x9e, 0x86, 0x82, 0xf7, 0xb0, 0xf2, 0x77, 0x19, 0x40, 0xef, 0x9b, 0x86,
	0xcf, 0xa7, 0xf0, 0xfe, 0x8f, 0x36, 0x3a, 0x55, 0xb1, 0x57, 0x78, 0x9f, 0x6d, 0x0e, 0xa9, 0xdb,
	0x96, 0x0c, 0x93, 0xe7, 0xd3, 0x3e, 0xac, 0x5f, 0x48, 0xf5, 0x2a, 0x2f, 0x8a, 0xc2, 0x74, 0x0e,
	0xc8, 0x86, 0x6d, 0x07, 0x73, 0xc2, 0x78, 0xea, 0xad, 0x32, 0xb5, 0xdf, 0xa5, 0xf9, 0xf7, 0x7b,
	0x33, 0x62, 0xda, 0x4d, 0x11, 0x4d, 0xb6, 0x3d, 0x80, 0x2a, 0xc1, 0x81, 0x43, 0x2f, 0x09, 0x75,
	0x85, 0x97, 0xe5, 0x76, 0xcc, 0x35, 0x3b, 0x58, 0x0f, 0xb6, 0x99, 0xe3, 0xbd, 0x0a, 0x63, 0xf5,
	0x30, 0x13, 0xe9, 0x4d, 0x2a, 0x30, 0x54, 0x6c, 0x65, 0x7e, 0xc5, 0xca, 0x92, 0xe9, 0x41, 0x44,
	0x94, 0x94, 0xc9, 0x3e, 0xb6, 0x1f, 0x66, 0x72, 0xd9, 0xe2, 0xf2, 0xc3, 0x4c, 0x6e, 0xb9, 0xb8,
	0xd2, 0xfc, 0xf4, 0xcd, 0x9f, 0x95, 0x85, 0x37, 0xe3, 0x8a, 0xf2, 0x76, 0x5c, 0x51, 0xde, 0x8d,
	0x2b, 0xca, 0x1f, 0xe3, 0x8a, 0xf2, 0xfd, 0x79, 0x65, 0xe1, 0xed, 0x79, 0x65, 0xe1, 0xdd, 0x79,
	0x65, 0xe1, 0x59, 0x2e, 0xae, 0xb8, 0xee, 0xb2, 0x08, 0x78, 0xf7, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xad, 0xee, 0xde, 0xe8, 0x96, 0x0d, 0x00, 0x00,
}

func (m *ReplicationProducerSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationProducerSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationProducerSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ReplicationStartTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.StreamID != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.StreamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamPartitionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamPartitionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamPartitionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InitialScanTimestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Spans) > 0 {
		for iNdEx := len(m.Spans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Spans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.PreviousHighWaterTimestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StreamPartitionSpec_ExecutionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamPartitionSpec_ExecutionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamPartitionSpec_ExecutionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchByteSize != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.BatchByteSize))
		i--
		dAtA[i] = 0x18
	}
	n5, err5 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MinCheckpointFrequency, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MinCheckpointFrequency):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintStream(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	if m.InitialScanParallelism != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.InitialScanParallelism))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationStreamSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationStreamSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationStreamSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SourceTenantID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Partitions) > 0 {
		for iNdEx := len(m.Partitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Partitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationStreamSpec_Partition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationStreamSpec_Partition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationStreamSpec_Partition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartitionSpec != nil {
		{
			size, err := m.PartitionSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Locality.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.SQLAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.NodeID != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Checkpoint != nil {
		{
			size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Batch != nil {
		{
			size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_Batch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_Batch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_Batch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelRanges) > 0 {
		for iNdEx := len(m.DelRanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelRanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Ssts) > 0 {
		for iNdEx := len(m.Ssts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ssts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.KeyValues) > 0 {
		for iNdEx := len(m.KeyValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_StreamCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_StreamCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_StreamCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResolvedSpans) > 0 {
		for iNdEx := len(m.ResolvedSpans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResolvedSpans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamReplicationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamReplicationStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamReplicationStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProtectedTimestamp != nil {
		{
			size, err := m.ProtectedTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StreamStatus != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.StreamStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamIngestionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamIngestionStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamIngestionStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReplicationLagInfo != nil {
		{
			size, err := m.ReplicationLagInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IngestionProgress != nil {
		{
			size, err := m.IngestionProgress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IngestionDetails != nil {
		{
			size, err := m.IngestionDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProducerError) > 0 {
		i -= len(m.ProducerError)
		copy(dAtA[i:], m.ProducerError)
		i = encodeVarintStream(dAtA, i, uint64(len(m.ProducerError)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProducerStatus != nil {
		{
			size, err := m.ProducerStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamIngestionStats_ReplicationLagInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamIngestionStats_ReplicationLagInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamIngestionStats_ReplicationLagInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n17, err17 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.SlowestFastestIngestionLag, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.SlowestFastestIngestionLag):])
	if err17 != nil {
		return 0, err17
	}
	i -= n17
	i = encodeVarintStream(dAtA, i, uint64(n17))
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.EarliestCheckpointedTimestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.LatestCheckpointedTimestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n20, err20 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.ReplicationLag, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.ReplicationLag):])
	if err20 != nil {
		return 0, err20
	}
	i -= n20
	i = encodeVarintStream(dAtA, i, uint64(n20))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.MinIngestedTimestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintStream(dAtA []byte, offset int, v uint64) int {
	offset -= sovStream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReplicationProducerSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamID != 0 {
		n += 1 + sovStream(uint64(m.StreamID))
	}
	l = m.ReplicationStartTime.Size()
	n += 1 + l + sovStream(uint64(l))
	return n
}

func (m *StreamPartitionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PreviousHighWaterTimestamp.Size()
	n += 1 + l + sovStream(uint64(l))
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	l = m.Config.Size()
	n += 1 + l + sovStream(uint64(l))
	l = m.InitialScanTimestamp.Size()
	n += 1 + l + sovStream(uint64(l))
	return n
}

func (m *StreamPartitionSpec_ExecutionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InitialScanParallelism != 0 {
		n += 1 + sovStream(uint64(m.InitialScanParallelism))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MinCheckpointFrequency)
	n += 1 + l + sovStream(uint64(l))
	if m.BatchByteSize != 0 {
		n += 1 + sovStream(uint64(m.BatchByteSize))
	}
	return n
}

func (m *ReplicationStreamSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Partitions) > 0 {
		for _, e := range m.Partitions {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	l = m.SourceTenantID.Size()
	n += 1 + l + sovStream(uint64(l))
	return n
}

func (m *ReplicationStreamSpec_Partition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovStream(uint64(m.NodeID))
	}
	l = m.SQLAddress.Size()
	n += 1 + l + sovStream(uint64(l))
	l = m.Locality.Size()
	n += 1 + l + sovStream(uint64(l))
	if m.PartitionSpec != nil {
		l = m.PartitionSpec.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *StreamEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Batch != nil {
		l = m.Batch.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Checkpoint != nil {
		l = m.Checkpoint.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *StreamEvent_Batch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyValues) > 0 {
		for _, e := range m.KeyValues {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if len(m.Ssts) > 0 {
		for _, e := range m.Ssts {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if len(m.DelRanges) > 0 {
		for _, e := range m.DelRanges {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	return n
}

func (m *StreamEvent_StreamCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResolvedSpans) > 0 {
		for _, e := range m.ResolvedSpans {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	return n
}

func (m *StreamReplicationStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamStatus != 0 {
		n += 1 + sovStream(uint64(m.StreamStatus))
	}
	if m.ProtectedTimestamp != nil {
		l = m.ProtectedTimestamp.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *StreamIngestionStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProducerStatus != nil {
		l = m.ProducerStatus.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.ProducerError)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.IngestionDetails != nil {
		l = m.IngestionDetails.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.IngestionProgress != nil {
		l = m.IngestionProgress.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.ReplicationLagInfo != nil {
		l = m.ReplicationLagInfo.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *StreamIngestionStats_ReplicationLagInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinIngestedTimestamp.Size()
	n += 1 + l + sovStream(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.ReplicationLag)
	n += 1 + l + sovStream(uint64(l))
	l = m.LatestCheckpointedTimestamp.Size()
	n += 1 + l + sovStream(uint64(l))
	l = m.EarliestCheckpointedTimestamp.Size()
	n += 1 + l + sovStream(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.SlowestFastestIngestionLag)
	n += 1 + l + sovStream(uint64(l))
	return n
}

func sovStream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStream(x uint64) (n int) {
	return sovStream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReplicationProducerSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationProducerSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationProducerSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamID", wireType)
			}
			m.StreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamID |= StreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReplicationStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamPartitionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamPartitionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamPartitionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousHighWaterTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreviousHighWaterTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, roachpb.Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialScanTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialScanTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamPartitionSpec_ExecutionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialScanParallelism", wireType)
			}
			m.InitialScanParallelism = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialScanParallelism |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCheckpointFrequency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MinCheckpointFrequency, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchByteSize", wireType)
			}
			m.BatchByteSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchByteSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationStreamSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationStreamSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationStreamSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partitions = append(m.Partitions, ReplicationStreamSpec_Partition{})
			if err := m.Partitions[len(m.Partitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTenantID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SourceTenantID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationStreamSpec_Partition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Partition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Partition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQLAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SQLAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locality.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PartitionSpec == nil {
				m.PartitionSpec = &StreamPartitionSpec{}
			}
			if err := m.PartitionSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Batch == nil {
				m.Batch = &StreamEvent_Batch{}
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkpoint == nil {
				m.Checkpoint = &StreamEvent_StreamCheckpoint{}
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_Batch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Batch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Batch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValues = append(m.KeyValues, roachpb.KeyValue{})
			if err := m.KeyValues[len(m.KeyValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ssts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ssts = append(m.Ssts, roachpb.RangeFeedSSTable{})
			if err := m.Ssts[len(m.Ssts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelRanges = append(m.DelRanges, roachpb.RangeFeedDeleteRange{})
			if err := m.DelRanges[len(m.DelRanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_StreamCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedSpans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolvedSpans = append(m.ResolvedSpans, jobspb.ResolvedSpan{})
			if err := m.ResolvedSpans[len(m.ResolvedSpans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamReplicationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamReplicationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamReplicationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamStatus", wireType)
			}
			m.StreamStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamStatus |= StreamReplicationStatus_StreamStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtectedTimestamp == nil {
				m.ProtectedTimestamp = &hlc.Timestamp{}
			}
			if err := m.ProtectedTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamIngestionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamIngestionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamIngestionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProducerStatus == nil {
				m.ProducerStatus = &StreamReplicationStatus{}
			}
			if err := m.ProducerStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProducerError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngestionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IngestionDetails == nil {
				m.IngestionDetails = &jobspb.StreamIngestionDetails{}
			}
			if err := m.IngestionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngestionProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IngestionProgress == nil {
				m.IngestionProgress = &jobspb.StreamIngestionProgress{}
			}
			if err := m.IngestionProgress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationLagInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationLagInfo == nil {
				m.ReplicationLagInfo = &StreamIngestionStats_ReplicationLagInfo{}
			}
			if err := m.ReplicationLagInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamIngestionStats_ReplicationLagInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationLagInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationLagInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinIngestedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinIngestedTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationLag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.ReplicationLag, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestCheckpointedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestCheckpointedTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarliestCheckpointedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EarliestCheckpointedTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowestFastestIngestionLag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.SlowestFastestIngestionLag, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStream = fmt.Errorf("proto: unexpected end of group")
)
