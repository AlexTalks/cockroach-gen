// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: roachpb/io-formats.proto

package roachpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IOFileFormat_FileFormat int32

const (
	IOFileFormat_Unknown      IOFileFormat_FileFormat = 0
	IOFileFormat_CSV          IOFileFormat_FileFormat = 1
	IOFileFormat_MysqlOutfile IOFileFormat_FileFormat = 2
	IOFileFormat_Mysqldump    IOFileFormat_FileFormat = 3
	IOFileFormat_PgCopy       IOFileFormat_FileFormat = 4
)

var IOFileFormat_FileFormat_name = map[int32]string{
	0: "Unknown",
	1: "CSV",
	2: "MysqlOutfile",
	3: "Mysqldump",
	4: "PgCopy",
}
var IOFileFormat_FileFormat_value = map[string]int32{
	"Unknown":      0,
	"CSV":          1,
	"MysqlOutfile": 2,
	"Mysqldump":    3,
	"PgCopy":       4,
}

func (x IOFileFormat_FileFormat) Enum() *IOFileFormat_FileFormat {
	p := new(IOFileFormat_FileFormat)
	*p = x
	return p
}
func (x IOFileFormat_FileFormat) String() string {
	return proto.EnumName(IOFileFormat_FileFormat_name, int32(x))
}
func (x *IOFileFormat_FileFormat) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IOFileFormat_FileFormat_value, data, "IOFileFormat_FileFormat")
	if err != nil {
		return err
	}
	*x = IOFileFormat_FileFormat(value)
	return nil
}
func (IOFileFormat_FileFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorIoFormats, []int{0, 0}
}

type IOFileFormat_Compression int32

const (
	IOFileFormat_Auto IOFileFormat_Compression = 0
	IOFileFormat_None IOFileFormat_Compression = 1
	IOFileFormat_Gzip IOFileFormat_Compression = 2
	IOFileFormat_Bzip IOFileFormat_Compression = 3
)

var IOFileFormat_Compression_name = map[int32]string{
	0: "Auto",
	1: "None",
	2: "Gzip",
	3: "Bzip",
}
var IOFileFormat_Compression_value = map[string]int32{
	"Auto": 0,
	"None": 1,
	"Gzip": 2,
	"Bzip": 3,
}

func (x IOFileFormat_Compression) Enum() *IOFileFormat_Compression {
	p := new(IOFileFormat_Compression)
	*p = x
	return p
}
func (x IOFileFormat_Compression) String() string {
	return proto.EnumName(IOFileFormat_Compression_name, int32(x))
}
func (x *IOFileFormat_Compression) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IOFileFormat_Compression_value, data, "IOFileFormat_Compression")
	if err != nil {
		return err
	}
	*x = IOFileFormat_Compression(value)
	return nil
}
func (IOFileFormat_Compression) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorIoFormats, []int{0, 1}
}

type MySQLOutfileOptions_Enclose int32

const (
	MySQLOutfileOptions_Never    MySQLOutfileOptions_Enclose = 0
	MySQLOutfileOptions_Always   MySQLOutfileOptions_Enclose = 1
	MySQLOutfileOptions_Optional MySQLOutfileOptions_Enclose = 2
)

var MySQLOutfileOptions_Enclose_name = map[int32]string{
	0: "Never",
	1: "Always",
	2: "Optional",
}
var MySQLOutfileOptions_Enclose_value = map[string]int32{
	"Never":    0,
	"Always":   1,
	"Optional": 2,
}

func (x MySQLOutfileOptions_Enclose) Enum() *MySQLOutfileOptions_Enclose {
	p := new(MySQLOutfileOptions_Enclose)
	*p = x
	return p
}
func (x MySQLOutfileOptions_Enclose) String() string {
	return proto.EnumName(MySQLOutfileOptions_Enclose_name, int32(x))
}
func (x *MySQLOutfileOptions_Enclose) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MySQLOutfileOptions_Enclose_value, data, "MySQLOutfileOptions_Enclose")
	if err != nil {
		return err
	}
	*x = MySQLOutfileOptions_Enclose(value)
	return nil
}
func (MySQLOutfileOptions_Enclose) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorIoFormats, []int{2, 0}
}

type IOFileFormat struct {
	Format      IOFileFormat_FileFormat  `protobuf:"varint,1,opt,name=format,enum=cockroach.roachpb.IOFileFormat_FileFormat" json:"format"`
	Csv         CSVOptions               `protobuf:"bytes,2,opt,name=csv" json:"csv"`
	MysqlOut    MySQLOutfileOptions      `protobuf:"bytes,3,opt,name=mysql_out,json=mysqlOut" json:"mysql_out"`
	PgCopy      PgCopyOptions            `protobuf:"bytes,4,opt,name=pg_copy,json=pgCopy" json:"pg_copy"`
	Compression IOFileFormat_Compression `protobuf:"varint,5,opt,name=compression,enum=cockroach.roachpb.IOFileFormat_Compression" json:"compression"`
}

func (m *IOFileFormat) Reset()                    { *m = IOFileFormat{} }
func (m *IOFileFormat) String() string            { return proto.CompactTextString(m) }
func (*IOFileFormat) ProtoMessage()               {}
func (*IOFileFormat) Descriptor() ([]byte, []int) { return fileDescriptorIoFormats, []int{0} }

// CSVOptions describe the format of csv data (delimiter, comment, etc).
type CSVOptions struct {
	// comma is an delimiter used by the CSV file; defaults to a comma.
	Comma int32 `protobuf:"varint,1,opt,name=comma" json:"comma"`
	// comment is an comment rune; zero value means comments not enabled.
	Comment int32 `protobuf:"varint,2,opt,name=comment" json:"comment"`
	// null_encoding, if not nil, is the string which identifies a NULL. Can be the empty string.
	NullEncoding *string `protobuf:"bytes,3,opt,name=null_encoding,json=nullEncoding" json:"null_encoding,omitempty"`
	// skip the first N lines of the input (e.g. to ignore column headers) when reading.
	Skip uint32 `protobuf:"varint,4,opt,name=skip" json:"skip"`
}

func (m *CSVOptions) Reset()                    { *m = CSVOptions{} }
func (m *CSVOptions) String() string            { return proto.CompactTextString(m) }
func (*CSVOptions) ProtoMessage()               {}
func (*CSVOptions) Descriptor() ([]byte, []int) { return fileDescriptorIoFormats, []int{1} }

// MySQLOutfileOptions describe the format of mysql's outfile.
type MySQLOutfileOptions struct {
	// row_separator is the delimiter between rows (mysql's --rows-terminated-by)
	RowSeparator int32 `protobuf:"varint,1,opt,name=row_separator,json=rowSeparator" json:"row_separator"`
	// field_separator is the delimiter between fields (mysql's --fields-terminated-by)
	FieldSeparator int32 `protobuf:"varint,2,opt,name=field_separator,json=fieldSeparator" json:"field_separator"`
	// enclose is the enclosing (quoting) behavior (i.e. if specified and if optional).
	Enclose MySQLOutfileOptions_Enclose `protobuf:"varint,3,opt,name=enclose,enum=cockroach.roachpb.MySQLOutfileOptions_Enclose" json:"enclose"`
	// encloser is the character used to enclose (qupte) fields (--fields-enclosed-by)
	Encloser int32 `protobuf:"varint,4,opt,name=encloser" json:"encloser"`
	// has_escape indicates that an escape character is set (mysql's default is not).
	HasEscape bool `protobuf:"varint,5,opt,name=has_escape,json=hasEscape" json:"has_escape"`
	// escape is the character used to prefix the other delimiters (--fields-escaped-by)
	Escape int32 `protobuf:"varint,6,opt,name=escape" json:"escape"`
}

func (m *MySQLOutfileOptions) Reset()                    { *m = MySQLOutfileOptions{} }
func (m *MySQLOutfileOptions) String() string            { return proto.CompactTextString(m) }
func (*MySQLOutfileOptions) ProtoMessage()               {}
func (*MySQLOutfileOptions) Descriptor() ([]byte, []int) { return fileDescriptorIoFormats, []int{2} }

// PgCopyOptions describe the format of postgresql's COPY TO STDOUT.
type PgCopyOptions struct {
	// delimiter is the delimitor between columns (DELIMITER)
	Delimiter int32 `protobuf:"varint,1,opt,name=delimiter" json:"delimiter"`
	// null is the NULL value (NULL)
	Null string `protobuf:"bytes,2,opt,name=null" json:"null"`
}

func (m *PgCopyOptions) Reset()                    { *m = PgCopyOptions{} }
func (m *PgCopyOptions) String() string            { return proto.CompactTextString(m) }
func (*PgCopyOptions) ProtoMessage()               {}
func (*PgCopyOptions) Descriptor() ([]byte, []int) { return fileDescriptorIoFormats, []int{3} }

func init() {
	proto.RegisterType((*IOFileFormat)(nil), "cockroach.roachpb.IOFileFormat")
	proto.RegisterType((*CSVOptions)(nil), "cockroach.roachpb.CSVOptions")
	proto.RegisterType((*MySQLOutfileOptions)(nil), "cockroach.roachpb.MySQLOutfileOptions")
	proto.RegisterType((*PgCopyOptions)(nil), "cockroach.roachpb.PgCopyOptions")
	proto.RegisterEnum("cockroach.roachpb.IOFileFormat_FileFormat", IOFileFormat_FileFormat_name, IOFileFormat_FileFormat_value)
	proto.RegisterEnum("cockroach.roachpb.IOFileFormat_Compression", IOFileFormat_Compression_name, IOFileFormat_Compression_value)
	proto.RegisterEnum("cockroach.roachpb.MySQLOutfileOptions_Enclose", MySQLOutfileOptions_Enclose_name, MySQLOutfileOptions_Enclose_value)
}
func (m *IOFileFormat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IOFileFormat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Format))
	dAtA[i] = 0x12
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Csv.Size()))
	n1, err := m.Csv.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.MysqlOut.Size()))
	n2, err := m.MysqlOut.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x22
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.PgCopy.Size()))
	n3, err := m.PgCopy.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x28
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Compression))
	return i, nil
}

func (m *CSVOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSVOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Comma))
	dAtA[i] = 0x10
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Comment))
	if m.NullEncoding != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIoFormats(dAtA, i, uint64(len(*m.NullEncoding)))
		i += copy(dAtA[i:], *m.NullEncoding)
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Skip))
	return i, nil
}

func (m *MySQLOutfileOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLOutfileOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.RowSeparator))
	dAtA[i] = 0x10
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.FieldSeparator))
	dAtA[i] = 0x18
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Enclose))
	dAtA[i] = 0x20
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Encloser))
	dAtA[i] = 0x28
	i++
	if m.HasEscape {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x30
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Escape))
	return i, nil
}

func (m *PgCopyOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PgCopyOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Delimiter))
	dAtA[i] = 0x12
	i++
	i = encodeVarintIoFormats(dAtA, i, uint64(len(m.Null)))
	i += copy(dAtA[i:], m.Null)
	return i, nil
}

func encodeVarintIoFormats(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IOFileFormat) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovIoFormats(uint64(m.Format))
	l = m.Csv.Size()
	n += 1 + l + sovIoFormats(uint64(l))
	l = m.MysqlOut.Size()
	n += 1 + l + sovIoFormats(uint64(l))
	l = m.PgCopy.Size()
	n += 1 + l + sovIoFormats(uint64(l))
	n += 1 + sovIoFormats(uint64(m.Compression))
	return n
}

func (m *CSVOptions) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovIoFormats(uint64(m.Comma))
	n += 1 + sovIoFormats(uint64(m.Comment))
	if m.NullEncoding != nil {
		l = len(*m.NullEncoding)
		n += 1 + l + sovIoFormats(uint64(l))
	}
	n += 1 + sovIoFormats(uint64(m.Skip))
	return n
}

func (m *MySQLOutfileOptions) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovIoFormats(uint64(m.RowSeparator))
	n += 1 + sovIoFormats(uint64(m.FieldSeparator))
	n += 1 + sovIoFormats(uint64(m.Enclose))
	n += 1 + sovIoFormats(uint64(m.Encloser))
	n += 2
	n += 1 + sovIoFormats(uint64(m.Escape))
	return n
}

func (m *PgCopyOptions) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovIoFormats(uint64(m.Delimiter))
	l = len(m.Null)
	n += 1 + l + sovIoFormats(uint64(l))
	return n
}

func sovIoFormats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIoFormats(x uint64) (n int) {
	return sovIoFormats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IOFileFormat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoFormats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IOFileFormat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IOFileFormat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			m.Format = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Format |= (IOFileFormat_FileFormat(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Csv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Csv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MysqlOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MysqlOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PgCopy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PgCopy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			m.Compression = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compression |= (IOFileFormat_Compression(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIoFormats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIoFormats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSVOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoFormats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSVOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSVOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comma", wireType)
			}
			m.Comma = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Comma |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			m.Comment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Comment |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullEncoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NullEncoding = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
			}
			m.Skip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Skip |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIoFormats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIoFormats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLOutfileOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoFormats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLOutfileOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLOutfileOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowSeparator", wireType)
			}
			m.RowSeparator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowSeparator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldSeparator", wireType)
			}
			m.FieldSeparator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldSeparator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enclose", wireType)
			}
			m.Enclose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enclose |= (MySQLOutfileOptions_Enclose(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encloser", wireType)
			}
			m.Encloser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encloser |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEscape", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasEscape = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Escape", wireType)
			}
			m.Escape = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Escape |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIoFormats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIoFormats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PgCopyOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoFormats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PgCopyOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PgCopyOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delimiter", wireType)
			}
			m.Delimiter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delimiter |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Null", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Null = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIoFormats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIoFormats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIoFormats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIoFormats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIoFormats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIoFormats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIoFormats(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIoFormats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIoFormats   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("roachpb/io-formats.proto", fileDescriptorIoFormats) }

var fileDescriptorIoFormats = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0xcd, 0xc6, 0x49, 0x1c, 0x4f, 0x92, 0x7e, 0xfb, 0x2d, 0x1c, 0xac, 0x0a, 0x4c, 0x30, 0x12,
	0x2a, 0xa0, 0xba, 0x52, 0xa5, 0x9e, 0x51, 0x1b, 0xb5, 0x50, 0x89, 0x36, 0xd0, 0x88, 0x1e, 0xb8,
	0x44, 0xc6, 0xd9, 0xa6, 0x56, 0x6d, 0xef, 0xe2, 0xb5, 0x1b, 0x85, 0xff, 0x80, 0xc4, 0xcf, 0xea,
	0x91, 0x03, 0x07, 0x4e, 0x08, 0xc2, 0x9f, 0xe0, 0x88, 0x76, 0xbd, 0x26, 0x8e, 0x88, 0x04, 0xb7,
	0xd1, 0x9b, 0xf7, 0xde, 0xce, 0xce, 0x1b, 0xb0, 0x53, 0xe6, 0x07, 0x97, 0xfc, 0xed, 0x4e, 0xc8,
	0xb6, 0x2f, 0x58, 0x1a, 0xfb, 0x99, 0xf0, 0x78, 0xca, 0x32, 0x46, 0xfe, 0x0f, 0x58, 0x70, 0xa5,
	0xba, 0x9e, 0xe6, 0x6c, 0xde, 0x9e, 0xb2, 0x29, 0x53, 0xdd, 0x1d, 0x59, 0x15, 0x44, 0xf7, 0xa7,
	0x01, 0xdd, 0xe3, 0xe1, 0x51, 0x18, 0xd1, 0x23, 0x65, 0x40, 0x9e, 0x43, 0xab, 0xb0, 0xb2, 0x51,
	0x1f, 0x6d, 0x6d, 0xec, 0x3e, 0xf6, 0xfe, 0xb0, 0xf2, 0xaa, 0x02, 0x6f, 0x59, 0x1e, 0x34, 0x6e,
	0xbe, 0xde, 0xab, 0x9d, 0x69, 0x3d, 0xd9, 0x03, 0x23, 0x10, 0xd7, 0x76, 0xbd, 0x8f, 0xb6, 0x3a,
	0xbb, 0x77, 0xd7, 0xd8, 0x0c, 0x46, 0xe7, 0x43, 0x9e, 0x85, 0x2c, 0x11, 0x5a, 0x29, 0xf9, 0xe4,
	0x18, 0xac, 0x78, 0x2e, 0xde, 0x45, 0x63, 0x96, 0x67, 0xb6, 0xa1, 0xc4, 0x0f, 0xd7, 0x88, 0x4f,
	0xe6, 0xa3, 0x57, 0x2f, 0x86, 0x79, 0x76, 0x11, 0x46, 0x74, 0xd5, 0xa5, 0xad, 0xe4, 0xc3, 0x3c,
	0x23, 0x4f, 0xc1, 0xe4, 0xd3, 0x71, 0xc0, 0xf8, 0xdc, 0x6e, 0x28, 0xa3, 0xfe, 0x1a, 0xa3, 0x97,
	0xd3, 0x01, 0xe3, 0xf3, 0x55, 0x8b, 0x16, 0x57, 0x20, 0x19, 0x41, 0x27, 0x60, 0x31, 0x4f, 0xa9,
	0x10, 0x21, 0x4b, 0xec, 0xa6, 0xda, 0xc8, 0x93, 0xbf, 0x6d, 0x64, 0xb0, 0x94, 0x68, 0xbf, 0xaa,
	0x8b, 0x3b, 0x04, 0xa8, 0xec, 0xbb, 0x03, 0xe6, 0xeb, 0xe4, 0x2a, 0x61, 0xb3, 0x04, 0xd7, 0x88,
	0x09, 0xc6, 0x60, 0x74, 0x8e, 0x11, 0xc1, 0xd0, 0x3d, 0xd1, 0xbf, 0x90, 0x1f, 0xc4, 0x75, 0xd2,
	0x03, 0x4b, 0x21, 0x93, 0x3c, 0xe6, 0xd8, 0x20, 0x00, 0xad, 0x62, 0x70, 0xdc, 0x70, 0xf7, 0xa0,
	0x53, 0x79, 0x92, 0xb4, 0xa1, 0xb1, 0x9f, 0x67, 0x0c, 0xd7, 0x64, 0x75, 0xca, 0x12, 0x8a, 0x91,
	0xac, 0x9e, 0xbd, 0x0f, 0x39, 0xae, 0xcb, 0xea, 0x40, 0x56, 0x86, 0xfb, 0x01, 0x01, 0x2c, 0x23,
	0x20, 0x9b, 0xd0, 0x0c, 0x58, 0x1c, 0xfb, 0x2a, 0xf7, 0xa6, 0x1e, 0xbc, 0x80, 0x88, 0x03, 0xa6,
	0x2c, 0x68, 0x92, 0xa9, 0x38, 0xcb, 0x6e, 0x09, 0x92, 0x47, 0xd0, 0x4b, 0xf2, 0x28, 0x1a, 0xd3,
	0x24, 0x60, 0x93, 0x30, 0x99, 0xaa, 0xdc, 0x2c, 0xc5, 0x42, 0x67, 0x5d, 0xd9, 0x3a, 0xd4, 0x1d,
	0x62, 0x43, 0x43, 0x5c, 0x85, 0x5c, 0x05, 0xd2, 0xd3, 0x3e, 0x0a, 0x71, 0x3f, 0xd7, 0xe1, 0xd6,
	0x9a, 0x54, 0xa5, 0x79, 0xca, 0x66, 0x63, 0x41, 0xb9, 0x9f, 0xfa, 0x19, 0x4b, 0x57, 0x06, 0xec,
	0xa6, 0x6c, 0x36, 0x2a, 0x3b, 0x64, 0x1b, 0xfe, 0xbb, 0x08, 0x69, 0x34, 0xa9, 0x90, 0xab, 0xf3,
	0x6e, 0xa8, 0xe6, 0x92, 0x7e, 0x0a, 0x26, 0x4d, 0x82, 0x88, 0x09, 0xaa, 0x06, 0xde, 0xd8, 0xf5,
	0xfe, 0xed, 0xd0, 0xbc, 0xc3, 0x42, 0x55, 0xae, 0x41, 0x9b, 0x90, 0x3e, 0xb4, 0x75, 0x99, 0xaa,
	0xff, 0x95, 0xef, 0xfe, 0x46, 0xc9, 0x03, 0x80, 0x4b, 0x5f, 0x8c, 0xa9, 0x08, 0x7c, 0x4e, 0xd5,
	0x3d, 0xb5, 0x35, 0xc7, 0xba, 0xf4, 0xc5, 0xa1, 0x82, 0xc9, 0x1d, 0x68, 0x69, 0x42, 0xab, 0x62,
	0xa2, 0x31, 0xd7, 0x03, 0x53, 0x3f, 0x4f, 0x2c, 0x68, 0x9e, 0xd2, 0x6b, 0x9a, 0xe2, 0x9a, 0xbc,
	0x87, 0xfd, 0x68, 0xe6, 0xcf, 0x05, 0x46, 0xa4, 0x0b, 0xed, 0x62, 0x50, 0x3f, 0xc2, 0x75, 0xf7,
	0x04, 0x7a, 0x2b, 0x27, 0x4e, 0x5c, 0xb0, 0x26, 0x34, 0x0a, 0xe3, 0x30, 0xa3, 0xab, 0xbb, 0x5c,
	0xc2, 0x32, 0x25, 0x99, 0x9a, 0xda, 0x9e, 0x55, 0xa6, 0x24, 0x91, 0x83, 0xfb, 0x37, 0xdf, 0x9d,
	0xda, 0xcd, 0xc2, 0x41, 0x9f, 0x16, 0x0e, 0xfa, 0xb2, 0x70, 0xd0, 0xb7, 0x85, 0x83, 0x3e, 0xfe,
	0x70, 0x6a, 0x6f, 0x4c, 0xbd, 0xb1, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xec, 0xf6, 0xe1, 0x04,
	0x97, 0x04, 0x00, 0x00,
}
