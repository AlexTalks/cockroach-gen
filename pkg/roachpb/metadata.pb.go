// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: roachpb/metadata.proto

package roachpb

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	util "github.com/cockroachdb/cockroach/pkg/util"
	admissionpb "github.com/cockroachdb/cockroach/pkg/util/admission/admissionpb"
	hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ReplicaType identifies which raft activities a replica participates in. In
// normal operation, VOTER_FULL, NON_VOTER, and LEARNER are the only used
// states. However, atomic replication changes require a transition through a
// "joint config"; in this joint config, the VOTER_DEMOTING_{LEARNER, NON_VOTER}
// and VOTER_INCOMING types are used as well to denote voters which are being
// downgraded to learners and newly added by the change, respectively. When
// being removed, a demoting voter is turning into a learner, which we prefer
// over a direct removal, which was used prior to v20.1 and uses the
// VOTER_OUTGOING type instead (see VersionChangeReplicasDemotion for details on
// why we're not doing that any more).
//
// All VOTER* types indicate a replica that participates in all raft activities,
// including voting for leadership and committing entries. Typically, this
// requires a majority of voters to reach a decision. In a joint config, two
// separate majorities are required: one from the set of replicas that have
// either type VOTER or VOTER_OUTGOING or VOTER_DEMOTING_{LEARNER, NON_VOTER},
// as well as that of the set of types VOTER and VOTER_INCOMING . For example,
// when type VOTER_FULL is assigned to replicas 1 and 2, while 3 is
// VOTER_OUTGOING and 4 is VOTER_INCOMING, then the two sets over which quorums
// need to be achieved are {1,2,3} and {1,2,4}. Thus, {1,2} is a quorum of both,
// {1,3} is a quorum of the first but not the second, {1,4} is a quorum of the
// second but not the first, and {3,4} is a quorum of neither.
type ReplicaType int32

const (
	// VOTER_FULL indicates a replica that is a voter both in the
	// incoming and outgoing set.
	VOTER_FULL ReplicaType = 0
	// VOTER_INCOMING indicates a voting replica that will be a
	// VOTER_FULL once the ongoing atomic replication change is finalized; that is,
	// it is in the process of being added. In practice, this replica type should
	// be treated like a VOTER_FULL.
	VOTER_INCOMING ReplicaType = 2
	// VOTER_OUTGOING indicates a voting replica that will not be part
	// of the descriptor once the ongoing atomic replication change is finalized;
	// that is, it is in the process of being removed. In practice, a replica of
	// this type should be treated accordingly and no work should be assigned to
	// it.
	//
	// Note: We're not using VOTER_OUTGOING since 20.1. We're using VOTER_DEMOTING
	// instead. See #42251.
	VOTER_OUTGOING ReplicaType = 3
	// VOTER_DEMOTING_LEARNER indicates a voting replica that will become a
	// learner once the ongoing atomic replication change is finalized; that is,
	// it is in the process of being demoted. Since learners are currently
	// short-lived, this replica is really being removed, with an intermediate
	// step, and no work should be assigned to it.
	VOTER_DEMOTING_LEARNER ReplicaType = 4
	// LEARNER indicates a replica that applies committed entries, but does not
	// count towards the quorum(s). Candidates will not ask for (or take into
	// account) votes of (peers they consider) LEARNERs for leadership nor do
	// their acknowledged log entries get taken into account for determining the
	// committed index. Learners in CockroachDB are a short-term transient state:
	// a replica being added and on its way to being a VOTER_{FULL,INCOMING}, or a
	// VOTER_DEMOTING_LEARNER being removed.
	//
	// Note that once these replicas upreplicate after receiving their initial
	// snapshot, they will count towards the raft leader's quota pool and throttle
	// incoming proposals if they fall "too far behind".
	LEARNER ReplicaType = 1
	// NON_VOTER indicates a replica that applies committed entries, but does not
	// count towards the quorum(s). Candidates will not ask for (or take into
	// account) votes of (peers they consider) NON_VOTERs for leadership nor do
	// their acknowledged log entries get taken into account for determining the
	// committed index.
	//
	// Under the hood, it is based on an etcd/raft LearnerNode, like the LEARNER
	// replica type defined above. They will also cause the quota pool on the
	// leader to throttle incoming proposals if they fall behind.
	//
	// Unlike LEARNERs, these are a persistent state meant to serve user traffic
	// via follower reads. See comment above ReplicaDescriptors.NonVoters() for
	// differences in how LEARNERs and NON_VOTERs are handled internally.
	NON_VOTER ReplicaType = 5
	// VOTER_DEMOTING_NON_VOTER indicates a voting replica in the outgoing group
	// of a joint state, which will become a non-voter when the atomic replication
	// change is finalized (i.e. when we exit the joint state).
	VOTER_DEMOTING_NON_VOTER ReplicaType = 6
)

var ReplicaType_name = map[int32]string{
	0: "VOTER_FULL",
	2: "VOTER_INCOMING",
	3: "VOTER_OUTGOING",
	4: "VOTER_DEMOTING_LEARNER",
	1: "LEARNER",
	5: "NON_VOTER",
	6: "VOTER_DEMOTING_NON_VOTER",
}

var ReplicaType_value = map[string]int32{
	"VOTER_FULL":               0,
	"VOTER_INCOMING":           2,
	"VOTER_OUTGOING":           3,
	"VOTER_DEMOTING_LEARNER":   4,
	"LEARNER":                  1,
	"NON_VOTER":                5,
	"VOTER_DEMOTING_NON_VOTER": 6,
}

func (x ReplicaType) Enum() *ReplicaType {
	p := new(ReplicaType)
	*p = x
	return p
}

func (x ReplicaType) String() string {
	return proto.EnumName(ReplicaType_name, int32(x))
}

func (x *ReplicaType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReplicaType_value, data, "ReplicaType")
	if err != nil {
		return err
	}
	*x = ReplicaType(value)
	return nil
}

func (ReplicaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{0}
}

// LocalityComparisonType represents different types of comparison results that
// indicate the relationship between two localities.
type LocalityComparisonType int32

const (
	// UNDEFINED represents an undefined comparison result, indicating error
	// behavior.
	LocalityComparisonType_UNDEFINED LocalityComparisonType = 0
	// CROSS_REGION indicates that the two localities have different region tiers.
	LocalityComparisonType_CROSS_REGION LocalityComparisonType = 1
	// SAME_REGION_CROSS_ZONE indicates that the two localities have the same
	// region tiers but different zone tiers.
	LocalityComparisonType_SAME_REGION_CROSS_ZONE LocalityComparisonType = 2
	// SAME_REGION_SAME_ZONE indicates that the two localities have same region
	// and same zone tiers.
	LocalityComparisonType_SAME_REGION_SAME_ZONE LocalityComparisonType = 3
)

var LocalityComparisonType_name = map[int32]string{
	0: "UNDEFINED",
	1: "CROSS_REGION",
	2: "SAME_REGION_CROSS_ZONE",
	3: "SAME_REGION_SAME_ZONE",
}

var LocalityComparisonType_value = map[string]int32{
	"UNDEFINED":              0,
	"CROSS_REGION":           1,
	"SAME_REGION_CROSS_ZONE": 2,
	"SAME_REGION_SAME_ZONE":  3,
}

func (x LocalityComparisonType) Enum() *LocalityComparisonType {
	p := new(LocalityComparisonType)
	*p = x
	return p
}

func (x LocalityComparisonType) String() string {
	return proto.EnumName(LocalityComparisonType_name, int32(x))
}

func (x *LocalityComparisonType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LocalityComparisonType_value, data, "LocalityComparisonType")
	if err != nil {
		return err
	}
	*x = LocalityComparisonType(value)
	return nil
}

func (LocalityComparisonType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{1}
}

// Attributes specifies a list of arbitrary strings describing
// node topology, store type, and machine capabilities.
type Attributes struct {
	Attrs []string `protobuf:"bytes,1,rep,name=attrs" json:"attrs,omitempty" yaml:"attrs,flow"`
}

func (m *Attributes) Reset()      { *m = Attributes{} }
func (*Attributes) ProtoMessage() {}
func (*Attributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{0}
}
func (m *Attributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Attributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attributes.Merge(m, src)
}
func (m *Attributes) XXX_Size() int {
	return m.Size()
}
func (m *Attributes) XXX_DiscardUnknown() {
	xxx_messageInfo_Attributes.DiscardUnknown(m)
}

var xxx_messageInfo_Attributes proto.InternalMessageInfo

// ReplicationTarget identifies a node/store pair.
//
// TODO(aayush): There are a bunch of usages of ReplicaDescriptor in allocator
// methods where we should really be using ReplicationTarget. We should instead
// have something like a `ReplicationTargetI` interface that both
// `ReplicaDescriptor` and `ReplicationTarget` implement and refactor our
// utility methods for these operate on the interface instead.
type ReplicationTarget struct {
	NodeID  NodeID  `protobuf:"varint,1,opt,name=node_id,json=nodeId,casttype=NodeID" json:"node_id"`
	StoreID StoreID `protobuf:"varint,2,opt,name=store_id,json=storeId,casttype=StoreID" json:"store_id"`
}

func (m *ReplicationTarget) Reset()      { *m = ReplicationTarget{} }
func (*ReplicationTarget) ProtoMessage() {}
func (*ReplicationTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{1}
}
func (m *ReplicationTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicationTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationTarget.Merge(m, src)
}
func (m *ReplicationTarget) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationTarget.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationTarget proto.InternalMessageInfo

// ReplicaDescriptor describes a replica location by node ID
// (corresponds to a host:port via lookup on gossip network) and store
// ID (identifies the device).
type ReplicaDescriptor struct {
	NodeID  NodeID  `protobuf:"varint,1,opt,name=node_id,json=nodeId,casttype=NodeID" json:"node_id" yaml:"NodeID"`
	StoreID StoreID `protobuf:"varint,2,opt,name=store_id,json=storeId,casttype=StoreID" json:"store_id" yaml:"StoreID"`
	// replica_id uniquely identifies a replica instance. If a range is removed from
	// a store and then re-added to the same store, the new instance will have a
	// higher replica_id.
	ReplicaID ReplicaID `protobuf:"varint,3,opt,name=replica_id,json=replicaId,casttype=ReplicaID" json:"replica_id" yaml:"ReplicaID"`
	// Type indicates which raft activities a replica participates in.
	Type ReplicaType `protobuf:"varint,4,opt,name=type,enum=cockroach.roachpb.ReplicaType" json:"type" yaml:"ReplicaType,omitempty"`
}

func (m *ReplicaDescriptor) Reset()      { *m = ReplicaDescriptor{} }
func (*ReplicaDescriptor) ProtoMessage() {}
func (*ReplicaDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{2}
}
func (m *ReplicaDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicaDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaDescriptor.Merge(m, src)
}
func (m *ReplicaDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaDescriptor proto.InternalMessageInfo

// ReplicaIdent uniquely identifies a specific replica.
type ReplicaIdent struct {
	RangeID RangeID           `protobuf:"varint,1,opt,name=range_id,json=rangeId,casttype=RangeID" json:"range_id"`
	Replica ReplicaDescriptor `protobuf:"bytes,2,opt,name=replica" json:"replica"`
}

func (m *ReplicaIdent) Reset()         { *m = ReplicaIdent{} }
func (m *ReplicaIdent) String() string { return proto.CompactTextString(m) }
func (*ReplicaIdent) ProtoMessage()    {}
func (*ReplicaIdent) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{3}
}
func (m *ReplicaIdent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaIdent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicaIdent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaIdent.Merge(m, src)
}
func (m *ReplicaIdent) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaIdent) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaIdent.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaIdent proto.InternalMessageInfo

// RangeDescriptor is the value stored in a range metadata key.
// A range is described using an inclusive start key, a non-inclusive end key,
// and a list of replicas where the range is stored.
//
// NOTE: Care must be taken when making changes to this proto because we have
// code that relies on the descriptor comparing Equal() after round-tripping
// through a previous/next version node (i.e. in mixed-version clusters). Note
// that we don't need the proto encoding to be stable since, when doing CPuts we
// use the raw bytes we've read from the DB as the expected value (instead of
// re-marshaling the proto), but unfortunately we also need the Equal() method
// to work. Also note that we configure our protos to not maintain unrecognized
// fields.
type RangeDescriptor struct {
	RangeID RangeID `protobuf:"varint,1,opt,name=range_id,json=rangeId,casttype=RangeID" json:"range_id"`
	// start_key is the first key which may be contained by this range.
	StartKey RKey `protobuf:"bytes,2,opt,name=start_key,json=startKey,casttype=RKey" json:"start_key,omitempty"`
	// end_key marks the end of the range's possible keys.  EndKey itself is not
	// contained in this range - it will be contained in the immediately
	// subsequent range.
	EndKey RKey `protobuf:"bytes,3,opt,name=end_key,json=endKey,casttype=RKey" json:"end_key,omitempty"`
	// InternalReplicas is the is the set of nodes/stores on which replicas of
	// this range are stored. DO NOT USE this field directly, use the `Replicas`
	// method instead. The ordering is arbitrary and subject to permutation.
	InternalReplicas []ReplicaDescriptor `protobuf:"bytes,4,rep,name=internal_replicas,json=internalReplicas" json:"internal_replicas"`
	// next_replica_id is a counter used to generate replica IDs.
	NextReplicaID ReplicaID `protobuf:"varint,5,opt,name=next_replica_id,json=nextReplicaId,casttype=ReplicaID" json:"next_replica_id"`
	// generation is incremented on every split, merge, and every replica change,
	// i.e., whenever the span of the range or replica set changes. It is
	// initialized to zero when the range is first created. The generation
	// counter was first introduced to allow the range descriptor resulting from
	// a split and then merge to be distinguishable from the initial range
	// descriptor. This is important since changes to the range descriptors use
	// CPuts to ensure mutual exclusion.
	//
	// See #28071 for details on the above.
	//
	// Generations are also useful to make local replicaGC decisions when applying
	// a snapshot on keyspace that has overlapping replicas (but note that we do
	// not use this at the time of writing due to migration concerns; see below).
	//
	// We want to be able to compare the snapshot range's generation counter to
	// that of the overlapping replicas to draw a conclusion about whether the
	// snapshot can be applied (in which case the overlapping replicas need to be
	// safely removable). To that end, on a split, not only do we increment the
	// left hand side's generation, we also copy the resultant generation to the
	// newly created right hand side. On merges, we update the left hand side's
	// generation so that it exceeds by one the maximum of the left hand side and
	// the right hand side's generations from before the merge.
	//
	// If two replicas (perhaps one of them represented by a raft or preemptive
	// snapshot) as defined by their full range descriptor (including, notably,
	// the generation) overlap, then one of them has to be stale. This is because
	// the keyspace cleanly shards into non-overlapping ranges at all times (i.e.
	// for all consistent snapshots). Since meta ranges (or more generally, range
	// descriptors) are only ever updated transactionally, mutations to the meta
	// ranges can be serialized (i.e. put into some sequential ordering). We know
	// that the descriptors corresponding to both of our replicas can't be from
	// the same consistent snapshot of the meta ranges, so there is a version of
	// the meta ranges that includes only the first replica, and there is a
	// version that includes only the second replica. Without loss of generality,
	// assume that the first version is "older". This means that there is a finite
	// sequence of splits and merges that were applied to the consistent snapshot
	// corresponding to the first version which resulted in the second version of
	// the meta ranges.
	//
	// Each individual operation, thanks to the generational semantics above, has
	// the invariant that the resulting descriptors have a strictly larger
	// generation than any descriptors from the previous version that they cover.
	// For example, if a descriptor [a,c) at generation 5 is split into [a,b) and
	// [b,c), both of those latter range descriptors have generation 6. If [c,d)
	// is at generation 12 and [d, f) is at generation 17, then the resulting
	// merged range [c,f) will have generation 18.
	//
	// At the end of the day, for incoming snapshots, this means that we only have
	// to collect the overlapping replicas and their generations. Any replica with
	// a smaller generation is stale by the above argument and can be replicaGC'ed
	// right away. Any replica with a larger generation indicates that the snapshot
	// is stale and should be discarded. A replica with the same generation is
	// necessarily a replica of the range the snapshot is addressing (this is the
	// usual case, in which a snapshot "overlaps" precisely one replica, which is
	// the replica it's supposed to update, and no splits and merges have taken
	// place at all).
	//
	// For a third note, observe that the generational semantics above may
	// possibly allow range merges without colocation, at least in the sense that
	// the counter examples in #28071 are defused. This is because the
	// generational counter can answer the question whether the overlapping
	// replica is gc'able or not. If it is not gc'able, then by definition the
	// replica applying the merge is.
	Generation RangeGeneration `protobuf:"varint,6,opt,name=generation,casttype=RangeGeneration" json:"generation"`
	// The presence of the sticky_bit indicates that the range should not be
	// automatically merged by the merge queue with the range to its left. It is
	// set during a split operation and unset during an unsplit operation. Note
	// that the unsplit operation is a different operation from the merge
	// operation. Unsplit only unsets sticky_bit. It is represented by a
	// timestamp that indicates when it expires. After the expiration time has
	// passed, the split is eligible for automatic merging.
	//
	// The reason the sticky_bit exists is because when the merge queue is
	// enabled and a manual split happens, the split ranges would immediately be
	// merged by the merge queue. Previous, we threw an error when a user
	// attempted to execute ALTER TABLE/INDEX ... SPLIT AT ... when the merge
	// queue is enabled. With sticky_bit, users can manually split ranges without
	// disabling the merge queue.
	StickyBit hlc.Timestamp `protobuf:"bytes,7,opt,name=sticky_bit,json=stickyBit" json:"sticky_bit"`
}

func (m *RangeDescriptor) Reset()      { *m = RangeDescriptor{} }
func (*RangeDescriptor) ProtoMessage() {}
func (*RangeDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{4}
}
func (m *RangeDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RangeDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeDescriptor.Merge(m, src)
}
func (m *RangeDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *RangeDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_RangeDescriptor proto.InternalMessageInfo

// Percentiles contains a handful of hard-coded percentiles meant to summarize
// a distribution.
type Percentiles struct {
	P10  float64 `protobuf:"fixed64,1,opt,name=p10" json:"p10"`
	P25  float64 `protobuf:"fixed64,2,opt,name=p25" json:"p25"`
	P50  float64 `protobuf:"fixed64,3,opt,name=p50" json:"p50"`
	P75  float64 `protobuf:"fixed64,4,opt,name=p75" json:"p75"`
	P90  float64 `protobuf:"fixed64,5,opt,name=p90" json:"p90"`
	PMax float64 `protobuf:"fixed64,6,opt,name=pMax" json:"pMax"`
}

func (m *Percentiles) Reset()      { *m = Percentiles{} }
func (*Percentiles) ProtoMessage() {}
func (*Percentiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{5}
}
func (m *Percentiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Percentiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Percentiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Percentiles.Merge(m, src)
}
func (m *Percentiles) XXX_Size() int {
	return m.Size()
}
func (m *Percentiles) XXX_DiscardUnknown() {
	xxx_messageInfo_Percentiles.DiscardUnknown(m)
}

var xxx_messageInfo_Percentiles proto.InternalMessageInfo

// StoreCapacity contains capacity information for a storage device.
type StoreCapacity struct {
	// Total capacity of the disk used by the store, including space used by the
	// operating system and other applications.
	Capacity int64 `protobuf:"varint,1,opt,name=capacity" json:"capacity"`
	// Available space remaining on the disk used by the store.
	Available int64 `protobuf:"varint,2,opt,name=available" json:"available"`
	// Amount of disk space used by the data in the CockroachDB store. Note that
	// this is going to be less than (capacity - available), because those two
	// fields consider the entire disk and everything on it, while this only
	// tracks the store's disk usage.
	Used int64 `protobuf:"varint,8,opt,name=used" json:"used"`
	// Amount of logical bytes stored in the store, ignoring RocksDB space
	// overhead. Useful for rebalancing so that moving a replica from one store
	// to another actually removes its bytes from the source store even though
	// RocksDB may not actually reclaim the physical disk space for a while.
	LogicalBytes int64 `protobuf:"varint,9,opt,name=logical_bytes,json=logicalBytes" json:"logical_bytes"`
	RangeCount   int32 `protobuf:"varint,3,opt,name=range_count,json=rangeCount" json:"range_count"`
	LeaseCount   int32 `protobuf:"varint,4,opt,name=lease_count,json=leaseCount" json:"lease_count"`
	// queries_per_second tracks the average number of queries processed per
	// second by replicas in the store. The stat is tracked over the time period
	// defined in storage/replica_stats.go, which as of July 2018 is 30 minutes.
	QueriesPerSecond float64 `protobuf:"fixed64,10,opt,name=queries_per_second,json=queriesPerSecond" json:"queries_per_second"`
	// writes_per_second tracks the average number of keys written per second
	// by ranges in the store. The stat is tracked over the time period defined
	// in storage/replica_stats.go, which as of July 2018 is 30 minutes.
	WritesPerSecond float64 `protobuf:"fixed64,5,opt,name=writes_per_second,json=writesPerSecond" json:"writes_per_second"`
	// cpu_per_second tracks the average store cpu use (ns) per second.
	// This is the sum of all the replica's cpu time on this store, which is
	// tracked in replica stats.
	CPUPerSecond float64                 `protobuf:"fixed64,14,opt,name=cpu_per_second,json=cpuPerSecond" json:"cpu_per_second"`
	IOThreshold  admissionpb.IOThreshold `protobuf:"bytes,13,opt,name=io_threshold,json=ioThreshold" json:"io_threshold"`
	// io_threshold_max tracks the maximum io overload values the store has had
	// over the last 5 minutes.
	IOThresholdMax admissionpb.IOThreshold `protobuf:"bytes,15,opt,name=io_threshold_max,json=ioThresholdMax" json:"io_threshold_max"`
	// bytes_per_replica and writes_per_replica contain percentiles for the
	// number of bytes and writes-per-second to each replica in the store.
	// This information can be used for rebalancing decisions.
	BytesPerReplica  Percentiles `protobuf:"bytes,6,opt,name=bytes_per_replica,json=bytesPerReplica" json:"bytes_per_replica"`
	WritesPerReplica Percentiles `protobuf:"bytes,7,opt,name=writes_per_replica,json=writesPerReplica" json:"writes_per_replica"`
}

func (m *StoreCapacity) Reset()      { *m = StoreCapacity{} }
func (*StoreCapacity) ProtoMessage() {}
func (*StoreCapacity) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{6}
}
func (m *StoreCapacity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreCapacity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StoreCapacity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreCapacity.Merge(m, src)
}
func (m *StoreCapacity) XXX_Size() int {
	return m.Size()
}
func (m *StoreCapacity) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreCapacity.DiscardUnknown(m)
}

var xxx_messageInfo_StoreCapacity proto.InternalMessageInfo

// StoreProperties contains configuration and OS-level details for a storage device.
type StoreProperties struct {
	// encrypted indicates whether the store is encrypted.
	Encrypted bool `protobuf:"varint,1,opt,name=encrypted" json:"encrypted"`
	// read_only indicates whether the store is attached read_only.
	ReadOnly bool `protobuf:"varint,2,opt,name=read_only,json=readOnly" json:"read_only"`
	// dir is the path to the store's data directory on the node.
	Dir string `protobuf:"bytes,4,opt,name=dir" json:"dir"`
	// wal_failover_path encodes the path to the secondary WAL directory used for
	// failover in the event of high write latency to the primary WAL.
	WalFailoverPath *string `protobuf:"bytes,5,opt,name=wal_failover_path,json=walFailoverPath" json:"wal_failover_path,omitempty"`
	// disk_properties reports details about the underlying filesystem,
	// when the store is supported by a file store. Unset otherwise.
	FileStoreProperties *FileStoreProperties `protobuf:"bytes,3,opt,name=file_store_properties,json=fileStoreProperties" json:"file_store_properties,omitempty"`
}

func (m *StoreProperties) Reset()         { *m = StoreProperties{} }
func (m *StoreProperties) String() string { return proto.CompactTextString(m) }
func (*StoreProperties) ProtoMessage()    {}
func (*StoreProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{7}
}
func (m *StoreProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StoreProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreProperties.Merge(m, src)
}
func (m *StoreProperties) XXX_Size() int {
	return m.Size()
}
func (m *StoreProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreProperties.DiscardUnknown(m)
}

var xxx_messageInfo_StoreProperties proto.InternalMessageInfo

// FileStoreProperties contains configuration and OS-level details for a file store.
type FileStoreProperties struct {
	// path reports the configured filesystem path for the store.
	Path string `protobuf:"bytes,1,opt,name=path" json:"path"`
	// fs_type reports the external filesystem type (ufs, ext4, etc), if known.
	FsType string `protobuf:"bytes,2,opt,name=fs_type,json=fsType" json:"fs_type"`
	// block_device reports which block devices supports the filesystem, if known.
	BlockDevice string `protobuf:"bytes,3,opt,name=block_device,json=blockDevice" json:"block_device"`
	// mount_point reports the mount point of the filesystem, if known.
	MountPoint string `protobuf:"bytes,4,opt,name=mount_point,json=mountPoint" json:"mount_point"`
	// mount_options reports the mount options, if known.
	MountOptions string `protobuf:"bytes,5,opt,name=mount_options,json=mountOptions" json:"mount_options"`
}

func (m *FileStoreProperties) Reset()      { *m = FileStoreProperties{} }
func (*FileStoreProperties) ProtoMessage() {}
func (*FileStoreProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{8}
}
func (m *FileStoreProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileStoreProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FileStoreProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileStoreProperties.Merge(m, src)
}
func (m *FileStoreProperties) XXX_Size() int {
	return m.Size()
}
func (m *FileStoreProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_FileStoreProperties.DiscardUnknown(m)
}

var xxx_messageInfo_FileStoreProperties proto.InternalMessageInfo

// NodeDescriptor holds details on node physical/network topology.
type NodeDescriptor struct {
	NodeID NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,casttype=NodeID" json:"node_id"`
	// Address can not be used directly for dialing a node. It doesn't take into
	// account the locality addresses. Use gossip.GetNodeIDAddress instead.
	Address         util.UnresolvedAddr `protobuf:"bytes,2,opt,name=address" json:"address"`
	Attrs           Attributes          `protobuf:"bytes,3,opt,name=attrs" json:"attrs"`
	Locality        Locality            `protobuf:"bytes,4,opt,name=locality" json:"locality"`
	ServerVersion   Version             `protobuf:"bytes,5,opt,name=ServerVersion" json:"ServerVersion"`
	BuildTag        string              `protobuf:"bytes,6,opt,name=build_tag,json=buildTag" json:"build_tag"`
	StartedAt       int64               `protobuf:"varint,7,opt,name=started_at,json=startedAt" json:"started_at"`
	LocalityAddress []LocalityAddress   `protobuf:"bytes,8,rep,name=locality_address,json=localityAddress" json:"locality_address"`
	ClusterName     string              `protobuf:"bytes,9,opt,name=cluster_name,json=clusterName" json:"cluster_name"`
	// The SQL address. If empty, indicates that the base address field
	// is also used to accept SQL connections.
	SQLAddress util.UnresolvedAddr `protobuf:"bytes,10,opt,name=sql_address,json=sqlAddress" json:"sql_address"`
	// The HTTP address. If empty, will prevent nodes from proxying HTTP
	// requests to each other.
	HTTPAddress util.UnresolvedAddr `protobuf:"bytes,11,opt,name=http_address,json=httpAddress" json:"http_address"`
}

func (m *NodeDescriptor) Reset()         { *m = NodeDescriptor{} }
func (m *NodeDescriptor) String() string { return proto.CompactTextString(m) }
func (*NodeDescriptor) ProtoMessage()    {}
func (*NodeDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{9}
}
func (m *NodeDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDescriptor.Merge(m, src)
}
func (m *NodeDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *NodeDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDescriptor proto.InternalMessageInfo

// LocalityAddress holds the private address accessible only from other nodes
// in the corresponding locality.
type LocalityAddress struct {
	Address      util.UnresolvedAddr `protobuf:"bytes,1,opt,name=address" json:"address"`
	LocalityTier Tier                `protobuf:"bytes,2,opt,name=locality_tier,json=localityTier" json:"locality_tier"`
}

func (m *LocalityAddress) Reset()         { *m = LocalityAddress{} }
func (m *LocalityAddress) String() string { return proto.CompactTextString(m) }
func (*LocalityAddress) ProtoMessage()    {}
func (*LocalityAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{10}
}
func (m *LocalityAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalityAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalityAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalityAddress.Merge(m, src)
}
func (m *LocalityAddress) XXX_Size() int {
	return m.Size()
}
func (m *LocalityAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalityAddress.DiscardUnknown(m)
}

var xxx_messageInfo_LocalityAddress proto.InternalMessageInfo

// StoreDescriptor holds store information including store attributes, node
// descriptor and store capacity.
type StoreDescriptor struct {
	StoreID    StoreID         `protobuf:"varint,1,opt,name=store_id,json=storeId,casttype=StoreID" json:"store_id"`
	Attrs      Attributes      `protobuf:"bytes,2,opt,name=attrs" json:"attrs"`
	Node       NodeDescriptor  `protobuf:"bytes,3,opt,name=node" json:"node"`
	Capacity   StoreCapacity   `protobuf:"bytes,4,opt,name=capacity" json:"capacity"`
	Properties StoreProperties `protobuf:"bytes,5,opt,name=properties" json:"properties"`
}

func (m *StoreDescriptor) Reset()         { *m = StoreDescriptor{} }
func (m *StoreDescriptor) String() string { return proto.CompactTextString(m) }
func (*StoreDescriptor) ProtoMessage()    {}
func (*StoreDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{11}
}
func (m *StoreDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StoreDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreDescriptor.Merge(m, src)
}
func (m *StoreDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *StoreDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_StoreDescriptor proto.InternalMessageInfo

// Locality is an ordered set of key value Tiers that describe a node's
// location. The tier keys should be the same across all nodes.
type Locality struct {
	Tiers []Tier `protobuf:"bytes,1,rep,name=tiers" json:"tiers"`
}

func (m *Locality) Reset()      { *m = Locality{} }
func (*Locality) ProtoMessage() {}
func (*Locality) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{12}
}
func (m *Locality) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Locality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Locality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Locality.Merge(m, src)
}
func (m *Locality) XXX_Size() int {
	return m.Size()
}
func (m *Locality) XXX_DiscardUnknown() {
	xxx_messageInfo_Locality.DiscardUnknown(m)
}

var xxx_messageInfo_Locality proto.InternalMessageInfo

// Tier represents one level of the locality hierarchy.
type Tier struct {
	// Key is the name of tier and should match all other nodes.
	Key string `protobuf:"bytes,1,opt,name=key" json:"key"`
	// Value is node specific value corresponding to the key.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value"`
}

func (m *Tier) Reset()      { *m = Tier{} }
func (*Tier) ProtoMessage() {}
func (*Tier) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{13}
}
func (m *Tier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Tier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tier.Merge(m, src)
}
func (m *Tier) XXX_Size() int {
	return m.Size()
}
func (m *Tier) XXX_DiscardUnknown() {
	xxx_messageInfo_Tier.DiscardUnknown(m)
}

var xxx_messageInfo_Tier proto.InternalMessageInfo

type Version struct {
	Major int32 `protobuf:"varint,1,opt,name=major_val,json=majorVal" json:"major"`
	Minor int32 `protobuf:"varint,2,opt,name=minor_val,json=minorVal" json:"minor"`
	// Note that patch is a placeholder and will always be zero.
	Patch int32 `protobuf:"varint,3,opt,name=patch" json:"patch"`
	// The internal version is used to introduce migrations during the development
	// cycle. They are subversions that are never the end versions of a release,
	// i.e. users of stable, public release will only use binaries with the
	// internal version set to 0.
	Internal int32 `protobuf:"varint,4,opt,name=internal" json:"internal"`
}

func (m *Version) Reset()      { *m = Version{} }
func (*Version) ProtoMessage() {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{14}
}
func (m *Version) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return m.Size()
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

// GCHint contains information that MVCC GC could use to optimize data deletion.
type GCHint struct {
	// LatestRangeDeleteTimestamp is a timestamp at which the *entire* key span of
	// the range was deleted using MVCC range tombstones. This hint is maintained
	// with best effort, and may have false positives and negatives.
	//
	// It helps the cases when large key spans are deleted, e.g. table/index drops
	// in SQL. In such cases it is likely that there will be no writes to the
	// keyspace of this Range at timestamps above LatestRangeDeleteTimestamp. GC
	// can then delete this data using the efficient ClearRange operation.
	//
	// Generally, we can't guarantee no writes above LatestRangeDeleteTimestamp,
	// so we don't rely on this hint for correctness. When GC uses this hint, it
	// double-checks while holding a latch that the range hasn't had any writes
	// above this timestamp.
	//
	// Initially, when a large key span is deleted, this hint is accurate for all
	// the affected ranges. As the time goes, more data can be written to these
	// ranges, or they may be split/merged with other ranges. We do best effort to
	// remove this hint as soon as we know the optimization won't be effective.
	//
	// For example, we don't propagate this hint when merging two ranges one of
	// which doesn't carry this hint, because we know that the entire span is
	// probably not covered by range tombstones.
	//
	// TODO(pavelkalinnikov): this is used for one other purpose, factor it out.
	//
	// When this hint is set, it is likely that adjacent ranges have it too,
	// especially in bulk deletion situations. Once the GC queue sees this hint,
	// it scans all the local leaseholder replicas to find the one with this hint
	// too, and GC them with higher priority / lower delay. Ultimately, this
	// reduces the cost of Pebble compactions that can be triggered by writing
	// range tombstones.
	LatestRangeDeleteTimestamp hlc.Timestamp `protobuf:"bytes,1,opt,name=latest_range_delete_timestamp,json=latestRangeDeleteTimestamp" json:"latest_range_delete_timestamp"`
	// GCTimestamp is the lowest "pending" timestamp for which some data in the
	// range must be garbage collected.
	//
	// Typically, this is left up to the MVCC GC job to decide when to delete
	// data. Because of the way the GC scoring works, it may take a long time
	// until such a decision is made. Some upper layer jobs require a more timely
	// deletion. For example, when a SQL table/index is dropped, there is a schema
	// change job waiting on the GC.
	//
	// We carry this hint to help expedite GC in such cases. Garbage collection is
	// triggered shortly after the time is past GCTimestamp + TTL.
	//
	// It is possible that there are multiple timestamps for which some data must
	// be deleted, e.g. if multiple SQL tables touching the same Range are
	// dropped. We could carry all such timestamps in this GCHint for accuracy,
	// but we would need extra measures to prevent uncontrollable growth of this
	// list, and excessive number of GC runs it could cause.
	//
	// Instead, we compress this list of timestamps to a pair of GCTimestamp and
	// GCTimestampNext, storing the min and max (if different from min) timestamp
	// correspondingly.
	//
	// Since a GC run covers all timestamps <= threshold, preserving the max
	// timestamp as a threshold guarantees that all pending timestamps <= max are
	// covered. However, the max pending timestamp can always be bumped up by
	// newer and newer writes, and never get below now() - TTL. To work around
	// this race, we also preserve the min pending timestamp, and update it only
	// when it has been garbage collected.
	//
	// With such a structure of the hint, we have a couple of guarantees:
	//
	//  1. The number of expedited GC runs on this range does not exceed 2 per TTL.
	//
	// Worst case: min < max < min+TTL = now. GC runs at time now = min+TTL, and
	// maybe at max+TTL or later time. Since any new write is at timestamp >= now,
	// the next GC run after these two is at least TTL away from now.
	//
	//  2. The max delay of expedited GC is close to one TTL, i.e. in the worst
	//     case the GC will run at timestamp + 2*TTL.
	//
	// Worst case: now = max = min+TTL. GC runs at time now and clears the min
	// timestamp. The only remaining timestamp (max) is min+TTL. The next possible
	// expedited GC run is thus at min+2*TTL. We may have omitted some timestamps
	// between min and max, and they are now <= 2*TTL away from the next GC run.
	GCTimestamp hlc.Timestamp `protobuf:"bytes,2,opt,name=gc_timestamp,json=gcTimestamp" json:"gc_timestamp"`
	// GCTimestampNext is the largest "pending" timestamp for which some data in
	// the range must be garbage collected. See GCTimestamp comment for more
	// details.
	//
	// INVARIANT: if GCTimestamp is empty, then GCTimestampNext is empty.
	// INVARIANT: if GCTimestampNext is set, it exceeds GCTimestamp.
	//
	// NB: if GCTimestamp is set and GCTimestampNext is empty, it means there is
	// only one pending timestamp for garbage collection.
	GCTimestampNext hlc.Timestamp `protobuf:"bytes,3,opt,name=gc_timestamp_next,json=gcTimestampNext" json:"gc_timestamp_next"`
}

func (m *GCHint) Reset()         { *m = GCHint{} }
func (m *GCHint) String() string { return proto.CompactTextString(m) }
func (*GCHint) ProtoMessage()    {}
func (*GCHint) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd7f5cc803f82c8, []int{15}
}
func (m *GCHint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GCHint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GCHint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCHint.Merge(m, src)
}
func (m *GCHint) XXX_Size() int {
	return m.Size()
}
func (m *GCHint) XXX_DiscardUnknown() {
	xxx_messageInfo_GCHint.DiscardUnknown(m)
}

var xxx_messageInfo_GCHint proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.roachpb.ReplicaType", ReplicaType_name, ReplicaType_value)
	proto.RegisterEnum("cockroach.roachpb.LocalityComparisonType", LocalityComparisonType_name, LocalityComparisonType_value)
	proto.RegisterType((*Attributes)(nil), "cockroach.roachpb.Attributes")
	proto.RegisterType((*ReplicationTarget)(nil), "cockroach.roachpb.ReplicationTarget")
	proto.RegisterType((*ReplicaDescriptor)(nil), "cockroach.roachpb.ReplicaDescriptor")
	proto.RegisterType((*ReplicaIdent)(nil), "cockroach.roachpb.ReplicaIdent")
	proto.RegisterType((*RangeDescriptor)(nil), "cockroach.roachpb.RangeDescriptor")
	proto.RegisterType((*Percentiles)(nil), "cockroach.roachpb.Percentiles")
	proto.RegisterType((*StoreCapacity)(nil), "cockroach.roachpb.StoreCapacity")
	proto.RegisterType((*StoreProperties)(nil), "cockroach.roachpb.StoreProperties")
	proto.RegisterType((*FileStoreProperties)(nil), "cockroach.roachpb.FileStoreProperties")
	proto.RegisterType((*NodeDescriptor)(nil), "cockroach.roachpb.NodeDescriptor")
	proto.RegisterType((*LocalityAddress)(nil), "cockroach.roachpb.LocalityAddress")
	proto.RegisterType((*StoreDescriptor)(nil), "cockroach.roachpb.StoreDescriptor")
	proto.RegisterType((*Locality)(nil), "cockroach.roachpb.Locality")
	proto.RegisterType((*Tier)(nil), "cockroach.roachpb.Tier")
	proto.RegisterType((*Version)(nil), "cockroach.roachpb.Version")
	proto.RegisterType((*GCHint)(nil), "cockroach.roachpb.GCHint")
}

func init() { proto.RegisterFile("roachpb/metadata.proto", fileDescriptor_ecd7f5cc803f82c8) }

var fileDescriptor_ecd7f5cc803f82c8 = []byte{
	// 2028 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xcd, 0x6f, 0x1b, 0x5b,
	0x15, 0xcf, 0xf8, 0x23, 0xb6, 0x8f, 0xed, 0xc4, 0xb9, 0x7d, 0x6d, 0x8d, 0x79, 0xb5, 0x53, 0xf3,
	0x1e, 0xf4, 0x95, 0x92, 0xb4, 0x79, 0x8a, 0xaa, 0x06, 0x81, 0x14, 0x27, 0x69, 0xea, 0xbe, 0xc6,
	0xce, 0x9b, 0x38, 0x05, 0x75, 0x33, 0xba, 0x9e, 0xb9, 0xb1, 0x87, 0x8e, 0x67, 0xa6, 0x77, 0xae,
	0xd3, 0xf8, 0x2f, 0x00, 0x89, 0x0d, 0x4b, 0x24, 0x36, 0x05, 0xc4, 0x1f, 0xc0, 0x0e, 0x09, 0x89,
	0x75, 0x57, 0xf0, 0x96, 0x4f, 0x42, 0x8a, 0x20, 0xdd, 0x20, 0x96, 0x5d, 0xa1, 0xae, 0xd0, 0xfd,
	0x98, 0x0f, 0x27, 0x7e, 0x90, 0x76, 0x95, 0xeb, 0xdf, 0x39, 0xe7, 0x77, 0xcf, 0xdc, 0xf3, 0x71,
	0xcf, 0x0d, 0x5c, 0xa3, 0x1e, 0x36, 0x87, 0x7e, 0x7f, 0x75, 0x44, 0x18, 0xb6, 0x30, 0xc3, 0x2b,
	0x3e, 0xf5, 0x98, 0x87, 0x96, 0x4c, 0xcf, 0x7c, 0x2e, 0x64, 0x2b, 0x4a, 0xa3, 0x56, 0x1b, 0x33,
	0xdb, 0x59, 0x1d, 0xbb, 0x94, 0x04, 0x9e, 0x73, 0x4c, 0x2c, 0x03, 0x5b, 0x16, 0x95, 0xea, 0xb5,
	0xaa, 0x90, 0x0d, 0x1d, 0x73, 0x95, 0xd9, 0x23, 0x12, 0x30, 0x3c, 0xf2, 0x95, 0xe4, 0x07, 0x42,
	0x82, 0xad, 0x91, 0x1d, 0x04, 0xb6, 0xe7, 0xc6, 0x2b, 0xbf, 0xbf, 0x6a, 0x7b, 0x06, 0x1b, 0x52,
	0x12, 0x0c, 0x3d, 0xc7, 0x52, 0xea, 0x1f, 0x0d, 0xbc, 0x81, 0x27, 0x96, 0xab, 0x7c, 0x25, 0xd1,
	0xe6, 0x16, 0xc0, 0x26, 0x63, 0xd4, 0xee, 0x8f, 0x19, 0x09, 0xd0, 0xf7, 0x21, 0x8b, 0x19, 0xa3,
	0x41, 0x55, 0x5b, 0x4e, 0xdf, 0x2a, 0xb4, 0xae, 0xbe, 0x3d, 0x6d, 0x2c, 0x4d, 0xf0, 0xc8, 0xd9,
	0x68, 0x0a, 0xf8, 0xce, 0x91, 0xe3, 0xbd, 0x6c, 0xea, 0x52, 0x67, 0x23, 0xff, 0xeb, 0x57, 0x8d,
	0xb9, 0x7f, 0xbd, 0x6a, 0x68, 0xcd, 0x9f, 0x6b, 0xb0, 0xa4, 0x13, 0xdf, 0xb1, 0x4d, 0xcc, 0x6c,
	0xcf, 0xed, 0x61, 0x3a, 0x20, 0x0c, 0xdd, 0x83, 0x9c, 0xeb, 0x59, 0xc4, 0xb0, 0xad, 0xaa, 0xb6,
	0xac, 0xdd, 0xca, 0xb6, 0xaa, 0xaf, 0x4f, 0x1b, 0x73, 0x67, 0xa7, 0x8d, 0xf9, 0x8e, 0x67, 0x91,
	0xf6, 0xf6, 0xbb, 0x68, 0xa5, 0xcf, 0x73, 0xc5, 0xb6, 0x85, 0xd6, 0x21, 0x1f, 0x30, 0x8f, 0x0a,
	0x9b, 0x94, 0xb0, 0xa9, 0x29, 0x9b, 0xdc, 0x01, 0xc7, 0x85, 0x51, 0xb8, 0xd4, 0x73, 0x42, 0xb7,
	0x6d, 0x25, 0x3c, 0xf9, 0x7b, 0x2a, 0xf2, 0x64, 0x9b, 0x04, 0x26, 0xb5, 0x7d, 0xe6, 0x51, 0xd4,
	0x3a, 0xef, 0xc9, 0x67, 0xd3, 0x9e, 0xbc, 0x3d, 0x6d, 0x94, 0xe5, 0x67, 0xca, 0xdf, 0xcd, 0x19,
	0xae, 0xed, 0x5e, 0x70, 0xed, 0xce, 0x39, 0xd7, 0xde, 0x9e, 0x36, 0x16, 0x24, 0x8b, 0x02, 0x9a,
	0xb3, 0x9c, 0x45, 0x5f, 0x02, 0x50, 0xe9, 0x21, 0xa7, 0x4a, 0x0b, 0xaa, 0x35, 0x45, 0x55, 0x50,
	0xbe, 0x0b, 0xb2, 0x8a, 0x24, 0x8b, 0x20, 0x4e, 0x17, 0x2b, 0xe8, 0x05, 0xc5, 0xd2, 0xb6, 0xd0,
	0x4f, 0x21, 0xc3, 0x26, 0x3e, 0xa9, 0x66, 0x96, 0xb5, 0x5b, 0x0b, 0x6b, 0xf5, 0x95, 0x0b, 0x19,
	0xb6, 0xa2, 0xcc, 0x7a, 0x13, 0x9f, 0xb4, 0x3e, 0xe1, 0x9b, 0xbd, 0x3d, 0x6d, 0x7c, 0x3c, 0xc5,
	0xcf, 0x45, 0x77, 0xbc, 0x91, 0xcd, 0xc8, 0xc8, 0x67, 0x93, 0xa6, 0x2e, 0x18, 0x37, 0x4a, 0xfc,
	0x64, 0xff, 0xf4, 0xaa, 0xa1, 0x89, 0xd3, 0xfd, 0xa5, 0x06, 0xa5, 0xd0, 0x01, 0x8b, 0xb8, 0x8c,
	0xc7, 0x8b, 0x62, 0x77, 0x10, 0x9d, 0x6c, 0x3a, 0x8e, 0x97, 0xce, 0x71, 0x19, 0x2f, 0xb5, 0xd4,
	0x73, 0x42, 0xb7, 0x6d, 0xa1, 0x6d, 0xc8, 0x29, 0xe7, 0xc5, 0x51, 0x16, 0xd7, 0x3e, 0xf9, 0x66,
	0x97, 0xe3, 0x30, 0xb6, 0x32, 0x9c, 0x5b, 0x0f, 0x4d, 0x9b, 0xaf, 0xd3, 0xb0, 0x28, 0xa8, 0x13,
	0x91, 0xfe, 0x40, 0x87, 0x3e, 0x85, 0x42, 0xc0, 0x30, 0x65, 0xc6, 0x73, 0x32, 0x11, 0x2e, 0x95,
	0x5a, 0xf9, 0x77, 0xa7, 0x8d, 0x8c, 0xfe, 0x05, 0x99, 0xe8, 0x79, 0x21, 0xfa, 0x82, 0x4c, 0xd0,
	0x4d, 0xc8, 0x11, 0xd7, 0x12, 0x4a, 0xe9, 0x73, 0x4a, 0xf3, 0xc4, 0xb5, 0xb8, 0xca, 0x4f, 0x60,
	0xc9, 0x76, 0x19, 0xa1, 0x2e, 0x76, 0x0c, 0xe5, 0x68, 0x50, 0xcd, 0x2c, 0xa7, 0xdf, 0xf3, 0x23,
	0x2b, 0x21, 0x89, 0x52, 0x08, 0xd0, 0x63, 0x58, 0x74, 0xc9, 0x09, 0x33, 0x12, 0xb9, 0x93, 0x15,
	0xb9, 0xd3, 0x54, 0x1f, 0x58, 0xee, 0x90, 0x13, 0x16, 0xa5, 0xc7, 0x74, 0xae, 0x94, 0xdd, 0x84,
	0xcc, 0x42, 0xf7, 0x01, 0x06, 0xc4, 0x25, 0x54, 0x54, 0x6b, 0x75, 0x5e, 0x9c, 0xd3, 0x75, 0x4e,
	0xf3, 0xee, 0xb4, 0x21, 0x8f, 0x74, 0x37, 0x12, 0xeb, 0x09, 0x55, 0xd4, 0x02, 0x08, 0x98, 0x6d,
	0x3e, 0x9f, 0x18, 0x7d, 0x9b, 0x55, 0x73, 0x22, 0x76, 0x37, 0x12, 0x9f, 0xc5, 0x3b, 0xd2, 0xca,
	0xd0, 0x31, 0x57, 0x7a, 0x61, 0xaf, 0x52, 0xdf, 0x53, 0x90, 0x66, 0x2d, 0x9b, 0x4d, 0xa7, 0xd4,
	0xe3, 0x4c, 0x3e, 0x5f, 0x29, 0x34, 0xff, 0xa0, 0x41, 0x71, 0x9f, 0x50, 0x93, 0xb8, 0xcc, 0x76,
	0x48, 0x80, 0xae, 0x41, 0xda, 0xbf, 0x77, 0x57, 0x44, 0x50, 0x53, 0x0c, 0x1c, 0x10, 0xf8, 0xda,
	0xba, 0x88, 0x50, 0x8c, 0xaf, 0xad, 0x0b, 0x7c, 0xfd, 0xae, 0x08, 0x4a, 0x8c, 0xaf, 0x4b, 0xfd,
	0xfb, 0xeb, 0xa2, 0x2e, 0x62, 0xfc, 0xbe, 0xd4, 0x7f, 0x70, 0x57, 0x1c, 0x60, 0x8c, 0x3f, 0xb8,
	0x8b, 0xaa, 0x90, 0xf1, 0xf7, 0xf0, 0x89, 0x38, 0x92, 0x50, 0x20, 0x90, 0x8d, 0x0c, 0xf7, 0xba,
	0xf9, 0xbb, 0x79, 0x28, 0x8b, 0x82, 0xde, 0xc2, 0x3e, 0x36, 0x6d, 0x36, 0x41, 0xcb, 0x90, 0x37,
	0xd5, 0x5a, 0x25, 0x9c, 0xb4, 0x8a, 0x50, 0xd4, 0x84, 0x02, 0x3e, 0xc6, 0xb6, 0x83, 0xfb, 0x0e,
	0x11, 0x9e, 0x87, 0x2a, 0x31, 0xcc, 0xf7, 0x1d, 0x07, 0xc4, 0xaa, 0xe6, 0x13, 0x62, 0x81, 0xa0,
	0xcf, 0xa0, 0xec, 0x78, 0x03, 0xdb, 0xc4, 0x8e, 0xd1, 0x9f, 0x30, 0x12, 0x54, 0x0b, 0x09, 0x95,
	0x92, 0x12, 0xb5, 0xb8, 0x04, 0x7d, 0x0a, 0x45, 0x99, 0xfb, 0xa6, 0x37, 0x76, 0x99, 0xea, 0x2c,
	0x52, 0x11, 0x84, 0x60, 0x8b, 0xe3, 0x5c, 0xcd, 0x21, 0x38, 0x08, 0xd5, 0x32, 0x49, 0x35, 0x21,
	0x90, 0x6a, 0x6b, 0x80, 0x5e, 0x8c, 0x09, 0xb5, 0x49, 0x60, 0xf8, 0x84, 0x1a, 0x01, 0x31, 0x3d,
	0xd7, 0xaa, 0x42, 0xe2, 0x60, 0x2a, 0x4a, 0xbe, 0x4f, 0xe8, 0x81, 0x90, 0xa2, 0xbb, 0xb0, 0xf4,
	0x92, 0xda, 0x6c, 0xda, 0x24, 0x79, 0xc8, 0x8b, 0x52, 0x1c, 0x5b, 0x6c, 0xc0, 0x82, 0xe9, 0x8f,
	0x93, 0xea, 0x0b, 0x42, 0xfd, 0x23, 0x95, 0xd4, 0xa5, 0xad, 0xfd, 0xc3, 0x48, 0x5b, 0x2f, 0x99,
	0xfe, 0x38, 0xb6, 0xb5, 0xa1, 0x94, 0xbc, 0xe6, 0xaa, 0x65, 0x91, 0x8e, 0xf7, 0xce, 0xa7, 0x63,
	0x74, 0x2d, 0xae, 0x24, 0x2e, 0xc8, 0x95, 0x76, 0xb7, 0x17, 0x1a, 0xb6, 0xae, 0xa8, 0xcd, 0x8a,
	0x09, 0x50, 0x2f, 0xda, 0x5e, 0xf4, 0x03, 0x05, 0x50, 0x49, 0x6e, 0x65, 0x8c, 0xf0, 0x49, 0x75,
	0xf1, 0x43, 0xb7, 0xbb, 0xa6, 0xb6, 0x5b, 0x48, 0x80, 0x7b, 0xf8, 0x44, 0x5f, 0x48, 0xec, 0xb8,
	0x87, 0x4f, 0xd0, 0x3e, 0x2c, 0x89, 0x90, 0x8b, 0xd3, 0x09, 0xfb, 0xe5, 0xbc, 0xd8, 0x75, 0x56,
	0x8b, 0x4f, 0xd4, 0x4f, 0x78, 0xda, 0xc2, 0x7c, 0x9f, 0x50, 0x55, 0xf9, 0x48, 0x07, 0x94, 0x88,
	0x4f, 0x48, 0x99, 0x7b, 0x0f, 0xca, 0x4a, 0x14, 0x40, 0xc5, 0x29, 0x0b, 0xe3, 0x71, 0x26, 0x5f,
	0xac, 0x94, 0x1e, 0x67, 0xf2, 0xa5, 0x4a, 0xb9, 0xf9, 0x1f, 0x0d, 0x16, 0x45, 0x91, 0xec, 0x53,
	0xcf, 0x27, 0x94, 0xd9, 0x24, 0xe0, 0x45, 0x40, 0x5c, 0x93, 0x4e, 0x7c, 0x46, 0x64, 0x63, 0xce,
	0x87, 0x45, 0x10, 0xc1, 0xe8, 0x26, 0x14, 0x28, 0xc1, 0x96, 0xe1, 0xb9, 0x8e, 0x6c, 0xc2, 0xa1,
	0x4e, 0x9e, 0xc3, 0x5d, 0xd7, 0x99, 0xf0, 0xba, 0xb5, 0x6c, 0x2a, 0x72, 0xb6, 0x10, 0xd6, 0xad,
	0x65, 0x53, 0x74, 0x1b, 0x96, 0x5e, 0x62, 0xc7, 0x38, 0xc2, 0xb6, 0xe3, 0x1d, 0x13, 0x6a, 0xf8,
	0x98, 0x0d, 0x45, 0xe2, 0x15, 0xf4, 0xc5, 0x97, 0xd8, 0x79, 0xa8, 0xf0, 0x7d, 0xcc, 0x86, 0xe8,
	0x19, 0x5c, 0x3d, 0xb2, 0x1d, 0x62, 0xc8, 0xdb, 0xdc, 0x8f, 0x7c, 0x14, 0x05, 0x53, 0x5c, 0xfb,
	0xee, 0x8c, 0x73, 0x78, 0x68, 0x3b, 0xe4, 0xdc, 0x17, 0xe9, 0x57, 0x8e, 0x2e, 0x82, 0xcd, 0xbf,
	0x69, 0x70, 0x65, 0x86, 0xb2, 0xe8, 0x2b, 0xdc, 0x25, 0x2d, 0xe1, 0xb8, 0x40, 0xd0, 0x0d, 0xc8,
	0x1d, 0x05, 0x86, 0xb8, 0xbd, 0x53, 0x09, 0xe1, 0xfc, 0x51, 0xc0, 0x2f, 0x64, 0xf4, 0x3d, 0x28,
	0xf5, 0x1d, 0xcf, 0x7c, 0x6e, 0x58, 0xe4, 0xd8, 0x36, 0x89, 0xf0, 0x31, 0xd4, 0x29, 0x0a, 0xc9,
	0xb6, 0x10, 0xf0, 0xaa, 0x1e, 0xf1, 0xba, 0x35, 0x7c, 0xcf, 0x56, 0x55, 0x1d, 0xea, 0x81, 0x10,
	0xec, 0x73, 0x9c, 0xb7, 0x13, 0xa9, 0xe6, 0xf9, 0xbc, 0xa1, 0x07, 0xf2, 0x90, 0xc2, 0x76, 0x22,
	0x44, 0x5d, 0x29, 0x51, 0x1d, 0xef, 0x2f, 0x59, 0x58, 0xe0, 0x93, 0x50, 0xe2, 0x8e, 0xfd, 0x80,
	0xb9, 0xee, 0xc7, 0x90, 0xe3, 0x23, 0x2d, 0x09, 0x02, 0x75, 0xe1, 0xd7, 0xcf, 0x97, 0xcd, 0x61,
	0x34, 0xfc, 0x6e, 0x5a, 0x56, 0x74, 0xd5, 0x2b, 0x23, 0xf4, 0x20, 0x9c, 0x4b, 0xd3, 0x17, 0xae,
	0x9c, 0x30, 0x46, 0xf1, 0x14, 0xab, 0x8c, 0xa5, 0x05, 0xfa, 0x11, 0xe4, 0x1d, 0xcf, 0xc4, 0x0e,
	0x6f, 0xd0, 0x19, 0x61, 0xfd, 0xed, 0x19, 0xd6, 0x4f, 0x94, 0x4a, 0x98, 0x71, 0xa1, 0x09, 0x7a,
	0x08, 0xe5, 0x03, 0x42, 0x8f, 0x09, 0x7d, 0x4a, 0x28, 0xaf, 0x65, 0x71, 0x60, 0xc5, 0xb5, 0xda,
	0x0c, 0x0e, 0xa5, 0xa1, 0x28, 0xa6, 0xcd, 0x78, 0x72, 0xf7, 0xc7, 0xb6, 0x63, 0x19, 0x0c, 0x0f,
	0x44, 0x11, 0x87, 0x87, 0x9e, 0x17, 0x70, 0x0f, 0x0f, 0xd0, 0x77, 0xf8, 0xe5, 0x8a, 0x29, 0xe3,
	0xf3, 0xbf, 0xbc, 0x5c, 0xd3, 0xf1, 0xed, 0x29, 0xf0, 0x4d, 0x86, 0x0e, 0xa0, 0x12, 0xfa, 0x66,
	0x84, 0x47, 0x9a, 0x17, 0xe3, 0x45, 0xf3, 0x7f, 0x7c, 0xd6, 0xa6, 0xd4, 0x0c, 0xfb, 0x82, 0x33,
	0x0d, 0xf3, 0x2c, 0x33, 0x9d, 0x71, 0xc0, 0x08, 0x35, 0x5c, 0x3c, 0x22, 0xe2, 0x8e, 0x89, 0xb2,
	0x4c, 0x49, 0x3a, 0x78, 0x44, 0xd0, 0x01, 0x14, 0x83, 0x17, 0x4e, 0xb4, 0x31, 0x5c, 0x2a, 0x96,
	0x48, 0xa5, 0x07, 0x1c, 0x7c, 0xf9, 0x44, 0xed, 0xa8, 0x43, 0xf0, 0xc2, 0x09, 0x77, 0x7f, 0x0a,
	0xa5, 0x21, 0x63, 0x7e, 0xc4, 0x5a, 0xbc, 0x14, 0x6b, 0xd4, 0xb4, 0x1f, 0xf5, 0x7a, 0xfb, 0x21,
	0x6d, 0x91, 0x13, 0xa9, 0x1f, 0x1b, 0x19, 0x31, 0xb3, 0xfe, 0x46, 0x83, 0xc5, 0x73, 0xc7, 0x90,
	0x4c, 0x47, 0xed, 0x43, 0xd2, 0xb1, 0xc5, 0x2f, 0x65, 0x15, 0x04, 0x66, 0x13, 0xaa, 0x92, 0xfa,
	0xfa, 0x8c, 0x08, 0xf4, 0x6c, 0x42, 0xe3, 0xdb, 0x5a, 0xda, 0x70, 0x4c, 0x79, 0xf7, 0xd7, 0x94,
	0xea, 0x95, 0xd3, 0x33, 0x6c, 0xf4, 0xd2, 0xd0, 0x2e, 0xfd, 0x08, 0x8a, 0x6b, 0x24, 0xf5, 0xde,
	0x35, 0xf2, 0x43, 0xc8, 0xf0, 0x42, 0x55, 0xd5, 0x75, 0x73, 0x86, 0xe5, 0x74, 0x0b, 0x08, 0x3b,
	0x18, 0x37, 0x42, 0xad, 0xc4, 0x04, 0x24, 0x0b, 0x6c, 0x79, 0x06, 0xc1, 0xd4, 0xd4, 0x74, 0x61,
	0x46, 0x7a, 0x04, 0x90, 0x68, 0xc4, 0xb2, 0xc4, 0x9a, 0xdf, 0xc4, 0x12, 0xf7, 0xd5, 0xb0, 0xc1,
	0xc5, 0xb6, 0xcd, 0x36, 0xe4, 0xc3, 0x68, 0xa3, 0xcf, 0x21, 0xcb, 0xa3, 0x23, 0x5f, 0xb3, 0xff,
	0x37, 0x3c, 0x52, 0x37, 0xf1, 0x96, 0xdc, 0x86, 0x0c, 0x17, 0xf3, 0x4b, 0x87, 0x4f, 0xfc, 0xc9,
	0xde, 0xcd, 0x01, 0x54, 0x83, 0xec, 0x31, 0x76, 0xc6, 0xd3, 0x8d, 0x5b, 0x42, 0x09, 0x96, 0x3f,
	0x6b, 0x90, 0x0b, 0x9b, 0xc0, 0xe7, 0x50, 0x18, 0xe1, 0x9f, 0x79, 0xd4, 0x38, 0xc6, 0x8e, 0x0a,
	0x6d, 0x38, 0x0c, 0x64, 0xf7, 0xb8, 0xe0, 0xdf, 0xa7, 0x8d, 0xac, 0xd0, 0xd0, 0xf3, 0xe2, 0xcf,
	0x53, 0xec, 0x08, 0x23, 0xdb, 0x55, 0x46, 0xa9, 0x73, 0x46, 0x5c, 0x20, 0x8c, 0xf8, 0x42, 0xcf,
	0x8b, 0x3f, 0xdc, 0xa8, 0x06, 0x59, 0x1f, 0x33, 0x73, 0x38, 0x35, 0x05, 0x4a, 0x88, 0x8f, 0xac,
	0xe1, 0xeb, 0x62, 0x6a, 0xfa, 0x8b, 0xd0, 0x84, 0xf7, 0x7f, 0x4c, 0xc1, 0xfc, 0xee, 0xd6, 0x23,
	0x7e, 0x75, 0x1c, 0xc1, 0x0d, 0x07, 0x33, 0x12, 0x30, 0x43, 0x4e, 0x99, 0x16, 0x71, 0x08, 0x23,
	0x46, 0xf4, 0x5f, 0x09, 0x55, 0x4a, 0x97, 0x7a, 0x0e, 0xd4, 0x24, 0x93, 0x7a, 0xbd, 0x71, 0x9e,
	0x48, 0x03, 0x1d, 0x42, 0x69, 0x60, 0x26, 0x68, 0x53, 0x97, 0xa1, 0x8d, 0xba, 0xc1, 0xee, 0x56,
	0x04, 0xea, 0xc5, 0x81, 0x19, 0xd3, 0xf6, 0x61, 0x29, 0x49, 0x6b, 0xf0, 0x17, 0xd1, 0x8c, 0xeb,
	0x64, 0x06, 0xf7, 0x75, 0xc5, 0xbd, 0x98, 0xe0, 0x16, 0x6f, 0xad, 0xc5, 0x04, 0x3f, 0x07, 0x64,
	0x4d, 0xdf, 0xfe, 0xad, 0x06, 0xc5, 0xc4, 0xa3, 0x1a, 0x2d, 0x00, 0x3c, 0xed, 0xf6, 0x76, 0x74,
	0xe3, 0xe1, 0xe1, 0x93, 0x27, 0x95, 0x39, 0x84, 0x60, 0x41, 0xfe, 0x6e, 0x77, 0xb6, 0xba, 0x7b,
	0xed, 0xce, 0x6e, 0x25, 0x15, 0x63, 0xdd, 0xc3, 0xde, 0x6e, 0x97, 0x63, 0x69, 0x54, 0x83, 0x6b,
	0x12, 0xdb, 0xde, 0xd9, 0xeb, 0xf6, 0xda, 0x9d, 0x5d, 0xe3, 0xc9, 0xce, 0xa6, 0xde, 0xd9, 0xd1,
	0x2b, 0x19, 0x54, 0x84, 0x5c, 0xf8, 0x43, 0x43, 0x65, 0x28, 0x74, 0xba, 0x1d, 0x43, 0x28, 0x57,
	0xb2, 0xe8, 0x63, 0xa8, 0x9e, 0xb3, 0x8b, 0xa5, 0xf3, 0xb5, 0xcc, 0x2f, 0x7e, 0x5f, 0x9f, 0xbb,
	0xed, 0xc3, 0xb5, 0xb0, 0x4c, 0xb6, 0xbc, 0x91, 0x8f, 0xa9, 0x1d, 0x78, 0xae, 0xf0, 0xb6, 0x0c,
	0x85, 0xc3, 0xce, 0xf6, 0xce, 0xc3, 0x76, 0x67, 0x67, 0xbb, 0x32, 0x87, 0x2a, 0x50, 0xda, 0xd2,
	0xbb, 0x07, 0x07, 0x86, 0xbe, 0xb3, 0xdb, 0xee, 0x76, 0x2a, 0x1a, 0x77, 0xeb, 0x60, 0x73, 0x6f,
	0x47, 0x01, 0x86, 0x94, 0x3e, 0xeb, 0x76, 0x76, 0x2a, 0x29, 0xf4, 0x2d, 0xb8, 0x9a, 0x94, 0x89,
	0xb5, 0x10, 0xa5, 0x5b, 0x9d, 0xd7, 0xff, 0xac, 0xcf, 0xbd, 0x3e, 0xab, 0x6b, 0x5f, 0x9d, 0xd5,
	0xb5, 0xaf, 0xcf, 0xea, 0xda, 0x3f, 0xce, 0xea, 0xda, 0xaf, 0xde, 0xd4, 0xe7, 0xbe, 0x7a, 0x53,
	0x9f, 0xfb, 0xfa, 0x4d, 0x7d, 0xee, 0xd9, 0x9d, 0x81, 0xcd, 0x86, 0xe3, 0xfe, 0x8a, 0xe9, 0x8d,
	0x56, 0xa3, 0x80, 0x58, 0xfd, 0x78, 0xbd, 0xea, 0x3f, 0x1f, 0xac, 0xaa, 0xca, 0xfd, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x8b, 0xb0, 0x44, 0xcc, 0x5f, 0x13, 0x00, 0x00,
}

func (this *Attributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Attributes)
	if !ok {
		that2, ok := that.(Attributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Attrs) != len(that1.Attrs) {
		return false
	}
	for i := range this.Attrs {
		if this.Attrs[i] != that1.Attrs[i] {
			return false
		}
	}
	return true
}
func (this *ReplicationTarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTarget)
	if !ok {
		that2, ok := that.(ReplicationTarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.StoreID != that1.StoreID {
		return false
	}
	return true
}
func (this *ReplicaDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaDescriptor)
	if !ok {
		that2, ok := that.(ReplicaDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.StoreID != that1.StoreID {
		return false
	}
	if this.ReplicaID != that1.ReplicaID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *RangeDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RangeDescriptor)
	if !ok {
		that2, ok := that.(RangeDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RangeID != that1.RangeID {
		return false
	}
	if !bytes.Equal(this.StartKey, that1.StartKey) {
		return false
	}
	if !bytes.Equal(this.EndKey, that1.EndKey) {
		return false
	}
	if len(this.InternalReplicas) != len(that1.InternalReplicas) {
		return false
	}
	for i := range this.InternalReplicas {
		if !this.InternalReplicas[i].Equal(&that1.InternalReplicas[i]) {
			return false
		}
	}
	if this.NextReplicaID != that1.NextReplicaID {
		return false
	}
	if this.Generation != that1.Generation {
		return false
	}
	if !this.StickyBit.Equal(&that1.StickyBit) {
		return false
	}
	return true
}
func (this *NodeDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeDescriptor)
	if !ok {
		that2, ok := that.(NodeDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if !this.Address.Equal(&that1.Address) {
		return false
	}
	if !this.Attrs.Equal(&that1.Attrs) {
		return false
	}
	if !this.Locality.Equal(&that1.Locality) {
		return false
	}
	if !this.ServerVersion.Equal(&that1.ServerVersion) {
		return false
	}
	if this.BuildTag != that1.BuildTag {
		return false
	}
	if this.StartedAt != that1.StartedAt {
		return false
	}
	if len(this.LocalityAddress) != len(that1.LocalityAddress) {
		return false
	}
	for i := range this.LocalityAddress {
		if !this.LocalityAddress[i].Equal(&that1.LocalityAddress[i]) {
			return false
		}
	}
	if this.ClusterName != that1.ClusterName {
		return false
	}
	if !this.SQLAddress.Equal(&that1.SQLAddress) {
		return false
	}
	if !this.HTTPAddress.Equal(&that1.HTTPAddress) {
		return false
	}
	return true
}
func (this *LocalityAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalityAddress)
	if !ok {
		that2, ok := that.(LocalityAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Address.Equal(&that1.Address) {
		return false
	}
	if !this.LocalityTier.Equal(&that1.LocalityTier) {
		return false
	}
	return true
}
func (this *Locality) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Locality)
	if !ok {
		that2, ok := that.(Locality)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tiers) != len(that1.Tiers) {
		return false
	}
	for i := range this.Tiers {
		if !this.Tiers[i].Equal(&that1.Tiers[i]) {
			return false
		}
	}
	return true
}
func (this *Tier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tier)
	if !ok {
		that2, ok := that.(Tier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Version) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Version)
	if !ok {
		that2, ok := that.(Version)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Major != that1.Major {
		return false
	}
	if this.Minor != that1.Minor {
		return false
	}
	if this.Patch != that1.Patch {
		return false
	}
	if this.Internal != that1.Internal {
		return false
	}
	return true
}
func (this *GCHint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GCHint)
	if !ok {
		that2, ok := that.(GCHint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LatestRangeDeleteTimestamp.Equal(&that1.LatestRangeDeleteTimestamp) {
		return false
	}
	if !this.GCTimestamp.Equal(&that1.GCTimestamp) {
		return false
	}
	if !this.GCTimestampNext.Equal(&that1.GCTimestampNext) {
		return false
	}
	return true
}
func (m *Attributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attrs) > 0 {
		for iNdEx := len(m.Attrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Attrs[iNdEx])
			copy(dAtA[i:], m.Attrs[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.Attrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintMetadata(dAtA, i, uint64(m.StoreID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintMetadata(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ReplicaDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintMetadata(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x20
	i = encodeVarintMetadata(dAtA, i, uint64(m.ReplicaID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintMetadata(dAtA, i, uint64(m.StoreID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintMetadata(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ReplicaIdent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaIdent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaIdent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Replica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i = encodeVarintMetadata(dAtA, i, uint64(m.RangeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RangeDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StickyBit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	i = encodeVarintMetadata(dAtA, i, uint64(m.Generation))
	i--
	dAtA[i] = 0x30
	i = encodeVarintMetadata(dAtA, i, uint64(m.NextReplicaID))
	i--
	dAtA[i] = 0x28
	if len(m.InternalReplicas) > 0 {
		for iNdEx := len(m.InternalReplicas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InternalReplicas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.EndKey != nil {
		i -= len(m.EndKey)
		copy(dAtA[i:], m.EndKey)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.EndKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StartKey != nil {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintMetadata(dAtA, i, uint64(m.RangeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Percentiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Percentiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Percentiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PMax))))
	i--
	dAtA[i] = 0x31
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.P90))))
	i--
	dAtA[i] = 0x29
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.P75))))
	i--
	dAtA[i] = 0x21
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.P50))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.P25))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.P10))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *StoreCapacity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreCapacity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreCapacity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IOThresholdMax.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CPUPerSecond))))
	i--
	dAtA[i] = 0x71
	{
		size, err := m.IOThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.QueriesPerSecond))))
	i--
	dAtA[i] = 0x51
	i = encodeVarintMetadata(dAtA, i, uint64(m.LogicalBytes))
	i--
	dAtA[i] = 0x48
	i = encodeVarintMetadata(dAtA, i, uint64(m.Used))
	i--
	dAtA[i] = 0x40
	{
		size, err := m.WritesPerReplica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.BytesPerReplica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.WritesPerSecond))))
	i--
	dAtA[i] = 0x29
	i = encodeVarintMetadata(dAtA, i, uint64(m.LeaseCount))
	i--
	dAtA[i] = 0x20
	i = encodeVarintMetadata(dAtA, i, uint64(m.RangeCount))
	i--
	dAtA[i] = 0x18
	i = encodeVarintMetadata(dAtA, i, uint64(m.Available))
	i--
	dAtA[i] = 0x10
	i = encodeVarintMetadata(dAtA, i, uint64(m.Capacity))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *StoreProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WalFailoverPath != nil {
		i -= len(*m.WalFailoverPath)
		copy(dAtA[i:], *m.WalFailoverPath)
		i = encodeVarintMetadata(dAtA, i, uint64(len(*m.WalFailoverPath)))
		i--
		dAtA[i] = 0x2a
	}
	i -= len(m.Dir)
	copy(dAtA[i:], m.Dir)
	i = encodeVarintMetadata(dAtA, i, uint64(len(m.Dir)))
	i--
	dAtA[i] = 0x22
	if m.FileStoreProperties != nil {
		{
			size, err := m.FileStoreProperties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i--
	if m.ReadOnly {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i--
	if m.Encrypted {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FileStoreProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileStoreProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileStoreProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.MountOptions)
	copy(dAtA[i:], m.MountOptions)
	i = encodeVarintMetadata(dAtA, i, uint64(len(m.MountOptions)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.MountPoint)
	copy(dAtA[i:], m.MountPoint)
	i = encodeVarintMetadata(dAtA, i, uint64(len(m.MountPoint)))
	i--
	dAtA[i] = 0x22
	i -= len(m.BlockDevice)
	copy(dAtA[i:], m.BlockDevice)
	i = encodeVarintMetadata(dAtA, i, uint64(len(m.BlockDevice)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.FsType)
	copy(dAtA[i:], m.FsType)
	i = encodeVarintMetadata(dAtA, i, uint64(len(m.FsType)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintMetadata(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HTTPAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.SQLAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	i -= len(m.ClusterName)
	copy(dAtA[i:], m.ClusterName)
	i = encodeVarintMetadata(dAtA, i, uint64(len(m.ClusterName)))
	i--
	dAtA[i] = 0x4a
	if len(m.LocalityAddress) > 0 {
		for iNdEx := len(m.LocalityAddress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LocalityAddress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	i = encodeVarintMetadata(dAtA, i, uint64(m.StartedAt))
	i--
	dAtA[i] = 0x38
	i -= len(m.BuildTag)
	copy(dAtA[i:], m.BuildTag)
	i = encodeVarintMetadata(dAtA, i, uint64(len(m.BuildTag)))
	i--
	dAtA[i] = 0x32
	{
		size, err := m.ServerVersion.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Locality.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Attrs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i = encodeVarintMetadata(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *LocalityAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalityAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalityAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LocalityTier.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StoreDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Properties.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Capacity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Attrs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i = encodeVarintMetadata(dAtA, i, uint64(m.StoreID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Locality) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Locality) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Locality) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tiers) > 0 {
		for iNdEx := len(m.Tiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Tier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Value)
	copy(dAtA[i:], m.Value)
	i = encodeVarintMetadata(dAtA, i, uint64(len(m.Value)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Key)
	copy(dAtA[i:], m.Key)
	i = encodeVarintMetadata(dAtA, i, uint64(len(m.Key)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Version) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintMetadata(dAtA, i, uint64(m.Internal))
	i--
	dAtA[i] = 0x20
	i = encodeVarintMetadata(dAtA, i, uint64(m.Patch))
	i--
	dAtA[i] = 0x18
	i = encodeVarintMetadata(dAtA, i, uint64(m.Minor))
	i--
	dAtA[i] = 0x10
	i = encodeVarintMetadata(dAtA, i, uint64(m.Major))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GCHint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GCHint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GCHint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GCTimestampNext.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.GCTimestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.LatestRangeDeleteTimestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedReplicaDescriptor(r randyMetadata, easy bool) *ReplicaDescriptor {
	this := &ReplicaDescriptor{}
	this.NodeID = NodeID(r.Int31())
	if r.Intn(2) == 0 {
		this.NodeID *= -1
	}
	this.StoreID = StoreID(r.Int31())
	if r.Intn(2) == 0 {
		this.StoreID *= -1
	}
	this.ReplicaID = ReplicaID(r.Int31())
	if r.Intn(2) == 0 {
		this.ReplicaID *= -1
	}
	this.Type = ReplicaType([]int32{0, 2, 3, 4, 1, 5, 6}[r.Intn(7)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRangeDescriptor(r randyMetadata, easy bool) *RangeDescriptor {
	this := &RangeDescriptor{}
	this.RangeID = RangeID(r.Int63())
	if r.Intn(2) == 0 {
		this.RangeID *= -1
	}
	if r.Intn(5) != 0 {
		v1 := r.Intn(100)
		this.StartKey = make(RKey, v1)
		for i := 0; i < v1; i++ {
			this.StartKey[i] = byte(r.Intn(256))
		}
	}
	if r.Intn(5) != 0 {
		v2 := r.Intn(100)
		this.EndKey = make(RKey, v2)
		for i := 0; i < v2; i++ {
			this.EndKey[i] = byte(r.Intn(256))
		}
	}
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.InternalReplicas = make([]ReplicaDescriptor, v3)
		for i := 0; i < v3; i++ {
			v4 := NewPopulatedReplicaDescriptor(r, easy)
			this.InternalReplicas[i] = *v4
		}
	}
	this.NextReplicaID = ReplicaID(r.Int31())
	if r.Intn(2) == 0 {
		this.NextReplicaID *= -1
	}
	this.Generation = RangeGeneration(r.Int63())
	if r.Intn(2) == 0 {
		this.Generation *= -1
	}
	v5 := hlc.NewPopulatedTimestamp(r, easy)
	this.StickyBit = *v5
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMetadata interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMetadata(r randyMetadata) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMetadata(r randyMetadata) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneMetadata(r)
	}
	return string(tmps)
}
func randUnrecognizedMetadata(r randyMetadata, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMetadata(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMetadata(dAtA []byte, r randyMetadata, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMetadata(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateMetadata(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateMetadata(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMetadata(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMetadata(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMetadata(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMetadata(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Attributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attrs) > 0 {
		for _, s := range m.Attrs {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *ReplicationTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMetadata(uint64(m.NodeID))
	n += 1 + sovMetadata(uint64(m.StoreID))
	return n
}

func (m *ReplicaDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMetadata(uint64(m.NodeID))
	n += 1 + sovMetadata(uint64(m.StoreID))
	n += 1 + sovMetadata(uint64(m.ReplicaID))
	n += 1 + sovMetadata(uint64(m.Type))
	return n
}

func (m *ReplicaIdent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMetadata(uint64(m.RangeID))
	l = m.Replica.Size()
	n += 1 + l + sovMetadata(uint64(l))
	return n
}

func (m *RangeDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMetadata(uint64(m.RangeID))
	if m.StartKey != nil {
		l = len(m.StartKey)
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.EndKey != nil {
		l = len(m.EndKey)
		n += 1 + l + sovMetadata(uint64(l))
	}
	if len(m.InternalReplicas) > 0 {
		for _, e := range m.InternalReplicas {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	n += 1 + sovMetadata(uint64(m.NextReplicaID))
	n += 1 + sovMetadata(uint64(m.Generation))
	l = m.StickyBit.Size()
	n += 1 + l + sovMetadata(uint64(l))
	return n
}

func (m *Percentiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	return n
}

func (m *StoreCapacity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMetadata(uint64(m.Capacity))
	n += 1 + sovMetadata(uint64(m.Available))
	n += 1 + sovMetadata(uint64(m.RangeCount))
	n += 1 + sovMetadata(uint64(m.LeaseCount))
	n += 9
	l = m.BytesPerReplica.Size()
	n += 1 + l + sovMetadata(uint64(l))
	l = m.WritesPerReplica.Size()
	n += 1 + l + sovMetadata(uint64(l))
	n += 1 + sovMetadata(uint64(m.Used))
	n += 1 + sovMetadata(uint64(m.LogicalBytes))
	n += 9
	l = m.IOThreshold.Size()
	n += 1 + l + sovMetadata(uint64(l))
	n += 9
	l = m.IOThresholdMax.Size()
	n += 1 + l + sovMetadata(uint64(l))
	return n
}

func (m *StoreProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 2
	if m.FileStoreProperties != nil {
		l = m.FileStoreProperties.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Dir)
	n += 1 + l + sovMetadata(uint64(l))
	if m.WalFailoverPath != nil {
		l = len(*m.WalFailoverPath)
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *FileStoreProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	n += 1 + l + sovMetadata(uint64(l))
	l = len(m.FsType)
	n += 1 + l + sovMetadata(uint64(l))
	l = len(m.BlockDevice)
	n += 1 + l + sovMetadata(uint64(l))
	l = len(m.MountPoint)
	n += 1 + l + sovMetadata(uint64(l))
	l = len(m.MountOptions)
	n += 1 + l + sovMetadata(uint64(l))
	return n
}

func (m *NodeDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMetadata(uint64(m.NodeID))
	l = m.Address.Size()
	n += 1 + l + sovMetadata(uint64(l))
	l = m.Attrs.Size()
	n += 1 + l + sovMetadata(uint64(l))
	l = m.Locality.Size()
	n += 1 + l + sovMetadata(uint64(l))
	l = m.ServerVersion.Size()
	n += 1 + l + sovMetadata(uint64(l))
	l = len(m.BuildTag)
	n += 1 + l + sovMetadata(uint64(l))
	n += 1 + sovMetadata(uint64(m.StartedAt))
	if len(m.LocalityAddress) > 0 {
		for _, e := range m.LocalityAddress {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	l = len(m.ClusterName)
	n += 1 + l + sovMetadata(uint64(l))
	l = m.SQLAddress.Size()
	n += 1 + l + sovMetadata(uint64(l))
	l = m.HTTPAddress.Size()
	n += 1 + l + sovMetadata(uint64(l))
	return n
}

func (m *LocalityAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Address.Size()
	n += 1 + l + sovMetadata(uint64(l))
	l = m.LocalityTier.Size()
	n += 1 + l + sovMetadata(uint64(l))
	return n
}

func (m *StoreDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMetadata(uint64(m.StoreID))
	l = m.Attrs.Size()
	n += 1 + l + sovMetadata(uint64(l))
	l = m.Node.Size()
	n += 1 + l + sovMetadata(uint64(l))
	l = m.Capacity.Size()
	n += 1 + l + sovMetadata(uint64(l))
	l = m.Properties.Size()
	n += 1 + l + sovMetadata(uint64(l))
	return n
}

func (m *Locality) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tiers) > 0 {
		for _, e := range m.Tiers {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *Tier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovMetadata(uint64(l))
	l = len(m.Value)
	n += 1 + l + sovMetadata(uint64(l))
	return n
}

func (m *Version) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMetadata(uint64(m.Major))
	n += 1 + sovMetadata(uint64(m.Minor))
	n += 1 + sovMetadata(uint64(m.Patch))
	n += 1 + sovMetadata(uint64(m.Internal))
	return n
}

func (m *GCHint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LatestRangeDeleteTimestamp.Size()
	n += 1 + l + sovMetadata(uint64(l))
	l = m.GCTimestamp.Size()
	n += 1 + l + sovMetadata(uint64(l))
	l = m.GCTimestampNext.Size()
	n += 1 + l + sovMetadata(uint64(l))
	return n
}

func sovMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Attributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attrs = append(m.Attrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= StoreID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= StoreID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaID |= ReplicaID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ReplicaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaIdent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaIdent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaIdent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Replica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalReplicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalReplicas = append(m.InternalReplicas, ReplicaDescriptor{})
			if err := m.InternalReplicas[len(m.InternalReplicas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextReplicaID", wireType)
			}
			m.NextReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextReplicaID |= ReplicaID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generation", wireType)
			}
			m.Generation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Generation |= RangeGeneration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickyBit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StickyBit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Percentiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Percentiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Percentiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field P10", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.P10 = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field P25", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.P25 = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field P50", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.P50 = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field P75", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.P75 = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field P90", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.P90 = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PMax = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreCapacity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreCapacity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreCapacity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			m.Available = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Available |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeCount", wireType)
			}
			m.RangeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseCount", wireType)
			}
			m.LeaseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WritesPerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.WritesPerSecond = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesPerReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BytesPerReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WritesPerReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WritesPerReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			m.Used = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Used |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalBytes", wireType)
			}
			m.LogicalBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogicalBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueriesPerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.QueriesPerSecond = float64(math.Float64frombits(v))
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IOThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IOThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUPerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CPUPerSecond = float64(math.Float64frombits(v))
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IOThresholdMax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IOThresholdMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encrypted = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadOnly = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileStoreProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileStoreProperties == nil {
				m.FileStoreProperties = &FileStoreProperties{}
			}
			if err := m.FileStoreProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalFailoverPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WalFailoverPath = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileStoreProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileStoreProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileStoreProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FsType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FsType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDevice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockDevice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MountPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MountOptions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Attrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locality.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServerVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			m.StartedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalityAddress = append(m.LocalityAddress, LocalityAddress{})
			if err := m.LocalityAddress[len(m.LocalityAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQLAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SQLAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTPAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HTTPAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalityAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalityAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalityAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityTier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocalityTier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= StoreID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Attrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Capacity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Properties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Locality) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Locality: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Locality: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiers = append(m.Tiers, Tier{})
			if err := m.Tiers[len(m.Tiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minor", wireType)
			}
			m.Minor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patch", wireType)
			}
			m.Patch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Patch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			m.Internal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Internal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GCHint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCHint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCHint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestRangeDeleteTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestRangeDeleteTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GCTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCTimestampNext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GCTimestampNext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadata = fmt.Errorf("proto: unexpected end of group")
)

