// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ccl/utilccl/licenseccl/license.proto

package licenseccl

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type License_Type int32

const (
	License_NonCommercial License_Type = 0
	License_Enterprise    License_Type = 1
	License_Evaluation    License_Type = 2
)

var License_Type_name = map[int32]string{
	0: "NonCommercial",
	1: "Enterprise",
	2: "Evaluation",
}

var License_Type_value = map[string]int32{
	"NonCommercial": 0,
	"Enterprise":    1,
	"Evaluation":    2,
}

func (x License_Type) String() string {
	return proto.EnumName(License_Type_name, int32(x))
}

func (License_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_765066c8b2c94c63, []int{0, 0}
}

type License_Usage int32

const (
	Unspecified   License_Usage = 0
	Production    License_Usage = 1
	PreProduction License_Usage = 2
	Development   License_Usage = 3
)

var License_Usage_name = map[int32]string{
	0: "Unspecified",
	1: "Production",
	2: "PreProduction",
	3: "Development",
}

var License_Usage_value = map[string]int32{
	"Unspecified":   0,
	"Production":    1,
	"PreProduction": 2,
	"Development":   3,
}

func (License_Usage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_765066c8b2c94c63, []int{0, 1}
}

type License struct {
	ValidUntilUnixSec int64         `protobuf:"varint,2,opt,name=valid_until_unix_sec,json=validUntilUnixSec,proto3" json:"valid_until_unix_sec,omitempty"`
	Type              License_Type  `protobuf:"varint,3,opt,name=type,proto3,enum=cockroach.ccl.utilccl.licenseccl.License_Type" json:"type,omitempty"`
	OrganizationName  string        `protobuf:"bytes,4,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	Usage             License_Usage `protobuf:"varint,5,opt,name=usage,proto3,enum=cockroach.ccl.utilccl.licenseccl.License_Usage" json:"usage,omitempty"`
}

func (m *License) Reset()         { *m = License{} }
func (m *License) String() string { return proto.CompactTextString(m) }
func (*License) ProtoMessage()    {}
func (*License) Descriptor() ([]byte, []int) {
	return fileDescriptor_765066c8b2c94c63, []int{0}
}
func (m *License) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *License) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *License) XXX_Merge(src proto.Message) {
	xxx_messageInfo_License.Merge(m, src)
}
func (m *License) XXX_Size() int {
	return m.Size()
}
func (m *License) XXX_DiscardUnknown() {
	xxx_messageInfo_License.DiscardUnknown(m)
}

var xxx_messageInfo_License proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.ccl.utilccl.licenseccl.License_Type", License_Type_name, License_Type_value)
	proto.RegisterEnum("cockroach.ccl.utilccl.licenseccl.License_Usage", License_Usage_name, License_Usage_value)
	proto.RegisterType((*License)(nil), "cockroach.ccl.utilccl.licenseccl.License")
}

func init() {
	proto.RegisterFile("ccl/utilccl/licenseccl/license.proto", fileDescriptor_765066c8b2c94c63)
}

var fileDescriptor_765066c8b2c94c63 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x8a, 0xd4, 0x30,
	0x18, 0xc7, 0x9b, 0x99, 0x8e, 0xae, 0x11, 0xd7, 0x4e, 0xd8, 0x43, 0xd9, 0x43, 0x28, 0x83, 0x87,
	0x01, 0x21, 0x05, 0x3d, 0x89, 0xb7, 0xd5, 0xbd, 0x88, 0x2c, 0x4b, 0xb5, 0x1e, 0x04, 0x29, 0x99,
	0xf4, 0xb3, 0x1b, 0x36, 0x4d, 0x4a, 0x9a, 0x0e, 0xbb, 0x3e, 0x81, 0xe0, 0xc5, 0x77, 0xd0, 0x83,
	0x8f, 0xb2, 0xc7, 0x3d, 0xee, 0x51, 0x3b, 0x2f, 0x22, 0x4d, 0x17, 0x67, 0x0e, 0x82, 0x9e, 0xf2,
	0x25, 0xdf, 0xff, 0xf7, 0xfd, 0xff, 0x21, 0xc1, 0x8f, 0x84, 0x50, 0x69, 0xe7, 0xa4, 0x1a, 0x56,
	0x25, 0x05, 0xe8, 0x16, 0x76, 0x4a, 0xd6, 0x58, 0xe3, 0x0c, 0x49, 0x84, 0x11, 0xe7, 0xd6, 0x70,
	0x71, 0xc6, 0x84, 0x50, 0xec, 0x56, 0xcf, 0xb6, 0xfa, 0xc3, 0x83, 0xca, 0x54, 0xc6, 0x8b, 0xd3,
	0xa1, 0x1a, 0xb9, 0xc5, 0x97, 0x29, 0xbe, 0xfb, 0x7a, 0x14, 0x91, 0x14, 0x1f, 0xac, 0xb9, 0x92,
	0x65, 0xd1, 0x69, 0x27, 0x55, 0xd1, 0x69, 0x79, 0x51, 0xb4, 0x20, 0xe2, 0x49, 0x82, 0x96, 0xd3,
	0x6c, 0xee, 0x7b, 0xf9, 0xd0, 0xca, 0xb5, 0xbc, 0x78, 0x03, 0x82, 0x1c, 0xe1, 0xd0, 0x5d, 0x36,
	0x10, 0x4f, 0x13, 0xb4, 0xdc, 0x7f, 0xc2, 0xd8, 0xbf, 0x32, 0xb0, 0x5b, 0x27, 0xf6, 0xf6, 0xb2,
	0x81, 0xcc, 0xb3, 0xe4, 0x31, 0x9e, 0x1b, 0x5b, 0x71, 0x2d, 0x3f, 0x71, 0x27, 0x8d, 0x2e, 0x34,
	0xaf, 0x21, 0x0e, 0x13, 0xb4, 0xbc, 0x97, 0x45, 0xbb, 0x8d, 0x13, 0x5e, 0x03, 0x39, 0xc6, 0xb3,
	0xae, 0xe5, 0x15, 0xc4, 0x33, 0xef, 0x98, 0xfe, 0xbf, 0x63, 0x3e, 0x60, 0xd9, 0x48, 0x2f, 0x9e,
	0xe1, 0x70, 0x48, 0x40, 0xe6, 0xf8, 0xc1, 0x89, 0xd1, 0x2f, 0x4c, 0x5d, 0x83, 0x15, 0x92, 0xab,
	0x28, 0x20, 0xfb, 0x18, 0x1f, 0x6b, 0x07, 0xb6, 0xb1, 0xb2, 0x85, 0x08, 0xf9, 0xfd, 0x9a, 0xab,
	0xce, 0x67, 0x88, 0x26, 0x8b, 0x77, 0x78, 0xe6, 0x47, 0x91, 0x87, 0xf8, 0x7e, 0xae, 0xdb, 0x06,
	0x84, 0xfc, 0x28, 0xa1, 0x1c, 0xc9, 0x53, 0x6b, 0xca, 0x4e, 0x78, 0x25, 0x1a, 0x86, 0x9f, 0x5a,
	0xd8, 0x39, 0x9a, 0x0c, 0xcc, 0x4b, 0x58, 0x83, 0x32, 0x4d, 0x0d, 0xda, 0x45, 0xd3, 0xc3, 0xbd,
	0xcf, 0xdf, 0x68, 0xf0, 0xe3, 0x3b, 0x0d, 0x5e, 0x85, 0x7b, 0x28, 0x9a, 0x1c, 0x7d, 0xb8, 0xfa,
	0x45, 0x83, 0xab, 0x9e, 0xa2, 0xeb, 0x9e, 0xa2, 0x9b, 0x9e, 0xa2, 0x9f, 0x3d, 0x45, 0x5f, 0x37,
	0x34, 0xb8, 0xde, 0xd0, 0xe0, 0x66, 0x43, 0x83, 0xf7, 0xcf, 0x2b, 0xe9, 0xce, 0xba, 0x15, 0x13,
	0xa6, 0x4e, 0xff, 0x5c, 0xbe, 0x5c, 0x6d, 0xeb, 0xb4, 0x39, 0xaf, 0xd2, 0xbf, 0x7f, 0x99, 0xd5,
	0x1d, 0xff, 0xe6, 0x4f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xb0, 0xd8, 0x02, 0x53, 0x02,
	0x00, 0x00,
}

func (m *License) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *License) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *License) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Usage != 0 {
		i = encodeVarintLicense(dAtA, i, uint64(m.Usage))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OrganizationName) > 0 {
		i -= len(m.OrganizationName)
		copy(dAtA[i:], m.OrganizationName)
		i = encodeVarintLicense(dAtA, i, uint64(len(m.OrganizationName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintLicense(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.ValidUntilUnixSec != 0 {
		i = encodeVarintLicense(dAtA, i, uint64(m.ValidUntilUnixSec))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintLicense(dAtA []byte, offset int, v uint64) int {
	offset -= sovLicense(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *License) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidUntilUnixSec != 0 {
		n += 1 + sovLicense(uint64(m.ValidUntilUnixSec))
	}
	if m.Type != 0 {
		n += 1 + sovLicense(uint64(m.Type))
	}
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	if m.Usage != 0 {
		n += 1 + sovLicense(uint64(m.Usage))
	}
	return n
}

func sovLicense(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLicense(x uint64) (n int) {
	return sovLicense(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *License) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: License: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: License: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntilUnixSec", wireType)
			}
			m.ValidUntilUnixSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidUntilUnixSec |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= License_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLicense
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			m.Usage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usage |= License_Usage(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLicense(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLicense
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLicense
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLicense
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLicense        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLicense          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLicense = fmt.Errorf("proto: unexpected end of group")
)

