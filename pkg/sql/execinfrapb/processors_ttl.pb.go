// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/execinfrapb/processors_ttl.proto

// Beware! This package name must not be changed, even though it doesn't match
// the Go package name, because it defines the Protobuf message names which
// can't be changed without breaking backward compatibility.

package execinfrapb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_jobs_jobspb "github.com/cockroachdb/cockroach/pkg/jobs/jobspb"
	jobspb "github.com/cockroachdb/cockroach/pkg/jobs/jobspb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	github_com_cockroachdb_cockroach_pkg_sql_catalog_catpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/catpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TTLSpec struct {
	// JobID of the job that ran the ttlProcessor.
	JobID github_com_cockroachdb_cockroach_pkg_jobs_jobspb.JobID `protobuf:"varint,1,opt,name=job_id,json=jobId,casttype=github.com/cockroachdb/cockroach/pkg/jobs/jobspb.JobID" json:"job_id"`
	// RowLevelTTLDetails are the details of the job that ran the ttlProcessor.
	RowLevelTTLDetails jobspb.RowLevelTTLDetails `protobuf:"bytes,2,opt,name=row_level_ttl_details,json=rowLevelTtlDetails" json:"row_level_ttl_details"`
	// TTLExpr is compared against jobspb.RowLevelTTLDetails.Cutoff by the
	// ttlProcessor to determine what records to delete. Records are deleted
	// if TTLExpr <= Cutoff.
	TTLExpr github_com_cockroachdb_cockroach_pkg_sql_catalog_catpb.Expression `protobuf:"bytes,4,opt,name=ttl_expr,json=ttlExpr,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/catpb.Expression" json:"ttl_expr"`
	// Spans determine which records are processed by which nodes in the DistSQL
	// flow.
	Spans []roachpb.Span `protobuf:"bytes,5,rep,name=spans" json:"spans"`
	// SelectBatchSize controls the batch size for SELECTs.
	SelectBatchSize int64 `protobuf:"varint,7,opt,name=select_batch_size,json=selectBatchSize" json:"select_batch_size"`
	// DeleteBatchSize controls the batch size for DELETEs.
	DeleteBatchSize int64 `protobuf:"varint,8,opt,name=delete_batch_size,json=deleteBatchSize" json:"delete_batch_size"`
	// DeleteRateLimit controls how many records can be deleted per second.
	DeleteRateLimit int64 `protobuf:"varint,9,opt,name=delete_rate_limit,json=deleteRateLimit" json:"delete_rate_limit"`
	// LabelMetrics controls if metrics are labeled with the name of the table being TTLed.
	LabelMetrics bool `protobuf:"varint,10,opt,name=label_metrics,json=labelMetrics" json:"label_metrics"`
	// PreDeleteChangeTableVersion is a test flag to change the table
	// descriptor before a delete.
	PreDeleteChangeTableVersion bool `protobuf:"varint,11,opt,name=pre_delete_change_table_version,json=preDeleteChangeTableVersion" json:"pre_delete_change_table_version"`
	// PreSelectStatement is a test setting to run a SQL statement
	// before selecting records.
	PreSelectStatement string `protobuf:"bytes,12,opt,name=pre_select_statement,json=preSelectStatement" json:"pre_select_statement"`
	// AOSTDuration is subtracted from the current time to determine the
	// AS OF SYSTEM TIME value the ttlProcessor uses to select records.
	AOSTDuration time.Duration `protobuf:"bytes,13,opt,name=aost_duration,json=aostDuration,stdduration" json:"aost_duration"`
	// SelectRateLimit controls how many records can be selected per second.
	SelectRateLimit int64 `protobuf:"varint,14,opt,name=select_rate_limit,json=selectRateLimit" json:"select_rate_limit"`
	// DisableChangefeedReplication controls whether the deletes performed
	// should not be replicated via changefeed.
	DisableChangefeedReplication bool `protobuf:"varint,15,opt,name=disable_changefeed_replication,json=disableChangefeedReplication" json:"disable_changefeed_replication"`
}

func (m *TTLSpec) Reset()         { *m = TTLSpec{} }
func (m *TTLSpec) String() string { return proto.CompactTextString(m) }
func (*TTLSpec) ProtoMessage()    {}
func (*TTLSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_9edaf16d88891b65, []int{0}
}
func (m *TTLSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TTLSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TTLSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TTLSpec.Merge(m, src)
}
func (m *TTLSpec) XXX_Size() int {
	return m.Size()
}
func (m *TTLSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TTLSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TTLSpec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TTLSpec)(nil), "cockroach.sql.distsqlrun.TTLSpec")
}

func init() {
	proto.RegisterFile("sql/execinfrapb/processors_ttl.proto", fileDescriptor_9edaf16d88891b65)
}

var fileDescriptor_9edaf16d88891b65 = []byte{
	// 682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0x2f, 0x09, 0x09, 0x26, 0x5c, 0xb8, 0x16, 0xb7, 0x75, 0x69, 0xe5, 0x44, 0x55, 0x17,
	0xe9, 0xa2, 0x76, 0x45, 0x2b, 0xf6, 0x84, 0x54, 0x15, 0x51, 0xaa, 0x4a, 0x8e, 0x85, 0xaa, 0x2e,
	0x6a, 0x8d, 0xed, 0x83, 0x33, 0x30, 0xf1, 0x0c, 0x33, 0x13, 0x40, 0xa8, 0x0f, 0xd1, 0x65, 0x9f,
	0xa4, 0xcf, 0xc0, 0x92, 0x25, 0xab, 0xb4, 0x0d, 0x6f, 0xc1, 0xaa, 0x1a, 0x7b, 0x02, 0x6e, 0xe9,
	0x82, 0x4d, 0x6c, 0x9f, 0xef, 0xfb, 0xce, 0xcf, 0x77, 0x66, 0x62, 0x3e, 0x13, 0x47, 0xc4, 0x83,
	0x53, 0x88, 0x71, 0xb6, 0xcf, 0x11, 0x8b, 0x3c, 0xc6, 0x69, 0x0c, 0x42, 0x50, 0x2e, 0x42, 0x29,
	0x89, 0xcb, 0x38, 0x95, 0xd4, 0xb2, 0x63, 0x1a, 0x1f, 0x72, 0x8a, 0xe2, 0x91, 0x2b, 0x8e, 0x88,
	0x9b, 0x60, 0x21, 0xc5, 0x11, 0xe1, 0x93, 0x6c, 0x63, 0x3d, 0xa5, 0x29, 0xcd, 0x49, 0x9e, 0x7a,
	0x2b, 0xf8, 0x1b, 0x4e, 0x4a, 0x69, 0x4a, 0xc0, 0xcb, 0xbf, 0xa2, 0xc9, 0xbe, 0x97, 0x4c, 0x38,
	0x92, 0x98, 0x66, 0x1a, 0x6f, 0xfd, 0x89, 0x4b, 0x3c, 0x06, 0x21, 0xd1, 0x98, 0x69, 0x82, 0x95,
	0x17, 0x63, 0x91, 0x97, 0x20, 0x89, 0x74, 0xec, 0xc1, 0x01, 0x8d, 0x84, 0xa7, 0x7e, 0x58, 0x94,
	0x3f, 0x8a, 0xf8, 0xd3, 0x6f, 0x75, 0xb3, 0x1e, 0x04, 0x83, 0x21, 0x83, 0xd8, 0xfa, 0x64, 0x2e,
	0x1e, 0xd0, 0x28, 0xc4, 0x89, 0x6d, 0xb4, 0x8d, 0xce, 0x42, 0xf7, 0xed, 0xf9, 0xb4, 0x55, 0x99,
	0x4d, 0x5b, 0xb5, 0x3e, 0x8d, 0x76, 0x7b, 0xd7, 0xd3, 0xd6, 0x56, 0x8a, 0xe5, 0x68, 0x12, 0xb9,
	0x31, 0x1d, 0x7b, 0x37, 0x43, 0x25, 0xd1, 0xed, 0xbb, 0xc7, 0x0e, 0x53, 0xaf, 0x54, 0xc9, 0xcd,
	0x95, 0x7e, 0xed, 0x80, 0x46, 0xbb, 0x89, 0xf5, 0xd9, 0xfc, 0x9f, 0xd3, 0x93, 0x90, 0xc0, 0x31,
	0x10, 0xe5, 0x4f, 0x98, 0x80, 0x44, 0x98, 0x08, 0xfb, 0x9f, 0xb6, 0xd1, 0x59, 0xde, 0x7c, 0xe1,
	0xfe, 0x6e, 0x54, 0xde, 0xa5, 0xce, 0xe3, 0xd3, 0x93, 0x81, 0x92, 0x05, 0xc1, 0xa0, 0x57, 0x88,
	0xba, 0x1b, 0xba, 0x3b, 0xeb, 0x2e, 0xe6, 0x5b, 0x7c, 0x1e, 0x93, 0x44, 0xc7, 0x2c, 0x6a, 0x36,
	0x54, 0x4d, 0x38, 0x65, 0xdc, 0xae, 0xb6, 0x8d, 0xce, 0x52, 0x37, 0xd0, 0x19, 0x94, 0x01, 0x6f,
	0x4e, 0x19, 0xbf, 0x9e, 0xb6, 0xb6, 0xef, 0x35, 0xa1, 0x5a, 0x7b, 0x8c, 0x24, 0x22, 0x34, 0x55,
	0x4f, 0x16, 0xb9, 0x4a, 0x0e, 0x42, 0x60, 0x9a, 0xf9, 0x75, 0x29, 0x89, 0xfa, 0xb4, 0x5e, 0x99,
	0x35, 0xc1, 0x50, 0x26, 0xec, 0x5a, 0x7b, 0xa1, 0xb3, 0xbc, 0xf9, 0xb0, 0x34, 0x9e, 0x5e, 0x90,
	0x3b, 0x64, 0x28, 0xeb, 0x56, 0x55, 0x1b, 0x7e, 0xc1, 0xb5, 0x5e, 0x9a, 0xff, 0x09, 0x20, 0x10,
	0xcb, 0x30, 0x42, 0x32, 0x1e, 0x85, 0x02, 0x9f, 0x81, 0x5d, 0xcf, 0xd7, 0x51, 0xf0, 0x56, 0x0b,
	0xb8, 0xab, 0xd0, 0x21, 0x3e, 0x03, 0xa5, 0x48, 0x80, 0x80, 0x84, 0xb2, 0xa2, 0x51, 0x56, 0x14,
	0xf0, 0xdf, 0x14, 0x1c, 0x49, 0x08, 0x09, 0x1e, 0x63, 0x69, 0x2f, 0xdd, 0x55, 0xf8, 0x48, 0xc2,
	0x40, 0x81, 0xd6, 0x73, 0x73, 0x85, 0xa0, 0x08, 0x48, 0x38, 0x06, 0xc9, 0x71, 0x2c, 0x6c, 0xb3,
	0x6d, 0x74, 0x1a, 0x9a, 0xdd, 0xcc, 0xa1, 0x77, 0x05, 0x62, 0xf5, 0xcd, 0x16, 0xe3, 0x10, 0xea,
	0x02, 0xf1, 0x08, 0x65, 0x29, 0x84, 0x12, 0x45, 0x04, 0xc2, 0x63, 0xe0, 0xca, 0x21, 0x7b, 0xb9,
	0x24, 0x7e, 0xcc, 0x38, 0xf4, 0x72, 0xee, 0x4e, 0x4e, 0x0d, 0x14, 0x73, 0xaf, 0x20, 0x5a, 0x5b,
	0xe6, 0xba, 0xca, 0xa5, 0x0d, 0x11, 0x12, 0x49, 0x18, 0x43, 0x26, 0xed, 0x66, 0xbe, 0xbe, 0x22,
	0x81, 0xc5, 0x38, 0x0c, 0x73, 0xc2, 0x70, 0x8e, 0x5b, 0x1f, 0xcc, 0x15, 0x44, 0x85, 0x0c, 0xe7,
	0x17, 0xc7, 0x5e, 0xc9, 0x0f, 0xd8, 0x23, 0xb7, 0xb8, 0x39, 0xee, 0xfc, 0xe6, 0xb8, 0x3d, 0x4d,
	0xe8, 0xda, 0xfa, 0x28, 0x34, 0xb7, 0xdf, 0x0f, 0x83, 0x79, 0xf4, 0xeb, 0xf7, 0x96, 0xe1, 0x37,
	0x55, 0xa6, 0x79, 0xa4, 0xb4, 0x9e, 0x92, 0x75, 0xff, 0xde, 0x5d, 0xcf, 0xad, 0x75, 0x7d, 0xd3,
	0x49, 0xb0, 0xc8, 0xe7, 0x2f, 0xcc, 0xd8, 0x07, 0x48, 0x42, 0x0e, 0x8c, 0xe0, 0xb8, 0x68, 0x6e,
	0xb5, 0x64, 0xc7, 0x13, 0xcd, 0xdd, 0xb9, 0xa1, 0xfa, 0xb7, 0xcc, 0x7e, 0xb5, 0xb1, 0xb0, 0x56,
	0xed, 0x57, 0x1b, 0x8b, 0x6b, 0xf5, 0xee, 0xde, 0xf9, 0x4f, 0xa7, 0x72, 0x3e, 0x73, 0x8c, 0x8b,
	0x99, 0x63, 0x5c, 0xce, 0x1c, 0xe3, 0xc7, 0xcc, 0x31, 0xbe, 0x5c, 0x39, 0x95, 0x8b, 0x2b, 0xa7,
	0x72, 0x79, 0xe5, 0x54, 0x3e, 0xbe, 0xbe, 0xf7, 0x59, 0x2e, 0xfd, 0x85, 0xfd, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0x25, 0x1c, 0x7e, 0xa4, 0xd4, 0x04, 0x00, 0x00,
}

func (m *TTLSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TTLSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TTLSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.DisableChangefeedReplication {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x78
	i = encodeVarintProcessorsTtl(dAtA, i, uint64(m.SelectRateLimit))
	i--
	dAtA[i] = 0x70
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.AOSTDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.AOSTDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintProcessorsTtl(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x6a
	i -= len(m.PreSelectStatement)
	copy(dAtA[i:], m.PreSelectStatement)
	i = encodeVarintProcessorsTtl(dAtA, i, uint64(len(m.PreSelectStatement)))
	i--
	dAtA[i] = 0x62
	i--
	if m.PreDeleteChangeTableVersion {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x58
	i--
	if m.LabelMetrics {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x50
	i = encodeVarintProcessorsTtl(dAtA, i, uint64(m.DeleteRateLimit))
	i--
	dAtA[i] = 0x48
	i = encodeVarintProcessorsTtl(dAtA, i, uint64(m.DeleteBatchSize))
	i--
	dAtA[i] = 0x40
	i = encodeVarintProcessorsTtl(dAtA, i, uint64(m.SelectBatchSize))
	i--
	dAtA[i] = 0x38
	if len(m.Spans) > 0 {
		for iNdEx := len(m.Spans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Spans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessorsTtl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i -= len(m.TTLExpr)
	copy(dAtA[i:], m.TTLExpr)
	i = encodeVarintProcessorsTtl(dAtA, i, uint64(len(m.TTLExpr)))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.RowLevelTTLDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProcessorsTtl(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i = encodeVarintProcessorsTtl(dAtA, i, uint64(m.JobID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintProcessorsTtl(dAtA []byte, offset int, v uint64) int {
	offset -= sovProcessorsTtl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TTLSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovProcessorsTtl(uint64(m.JobID))
	l = m.RowLevelTTLDetails.Size()
	n += 1 + l + sovProcessorsTtl(uint64(l))
	l = len(m.TTLExpr)
	n += 1 + l + sovProcessorsTtl(uint64(l))
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovProcessorsTtl(uint64(l))
		}
	}
	n += 1 + sovProcessorsTtl(uint64(m.SelectBatchSize))
	n += 1 + sovProcessorsTtl(uint64(m.DeleteBatchSize))
	n += 1 + sovProcessorsTtl(uint64(m.DeleteRateLimit))
	n += 2
	n += 2
	l = len(m.PreSelectStatement)
	n += 1 + l + sovProcessorsTtl(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.AOSTDuration)
	n += 1 + l + sovProcessorsTtl(uint64(l))
	n += 1 + sovProcessorsTtl(uint64(m.SelectRateLimit))
	n += 2
	return n
}

func sovProcessorsTtl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProcessorsTtl(x uint64) (n int) {
	return sovProcessorsTtl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TTLSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessorsTtl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TTLSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TTLSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobID", wireType)
			}
			m.JobID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobID |= github_com_cockroachdb_cockroach_pkg_jobs_jobspb.JobID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowLevelTTLDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessorsTtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessorsTtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RowLevelTTLDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTLExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessorsTtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessorsTtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TTLExpr = github_com_cockroachdb_cockroach_pkg_sql_catalog_catpb.Expression(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessorsTtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessorsTtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, roachpb.Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectBatchSize", wireType)
			}
			m.SelectBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectBatchSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteBatchSize", wireType)
			}
			m.DeleteBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteBatchSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRateLimit", wireType)
			}
			m.DeleteRateLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteRateLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelMetrics", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelMetrics = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreDeleteChangeTableVersion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreDeleteChangeTableVersion = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreSelectStatement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessorsTtl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessorsTtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreSelectStatement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AOSTDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessorsTtl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessorsTtl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.AOSTDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectRateLimit", wireType)
			}
			m.SelectRateLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectRateLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableChangefeedReplication", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableChangefeedReplication = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProcessorsTtl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessorsTtl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProcessorsTtl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProcessorsTtl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessorsTtl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProcessorsTtl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProcessorsTtl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProcessorsTtl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProcessorsTtl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProcessorsTtl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProcessorsTtl = fmt.Errorf("proto: unexpected end of group")
)

