// Code generated by execgen; DO NOT EDIT.
// Copyright 2018 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package exec

import (
	"github.com/cockroachdb/apd"
	"github.com/cockroachdb/cockroach/pkg/sql/exec/coldata"
	"github.com/cockroachdb/cockroach/pkg/sql/exec/types"
	"github.com/pkg/errors"
)

func newAnyNotNullAgg(t types.T) (aggregateFunc, error) {
	switch t {
	case types.Bool:
		return &anyNotNullBoolAgg{}, nil
	case types.Bytes:
		return &anyNotNullBytesAgg{}, nil
	case types.Decimal:
		return &anyNotNullDecimalAgg{}, nil
	case types.Int8:
		return &anyNotNullInt8Agg{}, nil
	case types.Int16:
		return &anyNotNullInt16Agg{}, nil
	case types.Int32:
		return &anyNotNullInt32Agg{}, nil
	case types.Int64:
		return &anyNotNullInt64Agg{}, nil
	case types.Float32:
		return &anyNotNullFloat32Agg{}, nil
	case types.Float64:
		return &anyNotNullFloat64Agg{}, nil
	default:
		return nil, errors.Errorf("unsupported any not null agg type %s", t)
	}
}

// anyNotNullBoolAgg implements the ANY_NOT_NULL aggregate, returning the
// first non-null value in the input column.
type anyNotNullBoolAgg struct {
	done                        bool
	groups                      []bool
	vec                         []bool
	nulls                       *coldata.Nulls
	curIdx                      int
	foundNonNullForCurrentGroup bool
}

func (a *anyNotNullBoolAgg) Init(groups []bool, vec coldata.Vec) {
	a.groups = groups
	a.vec = vec.Bool()
	a.nulls = vec.Nulls()
	a.Reset()
}

func (a *anyNotNullBoolAgg) Reset() {
	copy(a.vec, zeroBoolColumn)
	a.curIdx = -1
	a.done = false
	a.foundNonNullForCurrentGroup = false
	a.nulls.UnsetNulls()
}

func (a *anyNotNullBoolAgg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *anyNotNullBoolAgg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroBoolColumn)
		a.nulls.UnsetNullsAfter(uint16(idx + 1))
	}
}

func (a *anyNotNullBoolAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// If we haven't found any non-nulls for this group so far, the output for
		// this group should be null.
		if !a.foundNonNullForCurrentGroup {
			a.nulls.SetNull(uint16(a.curIdx))
		}
		a.curIdx++
		a.done = true
		return
	}
	vec, sel := b.ColVec(int(inputIdxs[0])), b.Selection()
	col, nulls := vec.Bool(), vec.Nulls()

	if nulls.MaybeHasNulls() {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	} else {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *anyNotNullBoolAgg) HandleEmptyInputScalar() {
	a.nulls.SetNull(0)
}

// anyNotNullBytesAgg implements the ANY_NOT_NULL aggregate, returning the
// first non-null value in the input column.
type anyNotNullBytesAgg struct {
	done                        bool
	groups                      []bool
	vec                         [][]byte
	nulls                       *coldata.Nulls
	curIdx                      int
	foundNonNullForCurrentGroup bool
}

func (a *anyNotNullBytesAgg) Init(groups []bool, vec coldata.Vec) {
	a.groups = groups
	a.vec = vec.Bytes()
	a.nulls = vec.Nulls()
	a.Reset()
}

func (a *anyNotNullBytesAgg) Reset() {
	copy(a.vec, zeroBytesColumn)
	a.curIdx = -1
	a.done = false
	a.foundNonNullForCurrentGroup = false
	a.nulls.UnsetNulls()
}

func (a *anyNotNullBytesAgg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *anyNotNullBytesAgg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroBytesColumn)
		a.nulls.UnsetNullsAfter(uint16(idx + 1))
	}
}

func (a *anyNotNullBytesAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// If we haven't found any non-nulls for this group so far, the output for
		// this group should be null.
		if !a.foundNonNullForCurrentGroup {
			a.nulls.SetNull(uint16(a.curIdx))
		}
		a.curIdx++
		a.done = true
		return
	}
	vec, sel := b.ColVec(int(inputIdxs[0])), b.Selection()
	col, nulls := vec.Bytes(), vec.Nulls()

	if nulls.MaybeHasNulls() {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	} else {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *anyNotNullBytesAgg) HandleEmptyInputScalar() {
	a.nulls.SetNull(0)
}

// anyNotNullDecimalAgg implements the ANY_NOT_NULL aggregate, returning the
// first non-null value in the input column.
type anyNotNullDecimalAgg struct {
	done                        bool
	groups                      []bool
	vec                         []apd.Decimal
	nulls                       *coldata.Nulls
	curIdx                      int
	foundNonNullForCurrentGroup bool
}

func (a *anyNotNullDecimalAgg) Init(groups []bool, vec coldata.Vec) {
	a.groups = groups
	a.vec = vec.Decimal()
	a.nulls = vec.Nulls()
	a.Reset()
}

func (a *anyNotNullDecimalAgg) Reset() {
	copy(a.vec, zeroDecimalColumn)
	a.curIdx = -1
	a.done = false
	a.foundNonNullForCurrentGroup = false
	a.nulls.UnsetNulls()
}

func (a *anyNotNullDecimalAgg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *anyNotNullDecimalAgg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroDecimalColumn)
		a.nulls.UnsetNullsAfter(uint16(idx + 1))
	}
}

func (a *anyNotNullDecimalAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// If we haven't found any non-nulls for this group so far, the output for
		// this group should be null.
		if !a.foundNonNullForCurrentGroup {
			a.nulls.SetNull(uint16(a.curIdx))
		}
		a.curIdx++
		a.done = true
		return
	}
	vec, sel := b.ColVec(int(inputIdxs[0])), b.Selection()
	col, nulls := vec.Decimal(), vec.Nulls()

	if nulls.MaybeHasNulls() {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	} else {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *anyNotNullDecimalAgg) HandleEmptyInputScalar() {
	a.nulls.SetNull(0)
}

// anyNotNullInt8Agg implements the ANY_NOT_NULL aggregate, returning the
// first non-null value in the input column.
type anyNotNullInt8Agg struct {
	done                        bool
	groups                      []bool
	vec                         []int8
	nulls                       *coldata.Nulls
	curIdx                      int
	foundNonNullForCurrentGroup bool
}

func (a *anyNotNullInt8Agg) Init(groups []bool, vec coldata.Vec) {
	a.groups = groups
	a.vec = vec.Int8()
	a.nulls = vec.Nulls()
	a.Reset()
}

func (a *anyNotNullInt8Agg) Reset() {
	copy(a.vec, zeroInt8Column)
	a.curIdx = -1
	a.done = false
	a.foundNonNullForCurrentGroup = false
	a.nulls.UnsetNulls()
}

func (a *anyNotNullInt8Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *anyNotNullInt8Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroInt8Column)
		a.nulls.UnsetNullsAfter(uint16(idx + 1))
	}
}

func (a *anyNotNullInt8Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// If we haven't found any non-nulls for this group so far, the output for
		// this group should be null.
		if !a.foundNonNullForCurrentGroup {
			a.nulls.SetNull(uint16(a.curIdx))
		}
		a.curIdx++
		a.done = true
		return
	}
	vec, sel := b.ColVec(int(inputIdxs[0])), b.Selection()
	col, nulls := vec.Int8(), vec.Nulls()

	if nulls.MaybeHasNulls() {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	} else {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *anyNotNullInt8Agg) HandleEmptyInputScalar() {
	a.nulls.SetNull(0)
}

// anyNotNullInt16Agg implements the ANY_NOT_NULL aggregate, returning the
// first non-null value in the input column.
type anyNotNullInt16Agg struct {
	done                        bool
	groups                      []bool
	vec                         []int16
	nulls                       *coldata.Nulls
	curIdx                      int
	foundNonNullForCurrentGroup bool
}

func (a *anyNotNullInt16Agg) Init(groups []bool, vec coldata.Vec) {
	a.groups = groups
	a.vec = vec.Int16()
	a.nulls = vec.Nulls()
	a.Reset()
}

func (a *anyNotNullInt16Agg) Reset() {
	copy(a.vec, zeroInt16Column)
	a.curIdx = -1
	a.done = false
	a.foundNonNullForCurrentGroup = false
	a.nulls.UnsetNulls()
}

func (a *anyNotNullInt16Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *anyNotNullInt16Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroInt16Column)
		a.nulls.UnsetNullsAfter(uint16(idx + 1))
	}
}

func (a *anyNotNullInt16Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// If we haven't found any non-nulls for this group so far, the output for
		// this group should be null.
		if !a.foundNonNullForCurrentGroup {
			a.nulls.SetNull(uint16(a.curIdx))
		}
		a.curIdx++
		a.done = true
		return
	}
	vec, sel := b.ColVec(int(inputIdxs[0])), b.Selection()
	col, nulls := vec.Int16(), vec.Nulls()

	if nulls.MaybeHasNulls() {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	} else {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *anyNotNullInt16Agg) HandleEmptyInputScalar() {
	a.nulls.SetNull(0)
}

// anyNotNullInt32Agg implements the ANY_NOT_NULL aggregate, returning the
// first non-null value in the input column.
type anyNotNullInt32Agg struct {
	done                        bool
	groups                      []bool
	vec                         []int32
	nulls                       *coldata.Nulls
	curIdx                      int
	foundNonNullForCurrentGroup bool
}

func (a *anyNotNullInt32Agg) Init(groups []bool, vec coldata.Vec) {
	a.groups = groups
	a.vec = vec.Int32()
	a.nulls = vec.Nulls()
	a.Reset()
}

func (a *anyNotNullInt32Agg) Reset() {
	copy(a.vec, zeroInt32Column)
	a.curIdx = -1
	a.done = false
	a.foundNonNullForCurrentGroup = false
	a.nulls.UnsetNulls()
}

func (a *anyNotNullInt32Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *anyNotNullInt32Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroInt32Column)
		a.nulls.UnsetNullsAfter(uint16(idx + 1))
	}
}

func (a *anyNotNullInt32Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// If we haven't found any non-nulls for this group so far, the output for
		// this group should be null.
		if !a.foundNonNullForCurrentGroup {
			a.nulls.SetNull(uint16(a.curIdx))
		}
		a.curIdx++
		a.done = true
		return
	}
	vec, sel := b.ColVec(int(inputIdxs[0])), b.Selection()
	col, nulls := vec.Int32(), vec.Nulls()

	if nulls.MaybeHasNulls() {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	} else {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *anyNotNullInt32Agg) HandleEmptyInputScalar() {
	a.nulls.SetNull(0)
}

// anyNotNullInt64Agg implements the ANY_NOT_NULL aggregate, returning the
// first non-null value in the input column.
type anyNotNullInt64Agg struct {
	done                        bool
	groups                      []bool
	vec                         []int64
	nulls                       *coldata.Nulls
	curIdx                      int
	foundNonNullForCurrentGroup bool
}

func (a *anyNotNullInt64Agg) Init(groups []bool, vec coldata.Vec) {
	a.groups = groups
	a.vec = vec.Int64()
	a.nulls = vec.Nulls()
	a.Reset()
}

func (a *anyNotNullInt64Agg) Reset() {
	copy(a.vec, zeroInt64Column)
	a.curIdx = -1
	a.done = false
	a.foundNonNullForCurrentGroup = false
	a.nulls.UnsetNulls()
}

func (a *anyNotNullInt64Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *anyNotNullInt64Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroInt64Column)
		a.nulls.UnsetNullsAfter(uint16(idx + 1))
	}
}

func (a *anyNotNullInt64Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// If we haven't found any non-nulls for this group so far, the output for
		// this group should be null.
		if !a.foundNonNullForCurrentGroup {
			a.nulls.SetNull(uint16(a.curIdx))
		}
		a.curIdx++
		a.done = true
		return
	}
	vec, sel := b.ColVec(int(inputIdxs[0])), b.Selection()
	col, nulls := vec.Int64(), vec.Nulls()

	if nulls.MaybeHasNulls() {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	} else {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *anyNotNullInt64Agg) HandleEmptyInputScalar() {
	a.nulls.SetNull(0)
}

// anyNotNullFloat32Agg implements the ANY_NOT_NULL aggregate, returning the
// first non-null value in the input column.
type anyNotNullFloat32Agg struct {
	done                        bool
	groups                      []bool
	vec                         []float32
	nulls                       *coldata.Nulls
	curIdx                      int
	foundNonNullForCurrentGroup bool
}

func (a *anyNotNullFloat32Agg) Init(groups []bool, vec coldata.Vec) {
	a.groups = groups
	a.vec = vec.Float32()
	a.nulls = vec.Nulls()
	a.Reset()
}

func (a *anyNotNullFloat32Agg) Reset() {
	copy(a.vec, zeroFloat32Column)
	a.curIdx = -1
	a.done = false
	a.foundNonNullForCurrentGroup = false
	a.nulls.UnsetNulls()
}

func (a *anyNotNullFloat32Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *anyNotNullFloat32Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroFloat32Column)
		a.nulls.UnsetNullsAfter(uint16(idx + 1))
	}
}

func (a *anyNotNullFloat32Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// If we haven't found any non-nulls for this group so far, the output for
		// this group should be null.
		if !a.foundNonNullForCurrentGroup {
			a.nulls.SetNull(uint16(a.curIdx))
		}
		a.curIdx++
		a.done = true
		return
	}
	vec, sel := b.ColVec(int(inputIdxs[0])), b.Selection()
	col, nulls := vec.Float32(), vec.Nulls()

	if nulls.MaybeHasNulls() {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	} else {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *anyNotNullFloat32Agg) HandleEmptyInputScalar() {
	a.nulls.SetNull(0)
}

// anyNotNullFloat64Agg implements the ANY_NOT_NULL aggregate, returning the
// first non-null value in the input column.
type anyNotNullFloat64Agg struct {
	done                        bool
	groups                      []bool
	vec                         []float64
	nulls                       *coldata.Nulls
	curIdx                      int
	foundNonNullForCurrentGroup bool
}

func (a *anyNotNullFloat64Agg) Init(groups []bool, vec coldata.Vec) {
	a.groups = groups
	a.vec = vec.Float64()
	a.nulls = vec.Nulls()
	a.Reset()
}

func (a *anyNotNullFloat64Agg) Reset() {
	copy(a.vec, zeroFloat64Column)
	a.curIdx = -1
	a.done = false
	a.foundNonNullForCurrentGroup = false
	a.nulls.UnsetNulls()
}

func (a *anyNotNullFloat64Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *anyNotNullFloat64Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroFloat64Column)
		a.nulls.UnsetNullsAfter(uint16(idx + 1))
	}
}

func (a *anyNotNullFloat64Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// If we haven't found any non-nulls for this group so far, the output for
		// this group should be null.
		if !a.foundNonNullForCurrentGroup {
			a.nulls.SetNull(uint16(a.curIdx))
		}
		a.curIdx++
		a.done = true
		return
	}
	vec, sel := b.ColVec(int(inputIdxs[0])), b.Selection()
	col, nulls := vec.Float64(), vec.Nulls()

	if nulls.MaybeHasNulls() {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	} else {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If this is a new group, check if any non-nulls have been found for the
					// current group. The `a.curIdx` check is necessary because for the first
					// group in the result set there is no "current group."
					if !a.foundNonNullForCurrentGroup && a.curIdx >= 0 {
						a.nulls.SetNull(uint16(a.curIdx))
					}
					a.curIdx++
					a.foundNonNullForCurrentGroup = false
				}
				var isNull bool
				isNull = false
				if !a.foundNonNullForCurrentGroup && !isNull {
					// If we haven't seen any non-nulls for the current group yet, and the
					// current value is non-null, then we can pick the current value to be the
					// output.
					a.vec[a.curIdx] = col[i]
					a.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *anyNotNullFloat64Agg) HandleEmptyInputScalar() {
	a.nulls.SetNull(0)
}
