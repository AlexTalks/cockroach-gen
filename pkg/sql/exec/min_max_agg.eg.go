// Code generated by execgen; DO NOT EDIT.
// Copyright 2019 The Cockroach Authors.
// Use of this software is governed by the Business Source License included
// in the file licenses/BSL.txt and at www.mariadb.com/bsl11.
// Change Date: 2022-10-01
// On the date above, in accordance with the Business Source License, use
// of this software will be governed by the Apache License, Version 2.0,
// included in the file licenses/APL.txt and at
// https://www.apache.org/licenses/LICENSE-2.0

package exec

import (
	"bytes"

	"github.com/cockroachdb/apd"
	"github.com/cockroachdb/cockroach/pkg/sql/exec/coldata"
	"github.com/cockroachdb/cockroach/pkg/sql/exec/types"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/pkg/errors"
)

func newMinAgg(t types.T) (aggregateFunc, error) {
	switch t {
	case types.Bool:
		return &minBoolAgg{}, nil
	case types.Bytes:
		return &minBytesAgg{}, nil
	case types.Decimal:
		return &minDecimalAgg{}, nil
	case types.Int8:
		return &minInt8Agg{}, nil
	case types.Int16:
		return &minInt16Agg{}, nil
	case types.Int32:
		return &minInt32Agg{}, nil
	case types.Int64:
		return &minInt64Agg{}, nil
	case types.Float32:
		return &minFloat32Agg{}, nil
	case types.Float64:
		return &minFloat64Agg{}, nil
	default:
		return nil, errors.Errorf("unsupported min agg type %s", t)
	}
}

type minBoolAgg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []bool
}

var _ aggregateFunc = &minBoolAgg{}

func (a *minBoolAgg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Bool()
	a.Reset()
}

func (a *minBoolAgg) Reset() {
	copy(a.vec, zeroBoolColumn)
	a.curIdx = -1
	a.done = false
}

func (a *minBoolAgg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *minBoolAgg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroBoolColumn)
	}
}

func (a *minBoolAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Bool(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = tree.CompareBools(col[i], a.vec[a.curIdx]) < 0
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = tree.CompareBools(col[i], a.vec[a.curIdx]) < 0
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type minBytesAgg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec [][]byte
}

var _ aggregateFunc = &minBytesAgg{}

func (a *minBytesAgg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Bytes()
	a.Reset()
}

func (a *minBytesAgg) Reset() {
	copy(a.vec, zeroBytesColumn)
	a.curIdx = -1
	a.done = false
}

func (a *minBytesAgg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *minBytesAgg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroBytesColumn)
	}
}

func (a *minBytesAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Bytes(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = bytes.Compare(col[i], a.vec[a.curIdx]) < 0
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = bytes.Compare(col[i], a.vec[a.curIdx]) < 0
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type minDecimalAgg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []apd.Decimal
}

var _ aggregateFunc = &minDecimalAgg{}

func (a *minDecimalAgg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Decimal()
	a.Reset()
}

func (a *minDecimalAgg) Reset() {
	copy(a.vec, zeroDecimalColumn)
	a.curIdx = -1
	a.done = false
}

func (a *minDecimalAgg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *minDecimalAgg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroDecimalColumn)
	}
}

func (a *minDecimalAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Decimal(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = tree.CompareDecimals(&col[i], &a.vec[a.curIdx]) < 0
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = tree.CompareDecimals(&col[i], &a.vec[a.curIdx]) < 0
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type minInt8Agg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []int8
}

var _ aggregateFunc = &minInt8Agg{}

func (a *minInt8Agg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Int8()
	a.Reset()
}

func (a *minInt8Agg) Reset() {
	copy(a.vec, zeroInt8Column)
	a.curIdx = -1
	a.done = false
}

func (a *minInt8Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *minInt8Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroInt8Column)
	}
}

func (a *minInt8Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Int8(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] < a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] < a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type minInt16Agg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []int16
}

var _ aggregateFunc = &minInt16Agg{}

func (a *minInt16Agg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Int16()
	a.Reset()
}

func (a *minInt16Agg) Reset() {
	copy(a.vec, zeroInt16Column)
	a.curIdx = -1
	a.done = false
}

func (a *minInt16Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *minInt16Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroInt16Column)
	}
}

func (a *minInt16Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Int16(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] < a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] < a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type minInt32Agg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []int32
}

var _ aggregateFunc = &minInt32Agg{}

func (a *minInt32Agg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Int32()
	a.Reset()
}

func (a *minInt32Agg) Reset() {
	copy(a.vec, zeroInt32Column)
	a.curIdx = -1
	a.done = false
}

func (a *minInt32Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *minInt32Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroInt32Column)
	}
}

func (a *minInt32Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Int32(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] < a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] < a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type minInt64Agg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []int64
}

var _ aggregateFunc = &minInt64Agg{}

func (a *minInt64Agg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Int64()
	a.Reset()
}

func (a *minInt64Agg) Reset() {
	copy(a.vec, zeroInt64Column)
	a.curIdx = -1
	a.done = false
}

func (a *minInt64Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *minInt64Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroInt64Column)
	}
}

func (a *minInt64Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Int64(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] < a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] < a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type minFloat32Agg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []float32
}

var _ aggregateFunc = &minFloat32Agg{}

func (a *minFloat32Agg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Float32()
	a.Reset()
}

func (a *minFloat32Agg) Reset() {
	copy(a.vec, zeroFloat32Column)
	a.curIdx = -1
	a.done = false
}

func (a *minFloat32Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *minFloat32Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroFloat32Column)
	}
}

func (a *minFloat32Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Float32(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] < a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] < a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type minFloat64Agg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []float64
}

var _ aggregateFunc = &minFloat64Agg{}

func (a *minFloat64Agg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Float64()
	a.Reset()
}

func (a *minFloat64Agg) Reset() {
	copy(a.vec, zeroFloat64Column)
	a.curIdx = -1
	a.done = false
}

func (a *minFloat64Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *minFloat64Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroFloat64Column)
	}
}

func (a *minFloat64Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Float64(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] < a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] < a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

func newMaxAgg(t types.T) (aggregateFunc, error) {
	switch t {
	case types.Bool:
		return &maxBoolAgg{}, nil
	case types.Bytes:
		return &maxBytesAgg{}, nil
	case types.Decimal:
		return &maxDecimalAgg{}, nil
	case types.Int8:
		return &maxInt8Agg{}, nil
	case types.Int16:
		return &maxInt16Agg{}, nil
	case types.Int32:
		return &maxInt32Agg{}, nil
	case types.Int64:
		return &maxInt64Agg{}, nil
	case types.Float32:
		return &maxFloat32Agg{}, nil
	case types.Float64:
		return &maxFloat64Agg{}, nil
	default:
		return nil, errors.Errorf("unsupported min agg type %s", t)
	}
}

type maxBoolAgg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []bool
}

var _ aggregateFunc = &maxBoolAgg{}

func (a *maxBoolAgg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Bool()
	a.Reset()
}

func (a *maxBoolAgg) Reset() {
	copy(a.vec, zeroBoolColumn)
	a.curIdx = -1
	a.done = false
}

func (a *maxBoolAgg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *maxBoolAgg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroBoolColumn)
	}
}

func (a *maxBoolAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Bool(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = tree.CompareBools(col[i], a.vec[a.curIdx]) > 0
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = tree.CompareBools(col[i], a.vec[a.curIdx]) > 0
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type maxBytesAgg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec [][]byte
}

var _ aggregateFunc = &maxBytesAgg{}

func (a *maxBytesAgg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Bytes()
	a.Reset()
}

func (a *maxBytesAgg) Reset() {
	copy(a.vec, zeroBytesColumn)
	a.curIdx = -1
	a.done = false
}

func (a *maxBytesAgg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *maxBytesAgg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroBytesColumn)
	}
}

func (a *maxBytesAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Bytes(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = bytes.Compare(col[i], a.vec[a.curIdx]) > 0
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = bytes.Compare(col[i], a.vec[a.curIdx]) > 0
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type maxDecimalAgg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []apd.Decimal
}

var _ aggregateFunc = &maxDecimalAgg{}

func (a *maxDecimalAgg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Decimal()
	a.Reset()
}

func (a *maxDecimalAgg) Reset() {
	copy(a.vec, zeroDecimalColumn)
	a.curIdx = -1
	a.done = false
}

func (a *maxDecimalAgg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *maxDecimalAgg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroDecimalColumn)
	}
}

func (a *maxDecimalAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Decimal(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = tree.CompareDecimals(&col[i], &a.vec[a.curIdx]) > 0
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = tree.CompareDecimals(&col[i], &a.vec[a.curIdx]) > 0
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type maxInt8Agg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []int8
}

var _ aggregateFunc = &maxInt8Agg{}

func (a *maxInt8Agg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Int8()
	a.Reset()
}

func (a *maxInt8Agg) Reset() {
	copy(a.vec, zeroInt8Column)
	a.curIdx = -1
	a.done = false
}

func (a *maxInt8Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *maxInt8Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroInt8Column)
	}
}

func (a *maxInt8Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Int8(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] > a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] > a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type maxInt16Agg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []int16
}

var _ aggregateFunc = &maxInt16Agg{}

func (a *maxInt16Agg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Int16()
	a.Reset()
}

func (a *maxInt16Agg) Reset() {
	copy(a.vec, zeroInt16Column)
	a.curIdx = -1
	a.done = false
}

func (a *maxInt16Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *maxInt16Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroInt16Column)
	}
}

func (a *maxInt16Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Int16(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] > a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] > a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type maxInt32Agg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []int32
}

var _ aggregateFunc = &maxInt32Agg{}

func (a *maxInt32Agg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Int32()
	a.Reset()
}

func (a *maxInt32Agg) Reset() {
	copy(a.vec, zeroInt32Column)
	a.curIdx = -1
	a.done = false
}

func (a *maxInt32Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *maxInt32Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroInt32Column)
	}
}

func (a *maxInt32Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Int32(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] > a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] > a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type maxInt64Agg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []int64
}

var _ aggregateFunc = &maxInt64Agg{}

func (a *maxInt64Agg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Int64()
	a.Reset()
}

func (a *maxInt64Agg) Reset() {
	copy(a.vec, zeroInt64Column)
	a.curIdx = -1
	a.done = false
}

func (a *maxInt64Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *maxInt64Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroInt64Column)
	}
}

func (a *maxInt64Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Int64(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] > a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] > a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type maxFloat32Agg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []float32
}

var _ aggregateFunc = &maxFloat32Agg{}

func (a *maxFloat32Agg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Float32()
	a.Reset()
}

func (a *maxFloat32Agg) Reset() {
	copy(a.vec, zeroFloat32Column)
	a.curIdx = -1
	a.done = false
}

func (a *maxFloat32Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *maxFloat32Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroFloat32Column)
	}
}

func (a *maxFloat32Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Float32(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] > a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] > a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}

type maxFloat64Agg struct {
	done   bool
	groups []bool
	curIdx int
	// vec points to the output vector we are updating.
	vec []float64
}

var _ aggregateFunc = &maxFloat64Agg{}

func (a *maxFloat64Agg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.vec = v.Float64()
	a.Reset()
}

func (a *maxFloat64Agg) Reset() {
	copy(a.vec, zeroFloat64Column)
	a.curIdx = -1
	a.done = false
}

func (a *maxFloat64Agg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *maxFloat64Agg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		copy(a.vec[idx+1:], zeroFloat64Column)
	}
}

func (a *maxFloat64Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value.
		a.curIdx++
		a.done = true
		return
	}
	col, sel := b.ColVec(int(inputIdxs[0])).Float64(), b.Selection()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] > a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if a.groups[i] {
				a.curIdx++
				a.vec[a.curIdx] = col[i]
			} else {
				var cmp bool
				cmp = col[i] > a.vec[a.curIdx]
				if cmp {
					a.vec[a.curIdx] = col[i]
				}
			}
		}
	}
}
