# tests adapted from logictest -- aggregate

exec-ddl
CREATE TABLE t.kv (
  k INT PRIMARY KEY,
  v INT,
  w INT,
  s STRING
)
----
TABLE kv
 ├── k int not null
 ├── v int
 ├── w int
 ├── s string
 └── INDEX primary
      └── k int not null

# Presence of HAVING triggers aggregation, reducing results to one row (even without GROUP BY).
build
SELECT 3 FROM t.kv HAVING TRUE
----
project
 ├── columns: column5:5(int)
 ├── select
 │    ├── group-by
 │    │    ├── project
 │    │    │    ├── scan kv
 │    │    │    │    └── columns: kv.k:1(int!null) kv.v:2(int) kv.w:3(int) kv.s:4(string)
 │    │    │    └── projections
 │    │    └── aggregations
 │    └── true [type=bool]
 └── projections
      └── const: 3 [type=int]

build
SELECT s, COUNT(*) FROM t.kv GROUP BY s HAVING COUNT(*) > 1
----
select
 ├── columns: s:4(string) column5:5(int)
 ├── group-by
 │    ├── columns: kv.s:4(string) column5:5(int)
 │    ├── grouping columns: kv.s:4(string)
 │    ├── project
 │    │    ├── columns: kv.s:4(string)
 │    │    ├── scan kv
 │    │    │    └── columns: kv.k:1(int!null) kv.v:2(int) kv.w:3(int) kv.s:4(string)
 │    │    └── projections [outer=(4)]
 │    │         └── variable: kv.s [type=string, outer=(4)]
 │    └── aggregations
 │         └── function: count_rows [type=int]
 └── gt [type=bool, outer=(5)]
      ├── variable: column5 [type=int, outer=(5)]
      └── const: 1 [type=int]

build
SELECT MAX(k), MIN(v) FROM t.kv HAVING MIN(v) > 2
----
project
 ├── columns: column6:6(int) column5:5(int)
 ├── select
 │    ├── columns: column5:5(int) column6:6(int)
 │    ├── group-by
 │    │    ├── columns: column5:5(int) column6:6(int)
 │    │    ├── project
 │    │    │    ├── columns: kv.v:2(int) kv.k:1(int!null)
 │    │    │    ├── scan kv
 │    │    │    │    └── columns: kv.k:1(int!null) kv.v:2(int) kv.w:3(int) kv.s:4(string)
 │    │    │    └── projections [outer=(1,2)]
 │    │    │         ├── variable: kv.v [type=int, outer=(2)]
 │    │    │         └── variable: kv.k [type=int, outer=(1)]
 │    │    └── aggregations [outer=(1,2)]
 │    │         ├── function: min [type=int, outer=(2)]
 │    │         │    └── variable: kv.v [type=int, outer=(2)]
 │    │         └── function: max [type=int, outer=(1)]
 │    │              └── variable: kv.k [type=int, outer=(1)]
 │    └── gt [type=bool, outer=(5)]
 │         ├── variable: column5 [type=int, outer=(5)]
 │         └── const: 2 [type=int]
 └── projections [outer=(5,6)]
      ├── variable: column6 [type=int, outer=(6)]
      └── variable: column5 [type=int, outer=(5)]

build
SELECT MAX(k), MIN(v) FROM t.kv HAVING MAX(v) > 2
----
project
 ├── columns: column6:6(int) column7:7(int)
 ├── select
 │    ├── columns: column5:5(int) column6:6(int) column7:7(int)
 │    ├── group-by
 │    │    ├── columns: column5:5(int) column6:6(int) column7:7(int)
 │    │    ├── project
 │    │    │    ├── columns: kv.v:2(int) kv.k:1(int!null) kv.v:2(int)
 │    │    │    ├── scan kv
 │    │    │    │    └── columns: kv.k:1(int!null) kv.v:2(int) kv.w:3(int) kv.s:4(string)
 │    │    │    └── projections [outer=(1,2)]
 │    │    │         ├── variable: kv.v [type=int, outer=(2)]
 │    │    │         ├── variable: kv.k [type=int, outer=(1)]
 │    │    │         └── variable: kv.v [type=int, outer=(2)]
 │    │    └── aggregations [outer=(1,2)]
 │    │         ├── function: max [type=int, outer=(2)]
 │    │         │    └── variable: kv.v [type=int, outer=(2)]
 │    │         ├── function: max [type=int, outer=(1)]
 │    │         │    └── variable: kv.k [type=int, outer=(1)]
 │    │         └── function: min [type=int, outer=(2)]
 │    │              └── variable: kv.v [type=int, outer=(2)]
 │    └── gt [type=bool, outer=(5)]
 │         ├── variable: column5 [type=int, outer=(5)]
 │         └── const: 2 [type=int]
 └── projections [outer=(6,7)]
      ├── variable: column6 [type=int, outer=(6)]
      └── variable: column7 [type=int, outer=(7)]

build
SELECT MAX(k), MIN(v) FROM t.kv HAVING MAX(MIN(v)) > 2
----
error: aggregate function cannot be nested within another aggregate function

build
SELECT MAX(k), MIN(v) FROM t.kv HAVING k
----
error: column "t.kv.k" must appear in the GROUP BY clause or be used in an aggregate function

# Expressions listed in the HAVING clause must conform to same validation as the SELECT clause (grouped or aggregated).
build
SELECT 3 FROM t.kv GROUP BY v HAVING k > 5
----
error: column "t.kv.k" must appear in the GROUP BY clause or be used in an aggregate function

# pg has a special case for grouping on primary key, which would allow this, but we do not.
# See http://www.postgresql.org/docs/current/static/sql-select.html#SQL-GROUPBY
build
SELECT 3 FROM t.kv GROUP BY k HAVING v > 2
----
error: column "t.kv.v" must appear in the GROUP BY clause or be used in an aggregate function

build
SELECT k FROM t.kv HAVING k > 7
----
error: column "t.kv.k" must appear in the GROUP BY clause or be used in an aggregate function

build
SELECT count(*), k+w FROM t.kv GROUP BY k+w HAVING (k+w) > 5
----
project
 ├── columns: column6:6(int) column5:5(int)
 ├── select
 │    ├── columns: column5:5(int) column6:6(int)
 │    ├── group-by
 │    │    ├── columns: column5:5(int) column6:6(int)
 │    │    ├── grouping columns: column5:5(int)
 │    │    ├── project
 │    │    │    ├── columns: column5:5(int)
 │    │    │    ├── scan kv
 │    │    │    │    └── columns: kv.k:1(int!null) kv.v:2(int) kv.w:3(int) kv.s:4(string)
 │    │    │    └── projections [outer=(1,3)]
 │    │    │         └── plus [type=int, outer=(1,3)]
 │    │    │              ├── variable: kv.k [type=int, outer=(1)]
 │    │    │              └── variable: kv.w [type=int, outer=(3)]
 │    │    └── aggregations
 │    │         └── function: count_rows [type=int]
 │    └── gt [type=bool, outer=(1,3)]
 │         ├── plus [type=int, outer=(1,3)]
 │         │    ├── variable: kv.k [type=int, outer=(1)]
 │         │    └── variable: kv.w [type=int, outer=(3)]
 │         └── const: 5 [type=int]
 └── projections [outer=(5,6)]
      ├── variable: column6 [type=int, outer=(6)]
      └── variable: column5 [type=int, outer=(5)]

build
SELECT count(*), k+w FROM t.kv GROUP BY k+w HAVING (k+v) > 5
----
error: column "t.kv.k" must appear in the GROUP BY clause or be used in an aggregate function

# Check that everything still works with differently qualified names
build
SELECT MAX(kv.v) FROM kv GROUP BY v HAVING kv.v > 5
----
project
 ├── columns: column5:5(int)
 ├── select
 │    ├── columns: kv.v:2(int) column5:5(int)
 │    ├── group-by
 │    │    ├── columns: kv.v:2(int) column5:5(int)
 │    │    ├── grouping columns: kv.v:2(int)
 │    │    ├── project
 │    │    │    ├── columns: kv.v:2(int) kv.v:2(int)
 │    │    │    ├── scan kv
 │    │    │    │    └── columns: kv.k:1(int!null) kv.v:2(int) kv.w:3(int) kv.s:4(string)
 │    │    │    └── projections [outer=(2)]
 │    │    │         ├── variable: kv.v [type=int, outer=(2)]
 │    │    │         └── variable: kv.v [type=int, outer=(2)]
 │    │    └── aggregations [outer=(2)]
 │    │         └── function: max [type=int, outer=(2)]
 │    │              └── variable: kv.v [type=int, outer=(2)]
 │    └── gt [type=bool, outer=(2)]
 │         ├── variable: kv.v [type=int, outer=(2)]
 │         └── const: 5 [type=int]
 └── projections [outer=(5)]
      └── variable: column5 [type=int, outer=(5)]

build
SELECT SUM(kv.w) FROM kv GROUP BY LOWER(s) HAVING LOWER(kv.s) LIKE 'test%'
----
project
 ├── columns: column6:6(decimal)
 ├── select
 │    ├── columns: column5:5(string) column6:6(decimal)
 │    ├── group-by
 │    │    ├── columns: column5:5(string) column6:6(decimal)
 │    │    ├── grouping columns: column5:5(string)
 │    │    ├── project
 │    │    │    ├── columns: column5:5(string) kv.w:3(int)
 │    │    │    ├── scan kv
 │    │    │    │    └── columns: kv.k:1(int!null) kv.v:2(int) kv.w:3(int) kv.s:4(string)
 │    │    │    └── projections [outer=(3,4)]
 │    │    │         ├── function: lower [type=string, outer=(4)]
 │    │    │         │    └── variable: kv.s [type=string, outer=(4)]
 │    │    │         └── variable: kv.w [type=int, outer=(3)]
 │    │    └── aggregations [outer=(3)]
 │    │         └── function: sum [type=decimal, outer=(3)]
 │    │              └── variable: kv.w [type=int, outer=(3)]
 │    └── like [type=bool, outer=(4)]
 │         ├── function: lower [type=string, outer=(4)]
 │         │    └── variable: kv.s [type=string, outer=(4)]
 │         └── const: 'test%' [type=string]
 └── projections [outer=(6)]
      └── variable: column6 [type=decimal, outer=(6)]

build
SELECT SUM(kv.w) FROM kv GROUP BY LOWER(s) HAVING SUM(w) IN (4, 5, 6)
----
project
 ├── columns: column6:6(decimal)
 ├── select
 │    ├── columns: column5:5(string) column6:6(decimal)
 │    ├── group-by
 │    │    ├── columns: column5:5(string) column6:6(decimal)
 │    │    ├── grouping columns: column5:5(string)
 │    │    ├── project
 │    │    │    ├── columns: column5:5(string) kv.w:3(int)
 │    │    │    ├── scan kv
 │    │    │    │    └── columns: kv.k:1(int!null) kv.v:2(int) kv.w:3(int) kv.s:4(string)
 │    │    │    └── projections [outer=(3,4)]
 │    │    │         ├── function: lower [type=string, outer=(4)]
 │    │    │         │    └── variable: kv.s [type=string, outer=(4)]
 │    │    │         └── variable: kv.w [type=int, outer=(3)]
 │    │    └── aggregations [outer=(3)]
 │    │         └── function: sum [type=decimal, outer=(3)]
 │    │              └── variable: kv.w [type=int, outer=(3)]
 │    └── in [type=bool, outer=(6)]
 │         ├── variable: column6 [type=decimal, outer=(6)]
 │         └── tuple [type=tuple{decimal, decimal, decimal}]
 │              ├── const: 4 [type=decimal]
 │              ├── const: 5 [type=decimal]
 │              └── const: 6 [type=decimal]
 └── projections [outer=(6)]
      └── variable: column6 [type=decimal, outer=(6)]

build
SELECT t.kv.v FROM t.kv GROUP BY v, kv.k * w HAVING k * kv.w > 5
----
project
 ├── columns: v:2(int)
 ├── select
 │    ├── columns: kv.v:2(int) column5:5(int)
 │    ├── group-by
 │    │    ├── columns: kv.v:2(int) column5:5(int)
 │    │    ├── grouping columns: kv.v:2(int) column5:5(int)
 │    │    ├── project
 │    │    │    ├── columns: kv.v:2(int) column5:5(int)
 │    │    │    ├── scan kv
 │    │    │    │    └── columns: kv.k:1(int!null) kv.v:2(int) kv.w:3(int) kv.s:4(string)
 │    │    │    └── projections [outer=(1-3)]
 │    │    │         ├── variable: kv.v [type=int, outer=(2)]
 │    │    │         └── mult [type=int, outer=(1,3)]
 │    │    │              ├── variable: kv.k [type=int, outer=(1)]
 │    │    │              └── variable: kv.w [type=int, outer=(3)]
 │    │    └── aggregations
 │    └── gt [type=bool, outer=(1,3)]
 │         ├── mult [type=int, outer=(1,3)]
 │         │    ├── variable: kv.k [type=int, outer=(1)]
 │         │    └── variable: kv.w [type=int, outer=(3)]
 │         └── const: 5 [type=int]
 └── projections [outer=(2)]
      └── variable: kv.v [type=int, outer=(2)]

build
SELECT t.kv.v FROM t.kv GROUP BY v, kv.k * w HAVING w > 5
----
error: column "t.kv.w" must appear in the GROUP BY clause or be used in an aggregate function

build
SELECT UPPER(s), COUNT(s), COUNT(UPPER(s)) FROM t.kv GROUP BY UPPER(s) HAVING COUNT(s) > 1
----
select
 ├── columns: column5:5(string) column6:6(int) column8:8(int)
 ├── group-by
 │    ├── columns: column5:5(string) column6:6(int) column8:8(int)
 │    ├── grouping columns: column5:5(string)
 │    ├── project
 │    │    ├── columns: column5:5(string) kv.s:4(string) column7:7(string)
 │    │    ├── scan kv
 │    │    │    └── columns: kv.k:1(int!null) kv.v:2(int) kv.w:3(int) kv.s:4(string)
 │    │    └── projections [outer=(4)]
 │    │         ├── function: upper [type=string, outer=(4)]
 │    │         │    └── variable: kv.s [type=string, outer=(4)]
 │    │         ├── variable: kv.s [type=string, outer=(4)]
 │    │         └── function: upper [type=string, outer=(4)]
 │    │              └── variable: kv.s [type=string, outer=(4)]
 │    └── aggregations [outer=(4,7)]
 │         ├── function: count [type=int, outer=(4)]
 │         │    └── variable: kv.s [type=string, outer=(4)]
 │         └── function: count [type=int, outer=(7)]
 │              └── variable: column7 [type=string, outer=(7)]
 └── gt [type=bool, outer=(6)]
      ├── variable: column6 [type=int, outer=(6)]
      └── const: 1 [type=int]
