// Code generated by "stringer"; DO NOT EDIT.

package opt

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[InvalidRuleName-0]
	_ = x[SimplifyRootOrdering-1]
	_ = x[PruneRootCols-2]
	_ = x[SimplifyZeroCardinalityGroup-3]
	_ = x[NumManualRuleNames-4]
	_ = x[startAutoRule-4]
	_ = x[EliminateAggDistinct-5]
	_ = x[NormalizeNestedAnds-6]
	_ = x[SimplifyTrueAnd-7]
	_ = x[SimplifyAndTrue-8]
	_ = x[SimplifyFalseAnd-9]
	_ = x[SimplifyAndFalse-10]
	_ = x[SimplifyTrueOr-11]
	_ = x[SimplifyOrTrue-12]
	_ = x[SimplifyFalseOr-13]
	_ = x[SimplifyOrFalse-14]
	_ = x[SimplifyRange-15]
	_ = x[FoldNullAndOr-16]
	_ = x[FoldNotTrue-17]
	_ = x[FoldNotFalse-18]
	_ = x[FoldNotNull-19]
	_ = x[NegateComparison-20]
	_ = x[EliminateNot-21]
	_ = x[NegateAnd-22]
	_ = x[NegateOr-23]
	_ = x[ExtractRedundantConjunct-24]
	_ = x[CommuteVarInequality-25]
	_ = x[CommuteConstInequality-26]
	_ = x[NormalizeCmpPlusConst-27]
	_ = x[NormalizeCmpMinusConst-28]
	_ = x[NormalizeCmpConstMinus-29]
	_ = x[NormalizeTupleEquality-30]
	_ = x[FoldNullComparisonLeft-31]
	_ = x[FoldNullComparisonRight-32]
	_ = x[FoldIsNull-33]
	_ = x[FoldNonNullIsNull-34]
	_ = x[FoldNullTupleIsTupleNull-35]
	_ = x[FoldNonNullTupleIsTupleNull-36]
	_ = x[FoldIsNotNull-37]
	_ = x[FoldNonNullIsNotNull-38]
	_ = x[FoldNonNullTupleIsTupleNotNull-39]
	_ = x[FoldNullTupleIsTupleNotNull-40]
	_ = x[CommuteNullIs-41]
	_ = x[NormalizeCmpTimeZoneFunction-42]
	_ = x[NormalizeCmpTimeZoneFunctionTZ-43]
	_ = x[FoldEqTrue-44]
	_ = x[FoldEqFalse-45]
	_ = x[FoldNeTrue-46]
	_ = x[FoldNeFalse-47]
	_ = x[NormCycleTestRelTrueToFalse-48]
	_ = x[NormCycleTestRelFalseToTrue-49]
	_ = x[DecorrelateJoin-50]
	_ = x[DecorrelateProjectSet-51]
	_ = x[TryRemapJoinOuterColsRight-52]
	_ = x[TryRemapJoinOuterColsLeft-53]
	_ = x[TryRemapSelectOuterCols-54]
	_ = x[TryDecorrelateSelect-55]
	_ = x[TryDecorrelateProject-56]
	_ = x[TryDecorrelateProjectSelect-57]
	_ = x[TryDecorrelateProjectInnerJoin-58]
	_ = x[TryDecorrelateInnerJoin-59]
	_ = x[TryDecorrelateInnerLeftJoin-60]
	_ = x[TryDecorrelateGroupBy-61]
	_ = x[TryDecorrelateScalarGroupBy-62]
	_ = x[TryDecorrelateSemiJoin-63]
	_ = x[TryDecorrelateLimitOne-64]
	_ = x[TryDecorrelateLimit-65]
	_ = x[TryDecorrelateProjectSet-66]
	_ = x[TryDecorrelateWindow-67]
	_ = x[TryDecorrelateMax1Row-68]
	_ = x[HoistSelectExists-69]
	_ = x[HoistSelectNotExists-70]
	_ = x[HoistSelectSubquery-71]
	_ = x[HoistProjectSubquery-72]
	_ = x[HoistJoinSubquery-73]
	_ = x[HoistValuesSubquery-74]
	_ = x[HoistProjectSetSubquery-75]
	_ = x[NormalizeSelectAnyFilter-76]
	_ = x[NormalizeJoinAnyFilter-77]
	_ = x[NormalizeSelectNotAnyFilter-78]
	_ = x[NormalizeJoinNotAnyFilter-79]
	_ = x[FoldNullCast-80]
	_ = x[FoldNullUnary-81]
	_ = x[FoldNullBinaryLeft-82]
	_ = x[FoldNullBinaryRight-83]
	_ = x[FoldNullInNonEmpty-84]
	_ = x[FoldInEmpty-85]
	_ = x[FoldNotInEmpty-86]
	_ = x[FoldArray-87]
	_ = x[FoldBinary-88]
	_ = x[FoldUnary-89]
	_ = x[FoldComparison-90]
	_ = x[FoldCast-91]
	_ = x[FoldAssignmentCast-92]
	_ = x[FoldIndirection-93]
	_ = x[FoldColumnAccess-94]
	_ = x[FoldFunctionWithNullArg-95]
	_ = x[FoldFunction-96]
	_ = x[FoldEqualsAnyNull-97]
	_ = x[ConvertGroupByToDistinct-98]
	_ = x[EliminateGroupByProject-99]
	_ = x[EliminateJoinUnderGroupByLeft-100]
	_ = x[EliminateJoinUnderGroupByRight-101]
	_ = x[EliminateDistinct-102]
	_ = x[EliminateUpsertDistinct-103]
	_ = x[EliminateGroupBy-104]
	_ = x[ReduceGroupingCols-105]
	_ = x[ReduceNotNullGroupingCols-106]
	_ = x[EliminateAggDistinctForKeys-107]
	_ = x[EliminateAggFilteredDistinctForKeys-108]
	_ = x[EliminateDistinctNoColumns-109]
	_ = x[EliminateEnsureDistinctNoColumns-110]
	_ = x[EliminateDistinctOnValues-111]
	_ = x[PushAggDistinctIntoGroupBy-112]
	_ = x[PushAggFilterIntoScalarGroupBy-113]
	_ = x[ConvertCountToCountRows-114]
	_ = x[ConvertRegressionCountToCount-115]
	_ = x[FoldGroupingOperators-116]
	_ = x[InlineConstVar-117]
	_ = x[InlineProjectConstants-118]
	_ = x[InlineSelectConstants-119]
	_ = x[InlineJoinConstantsLeft-120]
	_ = x[InlineJoinConstantsRight-121]
	_ = x[PushSelectIntoInlinableProject-122]
	_ = x[InlineSelectVirtualColumns-123]
	_ = x[InlineProjectInProject-124]
	_ = x[InlineUDF-125]
	_ = x[CommuteRightJoin-126]
	_ = x[SimplifyJoinFilters-127]
	_ = x[DetectJoinContradiction-128]
	_ = x[PushFilterIntoJoinLeftAndRight-129]
	_ = x[MapFilterIntoJoinLeft-130]
	_ = x[MapFilterIntoJoinRight-131]
	_ = x[MapEqualityIntoJoinLeftAndRight-132]
	_ = x[PushFilterIntoJoinLeft-133]
	_ = x[PushFilterIntoJoinRight-134]
	_ = x[SimplifyLeftJoin-135]
	_ = x[SimplifyRightJoin-136]
	_ = x[EliminateSemiJoin-137]
	_ = x[SimplifyZeroCardinalitySemiJoin-138]
	_ = x[EliminateAntiJoin-139]
	_ = x[SimplifyZeroCardinalityAntiJoin-140]
	_ = x[EliminateJoinNoColsLeft-141]
	_ = x[EliminateJoinNoColsRight-142]
	_ = x[HoistJoinProjectRight-143]
	_ = x[HoistJoinProjectLeft-144]
	_ = x[SimplifyJoinNotNullEquality-145]
	_ = x[ExtractJoinComparisons-146]
	_ = x[SortFiltersInJoin-147]
	_ = x[LeftAssociateJoinsLeft-148]
	_ = x[LeftAssociateJoinsRight-149]
	_ = x[RightAssociateJoinsLeft-150]
	_ = x[RightAssociateJoinsRight-151]
	_ = x[RemoveJoinNotNullCondition-152]
	_ = x[ProjectInnerJoinValues-153]
	_ = x[EliminateLimit-154]
	_ = x[EliminateOffset-155]
	_ = x[PushLimitIntoProject-156]
	_ = x[PushOffsetIntoProject-157]
	_ = x[PushLimitIntoOffset-158]
	_ = x[PushLimitIntoOrdinality-159]
	_ = x[PushLimitIntoJoinLeft-160]
	_ = x[PushLimitIntoJoinRight-161]
	_ = x[FoldLimits-162]
	_ = x[AssociateLimitJoinsLeft-163]
	_ = x[AssociateLimitJoinsRight-164]
	_ = x[EliminateMax1Row-165]
	_ = x[SimplifyPartialIndexProjections-166]
	_ = x[FoldPlusZero-167]
	_ = x[FoldZeroPlus-168]
	_ = x[FoldMinusZero-169]
	_ = x[FoldMultOne-170]
	_ = x[FoldOneMult-171]
	_ = x[FoldDivOne-172]
	_ = x[FoldFloorDivOne-173]
	_ = x[InvertMinus-174]
	_ = x[EliminateUnaryMinus-175]
	_ = x[SimplifyLimitOrdering-176]
	_ = x[SimplifyOffsetOrdering-177]
	_ = x[SimplifyGroupByOrdering-178]
	_ = x[SimplifyOrdinalityOrdering-179]
	_ = x[SimplifyExplainOrdering-180]
	_ = x[SimplifyWithBindingOrdering-181]
	_ = x[EliminateJoinUnderProjectLeft-182]
	_ = x[EliminateJoinUnderProjectRight-183]
	_ = x[EliminateProject-184]
	_ = x[MergeProjects-185]
	_ = x[MergeProjectWithValues-186]
	_ = x[PushColumnRemappingIntoValues-187]
	_ = x[PushAssignmentCastsIntoValues-188]
	_ = x[FoldTupleAccessIntoValues-189]
	_ = x[FoldJSONAccessIntoValues-190]
	_ = x[ConvertZipArraysToValues-191]
	_ = x[PruneProjectCols-192]
	_ = x[PruneScanCols-193]
	_ = x[PruneSelectCols-194]
	_ = x[PruneLimitCols-195]
	_ = x[PruneOffsetCols-196]
	_ = x[PruneJoinLeftCols-197]
	_ = x[PruneJoinRightCols-198]
	_ = x[PruneSemiAntiJoinRightCols-199]
	_ = x[PruneAggCols-200]
	_ = x[PruneGroupByCols-201]
	_ = x[PruneValuesCols-202]
	_ = x[PruneOrdinalityCols-203]
	_ = x[PruneExplainCols-204]
	_ = x[PruneProjectSetCols-205]
	_ = x[PruneWindowOutputCols-206]
	_ = x[PruneWindowInputCols-207]
	_ = x[PruneMutationFetchCols-208]
	_ = x[PruneMutationInputCols-209]
	_ = x[PruneMutationReturnCols-210]
	_ = x[PruneInsertReturnCols-211]
	_ = x[PruneWithScanCols-212]
	_ = x[PruneWithCols-213]
	_ = x[PruneUnionAllCols-214]
	_ = x[RejectNullsLeftJoin-215]
	_ = x[RejectNullsRightJoin-216]
	_ = x[RejectNullsGroupBy-217]
	_ = x[RejectNullsUnderJoinLeft-218]
	_ = x[RejectNullsUnderJoinRight-219]
	_ = x[RejectNullsProject-220]
	_ = x[CommuteVar-221]
	_ = x[CommuteConst-222]
	_ = x[EliminateCoalesce-223]
	_ = x[SimplifyCoalesce-224]
	_ = x[EliminateCast-225]
	_ = x[InlineAnyWithScanOfValues-226]
	_ = x[NormalizeInConst-227]
	_ = x[FoldInNull-228]
	_ = x[SimplifyInSingleElement-229]
	_ = x[SimplifyNotInSingleElement-230]
	_ = x[UnifyComparisonTypes-231]
	_ = x[EliminateExistsZeroRows-232]
	_ = x[EliminateExistsProject-233]
	_ = x[EliminateExistsGroupBy-234]
	_ = x[InlineExistsSelectTuple-235]
	_ = x[ConvertUncorrelatedExistsToCoalesceSubquery-236]
	_ = x[EliminateExistsLimit-237]
	_ = x[EliminateConstValueSubquery-238]
	_ = x[SimplifyCaseWhenConstValue-239]
	_ = x[InlineAnyValuesSingleCol-240]
	_ = x[InlineAnyValuesMultiCol-241]
	_ = x[SimplifyEqualsAnyTuple-242]
	_ = x[SimplifyAnyScalarArray-243]
	_ = x[FoldCollate-244]
	_ = x[NormalizeArrayFlattenToAgg-245]
	_ = x[SimplifySameVarEqualities-246]
	_ = x[SimplifySameVarInequalities-247]
	_ = x[SimplifyNotDisjoint-248]
	_ = x[ConvertJSONSubscriptToFetchValue-249]
	_ = x[SimplifySelectFilters-250]
	_ = x[ConsolidateSelectFilters-251]
	_ = x[DeduplicateSelectFilters-252]
	_ = x[EliminateSelect-253]
	_ = x[MergeSelects-254]
	_ = x[PushSelectIntoProject-255]
	_ = x[PushSelectIntoOrdinality-256]
	_ = x[MergeSelectInnerJoin-257]
	_ = x[PushSelectCondLeftIntoJoinLeftAndRight-258]
	_ = x[PushSelectIntoJoinLeft-259]
	_ = x[PushSelectIntoGroupBy-260]
	_ = x[RemoveNotNullCondition-261]
	_ = x[SimplifyIsNullCondition-262]
	_ = x[PushSelectIntoProjectSet-263]
	_ = x[PushFilterIntoSetOp-264]
	_ = x[EliminateSetLeft-265]
	_ = x[EliminateSetRight-266]
	_ = x[EliminateDistinctSetLeft-267]
	_ = x[EliminateDistinctSetRight-268]
	_ = x[SimplifyExcept-269]
	_ = x[SimplifyIntersectLeft-270]
	_ = x[SimplifyIntersectRight-271]
	_ = x[ConvertUnionToDistinctUnionAll-272]
	_ = x[EliminateWindow-273]
	_ = x[ReduceWindowPartitionCols-274]
	_ = x[SimplifyWindowOrdering-275]
	_ = x[PushSelectIntoWindow-276]
	_ = x[PushLimitIntoWindow-277]
	_ = x[InlineWith-278]
	_ = x[ApplyLimitToRecursiveCTEScan-279]
	_ = x[TryAddLimitToRecursiveBranch-280]
	_ = x[startExploreRule-281]
	_ = x[MemoCycleTestRelRule-282]
	_ = x[MemoCycleTestRelRuleFilter-283]
	_ = x[ReplaceScalarMinMaxWithScalarSubqueries-284]
	_ = x[ReplaceFilteredScalarMinMaxWithSubqueries-285]
	_ = x[ReplaceScalarMinMaxWithLimit-286]
	_ = x[ReplaceMinWithLimit-287]
	_ = x[ReplaceMaxWithLimit-288]
	_ = x[GenerateStreamingGroupBy-289]
	_ = x[SplitGroupByScanIntoUnionScans-290]
	_ = x[SplitGroupByFilteredScanIntoUnionScans-291]
	_ = x[EliminateIndexJoinOrProjectInsideGroupBy-292]
	_ = x[GenerateLimitedGroupByScans-293]
	_ = x[InsertFastPath-294]
	_ = x[ReorderJoins-295]
	_ = x[CommuteLeftJoin-296]
	_ = x[CommuteSemiJoin-297]
	_ = x[ConvertSemiToInnerJoin-298]
	_ = x[SplitDisjunctionOfJoinTerms-299]
	_ = x[SplitDisjunctionOfAntiJoinTerms-300]
	_ = x[GenerateMergeJoins-301]
	_ = x[GenerateLookupJoins-302]
	_ = x[GenerateInvertedJoins-303]
	_ = x[GenerateInvertedJoinsFromSelect-304]
	_ = x[GenerateLookupJoinsWithFilter-305]
	_ = x[GenerateLookupJoinsWithVirtualCols-306]
	_ = x[GenerateLookupJoinsWithVirtualColsAndFilter-307]
	_ = x[PushJoinIntoIndexJoin-308]
	_ = x[HoistProjectFromInnerJoin-309]
	_ = x[HoistProjectFromLeftJoin-310]
	_ = x[GenerateLocalityOptimizedAntiJoin-311]
	_ = x[GenerateLocalityOptimizedLookupJoin-312]
	_ = x[GenerateLocalityOptimizedSearchOfLocalityOptimizedJoin-313]
	_ = x[GenerateLocalityOptimizedSearchOfLookupJoins-314]
	_ = x[GenerateLimitedScans-315]
	_ = x[PushLimitIntoFilteredScan-316]
	_ = x[PushLimitIntoIndexJoin-317]
	_ = x[PushOffsetIntoIndexJoin-318]
	_ = x[SplitLimitedScanIntoUnionScans-319]
	_ = x[SplitLimitedSelectIntoUnionSelects-320]
	_ = x[GenerateTopK-321]
	_ = x[GenerateLimitedTopKScans-322]
	_ = x[GeneratePartialOrderTopK-323]
	_ = x[GenerateStreamingGroupByLimitOrderingHint-324]
	_ = x[EliminateIndexJoinInsideProject-325]
	_ = x[GenerateIndexScans-326]
	_ = x[GenerateLocalityOptimizedScan-327]
	_ = x[GeneratePartialIndexScans-328]
	_ = x[GenerateConstrainedScans-329]
	_ = x[GenerateInvertedIndexScans-330]
	_ = x[GenerateTrigramSimilarityInvertedIndexScans-331]
	_ = x[GenerateZigzagJoins-332]
	_ = x[GenerateInvertedIndexZigzagJoins-333]
	_ = x[SplitDisjunction-334]
	_ = x[SplitDisjunctionAddKey-335]
	_ = x[GenerateStreamingSetOp-336]
	_ = x[NumRuleNames-337]
}

func (i RuleName) String() string {
	switch i {
	case InvalidRuleName:
		return "InvalidRuleName"
	case SimplifyRootOrdering:
		return "SimplifyRootOrdering"
	case PruneRootCols:
		return "PruneRootCols"
	case SimplifyZeroCardinalityGroup:
		return "SimplifyZeroCardinalityGroup"
	case NumManualRuleNames:
		return "NumManualRuleNames"
	case EliminateAggDistinct:
		return "EliminateAggDistinct"
	case NormalizeNestedAnds:
		return "NormalizeNestedAnds"
	case SimplifyTrueAnd:
		return "SimplifyTrueAnd"
	case SimplifyAndTrue:
		return "SimplifyAndTrue"
	case SimplifyFalseAnd:
		return "SimplifyFalseAnd"
	case SimplifyAndFalse:
		return "SimplifyAndFalse"
	case SimplifyTrueOr:
		return "SimplifyTrueOr"
	case SimplifyOrTrue:
		return "SimplifyOrTrue"
	case SimplifyFalseOr:
		return "SimplifyFalseOr"
	case SimplifyOrFalse:
		return "SimplifyOrFalse"
	case SimplifyRange:
		return "SimplifyRange"
	case FoldNullAndOr:
		return "FoldNullAndOr"
	case FoldNotTrue:
		return "FoldNotTrue"
	case FoldNotFalse:
		return "FoldNotFalse"
	case FoldNotNull:
		return "FoldNotNull"
	case NegateComparison:
		return "NegateComparison"
	case EliminateNot:
		return "EliminateNot"
	case NegateAnd:
		return "NegateAnd"
	case NegateOr:
		return "NegateOr"
	case ExtractRedundantConjunct:
		return "ExtractRedundantConjunct"
	case CommuteVarInequality:
		return "CommuteVarInequality"
	case CommuteConstInequality:
		return "CommuteConstInequality"
	case NormalizeCmpPlusConst:
		return "NormalizeCmpPlusConst"
	case NormalizeCmpMinusConst:
		return "NormalizeCmpMinusConst"
	case NormalizeCmpConstMinus:
		return "NormalizeCmpConstMinus"
	case NormalizeTupleEquality:
		return "NormalizeTupleEquality"
	case FoldNullComparisonLeft:
		return "FoldNullComparisonLeft"
	case FoldNullComparisonRight:
		return "FoldNullComparisonRight"
	case FoldIsNull:
		return "FoldIsNull"
	case FoldNonNullIsNull:
		return "FoldNonNullIsNull"
	case FoldNullTupleIsTupleNull:
		return "FoldNullTupleIsTupleNull"
	case FoldNonNullTupleIsTupleNull:
		return "FoldNonNullTupleIsTupleNull"
	case FoldIsNotNull:
		return "FoldIsNotNull"
	case FoldNonNullIsNotNull:
		return "FoldNonNullIsNotNull"
	case FoldNonNullTupleIsTupleNotNull:
		return "FoldNonNullTupleIsTupleNotNull"
	case FoldNullTupleIsTupleNotNull:
		return "FoldNullTupleIsTupleNotNull"
	case CommuteNullIs:
		return "CommuteNullIs"
	case NormalizeCmpTimeZoneFunction:
		return "NormalizeCmpTimeZoneFunction"
	case NormalizeCmpTimeZoneFunctionTZ:
		return "NormalizeCmpTimeZoneFunctionTZ"
	case FoldEqTrue:
		return "FoldEqTrue"
	case FoldEqFalse:
		return "FoldEqFalse"
	case FoldNeTrue:
		return "FoldNeTrue"
	case FoldNeFalse:
		return "FoldNeFalse"
	case NormCycleTestRelTrueToFalse:
		return "NormCycleTestRelTrueToFalse"
	case NormCycleTestRelFalseToTrue:
		return "NormCycleTestRelFalseToTrue"
	case DecorrelateJoin:
		return "DecorrelateJoin"
	case DecorrelateProjectSet:
		return "DecorrelateProjectSet"
	case TryRemapJoinOuterColsRight:
		return "TryRemapJoinOuterColsRight"
	case TryRemapJoinOuterColsLeft:
		return "TryRemapJoinOuterColsLeft"
	case TryRemapSelectOuterCols:
		return "TryRemapSelectOuterCols"
	case TryDecorrelateSelect:
		return "TryDecorrelateSelect"
	case TryDecorrelateProject:
		return "TryDecorrelateProject"
	case TryDecorrelateProjectSelect:
		return "TryDecorrelateProjectSelect"
	case TryDecorrelateProjectInnerJoin:
		return "TryDecorrelateProjectInnerJoin"
	case TryDecorrelateInnerJoin:
		return "TryDecorrelateInnerJoin"
	case TryDecorrelateInnerLeftJoin:
		return "TryDecorrelateInnerLeftJoin"
	case TryDecorrelateGroupBy:
		return "TryDecorrelateGroupBy"
	case TryDecorrelateScalarGroupBy:
		return "TryDecorrelateScalarGroupBy"
	case TryDecorrelateSemiJoin:
		return "TryDecorrelateSemiJoin"
	case TryDecorrelateLimitOne:
		return "TryDecorrelateLimitOne"
	case TryDecorrelateLimit:
		return "TryDecorrelateLimit"
	case TryDecorrelateProjectSet:
		return "TryDecorrelateProjectSet"
	case TryDecorrelateWindow:
		return "TryDecorrelateWindow"
	case TryDecorrelateMax1Row:
		return "TryDecorrelateMax1Row"
	case HoistSelectExists:
		return "HoistSelectExists"
	case HoistSelectNotExists:
		return "HoistSelectNotExists"
	case HoistSelectSubquery:
		return "HoistSelectSubquery"
	case HoistProjectSubquery:
		return "HoistProjectSubquery"
	case HoistJoinSubquery:
		return "HoistJoinSubquery"
	case HoistValuesSubquery:
		return "HoistValuesSubquery"
	case HoistProjectSetSubquery:
		return "HoistProjectSetSubquery"
	case NormalizeSelectAnyFilter:
		return "NormalizeSelectAnyFilter"
	case NormalizeJoinAnyFilter:
		return "NormalizeJoinAnyFilter"
	case NormalizeSelectNotAnyFilter:
		return "NormalizeSelectNotAnyFilter"
	case NormalizeJoinNotAnyFilter:
		return "NormalizeJoinNotAnyFilter"
	case FoldNullCast:
		return "FoldNullCast"
	case FoldNullUnary:
		return "FoldNullUnary"
	case FoldNullBinaryLeft:
		return "FoldNullBinaryLeft"
	case FoldNullBinaryRight:
		return "FoldNullBinaryRight"
	case FoldNullInNonEmpty:
		return "FoldNullInNonEmpty"
	case FoldInEmpty:
		return "FoldInEmpty"
	case FoldNotInEmpty:
		return "FoldNotInEmpty"
	case FoldArray:
		return "FoldArray"
	case FoldBinary:
		return "FoldBinary"
	case FoldUnary:
		return "FoldUnary"
	case FoldComparison:
		return "FoldComparison"
	case FoldCast:
		return "FoldCast"
	case FoldAssignmentCast:
		return "FoldAssignmentCast"
	case FoldIndirection:
		return "FoldIndirection"
	case FoldColumnAccess:
		return "FoldColumnAccess"
	case FoldFunctionWithNullArg:
		return "FoldFunctionWithNullArg"
	case FoldFunction:
		return "FoldFunction"
	case FoldEqualsAnyNull:
		return "FoldEqualsAnyNull"
	case ConvertGroupByToDistinct:
		return "ConvertGroupByToDistinct"
	case EliminateGroupByProject:
		return "EliminateGroupByProject"
	case EliminateJoinUnderGroupByLeft:
		return "EliminateJoinUnderGroupByLeft"
	case EliminateJoinUnderGroupByRight:
		return "EliminateJoinUnderGroupByRight"
	case EliminateDistinct:
		return "EliminateDistinct"
	case EliminateUpsertDistinct:
		return "EliminateUpsertDistinct"
	case EliminateGroupBy:
		return "EliminateGroupBy"
	case ReduceGroupingCols:
		return "ReduceGroupingCols"
	case ReduceNotNullGroupingCols:
		return "ReduceNotNullGroupingCols"
	case EliminateAggDistinctForKeys:
		return "EliminateAggDistinctForKeys"
	case EliminateAggFilteredDistinctForKeys:
		return "EliminateAggFilteredDistinctForKeys"
	case EliminateDistinctNoColumns:
		return "EliminateDistinctNoColumns"
	case EliminateEnsureDistinctNoColumns:
		return "EliminateEnsureDistinctNoColumns"
	case EliminateDistinctOnValues:
		return "EliminateDistinctOnValues"
	case PushAggDistinctIntoGroupBy:
		return "PushAggDistinctIntoGroupBy"
	case PushAggFilterIntoScalarGroupBy:
		return "PushAggFilterIntoScalarGroupBy"
	case ConvertCountToCountRows:
		return "ConvertCountToCountRows"
	case ConvertRegressionCountToCount:
		return "ConvertRegressionCountToCount"
	case FoldGroupingOperators:
		return "FoldGroupingOperators"
	case InlineConstVar:
		return "InlineConstVar"
	case InlineProjectConstants:
		return "InlineProjectConstants"
	case InlineSelectConstants:
		return "InlineSelectConstants"
	case InlineJoinConstantsLeft:
		return "InlineJoinConstantsLeft"
	case InlineJoinConstantsRight:
		return "InlineJoinConstantsRight"
	case PushSelectIntoInlinableProject:
		return "PushSelectIntoInlinableProject"
	case InlineSelectVirtualColumns:
		return "InlineSelectVirtualColumns"
	case InlineProjectInProject:
		return "InlineProjectInProject"
	case InlineUDF:
		return "InlineUDF"
	case CommuteRightJoin:
		return "CommuteRightJoin"
	case SimplifyJoinFilters:
		return "SimplifyJoinFilters"
	case DetectJoinContradiction:
		return "DetectJoinContradiction"
	case PushFilterIntoJoinLeftAndRight:
		return "PushFilterIntoJoinLeftAndRight"
	case MapFilterIntoJoinLeft:
		return "MapFilterIntoJoinLeft"
	case MapFilterIntoJoinRight:
		return "MapFilterIntoJoinRight"
	case MapEqualityIntoJoinLeftAndRight:
		return "MapEqualityIntoJoinLeftAndRight"
	case PushFilterIntoJoinLeft:
		return "PushFilterIntoJoinLeft"
	case PushFilterIntoJoinRight:
		return "PushFilterIntoJoinRight"
	case SimplifyLeftJoin:
		return "SimplifyLeftJoin"
	case SimplifyRightJoin:
		return "SimplifyRightJoin"
	case EliminateSemiJoin:
		return "EliminateSemiJoin"
	case SimplifyZeroCardinalitySemiJoin:
		return "SimplifyZeroCardinalitySemiJoin"
	case EliminateAntiJoin:
		return "EliminateAntiJoin"
	case SimplifyZeroCardinalityAntiJoin:
		return "SimplifyZeroCardinalityAntiJoin"
	case EliminateJoinNoColsLeft:
		return "EliminateJoinNoColsLeft"
	case EliminateJoinNoColsRight:
		return "EliminateJoinNoColsRight"
	case HoistJoinProjectRight:
		return "HoistJoinProjectRight"
	case HoistJoinProjectLeft:
		return "HoistJoinProjectLeft"
	case SimplifyJoinNotNullEquality:
		return "SimplifyJoinNotNullEquality"
	case ExtractJoinComparisons:
		return "ExtractJoinComparisons"
	case SortFiltersInJoin:
		return "SortFiltersInJoin"
	case LeftAssociateJoinsLeft:
		return "LeftAssociateJoinsLeft"
	case LeftAssociateJoinsRight:
		return "LeftAssociateJoinsRight"
	case RightAssociateJoinsLeft:
		return "RightAssociateJoinsLeft"
	case RightAssociateJoinsRight:
		return "RightAssociateJoinsRight"
	case RemoveJoinNotNullCondition:
		return "RemoveJoinNotNullCondition"
	case ProjectInnerJoinValues:
		return "ProjectInnerJoinValues"
	case EliminateLimit:
		return "EliminateLimit"
	case EliminateOffset:
		return "EliminateOffset"
	case PushLimitIntoProject:
		return "PushLimitIntoProject"
	case PushOffsetIntoProject:
		return "PushOffsetIntoProject"
	case PushLimitIntoOffset:
		return "PushLimitIntoOffset"
	case PushLimitIntoOrdinality:
		return "PushLimitIntoOrdinality"
	case PushLimitIntoJoinLeft:
		return "PushLimitIntoJoinLeft"
	case PushLimitIntoJoinRight:
		return "PushLimitIntoJoinRight"
	case FoldLimits:
		return "FoldLimits"
	case AssociateLimitJoinsLeft:
		return "AssociateLimitJoinsLeft"
	case AssociateLimitJoinsRight:
		return "AssociateLimitJoinsRight"
	case EliminateMax1Row:
		return "EliminateMax1Row"
	case SimplifyPartialIndexProjections:
		return "SimplifyPartialIndexProjections"
	case FoldPlusZero:
		return "FoldPlusZero"
	case FoldZeroPlus:
		return "FoldZeroPlus"
	case FoldMinusZero:
		return "FoldMinusZero"
	case FoldMultOne:
		return "FoldMultOne"
	case FoldOneMult:
		return "FoldOneMult"
	case FoldDivOne:
		return "FoldDivOne"
	case FoldFloorDivOne:
		return "FoldFloorDivOne"
	case InvertMinus:
		return "InvertMinus"
	case EliminateUnaryMinus:
		return "EliminateUnaryMinus"
	case SimplifyLimitOrdering:
		return "SimplifyLimitOrdering"
	case SimplifyOffsetOrdering:
		return "SimplifyOffsetOrdering"
	case SimplifyGroupByOrdering:
		return "SimplifyGroupByOrdering"
	case SimplifyOrdinalityOrdering:
		return "SimplifyOrdinalityOrdering"
	case SimplifyExplainOrdering:
		return "SimplifyExplainOrdering"
	case SimplifyWithBindingOrdering:
		return "SimplifyWithBindingOrdering"
	case EliminateJoinUnderProjectLeft:
		return "EliminateJoinUnderProjectLeft"
	case EliminateJoinUnderProjectRight:
		return "EliminateJoinUnderProjectRight"
	case EliminateProject:
		return "EliminateProject"
	case MergeProjects:
		return "MergeProjects"
	case MergeProjectWithValues:
		return "MergeProjectWithValues"
	case PushColumnRemappingIntoValues:
		return "PushColumnRemappingIntoValues"
	case PushAssignmentCastsIntoValues:
		return "PushAssignmentCastsIntoValues"
	case FoldTupleAccessIntoValues:
		return "FoldTupleAccessIntoValues"
	case FoldJSONAccessIntoValues:
		return "FoldJSONAccessIntoValues"
	case ConvertZipArraysToValues:
		return "ConvertZipArraysToValues"
	case PruneProjectCols:
		return "PruneProjectCols"
	case PruneScanCols:
		return "PruneScanCols"
	case PruneSelectCols:
		return "PruneSelectCols"
	case PruneLimitCols:
		return "PruneLimitCols"
	case PruneOffsetCols:
		return "PruneOffsetCols"
	case PruneJoinLeftCols:
		return "PruneJoinLeftCols"
	case PruneJoinRightCols:
		return "PruneJoinRightCols"
	case PruneSemiAntiJoinRightCols:
		return "PruneSemiAntiJoinRightCols"
	case PruneAggCols:
		return "PruneAggCols"
	case PruneGroupByCols:
		return "PruneGroupByCols"
	case PruneValuesCols:
		return "PruneValuesCols"
	case PruneOrdinalityCols:
		return "PruneOrdinalityCols"
	case PruneExplainCols:
		return "PruneExplainCols"
	case PruneProjectSetCols:
		return "PruneProjectSetCols"
	case PruneWindowOutputCols:
		return "PruneWindowOutputCols"
	case PruneWindowInputCols:
		return "PruneWindowInputCols"
	case PruneMutationFetchCols:
		return "PruneMutationFetchCols"
	case PruneMutationInputCols:
		return "PruneMutationInputCols"
	case PruneMutationReturnCols:
		return "PruneMutationReturnCols"
	case PruneInsertReturnCols:
		return "PruneInsertReturnCols"
	case PruneWithScanCols:
		return "PruneWithScanCols"
	case PruneWithCols:
		return "PruneWithCols"
	case PruneUnionAllCols:
		return "PruneUnionAllCols"
	case RejectNullsLeftJoin:
		return "RejectNullsLeftJoin"
	case RejectNullsRightJoin:
		return "RejectNullsRightJoin"
	case RejectNullsGroupBy:
		return "RejectNullsGroupBy"
	case RejectNullsUnderJoinLeft:
		return "RejectNullsUnderJoinLeft"
	case RejectNullsUnderJoinRight:
		return "RejectNullsUnderJoinRight"
	case RejectNullsProject:
		return "RejectNullsProject"
	case CommuteVar:
		return "CommuteVar"
	case CommuteConst:
		return "CommuteConst"
	case EliminateCoalesce:
		return "EliminateCoalesce"
	case SimplifyCoalesce:
		return "SimplifyCoalesce"
	case EliminateCast:
		return "EliminateCast"
	case InlineAnyWithScanOfValues:
		return "InlineAnyWithScanOfValues"
	case NormalizeInConst:
		return "NormalizeInConst"
	case FoldInNull:
		return "FoldInNull"
	case SimplifyInSingleElement:
		return "SimplifyInSingleElement"
	case SimplifyNotInSingleElement:
		return "SimplifyNotInSingleElement"
	case UnifyComparisonTypes:
		return "UnifyComparisonTypes"
	case EliminateExistsZeroRows:
		return "EliminateExistsZeroRows"
	case EliminateExistsProject:
		return "EliminateExistsProject"
	case EliminateExistsGroupBy:
		return "EliminateExistsGroupBy"
	case InlineExistsSelectTuple:
		return "InlineExistsSelectTuple"
	case ConvertUncorrelatedExistsToCoalesceSubquery:
		return "ConvertUncorrelatedExistsToCoalesceSubquery"
	case EliminateExistsLimit:
		return "EliminateExistsLimit"
	case EliminateConstValueSubquery:
		return "EliminateConstValueSubquery"
	case SimplifyCaseWhenConstValue:
		return "SimplifyCaseWhenConstValue"
	case InlineAnyValuesSingleCol:
		return "InlineAnyValuesSingleCol"
	case InlineAnyValuesMultiCol:
		return "InlineAnyValuesMultiCol"
	case SimplifyEqualsAnyTuple:
		return "SimplifyEqualsAnyTuple"
	case SimplifyAnyScalarArray:
		return "SimplifyAnyScalarArray"
	case FoldCollate:
		return "FoldCollate"
	case NormalizeArrayFlattenToAgg:
		return "NormalizeArrayFlattenToAgg"
	case SimplifySameVarEqualities:
		return "SimplifySameVarEqualities"
	case SimplifySameVarInequalities:
		return "SimplifySameVarInequalities"
	case SimplifyNotDisjoint:
		return "SimplifyNotDisjoint"
	case ConvertJSONSubscriptToFetchValue:
		return "ConvertJSONSubscriptToFetchValue"
	case SimplifySelectFilters:
		return "SimplifySelectFilters"
	case ConsolidateSelectFilters:
		return "ConsolidateSelectFilters"
	case DeduplicateSelectFilters:
		return "DeduplicateSelectFilters"
	case EliminateSelect:
		return "EliminateSelect"
	case MergeSelects:
		return "MergeSelects"
	case PushSelectIntoProject:
		return "PushSelectIntoProject"
	case PushSelectIntoOrdinality:
		return "PushSelectIntoOrdinality"
	case MergeSelectInnerJoin:
		return "MergeSelectInnerJoin"
	case PushSelectCondLeftIntoJoinLeftAndRight:
		return "PushSelectCondLeftIntoJoinLeftAndRight"
	case PushSelectIntoJoinLeft:
		return "PushSelectIntoJoinLeft"
	case PushSelectIntoGroupBy:
		return "PushSelectIntoGroupBy"
	case RemoveNotNullCondition:
		return "RemoveNotNullCondition"
	case SimplifyIsNullCondition:
		return "SimplifyIsNullCondition"
	case PushSelectIntoProjectSet:
		return "PushSelectIntoProjectSet"
	case PushFilterIntoSetOp:
		return "PushFilterIntoSetOp"
	case EliminateSetLeft:
		return "EliminateSetLeft"
	case EliminateSetRight:
		return "EliminateSetRight"
	case EliminateDistinctSetLeft:
		return "EliminateDistinctSetLeft"
	case EliminateDistinctSetRight:
		return "EliminateDistinctSetRight"
	case SimplifyExcept:
		return "SimplifyExcept"
	case SimplifyIntersectLeft:
		return "SimplifyIntersectLeft"
	case SimplifyIntersectRight:
		return "SimplifyIntersectRight"
	case ConvertUnionToDistinctUnionAll:
		return "ConvertUnionToDistinctUnionAll"
	case EliminateWindow:
		return "EliminateWindow"
	case ReduceWindowPartitionCols:
		return "ReduceWindowPartitionCols"
	case SimplifyWindowOrdering:
		return "SimplifyWindowOrdering"
	case PushSelectIntoWindow:
		return "PushSelectIntoWindow"
	case PushLimitIntoWindow:
		return "PushLimitIntoWindow"
	case InlineWith:
		return "InlineWith"
	case ApplyLimitToRecursiveCTEScan:
		return "ApplyLimitToRecursiveCTEScan"
	case TryAddLimitToRecursiveBranch:
		return "TryAddLimitToRecursiveBranch"
	case startExploreRule:
		return "startExploreRule"
	case MemoCycleTestRelRule:
		return "MemoCycleTestRelRule"
	case MemoCycleTestRelRuleFilter:
		return "MemoCycleTestRelRuleFilter"
	case ReplaceScalarMinMaxWithScalarSubqueries:
		return "ReplaceScalarMinMaxWithScalarSubqueries"
	case ReplaceFilteredScalarMinMaxWithSubqueries:
		return "ReplaceFilteredScalarMinMaxWithSubqueries"
	case ReplaceScalarMinMaxWithLimit:
		return "ReplaceScalarMinMaxWithLimit"
	case ReplaceMinWithLimit:
		return "ReplaceMinWithLimit"
	case ReplaceMaxWithLimit:
		return "ReplaceMaxWithLimit"
	case GenerateStreamingGroupBy:
		return "GenerateStreamingGroupBy"
	case SplitGroupByScanIntoUnionScans:
		return "SplitGroupByScanIntoUnionScans"
	case SplitGroupByFilteredScanIntoUnionScans:
		return "SplitGroupByFilteredScanIntoUnionScans"
	case EliminateIndexJoinOrProjectInsideGroupBy:
		return "EliminateIndexJoinOrProjectInsideGroupBy"
	case GenerateLimitedGroupByScans:
		return "GenerateLimitedGroupByScans"
	case InsertFastPath:
		return "InsertFastPath"
	case ReorderJoins:
		return "ReorderJoins"
	case CommuteLeftJoin:
		return "CommuteLeftJoin"
	case CommuteSemiJoin:
		return "CommuteSemiJoin"
	case ConvertSemiToInnerJoin:
		return "ConvertSemiToInnerJoin"
	case SplitDisjunctionOfJoinTerms:
		return "SplitDisjunctionOfJoinTerms"
	case SplitDisjunctionOfAntiJoinTerms:
		return "SplitDisjunctionOfAntiJoinTerms"
	case GenerateMergeJoins:
		return "GenerateMergeJoins"
	case GenerateLookupJoins:
		return "GenerateLookupJoins"
	case GenerateInvertedJoins:
		return "GenerateInvertedJoins"
	case GenerateInvertedJoinsFromSelect:
		return "GenerateInvertedJoinsFromSelect"
	case GenerateLookupJoinsWithFilter:
		return "GenerateLookupJoinsWithFilter"
	case GenerateLookupJoinsWithVirtualCols:
		return "GenerateLookupJoinsWithVirtualCols"
	case GenerateLookupJoinsWithVirtualColsAndFilter:
		return "GenerateLookupJoinsWithVirtualColsAndFilter"
	case PushJoinIntoIndexJoin:
		return "PushJoinIntoIndexJoin"
	case HoistProjectFromInnerJoin:
		return "HoistProjectFromInnerJoin"
	case HoistProjectFromLeftJoin:
		return "HoistProjectFromLeftJoin"
	case GenerateLocalityOptimizedAntiJoin:
		return "GenerateLocalityOptimizedAntiJoin"
	case GenerateLocalityOptimizedLookupJoin:
		return "GenerateLocalityOptimizedLookupJoin"
	case GenerateLocalityOptimizedSearchOfLocalityOptimizedJoin:
		return "GenerateLocalityOptimizedSearchOfLocalityOptimizedJoin"
	case GenerateLocalityOptimizedSearchOfLookupJoins:
		return "GenerateLocalityOptimizedSearchOfLookupJoins"
	case GenerateLimitedScans:
		return "GenerateLimitedScans"
	case PushLimitIntoFilteredScan:
		return "PushLimitIntoFilteredScan"
	case PushLimitIntoIndexJoin:
		return "PushLimitIntoIndexJoin"
	case PushOffsetIntoIndexJoin:
		return "PushOffsetIntoIndexJoin"
	case SplitLimitedScanIntoUnionScans:
		return "SplitLimitedScanIntoUnionScans"
	case SplitLimitedSelectIntoUnionSelects:
		return "SplitLimitedSelectIntoUnionSelects"
	case GenerateTopK:
		return "GenerateTopK"
	case GenerateLimitedTopKScans:
		return "GenerateLimitedTopKScans"
	case GeneratePartialOrderTopK:
		return "GeneratePartialOrderTopK"
	case GenerateStreamingGroupByLimitOrderingHint:
		return "GenerateStreamingGroupByLimitOrderingHint"
	case EliminateIndexJoinInsideProject:
		return "EliminateIndexJoinInsideProject"
	case GenerateIndexScans:
		return "GenerateIndexScans"
	case GenerateLocalityOptimizedScan:
		return "GenerateLocalityOptimizedScan"
	case GeneratePartialIndexScans:
		return "GeneratePartialIndexScans"
	case GenerateConstrainedScans:
		return "GenerateConstrainedScans"
	case GenerateInvertedIndexScans:
		return "GenerateInvertedIndexScans"
	case GenerateTrigramSimilarityInvertedIndexScans:
		return "GenerateTrigramSimilarityInvertedIndexScans"
	case GenerateZigzagJoins:
		return "GenerateZigzagJoins"
	case GenerateInvertedIndexZigzagJoins:
		return "GenerateInvertedIndexZigzagJoins"
	case SplitDisjunction:
		return "SplitDisjunction"
	case SplitDisjunctionAddKey:
		return "SplitDisjunctionAddKey"
	case GenerateStreamingSetOp:
		return "GenerateStreamingSetOp"
	case NumRuleNames:
		return "NumRuleNames"
	default:
		return "RuleName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
