// Code generated by execgen; DO NOT EDIT.
// Copyright 2018 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexec

import (
	"unsafe"

	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/sql/colmem"
)

func newCountRowsAgg(allocator *colmem.Allocator) *countRowsAgg {
	allocator.AdjustMemoryUsage(int64(sizeOfCountRowsAgg))
	return &countRowsAgg{}
}

// countRowsAgg supports either COUNT(*) or COUNT(col) aggregate.
type countRowsAgg struct {
	groups []bool
	vec    []int64
	nulls  *coldata.Nulls
	curIdx int
	curAgg int64
}

var _ aggregateFunc = &countRowsAgg{}

const sizeOfCountRowsAgg = unsafe.Sizeof(&countRowsAgg{})

func (a *countRowsAgg) Init(groups []bool, vec coldata.Vec) {
	a.groups = groups
	a.vec = vec.Int64()
	a.nulls = vec.Nulls()
	a.Reset()
}

func (a *countRowsAgg) Reset() {
	a.curIdx = -1
	a.curAgg = 0
	a.nulls.UnsetNulls()
}

func (a *countRowsAgg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *countRowsAgg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		a.nulls.UnsetNullsAfter(idx + 1)
	}
}

func (a *countRowsAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	inputLen := b.Length()
	sel := b.Selection()

	{
		if sel != nil {
			for _, i := range sel[:inputLen] {
				if a.groups[i] {
					if a.curIdx != -1 {
						a.vec[a.curIdx] = a.curAgg
					}
					a.curIdx++
					a.curAgg = int64(0)
				}
				var y int64
				y = int64(1)
				a.curAgg += y
			}
		} else {
			for i := range a.groups[:inputLen] {
				if a.groups[i] {
					if a.curIdx != -1 {
						a.vec[a.curIdx] = a.curAgg
					}
					a.curIdx++
					a.curAgg = int64(0)
				}
				var y int64
				y = int64(1)
				a.curAgg += y
			}
		}
	}
}

func (a *countRowsAgg) Flush() {
	a.vec[a.curIdx] = a.curAgg
	a.curIdx++
}

func (a *countRowsAgg) HandleEmptyInputScalar() {
	a.vec[0] = 0
}

func newCountAgg(allocator *colmem.Allocator) *countAgg {
	allocator.AdjustMemoryUsage(int64(sizeOfCountAgg))
	return &countAgg{}
}

// countAgg supports either COUNT(*) or COUNT(col) aggregate.
type countAgg struct {
	groups []bool
	vec    []int64
	nulls  *coldata.Nulls
	curIdx int
	curAgg int64
}

var _ aggregateFunc = &countAgg{}

const sizeOfCountAgg = unsafe.Sizeof(&countAgg{})

func (a *countAgg) Init(groups []bool, vec coldata.Vec) {
	a.groups = groups
	a.vec = vec.Int64()
	a.nulls = vec.Nulls()
	a.Reset()
}

func (a *countAgg) Reset() {
	a.curIdx = -1
	a.curAgg = 0
	a.nulls.UnsetNulls()
}

func (a *countAgg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *countAgg) SetOutputIndex(idx int) {
	if a.curIdx != -1 {
		a.curIdx = idx
		a.nulls.UnsetNullsAfter(idx + 1)
	}
}

func (a *countAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	inputLen := b.Length()
	sel := b.Selection()

	// If this is a COUNT(col) aggregator and there are nulls in this batch,
	// we must check each value for nullity. Note that it is only legal to do a
	// COUNT aggregate on a single column.
	nulls := b.ColVec(int(inputIdxs[0])).Nulls()
	if nulls.MaybeHasNulls() {
		if sel != nil {
			for _, i := range sel[:inputLen] {
				if a.groups[i] {
					if a.curIdx != -1 {
						a.vec[a.curIdx] = a.curAgg
					}
					a.curIdx++
					a.curAgg = int64(0)
				}
				var y int64
				y = int64(0)
				if !nulls.NullAt(i) {
					y = 1
				}
				a.curAgg += y
			}
		} else {
			for i := range a.groups[:inputLen] {
				if a.groups[i] {
					if a.curIdx != -1 {
						a.vec[a.curIdx] = a.curAgg
					}
					a.curIdx++
					a.curAgg = int64(0)
				}
				var y int64
				y = int64(0)
				if !nulls.NullAt(i) {
					y = 1
				}
				a.curAgg += y
			}
		}
	} else {
		if sel != nil {
			for _, i := range sel[:inputLen] {
				if a.groups[i] {
					if a.curIdx != -1 {
						a.vec[a.curIdx] = a.curAgg
					}
					a.curIdx++
					a.curAgg = int64(0)
				}
				var y int64
				y = int64(1)
				a.curAgg += y
			}
		} else {
			for i := range a.groups[:inputLen] {
				if a.groups[i] {
					if a.curIdx != -1 {
						a.vec[a.curIdx] = a.curAgg
					}
					a.curIdx++
					a.curAgg = int64(0)
				}
				var y int64
				y = int64(1)
				a.curAgg += y
			}
		}
	}
}

func (a *countAgg) Flush() {
	a.vec[a.curIdx] = a.curAgg
	a.curIdx++
}

func (a *countAgg) HandleEmptyInputScalar() {
	a.vec[0] = 0
}
