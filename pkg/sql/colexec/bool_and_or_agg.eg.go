// Code generated by execgen; DO NOT EDIT.
// Copyright 2020 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexec

import (
	"unsafe"

	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/sql/colexecbase/colexecerror"
	"github.com/cockroachdb/cockroach/pkg/sql/colmem"
)

// Remove unused warning.
var _ = colexecerror.InternalError

func newBoolAndAggAlloc(allocator *colmem.Allocator, allocSize int64) aggregateFuncAlloc {
	return &boolAndAggAlloc{allocator: allocator, allocSize: allocSize}
}

type boolAndAgg struct {
	sawNonNull bool

	groups []bool
	vec    []bool

	nulls  *coldata.Nulls
	curIdx int
	curAgg bool
}

var _ aggregateFunc = &boolAndAgg{}

const sizeOfBoolAndAgg = int64(unsafe.Sizeof(boolAndAgg{}))

func (b *boolAndAgg) Init(groups []bool, vec coldata.Vec) {
	b.groups = groups
	b.vec = vec.Bool()
	b.nulls = vec.Nulls()
	b.Reset()
}

func (b *boolAndAgg) Reset() {
	b.curIdx = -1
	b.nulls.UnsetNulls()
	// true indicates whether we are doing an AND aggregate or OR aggregate.
	// For bool_and the true is true and for bool_or the true is false.
	b.curAgg = true
}

func (b *boolAndAgg) CurrentOutputIndex() int {
	return b.curIdx
}

func (b *boolAndAgg) SetOutputIndex(idx int) {
	if b.curIdx != -1 {
		b.curIdx = idx
		b.nulls.UnsetNullsAfter(idx)
	}
}

func (b *boolAndAgg) Compute(batch coldata.Batch, inputIdxs []uint32) {
	inputLen := batch.Length()
	vec, sel := batch.ColVec(int(inputIdxs[0])), batch.Selection()
	col, nulls := vec.Bool(), vec.Nulls()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if b.groups[i] {
				if b.curIdx >= 0 {
					if !b.sawNonNull {
						b.nulls.SetNull(b.curIdx)
					} else {
						b.vec[b.curIdx] = b.curAgg
					}
				}
				b.curIdx++
				b.curAgg = true
				b.sawNonNull = false
			}
			isNull := nulls.NullAt(i)
			if !isNull {
				b.curAgg = b.curAgg && col[i]
				b.sawNonNull = true
			}

		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if b.groups[i] {
				if b.curIdx >= 0 {
					if !b.sawNonNull {
						b.nulls.SetNull(b.curIdx)
					} else {
						b.vec[b.curIdx] = b.curAgg
					}
				}
				b.curIdx++
				b.curAgg = true
				b.sawNonNull = false
			}
			isNull := nulls.NullAt(i)
			if !isNull {
				b.curAgg = b.curAgg && col[i]
				b.sawNonNull = true
			}

		}
	}
}

func (b *boolAndAgg) Flush() {
	if !b.sawNonNull {
		b.nulls.SetNull(b.curIdx)
	} else {
		b.vec[b.curIdx] = b.curAgg
	}
	b.curIdx++
}

func (b *boolAndAgg) HandleEmptyInputScalar() {
	b.nulls.SetNull(0)
}

type boolAndAggAlloc struct {
	allocator *colmem.Allocator
	allocSize int64
	aggFuncs  []boolAndAgg
}

var _ aggregateFuncAlloc = &boolAndAggAlloc{}

func (a *boolAndAggAlloc) newAggFunc() aggregateFunc {
	if len(a.aggFuncs) == 0 {
		a.allocator.AdjustMemoryUsage(sizeOfBoolAndAgg * a.allocSize)
		a.aggFuncs = make([]boolAndAgg, a.allocSize)
	}
	f := &a.aggFuncs[0]
	a.aggFuncs = a.aggFuncs[1:]
	return f
}

func newBoolOrAggAlloc(allocator *colmem.Allocator, allocSize int64) aggregateFuncAlloc {
	return &boolOrAggAlloc{allocator: allocator, allocSize: allocSize}
}

type boolOrAgg struct {
	sawNonNull bool

	groups []bool
	vec    []bool

	nulls  *coldata.Nulls
	curIdx int
	curAgg bool
}

var _ aggregateFunc = &boolOrAgg{}

const sizeOfBoolOrAgg = int64(unsafe.Sizeof(boolOrAgg{}))

func (b *boolOrAgg) Init(groups []bool, vec coldata.Vec) {
	b.groups = groups
	b.vec = vec.Bool()
	b.nulls = vec.Nulls()
	b.Reset()
}

func (b *boolOrAgg) Reset() {
	b.curIdx = -1
	b.nulls.UnsetNulls()
	// false indicates whether we are doing an AND aggregate or OR aggregate.
	// For bool_and the false is true and for bool_or the false is false.
	b.curAgg = false
}

func (b *boolOrAgg) CurrentOutputIndex() int {
	return b.curIdx
}

func (b *boolOrAgg) SetOutputIndex(idx int) {
	if b.curIdx != -1 {
		b.curIdx = idx
		b.nulls.UnsetNullsAfter(idx)
	}
}

func (b *boolOrAgg) Compute(batch coldata.Batch, inputIdxs []uint32) {
	inputLen := batch.Length()
	vec, sel := batch.ColVec(int(inputIdxs[0])), batch.Selection()
	col, nulls := vec.Bool(), vec.Nulls()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if b.groups[i] {
				if b.curIdx >= 0 {
					if !b.sawNonNull {
						b.nulls.SetNull(b.curIdx)
					} else {
						b.vec[b.curIdx] = b.curAgg
					}
				}
				b.curIdx++
				b.curAgg = false
				b.sawNonNull = false
			}
			isNull := nulls.NullAt(i)
			if !isNull {
				b.curAgg = b.curAgg || col[i]
				b.sawNonNull = true
			}

		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if b.groups[i] {
				if b.curIdx >= 0 {
					if !b.sawNonNull {
						b.nulls.SetNull(b.curIdx)
					} else {
						b.vec[b.curIdx] = b.curAgg
					}
				}
				b.curIdx++
				b.curAgg = false
				b.sawNonNull = false
			}
			isNull := nulls.NullAt(i)
			if !isNull {
				b.curAgg = b.curAgg || col[i]
				b.sawNonNull = true
			}

		}
	}
}

func (b *boolOrAgg) Flush() {
	if !b.sawNonNull {
		b.nulls.SetNull(b.curIdx)
	} else {
		b.vec[b.curIdx] = b.curAgg
	}
	b.curIdx++
}

func (b *boolOrAgg) HandleEmptyInputScalar() {
	b.nulls.SetNull(0)
}

type boolOrAggAlloc struct {
	allocator *colmem.Allocator
	allocSize int64
	aggFuncs  []boolOrAgg
}

var _ aggregateFuncAlloc = &boolOrAggAlloc{}

func (a *boolOrAggAlloc) newAggFunc() aggregateFunc {
	if len(a.aggFuncs) == 0 {
		a.allocator.AdjustMemoryUsage(sizeOfBoolOrAgg * a.allocSize)
		a.aggFuncs = make([]boolOrAgg, a.allocSize)
	}
	f := &a.aggFuncs[0]
	a.aggFuncs = a.aggFuncs[1:]
	return f
}
