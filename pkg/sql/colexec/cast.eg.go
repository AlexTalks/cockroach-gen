// Code generated by execgen; DO NOT EDIT.
// Copyright 2019 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexec

import (
	"context"
	"fmt"
	"math"

	"github.com/cockroachdb/apd"
	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/col/coltypes"
	"github.com/cockroachdb/cockroach/pkg/col/coltypes/typeconv"
	"github.com/cockroachdb/cockroach/pkg/sql/colexec/execgen"
	"github.com/cockroachdb/cockroach/pkg/sql/colexecbase"
	"github.com/cockroachdb/cockroach/pkg/sql/colexecbase/colexecerror"
	"github.com/cockroachdb/cockroach/pkg/sql/colmem"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/pkg/errors"
)

// Remove unused warning.
var _ = execgen.UNSAFEGET

func cast(fromType, toType *types.T, inputVec, outputVec coldata.Vec, n int, sel []int) {
	switch typeconv.FromColumnType(fromType) {
	case coltypes.Bool:
		switch typeconv.FromColumnType(toType) {
		case coltypes.Bool:
			inputCol := inputVec.Bool()
			outputCol := outputVec.Bool()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r bool
							r = v
							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r bool
							r = v
							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r bool
						r = v
						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r bool
						r = v
						outputCol[i] = r
					}
				}
			}
		case coltypes.Int16:
			inputCol := inputVec.Bool()
			outputCol := outputVec.Int16()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int16

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int16

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r int16

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r int16

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				}
			}
		case coltypes.Int32:
			inputCol := inputVec.Bool()
			outputCol := outputVec.Int32()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int32

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int32

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r int32

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r int32

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				}
			}
		case coltypes.Int64:
			inputCol := inputVec.Bool()
			outputCol := outputVec.Int64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int64

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int64

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r int64

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r int64

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				}
			}
		case coltypes.Float64:
			inputCol := inputVec.Bool()
			outputCol := outputVec.Float64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r float64

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r float64

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r float64

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r float64

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				}
			}
		default:
			colexecerror.InternalError(fmt.Sprintf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType))
		}
	case coltypes.Bytes:
		switch typeconv.FromColumnType(toType) {
		default:
			colexecerror.InternalError(fmt.Sprintf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType))
		}
	case coltypes.Decimal:
		switch typeconv.FromColumnType(toType) {
		case coltypes.Bool:
			inputCol := inputVec.Decimal()
			outputCol := outputVec.Bool()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r bool

							r = v.Sign() != 0

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r bool

							r = v.Sign() != 0

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r bool

						r = v.Sign() != 0

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r bool

						r = v.Sign() != 0

						outputCol[i] = r
					}
				}
			}
		case coltypes.Decimal:
			inputCol := inputVec.Decimal()
			outputCol := outputVec.Decimal()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r apd.Decimal
							r = v
							outputCol[i].Set(&r)
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r apd.Decimal
							r = v
							outputCol[i].Set(&r)
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r apd.Decimal
						r = v
						outputCol[i].Set(&r)
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r apd.Decimal
						r = v
						outputCol[i].Set(&r)
					}
				}
			}
		default:
			colexecerror.InternalError(fmt.Sprintf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType))
		}
	case coltypes.Int16:
		switch typeconv.FromColumnType(toType) {
		case coltypes.Bool:
			inputCol := inputVec.Int16()
			outputCol := outputVec.Bool()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				}
			}
		case coltypes.Decimal:
			inputCol := inputVec.Int16()
			outputCol := outputVec.Decimal()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							outputCol[i].Set(&r)
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							outputCol[i].Set(&r)
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						outputCol[i].Set(&r)
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						outputCol[i].Set(&r)
					}
				}
			}
		case coltypes.Int16:
			inputCol := inputVec.Int16()
			outputCol := outputVec.Int16()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int16
							r = v
							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int16
							r = v
							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r int16
						r = v
						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r int16
						r = v
						outputCol[i] = r
					}
				}
			}
		case coltypes.Int32:
			inputCol := inputVec.Int16()
			outputCol := outputVec.Int32()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int32

							r = int32(v)

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int32

							r = int32(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r int32

						r = int32(v)

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r int32

						r = int32(v)

						outputCol[i] = r
					}
				}
			}
		case coltypes.Int64:
			inputCol := inputVec.Int16()
			outputCol := outputVec.Int64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int64

							r = int64(v)

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int64

							r = int64(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r int64

						r = int64(v)

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r int64

						r = int64(v)

						outputCol[i] = r
					}
				}
			}
		case coltypes.Float64:
			inputCol := inputVec.Int16()
			outputCol := outputVec.Float64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r float64

							r = float64(v)

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r float64

							r = float64(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r float64

						r = float64(v)

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r float64

						r = float64(v)

						outputCol[i] = r
					}
				}
			}
		default:
			colexecerror.InternalError(fmt.Sprintf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType))
		}
	case coltypes.Int32:
		switch typeconv.FromColumnType(toType) {
		case coltypes.Bool:
			inputCol := inputVec.Int32()
			outputCol := outputVec.Bool()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				}
			}
		case coltypes.Decimal:
			inputCol := inputVec.Int32()
			outputCol := outputVec.Decimal()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							outputCol[i].Set(&r)
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							outputCol[i].Set(&r)
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						outputCol[i].Set(&r)
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						outputCol[i].Set(&r)
					}
				}
			}
		case coltypes.Int32:
			inputCol := inputVec.Int32()
			outputCol := outputVec.Int32()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int32
							r = v
							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int32
							r = v
							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r int32
						r = v
						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r int32
						r = v
						outputCol[i] = r
					}
				}
			}
		case coltypes.Int64:
			inputCol := inputVec.Int32()
			outputCol := outputVec.Int64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int64

							r = int64(v)

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int64

							r = int64(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r int64

						r = int64(v)

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r int64

						r = int64(v)

						outputCol[i] = r
					}
				}
			}
		case coltypes.Float64:
			inputCol := inputVec.Int32()
			outputCol := outputVec.Float64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r float64

							r = float64(v)

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r float64

							r = float64(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r float64

						r = float64(v)

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r float64

						r = float64(v)

						outputCol[i] = r
					}
				}
			}
		default:
			colexecerror.InternalError(fmt.Sprintf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType))
		}
	case coltypes.Int64:
		switch typeconv.FromColumnType(toType) {
		case coltypes.Bool:
			inputCol := inputVec.Int64()
			outputCol := outputVec.Bool()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				}
			}
		case coltypes.Decimal:
			inputCol := inputVec.Int64()
			outputCol := outputVec.Decimal()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							outputCol[i].Set(&r)
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							outputCol[i].Set(&r)
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						outputCol[i].Set(&r)
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						outputCol[i].Set(&r)
					}
				}
			}
		case coltypes.Int64:
			inputCol := inputVec.Int64()
			outputCol := outputVec.Int64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int64
							r = v
							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int64
							r = v
							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r int64
						r = v
						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r int64
						r = v
						outputCol[i] = r
					}
				}
			}
		case coltypes.Float64:
			inputCol := inputVec.Int64()
			outputCol := outputVec.Float64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r float64

							r = float64(v)

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r float64

							r = float64(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r float64

						r = float64(v)

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r float64

						r = float64(v)

						outputCol[i] = r
					}
				}
			}
		default:
			colexecerror.InternalError(fmt.Sprintf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType))
		}
	case coltypes.Float64:
		switch typeconv.FromColumnType(toType) {
		case coltypes.Bool:
			inputCol := inputVec.Float64()
			outputCol := outputVec.Bool()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				}
			}
		case coltypes.Decimal:
			inputCol := inputVec.Float64()
			outputCol := outputVec.Decimal()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r apd.Decimal

							{
								var tmpDec apd.Decimal
								_, tmpErr := tmpDec.SetFloat64(float64(v))
								if tmpErr != nil {
									colexecerror.ExpectedError(tmpErr)
								}
								r = tmpDec
							}

							outputCol[i].Set(&r)
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r apd.Decimal

							{
								var tmpDec apd.Decimal
								_, tmpErr := tmpDec.SetFloat64(float64(v))
								if tmpErr != nil {
									colexecerror.ExpectedError(tmpErr)
								}
								r = tmpDec
							}

							outputCol[i].Set(&r)
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r apd.Decimal

						{
							var tmpDec apd.Decimal
							_, tmpErr := tmpDec.SetFloat64(float64(v))
							if tmpErr != nil {
								colexecerror.ExpectedError(tmpErr)
							}
							r = tmpDec
						}

						outputCol[i].Set(&r)
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r apd.Decimal

						{
							var tmpDec apd.Decimal
							_, tmpErr := tmpDec.SetFloat64(float64(v))
							if tmpErr != nil {
								colexecerror.ExpectedError(tmpErr)
							}
							r = tmpDec
						}

						outputCol[i].Set(&r)
					}
				}
			}
		case coltypes.Int16:
			inputCol := inputVec.Float64()
			outputCol := outputVec.Int16()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int16

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
								colexecerror.ExpectedError(tree.ErrIntOutOfRange)
							}
							r = int16(v)

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int16

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
								colexecerror.ExpectedError(tree.ErrIntOutOfRange)
							}
							r = int16(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r int16

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int16(v)

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r int16

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int16(v)

						outputCol[i] = r
					}
				}
			}
		case coltypes.Int32:
			inputCol := inputVec.Float64()
			outputCol := outputVec.Int32()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int32

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
								colexecerror.ExpectedError(tree.ErrIntOutOfRange)
							}
							r = int32(v)

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int32

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
								colexecerror.ExpectedError(tree.ErrIntOutOfRange)
							}
							r = int32(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r int32

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int32(v)

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r int32

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int32(v)

						outputCol[i] = r
					}
				}
			}
		case coltypes.Int64:
			inputCol := inputVec.Float64()
			outputCol := outputVec.Int64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int64

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
								colexecerror.ExpectedError(tree.ErrIntOutOfRange)
							}
							r = int64(v)

							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r int64

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
								colexecerror.ExpectedError(tree.ErrIntOutOfRange)
							}
							r = int64(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r int64

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int64(v)

						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r int64

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int64(v)

						outputCol[i] = r
					}
				}
			}
		case coltypes.Float64:
			inputCol := inputVec.Float64()
			outputCol := outputVec.Float64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r float64
							r = v
							outputCol[i] = r
						}
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol[i]
							var r float64
							r = v
							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol[i]
						var r float64
						r = v
						outputCol[i] = r
					}
				} else {
					inputCol = inputCol[0:n]
					for i := range inputCol {
						v := inputCol[i]
						var r float64
						r = v
						outputCol[i] = r
					}
				}
			}
		default:
			colexecerror.InternalError(fmt.Sprintf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType))
		}
	default:
		colexecerror.InternalError(fmt.Sprintf("unhandled FROM type: %s", fromType))
	}
}

func GetCastOperator(
	allocator *colmem.Allocator,
	input colexecbase.Operator,
	colIdx int,
	resultIdx int,
	fromType *types.T,
	toType *types.T,
) (colexecbase.Operator, error) {
	input = newVectorTypeEnforcer(allocator, input, toType, resultIdx)
	if fromType.Family() == types.UnknownFamily {
		return &castOpNullAny{
			OneInputNode: NewOneInputNode(input),
			allocator:    allocator,
			colIdx:       colIdx,
			outputIdx:    resultIdx,
		}, nil
	}
	switch typeconv.FromColumnType(fromType) {
	case coltypes.Bool:
		switch typeconv.FromColumnType(toType) {
		case coltypes.Bool:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Int16:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Int32:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Int64:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Float64:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType)
		}
	case coltypes.Bytes:
		switch typeconv.FromColumnType(toType) {
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType)
		}
	case coltypes.Decimal:
		switch typeconv.FromColumnType(toType) {
		case coltypes.Bool:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Decimal:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType)
		}
	case coltypes.Int16:
		switch typeconv.FromColumnType(toType) {
		case coltypes.Bool:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Decimal:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Int16:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Int32:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Int64:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Float64:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType)
		}
	case coltypes.Int32:
		switch typeconv.FromColumnType(toType) {
		case coltypes.Bool:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Decimal:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Int32:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Int64:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Float64:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType)
		}
	case coltypes.Int64:
		switch typeconv.FromColumnType(toType) {
		case coltypes.Bool:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Decimal:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Int64:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Float64:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType)
		}
	case coltypes.Float64:
		switch typeconv.FromColumnType(toType) {
		case coltypes.Bool:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Decimal:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Int16:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Int32:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Int64:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		case coltypes.Float64:
			return &castOp{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     fromType,
				toType:       toType,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", fromType, toType)
		}
	default:
		return nil, errors.Errorf("unhandled FROM type: %s", fromType)
	}
}

type castOpNullAny struct {
	OneInputNode
	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
}

var _ colexecbase.Operator = &castOpNullAny{}

func (c *castOpNullAny) Init() {
	c.input.Init()
}

func (c *castOpNullAny) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	vec := batch.ColVec(c.colIdx)
	projVec := batch.ColVec(c.outputIdx)
	vecNulls := vec.Nulls()
	projNulls := projVec.Nulls()
	if sel := batch.Selection(); sel != nil {
		sel = sel[:n]
		for _, i := range sel {
			if vecNulls.NullAt(i) {
				projNulls.SetNull(i)
			} else {
				colexecerror.InternalError(errors.Errorf("unexpected non-null at index %d", i))
			}
		}
	} else {
		for i := 0; i < n; i++ {
			if vecNulls.NullAt(i) {
				projNulls.SetNull(i)
			} else {
				colexecerror.InternalError(fmt.Errorf("unexpected non-null at index %d", i))
			}
		}
	}
	return batch
}

type castOp struct {
	OneInputNode
	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	fromType  *types.T
	toType    *types.T
}

var _ colexecbase.Operator = &castOp{}

func (c *castOp) Init() {
	c.input.Init()
}

func (c *castOp) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	vec := batch.ColVec(c.colIdx)
	projVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{projVec}, func() { cast(c.fromType, c.toType, vec, projVec, n, batch.Selection()) },
	)
	return batch
}
