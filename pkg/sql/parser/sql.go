// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:65

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:601
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9793

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1070,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 900,
	199, 900,
	214, 250,
	296, 250,
	304, 734,
	331, 250,
	340, 734,
	379, 734,
	403, 250,
	427, 734,
	-2, 0,
	-1, 74,
	214, 254,
	-2, 0,
	-1, 75,
	109, 1070,
	188, 1070,
	413, 1070,
	414, 1070,
	-2, 0,
	-1, 87,
	122, 1044,
	138, 1044,
	196, 1044,
	226, 1044,
	260, 1044,
	270, 1044,
	408, 1044,
	-2, 1022,
	-1, 118,
	128, 657,
	213, 657,
	298, 637,
	349, 637,
	396, 657,
	-2, 0,
	-1, 119,
	4, 1072,
	21, 1072,
	22, 1072,
	23, 1072,
	24, 1072,
	25, 1072,
	27, 1072,
	33, 1072,
	38, 1072,
	39, 1072,
	40, 1072,
	41, 1072,
	42, 1072,
	43, 1072,
	44, 1072,
	45, 1072,
	46, 1072,
	47, 1072,
	48, 1072,
	49, 1072,
	51, 1072,
	52, 1072,
	53, 1072,
	54, 1072,
	55, 1072,
	56, 1072,
	59, 1072,
	60, 1072,
	61, 1072,
	62, 1072,
	64, 1072,
	65, 1072,
	69, 1072,
	70, 1072,
	71, 1072,
	72, 1072,
	73, 1072,
	74, 1072,
	76, 1072,
	77, 1072,
	78, 1072,
	79, 1072,
	81, 1072,
	83, 1072,
	84, 1072,
	85, 1072,
	88, 1072,
	89, 1072,
	97, 1072,
	98, 1072,
	99, 1072,
	100, 1072,
	101, 1072,
	102, 1072,
	103, 1072,
	104, 1072,
	106, 1072,
	108, 1072,
	109, 1072,
	111, 1072,
	114, 1072,
	115, 1072,
	116, 1072,
	118, 1072,
	120, 1072,
	121, 1072,
	123, 1072,
	124, 1072,
	125, 1072,
	126, 1072,
	127, 1072,
	128, 1072,
	129, 1072,
	130, 1072,
	131, 1072,
	132, 1072,
	133, 1072,
	134, 1072,
	135, 1072,
	137, 1072,
	143, 1072,
	144, 1072,
	145, 1072,
	146, 1072,
	147, 1072,
	148, 1072,
	150, 1072,
	152, 1072,
	156, 1072,
	157, 1072,
	159, 1072,
	160, 1072,
	162, 1072,
	163, 1072,
	165, 1072,
	166, 1072,
	167, 1072,
	168, 1072,
	169, 1072,
	170, 1072,
	171, 1072,
	172, 1072,
	174, 1072,
	175, 1072,
	177, 1072,
	178, 1072,
	179, 1072,
	182, 1072,
	183, 1072,
	184, 1072,
	185, 1072,
	188, 1072,
	189, 1072,
	190, 1072,
	191, 1072,
	192, 1072,
	193, 1072,
	194, 1072,
	195, 1072,
	197, 1072,
	199, 1072,
	201, 1072,
	203, 1072,
	204, 1072,
	205, 1072,
	207, 1072,
	208, 1072,
	211, 1072,
	212, 1072,
	213, 1072,
	214, 1072,
	215, 1072,
	217, 1072,
	218, 1072,
	220, 1072,
	221, 1072,
	223, 1072,
	224, 1072,
	227, 1072,
	228, 1072,
	231, 1072,
	232, 1072,
	233, 1072,
	235, 1072,
	236, 1072,
	237, 1072,
	238, 1072,
	239, 1072,
	240, 1072,
	241, 1072,
	242, 1072,
	243, 1072,
	244, 1072,
	246, 1072,
	247, 1072,
	248, 1072,
	249, 1072,
	251, 1072,
	253, 1072,
	255, 1072,
	256, 1072,
	257, 1072,
	258, 1072,
	259, 1072,
	261, 1072,
	262, 1072,
	263, 1072,
	265, 1072,
	266, 1072,
	267, 1072,
	268, 1072,
	271, 1072,
	272, 1072,
	273, 1072,
	275, 1072,
	277, 1072,
	278, 1072,
	279, 1072,
	280, 1072,
	281, 1072,
	282, 1072,
	283, 1072,
	284, 1072,
	285, 1072,
	286, 1072,
	288, 1072,
	289, 1072,
	290, 1072,
	291, 1072,
	292, 1072,
	293, 1072,
	295, 1072,
	297, 1072,
	298, 1072,
	299, 1072,
	300, 1072,
	301, 1072,
	302, 1072,
	303, 1072,
	304, 1072,
	305, 1072,
	307, 1072,
	308, 1072,
	309, 1072,
	310, 1072,
	311, 1072,
	313, 1072,
	314, 1072,
	315, 1072,
	316, 1072,
	317, 1072,
	318, 1072,
	319, 1072,
	320, 1072,
	322, 1072,
	324, 1072,
	325, 1072,
	326, 1072,
	327, 1072,
	328, 1072,
	329, 1072,
	331, 1072,
	332, 1072,
	333, 1072,
	334, 1072,
	335, 1072,
	336, 1072,
	337, 1072,
	338, 1072,
	340, 1072,
	341, 1072,
	342, 1072,
	343, 1072,
	344, 1072,
	345, 1072,
	346, 1072,
	347, 1072,
	348, 1072,
	349, 1072,
	351, 1072,
	352, 1072,
	353, 1072,
	354, 1072,
	355, 1072,
	357, 1072,
	358, 1072,
	359, 1072,
	360, 1072,
	361, 1072,
	363, 1072,
	364, 1072,
	365, 1072,
	366, 1072,
	367, 1072,
	368, 1072,
	369, 1072,
	370, 1072,
	371, 1072,
	372, 1072,
	373, 1072,
	374, 1072,
	376, 1072,
	377, 1072,
	378, 1072,
	380, 1072,
	381, 1072,
	382, 1072,
	383, 1072,
	384, 1072,
	385, 1072,
	386, 1072,
	388, 1072,
	389, 1072,
	390, 1072,
	391, 1072,
	392, 1072,
	394, 1072,
	396, 1072,
	397, 1072,
	398, 1072,
	399, 1072,
	400, 1072,
	402, 1072,
	403, 1072,
	404, 1072,
	406, 1072,
	407, 1072,
	410, 1072,
	411, 1072,
	412, 1072,
	413, 1072,
	414, 1072,
	415, 1072,
	417, 1072,
	419, 1072,
	420, 1072,
	421, 1072,
	422, 1072,
	423, 1072,
	424, 1072,
	425, 1072,
	427, 1072,
	428, 1072,
	429, 1072,
	434, 1072,
	435, 1072,
	436, 1072,
	437, 1072,
	438, 1072,
	439, 1072,
	-2, 0,
	-1, 120,
	1, 953,
	203, 953,
	295, 953,
	302, 953,
	442, 953,
	465, 953,
	-2, 0,
	-1, 122,
	1, 953,
	465, 953,
	-2, 0,
	-1, 123,
	1, 953,
	465, 953,
	-2, 0,
	-1, 124,
	1, 957,
	465, 957,
	-2, 0,
	-1, 149,
	122, 1043,
	138, 1043,
	196, 1043,
	226, 1043,
	260, 1043,
	270, 1043,
	408, 1043,
	-2, 1031,
	-1, 182,
	4, 1079,
	5, 1079,
	6, 1079,
	7, 1079,
	8, 1079,
	9, 1079,
	10, 1079,
	21, 1079,
	22, 1079,
	23, 1079,
	24, 1079,
	25, 1079,
	27, 1079,
	33, 1079,
	34, 1079,
	38, 1079,
	39, 1079,
	40, 1079,
	41, 1079,
	42, 1079,
	43, 1079,
	44, 1079,
	45, 1079,
	46, 1079,
	47, 1079,
	48, 1079,
	49, 1079,
	51, 1079,
	52, 1079,
	53, 1079,
	54, 1079,
	55, 1079,
	56, 1079,
	57, 1079,
	58, 1079,
	59, 1079,
	60, 1079,
	61, 1079,
	62, 1079,
	64, 1079,
	65, 1079,
	67, 1079,
	69, 1079,
	70, 1079,
	71, 1079,
	72, 1079,
	73, 1079,
	74, 1079,
	76, 1079,
	77, 1079,
	78, 1079,
	79, 1079,
	81, 1079,
	83, 1079,
	84, 1079,
	85, 1079,
	87, 1079,
	88, 1079,
	89, 1079,
	90, 1079,
	91, 1079,
	92, 1079,
	93, 1079,
	94, 1079,
	95, 1079,
	96, 1079,
	97, 1079,
	98, 1079,
	99, 1079,
	100, 1079,
	101, 1079,
	102, 1079,
	103, 1079,
	104, 1079,
	105, 1079,
	106, 1079,
	108, 1079,
	109, 1079,
	111, 1079,
	114, 1079,
	115, 1079,
	116, 1079,
	118, 1079,
	120, 1079,
	121, 1079,
	123, 1079,
	124, 1079,
	125, 1079,
	126, 1079,
	127, 1079,
	128, 1079,
	129, 1079,
	130, 1079,
	131, 1079,
	132, 1079,
	133, 1079,
	134, 1079,
	135, 1079,
	136, 1079,
	137, 1079,
	143, 1079,
	144, 1079,
	145, 1079,
	146, 1079,
	147, 1079,
	148, 1079,
	150, 1079,
	152, 1079,
	155, 1079,
	156, 1079,
	157, 1079,
	159, 1079,
	160, 1079,
	162, 1079,
	163, 1079,
	165, 1079,
	166, 1079,
	167, 1079,
	168, 1079,
	169, 1079,
	170, 1079,
	171, 1079,
	172, 1079,
	173, 1079,
	174, 1079,
	175, 1079,
	177, 1079,
	178, 1079,
	179, 1079,
	182, 1079,
	183, 1079,
	184, 1079,
	185, 1079,
	187, 1079,
	188, 1079,
	189, 1079,
	190, 1079,
	191, 1079,
	192, 1079,
	193, 1079,
	194, 1079,
	195, 1079,
	197, 1079,
	199, 1079,
	200, 1079,
	201, 1079,
	202, 1079,
	203, 1079,
	204, 1079,
	205, 1079,
	206, 1079,
	207, 1079,
	208, 1079,
	211, 1079,
	212, 1079,
	213, 1079,
	214, 1079,
	215, 1079,
	217, 1079,
	218, 1079,
	220, 1079,
	221, 1079,
	222, 1079,
	223, 1079,
	224, 1079,
	225, 1079,
	227, 1079,
	228, 1079,
	231, 1079,
	232, 1079,
	233, 1079,
	235, 1079,
	236, 1079,
	237, 1079,
	238, 1079,
	239, 1079,
	240, 1079,
	241, 1079,
	242, 1079,
	243, 1079,
	244, 1079,
	245, 1079,
	246, 1079,
	247, 1079,
	248, 1079,
	249, 1079,
	250, 1079,
	251, 1079,
	252, 1079,
	253, 1079,
	254, 1079,
	255, 1079,
	256, 1079,
	257, 1079,
	258, 1079,
	259, 1079,
	261, 1079,
	262, 1079,
	263, 1079,
	266, 1079,
	267, 1079,
	268, 1079,
	271, 1079,
	272, 1079,
	273, 1079,
	274, 1079,
	275, 1079,
	276, 1079,
	277, 1079,
	278, 1079,
	279, 1079,
	280, 1079,
	281, 1079,
	282, 1079,
	283, 1079,
	284, 1079,
	285, 1079,
	286, 1079,
	288, 1079,
	289, 1079,
	290, 1079,
	291, 1079,
	292, 1079,
	293, 1079,
	295, 1079,
	297, 1079,
	298, 1079,
	299, 1079,
	300, 1079,
	301, 1079,
	302, 1079,
	303, 1079,
	304, 1079,
	305, 1079,
	307, 1079,
	308, 1079,
	309, 1079,
	310, 1079,
	311, 1079,
	313, 1079,
	314, 1079,
	315, 1079,
	316, 1079,
	317, 1079,
	318, 1079,
	319, 1079,
	320, 1079,
	322, 1079,
	323, 1079,
	324, 1079,
	325, 1079,
	326, 1079,
	327, 1079,
	328, 1079,
	329, 1079,
	331, 1079,
	332, 1079,
	333, 1079,
	334, 1079,
	335, 1079,
	336, 1079,
	337, 1079,
	338, 1079,
	340, 1079,
	341, 1079,
	342, 1079,
	343, 1079,
	344, 1079,
	345, 1079,
	346, 1079,
	347, 1079,
	348, 1079,
	349, 1079,
	350, 1079,
	351, 1079,
	352, 1079,
	353, 1079,
	354, 1079,
	355, 1079,
	356, 1079,
	357, 1079,
	358, 1079,
	359, 1079,
	360, 1079,
	361, 1079,
	363, 1079,
	364, 1079,
	365, 1079,
	366, 1079,
	367, 1079,
	368, 1079,
	369, 1079,
	370, 1079,
	371, 1079,
	372, 1079,
	373, 1079,
	374, 1079,
	376, 1079,
	377, 1079,
	378, 1079,
	380, 1079,
	381, 1079,
	382, 1079,
	383, 1079,
	384, 1079,
	385, 1079,
	386, 1079,
	388, 1079,
	389, 1079,
	390, 1079,
	391, 1079,
	392, 1079,
	394, 1079,
	396, 1079,
	397, 1079,
	398, 1079,
	399, 1079,
	400, 1079,
	401, 1079,
	402, 1079,
	403, 1079,
	404, 1079,
	406, 1079,
	407, 1079,
	409, 1079,
	410, 1079,
	411, 1079,
	412, 1079,
	413, 1079,
	414, 1079,
	415, 1079,
	416, 1079,
	417, 1079,
	419, 1079,
	420, 1079,
	421, 1079,
	422, 1079,
	423, 1079,
	424, 1079,
	425, 1079,
	427, 1079,
	428, 1079,
	429, 1079,
	434, 1079,
	435, 1079,
	436, 1079,
	437, 1079,
	438, 1079,
	439, 1079,
	440, 1079,
	446, 1079,
	453, 1079,
	454, 1079,
	455, 1079,
	462, 1079,
	466, 1079,
	-2, 0,
	-1, 560,
	154, 1756,
	393, 1756,
	445, 1756,
	464, 1756,
	-2, 0,
	-1, 561,
	154, 1835,
	393, 1835,
	445, 1835,
	464, 1835,
	-2, 0,
	-1, 562,
	154, 1745,
	393, 1745,
	445, 1745,
	464, 1745,
	-2, 0,
	-1, 564,
	154, 1927,
	393, 1927,
	445, 1927,
	464, 1927,
	-2, 0,
	-1, 566,
	154, 1957,
	393, 1957,
	445, 1957,
	464, 1957,
	-2, 0,
	-1, 573,
	154, 1846,
	393, 1846,
	445, 1846,
	464, 1846,
	-2, 507,
	-1, 590,
	464, 1703,
	467, 1703,
	-2, 708,
	-1, 591,
	464, 1705,
	467, 1705,
	-2, 709,
	-1, 592,
	464, 1704,
	467, 1704,
	-2, 710,
	-1, 593,
	467, 1650,
	-2, 711,
	-1, 636,
	427, 882,
	-2, 735,
	-1, 742,
	298, 638,
	349, 638,
	-2, 0,
	-1, 743,
	298, 637,
	349, 637,
	-2, 588,
	-1, 746,
	1, 667,
	461, 667,
	463, 667,
	465, 667,
	-2, 0,
	-1, 747,
	1, 707,
	151, 707,
	461, 707,
	463, 707,
	465, 707,
	-2, 0,
	-1, 755,
	1, 641,
	461, 641,
	463, 641,
	465, 641,
	-2, 0,
	-1, 758,
	1, 667,
	461, 667,
	463, 667,
	465, 667,
	-2, 0,
	-1, 759,
	1, 669,
	461, 669,
	463, 669,
	465, 669,
	-2, 0,
	-1, 760,
	1, 672,
	461, 672,
	463, 672,
	465, 672,
	-2, 0,
	-1, 764,
	1, 686,
	461, 686,
	463, 686,
	465, 686,
	-2, 0,
	-1, 765,
	1, 688,
	461, 688,
	463, 688,
	465, 688,
	-2, 0,
	-1, 809,
	138, 1081,
	226, 1081,
	260, 1081,
	-2, 1031,
	-1, 825,
	138, 1080,
	226, 1080,
	260, 1080,
	-2, 1031,
	-1, 849,
	464, 1702,
	-2, 515,
	-1, 878,
	462, 1694,
	-2, 1685,
	-1, 884,
	5, 1218,
	-2, 1736,
	-1, 885,
	5, 1219,
	-2, 1740,
	-1, 886,
	5, 1220,
	-2, 1739,
	-1, 887,
	5, 1221,
	-2, 1954,
	-1, 888,
	5, 1222,
	-2, 1848,
	-1, 889,
	5, 1223,
	-2, 1919,
	-1, 890,
	5, 1224,
	-2, 1921,
	-1, 891,
	5, 1225,
	-2, 1934,
	-1, 892,
	5, 1226,
	-2, 1922,
	-1, 893,
	5, 1227,
	-2, 1923,
	-1, 894,
	5, 1228,
	-2, 1735,
	-1, 895,
	5, 1229,
	-2, 1970,
	-1, 896,
	5, 1230,
	-2, 1809,
	-1, 897,
	5, 1231,
	-2, 1858,
	-1, 898,
	5, 1232,
	-2, 1860,
	-1, 899,
	5, 1233,
	-2, 1813,
	-1, 900,
	5, 1234,
	462, 1712,
	-2, 1703,
	-1, 901,
	5, 1290,
	462, 1290,
	-2, 2005,
	-1, 906,
	462, 1713,
	-2, 1704,
	-1, 908,
	5, 1238,
	-2, 2003,
	-1, 909,
	5, 1239,
	-2, 2004,
	-1, 910,
	5, 1240,
	-2, 1812,
	-1, 911,
	5, 1241,
	-2, 2016,
	-1, 912,
	5, 1242,
	-2, 1814,
	-1, 913,
	5, 1243,
	-2, 1815,
	-1, 914,
	5, 1244,
	-2, 1816,
	-1, 915,
	5, 1245,
	-2, 1985,
	-1, 916,
	5, 1246,
	-2, 2014,
	-1, 917,
	5, 1247,
	-2, 1792,
	-1, 918,
	5, 1248,
	-2, 1793,
	-1, 919,
	5, 1262,
	-2, 1997,
	-1, 921,
	5, 1237,
	-2, 1993,
	-1, 922,
	5, 1237,
	-2, 1992,
	-1, 923,
	5, 1237,
	-2, 2009,
	-1, 924,
	5, 1254,
	-2, 1987,
	-1, 925,
	5, 1255,
	-2, 1737,
	-1, 926,
	5, 1265,
	-2, 1986,
	-1, 927,
	5, 1267,
	-2, 2025,
	-1, 929,
	5, 1278,
	-2, 1766,
	-1, 930,
	5, 1289,
	-2, 2018,
	-1, 931,
	5, 1281,
	-2, 2019,
	-1, 932,
	5, 1289,
	-2, 2020,
	-1, 933,
	5, 1285,
	-2, 2021,
	-1, 934,
	5, 1204,
	-2, 1822,
	-1, 935,
	5, 1205,
	-2, 1823,
	-1, 936,
	464, 1700,
	-2, 1684,
	-1, 937,
	462, 2045,
	-2, 1701,
	-1, 957,
	5, 1273,
	-2, 1945,
	-1, 974,
	5, 1272,
	-2, 2026,
	-1, 984,
	5, 1274,
	428, 1274,
	-2, 1988,
	-1, 985,
	5, 1275,
	428, 1275,
	-2, 1989,
	-1, 1021,
	462, 1712,
	-2, 1703,
	-1, 1049,
	154, 1957,
	393, 1957,
	445, 1957,
	464, 1957,
	-2, 0,
	-1, 1052,
	1, 493,
	465, 493,
	-2, 965,
	-1, 1172,
	313, 1681,
	455, 1681,
	-2, 1680,
	-1, 1195,
	466, 1681,
	-2, 1682,
	-1, 1230,
	304, 734,
	427, 734,
	-2, 249,
	-1, 1250,
	284, 1068,
	-2, 873,
	-1, 1259,
	264, 1707,
	-2, 0,
	-1, 1323,
	1, 368,
	461, 368,
	463, 368,
	465, 368,
	-2, 1042,
	-1, 1326,
	4, 2024,
	11, 2024,
	12, 2024,
	14, 2024,
	15, 2024,
	16, 2024,
	17, 2024,
	18, 2024,
	19, 2024,
	21, 2024,
	22, 2024,
	23, 2024,
	24, 2024,
	25, 2024,
	27, 2024,
	30, 2024,
	31, 2024,
	33, 2024,
	35, 2024,
	38, 2024,
	39, 2024,
	40, 2024,
	41, 2024,
	42, 2024,
	43, 2024,
	44, 2024,
	45, 2024,
	46, 2024,
	47, 2024,
	48, 2024,
	49, 2024,
	51, 2024,
	52, 2024,
	53, 2024,
	54, 2024,
	55, 2024,
	56, 2024,
	59, 2024,
	60, 2024,
	61, 2024,
	62, 2024,
	64, 2024,
	65, 2024,
	66, 2024,
	69, 2024,
	70, 2024,
	71, 2024,
	72, 2024,
	73, 2024,
	74, 2024,
	75, 2024,
	76, 2024,
	77, 2024,
	78, 2024,
	79, 2024,
	81, 2024,
	82, 2024,
	83, 2024,
	84, 2024,
	85, 2024,
	87, 2024,
	88, 2024,
	89, 2024,
	97, 2024,
	98, 2024,
	99, 2024,
	100, 2024,
	101, 2024,
	102, 2024,
	103, 2024,
	104, 2024,
	106, 2024,
	108, 2024,
	109, 2024,
	111, 2024,
	114, 2024,
	115, 2024,
	116, 2024,
	118, 2024,
	120, 2024,
	121, 2024,
	123, 2024,
	124, 2024,
	125, 2024,
	126, 2024,
	127, 2024,
	128, 2024,
	129, 2024,
	130, 2024,
	131, 2024,
	132, 2024,
	133, 2024,
	134, 2024,
	135, 2024,
	139, 2024,
	140, 2024,
	141, 2024,
	142, 2024,
	143, 2024,
	144, 2024,
	145, 2024,
	146, 2024,
	147, 2024,
	148, 2024,
	149, 2024,
	150, 2024,
	152, 2024,
	155, 2024,
	156, 2024,
	157, 2024,
	159, 2024,
	160, 2024,
	162, 2024,
	163, 2024,
	165, 2024,
	166, 2024,
	167, 2024,
	168, 2024,
	169, 2024,
	170, 2024,
	171, 2024,
	172, 2024,
	173, 2024,
	174, 2024,
	175, 2024,
	176, 2024,
	177, 2024,
	178, 2024,
	179, 2024,
	180, 2024,
	181, 2024,
	183, 2024,
	184, 2024,
	185, 2024,
	187, 2024,
	188, 2024,
	189, 2024,
	190, 2024,
	191, 2024,
	192, 2024,
	193, 2024,
	194, 2024,
	195, 2024,
	197, 2024,
	199, 2024,
	200, 2024,
	201, 2024,
	202, 2024,
	203, 2024,
	204, 2024,
	205, 2024,
	206, 2024,
	207, 2024,
	208, 2024,
	209, 2024,
	210, 2024,
	211, 2024,
	212, 2024,
	213, 2024,
	214, 2024,
	215, 2024,
	217, 2024,
	218, 2024,
	220, 2024,
	221, 2024,
	222, 2024,
	223, 2024,
	224, 2024,
	225, 2024,
	227, 2024,
	228, 2024,
	231, 2024,
	232, 2024,
	233, 2024,
	234, 2024,
	235, 2024,
	236, 2024,
	237, 2024,
	238, 2024,
	239, 2024,
	240, 2024,
	241, 2024,
	242, 2024,
	243, 2024,
	244, 2024,
	245, 2024,
	246, 2024,
	247, 2024,
	248, 2024,
	249, 2024,
	252, 2024,
	253, 2024,
	255, 2024,
	256, 2024,
	257, 2024,
	258, 2024,
	259, 2024,
	261, 2024,
	262, 2024,
	263, 2024,
	266, 2024,
	267, 2024,
	268, 2024,
	269, 2024,
	271, 2024,
	272, 2024,
	273, 2024,
	275, 2024,
	277, 2024,
	278, 2024,
	279, 2024,
	280, 2024,
	281, 2024,
	282, 2024,
	283, 2024,
	284, 2024,
	285, 2024,
	286, 2024,
	288, 2024,
	289, 2024,
	290, 2024,
	291, 2024,
	292, 2024,
	293, 2024,
	295, 2024,
	297, 2024,
	298, 2024,
	299, 2024,
	300, 2024,
	301, 2024,
	302, 2024,
	303, 2024,
	304, 2024,
	305, 2024,
	307, 2024,
	308, 2024,
	309, 2024,
	310, 2024,
	311, 2024,
	312, 2024,
	313, 2024,
	314, 2024,
	315, 2024,
	316, 2024,
	317, 2024,
	318, 2024,
	319, 2024,
	320, 2024,
	322, 2024,
	323, 2024,
	324, 2024,
	325, 2024,
	326, 2024,
	327, 2024,
	328, 2024,
	329, 2024,
	330, 2024,
	331, 2024,
	332, 2024,
	333, 2024,
	334, 2024,
	335, 2024,
	336, 2024,
	337, 2024,
	338, 2024,
	340, 2024,
	341, 2024,
	342, 2024,
	343, 2024,
	344, 2024,
	345, 2024,
	346, 2024,
	347, 2024,
	348, 2024,
	349, 2024,
	351, 2024,
	352, 2024,
	353, 2024,
	354, 2024,
	355, 2024,
	356, 2024,
	357, 2024,
	358, 2024,
	359, 2024,
	360, 2024,
	361, 2024,
	363, 2024,
	364, 2024,
	365, 2024,
	366, 2024,
	367, 2024,
	368, 2024,
	369, 2024,
	370, 2024,
	371, 2024,
	372, 2024,
	373, 2024,
	374, 2024,
	376, 2024,
	377, 2024,
	378, 2024,
	380, 2024,
	381, 2024,
	382, 2024,
	383, 2024,
	384, 2024,
	385, 2024,
	386, 2024,
	388, 2024,
	389, 2024,
	390, 2024,
	391, 2024,
	392, 2024,
	394, 2024,
	396, 2024,
	397, 2024,
	398, 2024,
	399, 2024,
	400, 2024,
	402, 2024,
	403, 2024,
	404, 2024,
	406, 2024,
	407, 2024,
	410, 2024,
	411, 2024,
	412, 2024,
	413, 2024,
	414, 2024,
	415, 2024,
	417, 2024,
	419, 2024,
	420, 2024,
	421, 2024,
	422, 2024,
	423, 2024,
	424, 2024,
	425, 2024,
	427, 2024,
	428, 2024,
	429, 2024,
	434, 2024,
	435, 2024,
	436, 2024,
	437, 2024,
	438, 2024,
	439, 2024,
	440, 2024,
	441, 2024,
	443, 2024,
	444, 2024,
	445, 2024,
	446, 2024,
	447, 2024,
	448, 2024,
	450, 2024,
	451, 2024,
	452, 2024,
	453, 2024,
	454, 2024,
	455, 2024,
	456, 2024,
	457, 2024,
	458, 2024,
	460, 2024,
	463, 2024,
	464, 2024,
	466, 2024,
	467, 2024,
	-2, 0,
	-1, 1331,
	154, 1927,
	393, 1927,
	445, 1927,
	464, 1927,
	-2, 0,
	-1, 1360,
	298, 638,
	349, 638,
	-2, 0,
	-1, 1383,
	1, 633,
	461, 633,
	463, 633,
	465, 633,
	-2, 0,
	-1, 1384,
	1, 658,
	461, 658,
	463, 658,
	465, 658,
	-2, 0,
	-1, 1385,
	1, 640,
	461, 640,
	463, 640,
	465, 640,
	-2, 0,
	-1, 1387,
	1, 644,
	461, 644,
	463, 644,
	465, 644,
	-2, 0,
	-1, 1412,
	1, 1977,
	461, 1977,
	463, 1977,
	464, 1977,
	465, 1977,
	-2, 684,
	-1, 1413,
	1, 1924,
	461, 1924,
	463, 1924,
	464, 1924,
	465, 1924,
	-2, 685,
	-1, 1428,
	1, 960,
	465, 960,
	-2, 965,
	-1, 1433,
	138, 1080,
	226, 1080,
	260, 1080,
	-2, 1031,
	-1, 1531,
	122, 1044,
	138, 1044,
	196, 1044,
	226, 1044,
	260, 1044,
	270, 1044,
	408, 1044,
	-2, 1446,
	-1, 1584,
	463, 1584,
	-2, 0,
	-1, 1626,
	122, 1044,
	138, 1044,
	196, 1044,
	226, 1044,
	260, 1044,
	270, 1044,
	408, 1044,
	-2, 1155,
	-1, 1676,
	462, 1277,
	-2, 1265,
	-1, 1720,
	1, 495,
	465, 495,
	-2, 965,
	-1, 1918,
	1, 635,
	461, 635,
	463, 635,
	465, 635,
	-2, 0,
	-1, 1919,
	1, 660,
	461, 660,
	463, 660,
	465, 660,
	-2, 0,
	-1, 2009,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1326,
	-1, 2010,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1327,
	-1, 2011,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1328,
	-1, 2012,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1329,
	-1, 2013,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1330,
	-1, 2014,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1331,
	-1, 2015,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1332,
	-1, 2016,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1333,
	-1, 2028,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1345,
	-1, 2029,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1346,
	-1, 2030,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1347,
	-1, 2033,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1352,
	-1, 2039,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1356,
	-1, 2041,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1364,
	-1, 2042,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1365,
	-1, 2043,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1366,
	-1, 2044,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1367,
	-1, 2138,
	5, 1234,
	154, 1595,
	462, 1712,
	-2, 1703,
	-1, 2139,
	154, 1596,
	-2, 1981,
	-1, 2140,
	154, 1597,
	-2, 1845,
	-1, 2141,
	154, 1598,
	-2, 1767,
	-1, 2142,
	154, 1599,
	-2, 1803,
	-1, 2143,
	154, 1600,
	-2, 1843,
	-1, 2144,
	154, 1601,
	-2, 1918,
	-1, 2145,
	154, 1602,
	-2, 1429,
	-1, 2221,
	1, 1156,
	2, 1156,
	87, 1156,
	122, 1156,
	138, 1156,
	151, 1156,
	155, 1156,
	161, 1156,
	164, 1156,
	187, 1156,
	196, 1156,
	206, 1156,
	222, 1156,
	226, 1156,
	245, 1156,
	260, 1156,
	264, 1156,
	270, 1156,
	321, 1156,
	323, 1156,
	408, 1156,
	418, 1156,
	431, 1156,
	432, 1156,
	433, 1156,
	442, 1156,
	461, 1156,
	463, 1156,
	465, 1156,
	467, 1156,
	-2, 1155,
	-1, 2226,
	462, 1686,
	-2, 1698,
	-1, 2248,
	462, 1276,
	-2, 1266,
	-1, 2493,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1354,
	-1, 2494,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1358,
	-1, 2500,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1360,
	-1, 2683,
	203, 965,
	295, 965,
	302, 965,
	442, 965,
	-2, 492,
	-1, 2775,
	284, 1068,
	-2, 873,
	-1, 2864,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1362,
	-1, 2871,
	200, 0,
	202, 0,
	252, 0,
	-2, 1381,
	-1, 2934,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1410,
	-1, 2935,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1411,
	-1, 2936,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1412,
	-1, 2940,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1416,
	-1, 2941,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1417,
	-1, 2942,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1418,
	-1, 2986,
	462, 1687,
	-2, 1699,
	-1, 3074,
	464, 2127,
	-2, 1008,
	-1, 3125,
	200, 0,
	202, 0,
	252, 0,
	-2, 1382,
	-1, 3128,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1385,
	-1, 3129,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1387,
	-1, 3290,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1386,
	-1, 3291,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1388,
	-1, 3301,
	200, 0,
	-2, 1419,
	-1, 3410,
	200, 0,
	-2, 1420,
	-1, 3528,
	43, 0,
	173, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1984,
}

const sqlPrivate = 57344

const sqlLast = 76515

var sqlAct = [...]int{

	906, 3231, 3331, 3527, 3537, 3622, 3359, 3334, 3612, 2616,
	3506, 2762, 3497, 2170, 3494, 3481, 3538, 2387, 3539, 3575,
	3366, 3320, 1022, 3006, 3414, 3107, 2902, 2617, 3255, 835,
	3279, 3066, 3526, 3061, 1996, 3371, 3187, 2213, 2700, 214,
	1058, 214, 214, 2791, 214, 214, 214, 214, 214, 2056,
	1315, 214, 1446, 3260, 1176, 1621, 3048, 2758, 2784, 592,
	1651, 571, 2856, 2486, 1201, 2786, 826, 1768, 1894, 3007,
	2420, 3305, 1077, 1529, 2376, 2335, 2359, 214, 2351, 2422,
	1169, 592, 1014, 2362, 2658, 1619, 2644, 2631, 2602, 3106,
	2277, 1854, 2430, 2411, 2620, 3159, 1311, 2413, 690, 863,
	2388, 2419, 1843, 1593, 1844, 2279, 2336, 2214, 2957, 2601,
	2069, 1851, 2107, 1993, 1539, 2087, 1777, 2482, 3415, 1806,
	1989, 1795, 1188, 2521, 86, 1802, 2429, 2311, 1557, 1367,
	2360, 902, 1065, 1753, 1185, 1755, 1428, 1594, 2188, 2099,
	2622, 2053, 2312, 1006, 2760, 822, 1178, 2167, 1324, 2663,
	2212, 1308, 2381, 593, 1835, 1248, 2216, 1298, 2269, 1054,
	208, 2423, 1552, 594, 2081, 539, 1009, 1603, 2178, 2196,
	3360, 207, 1652, 988, 2134, 2070, 1447, 214, 214, 1520,
	1445, 1834, 555, 565, 149, 588, 150, 1322, 1860, 32,
	1274, 206, 665, 1198, 636, 834, 142, 525, 1767, 862,
	542, 547, 1011, 37, 737, 986, 36, 34, 25, 23,
	21, 550, 1318, 1451, 1427, 753, 1256, 2517, 2975, 597,
	2976, 830, 4, 1895, 3652, 1874, 2574, 2575, 2187, 2618,
	600, 3643, 1062, 1874, 1874, 2187, 3642, 1062, 3621, 3604,
	2187, 597, 1811, 3201, 3602, 3561, 3559, 3557, 3201, 3562,
	2187, 2187, 600, 2801, 3554, 3551, 3548, 2435, 3555, 3552,
	1811, 2681, 2961, 830, 3524, 2800, 700, 1872, 1811, 3523,
	2187, 142, 1034, 1811, 825, 3522, 831, 3519, 3518, 1886,
	3476, 1886, 1886, 3470, 2241, 3477, 3469, 2187, 3464, 928,
	2187, 3463, 3201, 2180, 1039, 3201, 3457, 685, 684, 3451,
	1811, 3449, 3412, 3201, 3393, 3201, 2241, 3390, 1811, 3349,
	3348, 3201, 3341, 1811, 1811, 3340, 1811, 3311, 992, 3201,
	993, 1811, 57, 688, 687, 1003, 905, 810, 3292, 809,
	182, 3277, 2241, 989, 989, 1886, 58, 3268, 3228, 3218,
	3200, 2814, 2187, 2187, 3201, 3127, 1035, 3082, 3076, 2241,
	62, 2830, 2830, 817, 3046, 2981, 2971, 861, 3047, 2982,
	2972, 2964, 3396, 2895, 2580, 2187, 736, 1811, 770, 2883,
	184, 2829, 2821, 2187, 1386, 2830, 2822, 1886, 2961, 2179,
	2753, 68, 212, 990, 1886, 2615, 2237, 2613, 2612, 2187,
	743, 2187, 2187, 2566, 2549, 57, 2538, 2187, 2550, 3219,
	2187, 2536, 1459, 1460, 754, 741, 2409, 2537, 2408, 58,
	1890, 74, 1890, 2254, 183, 2240, 2084, 2187, 2187, 2241,
	1811, 85, 1490, 62, 176, 1811, 75, 82, 742, 1462,
	2235, 1219, 177, 744, 2187, 1459, 1460, 776, 2228, 2186,
	2822, 2326, 1811, 2187, 751, 752, 2268, 1889, 1726, 2590,
	763, 1890, 1772, 151, 68, 1490, 2814, 1461, 1369, 2357,
	2520, 2485, 1462, 771, 746, 1873, 1810, 2266, 1589, 1197,
	76, 1620, 3033, 2574, 2575, 2859, 2592, 2593, 2594, 2839,
	1805, 1746, 2085, 2802, 74, 2207, 2206, 2205, 1875, 2462,
	1461, 769, 3123, 2204, 85, 2203, 1875, 1875, 994, 75,
	82, 991, 2803, 3330, 816, 815, 814, 813, 812, 808,
	182, 1017, 807, 806, 805, 804, 803, 802, 801, 800,
	799, 798, 797, 747, 796, 1530, 735, 734, 733, 732,
	214, 740, 731, 730, 729, 849, 728, 2589, 727, 726,
	1467, 725, 724, 76, 723, 2591, 748, 749, 722, 721,
	184, 720, 719, 1213, 2086, 2083, 718, 717, 214, 716,
	715, 714, 713, 1459, 1460, 214, 2800, 712, 756, 755,
	711, 1489, 1491, 1467, 1035, 710, 750, 709, 699, 698,
	77, 214, 1080, 214, 214, 1181, 214, 1080, 214, 656,
	1462, 655, 775, 613, 183, 612, 214, 214, 1218, 1064,
	878, 611, 603, 1069, 1489, 1491, 2179, 1035, 772, 602,
	601, 2580, 148, 80, 578, 81, 577, 576, 1461, 575,
	559, 214, 204, 203, 202, 1482, 201, 200, 199, 198,
	197, 2574, 2575, 151, 182, 214, 1882, 196, 1181, 1181,
	214, 214, 1530, 214, 1873, 1964, 689, 745, 75, 195,
	118, 194, 2088, 77, 193, 214, 192, 191, 1482, 190,
	189, 188, 2595, 214, 767, 768, 2583, 2584, 2576, 2577,
	2578, 2579, 2581, 2582, 184, 187, 186, 214, 214, 214,
	214, 214, 1181, 1181, 1191, 148, 80, 1181, 81, 765,
	214, 1181, 214, 214, 185, 3176, 2590, 119, 3138, 759,
	2979, 1467, 2384, 1052, 2831, 760, 214, 182, 2661, 2543,
	152, 182, 738, 2532, 773, 2369, 2341, 2229, 183, 689,
	1212, 1483, 2220, 118, 1073, 1751, 1166, 1171, 176, 2125,
	739, 1897, 1078, 1319, 1636, 1560, 177, 1189, 1622, 1560,
	761, 1559, 1181, 1546, 758, 1559, 2123, 184, 1047, 1200,
	1203, 184, 2082, 774, 1483, 1541, 597, 686, 1071, 1199,
	1458, 762, 1563, 1024, 214, 2121, 1558, 600, 182, 2580,
	119, 3544, 2119, 2117, 3525, 1172, 2246, 1261, 214, 1195,
	2331, 764, 3445, 152, 3405, 1020, 3269, 3399, 3264, 3180,
	3158, 183, 2591, 214, 3397, 183, 1206, 1174, 1211, 1896,
	1217, 176, 1388, 766, 1341, 176, 3157, 3145, 184, 177,
	3144, 831, 3143, 177, 3142, 1312, 3136, 3135, 3134, 1207,
	3045, 2995, 2994, 2992, 2985, 2954, 2953, 1002, 2952, 2879,
	151, 1257, 1257, 1325, 151, 1302, 1305, 1848, 2875, 2825,
	3031, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469,
	1250, 1253, 183, 2656, 3417, 2609, 182, 1258, 2600, 2573,
	2570, 2569, 176, 2567, 2574, 2575, 2556, 2592, 2593, 2594,
	177, 1195, 118, 2574, 2575, 2555, 1434, 1463, 1464, 1465,
	1466, 1468, 1469, 142, 142, 2554, 1337, 1542, 1396, 1540,
	182, 151, 1528, 1340, 2551, 2370, 184, 2548, 2526, 182,
	2525, 2518, 2410, 1333, 2221, 2586, 2587, 2588, 2092, 1458,
	1327, 1329, 2585, 2583, 2584, 2576, 2577, 2578, 2579, 2581,
	2582, 1426, 1541, 1816, 1814, 3650, 1747, 2313, 2589, 1457,
	184, 3620, 3619, 1433, 3560, 2481, 182, 2589, 1023, 184,
	183, 2904, 3514, 1346, 3512, 1387, 833, 3442, 3439, 3436,
	176, 3435, 849, 3434, 1353, 1432, 849, 3430, 177, 1361,
	3424, 2298, 3394, 3329, 1164, 3389, 3388, 2059, 3326, 1164,
	3303, 1444, 3287, 3286, 183, 1431, 184, 3274, 3273, 151,
	3253, 3250, 3244, 183, 176, 3175, 3263, 3156, 214, 3096,
	3093, 3022, 177, 176, 3021, 831, 3010, 3009, 1429, 2967,
	2870, 177, 2580, 2832, 2815, 1463, 1464, 1465, 1466, 1468,
	1469, 2580, 1591, 151, 214, 1600, 2778, 2747, 2725, 810,
	183, 809, 151, 1435, 214, 1080, 214, 214, 214, 214,
	176, 2703, 2702, 2677, 592, 214, 214, 2614, 177, 592,
	214, 2547, 1454, 1455, 1646, 214, 2546, 2531, 2675, 2574,
	2575, 1181, 2592, 2593, 2594, 2509, 2065, 2368, 2350, 2383,
	1718, 1562, 1459, 1460, 1564, 1561, 1553, 1630, 3122, 1550,
	2250, 2249, 1080, 2576, 2577, 2578, 2579, 2581, 2582, 1610,
	182, 2224, 1490, 1459, 1460, 1554, 1555, 2590, 1638, 1462,
	2574, 2575, 2201, 2185, 2115, 1749, 2590, 2637, 1524, 1648,
	1597, 1598, 1459, 1460, 1715, 1723, 1717, 1898, 1635, 1592,
	1462, 1588, 1587, 2589, 1586, 1585, 1584, 1461, 1583, 2703,
	184, 1582, 1581, 1580, 1578, 1644, 1577, 1576, 1575, 1462,
	1574, 1573, 1572, 1571, 1570, 831, 1569, 1657, 1461, 1568,
	1567, 1566, 1543, 1525, 989, 1523, 1518, 1046, 1037, 1030,
	3247, 1629, 3177, 3131, 2991, 2974, 182, 1461, 845, 1642,
	1640, 2970, 2535, 1742, 183, 2202, 3315, 2243, 3179, 2574,
	2575, 2990, 1542, 2673, 176, 1639, 1521, 1627, 1631, 1066,
	3437, 2787, 177, 2591, 1746, 1068, 1720, 2580, 3267, 1059,
	2124, 3221, 2591, 1590, 597, 1615, 184, 1181, 214, 597,
	1467, 142, 3220, 151, 1080, 600, 1745, 2122, 1746, 1618,
	600, 1624, 1617, 1616, 1614, 1613, 1612, 2977, 1746, 1647,
	1195, 1467, 1752, 3400, 1714, 2817, 2120, 2315, 2580, 2816,
	3398, 1489, 1491, 2118, 2116, 1062, 1649, 1067, 2595, 1622,
	183, 1424, 3372, 214, 1761, 2574, 2575, 214, 214, 1560,
	176, 1360, 2553, 1792, 2552, 1559, 1794, 3054, 177, 1799,
	214, 1573, 1573, 1738, 1849, 2491, 1062, 2300, 1063, 214,
	2728, 214, 2590, 214, 1732, 3020, 2764, 214, 2763, 151,
	1548, 1060, 794, 182, 2084, 1482, 3306, 1001, 1061, 214,
	1062, 1895, 3367, 1772, 1369, 1397, 2586, 2587, 2588, 1845,
	1776, 1368, 3037, 2585, 2583, 2584, 2576, 2577, 2578, 2579,
	2581, 2582, 2585, 2583, 2584, 2576, 2577, 2578, 2579, 2581,
	2582, 795, 3024, 184, 1721, 2837, 2741, 1678, 1838, 1181,
	1790, 1181, 214, 1181, 3623, 1017, 214, 1017, 2618, 1181,
	2906, 3545, 1181, 214, 2100, 214, 214, 2541, 2248, 1527,
	2085, 1200, 1579, 1556, 1812, 1181, 1181, 1181, 597, 214,
	2756, 1199, 1803, 1866, 214, 1842, 1857, 183, 2591, 600,
	1234, 3556, 3553, 592, 214, 2796, 214, 176, 214, 3002,
	214, 1483, 214, 2580, 3491, 177, 3062, 3590, 2417, 2380,
	1798, 1809, 1350, 3456, 3591, 1654, 214, 651, 3546, 214,
	2478, 214, 3211, 1222, 2685, 2255, 151, 1164, 1232, 1807,
	214, 3647, 788, 3358, 3351, 775, 3039, 3035, 1068, 786,
	1914, 784, 2086, 2083, 1826, 1825, 1756, 3034, 1062, 1950,
	1757, 214, 1394, 1864, 1900, 790, 2281, 214, 781, 1841,
	214, 2999, 2506, 2998, 1948, 2530, 1733, 1395, 849, 2529,
	2528, 2527, 2495, 831, 1164, 831, 2333, 829, 1902, 1859,
	2325, 1862, 1080, 2322, 2303, 2377, 2504, 2236, 2590, 2040,
	1067, 1430, 2272, 2272, 1196, 1325, 652, 1325, 2687, 1905,
	1233, 2586, 2587, 2588, 2270, 2270, 824, 2111, 2585, 2583,
	2584, 2576, 2577, 2578, 2579, 2581, 2582, 829, 1968, 2110,
	1977, 2674, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469,
	1053, 1998, 1267, 1343, 1266, 1047, 1891, 1393, 1892, 1758,
	2088, 1265, 3285, 1264, 1904, 1059, 2284, 1465, 1466, 1468,
	1469, 828, 1760, 597, 2578, 2579, 2581, 2582, 2071, 2072,
	2302, 1348, 2838, 1824, 600, 1893, 3607, 1080, 1769, 1469,
	1958, 1807, 1068, 1962, 1903, 3455, 2071, 2097, 1930, 1657,
	1657, 1737, 1736, 778, 2591, 1746, 1743, 1911, 1912, 1913,
	1877, 828, 2501, 1879, 1286, 1228, 1881, 2727, 1765, 1966,
	1884, 1909, 1242, 2262, 2502, 2227, 1164, 1762, 2507, 2055,
	214, 1975, 2133, 2244, 2137, 2137, 2151, 1972, 2071, 1770,
	1771, 2171, 2173, 2153, 1067, 830, 2177, 3336, 2291, 1020,
	1344, 1020, 1997, 1965, 904, 1967, 2582, 1060, 3608, 1971,
	2082, 1080, 214, 1976, 1061, 839, 1362, 1766, 1643, 1747,
	2313, 214, 1994, 1995, 214, 1974, 810, 1080, 1985, 810,
	810, 1986, 1987, 2319, 3222, 830, 2055, 1437, 831, 2225,
	2063, 3516, 2290, 1747, 2313, 2844, 2061, 2096, 2051, 1443,
	2100, 831, 1740, 1747, 2313, 831, 1863, 2283, 2222, 2258,
	1631, 2109, 1917, 2843, 2459, 2208, 2113, 2114, 1423, 2218,
	2219, 2260, 2049, 1459, 1460, 1763, 2584, 2576, 2577, 2578,
	2579, 2581, 2582, 1963, 1359, 1441, 2209, 2101, 3590, 2067,
	1392, 654, 653, 1490, 3610, 1027, 3012, 1961, 1407, 1045,
	1462, 1059, 2088, 2261, 2234, 1249, 2721, 214, 2094, 3284,
	3627, 1918, 2574, 2575, 1970, 1181, 1369, 2889, 2259, 2574,
	2575, 2503, 1369, 1383, 3580, 3615, 1025, 2301, 1461, 2684,
	2505, 3112, 2192, 827, 3111, 2193, 989, 1957, 1923, 1678,
	1678, 1247, 1080, 831, 1679, 707, 2146, 214, 3207, 2793,
	2162, 3637, 537, 2175, 1062, 214, 2183, 2184, 647, 1629,
	646, 1772, 1919, 2194, 2483, 2484, 214, 2198, 2199, 1723,
	1230, 3542, 2282, 827, 1384, 1741, 532, 2226, 2045, 214,
	1960, 860, 1181, 2738, 2733, 1627, 2046, 3023, 2271, 1016,
	2047, 2794, 1442, 1060, 2052, 214, 1080, 782, 1349, 1181,
	1061, 214, 214, 1874, 782, 1789, 783, 1654, 1654, 1028,
	1774, 1467, 2245, 1949, 1759, 2088, 792, 2273, 1756, 1772,
	791, 1924, 1757, 782, 214, 1562, 2037, 214, 1947, 3431,
	1763, 2686, 1249, 214, 1164, 3609, 142, 2337, 1551, 683,
	2253, 604, 1489, 1491, 2671, 1285, 1227, 214, 2793, 2338,
	2580, 1440, 1554, 1555, 214, 3036, 214, 2580, 214, 2320,
	2365, 2750, 2886, 2238, 214, 2323, 1763, 214, 1657, 214,
	3108, 214, 2252, 214, 214, 2256, 214, 1181, 1181, 1181,
	1345, 1181, 3297, 2305, 3597, 3337, 214, 214, 2354, 214,
	214, 2334, 2267, 3205, 3579, 3502, 1482, 3543, 2293, 1404,
	214, 2314, 2316, 2317, 2318, 3441, 2285, 2287, 2276, 2304,
	1517, 1758, 3240, 214, 214, 214, 3613, 2497, 214, 1164,
	214, 1017, 2321, 214, 1760, 214, 2091, 214, 2404, 2405,
	779, 3013, 2434, 3474, 2887, 2590, 2337, 2048, 2337, 2545,
	1062, 2306, 2590, 3628, 2391, 1017, 2050, 2297, 214, 214,
	214, 214, 214, 214, 1200, 214, 2035, 830, 2374, 2038,
	2433, 597, 2436, 2437, 2339, 1763, 1018, 2197, 3246, 2400,
	1172, 2348, 600, 3541, 2054, 2217, 2062, 1959, 2330, 1762,
	2431, 2358, 2449, 214, 2450, 2416, 1195, 1436, 3614, 3102,
	2987, 1405, 1483, 1164, 2324, 2343, 1801, 2345, 3281, 1756,
	1747, 1744, 2438, 1757, 2439, 2386, 1026, 2465, 2034, 1164,
	2402, 2447, 2393, 1916, 3638, 3206, 1800, 2715, 1922, 1533,
	3616, 1040, 708, 1538, 2397, 2401, 2398, 1325, 2399, 2407,
	1606, 2591, 2088, 2418, 1358, 3578, 3113, 1371, 2591, 533,
	2382, 2444, 2382, 605, 606, 2470, 1796, 2472, 2446, 1044,
	770, 2451, 2717, 2453, 1793, 2455, 3540, 2452, 1678, 2454,
	2714, 2456, 1609, 1406, 1195, 1195, 1875, 1770, 1771, 3241,
	3472, 2463, 821, 3589, 3587, 142, 2719, 1763, 2498, 2523,
	2524, 2195, 214, 3377, 3252, 2782, 2473, 2372, 1833, 2403,
	2468, 534, 1758, 1599, 2533, 1797, 1038, 1607, 2475, 3473,
	3280, 1033, 2406, 2476, 524, 1760, 1195, 3050, 2690, 1449,
	1450, 2943, 3109, 2480, 1471, 1463, 1464, 1465, 1466, 1468,
	1469, 1773, 3154, 2457, 1164, 2718, 1654, 1734, 1439, 2519,
	2857, 535, 3632, 536, 3343, 2664, 3342, 608, 607, 2036,
	1195, 3324, 1195, 3210, 3421, 771, 2534, 2646, 3001, 2783,
	3209, 2585, 2583, 2584, 2576, 2577, 2578, 2579, 2581, 2582,
	1762, 2576, 2577, 2578, 2579, 2581, 2582, 1517, 1731, 2496,
	2698, 2694, 1080, 2611, 831, 2373, 2361, 2352, 1164, 1858,
	1847, 1846, 1820, 2625, 2626, 3443, 2885, 609, 610, 2627,
	2467, 214, 3482, 2477, 1954, 1020, 1449, 1448, 1608, 214,
	3067, 2307, 1727, 2189, 3282, 3256, 214, 1981, 2464, 214,
	214, 1080, 2349, 1385, 1288, 3115, 1759, 3365, 3363, 1020,
	1080, 2647, 3325, 2705, 2704, 2489, 1973, 214, 2540, 2651,
	1347, 1450, 770, 579, 2969, 1729, 2641, 1910, 2630, 2629,
	2233, 704, 214, 2232, 2231, 697, 2652, 2653, 2640, 2944,
	2230, 1730, 2356, 1273, 821, 1259, 1271, 2945, 1763, 828,
	214, 214, 214, 2645, 706, 2639, 214, 2655, 3155, 214,
	2191, 3426, 1260, 2682, 2642, 2190, 214, 214, 214, 214,
	214, 3631, 2660, 2649, 1448, 3116, 2688, 2466, 3232, 1754,
	772, 2669, 214, 214, 214, 3208, 2826, 2659, 2636, 1372,
	1856, 214, 2606, 2607, 2608, 2752, 2680, 2619, 1982, 3332,
	3594, 3361, 3485, 214, 1181, 2707, 214, 2711, 2712, 3427,
	3160, 2958, 2624, 2634, 1080, 2105, 2635, 771, 3322, 1421,
	585, 1657, 1080, 1419, 3444, 3596, 2695, 214, 1401, 1399,
	214, 214, 2308, 2309, 214, 1946, 3558, 1181, 214, 1382,
	2691, 2692, 2678, 2679, 1380, 3438, 1181, 1181, 1181, 2648,
	3323, 2654, 2650, 214, 3302, 1378, 2706, 1657, 2709, 214,
	2662, 2666, 2667, 2668, 214, 2773, 214, 2732, 3486, 2789,
	3153, 1376, 2683, 214, 2665, 3428, 1374, 1366, 3333, 2730,
	1364, 1269, 3041, 2739, 2689, 2603, 773, 1759, 2869, 2748,
	2835, 2568, 2508, 2353, 2672, 2104, 2332, 1181, 1181, 2299,
	2251, 1637, 1634, 587, 2769, 214, 214, 2720, 1422, 214,
	2798, 1338, 2604, 2726, 2852, 2851, 1181, 824, 2461, 1761,
	2460, 2761, 2734, 2735, 2441, 774, 1956, 2736, 1927, 1716,
	2699, 2737, 2743, 702, 703, 1565, 2749, 695, 696, 1272,
	2742, 1342, 1270, 214, 1761, 1080, 214, 214, 1080, 214,
	705, 1246, 3536, 3227, 2431, 2790, 3479, 2305, 3217, 2813,
	3184, 3576, 772, 2431, 2722, 2723, 2897, 780, 2724, 3065,
	214, 1420, 2662, 3018, 1195, 1418, 3016, 1803, 3198, 3000,
	1400, 1398, 2781, 2833, 1945, 1803, 2772, 1017, 831, 2765,
	2795, 1381, 2378, 2788, 1841, 936, 1379, 2744, 2745, 2804,
	2828, 2746, 1017, 581, 2367, 2366, 3195, 1377, 2346, 1888,
	1887, 1678, 1885, 1080, 1883, 1880, 2740, 2824, 1878, 1876,
	2849, 586, 2797, 1375, 1080, 1867, 214, 1817, 1373, 1365,
	1815, 1017, 1363, 1268, 210, 2834, 527, 528, 1804, 543,
	527, 543, 553, 558, 1164, 2850, 574, 1678, 3196, 2770,
	2872, 1791, 1788, 1775, 210, 1764, 2785, 3382, 2774, 2775,
	2776, 583, 2840, 1645, 2841, 3591, 2842, 2846, 773, 2881,
	2882, 1452, 694, 998, 3508, 3276, 210, 2853, 3271, 1654,
	2847, 3270, 2432, 1164, 142, 142, 2855, 1750, 1224, 1657,
	785, 787, 1164, 3384, 2272, 1189, 2289, 999, 1078, 1602,
	580, 2272, 2487, 1016, 2955, 1016, 2270, 774, 2877, 2819,
	2820, 2811, 2812, 2288, 3075, 1654, 849, 1772, 2272, 1416,
	1417, 214, 1944, 1920, 2888, 2890, 2891, 1943, 1807, 849,
	2286, 1925, 2896, 1459, 1460, 3433, 214, 584, 1657, 1657,
	1195, 2337, 1080, 2908, 2903, 2806, 2807, 2808, 582, 2809,
	2810, 2907, 2912, 2978, 1657, 1657, 2064, 1453, 2973, 3407,
	2909, 2920, 214, 2894, 2910, 3161, 2310, 1606, 2922, 2292,
	2947, 1456, 527, 527, 2900, 1533, 2488, 538, 1459, 1460,
	210, 1724, 2329, 1000, 2327, 1657, 2296, 1017, 1461, 2294,
	3478, 3611, 2948, 3191, 2328, 3630, 1164, 3192, 2295, 1609,
	3446, 3058, 1530, 3049, 1164, 1462, 2984, 2960, 214, 2385,
	2176, 1994, 2913, 1719, 2962, 2963, 1650, 2670, 1604, 3025,
	2574, 2575, 2158, 549, 1459, 1460, 2996, 1994, 2923, 2264,
	2263, 3448, 1352, 1461, 1607, 2108, 2989, 3194, 1351, 2892,
	2264, 3038, 2676, 2980, 2265, 214, 214, 2112, 2106, 3197,
	2965, 2966, 2079, 214, 3132, 2988, 1403, 1605, 2951, 1402,
	2884, 1020, 1080, 214, 1528, 1526, 3639, 1181, 3418, 3029,
	2993, 3355, 3316, 3314, 3243, 3178, 1020, 3030, 3032, 1678,
	1018, 214, 1018, 3099, 3092, 3081, 3004, 3055, 3060, 3077,
	142, 3044, 2986, 3043, 3042, 214, 214, 1181, 1181, 1181,
	3040, 214, 214, 214, 3015, 1020, 214, 214, 2805, 2779,
	214, 214, 2777, 1181, 2443, 2442, 3072, 2956, 2395, 214,
	1080, 3069, 3056, 2371, 2347, 2066, 1942, 1164, 1678, 1678,
	1164, 3068, 1941, 3057, 2305, 1608, 3071, 3063, 1940, 1939,
	1080, 1657, 1870, 1869, 1678, 1678, 1868, 1654, 1850, 1828,
	1827, 1823, 3193, 1822, 1821, 1819, 1818, 1415, 3059, 1414,
	1297, 1296, 1295, 3100, 1294, 1293, 1292, 1291, 3088, 1290,
	3130, 2391, 1289, 3070, 1287, 1678, 3079, 3073, 1282, 1281,
	1280, 3078, 1279, 1278, 1241, 214, 1240, 1239, 1238, 3084,
	1237, 1643, 3083, 1236, 1235, 1164, 1654, 1654, 3095, 3089,
	3090, 2431, 3117, 3098, 3091, 1229, 1164, 1223, 3097, 1221,
	1220, 3126, 1654, 1654, 2699, 3118, 1043, 3094, 1042, 973,
	3110, 883, 1725, 793, 638, 777, 3335, 1409, 73, 1231,
	624, 67, 3014, 633, 3490, 2713, 1017, 1017, 1926, 1370,
	1928, 2638, 2200, 1654, 1841, 3471, 3139, 2544, 214, 3413,
	1657, 3296, 2103, 1547, 69, 3105, 871, 3017, 1080, 3019,
	1080, 1020, 956, 3239, 3238, 3185, 3003, 2421, 3236, 3235,
	838, 1083, 1735, 877, 1748, 2247, 2136, 1658, 880, 214,
	214, 214, 1655, 882, 881, 1656, 1549, 879, 1653, 3152,
	2355, 214, 2389, 1276, 757, 1739, 2060, 214, 2098, 214,
	2539, 1544, 214, 214, 214, 3101, 851, 873, 2095, 3085,
	3086, 3087, 3166, 3203, 1080, 214, 214, 1181, 1036, 850,
	1080, 2643, 1181, 2792, 1164, 1031, 3169, 2983, 214, 3262,
	1980, 1678, 2479, 3171, 3165, 641, 3168, 3213, 3163, 3164,
	2571, 1601, 3170, 214, 2080, 2659, 1080, 3174, 1029, 1181,
	2159, 3183, 3202, 1041, 2152, 3204, 1984, 2148, 2379, 1425,
	574, 1519, 2390, 1070, 854, 2058, 3214, 3215, 1535, 3181,
	3182, 2513, 3230, 1438, 2799, 2657, 210, 214, 210, 210,
	2242, 1186, 3162, 210, 3505, 1988, 1832, 3212, 997, 1080,
	3167, 210, 1202, 996, 995, 3229, 3225, 3272, 3224, 1654,
	3496, 3493, 2759, 3258, 3261, 1728, 2257, 3234, 1017, 1511,
	3173, 3245, 2766, 3257, 3248, 867, 1226, 1194, 3233, 1080,
	2623, 3254, 2827, 1243, 3266, 3259, 3432, 1510, 789, 3423,
	1245, 1057, 1056, 1055, 2697, 210, 210, 3636, 1186, 3011,
	1678, 3275, 181, 1969, 1164, 823, 178, 180, 179, 3027,
	210, 2751, 90, 35, 16, 3308, 117, 1080, 1284, 116,
	115, 3283, 3288, 114, 113, 214, 112, 214, 111, 1080,
	214, 110, 210, 210, 210, 210, 1186, 109, 214, 108,
	3293, 107, 106, 105, 104, 574, 103, 210, 210, 2154,
	102, 101, 2158, 2158, 837, 100, 99, 3304, 98, 1016,
	214, 694, 1164, 3319, 3312, 3318, 97, 1841, 1654, 96,
	1020, 1020, 95, 94, 93, 3309, 3310, 92, 91, 3242,
	570, 214, 1164, 1016, 567, 214, 3313, 49, 3249, 3226,
	3354, 48, 89, 214, 88, 3317, 1657, 3369, 1181, 1078,
	15, 33, 3364, 13, 214, 3339, 3265, 53, 54, 12,
	1901, 3338, 28, 29, 3374, 79, 78, 3376, 27, 210,
	14, 3352, 26, 24, 10, 214, 214, 3373, 1017, 3294,
	3362, 3356, 8, 210, 7, 30, 1017, 3391, 3392, 1611,
	3403, 3404, 3368, 11, 3381, 147, 146, 214, 558, 1017,
	72, 1657, 3379, 214, 2158, 2158, 2158, 3386, 3380, 3261,
	3385, 145, 3378, 214, 71, 144, 143, 3294, 3383, 70,
	22, 9, 139, 3370, 3053, 2761, 3429, 66, 3387, 1997,
	141, 140, 63, 138, 3420, 137, 3395, 64, 136, 135,
	3416, 65, 134, 20, 5, 3419, 52, 6, 3278, 2836,
	1164, 83, 1164, 3406, 3411, 84, 31, 61, 60, 59,
	19, 3440, 51, 18, 171, 170, 169, 168, 214, 1181,
	163, 162, 3402, 167, 3345, 214, 165, 164, 166, 1181,
	1181, 161, 133, 173, 172, 1181, 1018, 175, 3462, 214,
	159, 214, 1020, 1657, 155, 154, 3447, 158, 160, 3450,
	157, 3373, 3454, 156, 153, 174, 1164, 132, 131, 56,
	1018, 3475, 1164, 3458, 130, 214, 129, 3466, 128, 3459,
	127, 214, 214, 3453, 1080, 126, 3487, 55, 17, 3460,
	3461, 2, 214, 214, 1, 3465, 1678, 3509, 1164, 0,
	3499, 0, 0, 3503, 0, 0, 0, 3511, 0, 3513,
	3495, 3498, 0, 3467, 3520, 3468, 0, 3500, 3492, 0,
	0, 3521, 0, 0, 0, 0, 0, 1195, 214, 0,
	3346, 3347, 0, 3515, 0, 3517, 0, 0, 0, 0,
	3547, 1164, 0, 0, 0, 3488, 0, 0, 0, 0,
	0, 1678, 3534, 527, 0, 3535, 3532, 3533, 0, 0,
	0, 0, 3549, 3565, 1654, 3567, 3563, 214, 0, 0,
	0, 1164, 0, 3573, 210, 0, 210, 3572, 0, 210,
	0, 3564, 3577, 3507, 3569, 0, 3566, 214, 3568, 1202,
	0, 1186, 210, 0, 210, 0, 0, 0, 0, 210,
	1202, 543, 3583, 3584, 210, 1202, 3588, 3586, 3585, 1164,
	574, 214, 1020, 214, 0, 3592, 0, 3593, 3595, 1654,
	1020, 1164, 3601, 3599, 3603, 3600, 0, 0, 3495, 3605,
	3606, 3498, 0, 1020, 1997, 0, 0, 3570, 3571, 0,
	0, 3574, 0, 1678, 0, 0, 0, 3618, 0, 0,
	3617, 0, 0, 849, 0, 0, 0, 2391, 0, 3625,
	3624, 0, 3626, 0, 0, 3629, 0, 0, 0, 0,
	0, 3633, 0, 0, 0, 3598, 3640, 0, 3641, 0,
	819, 837, 770, 3634, 3635, 837, 3510, 0, 0, 0,
	2574, 2575, 0, 2592, 2593, 2594, 0, 3644, 3645, 3646,
	3648, 3649, 0, 3507, 821, 2158, 2158, 2510, 2511, 3653,
	0, 1654, 0, 0, 3651, 0, 0, 1204, 0, 1208,
	0, 1214, 0, 0, 0, 0, 0, 0, 0, 2154,
	2154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 820, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2589, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 1778, 0, 0, 0, 0, 0,
	0, 2574, 2575, 0, 2592, 2593, 2594, 771, 0, 0,
	0, 0, 0, 1782, 0, 2158, 2158, 2158, 2158, 2158,
	2158, 2158, 2158, 2158, 2158, 2158, 2158, 2158, 2158, 2158,
	2158, 2158, 2158, 2158, 0, 2158, 0, 1336, 210, 2597,
	2598, 2599, 210, 210, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1855, 1779, 0, 2580, 0,
	0, 2154, 2154, 2154, 210, 2589, 210, 0, 210, 0,
	0, 0, 527, 0, 0, 1016, 0, 0, 0, 0,
	1602, 0, 0, 0, 1871, 2596, 0, 0, 0, 0,
	1016, 1459, 1460, 0, 0, 0, 1164, 0, 1389, 0,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 2595,
	0, 1490, 0, 0, 0, 0, 0, 0, 1462, 1016,
	0, 0, 0, 0, 0, 0, 0, 574, 0, 0,
	0, 694, 0, 0, 0, 0, 1783, 0, 210, 2580,
	1186, 210, 0, 2590, 0, 0, 1461, 0, 1606, 0,
	0, 0, 772, 0, 574, 1481, 0, 0, 0, 210,
	0, 0, 1478, 0, 0, 0, 0, 0, 210, 210,
	0, 210, 0, 210, 0, 210, 0, 210, 0, 0,
	1609, 0, 1512, 1513, 1514, 1515, 1516, 0, 0, 0,
	2595, 1951, 0, 0, 1952, 0, 1953, 1784, 1785, 1604,
	0, 3121, 0, 0, 0, 210, 1780, 0, 0, 0,
	0, 0, 1532, 0, 0, 1607, 0, 0, 1545, 1484,
	1485, 1486, 1487, 0, 2590, 0, 558, 0, 0, 1467,
	0, 0, 574, 0, 0, 210, 0, 1781, 1605, 2591,
	0, 0, 0, 0, 0, 125, 0, 0, 0, 0,
	0, 57, 1018, 0, 0, 0, 818, 2633, 773, 0,
	1489, 1491, 0, 0, 0, 58, 120, 1018, 0, 0,
	0, 0, 0, 0, 0, 1016, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 0, 0, 39, 122, 1018, 774, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 0,
	68, 0, 0, 0, 1482, 0, 1608, 0, 0, 0,
	2591, 0, 0, 0, 1786, 0, 0, 0, 0, 0,
	41, 0, 0, 0, 0, 42, 0, 1595, 1595, 1595,
	74, 0, 0, 123, 0, 0, 0, 0, 0, 40,
	85, 0, 2586, 2587, 2588, 75, 82, 0, 0, 2585,
	2583, 2584, 2576, 2577, 2578, 2579, 2581, 2582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2865, 2866, 43, 0, 0, 527, 0, 0, 1787, 0,
	0, 0, 1488, 0, 0, 0, 0, 0, 0, 76,
	210, 0, 2154, 2154, 0, 0, 0, 837, 0, 0,
	1483, 2632, 0, 0, 0, 0, 0, 527, 0, 0,
	0, 0, 0, 0, 210, 0, 527, 0, 0, 210,
	0, 0, 0, 2586, 2587, 2588, 0, 0, 0, 0,
	2585, 2583, 2584, 2576, 2577, 2578, 2579, 2581, 2582, 0,
	0, 0, 1018, 0, 0, 0, 0, 0, 0, 0,
	2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933,
	2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 0,
	2946, 0, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
	2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
	2154, 0, 2154, 0, 0, 0, 0, 0, 0, 77,
	0, 0, 543, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 3198, 1016, 1016, 0, 1479, 1475, 0,
	1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 0,
	47, 148, 80, 0, 81, 0, 45, 0, 0, 0,
	124, 3195, 2280, 0, 3188, 0, 46, 0, 0, 0,
	210, 0, 0, 182, 0, 0, 0, 0, 3186, 0,
	0, 210, 0, 0, 3190, 50, 0, 0, 0, 118,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 121,
	0, 0, 2158, 3196, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 184, 0, 0, 210, 2340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3189, 119, 0, 0, 1202,
	0, 0, 210, 0, 0, 2158, 0, 0, 210, 152,
	0, 0, 0, 0, 0, 0, 0, 183, 0, 0,
	0, 0, 1855, 0, 0, 0, 0, 176, 0, 2280,
	0, 527, 0, 2394, 0, 177, 0, 0, 0, 210,
	0, 0, 210, 0, 210, 0, 210, 0, 210, 210,
	0, 1186, 0, 0, 0, 0, 151, 0, 0, 3,
	0, 2414, 694, 0, 2280, 2280, 1016, 0, 0, 0,
	0, 1018, 1018, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 1186,
	210, 0, 0, 1202, 0, 1202, 0, 0, 1186, 0,
	1186, 0, 1186, 0, 0, 0, 0, 0, 3191, 0,
	0, 2158, 3192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 210, 210, 210, 1186, 210, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3194, 0, 0, 0, 0, 0, 210, 0,
	1979, 0, 1983, 0, 3197, 0, 0, 0, 1990, 0,
	0, 0, 0, 0, 0, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
	2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
	0, 2039, 0, 2041, 2042, 2043, 2044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1016, 0, 0, 0,
	0, 0, 0, 2068, 1016, 0, 0, 0, 0, 0,
	0, 0, 0, 1018, 0, 0, 0, 1016, 1532, 0,
	0, 0, 2093, 0, 0, 0, 0, 1202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2126, 2127, 2128, 2129, 2130, 2131, 2132,
	0, 0, 0, 0, 2150, 0, 2161, 2163, 2168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 527, 0, 68, 0,
	0, 0, 0, 0, 527, 0, 0, 0, 0, 0,
	0, 527, 0, 0, 527, 527, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 1202, 1018, 0, 0, 0, 3301, 85, 0,
	0, 1018, 0, 75, 82, 0, 0, 1202, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 0, 2154,
	0, 0, 0, 0, 0, 2280, 2280, 210, 0, 0,
	0, 2280, 0, 0, 2701, 0, 0, 0, 0, 0,
	3327, 2280, 2701, 2280, 2701, 2701, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 210, 210,
	0, 0, 2154, 0, 0, 0, 0, 0, 0, 1459,
	1460, 0, 1492, 1493, 1494, 1502, 1503, 1504, 210, 0,
	0, 1186, 0, 0, 0, 0, 0, 0, 1495, 1490,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 1508, 2755, 0, 0, 2757, 2280, 0, 0, 210,
	0, 0, 0, 210, 0, 0, 2342, 0, 2344, 0,
	0, 0, 0, 0, 1461, 0, 0, 0, 210, 0,
	0, 0, 0, 1481, 1186, 0, 210, 0, 2239, 2280,
	1478, 527, 0, 0, 0, 0, 3410, 0, 2280, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 2574, 2575, 2154, 2592,
	2593, 2594, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 1855, 0, 0, 1855, 2874, 0, 0, 0, 148,
	80, 0, 81, 0, 0, 0, 0, 1484, 1485, 1486,
	1487, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 2845, 0,
	0, 1186, 210, 689, 210, 0, 0, 118, 0, 0,
	2589, 1499, 0, 0, 1509, 1459, 1460, 0, 1489, 1491,
	0, 0, 0, 0, 0, 210, 2458, 0, 0, 0,
	0, 184, 0, 0, 0, 1490, 0, 0, 1505, 0,
	1506, 0, 1462, 0, 0, 0, 0, 1476, 1477, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 152, 0, 0,
	1461, 0, 1482, 0, 0, 183, 0, 0, 0, 1481,
	0, 2905, 0, 0, 2580, 176, 1478, 0, 0, 0,
	1507, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 151, 0, 2493, 2494, 903, 0,
	0, 0, 2500, 0, 0, 2868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2595, 0, 0, 0, 0,
	0, 2514, 2515, 1484, 1485, 1486, 1487, 2093, 0, 0,
	1488, 0, 0, 1467, 0, 0, 2522, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 210, 0, 1483, 2590,
	0, 0, 0, 0, 0, 0, 527, 598, 0, 0,
	0, 0, 2542, 0, 1489, 1491, 0, 0, 0, 0,
	0, 527, 0, 0, 1500, 0, 0, 2557, 0, 598,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1476, 1477, 0, 0, 1202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 2168, 2168, 2168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1595, 0, 574, 0, 2591, 0, 0, 0, 2628,
	0, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 1473, 1474, 1480, 1501, 1479, 1475, 0, 1472, 1470,
	1471, 1463, 1464, 1465, 1466, 1468, 1469, 0, 0, 0,
	3051, 210, 0, 1019, 0, 3146, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 837, 2280, 210, 0, 0,
	0, 0, 0, 0, 937, 0, 0, 0, 837, 0,
	2414, 2414, 0, 0, 0, 0, 694, 694, 2280, 0,
	0, 1855, 1855, 0, 0, 694, 2280, 0, 0, 0,
	0, 0, 0, 2716, 210, 0, 0, 0, 2586, 2587,
	2588, 0, 0, 211, 0, 2585, 2583, 2584, 2576, 2577,
	2578, 2579, 2581, 2582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	3140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1479, 1475, 58, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 68, 0,
	0, 0, 0, 1202, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 2280, 2280, 2280, 0, 85, 0,
	0, 0, 0, 75, 82, 0, 1202, 0, 0, 0,
	0, 0, 2280, 0, 2701, 0, 0, 1202, 1202, 210,
	0, 0, 0, 2854, 0, 0, 0, 1990, 0, 0,
	210, 210, 0, 2860, 2861, 0, 0, 2864, 0, 0,
	0, 2867, 0, 2280, 0, 0, 0, 76, 0, 0,
	2871, 0, 0, 0, 0, 0, 0, 0, 3251, 2878,
	2574, 2575, 2628, 2592, 2593, 2594, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2873,
	0, 0, 0, 2898, 0, 0, 0, 0, 0, 0,
	0, 0, 1202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2914, 2915, 0, 2916, 2917, 2918, 0, 0,
	2919, 0, 0, 0, 2921, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2589, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2949, 2950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 209,
	2959, 209, 209, 0, 0, 0, 209, 0, 0, 0,
	0, 215, 0, 0, 598, 2968, 0, 0, 0, 0,
	2280, 0, 2701, 0, 0, 3321, 0, 0, 0, 148,
	80, 0, 81, 210, 0, 0, 0, 0, 2580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 1460,
	0, 182, 0, 0, 0, 574, 0, 0, 209, 209,
	0, 0, 0, 689, 0, 0, 0, 118, 1490, 2997,
	591, 0, 0, 209, 0, 1462, 3321, 0, 0, 0,
	2280, 0, 0, 0, 3005, 3008, 0, 0, 210, 2595,
	0, 184, 591, 0, 0, 209, 209, 209, 209, 1202,
	0, 0, 0, 1461, 0, 0, 0, 0, 3026, 0,
	209, 209, 1481, 0, 119, 0, 0, 0, 0, 1478,
	210, 210, 0, 2590, 0, 0, 0, 152, 0, 0,
	0, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	0, 0, 2905, 0, 0, 176, 0, 0, 527, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 3321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 1595, 1484, 1485, 1486, 1487,
	0, 0, 209, 0, 3080, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 1489, 1491, 2591,
	2701, 0, 0, 0, 0, 211, 1085, 211, 211, 1085,
	0, 1085, 211, 0, 1202, 0, 1202, 0, 0, 0,
	211, 0, 0, 0, 3119, 3120, 1476, 1477, 0, 0,
	3124, 3125, 0, 0, 0, 3128, 3129, 0, 0, 0,
	3483, 0, 3133, 0, 0, 0, 1202, 210, 0, 0,
	0, 1482, 0, 0, 0, 0, 0, 210, 2280, 0,
	0, 3137, 1085, 1085, 211, 211, 0, 0, 3141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2905, 0, 0, 0, 0, 0, 0,
	0, 211, 211, 211, 211, 0, 1085, 1085, 0, 0,
	0, 1085, 2586, 2587, 2588, 1085, 211, 211, 0, 2585,
	2583, 2584, 2576, 2577, 2578, 2579, 2581, 2582, 0, 1488,
	0, 0, 2280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 3321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 3008, 0, 0, 0, 0, 1202, 0, 2280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 1625, 0, 1019,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 1625, 209, 0, 0,
	0, 0, 598, 0, 0, 0, 0, 598, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3008, 0, 0, 0, 0,
	0, 0, 1459, 1460, 1479, 1475, 0, 1472, 1470, 1471,
	1463, 1464, 1465, 1466, 1468, 1469, 0, 0, 0, 0,
	0, 0, 1490, 3289, 3290, 3291, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 1459, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3299, 3300,
	0, 0, 0, 0, 0, 0, 1490, 1461, 0, 0,
	0, 0, 3307, 1462, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 3008, 0, 0, 0, 1478, 0, 0,
	0, 3344, 2863, 1081, 0, 0, 1182, 0, 1081, 3350,
	0, 0, 837, 0, 0, 0, 0, 0, 0, 3357,
	1484, 1485, 1486, 1487, 0, 0, 598, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 2862, 0, 0, 0,
	0, 0, 3008, 0, 0, 3008, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 1485, 1486, 1487, 0, 1182,
	1182, 1489, 1491, 0, 1467, 3008, 3008, 0, 211, 0,
	0, 209, 0, 0, 0, 209, 209, 0, 0, 1085,
	0, 211, 211, 211, 0, 0, 0, 0, 211, 0,
	1476, 1477, 0, 211, 0, 1489, 1491, 209, 0, 209,
	0, 209, 0, 1182, 1182, 1085, 0, 0, 1182, 0,
	0, 0, 1182, 0, 0, 1482, 0, 0, 3422, 0,
	0, 3425, 0, 0, 1476, 1477, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 675, 0, 0, 0, 0, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1182, 0, 0, 0, 657, 0, 0,
	0, 209, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 1488, 0, 0, 0, 0, 0, 0,
	658, 598, 209, 0, 209, 0, 209, 0, 209, 659,
	209, 1483, 1459, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 660, 0, 1488, 0, 837,
	0, 0, 1490, 0, 0, 0, 0, 0, 209, 1462,
	0, 680, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 1085, 211, 0, 0, 0, 661, 0, 1085, 0,
	0, 0, 0, 0, 3531, 3531, 3531, 1461, 209, 0,
	0, 0, 0, 0, 0, 662, 1481, 0, 0, 0,
	0, 0, 0, 3550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 0, 211, 664, 0,
	0, 211, 211, 0, 3008, 0, 3008, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3531, 0, 0, 211, 679, 211, 0, 211, 1479, 1475,
	0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469,
	1484, 1485, 1486, 1487, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 1475, 0, 1472, 1470, 1471, 1463, 1464,
	1465, 1466, 1468, 1469, 0, 0, 0, 0, 0, 0,
	0, 1489, 1491, 1085, 0, 1085, 0, 1085, 0, 0,
	0, 907, 0, 1085, 0, 0, 1085, 211, 0, 0,
	211, 0, 0, 3531, 0, 0, 0, 0, 0, 1085,
	1085, 1085, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 666, 0, 0, 0, 0, 0, 211, 211, 0,
	211, 0, 211, 1019, 211, 1482, 211, 0, 683, 667,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 1019, 0, 0,
	591, 0, 209, 0, 211, 0, 682, 0, 0, 0,
	0, 0, 1182, 668, 0, 0, 669, 0, 0, 0,
	0, 0, 677, 0, 0, 0, 0, 0, 0, 670,
	0, 0, 0, 1081, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 1085, 0, 0, 0,
	671, 678, 0, 0, 0, 0, 0, 0, 672, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 674, 0, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 681, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 676,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 1182, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 598,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 57,
	0, 209, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 872, 87, 0, 211, 0,
	0, 1085, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 209, 0, 0, 209, 0, 209, 0, 209,
	0, 209, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1182, 209, 1182, 209, 1182, 0, 0, 0, 74, 0,
	1182, 87, 0, 1182, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 75, 82, 0, 1182, 1182, 1182, 1085,
	0, 0, 0, 0, 0, 0, 209, 209, 209, 209,
	0, 209, 0, 209, 591, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 211,
	0, 209, 0, 0, 0, 0, 0, 0, 811, 0,
	211, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 211, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	1085, 0, 0, 1085, 0, 211, 0, 0, 0, 0,
	1007, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1012, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 211, 0,
	0, 211, 0, 211, 0, 211, 0, 211, 211, 0,
	0, 1085, 1085, 1085, 0, 1085, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 148,
	80, 0, 81, 0, 211, 0, 0, 0, 1081, 0,
	0, 0, 0, 1082, 0, 0, 1183, 211, 1082, 211,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 689, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1019,
	0, 0, 211, 211, 211, 211, 0, 211, 0, 211,
	0, 184, 0, 0, 1019, 0, 0, 0, 0, 1183,
	1183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 119, 0, 0, 211, 0, 0,
	0, 0, 0, 1625, 0, 0, 0, 152, 1081, 0,
	0, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	0, 0, 0, 1183, 1183, 176, 0, 0, 1183, 0,
	0, 0, 1183, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 209, 209, 1183, 0, 0, 1459, 1460, 0, 1625,
	0, 0, 1502, 1503, 1504, 0, 1182, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 1508, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 209, 0, 0, 0,
	0, 1461, 1459, 1460, 0, 0, 0, 0, 0, 0,
	1481, 209, 0, 0, 0, 0, 0, 1478, 0, 1019,
	0, 0, 1490, 1182, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	1182, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 0, 0,
	0, 0, 0, 209, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 1478, 1484, 1485, 1486, 1487, 0, 0,
	0, 0, 0, 0, 1467, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 87, 209, 87, 209, 1499, 0,
	0, 1509, 2499, 0, 0, 1489, 1491, 0, 1182, 1182,
	1182, 0, 1182, 0, 0, 0, 0, 0, 209, 0,
	1484, 1485, 1486, 1487, 0, 0, 211, 0, 0, 0,
	1467, 0, 0, 0, 1476, 1477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 0, 211, 211, 211, 1482,
	0, 1489, 1491, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 832, 87, 87, 0, 0, 211, 1085, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 1085, 87,
	1476, 1477, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 1085, 211, 0, 0, 1482, 1082, 0, 0, 0,
	1085, 1085, 1085, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 87, 1183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 1019, 1019,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 1085, 1085, 0, 0, 0, 0, 0, 0, 211,
	0, 1500, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 1488, 1075, 0, 0, 0, 0, 0,
	0, 1193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 1085,
	811, 211, 1085, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1531, 0, 0, 0,
	1537, 0, 0, 0, 0, 1498, 0, 0, 1277, 0,
	0, 1501, 1479, 1475, 0, 1472, 1470, 1471, 1463, 1464,
	1465, 1466, 1468, 1469, 0, 0, 0, 1085, 1183, 0,
	1301, 1301, 1301, 1193, 209, 1082, 0, 0, 1085, 0,
	0, 209, 0, 1081, 0, 1334, 1335, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 1475,
	1019, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469,
	0, 0, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1408, 0, 0,
	0, 0, 0, 0, 0, 1459, 1460, 0, 0, 0,
	0, 87, 0, 0, 1623, 0, 1626, 0, 0, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 1085, 0, 0, 0,
	1183, 0, 1183, 0, 1183, 0, 0, 0, 0, 0,
	1183, 0, 0, 1183, 0, 0, 0, 0, 0, 0,
	1461, 0, 0, 0, 0, 1182, 1183, 1183, 1183, 1481,
	0, 0, 0, 0, 0, 1081, 1478, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1182, 0,
	0, 0, 0, 0, 0, 0, 0, 1182, 1182, 1182,
	1019, 0, 0, 0, 0, 2492, 0, 0, 1019, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1625, 0, 1484, 1485, 1486, 1487, 0, 0, 0,
	211, 0, 0, 1467, 0, 0, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 211, 1182, 1182,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 1082, 1489, 1491, 0, 1182, 0, 0,
	0, 0, 0, 209, 209, 0, 0, 0, 0, 0,
	0, 1085, 1085, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1476, 1477, 0, 1081, 1085, 0, 1081,
	0, 0, 0, 211, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1632, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	1641, 0, 1193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 1082, 0, 832, 0, 832, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 1082, 0,
	0, 0, 1085, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 209, 0, 1081, 0, 0, 0, 0, 1085, 211,
	211, 1085, 0, 0, 1085, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 209, 0, 1183, 0, 0, 0,
	1085, 1479, 1475, 1085, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 0, 0, 0, 0, 811, 0, 0,
	811, 811, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1830, 0, 0, 0,
	1837, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1277, 1183, 1861, 0, 1861, 0, 0, 0,
	0, 0, 0, 1085, 0, 2057, 0, 1082, 0, 0,
	1183, 0, 0, 1081, 0, 0, 209, 0, 1182, 832,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1531, 0, 0, 0, 1531, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 1182, 1182,
	1182, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 1182, 0, 1837, 0, 0, 1907,
	209, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 1921, 1183, 1183,
	1183, 1081, 1183, 0, 0, 0, 0, 1931, 0, 1933,
	1007, 1935, 0, 1937, 0, 1938, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 1085, 0, 1626, 0, 0, 0, 0, 0,
	0, 0, 0, 1955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 211,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 1085, 0, 0, 0, 0, 1085,
	0, 0, 0, 87, 0, 1081, 0, 0, 1182, 0,
	0, 1081, 0, 1182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 211, 1081, 1085, 0,
	1182, 0, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 87, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1495, 1490, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 1508, 0, 87, 2223, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 1461, 0, 0,
	0, 0, 0, 1082, 0, 87, 1481, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 1485, 1486, 1487, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 1509, 0, 1182,
	0, 1489, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 1506, 0, 0, 0, 0, 0, 0,
	1476, 1477, 0, 0, 0, 1183, 0, 0, 1193, 0,
	0, 0, 0, 0, 2057, 1082, 1497, 0, 0, 0,
	0, 0, 0, 1082, 0, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1531, 0, 0, 1183, 0,
	1837, 0, 0, 1507, 0, 0, 2364, 1183, 1183, 1183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2396, 0, 0,
	1301, 0, 1301, 0, 1301, 0, 1193, 1193, 0, 0,
	1182, 0, 0, 0, 0, 0, 0, 0, 1183, 1183,
	1182, 1182, 0, 1488, 0, 0, 1182, 0, 0, 0,
	0, 0, 0, 2440, 0, 0, 0, 1183, 0, 0,
	0, 1483, 0, 0, 0, 0, 2445, 0, 2448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 1082, 1500, 0, 1082,
	0, 0, 0, 0, 0, 0, 1007, 0, 0, 0,
	0, 2469, 1193, 2471, 1193, 0, 2474, 0, 0, 0,
	0, 1007, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2490, 0, 0, 0,
	0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504,
	0, 0, 0, 0, 1082, 0, 0, 0, 0, 0,
	1495, 1490, 0, 0, 0, 1082, 0, 0, 1462, 0,
	0, 1498, 0, 1508, 1473, 1474, 1480, 1501, 1479, 1475,
	0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469,
	0, 0, 0, 0, 3148, 0, 1461, 0, 3147, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	87, 87, 1478, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 87, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	1485, 1486, 1487, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1007, 0, 0, 832,
	0, 0, 0, 1499, 0, 0, 1509, 0, 0, 0,
	1489, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 87, 0, 0, 0, 0,
	1505, 0, 1506, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 1082, 0, 0, 0, 0, 1183, 0,
	0, 0, 614, 0, 0, 2693, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 615, 0, 0, 1183, 1183,
	1183, 0, 1488, 0, 0, 2729, 2731, 2364, 0, 0,
	0, 0, 0, 0, 1183, 0, 0, 0, 0, 0,
	1483, 1082, 0, 0, 0, 0, 0, 0, 616, 635,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 1500, 0, 0, 0,
	617, 0, 0, 618, 0, 0, 0, 2767, 0, 0,
	0, 2771, 0, 0, 0, 0, 0, 0, 0, 642,
	0, 0, 0, 0, 0, 619, 2780, 0, 0, 0,
	0, 0, 0, 0, 640, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 1007, 1007, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 621, 0, 0, 622, 644, 2823, 0,
	1498, 649, 0, 1473, 1474, 1480, 1501, 1479, 1475, 0,
	1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 0,
	0, 0, 0, 2562, 0, 0, 0, 2563, 0, 1082,
	0, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	2848, 0, 1193, 0, 0, 0, 0, 1459, 1460, 0,
	1492, 1493, 1494, 1502, 1503, 1504, 0, 0, 0, 0,
	0, 0, 0, 2858, 0, 0, 1495, 1490, 643, 0,
	0, 0, 0, 0, 1462, 0, 625, 0, 0, 1508,
	0, 0, 0, 0, 0, 1082, 0, 0, 1183, 0,
	0, 1082, 0, 1183, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 0, 0, 0, 0, 623,
	0, 1481, 0, 0, 0, 0, 0, 1082, 1478, 626,
	1183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 648, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 1484, 1485, 1486, 1487, 0,
	0, 87, 0, 0, 0, 1467, 0, 629, 0, 0,
	1082, 0, 0, 0, 0, 1459, 1460, 0, 1492, 1493,
	1494, 1502, 1503, 1504, 0, 0, 634, 0, 0, 1499,
	0, 0, 1509, 0, 1495, 1490, 1489, 1491, 630, 0,
	0, 647, 1462, 646, 0, 0, 631, 1508, 1082, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 1506, 632,
	1082, 0, 0, 0, 639, 1476, 1477, 0, 0, 650,
	1461, 645, 0, 0, 0, 0, 637, 0, 0, 1481,
	0, 1497, 0, 0, 0, 0, 1478, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 1007, 0, 1183,
	0, 0, 0, 0, 0, 1007, 0, 0, 0, 0,
	0, 0, 0, 1484, 1485, 1486, 1487, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 0, 3052,
	0, 0, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 0, 0, 0, 0, 3064, 1499, 0, 0,
	1509, 0, 0, 0, 1489, 1491, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1506, 0, 0, 0,
	0, 0, 1500, 1476, 1477, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 1497,
	0, 0, 3103, 0, 0, 0, 0, 0, 1482, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	1183, 0, 0, 0, 0, 0, 1507, 0, 0, 0,
	1183, 1183, 0, 0, 0, 0, 1183, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 1473,
	1474, 1480, 1501, 1479, 1475, 1082, 1472, 1470, 1471, 1463,
	1464, 1465, 1466, 1468, 1469, 0, 1488, 0, 0, 2089,
	0, 0, 0, 2090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 1460, 0, 1492, 1493, 1494,
	1502, 1503, 1504, 0, 0, 0, 0, 0, 0, 0,
	1500, 0, 0, 1495, 1490, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 1508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 1478, 0, 3216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2364, 0,
	0, 0, 0, 2057, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 1473, 1474, 1480,
	1501, 1479, 1475, 0, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 0, 0, 0, 0, 0, 0, 0,
	0, 2876, 1484, 1485, 1486, 1487, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 1509,
	0, 0, 0, 1489, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 1506, 0, 0, 0, 0,
	0, 0, 1476, 1477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1497, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 0, 0, 0, 0,
	0, 3328, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 3375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3401, 1193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3452, 0, 1498, 0, 0, 1473, 1474, 1480, 1501,
	1479, 1475, 0, 1472, 1470, 1471, 1463, 1464, 1465, 1466,
	1468, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	2565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 3489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3504, 219, 220, 221, 222,
	223, 1086, 224, 1087, 1088, 1089, 0, 1090, 478, 1091,
	1092, 1093, 1094, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 1095, 233, 234, 235, 236,
	237, 238, 1096, 1097, 239, 483, 484, 485, 1098, 240,
	486, 1099, 1084, 1100, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1101, 251, 0, 252, 253,
	254, 1102, 958, 255, 256, 1103, 1104, 1106, 1105, 1107,
	1108, 1109, 257, 258, 259, 260, 261, 262, 487, 488,
	1110, 263, 1111, 265, 264, 1112, 266, 1113, 1114, 267,
	268, 269, 1115, 270, 1116, 271, 272, 1117, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 1118, 216, 1119, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 1120, 290, 1121, 1122,
	959, 291, 292, 1123, 293, 493, 1124, 494, 294, 1125,
	295, 296, 297, 298, 495, 496, 497, 350, 961, 299,
	300, 1126, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1127, 960, 306, 498, 308, 307, 309, 310, 311,
	499, 1128, 500, 1129, 313, 962, 501, 963, 314, 315,
	316, 964, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1130, 325, 324, 1131, 326, 502, 965, 327, 328,
	966, 1132, 329, 330, 1133, 1134, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	967, 344, 345, 347, 346, 1135, 218, 968, 348, 1136,
	503, 349, 504, 351, 352, 1137, 353, 354, 355, 1138,
	1139, 357, 358, 359, 1140, 1141, 360, 361, 505, 969,
	362, 970, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 1142, 371, 372, 507, 373, 508, 374, 1143,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 1144, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 1145, 397, 971, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 1146, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 1147, 424, 404, 405, 425,
	426, 972, 427, 428, 511, 429, 430, 1148, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	1149, 442, 443, 441, 1150, 444, 445, 446, 447, 448,
	278, 449, 1151, 450, 513, 514, 515, 516, 1152, 457,
	1153, 451, 452, 517, 453, 518, 1154, 454, 455, 456,
	0, 458, 459, 1155, 1156, 460, 461, 462, 463, 464,
	466, 1157, 467, 1158, 465, 468, 469, 470, 519, 520,
	521, 1159, 472, 471, 522, 1160, 1161, 1162, 1163, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 0, 2210, 0, 0, 0, 0,
	0, 0, 0, 2211, 219, 220, 221, 222, 223, 1086,
	224, 1087, 1088, 1089, 0, 1090, 478, 1091, 1092, 1093,
	1094, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 1095, 233, 234, 235, 236, 237, 238,
	1096, 1097, 239, 483, 484, 485, 1098, 240, 486, 1099,
	1084, 1100, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1101, 251, 0, 252, 253, 254, 1102,
	958, 255, 256, 1103, 1104, 1106, 1105, 1107, 1108, 1109,
	257, 258, 259, 260, 261, 262, 487, 488, 1110, 263,
	1111, 265, 264, 1112, 266, 1113, 1114, 267, 268, 269,
	1115, 270, 1116, 271, 272, 1117, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 1118,
	216, 1119, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 1120, 290, 1121, 1122, 959, 291,
	292, 1123, 293, 493, 1124, 494, 294, 1125, 295, 296,
	297, 298, 495, 496, 497, 350, 961, 299, 300, 1126,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1127,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 1128,
	500, 1129, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1130,
	325, 324, 1131, 326, 502, 965, 327, 328, 966, 1132,
	329, 330, 1133, 1134, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 346, 1135, 218, 968, 348, 1136, 503, 349,
	504, 351, 352, 1137, 353, 354, 355, 1138, 1139, 357,
	358, 359, 1140, 1141, 360, 361, 505, 969, 362, 970,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	1142, 371, 372, 507, 373, 508, 374, 1143, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 1144,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 1145, 397, 971, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 1146, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 1147, 424, 404, 405, 425, 426, 972,
	427, 428, 511, 429, 430, 1148, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 1149, 442,
	443, 441, 1150, 444, 445, 446, 447, 448, 278, 449,
	1151, 450, 513, 514, 515, 516, 1152, 457, 1153, 451,
	452, 517, 453, 518, 1154, 454, 455, 456, 0, 458,
	459, 1155, 1156, 460, 461, 462, 463, 464, 466, 1157,
	467, 1158, 465, 468, 469, 470, 519, 520, 521, 1159,
	472, 471, 522, 1160, 1161, 1162, 1163, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3172, 219, 220, 221, 222, 223, 1086,
	224, 1087, 1088, 1089, 0, 1090, 478, 1091, 1092, 1093,
	1094, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 1095, 233, 234, 235, 236, 237, 238,
	1096, 1097, 239, 483, 484, 485, 1098, 240, 486, 1099,
	1084, 1100, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1101, 251, 0, 252, 253, 254, 1102,
	958, 255, 256, 1103, 1104, 1106, 1105, 1107, 1108, 1109,
	257, 258, 259, 260, 261, 262, 487, 488, 1110, 263,
	1111, 265, 264, 1112, 266, 1113, 1114, 267, 268, 269,
	1115, 270, 1116, 271, 272, 1117, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 1118,
	216, 1119, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 1120, 290, 1121, 1122, 959, 291,
	292, 1123, 293, 493, 1124, 494, 294, 1125, 295, 296,
	297, 298, 495, 496, 497, 350, 961, 299, 300, 1126,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1127,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 1128,
	500, 1129, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1130,
	325, 324, 1131, 326, 502, 965, 327, 328, 966, 1132,
	329, 330, 1133, 1134, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 346, 1135, 218, 968, 348, 1136, 503, 349,
	504, 351, 352, 1137, 353, 354, 355, 1138, 1139, 357,
	358, 359, 1140, 1141, 360, 361, 505, 969, 362, 970,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	1142, 371, 372, 507, 373, 508, 374, 1143, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 1144,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 1145, 397, 971, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 1146, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 1147, 424, 404, 405, 425, 426, 972,
	427, 428, 511, 429, 430, 1148, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 1149, 442,
	443, 441, 1150, 444, 445, 446, 447, 448, 278, 449,
	1151, 450, 513, 514, 515, 516, 1152, 457, 1153, 451,
	452, 517, 453, 518, 1154, 454, 455, 456, 0, 458,
	459, 1155, 1156, 460, 461, 462, 463, 464, 466, 1157,
	467, 1158, 465, 468, 469, 470, 519, 520, 521, 1159,
	472, 471, 522, 1160, 1161, 1162, 1163, 473, 474, 523,
	475, 476, 477, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3295, 0,
	219, 220, 221, 222, 223, 1086, 224, 1087, 1088, 1089,
	0, 1090, 478, 1091, 1092, 1093, 1094, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 1095,
	233, 234, 235, 236, 237, 238, 1096, 1097, 239, 483,
	484, 485, 1098, 240, 486, 1099, 1084, 1100, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1101,
	251, 0, 252, 253, 254, 1102, 958, 255, 256, 1103,
	1104, 1106, 1105, 1107, 1108, 1109, 257, 258, 259, 260,
	261, 262, 487, 488, 1110, 263, 1111, 265, 264, 1112,
	266, 1113, 1114, 267, 268, 269, 1115, 270, 1116, 271,
	272, 1117, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 1118, 216, 1119, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	1120, 290, 1121, 1122, 959, 291, 292, 1123, 293, 493,
	1124, 494, 294, 1125, 295, 296, 297, 298, 495, 496,
	497, 350, 961, 299, 300, 1126, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1127, 960, 306, 498, 308,
	307, 309, 310, 311, 499, 1128, 500, 1129, 313, 962,
	501, 963, 314, 315, 316, 964, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1130, 325, 324, 1131, 326,
	502, 965, 327, 328, 966, 1132, 329, 330, 1133, 1134,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 967, 344, 345, 347, 346, 1135,
	218, 968, 348, 1136, 503, 349, 504, 351, 352, 1137,
	353, 354, 355, 1138, 1139, 357, 358, 359, 1140, 1141,
	360, 361, 505, 969, 362, 970, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 1142, 371, 372, 507,
	373, 508, 374, 1143, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 1144, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	1145, 397, 971, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 1146, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 1147,
	424, 404, 405, 425, 426, 972, 427, 428, 511, 429,
	430, 1148, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 1149, 442, 443, 441, 1150, 444,
	445, 446, 447, 448, 278, 449, 1151, 450, 513, 514,
	515, 516, 1152, 457, 1153, 451, 452, 517, 453, 518,
	1154, 454, 455, 456, 0, 458, 459, 1155, 1156, 460,
	461, 462, 463, 464, 466, 1157, 467, 1158, 465, 468,
	469, 470, 519, 520, 521, 1159, 472, 471, 522, 1160,
	1161, 1162, 1163, 473, 474, 523, 475, 476, 477, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3223, 0, 219, 220, 221, 222,
	223, 1086, 224, 1087, 1088, 1089, 0, 1090, 478, 1091,
	1092, 1093, 1094, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 1095, 233, 234, 235, 236,
	237, 238, 1096, 1097, 239, 483, 484, 485, 1098, 240,
	486, 1099, 1084, 1100, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1101, 251, 0, 252, 253,
	254, 1102, 958, 255, 256, 1103, 1104, 1106, 1105, 1107,
	1108, 1109, 257, 258, 259, 260, 261, 262, 487, 488,
	1110, 263, 1111, 265, 264, 1112, 266, 1113, 1114, 267,
	268, 269, 1115, 270, 1116, 271, 272, 1117, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 1118, 216, 1119, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 1120, 290, 1121, 1122,
	959, 291, 292, 1123, 293, 493, 1124, 494, 294, 1125,
	295, 296, 297, 298, 495, 496, 497, 350, 961, 299,
	300, 1126, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1127, 960, 306, 498, 308, 307, 309, 310, 311,
	499, 1128, 500, 1129, 313, 962, 501, 963, 314, 315,
	316, 964, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1130, 325, 324, 1131, 326, 502, 965, 327, 328,
	966, 1132, 329, 330, 1133, 1134, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	967, 344, 345, 347, 346, 1135, 218, 968, 348, 1136,
	503, 349, 504, 351, 352, 1137, 353, 354, 355, 1138,
	1139, 357, 358, 359, 1140, 1141, 360, 361, 505, 969,
	362, 970, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 1142, 371, 372, 507, 373, 508, 374, 1143,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 1144, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 1145, 397, 971, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 1146, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 1147, 424, 404, 405, 425,
	426, 972, 427, 428, 511, 429, 430, 1148, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	1149, 442, 443, 441, 1150, 444, 445, 446, 447, 448,
	278, 449, 1151, 450, 513, 514, 515, 516, 1152, 457,
	1153, 451, 452, 517, 453, 518, 1154, 454, 455, 456,
	0, 458, 459, 1155, 1156, 460, 461, 462, 463, 464,
	466, 1157, 467, 1158, 465, 468, 469, 470, 519, 520,
	521, 1159, 472, 471, 522, 1160, 1161, 1162, 1163, 473,
	474, 523, 475, 476, 477, 1079, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3104, 0, 219, 220, 221, 222, 223, 1086, 224, 1087,
	1088, 1089, 0, 1090, 478, 1091, 1092, 1093, 1094, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 1095, 233, 234, 235, 236, 237, 238, 1096, 1097,
	239, 483, 484, 485, 1098, 240, 486, 1099, 1084, 1100,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1101, 251, 0, 252, 253, 254, 1102, 958, 255,
	256, 1103, 1104, 1106, 1105, 1107, 1108, 1109, 257, 258,
	259, 260, 261, 262, 487, 488, 1110, 263, 1111, 265,
	264, 1112, 266, 1113, 1114, 267, 268, 269, 1115, 270,
	1116, 271, 272, 1117, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 1118, 216, 1119,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 1120, 290, 1121, 1122, 959, 291, 292, 1123,
	293, 493, 1124, 494, 294, 1125, 295, 296, 297, 298,
	495, 496, 497, 350, 961, 299, 300, 1126, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1127, 960, 306,
	498, 308, 307, 309, 310, 311, 499, 1128, 500, 1129,
	313, 962, 501, 963, 314, 315, 316, 964, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1130, 325, 324,
	1131, 326, 502, 965, 327, 328, 966, 1132, 329, 330,
	1133, 1134, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 967, 344, 345, 347,
	346, 1135, 218, 968, 348, 1136, 503, 349, 504, 351,
	352, 1137, 353, 354, 355, 1138, 1139, 357, 358, 359,
	1140, 1141, 360, 361, 505, 969, 362, 970, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 1142, 371,
	372, 507, 373, 508, 374, 1143, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 1144, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 1145, 397, 971, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	1146, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 1147, 424, 404, 405, 425, 426, 972, 427, 428,
	511, 429, 430, 1148, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 1149, 442, 443, 441,
	1150, 444, 445, 446, 447, 448, 278, 449, 1151, 450,
	513, 514, 515, 516, 1152, 457, 1153, 451, 452, 517,
	453, 518, 1154, 454, 455, 456, 0, 458, 459, 1155,
	1156, 460, 461, 462, 463, 464, 466, 1157, 467, 1158,
	465, 468, 469, 470, 519, 520, 521, 1159, 472, 471,
	522, 1160, 1161, 1162, 1163, 473, 474, 523, 475, 476,
	477, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2901, 0, 219, 220,
	221, 222, 223, 1086, 224, 1087, 1088, 1089, 0, 1090,
	478, 1091, 1092, 1093, 1094, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 1095, 233, 234,
	235, 236, 237, 238, 1096, 1097, 239, 483, 484, 485,
	1098, 240, 486, 1099, 1084, 1100, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1101, 251, 0,
	252, 253, 254, 1102, 958, 255, 256, 1103, 1104, 1106,
	1105, 1107, 1108, 1109, 257, 258, 259, 260, 261, 262,
	487, 488, 1110, 263, 1111, 265, 264, 1112, 266, 1113,
	1114, 267, 268, 269, 1115, 270, 1116, 271, 272, 1117,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 1118, 216, 1119, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 1120, 290,
	1121, 1122, 959, 291, 292, 1123, 293, 493, 1124, 494,
	294, 1125, 295, 296, 297, 298, 495, 496, 497, 350,
	961, 299, 300, 1126, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1127, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 1128, 500, 1129, 313, 962, 501, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1130, 325, 324, 1131, 326, 502, 965,
	327, 328, 966, 1132, 329, 330, 1133, 1134, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 346, 1135, 218, 968,
	348, 1136, 503, 349, 504, 351, 352, 1137, 353, 354,
	355, 1138, 1139, 357, 358, 359, 1140, 1141, 360, 361,
	505, 969, 362, 970, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 1142, 371, 372, 507, 373, 508,
	374, 1143, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 1144, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 1145, 397,
	971, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 1146, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 1147, 424, 404,
	405, 425, 426, 972, 427, 428, 511, 429, 430, 1148,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 1149, 442, 443, 441, 1150, 444, 445, 446,
	447, 448, 278, 449, 1151, 450, 513, 514, 515, 516,
	1152, 457, 1153, 451, 452, 517, 453, 518, 1154, 454,
	455, 456, 0, 458, 459, 1155, 1156, 460, 461, 462,
	463, 464, 466, 1157, 467, 1158, 465, 468, 469, 470,
	519, 520, 521, 1159, 472, 471, 522, 1160, 1161, 1162,
	1163, 473, 474, 523, 475, 476, 477, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2893, 0, 219, 220, 221, 222, 223, 1086,
	224, 1087, 1088, 1089, 0, 1090, 478, 1091, 1092, 1093,
	1094, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 1095, 233, 234, 235, 236, 237, 238,
	1096, 1097, 239, 483, 484, 485, 1098, 240, 486, 1099,
	1084, 1100, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1101, 251, 0, 252, 253, 254, 1102,
	958, 255, 256, 1103, 1104, 1106, 1105, 1107, 1108, 1109,
	257, 258, 259, 260, 261, 262, 487, 488, 1110, 263,
	1111, 265, 264, 1112, 266, 1113, 1114, 267, 268, 269,
	1115, 270, 1116, 271, 272, 1117, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 1118,
	216, 1119, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 1120, 290, 1121, 1122, 959, 291,
	292, 1123, 293, 493, 1124, 494, 294, 1125, 295, 296,
	297, 298, 495, 496, 497, 350, 961, 299, 300, 1126,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1127,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 1128,
	500, 1129, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1130,
	325, 324, 1131, 326, 502, 965, 327, 328, 966, 1132,
	329, 330, 1133, 1134, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 346, 1135, 218, 968, 348, 1136, 503, 349,
	504, 351, 352, 1137, 353, 354, 355, 1138, 1139, 357,
	358, 359, 1140, 1141, 360, 361, 505, 969, 362, 970,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	1142, 371, 372, 507, 373, 508, 374, 1143, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 1144,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 1145, 397, 971, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 1146, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 1147, 424, 404, 405, 425, 426, 972,
	427, 428, 511, 429, 430, 1148, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 1149, 442,
	443, 441, 1150, 444, 445, 446, 447, 448, 278, 449,
	1151, 450, 513, 514, 515, 516, 1152, 457, 1153, 451,
	452, 517, 453, 518, 1154, 454, 455, 456, 0, 458,
	459, 1155, 1156, 460, 461, 462, 463, 464, 466, 1157,
	467, 1158, 465, 468, 469, 470, 519, 520, 521, 1159,
	472, 471, 522, 1160, 1161, 1162, 1163, 473, 474, 523,
	475, 476, 477, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2754, 0,
	219, 220, 221, 222, 223, 1086, 224, 1087, 1088, 1089,
	0, 1090, 478, 1091, 1092, 1093, 1094, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 1095,
	233, 234, 235, 236, 237, 238, 1096, 1097, 239, 483,
	484, 485, 1098, 240, 486, 1099, 1084, 1100, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1101,
	251, 0, 252, 253, 254, 1102, 958, 255, 256, 1103,
	1104, 1106, 1105, 1107, 1108, 1109, 257, 258, 259, 260,
	261, 262, 487, 488, 1110, 263, 1111, 265, 264, 1112,
	266, 1113, 1114, 267, 268, 269, 1115, 270, 1116, 271,
	272, 1117, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 1118, 216, 1119, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	1120, 290, 1121, 1122, 959, 291, 292, 1123, 293, 493,
	1124, 494, 294, 1125, 295, 296, 297, 298, 495, 496,
	497, 350, 961, 299, 300, 1126, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1127, 960, 306, 498, 308,
	307, 309, 310, 311, 499, 1128, 500, 1129, 313, 962,
	501, 963, 314, 315, 316, 964, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1130, 325, 324, 1131, 326,
	502, 965, 327, 328, 966, 1132, 329, 330, 1133, 1134,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 967, 344, 345, 347, 346, 1135,
	218, 968, 348, 1136, 503, 349, 504, 351, 352, 1137,
	353, 354, 355, 1138, 1139, 357, 358, 359, 1140, 1141,
	360, 361, 505, 969, 362, 970, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 1142, 371, 372, 507,
	373, 508, 374, 1143, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 1144, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	1145, 397, 971, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 1146, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 1147,
	424, 404, 405, 425, 426, 972, 427, 428, 511, 429,
	430, 1148, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 1149, 442, 443, 441, 1150, 444,
	445, 446, 447, 448, 278, 449, 1151, 450, 513, 514,
	515, 516, 1152, 457, 1153, 451, 452, 517, 453, 518,
	1154, 454, 455, 456, 0, 458, 459, 1155, 1156, 460,
	461, 462, 463, 464, 466, 1157, 467, 1158, 465, 468,
	469, 470, 519, 520, 521, 1159, 472, 471, 522, 1160,
	1161, 1162, 1163, 473, 474, 523, 475, 476, 477, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2102, 0, 219, 220, 221, 222,
	223, 1086, 224, 1087, 1088, 1089, 0, 1090, 478, 1091,
	1092, 1093, 1094, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 1095, 233, 234, 235, 236,
	237, 238, 1096, 1097, 239, 483, 484, 485, 1098, 240,
	486, 1099, 1084, 1100, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1101, 251, 0, 252, 253,
	254, 1102, 958, 255, 256, 1103, 1104, 1106, 1105, 1107,
	1108, 1109, 257, 258, 259, 260, 261, 262, 487, 488,
	1110, 263, 1111, 265, 264, 1112, 266, 1113, 1114, 267,
	268, 269, 1115, 270, 1116, 271, 272, 1117, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 1118, 216, 1119, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 1120, 290, 1121, 1122,
	959, 291, 292, 1123, 293, 493, 1124, 494, 294, 1125,
	295, 296, 297, 298, 495, 496, 497, 350, 961, 299,
	300, 1126, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1127, 960, 306, 498, 308, 307, 309, 310, 311,
	499, 1128, 500, 1129, 313, 962, 501, 963, 314, 315,
	316, 964, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1130, 325, 324, 1131, 326, 502, 965, 327, 328,
	966, 1132, 329, 330, 1133, 1134, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	967, 344, 345, 347, 346, 1135, 218, 968, 348, 1136,
	503, 349, 504, 351, 352, 1137, 353, 354, 355, 1138,
	1139, 357, 358, 359, 1140, 1141, 360, 361, 505, 969,
	362, 970, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 1142, 371, 372, 507, 373, 508, 374, 1143,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 1144, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 1145, 397, 971, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 1146, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 1147, 424, 404, 405, 425,
	426, 972, 427, 428, 511, 429, 430, 1148, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	1149, 442, 443, 441, 1150, 444, 445, 446, 447, 448,
	278, 449, 1151, 450, 513, 514, 515, 516, 1152, 457,
	1153, 451, 452, 517, 453, 518, 1154, 454, 455, 456,
	0, 458, 459, 1155, 1156, 460, 461, 462, 463, 464,
	466, 1157, 467, 1158, 465, 468, 469, 470, 519, 520,
	521, 1159, 472, 471, 522, 1160, 1161, 1162, 1163, 473,
	474, 523, 475, 476, 477, 1187, 0, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1813, 0, 0, 0, 219, 220, 221, 222, 223, 1086,
	224, 1087, 1088, 1089, 0, 1090, 478, 1091, 1092, 1093,
	1094, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 1095, 233, 234, 235, 236, 237, 238,
	1096, 1097, 239, 483, 484, 485, 1098, 240, 486, 1099,
	1084, 1100, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1101, 251, 0, 252, 253, 254, 1102,
	958, 255, 256, 1103, 1104, 1106, 1105, 1107, 1108, 1109,
	257, 258, 259, 260, 261, 262, 487, 488, 1110, 263,
	1111, 265, 264, 1112, 266, 1113, 1114, 267, 268, 269,
	1115, 270, 1116, 271, 272, 1117, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 1118,
	216, 1119, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 1120, 290, 1121, 1122, 959, 291,
	292, 1123, 293, 493, 1124, 494, 294, 1125, 295, 296,
	297, 298, 495, 496, 497, 350, 961, 299, 300, 1126,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1127,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 1128,
	500, 1129, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1130,
	325, 324, 1131, 326, 502, 965, 327, 328, 966, 1132,
	329, 330, 1133, 1134, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 346, 1135, 218, 968, 348, 1136, 503, 349,
	504, 351, 352, 1137, 353, 354, 355, 1138, 1139, 357,
	358, 359, 1140, 1141, 360, 361, 505, 969, 362, 970,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	1142, 371, 372, 507, 373, 508, 374, 1143, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 1144,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 1145, 397, 971, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 1146, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 1147, 424, 404, 405, 425, 426, 972,
	427, 428, 511, 429, 430, 1148, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 1149, 442,
	443, 441, 1150, 444, 445, 446, 447, 448, 278, 449,
	1151, 450, 513, 514, 515, 516, 1152, 457, 1153, 451,
	452, 517, 453, 518, 1154, 454, 455, 456, 0, 458,
	459, 1155, 1156, 460, 461, 462, 463, 464, 466, 1157,
	467, 1158, 465, 468, 469, 470, 519, 520, 521, 1159,
	472, 471, 522, 1160, 1161, 1162, 1163, 473, 474, 523,
	475, 476, 477, 1076, 0, 1079, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 1086, 224, 1087,
	1088, 1089, 0, 1090, 478, 1091, 1092, 1093, 1094, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 1095, 233, 234, 235, 236, 237, 238, 1096, 1097,
	239, 483, 484, 485, 1098, 240, 486, 1099, 1084, 1100,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1101, 251, 0, 252, 253, 254, 1102, 958, 255,
	256, 1103, 1104, 1106, 1105, 1107, 1108, 1109, 257, 258,
	259, 260, 261, 262, 487, 488, 1110, 263, 1111, 265,
	264, 1112, 266, 1113, 1114, 267, 268, 269, 1115, 270,
	1116, 271, 272, 1117, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 1118, 216, 1119,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 1120, 290, 1121, 1122, 959, 291, 292, 1123,
	293, 493, 1124, 494, 294, 1125, 295, 296, 297, 298,
	495, 496, 497, 350, 961, 299, 300, 1126, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1127, 960, 306,
	498, 308, 307, 309, 310, 311, 499, 1128, 500, 1129,
	313, 962, 501, 963, 314, 315, 316, 964, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1130, 325, 324,
	1131, 326, 502, 965, 327, 328, 966, 1132, 329, 330,
	1133, 1134, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 967, 344, 345, 347,
	346, 1135, 218, 968, 348, 1136, 503, 349, 504, 351,
	352, 1137, 353, 354, 355, 1138, 1139, 357, 358, 359,
	1140, 1141, 360, 361, 505, 969, 362, 970, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 1142, 371,
	372, 507, 373, 508, 374, 1143, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 1144, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 1145, 397, 971, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	1146, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 1147, 424, 404, 405, 425, 426, 972, 427, 428,
	511, 429, 430, 1148, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 1149, 442, 443, 441,
	1150, 444, 445, 446, 447, 448, 278, 449, 1151, 450,
	513, 514, 515, 516, 1152, 457, 1153, 451, 452, 517,
	453, 518, 1154, 454, 455, 456, 0, 458, 459, 1155,
	1156, 460, 461, 462, 463, 464, 466, 1157, 467, 1158,
	465, 468, 469, 470, 519, 520, 521, 1159, 472, 471,
	522, 1160, 1161, 1162, 1163, 473, 474, 523, 475, 476,
	477, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 1086, 224, 1087, 1088, 1089, 0, 1090,
	478, 1091, 1092, 1093, 1094, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 1095, 233, 234,
	235, 236, 237, 238, 1096, 1097, 239, 483, 484, 485,
	1098, 240, 486, 1099, 1084, 1100, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1101, 251, 0,
	252, 253, 254, 1102, 958, 255, 256, 1103, 1104, 1106,
	1105, 1107, 1108, 1109, 257, 258, 259, 260, 261, 262,
	487, 488, 1110, 263, 1111, 265, 264, 1112, 266, 1113,
	1114, 267, 268, 269, 1115, 270, 1116, 271, 272, 1117,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 1118, 216, 1119, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 1120, 290,
	1121, 1122, 959, 291, 292, 1123, 293, 493, 1124, 494,
	294, 1125, 295, 296, 297, 298, 495, 496, 497, 350,
	961, 299, 300, 1126, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1127, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 1128, 500, 1129, 313, 962, 501, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1130, 325, 324, 1131, 326, 502, 965,
	327, 328, 966, 1132, 329, 330, 1133, 1134, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 346, 1135, 218, 968,
	348, 1136, 503, 349, 504, 351, 352, 1137, 353, 354,
	355, 1138, 1139, 357, 358, 359, 1140, 1141, 360, 361,
	505, 969, 362, 970, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 1142, 371, 372, 507, 373, 508,
	374, 1143, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 1144, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 1145, 397,
	971, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 1146, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 1147, 424, 404,
	405, 425, 426, 972, 427, 428, 511, 429, 430, 1148,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 1149, 442, 443, 441, 1150, 444, 445, 446,
	447, 448, 278, 449, 1151, 450, 513, 514, 515, 516,
	1152, 457, 1153, 451, 452, 517, 453, 518, 1154, 454,
	455, 456, 0, 458, 459, 1155, 1156, 460, 461, 462,
	463, 464, 466, 1157, 467, 1158, 465, 468, 469, 470,
	519, 520, 521, 1159, 472, 471, 522, 1160, 1161, 1162,
	1163, 473, 474, 523, 475, 476, 477, 2078, 0, 900,
	857, 858, 859, 855, 856, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 2075, 224, 0, 0, 0, 0, 0, 949, 874,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 915,
	894, 926, 884, 925, 924, 0, 233, 886, 885, 236,
	237, 238, 876, 948, 239, 984, 985, 485, 0, 240,
	955, 0, 938, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 958, 255, 256, 941, 939, 940, 945, 943,
	942, 944, 257, 258, 259, 260, 929, 262, 922, 921,
	846, 263, 0, 265, 264, 0, 266, 2076, 0, 267,
	920, 269, 0, 270, 0, 271, 272, 0, 273, 852,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 975,
	976, 865, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 919, 917, 918, 0, 289, 0, 290, 0, 0,
	959, 291, 292, 0, 293, 982, 0, 875, 294, 0,
	295, 296, 297, 298, 950, 951, 954, 350, 961, 299,
	300, 0, 301, 302, 896, 0, 0, 217, 303, 305,
	312, 0, 960, 306, 908, 899, 910, 912, 913, 914,
	909, 0, 901, 0, 313, 962, 952, 963, 314, 315,
	316, 964, 934, 935, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 983, 965, 327, 328,
	966, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 888, 341,
	967, 344, 345, 347, 346, 843, 218, 968, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 969,
	362, 970, 977, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 978, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 971, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 972, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 979,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	0, 451, 452, 980, 453, 981, 864, 454, 455, 456,
	0, 458, 459, 0, 847, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 519, 927,
	974, 2074, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 844, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	2077, 0, 0, 0, 0, 0, 0, 870, 2073, 0,
	833, 868, 900, 857, 858, 859, 855, 856, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 949, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 948, 239, 984, 985,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 256, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 929,
	262, 922, 921, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 982, 0,
	875, 294, 0, 295, 296, 297, 298, 950, 951, 954,
	350, 961, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 960, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 962, 952,
	963, 314, 315, 316, 964, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 983,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 967, 344, 345, 347, 346, 843, 218,
	968, 348, 866, 953, 349, 923, 351, 352, 0, 897,
	354, 898, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 969, 362, 970, 977, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 978, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 916, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 971, 398, 399, 400, 401, 853, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 182, 419, 420,
	889, 890, 892, 893, 415, 421, 422, 423, 946, 424,
	404, 405, 425, 426, 972, 427, 428, 911, 891, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 957, 436,
	437, 438, 979, 0, 442, 443, 441, 184, 444, 445,
	446, 447, 448, 278, 887, 0, 450, 930, 931, 932,
	933, 0, 457, 0, 451, 452, 980, 453, 981, 864,
	454, 455, 456, 0, 458, 459, 0, 847, 460, 461,
	462, 463, 464, 466, 947, 467, 0, 895, 468, 469,
	470, 1326, 927, 974, 0, 472, 471, 522, 0, 0,
	0, 176, 473, 474, 523, 475, 476, 477, 844, 177,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 840, 841, 900, 857, 858, 859, 855, 856, 869,
	1536, 1534, 0, 0, 868, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 949, 874, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 915, 894, 926, 884, 925, 924, 0,
	233, 886, 885, 236, 237, 238, 876, 948, 239, 984,
	985, 485, 0, 240, 955, 0, 938, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 941,
	939, 940, 945, 943, 942, 944, 257, 258, 259, 260,
	929, 262, 922, 921, 846, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 920, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 865, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 919, 917, 918, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 982,
	0, 875, 294, 0, 295, 296, 297, 298, 950, 951,
	954, 350, 961, 299, 300, 0, 301, 302, 896, 0,
	0, 217, 303, 305, 312, 0, 960, 306, 908, 899,
	910, 912, 913, 914, 909, 0, 901, 0, 313, 962,
	952, 963, 314, 315, 316, 964, 934, 935, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 888, 341, 967, 344, 345, 347, 346, 843,
	218, 968, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 182, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 972, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 979, 0, 442, 443, 441, 184, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 980, 453, 981,
	864, 454, 455, 456, 0, 458, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 1326, 927, 974, 0, 472, 471, 522, 0,
	0, 0, 176, 473, 474, 523, 475, 476, 477, 844,
	177, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 840, 841, 900, 857, 858, 859, 855, 856,
	869, 1536, 2512, 0, 0, 868, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	984, 985, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 262, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 975, 976, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	982, 0, 875, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 983, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 967, 344, 345, 347, 346,
	843, 218, 968, 348, 866, 953, 349, 923, 351, 352,
	0, 897, 354, 898, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 916, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 971, 398, 399, 400, 401, 853, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 182,
	419, 420, 889, 890, 892, 893, 415, 421, 422, 423,
	946, 424, 404, 405, 425, 426, 972, 427, 428, 911,
	891, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	957, 436, 437, 438, 979, 0, 442, 443, 441, 184,
	444, 445, 446, 447, 448, 278, 887, 0, 450, 930,
	931, 932, 933, 0, 457, 0, 451, 452, 980, 453,
	981, 864, 454, 455, 456, 0, 458, 459, 0, 847,
	460, 461, 462, 463, 464, 466, 947, 467, 0, 895,
	468, 469, 470, 1326, 927, 974, 0, 472, 471, 522,
	0, 0, 0, 176, 473, 474, 523, 475, 476, 477,
	844, 177, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 0, 840, 841, 900, 857, 858, 859, 855,
	856, 869, 1536, 1534, 0, 0, 868, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 949, 874, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 915, 894, 926, 884, 925,
	924, 2164, 233, 886, 885, 236, 237, 238, 876, 948,
	239, 984, 985, 485, 0, 240, 955, 0, 938, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 958, 255,
	256, 941, 939, 940, 945, 943, 942, 944, 257, 258,
	259, 260, 929, 262, 922, 921, 846, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 920, 269, 0, 270,
	0, 271, 272, 0, 273, 852, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 975, 976, 865, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 919, 917, 918,
	0, 289, 0, 290, 0, 2169, 959, 291, 292, 0,
	293, 982, 0, 875, 294, 0, 295, 296, 297, 298,
	950, 951, 954, 350, 961, 299, 300, 0, 301, 302,
	896, 0, 0, 217, 303, 305, 312, 0, 960, 306,
	908, 899, 910, 912, 913, 914, 909, 0, 901, 0,
	313, 962, 952, 963, 314, 315, 316, 964, 934, 935,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	2165, 326, 983, 965, 327, 328, 966, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 888, 341, 967, 344, 345, 347,
	346, 843, 218, 968, 348, 866, 953, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 969, 362, 970, 977, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 978, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 916, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 971, 398, 399, 400, 401, 853,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 889, 890, 892, 893, 415, 421, 422,
	423, 946, 424, 404, 405, 425, 426, 972, 427, 428,
	911, 891, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 957, 436, 437, 438, 979, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 887, 0, 450,
	930, 931, 932, 933, 0, 457, 2166, 451, 452, 980,
	453, 981, 864, 454, 455, 456, 0, 458, 459, 0,
	847, 460, 461, 462, 463, 464, 466, 947, 467, 0,
	895, 468, 469, 470, 519, 927, 974, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 1391, 868, 900, 857,
	858, 859, 855, 856, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 948, 239, 984, 985, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 929, 262, 922, 921, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 975, 976,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 982, 0, 875, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 983, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 967,
	344, 345, 347, 346, 843, 218, 968, 348, 866, 953,
	349, 923, 351, 352, 0, 897, 354, 898, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 969, 362,
	970, 977, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 978, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 916, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 971, 398, 399,
	400, 401, 853, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 889, 890, 892, 893,
	415, 421, 422, 423, 946, 424, 404, 405, 425, 426,
	972, 427, 428, 911, 891, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 957, 436, 437, 438, 979, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	887, 0, 450, 930, 931, 932, 933, 0, 457, 0,
	451, 452, 980, 453, 981, 864, 454, 455, 456, 0,
	458, 459, 0, 847, 460, 461, 462, 463, 464, 466,
	947, 467, 0, 895, 468, 469, 470, 519, 927, 974,
	0, 472, 471, 522, 1390, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 844, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 840, 841, 0,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 836,
	868, 900, 857, 858, 859, 855, 856, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	949, 874, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 915, 894, 926, 884, 925, 924, 0, 233, 886,
	885, 236, 237, 238, 876, 948, 239, 984, 985, 485,
	0, 240, 955, 0, 938, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 958, 255, 256, 941, 939, 940,
	945, 943, 942, 944, 257, 258, 259, 260, 929, 262,
	922, 921, 846, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 920, 269, 0, 270, 0, 271, 272, 0,
	273, 852, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 975, 976, 865, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 919, 917, 918, 0, 289, 0, 290,
	0, 0, 959, 291, 292, 0, 293, 982, 0, 875,
	294, 0, 295, 296, 297, 298, 950, 951, 954, 350,
	961, 299, 300, 0, 301, 302, 896, 0, 0, 217,
	303, 305, 312, 0, 960, 306, 908, 899, 910, 912,
	913, 914, 909, 0, 901, 0, 313, 962, 952, 963,
	314, 315, 316, 964, 934, 935, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 983, 965,
	327, 328, 966, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	888, 341, 967, 344, 345, 347, 346, 843, 218, 968,
	348, 866, 953, 349, 923, 351, 352, 0, 897, 354,
	898, 848, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 969, 362, 970, 977, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 978, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	916, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	971, 398, 399, 400, 401, 853, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 889,
	890, 892, 893, 415, 421, 422, 423, 946, 424, 404,
	405, 425, 426, 972, 427, 428, 911, 891, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 957, 436, 437,
	438, 979, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 887, 0, 450, 930, 931, 932, 933,
	0, 457, 0, 451, 452, 980, 453, 981, 864, 454,
	455, 456, 0, 458, 459, 0, 847, 460, 461, 462,
	463, 464, 466, 947, 467, 0, 895, 468, 469, 470,
	519, 927, 974, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 900, 857, 858, 859, 855, 856, 869, 870,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 949, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 948, 239, 984, 985,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 3501, 254, 0, 958, 255, 256, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 929,
	262, 922, 921, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 982, 0,
	875, 294, 0, 295, 296, 297, 298, 950, 951, 954,
	350, 961, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 960, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 962, 952,
	963, 314, 315, 316, 964, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 983,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 967, 344, 345, 347, 346, 843, 218,
	968, 348, 866, 953, 349, 923, 351, 352, 0, 897,
	354, 898, 848, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 969, 362, 970, 977, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 978, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 916, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 971, 398, 399, 400, 401, 853, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	889, 890, 892, 893, 415, 421, 422, 423, 946, 424,
	404, 405, 425, 426, 972, 427, 428, 911, 891, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 957, 436,
	437, 438, 979, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 887, 0, 450, 930, 931, 932,
	933, 0, 457, 0, 451, 452, 980, 453, 981, 864,
	454, 455, 456, 0, 458, 459, 0, 847, 460, 461,
	462, 463, 464, 466, 947, 467, 0, 895, 468, 469,
	470, 519, 927, 974, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 844, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 840, 841, 900, 857, 858, 859, 855, 856, 869,
	870, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 949, 874, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 915, 894, 926, 884, 925, 924, 0,
	233, 886, 885, 236, 237, 238, 876, 948, 239, 984,
	985, 485, 0, 240, 955, 0, 938, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 3353, 254, 0, 958, 255, 256, 941,
	939, 940, 945, 943, 942, 944, 257, 258, 259, 260,
	929, 262, 922, 921, 846, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 920, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 865, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 919, 917, 918, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 982,
	0, 875, 294, 0, 295, 296, 297, 298, 950, 951,
	954, 350, 961, 299, 300, 0, 301, 302, 896, 0,
	0, 217, 303, 305, 312, 0, 960, 306, 908, 899,
	910, 912, 913, 914, 909, 0, 901, 0, 313, 962,
	952, 963, 314, 315, 316, 964, 934, 935, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 888, 341, 967, 344, 345, 347, 346, 843,
	218, 968, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 848, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 972, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 979, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 980, 453, 981,
	864, 454, 455, 456, 0, 458, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 974, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 844,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 840, 841, 900, 857, 858, 859, 855, 856,
	869, 870, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	984, 985, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 262, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 975, 976, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	982, 0, 875, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 983, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 967, 344, 345, 347, 346,
	843, 3074, 968, 348, 866, 953, 349, 923, 351, 352,
	0, 897, 354, 898, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 916, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 971, 398, 399, 400, 401, 853, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 889, 890, 892, 893, 415, 421, 422, 423,
	946, 424, 404, 405, 425, 426, 972, 427, 428, 911,
	891, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	957, 436, 437, 438, 979, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 887, 0, 450, 930,
	931, 932, 933, 0, 457, 0, 451, 452, 980, 453,
	981, 864, 454, 455, 456, 0, 458, 459, 0, 847,
	460, 461, 462, 463, 464, 466, 947, 467, 0, 895,
	468, 469, 470, 519, 927, 974, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	844, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 0, 840, 841, 1596, 0, 0, 0, 0,
	0, 0, 870, 0, 0, 0, 868, 900, 857, 858,
	859, 855, 856, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 949, 874, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 915, 894, 926,
	884, 925, 924, 0, 233, 886, 885, 236, 237, 238,
	876, 948, 239, 984, 985, 485, 0, 240, 955, 0,
	938, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	958, 255, 256, 941, 939, 940, 945, 943, 942, 944,
	257, 258, 259, 260, 929, 262, 922, 921, 846, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 920, 269,
	0, 270, 0, 271, 272, 0, 273, 852, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 975, 976, 865,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 919,
	917, 918, 0, 289, 0, 290, 0, 0, 959, 291,
	292, 0, 293, 982, 0, 875, 294, 0, 295, 296,
	297, 298, 950, 951, 954, 350, 961, 299, 300, 0,
	301, 302, 896, 0, 0, 217, 303, 305, 312, 0,
	960, 306, 908, 899, 910, 912, 913, 914, 909, 0,
	901, 0, 313, 962, 952, 963, 314, 315, 316, 964,
	934, 935, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 983, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 888, 341, 967, 344,
	345, 347, 346, 843, 218, 968, 348, 866, 953, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 969, 362, 970,
	977, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 978, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 916, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 971, 398, 399, 400,
	401, 853, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 889, 890, 892, 893, 415,
	421, 422, 423, 946, 424, 404, 405, 425, 426, 972,
	427, 428, 911, 891, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 957, 436, 437, 438, 979, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 887,
	0, 450, 930, 931, 932, 933, 0, 457, 0, 451,
	452, 980, 453, 981, 864, 454, 455, 456, 0, 458,
	459, 0, 847, 460, 461, 462, 463, 464, 466, 947,
	467, 0, 895, 468, 469, 470, 519, 927, 974, 2880,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 900, 857,
	858, 859, 855, 856, 869, 870, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 948, 239, 984, 985, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 929, 262, 922, 921, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 975, 976,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 982, 0, 875, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 896, 0, 0, 1992, 303, 305, 312,
	0, 960, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 983, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 967,
	344, 345, 347, 346, 843, 218, 968, 348, 866, 953,
	349, 923, 351, 352, 0, 897, 354, 898, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 969, 362,
	970, 977, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 978, 373, 508, 374, 1991, 375,
	0, 376, 377, 378, 379, 380, 381, 916, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 971, 398, 399,
	400, 401, 853, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 889, 890, 892, 893,
	415, 421, 422, 423, 946, 424, 404, 405, 425, 426,
	972, 427, 428, 911, 891, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 957, 436, 437, 438, 979, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	887, 0, 450, 930, 931, 932, 933, 0, 457, 0,
	451, 452, 980, 453, 981, 864, 454, 455, 456, 0,
	458, 459, 0, 847, 460, 461, 462, 463, 464, 466,
	947, 467, 0, 895, 468, 469, 470, 519, 927, 974,
	0, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 844, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 840, 841, 900,
	857, 858, 859, 855, 856, 869, 870, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 949, 874,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 915,
	894, 926, 884, 925, 924, 0, 233, 886, 885, 236,
	237, 238, 876, 948, 239, 984, 985, 485, 0, 240,
	955, 0, 938, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 958, 255, 256, 941, 939, 940, 945, 943,
	942, 944, 257, 258, 259, 260, 929, 262, 922, 921,
	846, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	920, 269, 0, 270, 0, 271, 272, 0, 273, 852,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 975,
	976, 865, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 919, 917, 918, 0, 289, 0, 290, 0, 0,
	959, 291, 292, 0, 293, 982, 0, 875, 294, 0,
	295, 296, 297, 298, 950, 951, 954, 350, 961, 299,
	300, 0, 301, 302, 896, 0, 0, 217, 303, 305,
	312, 0, 960, 306, 908, 899, 910, 912, 913, 914,
	909, 0, 901, 0, 313, 962, 952, 963, 314, 315,
	316, 964, 934, 935, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 983, 965, 327, 328,
	966, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 888, 341,
	967, 344, 345, 347, 346, 843, 218, 968, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 848,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 969,
	362, 970, 977, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 978, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 971, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 972, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 979,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	0, 451, 452, 980, 453, 981, 864, 454, 455, 456,
	0, 458, 459, 0, 847, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 519, 927,
	974, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 844, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	900, 857, 858, 859, 855, 856, 869, 870, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 984, 985, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 262, 922,
	921, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 982, 0, 875, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 983, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 967, 344, 345, 347, 346, 843, 218, 968, 348,
	866, 953, 349, 923, 351, 352, 0, 897, 354, 898,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 916,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 971,
	398, 399, 400, 401, 853, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 889, 890,
	892, 893, 415, 421, 422, 423, 946, 424, 404, 405,
	425, 426, 972, 427, 428, 911, 891, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 957, 436, 437, 438,
	979, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 887, 0, 450, 930, 931, 932, 933, 0,
	457, 0, 451, 452, 980, 453, 981, 864, 454, 455,
	456, 0, 458, 459, 0, 847, 460, 461, 462, 463,
	464, 466, 947, 467, 0, 895, 468, 469, 470, 519,
	927, 974, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 844, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 840,
	841, 1596, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 0, 868, 900, 857, 858, 859, 855, 856, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 949, 874, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 915, 894, 926, 884, 925, 924, 0,
	233, 886, 885, 236, 237, 238, 876, 948, 239, 984,
	985, 485, 0, 240, 955, 0, 938, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 941,
	939, 940, 945, 943, 942, 944, 257, 258, 259, 260,
	929, 262, 922, 921, 846, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 920, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 865, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 919, 917, 918, 0, 289,
	0, 290, 0, 2169, 959, 291, 292, 0, 293, 982,
	0, 875, 294, 0, 295, 296, 297, 298, 950, 951,
	954, 350, 961, 299, 300, 0, 301, 302, 896, 0,
	0, 217, 303, 305, 312, 0, 960, 306, 908, 899,
	910, 912, 913, 914, 909, 0, 901, 0, 313, 962,
	952, 963, 314, 315, 316, 964, 934, 935, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 888, 341, 967, 344, 345, 347, 346, 843,
	218, 968, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 972, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 979, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 980, 453, 981,
	864, 454, 455, 456, 0, 458, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 974, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 844,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 840, 841, 900, 857, 858, 859, 855, 856,
	869, 870, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	984, 985, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 262, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 975, 976, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	982, 0, 875, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 983, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 967, 344, 345, 347, 346,
	843, 218, 968, 348, 866, 953, 349, 923, 351, 352,
	0, 897, 354, 898, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 916, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 971, 398, 399, 400, 401, 853, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 889, 890, 892, 893, 415, 421, 422, 423,
	946, 424, 404, 405, 425, 426, 972, 427, 428, 911,
	891, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	957, 436, 437, 438, 979, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 887, 0, 450, 930,
	931, 932, 933, 0, 457, 0, 451, 452, 980, 453,
	981, 864, 454, 455, 456, 0, 458, 459, 0, 847,
	460, 461, 462, 463, 464, 466, 947, 467, 0, 895,
	468, 469, 470, 519, 927, 974, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	844, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 0, 840, 841, 0, 0, 0, 0, 0,
	0, 0, 870, 1534, 0, 2174, 868, 900, 857, 858,
	859, 855, 856, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 949, 874, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 915, 894, 926,
	884, 925, 924, 0, 233, 886, 885, 236, 237, 238,
	876, 948, 239, 984, 985, 485, 0, 240, 955, 0,
	938, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	958, 255, 256, 941, 939, 940, 945, 943, 942, 944,
	257, 258, 259, 260, 929, 262, 922, 921, 846, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 920, 269,
	0, 270, 0, 271, 272, 0, 273, 852, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 975, 976, 865,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 919,
	917, 918, 0, 289, 0, 290, 0, 0, 959, 291,
	292, 0, 293, 982, 0, 875, 294, 0, 295, 296,
	297, 298, 950, 951, 954, 350, 961, 299, 300, 0,
	301, 302, 896, 0, 0, 217, 303, 305, 312, 0,
	960, 306, 908, 899, 910, 912, 913, 914, 909, 0,
	901, 0, 313, 962, 952, 963, 314, 315, 316, 964,
	934, 935, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 983, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 888, 341, 967, 344,
	345, 347, 346, 843, 218, 968, 348, 866, 953, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 969, 362, 970,
	977, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 978, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 916, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 971, 398, 399, 400,
	401, 853, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 889, 890, 892, 893, 415,
	421, 422, 423, 946, 424, 404, 405, 425, 426, 972,
	427, 428, 911, 891, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 957, 436, 437, 438, 979, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 887,
	0, 450, 930, 931, 932, 933, 0, 457, 0, 451,
	452, 980, 453, 981, 864, 454, 455, 456, 0, 458,
	459, 0, 847, 460, 461, 462, 463, 464, 466, 947,
	467, 0, 895, 468, 469, 470, 519, 927, 974, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 2172, 868,
	900, 857, 858, 859, 855, 856, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 984, 985, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 262, 922,
	921, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 982, 0, 875, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 983, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 967, 344, 345, 347, 346, 843, 218, 968, 348,
	866, 953, 349, 923, 351, 352, 0, 897, 354, 898,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 916,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 971,
	398, 399, 400, 401, 853, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 889, 890,
	892, 893, 415, 421, 422, 423, 946, 424, 404, 405,
	425, 426, 972, 427, 428, 911, 891, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 957, 436, 437, 438,
	979, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 887, 0, 450, 930, 931, 932, 933, 0,
	457, 0, 451, 452, 980, 453, 981, 864, 454, 455,
	456, 0, 458, 459, 0, 847, 460, 461, 462, 463,
	464, 466, 947, 467, 0, 895, 468, 469, 470, 519,
	927, 974, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 844, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 2160, 868, 900, 857, 858, 859, 855, 856, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 949, 874, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 915, 894, 926, 884, 925, 924, 0,
	233, 886, 885, 236, 237, 238, 876, 948, 239, 984,
	985, 485, 0, 240, 955, 0, 938, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 941,
	939, 940, 945, 943, 942, 944, 257, 258, 259, 260,
	929, 262, 922, 921, 846, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 920, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 865, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 919, 917, 918, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 982,
	0, 875, 294, 0, 295, 296, 297, 298, 950, 951,
	954, 350, 961, 299, 300, 0, 301, 302, 896, 0,
	0, 217, 303, 305, 312, 0, 960, 306, 908, 899,
	910, 912, 913, 914, 909, 0, 901, 0, 313, 962,
	952, 963, 314, 315, 316, 964, 934, 935, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 888, 341, 967, 344, 345, 347, 346, 843,
	218, 968, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 972, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 979, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 980, 453, 981,
	864, 454, 455, 456, 0, 458, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 974, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 844,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 2149, 868, 900, 857, 858, 859,
	855, 856, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	948, 239, 984, 985, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 929, 262, 922, 921, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 982, 0, 875, 294, 0, 295, 296, 297,
	298, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 983, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 967, 344, 345,
	347, 346, 843, 218, 968, 348, 866, 953, 349, 923,
	351, 352, 0, 897, 354, 898, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 916, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 971, 398, 399, 400, 401,
	853, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 889, 890, 892, 893, 415, 421,
	422, 423, 946, 424, 404, 405, 425, 426, 972, 427,
	428, 911, 891, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 957, 436, 437, 438, 979, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 887, 0,
	450, 930, 931, 932, 933, 0, 457, 0, 451, 452,
	980, 453, 981, 864, 454, 455, 456, 0, 458, 459,
	0, 847, 460, 461, 462, 463, 464, 466, 947, 467,
	0, 895, 468, 469, 470, 519, 927, 974, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 844, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 840, 841, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 0, 2147, 868, 2138,
	2145, 858, 859, 855, 856, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 949, 874,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 915,
	894, 926, 884, 925, 924, 0, 233, 886, 885, 236,
	237, 238, 876, 948, 239, 984, 985, 485, 0, 240,
	955, 0, 938, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 958, 255, 256, 941, 939, 940, 945, 943,
	942, 944, 257, 258, 259, 260, 929, 2141, 922, 921,
	846, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	920, 269, 0, 270, 0, 271, 272, 0, 273, 852,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 975,
	976, 865, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 919, 917, 918, 0, 289, 0, 290, 0, 0,
	959, 291, 292, 0, 293, 982, 0, 875, 294, 0,
	295, 296, 297, 2142, 950, 951, 954, 350, 961, 299,
	300, 0, 301, 302, 896, 0, 0, 217, 303, 305,
	312, 0, 960, 306, 908, 899, 910, 912, 913, 914,
	909, 0, 901, 0, 313, 962, 952, 963, 314, 315,
	316, 964, 934, 935, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 983, 965, 327, 328,
	966, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 2143, 2140, 342, 888, 341,
	967, 344, 345, 347, 346, 843, 218, 968, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 969,
	362, 970, 977, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 978, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 971, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 2144, 0, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 972, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 979,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	0, 451, 452, 980, 453, 981, 864, 454, 455, 456,
	0, 458, 459, 0, 847, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 519, 927,
	974, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 2139, 477, 844, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 0,
	2135, 868, 2138, 2145, 858, 859, 855, 856, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 949, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 948, 239, 984, 985,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 256, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 929,
	2141, 922, 921, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 982, 0,
	875, 294, 0, 295, 296, 297, 2142, 950, 951, 954,
	350, 961, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 960, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 962, 952,
	963, 314, 315, 316, 964, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 983,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 2143, 2140,
	342, 888, 341, 967, 344, 345, 347, 346, 843, 218,
	968, 348, 866, 953, 349, 923, 351, 352, 0, 897,
	354, 898, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 969, 362, 970, 977, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 978, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 916, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 971, 398, 399, 400, 401, 853, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 2144, 0, 419, 420,
	889, 890, 892, 893, 415, 421, 422, 423, 946, 424,
	404, 405, 425, 426, 972, 427, 428, 911, 891, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 957, 436,
	437, 438, 979, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 887, 0, 450, 930, 931, 932,
	933, 0, 457, 0, 451, 452, 980, 453, 981, 864,
	454, 455, 456, 0, 458, 459, 0, 847, 460, 461,
	462, 463, 464, 466, 947, 467, 0, 895, 468, 469,
	470, 519, 927, 974, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 2139, 477, 844, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 840, 841, 900, 857, 858, 859, 855, 856, 869,
	870, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 949, 874, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 915, 894, 926, 884, 925, 924, 0,
	233, 886, 885, 236, 237, 238, 876, 948, 239, 984,
	985, 485, 0, 240, 955, 0, 938, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 941,
	939, 940, 945, 943, 942, 944, 257, 258, 259, 260,
	929, 262, 922, 921, 846, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 920, 269, 0, 270, 0, 271,
	272, 0, 273, 852, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 975, 976, 865, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 919, 917, 918, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 982,
	0, 875, 294, 0, 295, 296, 297, 298, 950, 951,
	954, 350, 961, 299, 300, 0, 301, 302, 896, 0,
	0, 217, 303, 305, 312, 0, 960, 306, 908, 899,
	910, 912, 913, 914, 909, 0, 901, 0, 313, 962,
	952, 963, 314, 315, 316, 964, 934, 935, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	983, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 888, 341, 967, 344, 345, 347, 346, 843,
	218, 968, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 977, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 978,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 972, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 979, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 980, 453, 981,
	864, 454, 455, 456, 0, 458, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 974, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 844,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 840, 841, 0, 0, 0, 0, 0, 1542,
	0, 870, 0, 0, 0, 868, 900, 857, 858, 859,
	855, 856, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 1978, 224,
	0, 0, 0, 0, 0, 949, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	948, 239, 984, 985, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 929, 262, 922, 921, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 982, 0, 875, 294, 0, 295, 296, 297,
	298, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 983, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 967, 344, 345,
	347, 346, 843, 218, 968, 348, 866, 953, 349, 923,
	351, 352, 0, 897, 354, 898, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 916, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 971, 398, 399, 400, 401,
	853, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 889, 890, 892, 893, 415, 421,
	422, 423, 946, 424, 404, 405, 425, 426, 972, 427,
	428, 911, 891, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 957, 436, 437, 438, 979, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 887, 0,
	450, 930, 931, 932, 933, 0, 457, 0, 451, 452,
	980, 453, 981, 864, 454, 455, 456, 0, 458, 459,
	0, 847, 460, 461, 462, 463, 464, 466, 947, 467,
	0, 895, 468, 469, 470, 519, 927, 974, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 844, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 840, 841, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 0, 1216, 868, 900,
	857, 858, 859, 855, 856, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 949, 874,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 915,
	894, 926, 884, 925, 924, 0, 233, 886, 885, 236,
	237, 238, 876, 948, 239, 984, 985, 485, 0, 240,
	955, 0, 938, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 958, 255, 256, 941, 939, 940, 945, 943,
	942, 944, 257, 258, 259, 260, 929, 262, 922, 921,
	846, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	920, 269, 0, 270, 0, 271, 272, 0, 273, 852,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 975,
	976, 865, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 919, 917, 918, 0, 289, 0, 290, 0, 0,
	959, 291, 292, 0, 293, 982, 0, 875, 294, 0,
	295, 296, 297, 298, 1215, 951, 954, 350, 961, 299,
	300, 0, 301, 302, 896, 0, 0, 217, 303, 305,
	312, 0, 960, 306, 908, 899, 910, 912, 913, 914,
	909, 0, 901, 0, 313, 962, 952, 963, 314, 315,
	316, 964, 934, 935, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 983, 965, 327, 328,
	966, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 888, 341,
	967, 344, 345, 347, 346, 843, 218, 968, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 969,
	362, 970, 977, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 978, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 971, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 972, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 979,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	0, 451, 452, 980, 453, 981, 864, 454, 455, 456,
	0, 458, 459, 0, 847, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 519, 927,
	974, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 844, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 0,
	1210, 868, 900, 857, 858, 859, 855, 856, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 949, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 948, 239, 984, 985,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 256, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 929,
	262, 922, 921, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 982, 0,
	875, 294, 0, 295, 296, 297, 298, 1209, 951, 954,
	350, 961, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 960, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 962, 952,
	963, 314, 315, 316, 964, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 983,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 967, 344, 345, 347, 346, 843, 218,
	968, 348, 866, 953, 349, 923, 351, 352, 0, 897,
	354, 898, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 969, 362, 970, 977, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 978, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 916, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 971, 398, 399, 400, 401, 853, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	889, 890, 892, 893, 415, 421, 422, 423, 946, 424,
	404, 405, 425, 426, 972, 427, 428, 911, 891, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 957, 436,
	437, 438, 979, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 887, 0, 450, 930, 931, 932,
	933, 0, 457, 0, 451, 452, 980, 453, 981, 864,
	454, 455, 456, 0, 458, 459, 0, 847, 460, 461,
	462, 463, 464, 466, 947, 467, 0, 895, 468, 469,
	470, 519, 927, 974, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 844, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	870, 0, 0, 1205, 868, 900, 857, 858, 859, 855,
	856, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 949, 874, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 915, 894, 926, 884, 925,
	924, 0, 233, 886, 885, 236, 237, 238, 876, 948,
	239, 984, 985, 485, 0, 240, 955, 0, 938, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 958, 255,
	256, 941, 939, 940, 945, 943, 942, 944, 257, 258,
	259, 260, 929, 262, 922, 921, 846, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 920, 269, 0, 270,
	0, 271, 272, 0, 273, 852, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 975, 976, 865, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 919, 917, 918,
	0, 289, 0, 290, 0, 0, 959, 291, 292, 0,
	293, 982, 0, 875, 294, 0, 295, 296, 297, 298,
	950, 951, 954, 350, 961, 299, 300, 0, 301, 302,
	896, 0, 0, 217, 303, 305, 312, 0, 960, 306,
	908, 899, 910, 912, 913, 914, 909, 0, 901, 0,
	313, 962, 952, 963, 314, 315, 316, 964, 934, 935,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 983, 965, 327, 328, 966, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 888, 341, 967, 344, 345, 347,
	346, 843, 218, 968, 348, 866, 953, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 969, 362, 970, 977, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 978, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 916, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 971, 398, 399, 400, 401, 853,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 889, 890, 892, 893, 415, 421, 422,
	423, 946, 424, 404, 405, 425, 426, 972, 427, 428,
	911, 891, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 957, 436, 437, 438, 979, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 887, 0, 450,
	930, 931, 932, 933, 0, 457, 0, 451, 452, 980,
	453, 981, 864, 454, 455, 456, 0, 458, 459, 0,
	847, 460, 461, 462, 463, 464, 466, 947, 467, 0,
	895, 468, 469, 470, 519, 927, 974, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 900, 857, 858, 859,
	855, 856, 869, 870, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	948, 239, 984, 985, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 929, 262, 922, 921, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 982, 0, 875, 294, 0, 295, 296, 297,
	298, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 983, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 967, 344, 345,
	347, 346, 843, 218, 968, 348, 866, 953, 349, 923,
	351, 352, 0, 897, 354, 898, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 916, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 971, 398, 399, 400, 401,
	853, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 889, 890, 892, 893, 415, 421,
	422, 423, 946, 424, 404, 405, 425, 426, 972, 427,
	428, 911, 891, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 957, 436, 437, 438, 979, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 887, 0,
	450, 930, 931, 932, 933, 0, 457, 0, 451, 452,
	980, 453, 981, 864, 454, 455, 456, 0, 458, 459,
	0, 847, 460, 461, 462, 463, 464, 466, 947, 467,
	0, 895, 468, 469, 470, 519, 927, 974, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 844, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 840, 841, 900, 857, 858,
	859, 855, 856, 869, 870, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 949, 874, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 915, 894, 926,
	884, 925, 924, 0, 233, 886, 885, 236, 237, 238,
	876, 948, 239, 984, 985, 485, 0, 240, 955, 0,
	938, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	958, 255, 3530, 941, 939, 940, 945, 943, 942, 944,
	257, 258, 259, 260, 929, 262, 922, 921, 846, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 920, 269,
	0, 270, 0, 271, 272, 0, 273, 852, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 975, 976, 865,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 919,
	917, 918, 0, 289, 0, 290, 0, 0, 959, 291,
	292, 0, 293, 982, 0, 875, 294, 0, 295, 296,
	297, 298, 950, 951, 954, 350, 961, 299, 300, 0,
	301, 302, 896, 0, 0, 217, 303, 305, 312, 0,
	960, 306, 908, 899, 910, 912, 913, 914, 909, 0,
	901, 0, 313, 962, 952, 963, 314, 315, 316, 964,
	934, 935, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 983, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 888, 341, 967, 344,
	345, 347, 346, 843, 218, 968, 348, 866, 953, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 969, 362, 970,
	977, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 978, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 916, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 971, 398, 399, 400,
	401, 853, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 889, 890, 892, 893, 415,
	421, 422, 423, 946, 424, 404, 405, 425, 426, 972,
	427, 428, 911, 891, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 957, 436, 437, 438, 979, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 887,
	0, 450, 930, 931, 932, 933, 0, 457, 0, 451,
	452, 980, 453, 981, 864, 454, 455, 456, 0, 3529,
	459, 0, 847, 460, 461, 462, 463, 464, 466, 947,
	467, 0, 895, 468, 469, 470, 519, 927, 974, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 900, 857,
	858, 859, 855, 856, 869, 870, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 3528, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 948, 239, 984, 985, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 3530, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 929, 262, 922, 921, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 975, 976,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 982, 0, 875, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 983, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 967,
	344, 345, 347, 346, 843, 218, 968, 348, 866, 953,
	349, 923, 351, 352, 0, 897, 354, 898, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 969, 362,
	970, 977, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 978, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 916, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 971, 398, 399,
	400, 401, 853, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 889, 890, 892, 893,
	415, 421, 422, 423, 946, 424, 404, 405, 425, 426,
	972, 427, 428, 911, 891, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 957, 436, 437, 438, 979, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	887, 0, 450, 930, 931, 932, 933, 0, 457, 0,
	451, 452, 980, 453, 981, 864, 454, 455, 456, 0,
	3529, 459, 0, 847, 460, 461, 462, 463, 464, 466,
	947, 467, 0, 895, 468, 469, 470, 519, 927, 974,
	0, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 844, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 840, 841, 900,
	857, 858, 859, 855, 856, 869, 870, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 949, 874,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 915,
	894, 926, 884, 925, 924, 0, 233, 886, 885, 236,
	237, 238, 876, 948, 239, 984, 985, 485, 0, 240,
	955, 0, 938, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 958, 255, 256, 941, 939, 940, 945, 943,
	942, 944, 257, 258, 259, 260, 929, 262, 922, 921,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	920, 269, 0, 270, 0, 271, 272, 0, 273, 852,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 975,
	976, 865, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 919, 917, 918, 0, 289, 0, 290, 0, 0,
	959, 291, 292, 0, 293, 982, 0, 875, 294, 0,
	295, 296, 297, 298, 950, 951, 954, 350, 961, 299,
	300, 0, 301, 302, 896, 0, 0, 217, 303, 305,
	312, 0, 960, 306, 908, 899, 910, 912, 913, 914,
	909, 0, 901, 0, 313, 962, 952, 963, 314, 315,
	316, 964, 934, 935, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 983, 965, 327, 328,
	966, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 888, 341,
	967, 344, 345, 347, 346, 0, 218, 968, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 969,
	362, 970, 977, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 978, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 971, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 972, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 979,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	0, 451, 452, 980, 453, 981, 864, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 519, 927,
	974, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 2157, 0, 0, 0, 0, 0, 0, 2155, 2156,
	900, 857, 858, 859, 855, 856, 869, 870, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 0,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 984, 985, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 3530, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 262, 922,
	921, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 982, 0, 875, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 0,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 0, 952, 0, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 983, 965, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 967, 344, 345, 347, 346, 843, 218, 0, 348,
	866, 953, 349, 923, 351, 352, 0, 897, 354, 898,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 916,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 971,
	398, 399, 400, 401, 853, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 889, 890,
	892, 893, 415, 421, 422, 423, 946, 424, 404, 405,
	425, 426, 0, 427, 428, 911, 891, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 957, 436, 437, 438,
	979, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 887, 0, 450, 930, 931, 932, 933, 0,
	457, 0, 451, 452, 980, 453, 981, 864, 454, 455,
	456, 0, 3529, 459, 0, 847, 460, 461, 462, 463,
	464, 466, 947, 467, 0, 895, 468, 469, 470, 519,
	927, 974, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 833, 0, 1021, 0, 0, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 0, 868, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	948, 239, 483, 484, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 982, 0, 494, 294, 0, 295, 296, 297,
	298, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 1008, 325,
	324, 0, 326, 983, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 967, 344, 345,
	347, 346, 0, 218, 968, 348, 0, 953, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 1013, 357, 358,
	359, 0, 0, 360, 361, 505, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 971, 398, 399, 400, 401,
	510, 1015, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 182, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 946, 424, 404, 405, 425, 426, 972, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 979, 0, 442, 443,
	441, 184, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	980, 453, 981, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 947, 467,
	0, 465, 468, 469, 470, 1326, 520, 521, 0, 472,
	471, 522, 1021, 0, 0, 176, 473, 474, 523, 475,
	476, 477, 0, 177, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 949, 1005, 0, 1628, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 948, 239, 483, 484,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 256, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 975, 976, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 982, 0,
	494, 294, 0, 295, 296, 297, 298, 950, 951, 954,
	350, 961, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 960, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 962, 952,
	963, 314, 315, 316, 964, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1008, 325, 324, 0, 326, 983,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 967, 344, 345, 347, 346, 0, 218,
	968, 348, 0, 953, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 1013, 357, 358, 359, 0, 0, 360,
	361, 505, 969, 362, 970, 977, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 978, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 971, 398, 399, 400, 401, 510, 1015, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 182, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 946, 424,
	404, 405, 425, 426, 972, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 979, 0, 442, 443, 441, 184, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 980, 453, 981, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 947, 467, 0, 465, 468, 469,
	470, 1326, 520, 521, 0, 472, 471, 522, 2621, 0,
	1021, 176, 473, 474, 523, 475, 476, 477, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 1005, 949,
	1628, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 948, 239, 483, 484, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 982, 0, 494, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1008, 325, 324, 0, 326, 983, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 967, 344, 345, 347, 346, 0, 218, 968, 348,
	0, 953, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 1013, 357, 358, 359, 0, 0, 360, 361, 505,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 971,
	398, 399, 400, 401, 510, 1015, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 946, 424, 404, 405,
	425, 426, 972, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	979, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 980, 453, 981, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 947, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 1004, 0, 1021, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 1005, 949, 1010, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 948, 239, 483, 484, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 975, 976,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 982, 0, 494, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	1008, 325, 324, 0, 326, 983, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 967,
	344, 345, 347, 346, 0, 218, 968, 348, 0, 953,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 1013,
	357, 358, 359, 0, 0, 360, 361, 505, 969, 362,
	970, 977, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 978, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 971, 398, 399,
	400, 401, 510, 1015, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 946, 424, 404, 405, 425, 426,
	972, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 979, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 980, 453, 981, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	947, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 1021, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 1005, 0, 1010, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 948, 239,
	483, 484, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 975, 976, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	982, 0, 494, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1008, 325, 324, 0,
	326, 983, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 967, 344, 345, 347, 346,
	0, 218, 968, 348, 0, 953, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 1013, 357, 358, 359, 0,
	0, 360, 361, 505, 969, 362, 970, 977, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	978, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 971, 398, 399, 400, 401, 510, 1015,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	946, 424, 404, 405, 425, 426, 972, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 979, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 980, 453,
	981, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 947, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1021, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	1005, 0, 1010, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 948, 239, 483, 484, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	975, 976, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 982, 0, 494, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 983, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 967, 344, 345, 347, 346, 0, 218, 968, 348,
	0, 953, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	969, 362, 970, 977, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 978, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 971,
	398, 399, 400, 401, 510, 1015, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 946, 424, 404, 405,
	425, 426, 972, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	979, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 980, 453, 981, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 947, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 833, 0, 1180, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 1523, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 1084, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 961, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 960, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 962, 501, 963, 314, 315, 316,
	964, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 967,
	344, 345, 347, 346, 0, 0, 968, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 969, 362,
	970, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 971, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 182, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	972, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 184, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 1326, 520, 521,
	0, 472, 471, 522, 1323, 0, 1180, 176, 473, 474,
	523, 475, 476, 477, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 151, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 1084,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 961, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 960,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 962, 501, 963, 314, 315, 316, 964, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 967, 344, 345,
	347, 346, 0, 0, 968, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 969, 362, 970, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 971, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 182, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 972, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 184, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 1326, 520, 521, 0, 472,
	471, 522, 0, 0, 0, 176, 473, 474, 523, 475,
	476, 477, 0, 177, 0, 0, 0, 0, 1180, 1179,
	0, 0, 0, 0, 1177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 1084, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 961, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 960, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 962, 501, 963, 314, 315, 316,
	964, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 967,
	344, 345, 347, 346, 0, 0, 968, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 969, 362,
	970, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 971, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	972, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 1180, 1179, 0, 0, 0, 0,
	1177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 1808, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 1084, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 961, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 960, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	962, 501, 963, 314, 315, 316, 964, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 967, 344, 345, 347, 346,
	0, 0, 968, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 969, 362, 970, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 971, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 972, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	1180, 1179, 0, 0, 0, 0, 1177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 2818, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 1084, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 961,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 960, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 962, 501, 963, 314,
	315, 316, 964, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 967, 344, 345, 347, 346, 0, 0, 968, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	969, 362, 970, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 971,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 972, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 1021, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 0, 0, 1332, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	948, 239, 483, 484, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 975, 976, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 982, 0, 494, 294, 0, 295, 296, 297,
	298, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 983, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 967, 344, 345,
	347, 346, 0, 218, 968, 348, 0, 953, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 969, 362, 970, 977,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 978, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 971, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 946, 424, 404, 405, 425, 426, 972, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 979, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	980, 453, 981, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 947, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 833, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 182,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 184,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 1326, 520, 521, 0, 472, 471, 522,
	213, 0, 0, 176, 473, 474, 523, 475, 476, 477,
	0, 177, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 151, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 218, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 213, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 1633, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 213, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 2768, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 213, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	2392, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 213, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 2904, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	701, 0, 590, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 1899, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 596, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 595, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 0, 589,
	0, 590, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 599, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 596, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 595, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 590, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 599, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 596, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 218, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 1929, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 595, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 590, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 599, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 596, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 595, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 213,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 599, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 218, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 1357, 0, 1180, 1179, 0,
	0, 0, 0, 1177, 0, 0, 0, 0, 0, 0,
	599, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	1084, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	958, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 1356, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 959, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 961, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 346, 0, 0, 968, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 969, 362, 970,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 1355, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 971, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 1354, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 972,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 1321, 0, 1180, 1179, 0, 0, 0,
	0, 1177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 1084, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 958, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 959, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	1320, 496, 497, 350, 961, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 960, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 962, 501, 963, 314, 315, 316, 964, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 965, 327, 328, 966, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 967, 344, 345, 347,
	346, 0, 0, 968, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 969, 362, 970, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 971, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 972, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 1317, 0, 1180, 1179, 0, 0, 0, 0, 1177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 1084, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 1316, 496,
	497, 350, 961, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 960, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 962,
	501, 963, 314, 315, 316, 964, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 967, 344, 345, 347, 346, 0,
	0, 968, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 972, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 1255,
	0, 1180, 1179, 0, 0, 0, 0, 1177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 1084, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 958, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 959, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 1254, 496, 497, 350,
	961, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 962, 501, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 965,
	327, 328, 966, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 346, 0, 0, 968,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 969, 362, 970, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	971, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 972, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 1252, 0, 1180,
	1179, 0, 0, 0, 0, 1177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 1084, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 958, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	959, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 1251, 496, 497, 350, 961, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 960, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 962, 501, 963, 314, 315,
	316, 964, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 965, 327, 328,
	966, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	967, 344, 345, 347, 346, 0, 0, 968, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 969,
	362, 970, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 971, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 972, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 1173, 0, 1180, 1179, 0,
	0, 0, 0, 1177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	1084, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	958, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 959, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 1175, 496, 497, 350, 961, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 346, 0, 0, 968, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 969, 362, 970,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 971, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 972,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 1180, 1179, 0, 0, 0, 0, 1177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 1084, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 961, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 960, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 962,
	501, 963, 314, 315, 316, 964, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 967, 344, 345, 347, 346, 0,
	0, 968, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 969, 362, 970, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 971, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 972, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 1180,
	1179, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 1084, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 958, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	1722, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	959, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 961, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 960, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 962, 501, 963, 314, 315,
	316, 964, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 965, 327, 328,
	966, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	967, 344, 345, 347, 346, 0, 0, 968, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 969,
	362, 970, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 971, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 972, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1180, 1179, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 1084, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 958, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 959, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 961, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 960, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 962, 501, 963, 314, 315, 316, 964, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 965, 327, 328, 966, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 967, 344, 345, 347,
	346, 0, 0, 968, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 969, 362, 970, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 971, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 972, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 1180, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	1084, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	958, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 959, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 961, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 346, 0, 0, 968, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 969, 362, 970,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 971, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 972,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 213,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 2281, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 2278, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 2428, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 2284, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 2425, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 2427, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	2424, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 2283,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 2426, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 213, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	2281, 240, 486, 0, 0, 2275, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 2278, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	2284, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 2274, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 2283, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 2282, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 1410, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 218, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 1413, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 1411, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 1412, 471, 522, 1168, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 1170, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 218, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 1013, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 1165, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	1167, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 218, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 1013, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1072, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 1074, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 1013, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 552,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 551, 223, 541, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 544, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 545, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 546, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 540, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 541, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 544, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 545, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 546, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 213, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 1013, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 2363, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 218, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1908, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 218, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 213,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 218, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 1836, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1840, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 1839, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 218, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 1829, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	1831, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 218, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1310, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 1309, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 1307,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 1306, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 1304, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 1303, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 218, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1300, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 1299, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 218, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 1275, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 218, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1190, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 1192, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 213, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 218, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 213, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 544,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 545, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 546, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 213,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 1936, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 218, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 213, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 1934, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 1932, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 693,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 692, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 691, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 2428, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 3237, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 531,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 530, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	529, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 2215, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 213,
	2415, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 213, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 3028, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 213, 2415, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 2412, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 213,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 219, 220, 221, 222,
	223, 1915, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1906, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 572, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	1050, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 1048, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 573, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 569, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 1051,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	568, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1853, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 1852, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 572,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 562, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 573, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 569, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 1331, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 568, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 1314, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 1313, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1263, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 1262, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 1244, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1184, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 572,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 1050, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 1048,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 573, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 569, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 1051, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 568, 514, 515, 516,
	0, 457, 0, 451, 1049, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 1032, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 572,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 562, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 560, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 561, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 573, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 563, 402, 0, 403, 407,
	408, 569, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 564, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 568, 514, 515, 516,
	0, 457, 0, 451, 566, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 556, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 557, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 554, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 548, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 526, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 213, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 213, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 2710, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 213,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 2708, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 213, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 2696, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 2375, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 213, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 557, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 213, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 1865, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 0, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 213,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 1283, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 213, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 1225, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 987, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 213, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 0, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 0, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 0, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	0, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 1490, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 1460, 0,
	1492, 1493, 1494, 1502, 1503, 1504, 1461, 0, 0, 0,
	0, 0, 0, 0, 0, 1481, 1495, 1490, 0, 0,
	0, 0, 1478, 0, 1462, 0, 0, 0, 0, 1508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	1485, 1486, 1487, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1499, 0, 0, 1509, 0, 0, 0,
	1489, 1491, 0, 0, 0, 1484, 1485, 1486, 1487, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1505, 0, 1506, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 1509, 0, 0, 1497, 1489, 1491, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 1506, 0,
	0, 0, 1507, 0, 0, 1476, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 1460, 0, 1492, 1493,
	1494, 1502, 1503, 1504, 0, 0, 1500, 0, 1488, 0,
	0, 0, 0, 0, 1495, 1490, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 1483, 1508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 0, 1500, 0, 0, 0, 0, 0, 0, 1481,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 0, 0, 1473, 1474, 1480, 1501, 1479, 1475, 0,
	1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 0,
	0, 0, 0, 0, 0, 0, 0, 2564, 0, 0,
	0, 0, 0, 1484, 1485, 1486, 1487, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 1498, 0, 0, 1473,
	1474, 1480, 1501, 1479, 1475, 0, 1472, 1470, 1471, 1463,
	1464, 1465, 1466, 1468, 1469, 0, 0, 1499, 0, 0,
	1509, 0, 0, 2561, 1489, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1506, 0, 0, 0,
	0, 0, 0, 1476, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 1459, 1460, 0, 1492,
	1493, 1494, 1502, 1503, 1504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 1490, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 1508, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 1483, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 1460,
	1500, 1492, 1493, 1494, 1502, 1503, 1504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 1490, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	1508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 1485, 1486, 1487, 0, 0,
	0, 0, 0, 1461, 1467, 0, 0, 0, 0, 0,
	0, 0, 1481, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 1509, 0, 0, 1498, 1489, 1491, 1473, 1474, 1480,
	1501, 1479, 1475, 0, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 0, 0, 1505, 0, 1506, 0, 0,
	0, 2560, 0, 0, 1476, 1477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 1485, 1486, 1487,
	1497, 0, 0, 0, 0, 0, 1467, 0, 0, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 0, 0,
	1499, 0, 0, 1509, 0, 0, 0, 1489, 1491, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 1506,
	0, 0, 0, 0, 0, 0, 1476, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 1488, 0, 0,
	0, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 1507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 1459,
	1460, 1500, 1492, 1493, 1494, 1502, 1503, 1504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 1490,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 0, 0, 1483, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 0, 1498, 0, 0, 1473, 1474,
	1480, 1501, 1479, 1475, 0, 1472, 1470, 1471, 1463, 1464,
	1465, 1466, 1468, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 2559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 1485, 1486,
	1487, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 1509, 0, 0, 1498, 1489, 1491,
	1473, 1474, 1480, 1501, 1479, 1475, 0, 1472, 1470, 1471,
	1463, 1464, 1465, 1466, 1468, 1469, 0, 0, 1505, 0,
	1506, 0, 0, 0, 2090, 0, 0, 1476, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 1460, 0, 1492, 1493,
	1494, 1502, 1503, 1504, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 1495, 1490, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 1508, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504,
	1461, 0, 0, 0, 1500, 0, 0, 0, 0, 1481,
	1495, 1490, 0, 0, 0, 0, 1478, 0, 1462, 0,
	0, 0, 0, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 1485, 1486, 1487, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1498, 0,
	0, 1473, 1474, 1480, 1501, 1479, 1475, 0, 1472, 1470,
	1471, 1463, 1464, 1465, 1466, 1468, 1469, 1499, 0, 0,
	1509, 3484, 0, 0, 1489, 1491, 0, 0, 0, 1484,
	1485, 1486, 1487, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1505, 0, 1506, 0, 0, 0,
	0, 0, 0, 1476, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 1499, 0, 0, 1509, 0, 0, 1497,
	1489, 1491, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 1506, 0, 0, 0, 1507, 0, 0, 1476,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 1497, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 1460, 0,
	1492, 1493, 1494, 1502, 1503, 1504, 0, 0, 0, 0,
	1500, 0, 1488, 0, 0, 0, 1495, 1490, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 1508,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 0, 1500, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 1473, 1474, 1480,
	1501, 1479, 1475, 0, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 0, 0, 0, 0, 3480, 0, 0,
	0, 0, 0, 0, 0, 1484, 1485, 1486, 1487, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1498, 0, 0, 1473, 1474, 1480, 1501, 1479, 1475, 0,
	1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 1499,
	0, 0, 1509, 3409, 0, 0, 1489, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 1506, 0,
	0, 0, 0, 0, 0, 1476, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 1460, 0, 1492, 1493, 1494, 1502,
	1503, 1504, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 1495, 1490, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 1508, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	1460, 0, 1492, 1493, 1494, 1502, 1503, 1504, 1461, 0,
	0, 0, 1500, 0, 0, 0, 0, 1481, 1495, 1490,
	0, 0, 0, 0, 1478, 0, 1462, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 1485, 1486, 1487, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1498, 0, 0, 1473,
	1474, 1480, 1501, 1479, 1475, 0, 1472, 1470, 1471, 1463,
	1464, 1465, 1466, 1468, 1469, 1499, 0, 0, 1509, 3408,
	0, 0, 1489, 1491, 0, 0, 0, 1484, 1485, 1486,
	1487, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1505, 0, 1506, 0, 0, 0, 0, 0,
	0, 1476, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 1509, 0, 0, 1497, 1489, 1491,
	0, 0, 0, 0, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	1506, 0, 0, 0, 1507, 0, 0, 1476, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 1460, 0, 1492, 1493,
	1494, 1502, 1503, 1504, 0, 0, 0, 0, 1500, 0,
	1488, 0, 0, 0, 1495, 1490, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 1508, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 0, 0, 0, 1500, 0, 0, 0, 0, 1481,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 0, 0, 1473, 1474, 1480, 1501, 1479,
	1475, 0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468,
	1469, 0, 0, 0, 0, 3298, 0, 0, 0, 0,
	0, 0, 0, 1484, 1485, 1486, 1487, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1498, 0,
	0, 1473, 1474, 1480, 1501, 1479, 1475, 0, 1472, 1470,
	1471, 1463, 1464, 1465, 1466, 1468, 1469, 1499, 0, 0,
	1509, 3199, 0, 0, 1489, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1506, 0, 0, 0,
	0, 0, 0, 1476, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	1495, 1490, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 1508, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 1460, 0,
	1492, 1493, 1494, 1502, 1503, 1504, 1461, 0, 0, 0,
	1500, 0, 0, 0, 0, 1481, 1495, 1490, 0, 0,
	0, 0, 1478, 0, 1462, 0, 0, 0, 0, 1508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	1485, 1486, 1487, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1498, 0, 0, 1473, 1474, 1480,
	1501, 1479, 1475, 0, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 1499, 0, 0, 1509, 3151, 0, 0,
	1489, 1491, 0, 0, 0, 1484, 1485, 1486, 1487, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1505, 0, 1506, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 1509, 0, 0, 1497, 1489, 1491, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 1506, 0,
	0, 0, 1507, 0, 0, 1476, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 1460, 0, 1492, 1493, 1494, 1502,
	1503, 1504, 0, 0, 0, 0, 1500, 0, 1488, 0,
	0, 0, 1495, 1490, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 1508, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 0, 1500, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 0, 0, 1473, 1474, 1480, 1501, 1479, 1475, 0,
	1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 0,
	0, 0, 0, 3150, 0, 0, 0, 0, 0, 0,
	0, 1484, 1485, 1486, 1487, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1498, 0, 0, 1473,
	1474, 1480, 1501, 1479, 1475, 0, 1472, 1470, 1471, 1463,
	1464, 1465, 1466, 1468, 1469, 1499, 0, 0, 1509, 3149,
	0, 0, 1489, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 1506, 0, 0, 0, 0, 0,
	0, 1476, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	1460, 0, 1492, 1493, 1494, 1502, 1503, 1504, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 1495, 1490,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 1508, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 1460, 0, 1492, 1493,
	1494, 1502, 1503, 1504, 1461, 0, 0, 0, 1500, 0,
	0, 0, 0, 1481, 1495, 1490, 0, 0, 0, 0,
	1478, 0, 1462, 0, 0, 0, 0, 1508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 1485, 1486,
	1487, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1498, 0, 0, 1473, 1474, 1480, 1501, 1479,
	1475, 0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468,
	1469, 1499, 0, 0, 1509, 3114, 0, 0, 1489, 1491,
	0, 0, 0, 1484, 1485, 1486, 1487, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1505, 0,
	1506, 0, 0, 0, 0, 0, 0, 1476, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	1509, 0, 0, 1497, 1489, 1491, 0, 0, 0, 0,
	0, 0, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1506, 0, 0, 0,
	1507, 0, 0, 1476, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504,
	0, 0, 0, 0, 1500, 0, 1488, 0, 0, 0,
	1495, 1490, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 1508, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 0,
	1500, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 1473, 1474, 1480, 1501, 1479, 1475, 0, 1472, 1470,
	1471, 1463, 1464, 1465, 1466, 1468, 1469, 0, 0, 0,
	0, 2911, 0, 0, 0, 0, 0, 0, 0, 1484,
	1485, 1486, 1487, 0, 0, 0, 0, 0, 0, 1467,
	3582, 0, 0, 0, 1498, 0, 0, 1473, 1474, 1480,
	1501, 1479, 1475, 0, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 1499, 0, 2516, 1509, 0, 0, 0,
	1489, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 1506, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3581, 0, 0, 0, 0, 0, 1459, 1460, 0,
	1492, 1493, 1494, 1502, 1503, 1504, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 0, 1495, 1490, 0, 0,
	0, 0, 2487, 0, 1462, 0, 0, 0, 0, 1508,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 0, 1500, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 1460,
	0, 1492, 1493, 1494, 1502, 1503, 1504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2488, 1495, 1490, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	1508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 1485, 1486, 1487, 0,
	0, 0, 0, 1461, 0, 1467, 0, 0, 0, 0,
	1498, 0, 1481, 1473, 1474, 1480, 1501, 1479, 1475, 1478,
	1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 1499,
	0, 0, 1509, 0, 0, 0, 1489, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 1506, 0,
	0, 0, 0, 0, 0, 1476, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 1485, 1486, 1487,
	0, 1497, 0, 0, 0, 0, 1467, 0, 2604, 0,
	1482, 2603, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	1499, 0, 0, 1509, 0, 0, 0, 1489, 1491, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 1506,
	0, 0, 0, 0, 0, 0, 1476, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 1488, 0,
	0, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 1507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 1500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2182, 0, 0,
	0, 0, 0, 0, 1459, 1460, 0, 1492, 1493, 1494,
	1502, 1503, 1504, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 1495, 1490, 0, 0, 0, 2181, 0,
	0, 1462, 0, 0, 0, 0, 1508, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 0, 0, 1500, 0, 0, 1498, 0, 1481, 1473,
	1474, 1480, 1501, 1479, 1475, 1478, 1472, 1470, 1471, 1463,
	1464, 1465, 1466, 1468, 1469, 1459, 1460, 0, 1492, 1493,
	1494, 1502, 1503, 1504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 1490, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 1508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1484, 1485, 1486, 1487, 0, 0, 0, 0,
	1461, 0, 1467, 0, 0, 0, 0, 1498, 0, 1481,
	1473, 1474, 1480, 1501, 1479, 1475, 1478, 1472, 1470, 1471,
	1463, 1464, 1465, 1466, 1468, 1469, 1499, 0, 0, 1509,
	0, 0, 0, 1489, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 1506, 0, 0, 0, 0,
	0, 0, 1476, 1477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 1485, 1486, 1487, 0, 1497, 0,
	0, 0, 0, 1467, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 0, 1499, 0, 0,
	1509, 0, 0, 0, 1489, 1491, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1506, 0, 0, 0,
	0, 0, 0, 1476, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 1488, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 830, 0, 0, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503, 1504,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	1495, 1490, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 1508, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 0,
	1500, 0, 0, 1498, 0, 1481, 1473, 1474, 1480, 1501,
	1479, 1475, 1478, 1472, 1470, 1471, 1463, 1464, 1465, 1466,
	1468, 1469, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 1490, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	1485, 1486, 1487, 0, 0, 0, 0, 1461, 0, 1467,
	0, 0, 0, 0, 1498, 0, 1481, 1473, 1474, 1480,
	1501, 1479, 1475, 1478, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 1499, 0, 0, 1509, 0, 0, 0,
	1489, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 1506, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 1485, 1486, 1487, 0, 1497, 0, 0, 0, 0,
	1467, 0, 0, 0, 1482, 2610, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 1499, 0, 0, 1509, 0, 0,
	0, 1489, 1491, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 1506, 0, 0, 0, 0, 0, 0,
	1476, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 1488, 0, 0, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 1460,
	0, 1492, 1493, 1494, 1502, 1503, 1504, 2899, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 1495, 1490, 0,
	0, 0, 2605, 0, 0, 1462, 0, 0, 0, 0,
	1508, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 0, 0, 0, 1500, 0, 0,
	1498, 0, 1481, 1473, 1474, 1480, 1501, 1479, 1475, 1478,
	1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469, 1459,
	1460, 0, 1492, 1493, 1494, 1502, 1503, 1504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 1490,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 1485, 1486, 1487,
	0, 0, 0, 0, 1461, 0, 1467, 0, 0, 0,
	0, 1498, 0, 1481, 1473, 1474, 1480, 1501, 1479, 1475,
	1478, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469,
	1499, 0, 0, 1509, 0, 0, 0, 1489, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 1506,
	0, 0, 0, 0, 0, 0, 1476, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 1485, 1486,
	1487, 0, 1497, 0, 0, 0, 0, 1467, 0, 0,
	0, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	0, 1499, 0, 0, 1509, 0, 0, 0, 1489, 1491,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	1506, 0, 0, 0, 0, 0, 0, 1476, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 1488,
	0, 0, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 1460, 0, 1492, 1493,
	1494, 1502, 1503, 1504, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 1495, 1490, 0, 0, 0, 2558,
	0, 0, 1462, 0, 0, 0, 0, 1508, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 0, 0, 0, 1500, 0, 0, 1498, 0, 1481,
	1473, 1474, 1480, 1501, 1479, 1475, 1478, 1472, 1470, 1471,
	1463, 1464, 1465, 1466, 1468, 1469, 1459, 1460, 0, 1492,
	1493, 1494, 1502, 1503, 1504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 1490, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 1508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 1485, 1486, 1487, 0, 0, 0,
	0, 1461, 0, 1467, 0, 0, 0, 0, 1498, 0,
	1481, 1473, 1474, 1480, 1501, 1479, 1475, 1478, 1472, 1470,
	1471, 1463, 1464, 1465, 1466, 1468, 1469, 1499, 0, 0,
	1509, 0, 0, 0, 1489, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1506, 0, 0, 0,
	0, 0, 0, 1476, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 1485, 1486, 1487, 0, 1497,
	0, 0, 0, 0, 1467, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 1499, 0,
	0, 1509, 0, 0, 0, 1489, 1491, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 1506, 0, 0,
	0, 0, 0, 0, 1476, 1477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 0, 1488, 0, 0, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 1507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 0,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503,
	1504, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 1495, 1490, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 1508, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 0, 0,
	0, 1500, 0, 0, 1498, 0, 1481, 1473, 1474, 1480,
	1501, 1479, 1475, 1478, 1472, 1470, 1471, 1463, 1464, 1465,
	1466, 1468, 1469, 1459, 1460, 0, 1492, 1493, 1494, 1502,
	1503, 1504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 1485, 1486, 1487, 0, 0, 0, 0, 1461, 0,
	1467, 0, 0, 0, 0, 1498, 0, 1481, 1473, 1474,
	1480, 1501, 1479, 1475, 1478, 1472, 1470, 1471, 1463, 1464,
	1465, 1466, 1468, 1469, 1499, 0, 0, 1509, 0, 0,
	0, 1489, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 1506, 0, 0, 0, 0, 0, 0,
	1476, 1477, 1459, 1460, 0, 1492, 1493, 1494, 1502, 1503,
	1504, 1484, 1485, 1486, 1487, 0, 1497, 0, 0, 0,
	0, 1467, 1490, 0, 0, 1482, 0, 0, 0, 1462,
	0, 0, 0, 0, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 0, 1499, 0, 0, 1509, 0,
	0, 0, 1489, 1491, 0, 0, 0, 1461, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 1505, 1478, 1506, 0, 0, 0, 0, 0,
	0, 1476, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 0,
	0, 0, 0, 1488, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 1507, 0, 0, 0, 0, 0,
	1484, 1485, 1486, 1487, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1675, 1499, 0, 0, 1509, 0, 0,
	0, 1489, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 1477, 1483, 1692, 1669, 1676, 1659, 1702, 1701, 0,
	0, 1661, 1660, 0, 0, 0, 1497, 0, 0, 1712,
	1713, 0, 0, 0, 0, 1482, 0, 0, 1500, 0,
	0, 1498, 0, 0, 1473, 1474, 1480, 1501, 1479, 1475,
	0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1703, 0, 1699, 1698, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1697, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 1696, 1694, 1695, 0, 0,
	0, 0, 1498, 0, 0, 1473, 1474, 1480, 1501, 1479,
	1475, 1483, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468,
	1469, 0, 0, 0, 0, 0, 0, 0, 1671, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 1685, 1674,
	1687, 1689, 1690, 1691, 1686, 0, 1679, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1708, 1709, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1663, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1700, 0, 0, 0,
	1672, 0, 1673, 0, 0, 0, 0, 0, 0, 0,
	0, 1498, 0, 0, 1473, 1474, 1480, 1501, 1479, 1475,
	0, 1472, 1470, 1471, 1463, 1464, 1465, 1466, 1468, 1469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1693, 0, 0, 0, 1682, 1680, 1681, 1684,
	1683, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1664, 1665, 1667, 1668, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1688, 1666,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1711,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1662, 0, 0, 1704, 1705,
	1706, 1707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1670, 0,
	0, 0, 0, 1677, 1710,
}
var sqlPact = [...]int{

	3944, -1000, -1000, -1000, -1000, -1000, -1000, 229, 211, 210,
	196, 195, 194, 192, 191, -1000, -1000, -1000, 189, -1000,
	-1000, 186, -1000, 184, 172, 165, 164, -1000, 163, 162,
	161, -1000, -1000, -1000, -1000, 159, 158, 157, 53621, 1850,
	65119, 56587, 1760, 48075, 64691, 47647, 64263, 63835, 155, -1000,
	63407, 154, 152, 151, -1000, -1000, 149, 2241, 39047, 145,
	144, 137, 1849, 136, 130, -1000, 128, -1000, 9450, 1288,
	-1000, 126, 124, -1000, 6412, 295, 55737, 2253, 114, 113,
	38618, 2249, 2272, -1000, -1000, 1696, -1000, -1000, 112, 110,
	105, 102, 97, 96, 95, 94, 92, -1000, 91, 87,
	86, 84, 83, 79, 77, -1000, 76, 74, 73, 71,
	69, 68, 67, 64, 63, 62, 61, -1000, 364, 1561,
	1436, 1419, 1417, 1410, 1433, 885, 59, 57, 56, 55,
	54, 53, 52, -1000, -1000, 51, 50, 49, 48, -1000,
	47, 44, 171, 43, 42, 41, 40, 39, 3628, 2286,
	1375, 944, 19037, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 69339, 65541, 36, -147,
	33, -1000, 2591, 825, 32184, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 476, -1000, -1000, -1000, 299,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1637, 687, -1000, -1000, -1000, 62979,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1847, -121,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 686, -1000, 1842,
	140, 1764, -1000, -1000, -1000, -1000, -1000, 65541, -1000, -1000,
	2936, 2934, 1707, 685, 62557, -1000, 1508, -1000, 829, 21755,
	-1000, 1025, -1000, 21755, 294, -1000, -1000, -1000, -1000, -1000,
	47219, 15421, 46791, 46363, 42953, 62129, 14983, 53199, 1081, -1000,
	-1000, -1000, -1000, -1000, 2, 40325, 65541, -1000, 286, -1000,
	-1000, -1000, -1000, -1000, -1000, 28201, 817, 27738, 551, 27275,
	429, -1000, -1000, -1000, -1000, 2928, 2927, 1004, 2925, 2525,
	68917, 1477, 2923, 1465, 1077, 943, 2912, 2911, 2908, 2906,
	2905, 2904, 2902, 1203, 61701, 2320, 1411, 42515, 42077, 53621,
	53621, 2083, 61273, 1140, 1131, -1000, -1000, -1000, -1000, -1000,
	-1000, 2399, 2264, 2261, 52771, -1000, -1000, 2901, 2900, 2898,
	2897, 2896, 68495, 1476, 2892, 2010, 2890, 2887, 2885, 2884,
	2883, 2882, 2880, 2879, 2878, -1000, 52343, 51915, 51487, 51059,
	60845, 41639, 41201, -1000, -1000, -1000, 33892, 6912, 5392, 60417,
	35206, 53621, 53621, -1000, -1000, 28652, -9, -1000, -1000, -1000,
	2277, -1000, 28652, -9, -1000, 65541, -1000, 2310, 1511, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2238, 1390,
	2750, 40763, 1692, 1187, 2398, 2395, 1299, 2045, 2394, 2389,
	2373, 2362, 2357, 1435, 2018, 372, 18574, 1304, 1293, 2347,
	2346, 2774, 1706, 45935, 2877, 2875, 2563, 2341, 2337, 2274,
	-1000, -1000, -1000, -1000, 1239, -1000, -1000, 48497, -1000, -1000,
	986, -1000, -1000, 986, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1078, 67651, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1335,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2056, -1000,
	1645, -1000, -1000, 1880, 1448, 2286, 1981, 2565, 2565, 2565,
	2640, 466, 446, -1000, 171, -1000, -1000, 75435, -1000, -1000,
	28652, 28652, 28652, 28652, 28652, 1644, -1000, 684, -1000, -1000,
	716, -1000, 683, 636, -1000, -1000, -1000, -1000, -1000, -1000,
	681, 2780, -1000, 887, -1000, -1000, -1000, -1000, 2714, -1000,
	17660, -1000, -1000, -1000, 427, 680, 28652, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 279, 846, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 607,
	1556, 604, 604, 604, -1000, -1000, 925, -1000, -1000, -1000,
	304, 603, 300, 602, -1000, -1000, -1000, -1000, 2304, 679,
	678, -1000, 677, 674, 672, -1000, -1000, -1000, 671, 670,
	669, 668, 666, 665, 664, 662, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 924, -1000, 661, 660, 659, 656, 654,
	653, 652, 650, 649, -1000, -1000, 1, 65541, -1000, 476,
	1, -1000, -1000, 647, -1000, 22206, 22206, 22206, -1000, -1000,
	1839, 28652, -1000, 2532, -1000, 517, 5, 798, 33036, -1000,
	31328, 798, 723, 36486, -1000, 2268, -1000, -1000, 646, 270,
	-1000, -1000, 2267, 65541, 15857, 65541, 53621, 53621, 53621, 2472,
	28652, -1000, -1000, 39899, 65541, 54043, 2701, 76089, 39899, 65541,
	2298, -1000, -1000, -1000, 65541, -1000, 28652, -1000, 2698, 1322,
	43815, 2662, -19, -1000, -1000, -1000, -1000, -1000, -1000, 1988,
	2012, 1009, 1879, 1557, -1000, 21755, 2518, -1000, -1000, -1000,
	261, 15857, -1000, 1986, 2451, 1215, -1000, 1873, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1507, 2449, -1000, 3679,
	2448, 1502, -1000, -1000, 897, 2447, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1751, -1000, -1000, 2559, -1000,
	-1000, 1693, 2434, 14, -1000, -1000, 34334, 40325, -1, -1000,
	-1000, -42, -1000, 14545, 75435, -1000, -1000, -1000, 75435, 800,
	-1000, -1000, 2426, -1000, 75435, 799, -1000, -1000, 2423, -1000,
	-1000, -1000, 2874, -1000, 2873, 1942, 2872, 2871, 2869, -1000,
	1387, 1553, 2868, -1000, 2867, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 50631, 1834, -1000, -1000, 49775, 50203, 938, -1000,
	866, 1941, -1000, -1000, 1940, -1000, 802, -1000, 2866, 59989,
	2128, 866, 1939, -1000, -1000, -1000, -1000, -1000, 53621, -1000,
	53621, -1000, 53621, -1000, 1315, -1000, 68073, 5, -1000, -1000,
	-1000, -1000, -1000, 2421, 2864, 2861, 2860, -1000, 65541, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 177, 2415,
	-1000, -1000, 177, 2414, -1000, 177, 2411, -1000, 169, 2410,
	-1000, -1000, 1757, 2408, -1000, -90, 2406, -1000, -1000, -90,
	2405, -1000, -16, -1000, -1000, -1000, 825, -1000, 33464, -1000,
	33464, 59561, 43389, 858, 645, 38190, 75435, -1000, 34334, 75435,
	-1000, 43389, 49775, -1000, 59133, 49353, -1000, -1000, 1202, 2040,
	-1000, -1000, -1000, -1000, 43389, 43389, 43389, -1000, 58705, -1000,
	1670, 1423, 2566, 53621, -1000, 1649, -1000, -1000, -1000, 2581,
	2297, -1000, 39473, 55309, -1000, 54887, -1000, 54465, -1000, 53621,
	-1000, 53621, -1000, 2857, 2856, 2850, -1000, 2844, 2573, 75435,
	2568, -1000, 2353, 1442, 1427, 65541, -1000, -1000, 65541, -1000,
	65541, -1000, -1000, -1000, 1980, -1000, -1000, -1000, -1000, 53621,
	-1000, -1000, -1000, -1000, -1000, -1000, 2295, -1000, 1368, -1000,
	1608, -1000, 1174, -1000, -1000, 178, -1000, -1000, -19, -1000,
	67651, -1000, -1000, 2286, 1981, -1000, 65541, -1000, 1366, 53621,
	-1000, 2025, -1000, 1281, -1000, 2286, 1860, 2068, 26812, 2072,
	28652, 171, -1000, -1000, 171, 171, 21304, -1000, -1000, 76089,
	76089, 15857, 1122, 28652, 28652, 28652, 28652, 28652, 28652, 28652,
	28652, 28652, 28652, 28652, 28652, 28652, 28652, 28652, 28652, 28652,
	28652, 28652, 28652, 28652, 28652, 28652, 28652, 28652, 28652, 28652,
	28652, 28652, 28652, 28652, 28652, 28652, 28652, 28652, 1793, 28652,
	1076, 28652, 28652, 28652, 28652, 1546, -1000, -1000, 1609, 505,
	1624, -1000, 2733, 2733, 2733, 75802, 75802, 594, 2843, 716,
	-1000, 28652, -1000, -9, 28652, 16295, -1000, 2764, 1182, -1000,
	-1000, 446, 9646, 1901, -1000, 445, 16758, -1000, -1000, -1000,
	17660, 636, 26349, 28652, 914, 75435, 14109, 2271, 2174, -1000,
	2760, -1000, -1000, 2747, -1000, -1000, -1000, -1000, 2747, 1110,
	1098, 2759, -1000, 2747, 2747, 632, 771, 770, 763, 744,
	727, 28652, 28652, 28652, 28652, 28652, 28652, 28652, 28652, -1000,
	25898, 25435, 24972, 30005, 24509, 28652, 18111, 24046, 23583, 65541,
	1, 2695, 28652, 139, -1000, 74253, -1000, 139, 139, 631,
	-24, 75435, 2048, 2048, 32610, 1885, 1703, 1703, 1703, -1000,
	630, 704, 30, 28, 22, -1000, -1000, 21, 20, 798,
	10605, 57009, 1714, 798, 798, 258, 297, 441, 30902, 2532,
	57009, -1000, -1000, 53621, 619, 16295, 15857, 1217, -25, 253,
	2060, 2054, 2053, -1000, 2050, 1385, -33, 1074, -47, -1000,
	4632, -48, -1000, 1133, -1000, -1000, -1000, 314, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 920, 609, 608, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 607, 1556, 604, 604,
	604, -1000, -1000, -1000, 304, 603, 300, 602, -1000, -1000,
	-1000, -1000, -1000, -1000, 2266, -42, 54043, 792, -50, 1008,
	-19, -1000, -1000, -1000, 43815, 986, -1000, 1367, -1000, -1000,
	-1000, -1000, -1000, -1000, 1206, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2779, -1000, 2741, -1000, -1000, 2756, 0, -1000,
	-1000, 15857, -1000, -21, 1405, -1000, 45507, 2570, 2553, 2536,
	1301, -1000, 1242, 2638, 48497, 2671, 2680, 741, -1000, 2265,
	-1000, -1000, 828, 1358, 1071, 48497, 3679, -1000, 76089, -1000,
	2114, 2635, 1200, 1176, 1200, 1200, 1210, -1000, 48497, 1070,
	1591, 43389, -1000, 1067, -1000, -26, 2666, 2676, 560, -1000,
	2262, 1063, -1000, -1000, 53621, 15857, 793, -1000, 43389, -1,
	40325, 65541, 252, -1000, 28652, -9, 28652, -9, -1000, -1000,
	2404, -1000, -1000, -1000, 2842, 1538, 2008, -1000, -1000, -1000,
	596, 1937, 2259, 65541, 2064, -8, 53621, -1000, 3679, 1936,
	-1000, -1000, 48925, -1000, 1586, -1000, 2401, 2400, 595, 2841,
	-1000, 1833, 1935, -1000, -1000, -1000, 67229, 1083, 2388, 971,
	597, 2694, 597, 37338, -1000, 65541, -1000, 65541, -1000, -1000,
	-1000, 2836, -1000, 53621, -1000, -1000, 53621, -1000, 53621, -1000,
	53621, -1000, 53621, 53621, -1000, 65541, 43389, 43389, 43389, 368,
	44663, -55, -57, 439, -1000, 58283, 65541, 970, 45085, 65541,
	2504, -210, -1000, 858, 858, 793, -1000, 793, -1000, 53621,
	2293, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2833, 2832,
	-1000, 861, 53621, 65541, 53621, -1000, -1000, 65541, -1000, 65541,
	-1000, 861, 65541, 861, 65541, 861, 65541, -1000, -1000, -1000,
	-1000, -1000, -1000, -9, 28652, 1326, -1000, 2289, -1000, 2287,
	-1000, 25, -1000, -1000, -1000, -1000, 1918, 53621, 53621, 53621,
	53621, 65541, 53621, -1000, 48497, -1000, -1000, 2286, -1000, -1000,
	1972, -1000, -2, 987, -1000, -1000, -1000, -1000, -1000, 75435,
	473, -1000, -1000, 75435, 1446, 2073, -1000, 2073, -6, -1000,
	73886, 2024, 53621, -1000, -1000, -1000, -1000, -1000, 826, 1072,
	1072, 1091, 1091, 1091, 1091, 2687, 1672, 424, 1051, 7395,
	7395, 6471, 6471, 6471, 6471, 6471, 7395, 391, 552, 552,
	391, 391, 391, 391, 391, 552, 552, 552, 7395, 7395,
	7395, 75802, 75721, 7944, 28652, 28652, 1059, 1552, 505, 7451,
	28652, 5717, 5717, 5717, 5717, -1000, 1330, -1000, -1000, -1000,
	-1000, 2258, 593, 30005, 30005, -1000, -1000, -1000, -1000, 17209,
	28652, -1000, -1000, -1000, -1000, 23120, -1000, -1000, 73314, -253,
	438, -197, -7, -1000, 28652, 28652, 28652, 437, -1000, 435,
	-1000, -1000, 1058, -1000, 1057, 1056, 1052, -1000, 585, 249,
	28652, 65541, -1000, 70867, 701, -60, -1000, -67, 1230, -1000,
	28652, 245, -1000, 1674, 584, 579, 434, -69, -1000, 431,
	815, 813, 422, 412, 403, 28652, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 75354, 70785, 70524, 70236,
	9170, 70190, 10123, -70, 400, -1000, 2257, -197, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 398, -1000, 397, -1000,
	75068, -197, 396, 3629, -1000, 30005, 30005, 30005, -1000, 395,
	-1000, 73967, -1000, 74987, 22669, 22669, 22669, 392, 74701, 28652,
	-197, -75, -1000, -76, -1000, -1000, 575, -78, 907, 22206,
	31756, 15857, -1000, 907, 907, 28652, -1000, 28652, 2043, -1000,
	-1000, -1000, 2042, 3713, 2048, 32610, -1000, -1000, -1000, -1000,
	57009, 634, 798, -1000, -1000, -1000, -1000, -1000, 57009, -1000,
	2714, 2121, -1000, -1000, -1000, 65541, 476, -1000, 57009, 57009,
	15857, 798, -1000, 390, 35632, -7, 244, -1000, -1000, 15857,
	2140, 2140, 2140, 2140, -1000, -1000, 65541, 2713, -1000, 1566,
	-1000, 76089, -1000, 713, 1040, -1000, 2754, 571, -1000, 2747,
	2747, 65541, 107, 21755, -1000, 986, -1000, -1000, 1332, -1000,
	1539, -1000, 1089, -1000, -1000, -1000, 21755, -1000, 1805, 65541,
	65541, 53621, -1000, -1000, 1931, 66807, 1930, 76089, 65541, -1000,
	-1000, 570, 569, 2023, 2022, 65541, 65541, 66385, 65963, 65541,
	1768, 28652, 1835, 1403, -9, -9, -1000, -1000, -9, 556,
	1159, 53621, 53621, 53621, 1481, -1000, -1000, -1000, -1000, -1000,
	53621, -1000, -1000, 2752, -1000, 1200, -1000, -1000, -1000, 1200,
	3679, 1480, 53621, 43389, 893, 65541, 1594, -9, -9, -1000,
	-1000, -9, 555, 15857, 1558, -1000, 2137, -1000, -83, -1000,
	-1000, 13673, 75435, -1000, 75435, -1000, 65541, -1000, 933, 65541,
	45085, 843, 2385, 36912, -42, 858, 43389, 53621, -8, -1000,
	3679, 2382, 476, -1000, -1000, 43389, 43389, 43389, 2830, 554,
	2827, -1000, 53621, 2378, 1831, 1909, 2458, 736, 65541, 907,
	32610, 1537, -1000, 36060, 952, 65541, 1438, 99, -1000, -1000,
	-1000, 38, 65541, -1000, 2826, -1000, -1000, 177, 177, 177,
	-1000, 169, 1757, -1000, -90, -90, -1000, -1000, 368, 368,
	858, -11, 542, -1000, 784, 780, 34770, 43389, -91, -1000,
	-1000, -1000, -1000, -1000, 53621, 65541, 657, 2124, 65541, -92,
	-1000, 240, 541, -1000, 858, 34334, 2256, -1000, -1000, 892,
	-1000, 1163, -1000, -1000, -1000, -1000, -1000, -1000, 13, -42,
	-42, -1000, 861, -1000, 861, -1000, 861, -1000, 75435, -1000,
	1325, 1307, 65541, -1000, 15857, 65541, 53621, 15857, 53621, 2284,
	2283, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1446,
	-1000, 28652, -1000, -1000, -1000, 21304, 1884, -1000, -1000, 53621,
	9, 28652, 28652, 6185, 6151, 28652, 30005, 30005, -1000, 28652,
	4984, -1000, -1000, -1000, -1000, -1000, 2254, 538, 28652, 76089,
	5569, 4915, -1000, 375, 9794, 391, -1000, 28652, -1000, 366,
	20853, -1000, 74334, -49, -94, -1000, 2775, 1955, 1704, 1487,
	1374, 2751, 13237, -197, -100, -1000, -1000, 712, -1000, 2367,
	-1000, 28652, 74620, 12801, -1000, 37764, 909, 1697, -1000, -1000,
	2747, 814, -1000, -1000, -1000, 814, -1000, 73268, 76089, 76089,
	28652, 28652, -1000, 28652, 28652, 28652, -1000, -1000, 28652, -1000,
	-1000, 2251, 28652, -1000, 76089, 76089, 30005, 30005, 30005, 30005,
	30005, 30005, 30005, 30005, 30005, 30005, 30005, 30005, 30005, 30005,
	30005, 30005, 30005, 30005, 30005, 2009, 30005, 2729, 2729, 2729,
	-1000, 2281, 2251, 28652, 28652, 76089, 365, 363, 362, -1000,
	28652, -197, -1000, -1000, 368, -1000, 2170, -1000, 28652, -1000,
	-205, -1000, 2532, -1000, -1000, 2170, 2170, -102, 75435, 32610,
	32610, -1000, 537, 28652, 2038, -1000, 700, -1000, -107, -1000,
	57009, -1000, 694, -249, -1000, 772, -1000, -1000, -1000, -1000,
	476, -1000, -1000, -1000, 236, 57009, -1000, -108, -1000, 2691,
	361, 15857, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -42,
	1733, 2770, -1000, 2748, 711, 693, 360, 2747, 359, 358,
	-42, 65541, -1000, -19, -1000, -1000, -1000, 28652, -1000, -1000,
	2546, 1050, 1048, -1000, 2375, -1000, 1908, -1000, 959, -1000,
	1373, -1000, 28652, 28652, 535, 534, 1590, 2822, 2372, 1757,
	2369, 1757, -1000, -1000, 838, -1000, 75435, 532, 529, -1000,
	-21, 1404, 889, -1000, -1000, 28652, 28652, 57857, -1000, 374,
	2559, 6, -1000, 1034, -1000, -1000, -1000, 3679, 1024, -1000,
	-1000, 1581, -1000, -1000, 869, -1000, -1000, 28652, -1000, -26,
	1023, 858, 2248, -1000, -1000, 2812, 2811, 2809, 357, -109,
	-27, 76089, 2688, 1855, 65541, 53621, 824, -1000, 2714, -1000,
	-1000, -1000, 53621, 2686, -1000, 866, -1000, -1000, 2806, -1000,
	968, 15857, 53621, 2365, 1992, 736, 44241, -1000, 866, 1697,
	-89, -1000, 1438, 20390, 2555, -115, -1000, -1000, -1000, 907,
	37338, 32610, 28652, 2803, -116, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 57435, 57435, 43389, 43389, 43389, 858,
	65541, 65541, 45085, 2802, 528, 65541, 65541, 527, -1000, 65541,
	65541, 2801, 43389, -1000, -1000, -9, -1000, 1731, 53621, 12365,
	-1000, -1000, -1000, -1000, -1000, 861, -1000, -1000, 1598, 1864,
	1598, 1416, 1413, 1781, 72982, -1000, -1000, 2080, 2586, 15857,
	2642, 5717, 28652, 28652, 3800, 1038, 462, 5717, 28652, 28652,
	76089, 75921, -118, 28652, 28652, -1000, 28652, 692, 75435, 2769,
	28652, 355, 354, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 353, -1000, -1000, -1000, -1000, -1000, 75435, 28652,
	234, -1000, -1000, -1000, 69761, -1000, 28652, 351, 349, -1000,
	-1000, -1000, 347, 344, 4818, 8771, 72696, 72650, 72364, 75435,
	2281, 75435, -1000, -1000, 1079, 1079, 1158, 1158, 1158, 1158,
	2729, 1234, 1718, 215, 862, 862, 862, 1711, 620, 620,
	862, 862, 862, 2236, 2020, 525, 3710, -1000, -1000, 75435,
	75435, 343, -1000, -1000, -1000, -197, 327, 2166, 2634, 75435,
	-1000, 32610, 2166, 2166, -1000, -1000, 3713, 65541, 75435, 32610,
	5, -1000, 2714, -1000, -1000, 2121, -1000, 11053, -1000, 15857,
	-1000, -1000, 35632, -1000, 523, -1000, 231, -1000, -1000, 691,
	2793, 708, -1000, 326, -1000, -1000, -42, 75435, 65541, 65541,
	65541, 2356, -1000, 4208, -1000, 72078, -123, -1000, 73886, 28652,
	65541, -1000, 1653, 2055, 998, -1000, 65541, -1000, 65541, -1000,
	-1000, 65541, 65541, 53621, 2348, -124, 75435, -68, -1000, 757,
	-1000, 1189, -1000, 11929, 53621, 53621, 43389, 2343, -125, 15857,
	-1000, 43389, -1000, -1000, -1000, 2113, -1000, 56159, 1785, -9,
	-1000, 2792, 520, -1000, 1710, -1000, 689, 3679, -9, -1000,
	-1000, 519, 65541, 1830, 518, 15857, 1998, 736, 44241, -1000,
	1083, 2068, -1000, -88, -1000, 524, -9, 1697, -1000, -89,
	75435, -1000, 743, -1000, -126, -1000, -1000, 323, -1000, 2503,
	2500, -1000, -1000, 28652, 516, 515, 65541, 2497, -1000, -1000,
	-132, -1000, 1928, -1000, -1000, -1000, -1000, -1000, 15857, 1340,
	-1000, 511, 510, -1000, -1000, -1000, -1000, -1000, 2586, 5717,
	5717, 28652, 28652, 28652, 5717, 75921, -135, -1000, 5717, 5717,
	-197, -1000, -1000, 74334, -1000, -1000, -1000, 75435, 11493, 1610,
	-1000, 72032, -1000, -1000, -1000, -1000, 28652, 28652, -1000, -1000,
	-1000, -1000, -1000, 30005, 2220, 508, 76089, -1000, -1000, 854,
	28652, 28652, 2532, 854, 854, -1000, -146, -1000, 798, -1000,
	-1000, -1000, 2714, 231, -1000, 2791, 15857, 706, -1000, 2790,
	-1000, -1000, -1000, -1000, 65541, -1000, 65541, -1000, 15857, 65541,
	2201, 1897, -1000, -1000, 2021, 506, 30005, 53621, 501, 2212,
	1522, 28652, 1884, -148, -151, 1892, -1000, -1000, 1890, 28652,
	-1000, 76089, 1757, 1757, -153, -154, -1000, 28652, 1021, 65541,
	19939, -1000, 2789, 2559, -1000, -1000, -1000, 28652, 1020, -1000,
	-90, 1594, 2145, -1000, -1000, -1000, -1000, 2017, -1000, -1000,
	65541, 2016, 859, -1000, 45085, 843, 848, -1000, -1000, -1000,
	28652, -1000, 53621, 28652, 1829, -1000, 736, 44241, -1000, 2458,
	1438, -1000, 2464, 65541, 2533, -1000, 2068, 505, -1000, 858,
	504, 503, -156, 28652, 28652, -159, 500, 858, -105, -1000,
	768, 761, -1000, -1000, 53621, 53621, 28652, 28652, -1000, 5717,
	5717, 5717, -1000, 321, -1000, -1000, 1697, 2628, -1000, 71746,
	71460, 853, 30005, 76089, -161, -1000, 65541, 75435, -197, -1000,
	-1000, -1000, 57009, 393, -1000, 2786, -1000, -1000, 2463, -1000,
	-1000, -1000, 65541, 1904, -1000, -1000, 28652, 3710, 498, 28652,
	-1000, -1000, 2095, 2221, 2113, 495, -1000, -1000, -1000, -1000,
	-1000, 1533, -1000, -1000, 75435, 2589, -1000, -1000, 491, 489,
	75435, 487, 735, 2211, -1000, -1000, -1000, 75435, 486, 843,
	-1000, 1635, 1785, 485, -1000, -1000, -1000, 2097, 319, 2685,
	848, -1000, 2742, -1000, -162, 968, -164, 53621, 44241, -1000,
	1992, -1000, 1142, -167, 65541, 1438, -1000, -1000, 43389, 43389,
	1522, -172, -175, -1000, 43389, -1000, 1928, -1000, 65541, -1000,
	65541, -1000, -1000, -177, -180, -1000, 1780, 28652, -1000, -1000,
	853, -183, -1000, -182, -1000, 2675, -1000, -1000, -1000, -1000,
	-1000, 2352, 71414, 1967, 65541, 71128, 2214, -1000, -1000, 1594,
	65541, 53621, 966, 15857, 1598, 1598, 28652, 19488, 1625, 28652,
	-1000, 53621, 65541, -1000, 2496, 2113, -9, -1000, -1000, 1522,
	482, 1522, 480, -1000, 1998, 1300, -1000, 907, -1000, -1000,
	-185, -186, 2113, 1522, -1000, -188, -1000, -194, -199, -1000,
	-1000, 311, 29554, 29554, 29554, -197, -1000, 65541, 479, 2335,
	-1000, 1802, 1626, 308, 969, -1000, -1000, 2212, -207, 476,
	-1000, 28652, -1000, -208, -1000, 949, -209, -1000, 948, -216,
	-1000, 2202, -1000, -217, 472, -218, -1000, -1000, -1000, 1594,
	859, 2113, 28652, 2113, 28652, -1000, 37338, -1000, 858, 858,
	1594, 2113, 858, -1000, -1000, -1000, 2358, -1000, 30456, 1754,
	1406, 73600, 2358, 2358, -1000, -1000, 65541, -1000, 1820, 1819,
	1285, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1967,
	75435, -1000, 1598, 2144, -1000, 1598, 2191, -1000, 1614, -1000,
	65541, -1000, 65541, 843, -1000, 1594, -219, 1594, -224, -202,
	-1000, -1000, -1000, 1594, -1000, -1000, 1457, 2681, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2476, -1000, 974,
	1679, 1679, 1802, -1000, 470, -1000, 469, -1000, -225, -1000,
	-1000, 903, 1522, 903, 1522, -1000, -1000, 1392, -1000, -1000,
	1681, 29103, -1000, 2693, -1000, -1000, 2037, -1000, 2212, 28652,
	28652, 1705, -1000, 2784, 2113, -1000, 2113, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -227, -232, -1000, -1000, -1000, -1000,
	1594, 1594, 1594, 1018, 903, 903, -1000, 463, -1000, -1000,
	28652, -239, 1594, -1000,
}
var sqlPgo = [...]int{

	0, 3444, 3441, 3438, 3437, 3435, 3430, 3428, 3426, 3424,
	3419, 3418, 3417, 3415, 3414, 3413, 3410, 3408, 3407, 3405,
	3404, 3400, 3397, 3394, 3393, 3392, 3391, 3388, 3387, 3386,
	3383, 3381, 3380, 3377, 3376, 3375, 3374, 3373, 3372, 3370,
	3369, 3368, 3367, 3366, 3365, 3361, 3359, 3358, 30, 3357,
	3356, 3354, 3353, 3352, 3351, 3349, 3348, 3347, 3345, 3343,
	3342, 3341, 3340, 3337, 3334, 3333, 35, 3332, 210, 3331,
	3330, 3329, 3326, 3325, 3324, 3321, 3310, 3306, 3305, 209,
	3303, 222, 3299, 3295, 3294, 3292, 3284, 208, 3283, 3282,
	3280, 3278, 3276, 3275, 3273, 3272, 119, 3270, 3269, 189,
	3268, 3267, 3263, 3261, 3260, 3254, 3252, 3251, 3247, 3244,
	183, 3240, 207, 3238, 3237, 3234, 3233, 3232, 3229, 3226,
	3218, 3216, 3215, 3211, 3210, 3206, 3204, 3203, 3202, 3201,
	3199, 3197, 3191, 3188, 3186, 3184, 3183, 3180, 3179, 3176,
	204, 149, 3174, 3173, 206, 203, 3172, 3171, 97, 93,
	68, 3169, 98, 124, 186, 6955, 184, 3168, 3167, 3166,
	145, 3165, 3163, 3162, 3159, 63, 62, 135, 133, 125,
	121, 267, 3157, 3154, 74, 58, 31, 28, 102, 3153,
	3152, 3151, 2515, 91, 3149, 3148, 200, 182, 3147, 1791,
	3146, 134, 75, 111, 90, 92, 3143, 118, 21, 3142,
	156, 38, 3140, 122, 72, 34, 5098, 7183, 3137, 80,
	216, 83, 191, 171, 160, 163, 153, 131, 600, 3135,
	188, 3132, 96, 151, 3129, 3126, 3125, 57, 144, 78,
	3122, 1, 6, 170, 25, 89, 14, 3121, 12, 3120,
	3114, 3113, 3108, 22, 126, 3106, 123, 66, 3105, 23,
	3104, 64, 165, 3100, 168, 94, 3095, 3094, 193, 154,
	157, 3093, 13, 175, 3091, 3088, 3085, 3084, 3083, 103,
	17, 100, 3082, 3081, 108, 180, 3079, 43, 3078, 130,
	76, 116, 213, 129, 169, 87, 167, 138, 174, 3077,
	3074, 3070, 147, 3068, 3064, 115, 164, 3060, 3055, 215,
	33, 52, 176, 53, 3052, 117, 3050, 152, 3049, 3047,
	3043, 214, 136, 159, 7, 70, 101, 27, 9, 179,
	110, 85, 86, 3041, 3061, 1603, 1625, 3039, 109, 88,
	49, 95, 114, 199, 60, 3038, 3028, 1158, 3027, 3026,
	3021, 3020, 139, 3018, 3016, 3015, 107, 37, 55, 3014,
	120, 69, 10, 140, 202, 84, 166, 143, 190, 3013,
	137, 3012, 40, 106, 3010, 148, 187, 172, 3008, 357,
	128, 3007, 162, 3006, 3005, 3004, 3003, 99, 3002, 2998,
	289, 2997, 113, 2996, 2995, 142, 112, 127, 73, 29,
	2994, 61, 150, 2993, 146, 54, 2992, 212, 50, 0,
	6661, 5324, 5691, 2991, 382, 2990, 161, 105, 2989, 2988,
	2987, 79, 2986, 56, 2985, 2984, 36, 2983, 15, 4,
	8, 18, 16, 1614, 326, 2982, 2976, 82, 104, 195,
	2974, 205, 173, 2973, 2972, 2971, 71, 2969, 24, 2967,
	26, 2966, 2965, 32, 3, 19, 2962, 2961, 185, 2960,
	181, 2959, 2958, 2697, 2955, 198, 67, 2954, 194, 2953,
	132, 158, 2952, 2951, 2950, 2949, 192, 2948, 2947, 11,
	20, 2, 2946, 2945, 2944, 155, 5, 2487, 2943, 2942,
	65, 2941, 2939, 141,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 455,
	455, 19, 31, 20, 32, 13, 456, 456, 456, 456,
	24, 21, 33, 22, 22, 22, 22, 22, 151, 151,
	151, 151, 18, 18, 27, 27, 168, 168, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 454,
	454, 170, 170, 169, 164, 164, 457, 457, 171, 171,
	171, 173, 173, 37, 37, 95, 95, 95, 96, 96,
	97, 97, 152, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 83, 83, 397, 397, 398, 398, 147, 147,
	148, 148, 148, 148, 149, 149, 150, 150, 150, 51,
	39, 39, 39, 39, 39, 39, 39, 40, 40, 40,
	40, 41, 41, 41, 41, 41, 41, 42, 42, 42,
	42, 42, 42, 49, 49, 49, 49, 141, 141, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 464,
	464, 465, 465, 466, 466, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	63, 63, 245, 245, 221, 221, 64, 64, 64, 65,
	65, 66, 66, 53, 53, 450, 450, 259, 259, 364,
	364, 68, 68, 278, 278, 69, 69, 69, 69, 69,
	69, 70, 70, 70, 70, 70, 70, 70, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 77, 77,
	77, 78, 78, 78, 75, 75, 75, 73, 73, 73,
	72, 72, 72, 76, 76, 76, 74, 74, 74, 260,
	260, 79, 79, 79, 79, 79, 79, 79, 79, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 366, 366, 80, 80, 80, 335,
	335, 84, 84, 84, 293, 293, 85, 85, 85, 85,
	85, 86, 86, 86, 86, 98, 98, 98, 98, 453,
	453, 252, 252, 186, 186, 186, 186, 91, 91, 91,
	91, 92, 92, 92, 93, 93, 146, 146, 104, 104,
	104, 104, 104, 103, 103, 103, 103, 103, 103, 43,
	43, 43, 44, 44, 45, 45, 46, 46, 47, 47,
	48, 48, 48, 48, 48, 106, 106, 460, 460, 108,
	105, 105, 105, 107, 107, 107, 107, 109, 110, 110,
	110, 110, 110, 110, 110, 110, 111, 111, 391, 391,
	268, 268, 389, 389, 405, 405, 390, 390, 225, 225,
	225, 225, 225, 226, 226, 226, 396, 396, 396, 396,
	396, 396, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 131, 131, 131, 140, 140, 140,
	140, 140, 140, 140, 133, 133, 133, 121, 121, 113,
	113, 113, 113, 113, 117, 117, 117, 117, 117, 114,
	114, 123, 123, 123, 123, 123, 118, 118, 120, 120,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 115,
	115, 115, 115, 125, 125, 125, 125, 299, 299, 299,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	136, 136, 136, 136, 136, 136, 349, 349, 132, 132,
	132, 132, 135, 135, 135, 135, 283, 283, 129, 129,
	129, 130, 130, 130, 134, 134, 137, 137, 137, 137,
	116, 116, 116, 468, 468, 468, 138, 138, 128, 128,
	139, 139, 139, 139, 139, 139, 139, 139, 127, 127,
	127, 126, 126, 126, 126, 119, 451, 451, 448, 448,
	448, 448, 448, 448, 448, 449, 449, 452, 452, 89,
	89, 89, 58, 58, 469, 469, 469, 59, 59, 470,
	470, 470, 458, 458, 458, 459, 459, 459, 459, 459,
	459, 227, 227, 228, 228, 316, 316, 316, 316, 316,
	231, 231, 172, 172, 172, 234, 235, 235, 232, 232,
	233, 233, 233, 237, 237, 236, 239, 239, 238, 315,
	412, 412, 414, 414, 414, 414, 414, 414, 414, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 410,
	410, 410, 411, 406, 406, 407, 407, 407, 407, 229,
	229, 230, 230, 230, 230, 408, 409, 250, 250, 352,
	413, 413, 415, 415, 417, 471, 471, 471, 471, 471,
	471, 472, 472, 314, 314, 243, 243, 418, 418, 418,
	418, 419, 419, 419, 419, 419, 422, 421, 420, 420,
	420, 420, 420, 345, 345, 345, 62, 62, 62, 280,
	280, 279, 279, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 143, 143, 60,
	60, 60, 178, 178, 57, 57, 57, 474, 474, 61,
	61, 61, 475, 475, 67, 67, 67, 67, 67, 67,
	56, 56, 56, 56, 56, 476, 476, 300, 300, 298,
	298, 249, 249, 351, 190, 190, 165, 165, 165, 23,
	25, 25, 17, 17, 34, 34, 35, 35, 30, 30,
	461, 461, 462, 462, 90, 90, 94, 94, 94, 102,
	102, 142, 142, 142, 142, 142, 142, 142, 38, 38,
	38, 38, 50, 50, 50, 50, 100, 478, 478, 478,
	101, 101, 477, 477, 185, 185, 185, 185, 187, 187,
	311, 311, 312, 312, 479, 479, 313, 313, 313, 313,
	180, 179, 181, 181, 55, 55, 55, 174, 174, 175,
	175, 176, 176, 177, 177, 480, 480, 87, 87, 87,
	145, 145, 220, 220, 307, 307, 307, 244, 244, 195,
	195, 310, 310, 308, 308, 308, 308, 277, 277, 277,
	144, 144, 257, 257, 270, 270, 271, 271, 361, 361,
	272, 99, 99, 155, 155, 153, 153, 153, 153, 153,
	153, 160, 160, 261, 261, 161, 161, 161, 161, 162,
	162, 162, 154, 154, 154, 156, 156, 156, 156, 156,
	156, 156, 159, 159, 159, 159, 163, 163, 163, 158,
	158, 429, 429, 429, 431, 431, 432, 428, 428, 430,
	430, 473, 473, 282, 282, 282, 241, 242, 240, 240,
	247, 247, 246, 248, 248, 350, 350, 350, 166, 166,
	166, 275, 275, 275, 275, 303, 303, 301, 301, 301,
	302, 302, 304, 304, 304, 305, 305, 306, 306, 274,
	274, 331, 331, 157, 157, 157, 254, 254, 254, 255,
	255, 322, 322, 322, 322, 322, 322, 323, 323, 321,
	321, 321, 321, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 354, 354, 256, 256, 355, 309, 309, 446,
	446, 446, 447, 447, 348, 348, 356, 356, 356, 356,
	356, 356, 346, 346, 347, 347, 362, 363, 363, 286,
	286, 286, 286, 284, 284, 287, 287, 287, 287, 285,
	285, 357, 357, 357, 357, 276, 276, 358, 358, 358,
	359, 317, 318, 318, 367, 367, 367, 367, 382, 253,
	253, 253, 253, 253, 481, 481, 368, 368, 368, 368,
	368, 368, 368, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 372, 372, 372, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 381, 381, 381, 381,
	381, 373, 373, 378, 378, 379, 379, 379, 374, 375,
	380, 380, 380, 380, 482, 482, 384, 384, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 370, 370, 370,
	377, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 294, 294, 295, 295, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 326, 326, 326, 326, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 423, 423, 423, 423, 423, 423, 423, 423,
	426, 426, 427, 427, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 433, 433, 434, 434, 436, 436, 437,
	437, 438, 439, 439, 439, 440, 441, 441, 435, 435,
	442, 442, 442, 442, 443, 443, 444, 444, 444, 444,
	444, 445, 445, 445, 445, 445, 337, 337, 338, 338,
	344, 344, 344, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 188,
	188, 188, 188, 188, 266, 266, 264, 264, 264, 267,
	267, 265, 265, 263, 263, 262, 262, 334, 334, 332,
	332, 336, 336, 288, 288, 383, 383, 383, 383, 383,
	383, 383, 383, 289, 289, 289, 297, 290, 290, 291,
	291, 291, 291, 291, 328, 329, 292, 292, 292, 330,
	330, 339, 343, 343, 342, 341, 341, 340, 340, 319,
	319, 320, 320, 273, 273, 483, 483, 269, 269, 360,
	360, 360, 360, 223, 223, 258, 258, 222, 222, 215,
	215, 216, 216, 216, 216, 251, 251, 385, 385, 385,
	386, 387, 388, 333, 205, 204, 192, 193, 203, 202,
	201, 191, 194, 198, 199, 200, 196, 197, 211, 210,
	209, 207, 208, 365, 217, 217, 218, 218, 218, 219,
	219, 219, 219, 189, 189, 212, 212, 213, 214, 214,
	206, 206, 206, 182, 182, 182, 183, 183, 184, 184,
	395, 395, 393, 393, 393, 394, 394, 394, 394, 392,
	392, 392, 392, 392, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 401, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 404, 404,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 2, 0, 1, 1,
	0, 2, 0, 7, 2, 5, 6, 2, 1, 3,
	1, 3, 1, 6, 4, 9, 7, 12, 12, 12,
	9, 2, 7, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 5,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 6, 6, 6, 6, 1, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 3, 3,
	4, 3, 4, 7, 4, 4, 4, 3, 5, 7,
	4, 3, 3, 4, 3, 3, 3, 3, 3, 2,
	0, 1, 0, 1, 0, 3, 3, 3, 3, 3,
	6, 4, 4, 4, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 1, 1, 2, 1, 2,
	7, 3, 2, 0, 1, 3, 3, 1, 0, 1,
	2, 2, 1, 6, 5, 1, 2, 1, 3, 2,
	0, 9, 3, 2, 0, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 2, 2, 5, 3, 3, 6, 6, 3, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 3, 5, 7, 2, 3,
	0, 3, 5, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 3, 1, 1, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 1, 3,
	2, 3, 3, 1, 3, 1, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 1, 1, 1,
	1, 1, 2, 2, 5, 7, 3, 3, 3, 3,
	4, 4, 4, 3, 4, 4, 3, 4, 4, 5,
	3, 5, 5, 5, 7, 3, 3, 3, 4, 3,
	5, 3, 6, 5, 6, 3, 5, 6, 3, 4,
	3, 4, 3, 3, 4, 4, 5, 0, 1, 1,
	3, 2, 4, 3, 3, 5, 4, 3, 5, 3,
	5, 4, 6, 4, 6, 4, 1, 0, 3, 4,
	4, 5, 7, 5, 3, 3, 2, 0, 4, 2,
	3, 4, 2, 3, 3, 3, 4, 3, 3, 3,
	3, 4, 3, 1, 1, 1, 2, 3, 2, 3,
	6, 6, 7, 9, 7, 9, 3, 4, 10, 10,
	3, 5, 5, 5, 3, 5, 2, 0, 1, 1,
	1, 1, 3, 2, 2, 2, 1, 2, 0, 3,
	3, 2, 10, 13, 0, 2, 3, 9, 12, 0,
	2, 3, 1, 1, 0, 1, 2, 2, 2, 2,
	1, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 4, 2, 5, 5, 5, 2, 8,
	9, 6, 5, 3, 1, 5, 8, 5, 11, 3,
	0, 2, 4, 3, 3, 1, 5, 1, 3, 1,
	2, 0, 1, 2, 2, 0, 1, 3, 3, 2,
	2, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 5, 8, 4, 1,
	0, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 1, 4, 2, 4,
	7, 3, 3, 0, 3, 6, 3, 1, 1, 8,
	7, 5, 0, 1, 6, 7, 6, 5, 3, 4,
	14, 17, 14, 17, 4, 0, 2, 2, 0, 1,
	0, 1, 3, 3, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 6, 8, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 3, 2,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 0,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 1, 3, 1,
	3, 8, 5, 3, 4, 3, 0, 2, 2, 0,
	10, 3, 2, 0, 1, 3, 1, 1, 3, 3,
	5, 1, 1, 3, 3, 2, 3, 4, 3, 4,
	5, 0, 3, 0, 2, 2, 4, 2, 3, 0,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 5, 1, 0,
	1, 0, 3, 1, 3, 3, 4, 5, 2, 2,
	0, 2, 2, 1, 1, 1, 0, 2, 2, 5,
	2, 3, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 4, 2, 5, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 1, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 3, 4, 1, 5, 3,
	4, 5, 1, 5, 1, 3, 2, 0, 3, 0,
	2, 3, 1, 3, 2, 0, 3, 5, 6, 4,
	6, 4, 3, 2, 1, 0, 5, 1, 0, 2,
	2, 2, 1, 1, 0, 1, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 2, 1, 0, 2, 5, 7, 2, 1, 2,
	4, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 5, 4, 1, 2, 1, 4, 1,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 2,
	5, 1, 4, 2, 5, 1, 4, 3, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 1, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	4, 6, 5, 7, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 1, 5, 5, 3, 1, 1, 1, 2, 2,
	2, 4, 3, 5, 6, 8, 6, 5, 4, 3,
	4, 1, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 8, 8, 6, 4,
	6, 6, 6, 4, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	3, 3, 3, 0, 1, 4, 2, 2, 2, 2,
	2, 3, 2, 2, 3, 0, 4, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 1, 2, 3, 2,
	3, 2, 3, 1, 0, 1, 3, 1, 3, 3,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	1, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 1, 2, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 3, 1, 1,
	1, 1, 5, 3, 1, 1, 3, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 7, 1,
	7, 5, 3, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 465, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -142, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -143, -144, -145, 84, 70,
	125, 106, 111, 158, 293, 322, 332, 316, -107, -108,
	351, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -463, 86, -430,
	-71, -74, -76, -467, 116, 131, 175, 285, -92, -93,
	318, 320, 132, -45, -44, 126, -153, -155, -105, -106,
	-146, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, -139, 355, 402,
	42, 365, 71, 119, 326, 21, -5, -6, -7, -8,
	-9, -11, -12, -25, -53, -55, -56, -58, -59, -67,
	-61, -62, -429, -72, -73, -75, -77, -78, 317, -156,
	-154, 462, 415, -14, -19, -20, -15, -16, -18, -21,
	-17, -26, -31, -32, -28, -29, -27, -30, -33, -34,
	-35, -36, -23, -24, -13, -22, 433, 441, -159, -157,
	-158, -163, 339, 423, 379, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, -207, -212, -213, -214, -206,
	-182, -401, -404, 4, -399, -402, 137, 182, 251, 21,
	22, 23, 24, 25, 27, 38, 40, 39, 41, 42,
	45, 47, 48, 51, 52, 53, 54, 55, 56, 59,
	64, 69, 70, 71, 72, 73, 74, 79, 76, 77,
	78, 81, 83, 84, 85, 88, 89, 97, 98, 99,
	100, 101, 102, 106, 109, 108, 111, 114, 115, 116,
	118, 120, 121, 123, 125, 126, 129, 127, 385, 128,
	130, 131, 132, 133, 143, 144, 145, 147, 148, 150,
	152, 156, 157, 159, 163, 165, 166, 167, 168, 174,
	175, 177, 178, 183, 179, 184, 188, 191, 190, 192,
	193, 194, 185, 199, 203, 204, 205, 207, 208, 211,
	212, 213, 214, 215, 218, 217, 220, 223, 224, 227,
	228, 231, 232, 233, 235, 236, 239, 237, 240, 238,
	241, 244, 242, 243, 246, 247, 249, 248, 253, 256,
	172, 258, 259, 261, 262, 263, 279, 266, 267, 268,
	271, 272, 275, 278, 280, 281, 282, 283, 284, 285,
	286, 288, 289, 291, 293, 295, 297, 298, 299, 300,
	301, 302, 304, 305, 307, 308, 309, 310, 311, 316,
	313, 314, 315, 317, 318, 319, 320, 322, 324, 325,
	326, 327, 329, 331, 352, 353, 367, 332, 333, 334,
	335, 336, 337, 338, 342, 346, 343, 344, 345, 340,
	341, 347, 348, 349, 351, 354, 355, 357, 358, 360,
	361, 363, 364, 365, 366, 368, 371, 372, 373, 369,
	370, 378, 376, 377, 380, 381, 382, 383, 384, 386,
	388, 396, 397, 399, 402, 403, 404, 394, 406, 407,
	410, 411, 412, 413, 414, 419, 415, 417, 420, 421,
	422, 428, 427, 434, 435, 437, 438, 439, 33, 43,
	44, 46, 49, 60, 61, 62, 65, 103, 104, 124,
	134, 135, 146, 160, 162, 169, 170, 171, 189, 195,
	197, 201, 221, 255, 257, 273, 277, 290, 292, 303,
	328, 359, 374, 389, 390, 391, 392, 398, 400, 423,
	424, 425, 429, 436, 264, -200, 2, -182, -182, 293,
	26, 2, 26, 289, 341, 381, 383, 2, -453, -252,
	2, 26, -186, -182, 86, 158, 339, -200, 2, -453,
	-252, 24, 2, -182, 2, -187, 2, 332, -182, 465,
	81, 228, 64, 328, 348, -110, 397, -109, 389, 334,
	-111, -391, 2, 244, -182, 465, 465, 465, 465, 2,
	379, 282, 427, 340, 416, 99, 300, 182, -448, 2,
	4, -402, -399, -216, -215, 379, 99, -214, -206, 455,
	-213, 465, 465, 465, 2, 204, 205, 299, 298, 348,
	349, 465, 465, 465, 2, 25, 58, 80, 83, 105,
	133, 153, 156, 269, -464, 236, 279, 297, 334, 347,
	378, 386, 399, -459, 366, 59, -458, 416, -474, 404,
	114, -298, 99, 228, 157, 411, 383, 381, 324, 161,
	409, 109, 188, 414, 413, 465, 465, 25, 58, 67,
	83, 114, 133, 153, 156, -466, 279, 297, 331, 334,
	347, 378, 386, 404, 399, 2, 427, 340, 379, 182,
	99, 416, 324, 296, -81, 2, 462, 29, 28, 351,
	-152, 379, 198, 2, -182, 204, 205, 2, 465, 465,
	-448, 2, 204, 205, 2, 198, 2, 59, 336, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 2, -140, 348, 366,
	167, 41, 64, 26, 69, 283, 100, 159, 182, 183,
	212, 80, 81, -299, 40, 205, 204, -349, 380, 335,
	341, 376, 397, 86, 417, 325, 439, 300, 301, 127,
	4, 99, 244, 350, 389, 228, 73, -473, 2, 379,
	-477, 2, 397, 397, 2, -477, 2, -477, 2, -185,
	2, 397, 393, -478, 397, 436, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, -154,
	-156, -155, 465, 465, 465, 465, 465, -140, 348, 2,
	64, 26, -160, -161, 151, -246, -247, 408, 196, 122,
	270, -153, -155, 2, -429, -389, 2, -324, -405, -326,
	453, 454, 446, 250, 440, -337, 105, 409, 264, -404,
	-327, -339, 124, 328, -267, 8, 9, 5, 6, 7,
	-189, -369, -333, -377, 401, 136, 254, -219, 466, 10,
	462, -426, -155, -338, 34, 162, 57, -393, -218, -371,
	-379, -375, -376, -481, 47, 53, 52, 386, 243, 342,
	343, 360, 344, 345, 45, 419, 179, 261, 263, 190,
	4, 197, -217, -206, -423, -424, -399, -400, 189, 195,
	191, 359, 192, 193, 194, 44, 303, 147, 148, 146,
	115, 104, 103, 257, 49, 48, 46, 424, -380, 101,
	389, 390, 391, 392, 207, 208, -182, -401, 67, 91,
	92, 90, 95, 94, 96, 93, 350, 416, 58, 33,
	169, 170, 201, 255, 171, 65, -425, 370, 87, 155,
	187, 173, 200, 202, 206, 222, 225, 245, 252, 274,
	276, 323, 356, -482, 425, 134, 135, 277, 290, 374,
	398, 400, 160, 221, 60, 61, -431, 304, -432, -200,
	-431, 465, 465, 467, 465, -240, -241, -242, 2, 26,
	112, 462, 2, -353, 2, 460, -357, -155, 216, -356,
	462, -354, -207, 265, -427, 329, -423, -424, -189, -206,
	-218, 4, -243, 462, 464, 99, 379, 68, 182, -293,
	462, -182, 26, 264, 393, 467, -335, 462, 264, 154,
	267, -182, 2, 2, 352, 2, 462, -110, 62, 397,
	39, 348, -312, 2, -313, -179, -180, -181, -362, 203,
	295, 302, 442, 439, -389, -460, 154, 445, 393, -389,
	-268, 464, 2, -357, 169, -207, 2, -204, -392, 4,
	-399, -402, -400, -403, 67, -401, 26, 28, 29, 30,
	32, 34, 35, 36, 37, 50, 57, 58, 63, 66,
	68, 80, 86, 90, 91, 93, 92, 94, 95, 96,
	105, 107, 110, 112, 113, 117, 119, 122, 136, 138,
	151, 153, 154, 158, 161, 164, 176, 186, 196, 198,
	216, 219, 226, 229, 230, 250, 254, 260, 264, 265,
	269, 270, 287, 294, 306, 321, 339, 350, 362, 375,
	379, 387, 393, 395, 401, 408, 409, 416, 418, 426,
	430, 431, 432, 433, -404, 2, -357, 169, 2, -209,
	169, -357, -212, 2, -397, 169, -395, 10, -394, 5,
	4, -399, -402, -400, 2, -191, -182, 2, -203, -392,
	2, -222, 169, -207, -208, -212, 393, 467, -258, -215,
	-216, -251, -182, 464, -324, 2, -99, 2, -324, 169,
	2, -99, 169, 2, -324, 169, 2, -99, 169, 2,
	2, 2, 399, 2, 83, 169, -182, 379, 98, 2,
	315, -465, 331, 403, 427, 2, 2, 2, 2, 2,
	2, 2, 379, -196, 2, -182, 151, 340, -475, 304,
	-397, 169, 2, -397, 169, 2, -210, -212, -210, 182,
	199, -191, 169, 2, 383, 381, 383, 381, 154, 2,
	198, 2, 198, 2, -358, 2, -359, -207, 2, 2,
	2, 2, 2, 169, -182, 379, 98, 2, 214, 2,
	2, 2, 2, 2, 2, 2, 2, 2, -260, 169,
	2, -207, -260, 169, 2, -260, 169, 2, -223, 169,
	2, -222, -191, 169, 2, -398, 169, 2, -397, -398,
	169, 2, -366, 2, -365, -394, 423, -81, 462, -81,
	462, 348, 462, -397, -207, -207, -324, -99, 154, -324,
	-99, -152, 151, 2, 99, 379, -140, 2, 151, 418,
	2, 8, 2, -397, 335, 301, 143, 2, 352, 2,
	64, -299, 439, 154, 2, 154, 2, -283, 2, 433,
	-451, 2, 264, 154, 2, 154, 2, 154, 2, 154,
	2, 154, 2, 298, 349, 205, 2, -99, 430, -324,
	430, 2, 396, 213, 128, 154, -283, 2, 154, 2,
	154, 2, 5, 2, 203, 295, 367, 2, -207, -468,
	2, 379, 427, 340, 2, 2, 76, 77, 154, 2,
	154, 2, 154, 439, 2, -276, -357, -311, -312, -311,
	393, -187, -160, -246, -247, -140, 352, 2, -261, 258,
	413, 247, 354, 211, -160, -275, -301, -302, 226, 138,
	260, -282, 26, 112, -282, -282, 51, 463, 463, 11,
	12, 66, 38, 453, 454, 455, 456, 149, 457, 458,
	451, 452, 450, 443, 444, 448, 209, 210, 82, 447,
	445, 75, 234, 330, 139, 140, 141, 142, 312, 180,
	31, 181, 14, 15, 16, 30, 269, 225, 440, 173,
	356, 446, 17, 18, 19, 200, 202, 252, 43, 176,
	-188, -224, -324, -324, -324, -324, -324, 276, 462, -273,
	-319, 460, -155, 462, 462, 462, 5, 462, 5, -388,
	8, -155, -324, -337, 463, -265, 462, -155, -337, -332,
	462, 328, 460, 462, -340, -324, 464, -433, 434, -373,
	462, 292, -372, 462, -372, -372, 428, -370, 462, 441,
	435, 462, -370, 462, 462, 151, 462, 462, 462, 462,
	462, 462, 462, 462, 462, 462, 462, 462, 462, 428,
	462, 462, 462, 462, 462, 462, 462, 462, 462, 467,
	-431, -243, 462, -269, -360, -324, 455, -269, -269, 264,
	-262, -324, 87, -286, 206, 245, 155, 222, 323, 187,
	-388, -82, -68, -79, -87, -99, -112, -144, -145, -321,
	466, -348, 441, -155, -354, -206, -155, -356, 462, -353,
	-348, 455, -207, 462, 154, 462, 464, 154, -251, -392,
	-191, -207, -217, -218, -222, 111, -262, -448, -251, -186,
	35, -334, -367, -368, -369, -378, -374, -377, -381, 47,
	53, 52, 386, 243, 342, 343, 360, 344, 345, 45,
	419, 179, 261, 263, 190, 4, 46, 424, -380, 197,
	308, 309, 307, 311, 310, 189, 195, 191, 359, 192,
	193, 194, 44, 303, 147, 148, 146, 115, 104, 103,
	257, 49, 48, 101, 389, 390, 391, 392, 207, 208,
	425, 370, 60, 61, -448, -251, 151, -391, -262, 35,
	-312, 2, 105, -395, 39, -479, 467, 224, -226, 233,
	249, 166, 265, 437, 258, -396, 5, 4, -333, -345,
	105, 228, -377, 9, 454, -385, 8, 453, -390, -389,
	89, 464, -392, -168, 313, -167, 23, 27, 116, 421,
	129, -233, 184, 282, 124, 363, 412, -455, -456, 333,
	384, 385, 78, 258, 313, 124, -279, -281, 35, 97,
	247, 278, 54, 177, 238, 239, 365, 429, 124, 313,
	433, 124, -456, 313, -456, -170, 363, 412, -455, -456,
	333, 313, -169, -233, 124, 466, -96, -397, 462, -258,
	467, 467, -392, 455, 124, 124, 124, 124, 2, 2,
	250, 2, 2, 2, 156, -458, -466, 2, 2, 2,
	-207, 169, -245, 264, -450, -259, 379, -207, -209, 169,
	2, -212, 427, -178, -428, 433, 250, 250, 35, 462,
	2, -193, 169, 2, -183, -182, 182, -428, 250, -358,
	-220, -207, -220, 351, -200, 35, -321, 124, 2, 2,
	2, -182, -171, 467, 56, 319, 124, -171, 124, -171,
	124, -171, 467, 124, -171, 124, 467, 124, 124, 463,
	467, -366, -366, -397, -150, 433, 154, 86, 462, 462,
	-152, -97, -96, -397, -450, -191, 2, -207, 2, 379,
	207, -397, -397, -397, -391, 26, 353, 2, 298, 349,
	77, -207, 379, 99, 182, 70, -452, 151, -449, 324,
	-448, -207, 99, -207, 99, -207, 99, -207, -207, 2,
	2, 2, 2, 74, 74, 151, 2, 396, 2, 396,
	2, -182, -182, -182, 224, -207, 151, 379, 182, 379,
	182, 99, 379, -171, 467, -187, -160, -275, -391, -162,
	358, 253, -260, 211, 354, -160, -302, -301, 26, -324,
	-306, 145, 246, -324, -326, -154, -154, -154, -248, -350,
	-324, 294, 182, -382, -367, -367, -205, -392, 389, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, 225, 173, 356, 43, 176, -324,
	393, -324, -324, -324, -324, 242, 250, 254, 401, 136,
	410, 112, 258, -483, 375, 37, -330, -155, -266, 462,
	-344, 32, 362, 26, -337, 462, 2, -319, -324, -320,
	-263, -262, -262, 463, 426, 26, 112, 455, 2, 8,
	-294, -296, 438, 241, 102, 168, 240, -295, 338, 463,
	467, 35, 463, -324, -263, -336, -332, -262, -343, -342,
	430, -392, 455, -434, 144, 161, 8, -386, 8, -386,
	389, 389, 8, -386, -386, 462, 463, 2, 463, 2,
	463, 2, 463, 2, 463, 2, -324, -324, -324, -324,
	-324, -324, -324, -262, -288, 2, -383, -262, 4, 438,
	241, 102, 168, 240, 338, 5, -288, 2, -289, 2,
	-324, -262, -290, -325, -326, 453, 454, 446, -337, -291,
	2, -324, -263, -324, 50, 219, 395, -292, -324, 154,
	-262, -262, 2, -262, 2, -432, 35, -262, -254, 467,
	154, 35, 4, -254, -254, 462, 463, 467, -287, 165,
	237, 232, -287, -353, -286, 206, -284, 274, -284, -284,
	-446, 462, 461, 465, 465, 465, 465, 465, -348, -192,
	460, 468, -392, -347, -346, 35, -200, 271, -348, -348,
	464, 463, -347, -207, 462, -262, -392, 368, 463, 464,
	200, 200, 200, 200, 329, 463, 393, 433, -81, 266,
	463, 467, -253, 34, 460, -296, 462, -384, 428, 462,
	462, 154, -252, -460, 463, 397, -313, -225, 302, 361,
	314, 346, 377, 9, 8, 8, 467, -392, 467, -461,
	80, 393, 68, -315, 169, 68, -406, -194, 80, -407,
	-182, 63, 409, 294, 153, -461, 80, -461, 80, 80,
	351, 366, 51, -357, 38, 38, 26, -99, 220, 154,
	439, 379, 182, 393, -357, -281, -367, 97, 238, 239,
	51, -387, -385, 454, -387, 51, -387, -387, -387, 433,
	-209, -357, 393, 284, -397, 393, 467, 38, 38, 26,
	-99, 220, 154, 393, -222, -192, -363, -362, -398, -215,
	-182, 464, -324, -99, -324, -99, 124, 2, -475, 214,
	462, -229, 250, 154, -251, -364, 198, 467, -259, -280,
	-279, 250, -211, 2, -207, 284, 124, 124, 462, 120,
	300, 2, 264, 250, -193, 169, -174, 382, 124, -278,
	418, -307, -99, 462, 105, 35, -307, -270, -271, -361,
	-272, -194, 462, -200, -182, 2, -207, -260, -260, -260,
	-222, -223, -191, -397, -398, -398, -81, -365, 463, 463,
	463, -149, 268, -148, -182, 5, -152, 418, -228, -316,
	-315, -410, -411, -406, 225, 182, 409, 199, 137, -244,
	-195, -194, 98, -150, -362, 467, -150, -150, -363, -363,
	-207, 151, 2, 2, -283, -207, -191, -222, -207, -251,
	-251, -283, -191, -283, -191, -283, -191, -99, -324, 348,
	151, 151, 464, -283, 300, 99, 379, 282, 182, -207,
	-222, -207, -222, -191, -207, -357, -160, 231, 413, -304,
	-385, 462, -305, 328, 329, 467, -165, 36, 110, 211,
	-207, 439, 121, -324, -324, 393, -483, 375, -330, 121,
	-324, 242, 254, 401, 136, 410, 112, 258, 154, 462,
	-325, -325, 463, -264, -324, -324, 461, 470, 463, -247,
	467, -246, -324, -262, -262, 463, 463, 393, 393, 393,
	393, 462, 464, -262, -251, 461, 461, 467, 463, -341,
	-342, 117, -324, 464, -439, 275, 462, 462, 463, 463,
	467, 463, 439, 439, 463, 463, 463, -324, 35, 467,
	467, 467, 463, 467, 467, 467, 463, 463, 154, 463,
	463, -297, 287, 463, 11, 12, 453, 454, 455, 456,
	149, 457, 458, 451, 452, 450, 443, 444, 445, 75,
	234, 330, 14, 15, 16, 200, 176, -325, -325, -325,
	463, -328, -329, 154, 151, 35, -292, -292, -292, 463,
	154, -262, 463, 463, 462, 463, -318, -317, 431, -360,
	-255, 2, -353, -202, -392, -318, -318, -262, -324, 206,
	206, -285, 418, 264, -287, -353, -346, 463, -447, -388,
	-348, -347, -388, -323, -322, 152, 36, 110, 248, 172,
	-200, -243, -347, -347, -392, -348, 463, -256, -355, -427,
	-247, 464, -392, -141, 5, 254, -141, -141, -141, -251,
	24, 288, -367, 460, 461, 8, 8, 462, -386, -386,
	-251, 154, -389, -312, 407, 72, 302, 389, -389, -167,
	313, -194, -194, -207, 250, -315, 169, -173, 250, -367,
	-201, -182, 462, 462, 211, 211, -194, -201, 169, -194,
	169, -201, -201, -454, 302, 259, -324, 227, 300, 251,
	-168, 313, -99, -99, -99, 462, -460, 418, 111, -207,
	-222, -207, -211, 313, -217, -387, -387, -279, 313, -209,
	-397, 433, -191, -169, -99, -99, -99, 462, -192, -170,
	313, -147, 178, 463, 455, -182, 427, -182, -227, -230,
	-228, -194, -469, 435, 433, 124, -221, -207, 460, -150,
	-397, -207, 124, -243, -397, -397, -397, 2, 462, 2,
	-207, 124, 264, 250, -175, 118, -480, 445, -191, -318,
	-255, -277, -310, 321, 264, -244, 423, -200, -277, -257,
	467, 154, 445, 464, -244, 2, -171, -171, -171, -171,
	-171, -81, -81, -150, 467, 462, 445, 445, 462, -397,
	-397, 463, 467, -207, -193, 182, 182, -199, -183, 463,
	467, 464, 462, -150, -96, 154, -46, 433, 379, 466,
	-283, -283, -283, 348, 348, -182, -203, -191, -207, -204,
	-222, 151, 151, -305, -324, -350, -166, 256, -207, 466,
	-324, -324, 121, 121, -324, -325, -325, -324, 121, 154,
	462, -324, -334, 30, 30, 463, 467, -320, -324, 463,
	426, -247, -247, 463, 5, 241, 168, 240, -295, 240,
	-295, -295, 8, 455, -392, 463, -332, 119, -324, 387,
	-392, 455, -440, -197, 462, -182, 431, -246, -386, -370,
	-370, 463, -382, -367, -324, -324, -324, -324, -324, -324,
	-328, -324, -382, -367, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, 112, 250, 258, -325, -329, -328, -324,
	-324, -367, 463, 463, 463, -262, -81, -274, 161, -324,
	-363, 467, -274, -274, 463, -353, -353, 462, -324, 206,
	461, 463, 467, -347, 461, 467, 469, 445, -243, 464,
	-346, 463, 467, -309, 35, 463, -392, 267, 5, 8,
	460, 461, 463, -386, 463, 463, -251, -324, 393, 393,
	124, 250, 420, -412, -407, -324, -249, -351, -324, 462,
	462, -164, 116, 351, -462, 2, 124, -171, 124, -171,
	437, 462, 462, 393, 433, -262, -324, -151, 105, -391,
	-456, 466, -456, 466, 393, 393, 284, 433, -262, 393,
	-150, 154, 2, 2, 2, 463, 463, 467, -413, 35,
	262, -182, -207, -64, 433, -362, -388, -209, 35, -178,
	2, -300, 418, -192, -207, 124, -176, 218, -480, -395,
	-428, -247, -277, -269, 251, 79, 463, -318, -271, -255,
	-324, 2, 463, -148, -149, -397, -397, -397, -150, -152,
	-152, -316, 2, 462, -193, -183, 462, -152, -195, 2,
	-398, -99, 268, -207, 455, -283, -235, -234, 282, 258,
	-235, 328, 328, 265, 463, 145, 215, -165, -192, -324,
	-324, 121, 30, 30, -324, -324, -334, 463, -324, -324,
	-262, 461, 5, -324, 463, 463, 463, -324, 464, -441,
	-182, -324, 463, 463, 463, 463, 467, 467, 463, 463,
	463, 463, -329, 154, 112, 258, 462, 463, 463, -331,
	164, 51, -353, -331, -331, -285, -251, -353, -321, -388,
	-322, -192, 460, -392, -355, 462, 464, 461, 2, 460,
	463, -194, -194, -315, 124, -414, 80, -416, 66, 137,
	86, 250, 254, 409, 294, 63, 105, 306, 35, 463,
	463, 467, -165, -249, -251, 250, 372, 105, 250, 105,
	98, 404, -194, -201, -251, -251, -207, 130, 463, 467,
	445, 2, 455, 455, -211, -209, -397, 130, 463, -192,
	-398, -231, 185, -194, -411, -408, -409, 294, -415, -417,
	137, 294, -99, 2, 462, -229, 268, 461, -280, -99,
	462, -182, 264, 462, -192, -177, 217, -480, -395, -174,
	-303, -301, -308, 462, 264, -99, -247, 445, 463, 463,
	98, 98, -249, 462, 462, -251, 98, 463, -47, -48,
	182, 80, 286, -204, 379, 182, 462, 462, -165, -324,
	-324, -324, 463, -247, -392, 455, -435, 282, 463, -324,
	-324, -325, 154, 462, -334, -436, 432, -324, -262, -436,
	-436, 463, -348, -388, 2, 460, 2, -315, -201, -205,
	-198, -182, 137, 169, 254, 211, 462, -325, -207, 462,
	2, -471, 107, 186, -314, -472, 85, 373, -351, -166,
	463, 463, 254, 254, -324, -367, -171, -171, 463, 463,
	-324, 393, -391, 84, -389, 2, -456, -324, 393, -232,
	-233, 176, -413, 211, -198, 211, -470, 433, -227, -469,
	-65, -66, 394, -362, -249, -207, -249, 264, -480, -395,
	-175, -277, 113, -251, 80, -303, -330, -150, 462, 462,
	463, -249, -249, 463, 462, -150, 467, 26, 462, 26,
	462, -207, -222, -262, -262, 463, -247, 51, 463, 463,
	-325, -334, 463, -437, -438, -197, -347, 461, 2, -416,
	-198, 250, -324, -184, 462, -324, 186, 108, 174, -231,
	462, 306, -190, 66, 462, 462, 462, 445, 154, 462,
	-469, 280, 462, 98, 247, 463, 35, -66, 9, 463,
	-300, 463, -207, -395, -176, 413, 251, 463, -201, -277,
	-398, -398, -314, 463, 463, -398, -48, -251, -251, 463,
	463, -442, 300, 329, 163, -262, 463, 467, 35, 124,
	463, -418, 235, -182, 463, 108, 174, -232, -251, -207,
	-457, 418, -205, -237, -236, -234, -239, -238, -234, -262,
	-389, 84, 280, -262, -207, -250, -352, -194, 98, -231,
	-99, -314, 462, -314, 462, -177, 351, -317, 463, 463,
	-231, -314, 463, 463, 463, 463, -443, -444, 43, 406,
	89, -324, -443, -443, -438, -440, 137, -419, -422, -421,
	264, 357, 155, 281, 463, 372, 429, -471, 463, -243,
	-324, 463, 467, 423, 463, 467, 423, 463, 154, 463,
	462, 463, 467, -232, -470, -231, -249, -231, -249, -270,
	-150, -150, -232, -231, -150, -445, 123, -444, 291, 150,
	328, 291, 150, -445, -445, -198, -421, 264, -422, 264,
	413, 109, -418, -236, 176, -238, 154, 280, -251, -352,
	-469, -232, 463, -232, 463, -318, -232, 89, 161, 388,
	247, 30, -420, 247, 319, 56, 351, -420, -419, 462,
	462, 463, -476, 431, -314, -476, -314, 328, 272, -444,
	22, 254, 105, -471, -262, -262, -172, 56, 319, 2,
	-231, -231, 463, 463, -232, -232, -232, 393, -476, -476,
	462, -262, 463, -232,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 369, 370, 372,
	373, 374, 376, 377, 379, 381, 383, 385, 386, 388,
	390, 392, 393, 394, 395, 396, 398, 400, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 458, 460,
	0, 931, 933, 935, 937, 25, 26, 0, 0, 190,
	192, 194, 0, 219, 221, 223, 224, 226, -2, 0,
	321, 322, 324, 326, -2, -2, 0, 0, 447, 449,
	0, 0, 0, 469, 470, 0, 1021, -2, 463, 465,
	467, 532, 534, 536, 538, 540, 542, 544, 545, 547,
	549, 551, 553, 555, 557, 559, 560, 562, 564, 566,
	568, 570, 572, 574, 576, 578, 580, 582, -2, -2,
	-2, 0, -2, -2, -2, 949, 29, 31, 33, 35,
	37, 39, 41, 61, 275, 276, 278, 280, 282, 285,
	286, 288, 1069, 328, 330, 332, 334, 336, 0, -2,
	1081, 0, 0, 43, 44, 45, 46, 47, 48, 49,
	50, 68, 69, 70, 71, 72, 73, 74, 75, 54,
	56, 57, 63, 64, 66, 52, 0, 0, 1045, 1047,
	1049, 1051, -2, 0, 0, 7, 9, 11, 13, 15,
	17, 19, 21, 371, 375, 378, 380, 382, 384, 387,
	389, 391, 397, 399, 401, 826, 1681, 1695, 1696, 1697,
	1700, 1701, 1702, 1703, 1704, 1705, 2046, 2126, 2127, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
	1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
	1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
	2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
	2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 0, 425, 423, 1675, 426, 1879,
	428, 430, 315, 316, 317, 318, 319, 320, 0, 440,
	434, 439, 441, 443, 444, 445, 446, 420, 418, 0,
	440, 1727, 438, 929, 930, 924, 925, 1912, 959, 459,
	-2, -2, -2, 2015, -2, 491, -2, 498, 2018, 1914,
	503, 0, 505, -2, 508, 932, 934, 936, 27, 28,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	-2, -2, -2, -2, 0, 0, 1764, 1651, 1697, 1654,
	1649, 191, 193, 195, 196, 0, 0, 0, 0, 0,
	0, 220, 222, 225, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 740, 732, 733, 877, 878,
	899, 0, 0, 0, 0, 323, 325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 327, 0, 0, 0, 0,
	0, 0, 0, 253, 361, 362, 0, 1070, 1070, 0,
	0, 0, 0, 171, 162, 0, 0, 721, 448, 450,
	0, 157, 0, 0, 928, 0, 173, 0, 0, 464,
	466, 468, 533, 535, 537, 539, 541, 543, 546, 548,
	550, 552, 554, 556, 558, 561, 563, 565, 567, 569,
	571, 573, 575, 577, 579, 581, 583, 584, 0, 0,
	0, 0, -2, -2, 0, 0, -2, -2, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, -2, -2,
	-2, 0, 0, 0, -2, -2, 0, 0, 0, 0,
	587, 589, 590, 591, 0, 639, 656, 0, 868, 1071,
	961, 939, 952, 961, 941, 942, 943, 944, 945, 950,
	951, 954, 0, 946, 947, 948, 30, 32, 34, 36,
	38, 40, 42, 277, 279, 281, 283, 287, 289, -2,
	1043, 1044, 329, 331, 333, 335, 337, 451, 0, 453,
	0, 588, 1025, 1033, 0, -2, 0, 1075, 1075, 1075,
	0, 0, 1044, 1042, 0, 456, 457, 512, 513, 1308,
	0, 0, 0, 0, 0, 1548, 1392, 0, 514, -2,
	1423, 1425, 1994, 2015, 1547, 1427, 1428, 1429, 1430, 1431,
	0, 0, 1434, 0, 1436, 1437, 1438, 1439, 0, 1441,
	0, 1445, 1446, 1447, 0, 1999, 1628, 1693, -2, 1213,
	1214, 1215, 1216, 1217, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1689, 0, 1514, 1461, -2, 1714, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1773, -2, -2, -2, -2, -2, -2, -2, 1269, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 2029, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 0, 1983,
	2000, 2001, 2006, 2008, 2002, 1991, 1484, -2, 2030, 2031,
	2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
	2042, 2043, 2044, 1270, -2, 1995, 1996, 2011, 2012, 2017,
	2022, 2023, 1998, 2007, -2, -2, 1061, 1887, 1064, 826,
	1062, 1046, 1048, 0, 1050, 0, 0, 0, 1055, 1078,
	1076, 0, 1114, 1059, 1060, 1070, 1132, 1155, 0, 1137,
	0, 1155, 1181, 0, 1142, 1907, 1462, 1463, 0, 1697,
	1694, -2, 0, 0, 0, 0, 0, 0, 0, 421,
	0, 427, 429, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 461, 462, 0, 486, 0, 490, 1990, -2,
	1732, 1927, -2, 494, 962, 966, 967, 968, 969, 0,
	0, 0, 0, 0, 500, 0, 0, 487, 488, 506,
	509, 0, 51, 0, 2000, 1181, 53, 0, 1665, 1719,
	1720, 1721, 1722, 1723, 2029, 2045, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
	2121, 2122, 2123, 2124, 2125, 55, 0, 2000, 58, 0,
	2000, 0, -2, 62, 0, 2000, 174, 175, 1710, 1711,
	1715, 1716, 1717, 1718, 65, 0, 1671, 67, 0, 1668,
	76, 0, 2000, 0, 1648, -2, 0, 0, 713, 1645,
	1650, 714, 1655, 0, 197, 198, 199, 200, 201, 2000,
	203, 204, 0, 206, 207, 2000, 209, 210, 0, 212,
	228, 229, 0, 231, 0, 2000, 0, 0, 0, 237,
	-2, 254, 0, 251, 0, 241, 242, 244, 245, 246,
	247, 248, 0, 293, 291, 1676, 0, 0, 0, 883,
	-2, 2000, 871, 874, 2000, 876, 888, 1679, 0, -2,
	0, 1068, 2000, 976, 736, 737, 738, 739, 0, 312,
	0, 989, 0, 991, 0, 1011, 1187, 1132, 255, 256,
	257, 258, 259, 2000, 0, 0, 0, 264, 0, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 150, 2000,
	340, 359, 150, 2000, 343, 150, 2000, 346, 150, 2000,
	349, 1643, 150, 2000, 352, 353, 2000, 355, 176, 356,
	2000, 358, 0, -2, 414, 1683, -2, 364, 0, 365,
	0, -2, 0, 188, 0, 0, 719, 720, 0, 926,
	927, 0, 0, 471, 0, 0, 585, 586, 0, 0,
	596, 597, 598, 599, 1915, 1885, 1789, 603, 0, 606,
	-2, 0, 0, 0, 610, 0, 615, 616, 617, 0,
	718, 619, 0, 0, 621, 0, 625, 0, 628, 0,
	630, 0, 632, -2, -2, -2, 643, -2, 0, 647,
	0, 649, 0, 0, 0, 0, 664, 665, 0, 670,
	0, 673, 674, 675, 0, 677, 678, 679, 680, 0,
	682, 683, -2, -2, 687, 689, 0, 696, 0, 700,
	0, 704, 0, 592, 593, 150, 1185, 938, -2, 940,
	0, 956, 1028, -2, 0, 452, 0, 455, 1039, 0,
	1035, 0, 1037, 0, 1026, 1031, 1093, 1094, 0, 0,
	0, 0, 1073, 1074, 0, 0, 0, 1023, 1024, 0,
	0, 0, 0, 1553, 1554, 1555, 1556, 1557, 1558, 1561,
	1562, 1559, 1560, 1563, 1564, 0, 0, 0, 0, 0,
	1565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1566, 1567, 1568, 0, 0, 1570, 0, 1572,
	0, 0, 0, 0, 0, 0, 1371, 1373, 1636, 0,
	0, 1569, 1313, 1314, 1315, 1350, 1351, 0, 0, 1424,
	1633, 1632, 1426, 0, 1584, 0, 1433, 0, 1305, 1440,
	1662, -2, 0, 1548, 1579, 0, 0, 1448, 1449, 1450,
	0, 0, 1584, 0, 0, 1627, 0, 1516, 0, 1249,
	0, 1250, 1251, 0, 1252, 1253, 1266, 1279, 0, 0,
	0, 0, 1283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1271,
	0, 0, 0, 1608, -2, 0, 0, 0, 0, 0,
	1063, 0, 0, 1118, 1637, 1641, 1642, 1118, 1118, 0,
	0, 1585, 1178, 1178, 0, 0, 1174, 1174, 1174, 1172,
	1149, 0, 402, 404, 406, 408, 409, 410, 412, 1155,
	0, 1165, 0, 1155, 1155, 0, -2, 1137, 0, 0,
	1165, 1182, 1183, 0, 0, 0, 0, 0, 0, 1698,
	0, 0, 0, 1685, 0, 0, 0, 0, 432, 442,
	1070, 0, 1587, 1203, 1206, 1207, 1208, 1209, 1212, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, -2, 1267, 1269, 1290,
	1256, 1257, 1258, 1259, 1260, 1238, 1239, 1240, 1241, 1242,
	1243, 1244, 1245, 1246, 1247, 1248, 1262, 0, 1237, 1237,
	1237, 1254, 1255, 1278, 1289, 1281, 1289, 1285, 1204, 1205,
	1272, 1273, 1274, 1275, 0, 436, 0, 0, 0, 0,
	-2, 496, 501, 502, 0, 0, 964, 0, 970, 523,
	524, 525, 972, 973, 0, 499, 526, 527, 528, 529,
	530, 531, 0, 843, 0, 845, 1657, 0, 497, 516,
	504, 0, 510, 77, 921, 116, 0, 921, 921, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 101, 112,
	89, 90, 0, 0, 0, 0, 59, 851, 0, 854,
	0, 0, 0, 0, 0, 0, 0, 866, 0, 0,
	0, 0, 100, 0, 95, 79, 0, 0, 0, 102,
	114, 0, 141, 143, 0, 0, 1168, 158, 0, 712,
	0, 0, 1698, 1653, 0, 0, 0, 0, 230, 232,
	0, 234, 235, 236, 0, 882, 0, 243, 240, 284,
	800, 2000, 0, 0, 310, 305, 0, 307, 850, 2000,
	848, 1680, 0, 869, 0, 1067, 0, 0, 0, 0,
	889, 0, 2000, 894, 1667, 1706, 1707, 978, 0, 314,
	0, 992, 0, 0, 1188, 0, 1190, 0, 261, 262,
	263, 0, 338, 0, 148, 149, 0, 341, 0, 344,
	0, 347, 0, 0, 350, 0, 0, 0, 0, 1070,
	0, 0, 0, 0, 164, 0, 0, 0, 0, 0,
	0, 188, 160, 188, 188, 1168, 473, 1168, 475, 0,
	0, 600, 601, 602, 604, 605, 607, 608, -2, -2,
	697, 667, 0, 0, 0, 666, 618, 0, 706, 1903,
	716, 667, 1764, 667, 1764, 667, 1764, 629, 631, 634,
	659, 642, 646, 0, 0, 0, 651, 0, 653, 0,
	655, 667, 668, 671, 676, 681, 0, 0, 0, 0,
	0, 0, 0, 867, 0, 955, 1029, 1031, 454, 1032,
	0, 1041, 1034, 0, 1038, 1027, 1091, 1092, 1097, 1098,
	1104, 1107, 1108, 1100, 1308, 1056, 1057, 1058, 1082, 1083,
	908, 0, 2126, 1309, 1198, 1310, 1311, 1664, 0, 1316,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, -2,
	-2, -2, -2, -2, -2, -2, -2, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, -2, -2,
	-2, 1348, 1349, -2, 1571, 1573, 0, 1636, 0, -2,
	0, -2, -2, -2, -2, 1368, 0, 1370, 1375, 1377,
	1379, 0, 0, 0, 0, 1635, 1389, 1619, 1620, 0,
	0, 1550, 1551, 1552, 1374, 0, 1393, 1634, 1631, 0,
	0, 1583, 1081, 1452, 0, 0, 0, 0, 1459, 0,
	1663, 1304, 1291, 1292, 1293, 1294, 1295, 1296, 1306, 1444,
	1581, 0, 1580, 0, 0, 0, 1591, 0, 1626, 1622,
	0, 1686, 1692, 1524, 0, 0, 0, 0, 1660, 0,
	0, 0, 0, 0, 0, 0, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 1594, -2, -2,
	-2, -2, -2, -2, -2, -2, 0, 1498, 0, 1500,
	1585, 1605, 0, 0, 1394, 0, 0, 0, 1548, 0,
	1503, 1585, 1613, 0, 0, 0, 0, 0, 1585, 0,
	1618, 0, 1510, 0, 1512, 1065, 0, 0, 1193, 0,
	0, 0, 1640, 1193, 1193, 0, 1113, 0, 0, 1175,
	1176, 1177, 0, 0, 1178, 0, 1169, 1173, 1170, 1171,
	0, 0, 1155, 403, 405, 407, 411, 413, 1165, 1129,
	0, 0, 1666, 1135, 1164, 0, 826, 1154, 1165, 1165,
	0, -2, 1139, 0, 0, 1081, -2, 189, 825, 0,
	0, 0, 0, 0, 422, 424, 0, 0, 416, 0,
	419, 0, 1194, 1197, 0, 1210, 0, 0, -2, 0,
	0, 0, 0, 0, 489, 0, 963, 971, 0, 520,
	0, 522, 0, 844, 1659, 1658, 0, 511, 0, 0,
	0, 0, 920, 120, 2000, 0, 152, 0, 0, 794,
	1672, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 91, 0, 0,
	0, 0, 0, 0, 0, 852, 853, 855, 861, 863,
	0, 857, 1661, 0, 858, 0, 860, 862, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	92, 0, 0, 0, 0, 1647, 179, 1167, 0, 1646,
	1656, 0, 202, 205, 208, 211, 0, 238, 0, 0,
	742, 724, 0, 0, 292, 188, 0, 0, 306, 846,
	849, 0, 826, 881, 1678, 0, 0, 0, 0, 0,
	0, 887, 0, 0, 0, 2000, 980, 986, 0, 1193,
	0, 1009, 994, 0, 0, 0, 1009, 1013, 1014, 1016,
	1017, 0, 0, 1189, 0, 265, 360, 150, 150, 150,
	1644, 150, 150, 177, 354, 357, 363, 415, 1070, 1070,
	188, 186, 1864, 184, 181, 183, 0, 0, 0, 743,
	745, 746, 747, 748, 0, 1707, 0, 1818, 1707, 0,
	997, 999, 0, 155, 188, 0, 0, 304, 472, 477,
	594, 0, 636, 661, 609, 611, 612, 613, 0, 717,
	715, 620, 667, 623, 667, 626, 667, 645, 648, 650,
	0, 0, 0, 663, 0, 0, 0, 0, 0, 0,
	0, 701, 702, 703, 705, 1186, 1030, 1040, 1036, 0,
	1102, 0, 1101, 1105, 1106, 0, 1090, 906, 907, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 1390, 0,
	-2, 1369, 1372, 1376, 1378, 1380, 0, 0, 0, 0,
	0, 0, 1574, 0, 1576, 1391, 1629, 1632, 1546, 0,
	0, 1080, 1081, 1081, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 1582, 0, 1589, 1590, 0, 1451, 0,
	1623, 0, 0, 0, 1460, 0, 0, 0, 1261, 1235,
	0, 1289, 1287, 1288, 1282, 1289, 1286, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 1483, 1495, 0, 1497,
	1499, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1397, 1398, 1399,
	1502, 1611, 1612, 0, 0, 0, 0, 0, 0, 1508,
	0, 1617, 1509, 1511, 1070, 1115, 1110, 1192, 0, 1638,
	1168, 1117, 1119, 1639, 1669, 1110, 1110, 0, 1586, 0,
	0, 1159, 0, 0, 0, 1161, 0, 1150, 0, 1152,
	1165, 1134, 0, 0, 1127, 0, 1123, 1124, 1125, 1126,
	826, 1163, 1136, 1140, 1686, 0, 1184, 0, 1144, 1147,
	0, 0, 1699, 213, 217, 218, 214, 215, 216, 431,
	0, 0, 1588, 0, 1199, 0, 0, 0, 0, 0,
	435, 0, 485, -2, 518, 519, 521, 0, 517, 117,
	921, 0, 0, 912, 0, 122, 2000, 131, 0, 771,
	0, 1670, 0, 0, 0, 0, 923, 0, 2000, 150,
	2000, 150, 133, 136, 0, 140, 138, 0, 0, 762,
	78, 921, 81, 85, 93, 0, 0, 0, 99, 0,
	0, 0, 914, 0, 856, 859, 865, 60, 0, 916,
	910, 0, 909, 142, 83, 87, 94, 0, 918, 80,
	0, 188, 0, 159, 1652, 0, 0, 0, 0, 0,
	741, 811, 0, 0, 0, 0, 298, 294, 0, 303,
	309, 308, 0, 0, 872, -2, 875, 884, 0, 886,
	898, 0, 0, 0, 982, 986, 0, 985, 1068, 1081,
	313, 987, 1009, 0, 0, 0, 996, 993, 990, 1193,
	0, 0, 0, 0, 0, 260, 339, 342, 345, 348,
	351, 366, 367, 163, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 1707, 1707, 0, 1674, 0,
	0, 0, 0, 156, 161, 0, 474, 0, 0, 0,
	622, 624, 627, 652, 654, 667, 690, 691, 757, 0,
	757, 0, 0, 0, 0, 1084, 1085, 0, 908, 0,
	1312, 1353, 0, 0, -2, 0, 0, 1357, 0, 0,
	0, -2, 0, 0, 0, 1575, 1577, 0, 1631, 1453,
	0, 0, 0, 1457, 1435, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 0, 1442, 1443, 1549, 1592, 1621, 1625, 0,
	1687, 1691, 1522, 1523, 1527, 1677, 0, 0, 0, 1280,
	1284, 1464, 0, 0, 0, 0, 0, 0, 0, 1593,
	1604, 1606, 1395, 1396, 1400, 1401, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, 1409, -2, -2, -2, 1413, 1414, 1415,
	-2, -2, -2, 0, 0, 0, 1607, 1609, 1610, 1614,
	1615, 0, 1505, 1506, 1507, 1616, 0, 1112, 0, 1191,
	1116, 0, 1112, 1112, 1077, 1157, 0, 0, 1180, 0,
	1132, 1151, 0, 1141, 1130, 0, 1131, 0, 1162, 0,
	1138, 1143, 0, 1146, 0, 1453, -2, 433, 417, 0,
	0, 1201, 1211, 0, 1264, 1268, 437, 1166, 0, 0,
	0, 0, 151, 769, 793, 0, 0, 901, 908, 0,
	0, 124, 0, 0, 0, 132, 0, 129, 0, 135,
	139, 0, 0, 0, 0, 0, 96, 97, 98, 0,
	103, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	153, 0, 233, 880, 239, 751, 799, 0, 801, 0,
	725, 0, 800, 290, 0, 297, 0, 850, 0, 870,
	885, 0, 0, 0, 0, 0, 984, 986, 0, 977,
	978, 1096, 988, 1007, -2, 1006, 0, 1081, 1015, 1012,
	1018, 1019, 0, 185, 0, 180, 182, 0, 166, 0,
	0, 744, 749, 0, 0, 0, 0, 0, 998, 1000,
	0, 172, 0, 595, 614, 662, 692, 756, 0, 0,
	694, 0, 0, 1099, 1103, 1088, 1089, 1086, 908, 1355,
	1359, 0, 0, 0, 1361, -2, 0, 1383, -2, -2,
	1578, 1630, 1432, 1081, 1454, 1456, 1307, 1624, 0, 1529,
	1526, 0, 1513, 1236, 1474, 1475, 0, 0, 1478, 1480,
	1481, 1482, 1603, 0, 0, 0, 0, 1504, 1066, 1518,
	0, 0, 1120, 1518, 1518, 1158, 0, 1160, 1155, 1153,
	1128, 1121, 0, 1687, 1145, 0, 0, 1195, 1200, 0,
	1263, 118, 119, 121, 0, 770, 0, 773, 0, 0,
	0, 0, 780, 781, 0, 0, 0, 0, 0, 815,
	824, 0, 1090, 0, 0, 0, 126, 145, 0, 0,
	922, 0, 150, 150, 0, 0, 913, 0, 0, 0,
	0, 106, 0, 0, 915, 917, 911, 0, 0, 919,
	178, 759, 0, 811, 803, 804, 805, 0, 810, 812,
	0, 0, 729, 726, 742, 724, 0, 295, 847, 879,
	0, 897, 0, 0, 0, 974, 986, 0, 979, 980,
	1009, 1095, 0, 0, 0, 995, 1096, 0, 187, 188,
	0, 0, 0, 0, 0, 0, 0, 188, 476, 478,
	0, 0, 484, 755, 0, 0, 0, 0, 1087, 1363,
	-2, -2, 1384, 0, 1688, 1690, 1081, 0, 1515, 0,
	0, -2, 0, 0, 0, 1052, 0, 1111, 1109, 1053,
	1054, 1179, 1165, 0, 1148, 0, 1202, 123, 0, 774,
	775, 1673, 777, 0, 779, 782, 0, 784, 1709, 0,
	788, 795, 816, 0, 751, 0, 821, 822, 902, 903,
	797, 0, 125, 127, 144, 905, 128, 134, 0, 0,
	82, 0, 0, 1758, 109, 107, 105, 84, 0, 724,
	758, 0, 802, 0, 813, 814, 727, 0, 0, 0,
	296, 299, 0, 302, 0, 898, 0, 0, 0, 981,
	982, 311, 0, 0, 0, 1009, 1020, 165, 0, 0,
	824, 0, 0, 792, 0, 170, 0, 480, 0, 482,
	0, 693, 695, 0, 0, 1455, 1533, 0, 1476, 1477,
	-2, 0, 1421, 1517, 1519, 0, 1133, 1122, 1196, 772,
	776, 0, 0, 830, 0, 0, 0, 819, 820, 759,
	0, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	722, 0, 0, 730, 0, 751, 0, 300, 301, 824,
	0, 824, 0, 983, 984, 0, 1002, 1003, 1005, 1010,
	0, 0, 751, 824, 791, 0, 479, 0, 0, 698,
	699, 0, 0, 0, 0, 1528, 1422, 0, 0, 0,
	783, 835, 0, 0, 0, 817, 818, 815, 0, 826,
	130, 0, 904, 0, 763, 0, 0, 766, 0, 0,
	110, 1758, 108, 0, 0, 0, 807, 809, 731, 759,
	729, 751, 0, 751, 0, 975, 0, 1004, 188, 188,
	759, 751, 188, 481, 483, 1525, 1545, 1534, -2, 1963,
	1761, 0, 1545, 1545, 1520, 1521, 0, 785, 831, 832,
	0, 827, 828, 829, 1708, 786, 787, 796, 823, 830,
	146, 760, 0, 0, 761, 0, 0, 113, 0, 115,
	0, 806, 0, 724, 728, 759, 0, 759, 0, 1193,
	167, 168, 789, 759, 169, 1530, 0, 0, 1536, 1537,
	1538, 1539, 1540, 1531, 1532, 778, 833, 0, 834, 0,
	0, 0, 835, 764, 0, 767, 0, 111, 0, 808,
	723, 895, 824, 895, 824, 1001, 790, 0, 1542, 1543,
	0, 0, 836, 0, 839, 840, 0, 837, 815, 0,
	0, 754, 890, 0, 751, 892, 751, 1541, 1544, 1535,
	838, 841, 842, 798, 0, 0, 750, 752, 753, 896,
	759, 759, 759, 0, 895, 895, 765, 0, 891, 893,
	0, 0, 759, 768,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 451, 3, 457, 452, 3,
	462, 463, 455, 453, 467, 454, 464, 456, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 470, 3,
	443, 445, 444, 448, 466, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 460, 3, 461, 458, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 468, 450, 469, 446,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 447, 57786, 449, 57787, 459, 57788, 465, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1092
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1101
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1102
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1104
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1105
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1106
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1107
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1108
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1112
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1121
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1122
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1125
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1127
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1128
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1129
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1130
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1131
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1184
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1210
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1221
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1236
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1240
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1244
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1255
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1267
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1286
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1318
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1322
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1326
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1332
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1336
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1342
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1351
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1362
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1366
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1372
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1380
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1394
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1404
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1415
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1422
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1434
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1441
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1449
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1454
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1458
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1463
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1469
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1477
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1488
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1498
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1508
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1517
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1528
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1534
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1542
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1546
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1560
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1565
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1576
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1580
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1586
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1590
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1597
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1602
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1607
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1612
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1617
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1622
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1627
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1632
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1637
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1647
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1668
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1678
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1685
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1688
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1695
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1704
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1713
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1718
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1725
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1733
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1734
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1738
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1742
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1748
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1756
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1760
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1766
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1770
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1777
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1781
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1785
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1791
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1795
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1821
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1824
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1847
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1851
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1854
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1858
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1862
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1868
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1878
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1915
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1920
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1924
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1930
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1935
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1940
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1945
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1950
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1954
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1970
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1973
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1977
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1981
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1989
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1993
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1999
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2003
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2009
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2013
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2017
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2021
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2027
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2037
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2041
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2045
		{
			sqlVAL.union.val = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2051
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2064
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2065
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2066
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2067
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2077
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2085
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2087
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2090
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2100
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2109
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2117
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2119
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2123
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2126
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2136
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2145
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2153
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2155
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2159
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2162
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2166
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2170
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2174
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2189
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2195
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2200
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2212
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2213
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2215
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2216
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2217
		{
			return helpWith(sqllex, "CREATE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2220
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2221
		{
			return unimplemented(sqllex, "create cast")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2222
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2223
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2224
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2225
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2226
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2227
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2228
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2230
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2231
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2233
		{
			return unimplemented(sqllex, "create operator")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2234
		{
			return unimplemented(sqllex, "create publication")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2235
		{
			return unimplemented(sqllex, "create rule")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2236
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2237
		{
			return unimplemented(sqllex, "create server")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2238
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2239
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2240
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2243
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2244
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2247
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2248
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2251
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2252
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2255
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2256
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2258
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2259
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2260
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2261
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2262
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2264
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2265
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2268
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2269
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2270
		{
			return unimplemented(sqllex, "drop server")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2271
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2272
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2273
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2274
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2278
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2279
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2280
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2281
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2283
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2284
		{
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2285
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2296
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2304
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2308
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2312
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2318
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2322
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2331
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2344
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2350
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2354
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2365
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2377
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2385
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2393
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2403
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2407
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2413
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2424
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2428
		{

			sqlVAL.union.val = nil
		}
	case 311:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2442
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2452
		{
			return helpWith(sqllex, "DELETE")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2455
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2456
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2464
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2467
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2468
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2469
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2470
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2471
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2480
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2481
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2482
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2483
		{
			return helpWith(sqllex, "DROP")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2486
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2487
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2488
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2489
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2490
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2498
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2502
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2505
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2513
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2517
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2520
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2528
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2532
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2535
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2543
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2551
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2558
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2566
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2574
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2581
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2589
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2593
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2596
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2604
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2608
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2611
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2615
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2620
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2643
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2646
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2648
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2652
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2656
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2660
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2664
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2671
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2675
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2678
		{
			return helpWith(sqllex, "DELETE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2680
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2681
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2682
		{
			return helpWith(sqllex, "INSERT")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2683
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2685
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2690
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2695
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2696
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2697
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2702
		{
			return helpWith(sqllex, "DELETE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2704
		{
			return helpWith(sqllex, "INSERT")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2706
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2710
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2711
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2715
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2719
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2729
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2737
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2745
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2749
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2753
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2763
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2770
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2778
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2782
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2786
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2796
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2800
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2804
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2808
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2811
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2831
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2835
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2839
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2842
		{
			return helpWith(sqllex, "GRANT")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2862
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2866
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2870
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2873
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2878
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2882
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2892
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2896
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2910
		{
			return helpWith(sqllex, "RESET")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2911
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2919
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2923
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2926
		{
			return helpWith(sqllex, "RESET")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2934
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2937
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2948
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2951
		{
			return helpWith(sqllex, "USE")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2955
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2956
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2957
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2958
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2962
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2963
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2964
		{
			return helpWith(sqllex, "USE")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2980
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2995
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2998
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3016
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3024
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3028
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3032
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3038
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3042
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3048
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3052
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3056
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3060
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3064
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3075
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3078
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3088
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3104
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3108
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3113
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3130
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3133
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3135
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3138
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3142
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3161
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3168
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3173
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3178
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3183
		{
			return unimplemented(sqllex, "set from current")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3184
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3192
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3197
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3204
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3208
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3214
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3218
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3225
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3246
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3250
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3256
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3260
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3264
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3268
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3272
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3278
		{
			sqlVAL.union.val = tree.Low
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3282
		{
			sqlVAL.union.val = tree.Normal
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3286
		{
			sqlVAL.union.val = tree.High
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3297
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3301
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3305
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3310
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3314
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3327
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3328
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3329
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3330
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3331
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3332
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3334
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3339
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3340
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3342
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3343
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3344
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3346
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3347
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3348
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3349
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3350
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3351
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3352
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3354
		{
			return helpWith(sqllex, "SHOW")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3361
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3362
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3363
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3374
		{
			sqlVAL.str = "client_encoding"
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3377
		{
			sqlVAL.str = "timezone"
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3378
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3392
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3396
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3400
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3411
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3419
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3427
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3434
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3442
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3450
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3457
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3467
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3471
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3474
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3476
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3479
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3487
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3490
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3498
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3502
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3506
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3510
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3513
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3521
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3524
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3537
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3545
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3553
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3556
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3558
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3562
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3566
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3569
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3571
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3575
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3578
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3586
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3589
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3591
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3594
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3602
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3605
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3607
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3610
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3614
		{
			sqlVAL.union.val = true
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3616
		{
			sqlVAL.union.val = true
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3618
		{
			sqlVAL.union.val = false
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3628
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3632
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3635
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3636
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3638
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3642
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3645
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3647
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3655
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3663
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3672
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3675
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3677
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3680
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3682
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3686
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3689
		{
			sqlVAL.union.val = true
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3690
		{
			sqlVAL.union.val = false
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3698
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3701
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3703
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3706
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3714
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3724
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3734
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3737
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3740
		{
			sqlVAL.union.val = true
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3741
		{
			sqlVAL.union.val = false
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3748
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3752
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3755
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3762
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3766
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3769
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3776
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3780
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3788
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3793
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3798
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3802
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3810
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3814
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3818
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3831
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3834
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3842
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3845
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3849
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3853
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3857
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3865
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3873
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3880
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3887
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3891
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3902
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3910
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3916
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3925
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3930
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3934
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3937
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3941
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3948
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3953
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4073
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4077
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4081
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4120
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4124
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4129
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4133
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4142
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4149
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4153
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4165
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4174
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4177
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4213
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4226
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4240
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4241
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4242
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4246
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4257
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4269
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4270
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4271
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4289
		{
			sqlVAL.union.val = true
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = true
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4291
		{
			sqlVAL.union.val = false
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4295
		{
			sqlVAL.union.val = true
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4296
		{
			sqlVAL.union.val = true
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4297
		{
			sqlVAL.union.val = true
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = true
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4299
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4304
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4320
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4326
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4329
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4333
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4342
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4349
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4354
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4359
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4365
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4372
		{
			sqlVAL.str = ""
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4379
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4385
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4392
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4399
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4405
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4409
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4415
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4435
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4449
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4460
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4464
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4470
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4474
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4478
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4482
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4486
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4490
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4494
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4512
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4516
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4520
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4524
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4528
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4532
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4536
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4546
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4550
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4554
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 789:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4561
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4571
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4583
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4593
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4605
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4610
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4616
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4622
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4633
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4643
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4657
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4661
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4667
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4677
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4688
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4692
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4699
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4705
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4716
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4720
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4726
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4732
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4736
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4742
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4746
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4752
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4757
		{
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4758
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4759
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4760
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4761
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4762
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4779
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4783
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4789
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4813
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4817
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4821
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4825
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4834
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4838
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4842
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4846
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4850
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4856
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4862
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4870
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4874
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4878
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4882
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4886
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4892
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4896
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4902
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4921
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4930
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4938
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4942
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4945
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4946
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4949
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4950
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4952
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4953
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4954
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4957
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4959
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4961
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4963
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4964
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4966
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4967
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4969
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4971
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4979
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4982
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4990
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4994
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4997
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5001
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5005
		{
			sqlVAL.union.val = nil
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5015
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5019
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5022
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5027
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5028
		{
		}
	case 879:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5036
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5045
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 881:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5046
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5049
		{
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5050
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5056
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5058
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 886:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5060
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 887:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5062
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5064
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5066
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5082
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5096
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5111
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5125
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5139
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5142
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5143
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5147
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5162
		{
			sqlVAL.union.val = false
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5168
		{
			sqlVAL.union.val = true
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5172
		{
			sqlVAL.union.val = false
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5178
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5182
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5191
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5213
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5214
		{
			sqlVAL.str = ""
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5218
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5222
		{
			sqlVAL.union.val = tree.Descending
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5226
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 909:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5232
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5239
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5243
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5249
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5255
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5263
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5269
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5277
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5283
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5291
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5295
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5300
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5301
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5304
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5305
		{
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5313
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5316
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5326
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5335
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5338
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5346
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5349
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5353
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5354
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5355
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5371
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5374
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5376
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5379
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5389
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5392
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5394
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5397
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5401
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5406
		{
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5407
		{
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5408
		{
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5416
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5423
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5426
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5427
		{
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5431
		{
			sqlVAL.str = ""
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5435
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5439
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5443
		{
			sqlVAL.str = ""
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5449
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5453
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5459
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5463
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5469
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5473
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5486
		{
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5488
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5492
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5497
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5501
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5505
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5511
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5517
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5523
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5527
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 974:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5537
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5547
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5557
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5561
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5565
		{
			sqlVAL.str = ""
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5571
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5575
		{
			sqlVAL.str = ""
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5581
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5585
		{
			sqlVAL.str = ""
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5591
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5595
		{
			sqlVAL.str = ""
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5600
		{
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5601
		{
		}
	case 987:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5613
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 988:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5620
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5627
		{
			return helpWith(sqllex, "INSERT")
		}
	case 990:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5638
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5645
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5649
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5658
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5665
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5669
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5673
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5679
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5683
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5703
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5707
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5711
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5717
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5720
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5721
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5723
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5729
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5734
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5738
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5755
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5767
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5770
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5773
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5779
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5783
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5796
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5799
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5803
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5846
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5852
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5856
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5871
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5875
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5879
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5883
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5887
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5891
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5896
		{
			sqlVAL.union.val = tree.ForLocked{}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5898
		{
			sqlVAL.union.val = tree.ForLocked{Strength: sqlDollar[1].union.lockingStrength(), Targets: sqlDollar[2].union.tableNames()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5903
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5904
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5907
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5908
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5909
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5910
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5913
		{
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5915
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5916
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5921
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5956
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5957
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5958
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5980
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5993
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6007
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6019
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6032
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6041
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6056
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6063
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6075
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6079
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6084
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6090
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6100
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6108
		{
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6109
		{
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6113
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6117
		{
			sqlVAL.union.val = nil
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6122
		{
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6123
		{
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6127
		{
			sqlVAL.union.val = true
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6131
		{
			sqlVAL.union.val = false
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6135
		{
			sqlVAL.union.val = false
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6141
		{
			sqlVAL.union.val = true
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6147
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6152
		{
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6153
		{
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6157
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6161
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6167
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6173
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6177
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6183
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6204
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6209
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6221
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6225
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6229
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6238
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6247
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6259
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6263
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6267
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6276
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6282
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6289
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6298
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6302
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6312
		{
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6313
		{
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6316
		{
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6317
		{
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6334
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6338
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6348
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6367
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6370
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6372
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6384
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6387
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6389
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6395
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6399
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6405
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6409
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6414
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6419
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6425
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6430
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6437
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6442
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6453
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6457
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6461
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6469
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6500
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6514
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6524
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6532
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6541
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6545
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6549
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6560
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6584
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6590
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6594
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6600
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6606
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6612
		{
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6614
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6617
		{
			sqlVAL.union.val = nil
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6618
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6619
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6623
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6627
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6633
		{
			sqlVAL.union.val = true
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6637
		{
			sqlVAL.union.val = false
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6657
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6661
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6665
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6669
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6677
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6683
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6687
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6694
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6700
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6707
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6713
		{
			sqlVAL.str = tree.AstFull
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6717
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6721
		{
			sqlVAL.str = tree.AstRight
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6725
		{
			sqlVAL.str = tree.AstInner
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6731
		{
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6732
		{
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6753
		{
			sqlVAL.str = tree.AstHash
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6757
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6761
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6765
		{
			sqlVAL.str = ""
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6782
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6787
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6788
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6789
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6790
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6794
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6799
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6813
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6817
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6823
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6831
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6841
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6848
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6860
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6873
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6881
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6882
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6892
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6899
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6900
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6902
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6910
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6911
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6922
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6924
		{
			prec, err := sqlDollar[3].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			if prec == 6 {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			} else {
				return unimplementedWithIssue(sqllex, 32564)
			}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6960
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6964
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = types.String
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = types.Name
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6976
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6985
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6989
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6993
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.union.val = types.INet
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7013
		{
			sqlVAL.union.val = types.Oid
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7025
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7056
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7064
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7072
		{
			sqlVAL.union.val = nil
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7079
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7083
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7087
		{
			sqlVAL.union.val = types.Int2
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7091
		{
			sqlVAL.union.val = types.Int2
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = types.Int4
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = types.Int
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = types.Int
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.union.val = types.Int
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7111
		{
			sqlVAL.union.val = types.Float4
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = types.Float4
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = types.Float
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = types.Float
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7131
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7139
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7147
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.union.val = types.Bool
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7159
		{
			sqlVAL.union.val = types.Bool
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7166
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7170
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7174
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7178
		{
			sqlVAL.union.val = types.RegType
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7182
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7188
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7201
		{
			sqlVAL.union.val = types.Float
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7207
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7213
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7235
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7247
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7257
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.union.val = types.String
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7274
		{
			sqlVAL.union.val = true
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7275
		{
			sqlVAL.union.val = false
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7280
		{
			sqlVAL.union.val = types.Date
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7284
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7289
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7296
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7297
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7299
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7307
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7323
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = true
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7333
		{
			sqlVAL.union.val = false
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7334
		{
			sqlVAL.union.val = false
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7338
		{
			sqlVAL.union.val = types.Interval
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7344
		{
			sqlVAL.union.val = tree.Year
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7348
		{
			sqlVAL.union.val = tree.Month
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7352
		{
			sqlVAL.union.val = tree.Day
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7370
		{
			sqlVAL.union.val = tree.Month
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7374
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7378
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7382
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7386
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7390
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7394
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7401
		{
			sqlVAL.union.val = nil
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = tree.Second
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7410
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7434
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7438
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7442
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7446
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7457
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7462
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7466
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7470
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7474
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7478
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7482
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7490
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7494
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7498
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7502
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7506
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7510
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7514
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7518
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7522
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7538
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7542
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7578
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7582
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7606
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7610
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7614
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7618
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7626
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7630
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7638
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7642
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7646
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7650
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7658
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7662
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7666
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7686
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7694
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7701
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7715
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7719
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7731
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7735
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7739
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7743
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7755
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7759
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7763
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7767
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7789
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7801
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7805
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7809
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7813
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7817
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7821
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7825
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7829
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7833
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7837
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7841
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7845
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7849
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7861
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7865
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7869
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7873
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7877
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7881
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7885
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7889
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7893
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7905
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7909
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7923
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7931
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7967
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7971
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7975
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7979
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7983
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7988
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7994
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7997
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7999
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8003
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8007
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8011
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8015
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8024
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8031
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8039
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8048
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8063
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8067
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8071
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8074
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8075
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8087
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8090
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8101
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8108
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8117
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8131
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8137
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8145
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8149
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8155
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8159
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8163
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8167
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8171
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8175
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8179
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8191
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8195
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8199
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8213
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8218
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8220
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8223
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8225
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8228
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8230
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8233
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8238
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8240
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8243
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8245
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8248
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8250
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8254
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8257
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8258
		{
			return unimplemented(sqllex, "treat")
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8260
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8264
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8272
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8279
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8281
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8284
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8289
		{
			return unimplemented(sqllex, "within group")
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8290
		{
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8298
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8305
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8315
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8319
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8325
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8337
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8348
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8368
		{
			sqlVAL.str = ""
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8378
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8384
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8400
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8414
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8427
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8455
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8459
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8463
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8474
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8483
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8487
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8491
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8495
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8500
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8513
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8517
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8524
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8536
		{
			sqlVAL.union.val = tree.Any
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8540
		{
			sqlVAL.union.val = tree.Some
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8544
		{
			sqlVAL.union.val = tree.All
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8549
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8550
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8551
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.union.val = tree.Div
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8553
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8554
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8555
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8556
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8557
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8558
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8559
		{
			sqlVAL.union.val = tree.LT
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8560
		{
			sqlVAL.union.val = tree.GT
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8561
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8562
		{
			sqlVAL.union.val = tree.LE
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8563
		{
			sqlVAL.union.val = tree.GE
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8564
		{
			sqlVAL.union.val = tree.NE
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8568
		{
			sqlVAL.union.val = tree.Like
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8569
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8570
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8571
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8598
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8604
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8608
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8612
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8623
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8627
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8633
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8637
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8644
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8650
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8654
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8660
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8670
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8674
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8680
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8684
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8690
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8694
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8717
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8721
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8725
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8731
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8738
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8742
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8759
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8763
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8767
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8771
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8775
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8781
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8787
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8793
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8797
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8801
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8807
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8819
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8826
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8830
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8836
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8842
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8846
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8853
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8859
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8863
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8870
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8876
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8885
		{
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8886
		{
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8890
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8894
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8900
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8909
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8913
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8917
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8925
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8929
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8935
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8958
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8966
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8989
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8998
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9002
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9006
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9010
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9016
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9028
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9032
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9041
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9052
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9061
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9069
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9166
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9173
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9177
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9181
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9195
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9199
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9203
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9216
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9234
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9247
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9254
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9279
		{
			sqlVAL.str = ""
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9285
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9289
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
