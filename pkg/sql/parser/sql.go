// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:558
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MYSQLDUMP = lex.MYSQLDUMP
const MYSQLOUTFILE = lex.MYSQLOUTFILE
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PGCOPY = lex.PGCOPY
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MYSQLDUMP",
	"MYSQLOUTFILE",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PGCOPY",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8328

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	428, 57,
	-2, 901,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	168, 736,
	-2, 0,
	-1, 60,
	102, 901,
	174, 901,
	376, 901,
	377, 901,
	-2, 0,
	-1, 74,
	114, 875,
	127, 875,
	182, 875,
	208, 875,
	239, 875,
	247, 875,
	373, 875,
	-2, 864,
	-1, 110,
	198, 553,
	363, 553,
	-2, 0,
	-1, 115,
	4, 903,
	20, 903,
	21, 903,
	22, 903,
	23, 903,
	25, 903,
	30, 903,
	35, 903,
	36, 903,
	37, 903,
	38, 903,
	39, 903,
	40, 903,
	41, 903,
	42, 903,
	43, 903,
	44, 903,
	46, 903,
	47, 903,
	48, 903,
	49, 903,
	50, 903,
	51, 903,
	54, 903,
	55, 903,
	56, 903,
	57, 903,
	59, 903,
	60, 903,
	64, 903,
	65, 903,
	66, 903,
	67, 903,
	68, 903,
	70, 903,
	71, 903,
	72, 903,
	73, 903,
	75, 903,
	77, 903,
	78, 903,
	81, 903,
	82, 903,
	83, 903,
	91, 903,
	92, 903,
	93, 903,
	94, 903,
	95, 903,
	96, 903,
	97, 903,
	98, 903,
	100, 903,
	102, 903,
	104, 903,
	107, 903,
	108, 903,
	110, 903,
	111, 903,
	115, 903,
	116, 903,
	117, 903,
	118, 903,
	119, 903,
	120, 903,
	121, 903,
	122, 903,
	123, 903,
	124, 903,
	132, 903,
	133, 903,
	134, 903,
	135, 903,
	136, 903,
	137, 903,
	139, 903,
	141, 903,
	145, 903,
	147, 903,
	148, 903,
	150, 903,
	152, 903,
	153, 903,
	154, 903,
	155, 903,
	156, 903,
	157, 903,
	158, 903,
	159, 903,
	160, 903,
	163, 903,
	164, 903,
	169, 903,
	170, 903,
	171, 903,
	174, 903,
	175, 903,
	176, 903,
	177, 903,
	178, 903,
	179, 903,
	180, 903,
	181, 903,
	183, 903,
	185, 903,
	188, 903,
	189, 903,
	190, 903,
	192, 903,
	193, 903,
	196, 903,
	197, 903,
	198, 903,
	200, 903,
	201, 903,
	203, 903,
	205, 903,
	206, 903,
	209, 903,
	210, 903,
	213, 903,
	215, 903,
	218, 903,
	219, 903,
	220, 903,
	221, 903,
	222, 903,
	223, 903,
	224, 903,
	226, 903,
	227, 903,
	228, 903,
	229, 903,
	234, 903,
	235, 903,
	236, 903,
	237, 903,
	238, 903,
	240, 903,
	241, 903,
	243, 903,
	244, 903,
	245, 903,
	248, 903,
	249, 903,
	251, 903,
	253, 903,
	254, 903,
	255, 903,
	256, 903,
	257, 903,
	258, 903,
	259, 903,
	260, 903,
	261, 903,
	263, 903,
	264, 903,
	265, 903,
	266, 903,
	267, 903,
	269, 903,
	270, 903,
	271, 903,
	272, 903,
	273, 903,
	274, 903,
	275, 903,
	276, 903,
	277, 903,
	279, 903,
	280, 903,
	281, 903,
	282, 903,
	283, 903,
	285, 903,
	286, 903,
	287, 903,
	288, 903,
	289, 903,
	290, 903,
	291, 903,
	293, 903,
	295, 903,
	296, 903,
	297, 903,
	298, 903,
	299, 903,
	300, 903,
	302, 903,
	303, 903,
	304, 903,
	305, 903,
	306, 903,
	307, 903,
	308, 903,
	310, 903,
	311, 903,
	312, 903,
	313, 903,
	314, 903,
	315, 903,
	316, 903,
	317, 903,
	318, 903,
	320, 903,
	321, 903,
	322, 903,
	323, 903,
	325, 903,
	326, 903,
	327, 903,
	328, 903,
	330, 903,
	331, 903,
	332, 903,
	333, 903,
	334, 903,
	335, 903,
	336, 903,
	337, 903,
	338, 903,
	339, 903,
	340, 903,
	341, 903,
	343, 903,
	344, 903,
	346, 903,
	347, 903,
	348, 903,
	349, 903,
	350, 903,
	351, 903,
	352, 903,
	353, 903,
	354, 903,
	355, 903,
	357, 903,
	358, 903,
	359, 903,
	360, 903,
	363, 903,
	364, 903,
	365, 903,
	366, 903,
	368, 903,
	369, 903,
	371, 903,
	372, 903,
	375, 903,
	376, 903,
	377, 903,
	378, 903,
	380, 903,
	382, 903,
	383, 903,
	384, 903,
	385, 903,
	386, 903,
	387, 903,
	390, 903,
	391, 903,
	396, 903,
	397, 903,
	398, 903,
	399, 903,
	400, 903,
	401, 903,
	-2, 0,
	-1, 136,
	114, 874,
	127, 874,
	182, 874,
	208, 874,
	239, 874,
	247, 874,
	373, 874,
	-2, 867,
	-1, 141,
	1, 797,
	188, 797,
	269, 797,
	274, 797,
	427, 797,
	428, 797,
	-2, 0,
	-1, 143,
	1, 797,
	427, 797,
	428, 797,
	-2, 0,
	-1, 144,
	1, 797,
	427, 797,
	428, 797,
	-2, 0,
	-1, 145,
	1, 801,
	427, 801,
	428, 801,
	-2, 0,
	-1, 171,
	4, 910,
	5, 910,
	6, 910,
	7, 910,
	8, 910,
	9, 910,
	20, 910,
	21, 910,
	22, 910,
	23, 910,
	25, 910,
	30, 910,
	31, 910,
	35, 910,
	36, 910,
	37, 910,
	38, 910,
	39, 910,
	40, 910,
	41, 910,
	42, 910,
	43, 910,
	44, 910,
	46, 910,
	47, 910,
	48, 910,
	49, 910,
	50, 910,
	51, 910,
	52, 910,
	53, 910,
	54, 910,
	55, 910,
	56, 910,
	57, 910,
	59, 910,
	60, 910,
	62, 910,
	64, 910,
	65, 910,
	66, 910,
	67, 910,
	68, 910,
	70, 910,
	71, 910,
	72, 910,
	73, 910,
	75, 910,
	77, 910,
	78, 910,
	80, 910,
	81, 910,
	82, 910,
	83, 910,
	84, 910,
	85, 910,
	86, 910,
	87, 910,
	88, 910,
	89, 910,
	90, 910,
	91, 910,
	92, 910,
	93, 910,
	94, 910,
	95, 910,
	96, 910,
	97, 910,
	98, 910,
	99, 910,
	100, 910,
	102, 910,
	104, 910,
	107, 910,
	108, 910,
	110, 910,
	111, 910,
	115, 910,
	116, 910,
	117, 910,
	118, 910,
	119, 910,
	120, 910,
	121, 910,
	122, 910,
	123, 910,
	124, 910,
	125, 910,
	126, 910,
	132, 910,
	133, 910,
	134, 910,
	135, 910,
	136, 910,
	137, 910,
	139, 910,
	141, 910,
	144, 910,
	145, 910,
	147, 910,
	148, 910,
	150, 910,
	152, 910,
	153, 910,
	154, 910,
	155, 910,
	156, 910,
	157, 910,
	158, 910,
	159, 910,
	160, 910,
	161, 910,
	163, 910,
	164, 910,
	169, 910,
	170, 910,
	171, 910,
	173, 910,
	174, 910,
	175, 910,
	176, 910,
	177, 910,
	178, 910,
	179, 910,
	180, 910,
	181, 910,
	183, 910,
	185, 910,
	186, 910,
	187, 910,
	188, 910,
	189, 910,
	190, 910,
	191, 910,
	192, 910,
	193, 910,
	196, 910,
	197, 910,
	198, 910,
	200, 910,
	201, 910,
	203, 910,
	204, 910,
	205, 910,
	206, 910,
	207, 910,
	209, 910,
	210, 910,
	213, 910,
	215, 910,
	216, 910,
	217, 910,
	218, 910,
	219, 910,
	220, 910,
	221, 910,
	222, 910,
	223, 910,
	224, 910,
	225, 910,
	226, 910,
	227, 910,
	228, 910,
	229, 910,
	230, 910,
	232, 910,
	233, 910,
	234, 910,
	235, 910,
	236, 910,
	237, 910,
	238, 910,
	240, 910,
	241, 910,
	244, 910,
	245, 910,
	248, 910,
	249, 910,
	250, 910,
	251, 910,
	252, 910,
	253, 910,
	254, 910,
	255, 910,
	256, 910,
	257, 910,
	258, 910,
	259, 910,
	260, 910,
	261, 910,
	263, 910,
	264, 910,
	265, 910,
	266, 910,
	267, 910,
	269, 910,
	270, 910,
	271, 910,
	272, 910,
	273, 910,
	274, 910,
	275, 910,
	276, 910,
	277, 910,
	279, 910,
	280, 910,
	281, 910,
	282, 910,
	283, 910,
	285, 910,
	286, 910,
	287, 910,
	288, 910,
	289, 910,
	290, 910,
	291, 910,
	293, 910,
	294, 910,
	295, 910,
	296, 910,
	297, 910,
	298, 910,
	299, 910,
	300, 910,
	302, 910,
	303, 910,
	304, 910,
	305, 910,
	306, 910,
	307, 910,
	308, 910,
	310, 910,
	311, 910,
	312, 910,
	313, 910,
	314, 910,
	315, 910,
	316, 910,
	317, 910,
	318, 910,
	319, 910,
	320, 910,
	321, 910,
	322, 910,
	323, 910,
	324, 910,
	325, 910,
	326, 910,
	327, 910,
	328, 910,
	330, 910,
	331, 910,
	332, 910,
	333, 910,
	334, 910,
	335, 910,
	336, 910,
	337, 910,
	338, 910,
	339, 910,
	340, 910,
	341, 910,
	343, 910,
	344, 910,
	346, 910,
	347, 910,
	348, 910,
	349, 910,
	350, 910,
	351, 910,
	352, 910,
	353, 910,
	354, 910,
	355, 910,
	357, 910,
	358, 910,
	359, 910,
	360, 910,
	363, 910,
	364, 910,
	365, 910,
	366, 910,
	367, 910,
	368, 910,
	369, 910,
	371, 910,
	372, 910,
	375, 910,
	376, 910,
	377, 910,
	378, 910,
	379, 910,
	380, 910,
	382, 910,
	383, 910,
	384, 910,
	385, 910,
	386, 910,
	387, 910,
	390, 910,
	391, 910,
	396, 910,
	397, 910,
	398, 910,
	399, 910,
	400, 910,
	401, 910,
	402, 910,
	410, 910,
	415, 910,
	416, 910,
	417, 910,
	424, 910,
	430, 910,
	-2, 0,
	-1, 174,
	1, 57,
	428, 57,
	-2, 901,
	-1, 207,
	426, 1482,
	429, 1482,
	-2, 596,
	-1, 208,
	426, 1484,
	429, 1484,
	-2, 597,
	-1, 209,
	426, 1483,
	429, 1483,
	-2, 598,
	-1, 210,
	429, 1424,
	-2, 599,
	-1, 623,
	143, 1598,
	361, 1598,
	407, 1598,
	426, 1598,
	-2, 0,
	-1, 624,
	143, 1521,
	361, 1521,
	407, 1521,
	426, 1521,
	-2, 0,
	-1, 626,
	143, 1675,
	361, 1675,
	407, 1675,
	426, 1675,
	-2, 0,
	-1, 628,
	143, 1704,
	361, 1704,
	407, 1704,
	426, 1704,
	-2, 0,
	-1, 635,
	143, 1605,
	361, 1605,
	407, 1605,
	426, 1605,
	-2, 425,
	-1, 670,
	1, 525,
	423, 525,
	425, 525,
	427, 525,
	428, 525,
	-2, 0,
	-1, 671,
	1, 595,
	140, 595,
	423, 595,
	425, 595,
	427, 595,
	428, 595,
	-2, 0,
	-1, 677,
	1, 539,
	423, 539,
	425, 539,
	427, 539,
	428, 539,
	-2, 0,
	-1, 679,
	1, 543,
	423, 543,
	425, 543,
	427, 543,
	428, 543,
	-2, 0,
	-1, 682,
	1, 554,
	423, 554,
	425, 554,
	427, 554,
	428, 554,
	-2, 0,
	-1, 683,
	1, 560,
	423, 560,
	425, 560,
	427, 560,
	428, 560,
	-2, 0,
	-1, 684,
	1, 563,
	423, 563,
	425, 563,
	427, 563,
	428, 563,
	-2, 0,
	-1, 688,
	1, 577,
	423, 577,
	425, 577,
	427, 577,
	428, 577,
	-2, 0,
	-1, 689,
	1, 579,
	423, 579,
	425, 579,
	427, 579,
	428, 579,
	-2, 0,
	-1, 717,
	127, 914,
	208, 914,
	239, 914,
	-2, 870,
	-1, 725,
	127, 913,
	208, 913,
	239, 913,
	-2, 868,
	-1, 752,
	424, 1779,
	-2, 1196,
	-1, 753,
	424, 1780,
	-2, 1197,
	-1, 782,
	424, 1476,
	-2, 1467,
	-1, 783,
	5, 1052,
	424, 1491,
	-2, 1482,
	-1, 784,
	424, 1492,
	-2, 1483,
	-1, 791,
	5, 1036,
	-2, 1512,
	-1, 792,
	5, 1037,
	-2, 1516,
	-1, 793,
	5, 1038,
	-2, 1515,
	-1, 794,
	5, 1039,
	-2, 1700,
	-1, 795,
	5, 1040,
	-2, 1607,
	-1, 796,
	5, 1041,
	-2, 1668,
	-1, 797,
	5, 1042,
	-2, 1670,
	-1, 798,
	5, 1043,
	-2, 1671,
	-1, 799,
	5, 1044,
	-2, 1672,
	-1, 800,
	5, 1045,
	-2, 1680,
	-1, 801,
	5, 1046,
	-2, 1712,
	-1, 802,
	5, 1047,
	-2, 1575,
	-1, 803,
	5, 1048,
	-2, 1511,
	-1, 804,
	5, 1049,
	-2, 1615,
	-1, 805,
	5, 1050,
	-2, 1616,
	-1, 806,
	5, 1051,
	-2, 1579,
	-1, 807,
	5, 1100,
	424, 1100,
	-2, 1746,
	-1, 827,
	5, 1073,
	-2, 1513,
	-1, 828,
	5, 1091,
	-2, 1541,
	-1, 830,
	5, 1065,
	-2, 1562,
	-1, 831,
	5, 1066,
	-2, 1563,
	-1, 832,
	5, 1057,
	-2, 1578,
	-1, 833,
	5, 1058,
	-2, 1580,
	-1, 834,
	5, 1059,
	-2, 1581,
	-1, 835,
	5, 1060,
	-2, 1582,
	-1, 836,
	5, 1024,
	-2, 1588,
	-1, 837,
	5, 1025,
	-2, 1589,
	-1, 838,
	5, 1088,
	-2, 1690,
	-1, 839,
	5, 1098,
	-2, 1702,
	-1, 840,
	5, 1063,
	-2, 1726,
	-1, 841,
	5, 1090,
	-2, 1727,
	-1, 842,
	5, 1072,
	-2, 1728,
	-1, 843,
	5, 1090,
	-2, 1729,
	-1, 844,
	5, 1090,
	-2, 1730,
	-1, 845,
	5, 1055,
	-2, 1733,
	-1, 846,
	5, 1055,
	-2, 1734,
	-1, 849,
	5, 1080,
	-2, 1738,
	-1, 851,
	5, 1056,
	-2, 1744,
	-1, 852,
	5, 1061,
	-2, 1745,
	-1, 854,
	5, 1055,
	-2, 1750,
	-1, 857,
	5, 1064,
	-2, 1755,
	-1, 858,
	5, 1062,
	-2, 1757,
	-1, 860,
	5, 1092,
	-2, 1759,
	-1, 861,
	5, 1094,
	-2, 1760,
	-1, 862,
	5, 1096,
	-2, 1761,
	-1, 865,
	5, 1087,
	-2, 1765,
	-1, 935,
	424, 1491,
	-2, 1482,
	-1, 950,
	285, 1464,
	417, 1464,
	-2, 1463,
	-1, 1100,
	258, 899,
	-2, 722,
	-1, 1109,
	242, 1486,
	-2, 0,
	-1, 1152,
	1, 292,
	423, 292,
	425, 292,
	427, 292,
	428, 292,
	-2, 873,
	-1, 1155,
	4, 1764,
	10, 1764,
	11, 1764,
	13, 1764,
	14, 1764,
	15, 1764,
	16, 1764,
	17, 1764,
	18, 1764,
	20, 1764,
	21, 1764,
	22, 1764,
	23, 1764,
	25, 1764,
	28, 1764,
	30, 1764,
	32, 1764,
	35, 1764,
	36, 1764,
	37, 1764,
	38, 1764,
	39, 1764,
	40, 1764,
	41, 1764,
	42, 1764,
	43, 1764,
	44, 1764,
	46, 1764,
	47, 1764,
	48, 1764,
	49, 1764,
	50, 1764,
	51, 1764,
	54, 1764,
	55, 1764,
	56, 1764,
	57, 1764,
	59, 1764,
	60, 1764,
	61, 1764,
	64, 1764,
	65, 1764,
	66, 1764,
	67, 1764,
	68, 1764,
	69, 1764,
	70, 1764,
	71, 1764,
	72, 1764,
	73, 1764,
	75, 1764,
	76, 1764,
	77, 1764,
	78, 1764,
	80, 1764,
	81, 1764,
	82, 1764,
	83, 1764,
	91, 1764,
	92, 1764,
	93, 1764,
	94, 1764,
	95, 1764,
	96, 1764,
	97, 1764,
	98, 1764,
	100, 1764,
	102, 1764,
	104, 1764,
	107, 1764,
	108, 1764,
	110, 1764,
	111, 1764,
	115, 1764,
	116, 1764,
	117, 1764,
	118, 1764,
	119, 1764,
	120, 1764,
	121, 1764,
	122, 1764,
	123, 1764,
	124, 1764,
	128, 1764,
	129, 1764,
	130, 1764,
	131, 1764,
	132, 1764,
	133, 1764,
	134, 1764,
	135, 1764,
	136, 1764,
	137, 1764,
	138, 1764,
	139, 1764,
	141, 1764,
	144, 1764,
	145, 1764,
	147, 1764,
	148, 1764,
	150, 1764,
	152, 1764,
	153, 1764,
	154, 1764,
	155, 1764,
	156, 1764,
	157, 1764,
	158, 1764,
	159, 1764,
	160, 1764,
	161, 1764,
	162, 1764,
	163, 1764,
	164, 1764,
	165, 1764,
	166, 1764,
	167, 1764,
	169, 1764,
	170, 1764,
	171, 1764,
	173, 1764,
	174, 1764,
	175, 1764,
	176, 1764,
	177, 1764,
	178, 1764,
	179, 1764,
	180, 1764,
	181, 1764,
	183, 1764,
	185, 1764,
	186, 1764,
	187, 1764,
	188, 1764,
	189, 1764,
	190, 1764,
	191, 1764,
	192, 1764,
	193, 1764,
	194, 1764,
	195, 1764,
	196, 1764,
	197, 1764,
	198, 1764,
	200, 1764,
	201, 1764,
	203, 1764,
	204, 1764,
	205, 1764,
	206, 1764,
	207, 1764,
	209, 1764,
	210, 1764,
	213, 1764,
	214, 1764,
	215, 1764,
	218, 1764,
	219, 1764,
	220, 1764,
	221, 1764,
	222, 1764,
	223, 1764,
	224, 1764,
	225, 1764,
	226, 1764,
	227, 1764,
	228, 1764,
	229, 1764,
	232, 1764,
	234, 1764,
	235, 1764,
	236, 1764,
	237, 1764,
	238, 1764,
	240, 1764,
	241, 1764,
	244, 1764,
	245, 1764,
	246, 1764,
	248, 1764,
	249, 1764,
	251, 1764,
	253, 1764,
	254, 1764,
	255, 1764,
	256, 1764,
	257, 1764,
	258, 1764,
	259, 1764,
	260, 1764,
	261, 1764,
	263, 1764,
	264, 1764,
	265, 1764,
	266, 1764,
	267, 1764,
	269, 1764,
	270, 1764,
	271, 1764,
	272, 1764,
	273, 1764,
	274, 1764,
	275, 1764,
	276, 1764,
	277, 1764,
	279, 1764,
	280, 1764,
	281, 1764,
	282, 1764,
	283, 1764,
	284, 1764,
	285, 1764,
	286, 1764,
	287, 1764,
	288, 1764,
	289, 1764,
	290, 1764,
	291, 1764,
	293, 1764,
	294, 1764,
	295, 1764,
	296, 1764,
	297, 1764,
	298, 1764,
	299, 1764,
	300, 1764,
	301, 1764,
	302, 1764,
	303, 1764,
	304, 1764,
	305, 1764,
	306, 1764,
	307, 1764,
	308, 1764,
	310, 1764,
	311, 1764,
	312, 1764,
	313, 1764,
	314, 1764,
	315, 1764,
	316, 1764,
	317, 1764,
	318, 1764,
	320, 1764,
	321, 1764,
	322, 1764,
	323, 1764,
	324, 1764,
	325, 1764,
	326, 1764,
	327, 1764,
	328, 1764,
	330, 1764,
	331, 1764,
	332, 1764,
	333, 1764,
	334, 1764,
	335, 1764,
	336, 1764,
	337, 1764,
	338, 1764,
	339, 1764,
	340, 1764,
	341, 1764,
	343, 1764,
	344, 1764,
	346, 1764,
	347, 1764,
	348, 1764,
	349, 1764,
	350, 1764,
	351, 1764,
	352, 1764,
	353, 1764,
	354, 1764,
	355, 1764,
	357, 1764,
	358, 1764,
	359, 1764,
	360, 1764,
	363, 1764,
	364, 1764,
	365, 1764,
	366, 1764,
	368, 1764,
	369, 1764,
	371, 1764,
	372, 1764,
	375, 1764,
	376, 1764,
	377, 1764,
	378, 1764,
	380, 1764,
	382, 1764,
	383, 1764,
	384, 1764,
	385, 1764,
	386, 1764,
	387, 1764,
	390, 1764,
	391, 1764,
	396, 1764,
	397, 1764,
	398, 1764,
	399, 1764,
	400, 1764,
	401, 1764,
	402, 1764,
	403, 1764,
	405, 1764,
	406, 1764,
	407, 1764,
	408, 1764,
	409, 1764,
	410, 1764,
	412, 1764,
	413, 1764,
	414, 1764,
	415, 1764,
	416, 1764,
	417, 1764,
	418, 1764,
	419, 1764,
	420, 1764,
	422, 1764,
	425, 1764,
	426, 1764,
	429, 1764,
	430, 1764,
	-2, 0,
	-1, 1174,
	143, 1675,
	361, 1675,
	407, 1675,
	426, 1675,
	-2, 0,
	-1, 1207,
	143, 1704,
	361, 1704,
	407, 1704,
	426, 1704,
	-2, 0,
	-1, 1208,
	188, 809,
	269, 809,
	274, 809,
	-2, 412,
	-1, 1287,
	127, 913,
	208, 913,
	239, 913,
	-2, 871,
	-1, 1371,
	114, 875,
	127, 875,
	182, 875,
	208, 875,
	239, 875,
	247, 875,
	373, 875,
	-2, 1239,
	-1, 1421,
	425, 1359,
	-2, 0,
	-1, 1429,
	188, 809,
	269, 809,
	274, 809,
	-2, 804,
	-1, 1463,
	114, 875,
	127, 875,
	182, 875,
	208, 875,
	239, 875,
	247, 875,
	373, 875,
	-2, 983,
	-1, 1670,
	188, 809,
	269, 809,
	274, 809,
	-2, 414,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1135,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1136,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1137,
	-1, 1783,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1138,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1139,
	-1, 1785,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1140,
	-1, 1786,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1141,
	-1, 1787,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1142,
	-1, 1799,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1154,
	-1, 1800,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1155,
	-1, 1801,
	13, 0,
	14, 0,
	15, 0,
	76, 0,
	194, 0,
	195, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1156,
	-1, 1804,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1161,
	-1, 1810,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1163,
	-1, 1812,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1167,
	-1, 1813,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1168,
	-1, 1814,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1169,
	-1, 1815,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1170,
	-1, 1896,
	5, 1052,
	143, 1370,
	424, 1491,
	-2, 1482,
	-1, 1897,
	143, 1371,
	-2, 1722,
	-1, 1898,
	143, 1372,
	-2, 1602,
	-1, 1899,
	143, 1373,
	-2, 1542,
	-1, 1900,
	143, 1374,
	-2, 1570,
	-1, 1901,
	143, 1375,
	-2, 1601,
	-1, 1902,
	143, 1376,
	-2, 1667,
	-1, 1976,
	1, 984,
	80, 984,
	114, 984,
	127, 984,
	144, 984,
	149, 984,
	151, 984,
	173, 984,
	182, 984,
	191, 984,
	204, 984,
	208, 984,
	225, 984,
	239, 984,
	242, 984,
	247, 984,
	292, 984,
	294, 984,
	373, 984,
	381, 984,
	393, 984,
	394, 984,
	404, 984,
	423, 984,
	425, 984,
	427, 984,
	428, 984,
	429, 984,
	-2, 983,
	-1, 1981,
	424, 1468,
	-2, 1480,
	-1, 2063,
	425, 1429,
	429, 1429,
	-2, 1456,
	-1, 2189,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1162,
	-1, 2190,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1164,
	-1, 2195,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1165,
	-1, 2426,
	258, 899,
	-2, 722,
	-1, 2493,
	188, 809,
	269, 809,
	274, 809,
	-2, 411,
	-1, 2508,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1166,
	-1, 2513,
	186, 0,
	187, 0,
	232, 0,
	-2, 1184,
	-1, 2574,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1214,
	-1, 2575,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1215,
	-1, 2576,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1216,
	-1, 2580,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1220,
	-1, 2581,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1221,
	-1, 2582,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1222,
	-1, 2624,
	424, 1469,
	-2, 1481,
	-1, 2735,
	186, 0,
	187, 0,
	232, 0,
	-2, 1185,
	-1, 2738,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1188,
	-1, 2739,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1190,
	-1, 2883,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1189,
	-1, 2884,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1191,
	-1, 2894,
	186, 0,
	-2, 1223,
	-1, 2982,
	186, 0,
	-2, 1224,
	-1, 3078,
	38, 0,
	161, 0,
	207, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1725,
}

const sqlPrivate = 57344

const sqlLast = 59428

var sqlAct = [...]int{

	784, 1445, 2836, 3077, 3086, 3054, 3140, 2670, 2922, 2090,
	3056, 3087, 3041, 3088, 3053, 2119, 2544, 1142, 2911, 2986,
	2098, 3076, 2850, 2874, 1767, 2441, 2183, 1084, 2682, 1600,
	2687, 2633, 1827, 2806, 1058, 954, 2791, 2433, 726, 2692,
	2634, 209, 1968, 2464, 2446, 2225, 498, 2065, 2898, 2087,
	2061, 1458, 2466, 498, 1456, 1290, 1376, 2435, 760, 1936,
	498, 2343, 2223, 498, 1175, 2332, 498, 209, 2290, 498,
	498, 2308, 1964, 970, 1601, 1138, 498, 1437, 1495, 1548,
	1557, 1554, 2064, 1106, 498, 493, 2099, 1545, 947, 1549,
	1993, 2769, 2319, 2597, 548, 2046, 1969, 1466, 2987, 2289,
	1839, 964, 1758, 1379, 1753, 2445, 2179, 2408, 1517, 1546,
	1849, 544, 1511, 2020, 1824, 1476, 734, 130, 1984, 1474,
	1971, 569, 28, 73, 767, 1210, 1695, 920, 583, 1438,
	1933, 2021, 2837, 1867, 2047, 1409, 1407, 1861, 2062, 1153,
	956, 2092, 742, 1176, 1125, 1135, 2068, 1429, 613, 210,
	211, 1892, 1447, 923, 1956, 633, 1840, 1366, 902, 1289,
	1291, 1564, 775, 1122, 1694, 1062, 498, 498, 1941, 1487,
	136, 925, 900, 586, 928, 1428, 2210, 130, 1145, 662,
	541, 2613, 627, 725, 2614, 1295, 598, 2120, 3167, 137,
	1572, 1572, 1950, 2091, 205, 1572, 2048, 606, 498, 498,
	498, 959, 498, 498, 973, 973, 3161, 591, 1151, 730,
	1950, 3160, 3137, 498, 498, 1950, 2805, 2483, 3134, 3112,
	3106, 1584, 1526, 2805, 1950, 730, 3105, 3102, 3099, 2452,
	1950, 3103, 3100, 3096, 3074, 3073, 3072, 1526, 1526, 1526,
	1584, 3071, 3036, 1570, 3023, 1584, 2132, 3016, 1526, 3014,
	3012, 2805, 2984, 2805, 2805, 2967, 2132, 2048, 1457, 2708,
	2957, 600, 731, 2506, 2805, 2453, 2421, 740, 2350, 2262,
	2263, 917, 2280, 2281, 2282, 2952, 2950, 2940, 967, 1526,
	2805, 1526, 2600, 1950, 2939, 950, 903, 903, 1526, 2932,
	2931, 130, 1520, 1526, 2805, 2904, 28, 1864, 2885, 1526,
	2831, 718, 2132, 2827, 1950, 2804, 2737, 1950, 2706, 2805,
	2132, 2698, 2699, 2619, 2609, 2699, 1083, 2620, 2610, 735,
	717, 1181, 3037, 2970, 2122, 940, 944, 949, 2277, 2603,
	2522, 2517, 2473, 1950, 1526, 1950, 2413, 2305, 2257, 904,
	2256, 1950, 1950, 2250, 1950, 2216, 2249, 2251, 2150, 495,
	1950, 2217, 1950, 1943, 494, 1865, 2131, 1534, 1526, 1584,
	2132, 2118, 1064, 1063, 2115, 1589, 2057, 1949, 1950, 1588,
	1526, 1950, 1526, 1589, 1193, 2600, 1942, 1306, 1307, 952,
	906, 1673, 907, 1349, 1350, 1351, 2708, 2036, 1982, 1182,
	478, 1950, 2413, 2182, 2161, 481, 1525, 2268, 1433, 1844,
	1061, 174, 1309, 2454, 1173, 1355, 171, 2224, 171, 1172,
	1171, 1170, 545, 1169, 1168, 1167, 478, 2262, 2263, 1866,
	1863, 481, 2455, 1380, 1166, 1165, 1164, 1163, 1308, 1573,
	1573, 2262, 2263, 1162, 1573, 576, 1328, 547, 1161, 1160,
	1159, 1158, 173, 1157, 173, 782, 40, 908, 905, 724,
	723, 722, 721, 720, 716, 715, 714, 713, 1077, 712,
	44, 711, 710, 709, 2262, 2263, 708, 1692, 707, 706,
	702, 701, 1082, 2278, 700, 660, 2277, 659, 658, 657,
	656, 655, 773, 172, 654, 172, 653, 652, 1068, 575,
	1072, 651, 1078, 650, 165, 1331, 1332, 1333, 1334, 649,
	648, 2784, 166, 1182, 647, 1314, 646, 498, 498, 1868,
	498, 959, 959, 498, 645, 644, 498, 643, 577, 498,
	642, 138, 641, 138, 1975, 498, 59, 579, 1346, 1356,
	640, 60, 1336, 1337, 1338, 498, 498, 498, 498, 498,
	959, 959, 639, 638, 637, 2268, 622, 959, 1071, 1377,
	2742, 2452, 1526, 621, 620, 619, 618, 617, 1146, 2268,
	2279, 733, 478, 532, 531, 63, 576, 481, 1580, 1571,
	504, 1065, 503, 1737, 1344, 502, 484, 40, 781, 498,
	483, 1329, 482, 195, 194, 193, 192, 1306, 1307, 191,
	190, 44, 2268, 498, 189, 1099, 188, 1185, 1096, 2262,
	2263, 1862, 187, 186, 1190, 185, 184, 2262, 2263, 1070,
	183, 1075, 1309, 1081, 1076, 182, 498, 1111, 181, 934,
	575, 2278, 180, 171, 179, 2137, 178, 498, 1597, 177,
	176, 175, 2700, 742, 2617, 2278, 3093, 742, 1308, 1942,
	1139, 2346, 2222, 2212, 2262, 2263, 2095, 2171, 2058, 577,
	2051, 1335, 1124, 1882, 1880, 1698, 932, 59, 579, 173,
	1182, 1878, 60, 1459, 2274, 2275, 2276, 959, 1330, 64,
	731, 2273, 2271, 2272, 2264, 2265, 2266, 2267, 2269, 2270,
	1129, 1132, 1876, 2635, 1874, 1302, 3075, 1154, 1473, 1100,
	1103, 1347, 1596, 1383, 1224, 1086, 63, 1067, 139, 66,
	172, 67, 3058, 2977, 498, 2262, 2263, 2953, 2279, 165,
	2921, 2872, 2868, 2768, 2767, 1314, 2973, 166, 1186, 171,
	2971, 2761, 2279, 2754, 2858, 1191, 2753, 2268, 2752, 2748,
	578, 2747, 2746, 110, 2745, 2268, 2720, 2718, 138, 1306,
	1307, 2623, 1336, 1337, 1338, 2594, 2593, 1359, 1360, 1361,
	1362, 1363, 931, 1306, 1307, 173, 1288, 2592, 1218, 2530,
	1372, 2412, 1222, 1287, 1309, 171, 2341, 2416, 1382, 1345,
	2301, 2288, 2268, 2261, 2258, 2255, 1208, 1348, 1309, 1319,
	1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316, 2254, 2252,
	1308, 1329, 1835, 2230, 2229, 2211, 172, 2123, 1976, 1302,
	64, 173, 916, 2278, 1308, 165, 1380, 1387, 1369, 1205,
	1301, 2278, 3165, 166, 1531, 1529, 3148, 3147, 1374, 2273,
	2271, 2272, 2264, 2265, 2266, 2267, 2269, 2270, 1085, 139,
	66, 1286, 67, 2268, 546, 2272, 2264, 2265, 2266, 2267,
	2269, 2270, 172, 1225, 2546, 1232, 3066, 3061, 2278, 3018,
	171, 165, 1306, 1307, 3009, 171, 171, 3008, 2499, 166,
	780, 578, 3004, 3003, 110, 2998, 2995, 1314, 171, 2264,
	2265, 2266, 2267, 2269, 2270, 1693, 2022, 1309, 1330, 2969,
	138, 1314, 731, 2968, 2178, 1829, 173, 2917, 2896, 2845,
	2279, 173, 173, 2841, 1336, 1337, 1338, 498, 2279, 2839,
	2826, 2783, 498, 1308, 173, 718, 2857, 2766, 1336, 1337,
	1338, 1439, 1439, 1439, 1298, 1299, 1303, 1836, 2709, 2685,
	2677, 2676, 2674, 2651, 717, 2650, 2640, 172, 498, 2639,
	2605, 1435, 172, 172, 2512, 2279, 165, 2479, 2471, 2397,
	2381, 165, 165, 1329, 166, 172, 2360, 2359, 2477, 166,
	166, 2304, 2239, 2238, 165, 2235, 1370, 1329, 2204, 1410,
	1415, 2139, 166, 1979, 1961, 138, 2989, 2325, 1948, 1872,
	138, 2094, 1540, 1598, 1472, 1444, 1454, 1467, 1405, 1436,
	1314, 1408, 1411, 138, 1427, 1426, 1421, 1420, 1441, 1442,
	1418, 1318, 1310, 1311, 1312, 1313, 1315, 1316, 1419, 1417,
	1416, 2273, 2271, 2272, 2264, 2265, 2266, 2267, 2269, 2270,
	2271, 2272, 2264, 2265, 2266, 2267, 2269, 2270, 1413, 1412,
	1403, 2871, 903, 2360, 1402, 1401, 1400, 1399, 1398, 1397,
	1330, 1455, 1396, 1395, 930, 1394, 130, 1393, 1392, 1306,
	1307, 1391, 1384, 1369, 1330, 1432, 1204, 1188, 731, 2264,
	2265, 2266, 2267, 2269, 2270, 1183, 1156, 1494, 2475, 1150,
	2740, 959, 498, 1430, 1309, 2717, 2612, 2608, 973, 2215,
	2134, 1962, 1367, 1482, 1434, 1468, 1881, 1879, 1464, 2436,
	2262, 2263, 2149, 1692, 1877, 2863, 498, 973, 498, 498,
	1308, 2711, 2710, 2615, 1461, 2048, 209, 1459, 1424, 1284,
	1518, 2649, 1422, 1199, 1425, 1875, 1692, 1873, 1423, 1692,
	498, 498, 2266, 2267, 2269, 2270, 2974, 498, 1541, 498,
	2972, 498, 2024, 1398, 1398, 498, 2946, 2401, 2148, 2396,
	1679, 2392, 2920, 2380, 1553, 2296, 2295, 1513, 2294, 2293,
	2188, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316,
	1666, 1217, 898, 1306, 1307, 1389, 1221, 959, 1310, 1311,
	1312, 1313, 1315, 1316, 2120, 1550, 2485, 2391, 1507, 2899,
	2091, 2548, 2220, 1850, 1277, 498, 959, 3094, 1309, 1406,
	3104, 209, 498, 498, 959, 3101, 899, 2448, 2629, 3050,
	959, 2683, 1559, 209, 498, 2125, 200, 498, 498, 540,
	511, 1561, 1488, 498, 1308, 3127, 2818, 1656, 3128, 1275,
	1587, 1064, 1063, 1537, 3022, 2151, 1683, 1682, 1263, 1692,
	1689, 742, 742, 2495, 915, 973, 1386, 1524, 1262, 3095,
	3164, 2945, 2944, 1229, 959, 959, 2942, 498, 1986, 1523,
	1986, 2941, 498, 2664, 1124, 1568, 894, 209, 498, 2654,
	498, 1985, 498, 1276, 498, 2659, 498, 1310, 1311, 1312,
	1313, 1315, 1316, 2658, 1668, 1722, 498, 892, 498, 890,
	2626, 2625, 2234, 2233, 888, 2232, 498, 498, 498, 885,
	1563, 1314, 1566, 539, 510, 2231, 1680, 2191, 2121, 2041,
	1544, 2035, 2031, 2012, 1742, 1811, 1747, 1154, 1660, 1431,
	1060, 2835, 1754, 1928, 1927, 498, 1926, 1925, 1769, 973,
	729, 1686, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
	1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1740, 1810, 1691,
	1812, 1813, 1814, 1815, 1591, 1670, 1594, 1205, 1667, 3021,
	1729, 1195, 1595, 1099, 2476, 1590, 1731, 2088, 934, 1838,
	934, 1227, 1734, 1575, 1219, 1592, 1577, 1372, 728, 1579,
	1684, 1759, 1766, 1582, 973, 1696, 2976, 1657, 1489, 2498,
	2045, 1088, 1704, 1261, 1735, 1626, 593, 1700, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 932, 2669, 932, 704, 1826,
	2056, 478, 1702, 1703, 1826, 1486, 481, 2924, 612, 2814,
	1220, 1912, 1687, 1923, 2005, 611, 1707, 1995, 1929, 1934,
	1841, 1226, 498, 692, 498, 1374, 1305, 1490, 1491, 2642,
	1841, 1713, 612, 730, 1854, 478, 1203, 867, 1738, 1316,
	481, 1739, 1196, 739, 3069, 1850, 776, 2802, 973, 498,
	1757, 2135, 2004, 1890, 1567, 1868, 718, 1891, 498, 718,
	718, 498, 1895, 1895, 973, 692, 1906, 1908, 498, 1913,
	1198, 1841, 3127, 2799, 1847, 1749, 498, 3119, 1750, 1751,
	2270, 1693, 2022, 731, 498, 739, 1940, 2028, 1283, 731,
	1864, 931, 1468, 931, 2388, 1274, 498, 1258, 1963, 959,
	1977, 1998, 1973, 1974, 1693, 2022, 2443, 1693, 2022, 2383,
	498, 973, 693, 1837, 2800, 1987, 498, 498, 2494, 1736,
	478, 2052, 1980, 2054, 1539, 481, 2652, 1845, 1983, 1593,
	3150, 498, 478, 1572, 498, 2487, 1953, 481, 505, 1733,
	2812, 1658, 533, 1506, 903, 1259, 2540, 3000, 1865, 1492,
	1312, 1313, 1315, 1316, 693, 1903, 3090, 538, 498, 727,
	498, 2015, 498, 2014, 1509, 498, 750, 498, 1924, 498,
	1937, 498, 498, 1833, 498, 959, 959, 959, 1831, 731,
	959, 950, 1938, 2043, 2029, 2042, 478, 1999, 2001, 498,
	508, 481, 1954, 2113, 2114, 896, 1958, 1959, 895, 2009,
	1946, 1947, 1228, 2007, 594, 2023, 2025, 2026, 2027, 1464,
	2490, 2013, 1866, 1863, 1990, 2014, 1721, 1693, 1690, 886,
	1237, 886, 201, 2030, 521, 2038, 887, 1997, 3143, 515,
	2496, 886, 537, 538, 2180, 2181, 1868, 1477, 2372, 3033,
	1478, 2643, 2053, 694, 2055, 2795, 2109, 1808, 2796, 2813,
	498, 2537, 1404, 508, 1477, 2444, 3118, 1478, 1477, 1484,
	1484, 1478, 2140, 1087, 2660, 1064, 2049, 3034, 3091, 2925,
	1364, 2237, 2948, 2880, 2371, 2111, 2093, 2033, 2093, 1214,
	2104, 1271, 2890, 2798, 2127, 694, 2079, 2400, 2032, 973,
	2116, 498, 515, 2801, 1197, 130, 522, 202, 2097, 2489,
	1446, 498, 1868, 498, 1957, 2443, 130, 2193, 537, 2106,
	1671, 2107, 1825, 2108, 2486, 2538, 196, 2110, 2876, 2117,
	1154, 514, 1967, 1479, 498, 498, 498, 2126, 498, 592,
	2124, 1972, 1510, 1996, 2136, 1481, 1706, 3092, 695, 1843,
	1479, 705, 730, 1822, 1479, 1304, 2144, 498, 2145, 2722,
	2712, 2138, 1481, 2112, 1194, 1202, 1481, 2729, 3089, 540,
	1215, 3126, 1272, 1820, 1450, 1216, 1411, 3124, 1418, 3151,
	1806, 1809, 1573, 930, 535, 930, 696, 2374, 2143, 1408,
	695, 2141, 3117, 2849, 514, 1483, 204, 2488, 2152, 2797,
	774, 1294, 2847, 1453, 1862, 1245, 2085, 2189, 2190, 2376,
	2173, 203, 1483, 2195, 3141, 1868, 1483, 201, 2083, 536,
	2409, 1448, 2875, 1543, 1443, 1192, 1805, 1180, 696, 2881,
	501, 2168, 2208, 2405, 1451, 2170, 130, 1273, 2201, 1522,
	130, 511, 2194, 3156, 498, 540, 2214, 2934, 2933, 199,
	2375, 2915, 2221, 539, 2992, 1449, 509, 2226, 2199, 2764,
	535, 2628, 2356, 534, 2352, 2175, 1293, 2086, 2084, 1562,
	1816, 1552, 2321, 1551, 2240, 478, 2177, 3142, 1817, 507,
	481, 1818, 1484, 2817, 197, 1823, 1547, 2583, 1832, 2207,
	2816, 506, 202, 1542, 934, 536, 1374, 594, 1238, 1484,
	2536, 2075, 1745, 1484, 511, 3042, 1214, 3144, 524, 523,
	2378, 934, 1678, 2016, 2877, 1726, 2227, 2228, 200, 509,
	516, 1674, 2688, 2192, 1452, 510, 2154, 1475, 198, 539,
	1209, 932, 1934, 1934, 1934, 512, 971, 1059, 2156, 534,
	2851, 2916, 507, 1807, 1439, 973, 1239, 1292, 932, 1236,
	1293, 2306, 2316, 731, 506, 2196, 2313, 2314, 2362, 2219,
	2333, 498, 2361, 2186, 498, 1446, 2197, 1701, 2157, 1364,
	2202, 498, 2322, 1676, 498, 498, 973, 3155, 1294, 1514,
	2155, 204, 2060, 516, 498, 498, 498, 1215, 510, 1677,
	498, 2765, 1216, 498, 1746, 2303, 203, 1952, 512, 2336,
	498, 498, 498, 498, 498, 1951, 2329, 2373, 2315, 1480,
	2059, 2320, 2584, 498, 2328, 1819, 2337, 2338, 2327, 2585,
	498, 2815, 2330, 1821, 1121, 2077, 1480, 931, 2340, 1450,
	1480, 1292, 498, 959, 199, 728, 498, 2353, 2017, 2018,
	604, 2310, 973, 2345, 931, 1246, 498, 2334, 2410, 2317,
	2318, 1119, 973, 2323, 597, 581, 2414, 2324, 1453, 973,
	2671, 2298, 2299, 2300, 1110, 768, 2357, 1109, 2165, 197,
	2166, 498, 2307, 498, 3131, 498, 1448, 3, 959, 498,
	959, 959, 959, 2838, 498, 530, 498, 2404, 2770, 1451,
	498, 2335, 2422, 2440, 2598, 498, 2382, 498, 2347, 1871,
	2198, 2913, 2846, 200, 498, 3133, 479, 525, 2200, 884,
	1449, 496, 2895, 198, 2398, 1482, 1214, 1099, 517, 1484,
	2389, 498, 498, 2450, 2763, 543, 959, 2377, 587, 2438,
	2379, 543, 479, 2914, 587, 609, 2439, 2393, 2385, 2387,
	1482, 616, 2386, 498, 2384, 2394, 2668, 1516, 2291, 636,
	742, 742, 2415, 2418, 2344, 2399, 1450, 2481, 2511, 2395,
	2463, 1991, 1915, 742, 1099, 1515, 1281, 2424, 2411, 1518,
	574, 36, 498, 1177, 1268, 1518, 2253, 2203, 2142, 1452,
	2503, 573, 35, 1266, 1754, 1453, 2040, 498, 2011, 1256,
	2507, 2437, 1512, 2508, 1533, 2419, 2480, 1215, 572, 32,
	1471, 2213, 1216, 1955, 2428, 2513, 1120, 2474, 1282, 2456,
	1189, 2390, 2519, 973, 1490, 1491, 1451, 2449, 731, 1254,
	571, 79, 2526, 973, 1991, 2292, 2316, 602, 603, 2169,
	2462, 543, 543, 1118, 2514, 130, 1252, 580, 498, 933,
	485, 595, 596, 570, 78, 2553, 2554, 1250, 2555, 2556,
	2557, 2102, 938, 889, 891, 2559, 2423, 2164, 2425, 2426,
	2427, 2358, 2561, 496, 496, 496, 2146, 965, 496, 2364,
	1723, 2368, 2369, 1710, 1659, 2491, 2492, 1390, 479, 1066,
	1095, 2500, 1991, 2502, 1870, 2549, 130, 2504, 2497, 2532,
	2533, 2534, 3085, 2589, 2590, 567, 23, 2666, 3039, 2493,
	568, 24, 566, 30, 2472, 1521, 1452, 1280, 2558, 930,
	2788, 2518, 594, 1178, 1720, 1267, 1759, 2552, 565, 21,
	2647, 2524, 1248, 2606, 1265, 2645, 930, 563, 20, 498,
	1255, 2627, 1242, 1117, 2432, 1373, 2545, 1759, 2563, 564,
	19, 498, 2430, 2089, 2551, 36, 526, 973, 553, 15,
	2457, 2458, 2459, 1179, 2460, 2461, 35, 2081, 2587, 2560,
	1253, 2632, 2595, 2616, 2080, 2562, 2539, 2541, 2542, 554,
	16, 2611, 2591, 32, 562, 57, 2078, 1251, 561, 56,
	2074, 1586, 552, 55, 560, 12, 551, 50, 1249, 934,
	2588, 1585, 558, 47, 527, 79, 1583, 934, 934, 2596,
	1581, 934, 559, 48, 2599, 550, 49, 2601, 2602, 1578,
	1576, 2604, 557, 7, 498, 498, 1574, 498, 78, 2667,
	2607, 130, 498, 556, 6, 934, 932, 486, 487, 1532,
	528, 973, 529, 973, 932, 932, 959, 2618, 932, 2655,
	1530, 2657, 555, 38, 1519, 1439, 549, 37, 2678, 2631,
	1508, 2661, 1719, 498, 1505, 2662, 2704, 2663, 1493, 1485,
	2665, 2701, 932, 1247, 2525, 1539, 2014, 2434, 2694, 2962,
	23, 2690, 959, 1241, 1116, 24, 2184, 30, 3128, 2469,
	2870, 1296, 2869, 1697, 498, 2964, 2003, 973, 498, 498,
	973, 498, 2689, 21, 2693, 2673, 2672, 2653, 2675, 498,
	2482, 2697, 20, 2684, 912, 2686, 2681, 973, 489, 488,
	2833, 2044, 2680, 2735, 19, 3002, 2039, 2738, 2739, 2034,
	2010, 2695, 931, 15, 2726, 2703, 913, 2691, 582, 2741,
	931, 931, 2731, 2744, 931, 2636, 2719, 2714, 2715, 2702,
	1664, 1665, 2736, 2147, 16, 744, 2185, 498, 2807, 57,
	2751, 2310, 737, 56, 692, 490, 491, 55, 931, 12,
	2723, 50, 1297, 1306, 1307, 1240, 2727, 47, 1306, 1307,
	2979, 1986, 496, 1094, 739, 496, 2771, 48, 496, 2732,
	49, 965, 2002, 1986, 1114, 2707, 2019, 7, 1309, 2724,
	496, 2006, 1300, 3139, 2000, 2037, 2008, 605, 6, 3038,
	496, 496, 496, 496, 965, 2844, 498, 914, 2622, 738,
	2646, 2096, 2648, 2082, 1308, 2073, 973, 38, 973, 1308,
	1939, 37, 1669, 1599, 2470, 3154, 498, 498, 498, 2762,
	2262, 2263, 1306, 1307, 2159, 2158, 1625, 1231, 1377, 2809,
	2716, 498, 1230, 693, 636, 1606, 498, 2543, 498, 2478,
	2713, 498, 498, 498, 498, 498, 2159, 2160, 496, 498,
	498, 959, 1905, 2776, 1860, 973, 2743, 2777, 2349, 959,
	2808, 2810, 2535, 1991, 1688, 2787, 1387, 498, 498, 2778,
	1385, 1200, 2782, 2363, 1270, 2366, 2834, 1269, 2779, 2907,
	959, 2861, 636, 2773, 2774, 2705, 1279, 1278, 2772, 1264,
	498, 1260, 1257, 1243, 1201, 1672, 2840, 897, 703, 498,
	498, 959, 959, 2923, 3049, 690, 2370, 2848, 2855, 1709,
	1244, 1711, 2326, 1960, 3032, 2853, 2749, 2236, 2843, 2985,
	2889, 2879, 1869, 1388, 53, 2883, 2884, 2832, 763, 826,
	2862, 2854, 2828, 973, 2860, 1099, 2852, 2439, 2829, 2789,
	2630, 2067, 2066, 2865, 1625, 1625, 976, 2892, 2893, 2882,
	1681, 2864, 785, 1606, 1606, 1894, 1760, 787, 934, 496,
	1604, 790, 2900, 789, 694, 788, 1605, 1414, 2447, 786,
	1602, 2076, 2100, 680, 1685, 973, 1830, 2447, 1848, 498,
	2218, 498, 1381, 973, 498, 2344, 2897, 755, 1846, 1187,
	1527, 754, 498, 2331, 930, 932, 934, 2888, 973, 2442,
	2621, 2856, 930, 930, 2636, 1744, 930, 2910, 2935, 1535,
	2859, 2176, 2902, 2903, 1741, 2644, 934, 513, 2905, 2259,
	1149, 2901, 2928, 2927, 1921, 2929, 2908, 2906, 934, 2830,
	930, 2721, 934, 932, 1914, 1910, 2926, 934, 498, 2636,
	498, 1285, 1365, 959, 2101, 1223, 2342, 2451, 498, 2133,
	2636, 1752, 911, 2656, 910, 909, 3055, 736, 3052, 695,
	2878, 2949, 1675, 2951, 2153, 2656, 1358, 2955, 759, 2656,
	2311, 973, 2417, 1092, 2656, 3001, 2943, 1357, 2960, 2866,
	2867, 893, 2961, 2936, 2947, 2786, 2966, 2994, 1213, 934,
	498, 931, 2965, 1212, 1211, 2355, 498, 696, 3149, 2959,
	2641, 170, 167, 169, 498, 2975, 2820, 168, 2693, 2993,
	2403, 82, 2996, 2825, 34, 33, 2983, 109, 2978, 108,
	2997, 107, 2991, 106, 105, 2439, 932, 104, 103, 931,
	102, 1834, 498, 498, 1625, 101, 2990, 100, 2988, 498,
	99, 98, 1373, 1606, 97, 96, 95, 1699, 94, 3013,
	959, 3015, 616, 2775, 2999, 498, 2954, 543, 93, 959,
	959, 92, 91, 498, 90, 498, 89, 498, 88, 87,
	2636, 86, 85, 84, 632, 3017, 3026, 3027, 1462, 1603,
	933, 3025, 3020, 496, 3028, 3019, 498, 1920, 2811, 498,
	3045, 498, 629, 973, 81, 3010, 3007, 80, 2821, 2822,
	3057, 31, 26, 113, 2636, 114, 2636, 25, 3064, 77,
	2636, 3062, 76, 3063, 29, 3065, 3047, 3051, 18, 11,
	17, 22, 931, 3070, 2842, 3081, 3081, 135, 498, 3035,
	134, 1768, 133, 3068, 132, 131, 934, 14, 13, 128,
	3067, 129, 3098, 127, 126, 3084, 3082, 3083, 125, 2909,
	124, 123, 498, 2937, 2938, 3108, 934, 10, 3059, 3060,
	498, 3109, 8, 3110, 112, 9, 3097, 2873, 2484, 70,
	3081, 71, 3116, 932, 27, 934, 498, 3114, 3115, 499,
	3113, 43, 42, 41, 111, 161, 160, 1991, 3111, 159,
	3125, 3123, 158, 932, 3122, 154, 157, 1603, 1603, 3057,
	3129, 155, 3135, 3136, 3132, 3130, 1851, 156, 153, 122,
	934, 163, 932, 3138, 162, 151, 148, 479, 150, 152,
	208, 934, 149, 147, 3146, 3145, 2102, 164, 121, 120,
	119, 3081, 118, 3153, 866, 117, 3152, 116, 5, 2,
	1, 1066, 0, 496, 1538, 1496, 208, 932, 0, 0,
	3159, 479, 3162, 3163, 0, 0, 0, 0, 932, 0,
	3168, 0, 1500, 0, 0, 1558, 1558, 0, 576, 931,
	0, 0, 496, 930, 496, 0, 496, 0, 0, 40,
	543, 0, 0, 2636, 0, 0, 0, 0, 0, 931,
	0, 0, 0, 44, 0, 0, 1981, 3157, 3158, 0,
	0, 3006, 0, 0, 1497, 2963, 0, 0, 931, 0,
	0, 930, 0, 0, 0, 3166, 0, 0, 0, 0,
	0, 0, 575, 3024, 0, 0, 0, 0, 0, 0,
	636, 2636, 0, 0, 0, 0, 479, 1066, 587, 0,
	0, 934, 0, 931, 0, 0, 0, 0, 479, 1066,
	0, 577, 965, 496, 931, 0, 0, 0, 636, 59,
	579, 0, 0, 0, 60, 0, 0, 0, 0, 1501,
	0, 934, 0, 0, 0, 934, 0, 934, 932, 0,
	960, 934, 0, 974, 974, 0, 0, 1603, 0, 0,
	0, 0, 636, 0, 0, 0, 0, 496, 63, 2785,
	0, 1991, 479, 496, 930, 496, 0, 496, 2656, 496,
	0, 496, 932, 0, 932, 0, 0, 0, 932, 2819,
	3029, 1724, 3030, 1725, 0, 0, 0, 2824, 0, 1502,
	1503, 496, 496, 496, 0, 961, 0, 0, 975, 975,
	1498, 0, 0, 0, 0, 0, 3046, 0, 0, 0,
	0, 1991, 0, 0, 0, 0, 0, 0, 0, 0,
	636, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	926, 0, 0, 2447, 931, 0, 0, 0, 0, 0,
	0, 0, 934, 0, 0, 0, 0, 0, 0, 0,
	0, 1920, 1920, 0, 0, 0, 0, 0, 0, 0,
	2262, 2263, 64, 2280, 2281, 2282, 0, 0, 931, 3107,
	931, 0, 0, 0, 931, 0, 492, 0, 2734, 2656,
	0, 2162, 0, 0, 0, 0, 0, 0, 0, 1625,
	0, 139, 66, 0, 67, 0, 0, 0, 1606, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 0, 0,
	0, 930, 171, 0, 934, 0, 1306, 1307, 0, 2277,
	2167, 0, 1991, 578, 0, 0, 110, 0, 0, 0,
	0, 930, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1309, 0, 0, 1920, 1920, 1920, 616, 173, 543,
	930, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 934, 0, 933, 0, 0, 1308, 0, 0,
	0, 0, 0, 0, 543, 0, 2802, 0, 0, 0,
	0, 933, 0, 543, 0, 930, 496, 0, 2268, 172,
	0, 0, 0, 1994, 0, 0, 930, 0, 165, 932,
	0, 496, 2799, 0, 0, 2792, 166, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 2790, 0,
	0, 496, 0, 2794, 0, 0, 0, 138, 942, 0,
	1625, 0, 0, 969, 0, 496, 2283, 0, 0, 1606,
	0, 479, 2050, 2800, 1314, 0, 0, 931, 0, 0,
	960, 960, 0, 0, 0, 0, 2063, 0, 0, 1066,
	0, 0, 0, 0, 2278, 0, 0, 0, 0, 0,
	2793, 1336, 1337, 1338, 0, 3005, 0, 0, 0, 960,
	960, 0, 0, 1994, 0, 543, 960, 496, 0, 0,
	496, 0, 496, 0, 496, 931, 496, 496, 0, 965,
	0, 0, 1625, 0, 0, 961, 961, 0, 0, 0,
	0, 1606, 0, 0, 1994, 0, 930, 0, 0, 0,
	1329, 0, 0, 0, 0, 0, 0, 2312, 0, 0,
	0, 0, 0, 0, 961, 961, 0, 0, 0, 1625,
	1625, 961, 0, 0, 0, 0, 0, 0, 1606, 1606,
	930, 2279, 930, 0, 0, 0, 930, 0, 2339, 0,
	1625, 1625, 0, 0, 0, 0, 0, 0, 0, 1606,
	1606, 0, 0, 0, 2795, 587, 0, 2796, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1625, 0, 0, 0, 0,
	0, 0, 0, 2102, 1606, 0, 960, 1330, 0, 0,
	0, 0, 2798, 0, 0, 0, 496, 0, 0, 1920,
	1920, 0, 2801, 0, 0, 0, 1066, 0, 1066, 0,
	0, 0, 0, 0, 2407, 0, 0, 0, 0, 0,
	0, 2407, 1603, 0, 0, 0, 0, 0, 0, 496,
	496, 496, 0, 496, 0, 2274, 2275, 2276, 0, 0,
	0, 961, 2273, 2271, 2272, 2264, 2265, 2266, 2267, 2269,
	2270, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1748, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
	1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
	0, 1920, 0, 0, 0, 0, 0, 0, 2797, 1317,
	1318, 1310, 1311, 1312, 1313, 1315, 1316, 0, 0, 930,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	0, 0, 0, 1108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1066,
	0, 0, 0, 0, 0, 1128, 1128, 1128, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 930, 0, 0,
	0, 0, 0, 1603, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1377, 0, 2521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2528, 0, 0, 0, 0,
	1625, 576, 0, 0, 0, 0, 1916, 0, 0, 1606,
	0, 0, 40, 1184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 2205, 2206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1603, 0, 0, 0, 933,
	0, 0, 0, 0, 0, 575, 0, 933, 933, 0,
	0, 933, 0, 576, 0, 0, 543, 0, 0, 543,
	0, 0, 0, 0, 40, 0, 543, 0, 0, 543,
	543, 0, 1603, 1603, 577, 1462, 0, 0, 44, 496,
	1994, 2351, 59, 579, 0, 1994, 0, 60, 2351, 0,
	0, 0, 0, 1603, 1603, 1994, 2351, 1994, 2351, 2351,
	0, 0, 0, 0, 0, 0, 0, 575, 496, 2624,
	2285, 2286, 2287, 0, 0, 1538, 0, 0, 0, 0,
	0, 63, 0, 0, 0, 0, 0, 496, 1603, 0,
	0, 965, 0, 0, 0, 0, 577, 0, 0, 0,
	0, 496, 0, 0, 59, 579, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1558, 0, 1558, 0,
	496, 0, 0, 0, 496, 0, 0, 0, 0, 496,
	960, 496, 0, 63, 0, 965, 0, 974, 0, 0,
	1994, 0, 543, 0, 0, 0, 0, 0, 0, 1994,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 2467, 1066, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 1066, 0,
	0, 0, 975, 0, 1625, 0, 0, 0, 0, 971,
	0, 0, 1059, 1606, 139, 66, 0, 67, 0, 0,
	0, 975, 0, 0, 0, 0, 0, 2501, 0, 0,
	0, 0, 0, 0, 0, 171, 960, 0, 0, 0,
	0, 0, 496, 0, 0, 0, 578, 64, 0, 110,
	0, 0, 0, 0, 0, 960, 1625, 0, 0, 0,
	208, 0, 0, 960, 0, 1606, 0, 0, 0, 960,
	0, 173, 208, 0, 0, 0, 139, 66, 0, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 0, 2547, 0, 0, 0, 171, 1469, 0,
	0, 0, 0, 1603, 974, 0, 0, 0, 578, 0,
	961, 110, 172, 960, 960, 0, 0, 0, 961, 0,
	0, 165, 0, 0, 961, 0, 208, 0, 0, 166,
	1920, 0, 0, 173, 1625, 0, 0, 0, 0, 0,
	2781, 0, 0, 1606, 0, 2509, 2510, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	1916, 1916, 0, 0, 0, 0, 0, 1920, 961, 961,
	0, 0, 0, 0, 172, 0, 0, 0, 933, 0,
	0, 0, 0, 165, 543, 764, 74, 0, 974, 0,
	0, 166, 0, 0, 0, 0, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 2638, 2564, 2565, 2566,
	2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576,
	2577, 2578, 2579, 2580, 2581, 2582, 1462, 2586, 0, 0,
	0, 0, 0, 975, 0, 0, 74, 0, 1462, 0,
	0, 0, 1462, 1916, 1916, 1916, 0, 1462, 1536, 0,
	0, 0, 1920, 974, 0, 2886, 0, 0, 0, 1994,
	1558, 0, 1558, 0, 0, 0, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1565,
	0, 1565, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2886, 1994, 933,
	0, 0, 0, 0, 0, 1768, 719, 0, 975, 0,
	0, 0, 0, 0, 732, 0, 0, 0, 0, 0,
	1768, 0, 0, 0, 0, 0, 0, 974, 0, 1066,
	0, 0, 0, 965, 496, 0, 496, 0, 0, 0,
	0, 0, 0, 974, 496, 0, 0, 1603, 0, 921,
	74, 0, 0, 0, 0, 0, 0, 0, 1662, 2262,
	2263, 0, 2280, 2281, 2282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2733, 960, 0,
	0, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	974, 0, 2750, 1059, 0, 0, 0, 0, 975, 1603,
	0, 0, 1708, 0, 0, 0, 0, 0, 1714, 0,
	1715, 0, 1716, 0, 1717, 0, 1718, 0, 2277, 0,
	0, 0, 0, 1306, 1307, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 1727, 1108, 0, 0,
	0, 0, 0, 0, 0, 975, 933, 0, 1309, 0,
	0, 1066, 0, 0, 960, 960, 960, 0, 0, 960,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 1994, 2351, 1994, 1308, 0, 0, 1603, 0, 0,
	0, 0, 1328, 0, 0, 2638, 1066, 2268, 0, 0,
	0, 1994, 0, 2351, 0, 0, 1066, 1066, 496, 1994,
	2351, 0, 0, 0, 496, 496, 0, 0, 0, 961,
	961, 961, 0, 0, 961, 1768, 0, 0, 1916, 1916,
	2638, 0, 1066, 2063, 0, 0, 0, 0, 0, 0,
	0, 2638, 0, 0, 0, 2283, 0, 0, 0, 0,
	0, 1331, 1332, 1333, 1334, 1994, 0, 0, 0, 0,
	0, 1314, 0, 0, 2467, 2467, 0, 0, 0, 0,
	0, 0, 0, 2278, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 1337,
	1338, 0, 2262, 2263, 0, 2280, 2281, 2282, 0, 0,
	1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916,
	1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916, 0,
	1916, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 1329, 0, 0,
	0, 1978, 0, 0, 1994, 0, 2351, 0, 0, 2912,
	0, 2277, 0, 0, 0, 0, 0, 496, 0, 0,
	2279, 2638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 74, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	969, 1462, 0, 0, 0, 2638, 0, 2638, 0, 0,
	0, 2638, 0, 496, 0, 496, 0, 1335, 0, 0,
	0, 0, 0, 1066, 0, 0, 2894, 0, 0, 0,
	2268, 0, 2262, 2263, 1330, 2280, 2281, 2282, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	2516, 0, 2105, 0, 2284, 1128, 0, 1128, 0, 1128,
	0, 969, 969, 2918, 0, 2547, 0, 0, 0, 0,
	0, 543, 0, 0, 2274, 2275, 2276, 0, 2283, 2912,
	0, 2273, 2271, 2272, 2264, 2265, 2266, 2267, 2269, 2270,
	0, 2277, 74, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 2278, 1994, 2351, 0,
	0, 0, 1462, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2351, 0, 0, 0, 974, 0, 0, 0, 1066, 0,
	1066, 0, 496, 0, 0, 1319, 1317, 1318, 1310, 1311,
	1312, 1313, 1315, 1316, 0, 0, 0, 0, 2982, 0,
	2268, 3043, 0, 0, 1066, 974, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2163, 0, 0, 2638, 0, 0, 0, 0, 975,
	0, 0, 0, 2279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2547, 0, 0, 0, 0, 2283, 0,
	0, 0, 0, 0, 2172, 969, 2174, 0, 0, 0,
	975, 0, 960, 0, 0, 0, 0, 1066, 0, 0,
	719, 974, 2638, 0, 0, 1994, 2278, 2187, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 974, 0,
	0, 2912, 1368, 0, 1371, 0, 0, 0, 0, 0,
	0, 1378, 0, 0, 0, 0, 0, 960, 0, 960,
	960, 960, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 2274, 2275, 2276,
	0, 0, 0, 975, 2273, 2271, 2272, 2264, 2265, 2266,
	2267, 2269, 2270, 0, 0, 960, 0, 0, 0, 0,
	0, 0, 961, 2279, 961, 961, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 0, 1309, 0, 0, 1355, 0,
	961, 2262, 2263, 0, 2280, 2281, 2282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2515,
	0, 1308, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 974, 0, 0, 0, 1325, 0, 0, 1916,
	0, 0, 974, 0, 0, 74, 0, 0, 1460, 0,
	1463, 0, 0, 0, 0, 0, 0, 2274, 2275, 2276,
	2277, 0, 0, 0, 2273, 2271, 2272, 2264, 2265, 2266,
	2267, 2269, 2270, 0, 0, 0, 1916, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 1331, 1332,
	1333, 1334, 0, 0, 2348, 0, 0, 975, 1314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1356, 1108, 0, 1336, 1337, 1338, 0, 2268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 1352, 1353, 0, 0,
	39, 0, 0, 0, 1323, 1324, 2402, 0, 0, 0,
	0, 40, 141, 0, 0, 0, 974, 1344, 0, 0,
	0, 1916, 0, 0, 1329, 44, 0, 2283, 0, 0,
	0, 0, 0, 0, 0, 2420, 0, 0, 0, 0,
	46, 143, 1354, 0, 2429, 0, 2431, 0, 0, 0,
	0, 0, 45, 0, 51, 2278, 1343, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 975, 0, 0, 0, 52, 0, 0, 0, 54,
	0, 0, 0, 58, 0, 0, 0, 144, 0, 0,
	0, 59, 72, 0, 1335, 0, 60, 61, 0, 0,
	974, 0, 974, 0, 0, 960, 0, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 960, 2279, 0, 0, 0, 0, 2505, 0, 0,
	0, 0, 0, 0, 0, 975, 974, 975, 0, 974,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 975, 1345, 0, 975, 1320, 1321, 1327, 1326, 1322,
	1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315,
	1316, 975, 0, 0, 64, 2757, 0, 0, 0, 2756,
	0, 0, 65, 0, 0, 0, 2274, 2275, 2276, 0,
	0, 0, 0, 2273, 2271, 2272, 2264, 2265, 2266, 2267,
	2269, 2270, 75, 139, 66, 0, 67, 0, 68, 0,
	0, 719, 145, 0, 719, 719, 0, 69, 0, 0,
	0, 0, 0, 0, 171, 974, 0, 974, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 0, 110, 0,
	0, 0, 0, 2128, 0, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 40, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	960, 0, 1828, 0, 974, 0, 0, 0, 960, 0,
	975, 0, 975, 115, 0, 732, 0, 0, 0, 0,
	0, 1371, 0, 140, 0, 0, 0, 2129, 0, 960,
	0, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	960, 960, 2679, 0, 0, 961, 2130, 0, 0, 975,
	0, 0, 0, 961, 0, 579, 0, 0, 0, 138,
	0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 974, 0, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 961, 961, 0, 0, 0,
	0, 1463, 2262, 2263, 0, 2280, 2281, 2282, 0, 2725,
	0, 969, 0, 0, 974, 0, 0, 0, 0, 2728,
	0, 0, 974, 74, 0, 1306, 1307, 975, 1339, 1340,
	1341, 1349, 1350, 1351, 0, 0, 0, 974, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 74,
	1309, 0, 0, 1355, 0, 0, 0, 0, 0, 0,
	0, 2277, 0, 0, 0, 0, 74, 0, 74, 975,
	0, 0, 0, 0, 0, 0, 1308, 975, 0, 0,
	0, 0, 960, 0, 1328, 0, 0, 0, 0, 0,
	0, 1325, 975, 0, 0, 0, 0, 64, 0, 0,
	74, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 139, 66, 0, 67,
	2268, 0, 0, 0, 0, 74, 0, 961, 0, 0,
	0, 0, 0, 1331, 1332, 1333, 1334, 171, 0, 0,
	0, 0, 0, 1314, 0, 0, 0, 0, 578, 0,
	0, 110, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 2823, 0, 0, 1346, 1356, 2283, 1108,
	1336, 1337, 1338, 173, 0, 0, 0, 0, 0, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 960,
	0, 1352, 1353, 0, 0, 0, 2278, 0, 0, 1323,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 172, 0, 0, 0, 0, 1329,
	0, 0, 974, 165, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 961, 0, 0, 1354, 0, 0,
	0, 0, 0, 961, 961, 74, 0, 0, 0, 74,
	0, 1343, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 2279, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 2919, 0, 0, 0, 0, 0, 0, 1306,
	1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0, 1347,
	0, 0, 0, 0, 0, 1828, 0, 1342, 0, 0,
	0, 0, 0, 0, 1309, 0, 0, 1355, 0, 0,
	0, 0, 0, 0, 0, 1371, 0, 0, 2956, 0,
	2958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1308, 0, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 1325, 0, 2274, 2275, 2276,
	0, 0, 0, 0, 2273, 2271, 2272, 2264, 2265, 2266,
	2267, 2269, 2270, 0, 0, 0, 0, 1345, 0, 0,
	1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317, 1318,
	1310, 1311, 1312, 1313, 1315, 1316, 0, 0, 0, 0,
	2245, 0, 0, 0, 2246, 0, 0, 1331, 1332, 1333,
	1334, 0, 0, 0, 0, 0, 0, 1314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3011,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 921,
	1346, 1356, 0, 0, 1336, 1337, 1338, 921, 921, 0,
	0, 921, 0, 0, 0, 0, 0, 3031, 0, 0,
	0, 0, 0, 0, 0, 1352, 1353, 0, 0, 0,
	0, 0, 0, 1323, 1324, 0, 0, 0, 0, 0,
	0, 3048, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 1354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	732, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 0, 0, 1320, 1321, 1327, 1326, 1322, 1348,
	0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316,
	0, 0, 0, 0, 0, 0, 0, 0, 2755, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2309,
	0, 935, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 819, 921, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	818, 275, 219, 220, 221, 0, 276, 825, 0, 808,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 285,
	282, 0, 286, 0, 287, 288, 0, 868, 289, 290,
	291, 811, 809, 810, 815, 813, 812, 814, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	0, 0, 225, 304, 305, 307, 310, 306, 311, 312,
	847, 848, 0, 869, 0, 0, 0, 0, 0, 313,
	314, 315, 228, 316, 317, 0, 318, 0, 319, 0,
	0, 870, 320, 0, 321, 850, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 820, 821, 824, 872, 921,
	822, 329, 0, 0, 0, 0, 328, 330, 337, 74,
	871, 331, 234, 333, 332, 334, 335, 336, 235, 0,
	236, 0, 338, 873, 874, 339, 340, 341, 875, 342,
	343, 0, 0, 344, 345, 346, 922, 348, 347, 0,
	853, 876, 349, 350, 877, 0, 351, 352, 0, 0,
	353, 0, 354, 937, 936, 355, 356, 357, 358, 360,
	361, 359, 878, 362, 363, 365, 364, 0, 0, 879,
	0, 823, 366, 240, 367, 368, 0, 369, 370, 0,
	927, 371, 372, 0, 0, 373, 241, 880, 374, 881,
	855, 375, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 856, 384, 244, 385, 0, 386, 387, 388, 389,
	390, 391, 245, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 882, 407, 408, 409, 410, 246, 929, 0, 415,
	416, 417, 418, 419, 420, 421, 921, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 816, 431, 412, 413,
	432, 883, 433, 247, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 859, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 308, 453,
	309, 454, 455, 0, 249, 250, 251, 456, 0, 0,
	457, 458, 863, 864, 0, 459, 460, 0, 461, 462,
	0, 0, 463, 464, 465, 467, 817, 468, 0, 466,
	469, 470, 471, 254, 255, 0, 0, 472, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 919,
	0, 924, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1828,
	258, 259, 260, 261, 977, 262, 978, 979, 980, 981,
	214, 982, 983, 984, 985, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 986, 269, 270, 271, 272,
	273, 274, 987, 988, 275, 219, 220, 221, 989, 276,
	222, 990, 962, 991, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 992, 286, 0, 287, 288, 993,
	868, 289, 290, 291, 994, 995, 997, 996, 998, 999,
	1000, 292, 293, 500, 294, 295, 296, 223, 224, 1001,
	297, 1002, 298, 1003, 299, 1004, 1005, 300, 301, 1006,
	302, 303, 1007, 0, 1008, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 1009, 869, 1010, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	1011, 319, 1012, 1013, 870, 320, 1014, 321, 229, 1015,
	230, 1016, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 872, 1017, 237, 329, 0, 0, 0, 1018, 328,
	330, 337, 1019, 871, 331, 234, 333, 332, 334, 335,
	336, 235, 1020, 236, 1021, 338, 873, 874, 339, 340,
	341, 875, 342, 343, 0, 0, 344, 345, 346, 1022,
	348, 347, 1023, 238, 876, 349, 350, 877, 1024, 351,
	352, 1025, 1026, 353, 0, 354, 937, 936, 355, 356,
	357, 358, 360, 361, 359, 878, 362, 363, 365, 364,
	1027, 1028, 879, 1029, 239, 366, 240, 367, 368, 1030,
	369, 370, 1031, 1032, 371, 372, 1033, 1034, 373, 241,
	880, 374, 881, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 1035, 383, 243, 384, 244, 385, 1036, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 1037, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 1038, 406, 882, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 1039,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 1040,
	431, 412, 413, 432, 883, 433, 247, 434, 435, 1041,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 1042, 446, 447, 1043, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 1044, 249, 250, 251,
	456, 1045, 1046, 457, 458, 252, 253, 1047, 459, 460,
	0, 461, 462, 1048, 1049, 463, 464, 465, 467, 1050,
	468, 1051, 466, 469, 470, 471, 254, 255, 1052, 1053,
	472, 256, 1054, 1055, 1056, 1057, 473, 474, 257, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 1965, 0, 0, 0, 0, 0, 0, 0,
	0, 1966, 258, 259, 260, 261, 977, 262, 978, 979,
	980, 981, 214, 982, 983, 984, 985, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 986, 269, 270,
	271, 272, 273, 274, 987, 988, 275, 219, 220, 221,
	989, 276, 222, 990, 962, 991, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 992, 286, 0, 287,
	288, 993, 868, 289, 290, 291, 994, 995, 997, 996,
	998, 999, 1000, 292, 293, 500, 294, 295, 296, 223,
	224, 1001, 297, 1002, 298, 1003, 299, 1004, 1005, 300,
	301, 1006, 302, 303, 1007, 0, 1008, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 1009, 869, 1010,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 1011, 319, 1012, 1013, 870, 320, 1014, 321,
	229, 1015, 230, 1016, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 872, 1017, 237, 329, 0, 0, 0,
	1018, 328, 330, 337, 1019, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 1020, 236, 1021, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 1022, 348, 347, 1023, 238, 876, 349, 350, 877,
	1024, 351, 352, 1025, 1026, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 1027, 1028, 879, 1029, 239, 366, 240, 367,
	368, 1030, 369, 370, 1031, 1032, 371, 372, 1033, 1034,
	373, 241, 880, 374, 881, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 1035, 383, 243, 384, 244, 385,
	1036, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	1037, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 1038, 406, 882, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 1039, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 1040, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 1041, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 1042, 446, 447, 1043, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 1044, 249,
	250, 251, 456, 1045, 1046, 457, 458, 252, 253, 1047,
	459, 460, 0, 461, 462, 1048, 1049, 463, 464, 465,
	467, 1050, 468, 1051, 466, 469, 470, 471, 254, 255,
	1052, 1053, 472, 256, 1054, 1055, 1056, 1057, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2780, 258, 259, 260, 261, 977,
	262, 978, 979, 980, 981, 214, 982, 983, 984, 985,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	986, 269, 270, 271, 272, 273, 274, 987, 988, 275,
	219, 220, 221, 989, 276, 222, 990, 962, 991, 277,
	278, 279, 280, 281, 0, 283, 284, 285, 282, 992,
	286, 0, 287, 288, 993, 868, 289, 290, 291, 994,
	995, 997, 996, 998, 999, 1000, 292, 293, 500, 294,
	295, 296, 223, 224, 1001, 297, 1002, 298, 1003, 299,
	1004, 1005, 300, 301, 1006, 302, 303, 1007, 0, 1008,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	1009, 869, 1010, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 1011, 319, 1012, 1013, 870,
	320, 1014, 321, 229, 1015, 230, 1016, 322, 323, 324,
	325, 326, 327, 231, 232, 233, 872, 1017, 237, 329,
	0, 0, 0, 1018, 328, 330, 337, 1019, 871, 331,
	234, 333, 332, 334, 335, 336, 235, 1020, 236, 1021,
	338, 873, 874, 339, 340, 341, 875, 342, 343, 0,
	0, 344, 345, 346, 1022, 348, 347, 1023, 238, 876,
	349, 350, 877, 1024, 351, 352, 1025, 1026, 353, 0,
	354, 937, 936, 355, 356, 357, 358, 360, 361, 359,
	878, 362, 363, 365, 364, 1027, 1028, 879, 1029, 239,
	366, 240, 367, 368, 1030, 369, 370, 1031, 1032, 371,
	372, 1033, 1034, 373, 241, 880, 374, 881, 242, 375,
	376, 377, 378, 379, 380, 381, 382, 1035, 383, 243,
	384, 244, 385, 1036, 386, 387, 388, 389, 390, 391,
	245, 392, 393, 1037, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 1038, 406, 882,
	407, 408, 409, 410, 246, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 1039, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 1040, 431, 412, 413, 432, 883,
	433, 247, 434, 435, 1041, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 248, 1042, 446, 447,
	1043, 448, 449, 450, 451, 452, 308, 453, 309, 454,
	455, 1044, 249, 250, 251, 456, 1045, 1046, 457, 458,
	252, 253, 1047, 459, 460, 0, 461, 462, 1048, 1049,
	463, 464, 465, 467, 1050, 468, 1051, 466, 469, 470,
	471, 254, 255, 1052, 1053, 472, 256, 1054, 1055, 1056,
	1057, 473, 474, 257, 475, 476, 477, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2887, 258, 259, 260, 261, 977, 262, 978,
	979, 980, 981, 214, 982, 983, 984, 985, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 986, 269,
	270, 271, 272, 273, 274, 987, 988, 275, 219, 220,
	221, 989, 276, 222, 990, 962, 991, 277, 278, 279,
	280, 281, 0, 283, 284, 285, 282, 992, 286, 0,
	287, 288, 993, 868, 289, 290, 291, 994, 995, 997,
	996, 998, 999, 1000, 292, 293, 500, 294, 295, 296,
	223, 224, 1001, 297, 1002, 298, 1003, 299, 1004, 1005,
	300, 301, 1006, 302, 303, 1007, 0, 1008, 225, 304,
	305, 307, 310, 306, 311, 312, 226, 227, 1009, 869,
	1010, 0, 0, 0, 0, 313, 314, 315, 228, 316,
	317, 0, 318, 1011, 319, 1012, 1013, 870, 320, 1014,
	321, 229, 1015, 230, 1016, 322, 323, 324, 325, 326,
	327, 231, 232, 233, 872, 1017, 237, 329, 0, 0,
	0, 1018, 328, 330, 337, 1019, 871, 331, 234, 333,
	332, 334, 335, 336, 235, 1020, 236, 1021, 338, 873,
	874, 339, 340, 341, 875, 342, 343, 0, 0, 344,
	345, 346, 1022, 348, 347, 1023, 238, 876, 349, 350,
	877, 1024, 351, 352, 1025, 1026, 353, 0, 354, 937,
	936, 355, 356, 357, 358, 360, 361, 359, 878, 362,
	363, 365, 364, 1027, 1028, 879, 1029, 239, 366, 240,
	367, 368, 1030, 369, 370, 1031, 1032, 371, 372, 1033,
	1034, 373, 241, 880, 374, 881, 242, 375, 376, 377,
	378, 379, 380, 381, 382, 1035, 383, 243, 384, 244,
	385, 1036, 386, 387, 388, 389, 390, 391, 245, 392,
	393, 1037, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 1038, 406, 882, 407, 408,
	409, 410, 246, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 1039, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 1040, 431, 412, 413, 432, 883, 433, 247,
	434, 435, 1041, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 248, 1042, 446, 447, 1043, 448,
	449, 450, 451, 452, 308, 453, 309, 454, 455, 1044,
	249, 250, 251, 456, 1045, 1046, 457, 458, 252, 253,
	1047, 459, 460, 0, 461, 462, 1048, 1049, 463, 464,
	465, 467, 1050, 468, 1051, 466, 469, 470, 471, 254,
	255, 1052, 1053, 472, 256, 1054, 1055, 1056, 1057, 473,
	474, 257, 475, 476, 477, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2529, 258, 259, 260, 261, 977, 262, 978, 979, 980,
	981, 214, 982, 983, 984, 985, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 986, 269, 270, 271,
	272, 273, 274, 987, 988, 275, 219, 220, 221, 989,
	276, 222, 990, 962, 991, 277, 278, 279, 280, 281,
	0, 283, 284, 285, 282, 992, 286, 0, 287, 288,
	993, 868, 289, 290, 291, 994, 995, 997, 996, 998,
	999, 1000, 292, 293, 500, 294, 295, 296, 223, 224,
	1001, 297, 1002, 298, 1003, 299, 1004, 1005, 300, 301,
	1006, 302, 303, 1007, 0, 1008, 225, 304, 305, 307,
	310, 306, 311, 312, 226, 227, 1009, 869, 1010, 0,
	0, 0, 0, 313, 314, 315, 228, 316, 317, 0,
	318, 1011, 319, 1012, 1013, 870, 320, 1014, 321, 229,
	1015, 230, 1016, 322, 323, 324, 325, 326, 327, 231,
	232, 233, 872, 1017, 237, 329, 0, 0, 0, 1018,
	328, 330, 337, 1019, 871, 331, 234, 333, 332, 334,
	335, 336, 235, 1020, 236, 1021, 338, 873, 874, 339,
	340, 341, 875, 342, 343, 0, 0, 344, 345, 346,
	1022, 348, 347, 1023, 238, 876, 349, 350, 877, 1024,
	351, 352, 1025, 1026, 353, 0, 354, 937, 936, 355,
	356, 357, 358, 360, 361, 359, 878, 362, 363, 365,
	364, 1027, 1028, 879, 1029, 239, 366, 240, 367, 368,
	1030, 369, 370, 1031, 1032, 371, 372, 1033, 1034, 373,
	241, 880, 374, 881, 242, 375, 376, 377, 378, 379,
	380, 381, 382, 1035, 383, 243, 384, 244, 385, 1036,
	386, 387, 388, 389, 390, 391, 245, 392, 393, 1037,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 1038, 406, 882, 407, 408, 409, 410,
	246, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	1039, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	1040, 431, 412, 413, 432, 883, 433, 247, 434, 435,
	1041, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 248, 1042, 446, 447, 1043, 448, 449, 450,
	451, 452, 308, 453, 309, 454, 455, 1044, 249, 250,
	251, 456, 1045, 1046, 457, 458, 252, 253, 1047, 459,
	460, 0, 461, 462, 1048, 1049, 463, 464, 465, 467,
	1050, 468, 1051, 466, 469, 470, 471, 254, 255, 1052,
	1053, 472, 256, 1054, 1055, 1056, 1057, 473, 474, 257,
	475, 476, 477, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2520, 258,
	259, 260, 261, 977, 262, 978, 979, 980, 981, 214,
	982, 983, 984, 985, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 986, 269, 270, 271, 272, 273,
	274, 987, 988, 275, 219, 220, 221, 989, 276, 222,
	990, 962, 991, 277, 278, 279, 280, 281, 0, 283,
	284, 285, 282, 992, 286, 0, 287, 288, 993, 868,
	289, 290, 291, 994, 995, 997, 996, 998, 999, 1000,
	292, 293, 500, 294, 295, 296, 223, 224, 1001, 297,
	1002, 298, 1003, 299, 1004, 1005, 300, 301, 1006, 302,
	303, 1007, 0, 1008, 225, 304, 305, 307, 310, 306,
	311, 312, 226, 227, 1009, 869, 1010, 0, 0, 0,
	0, 313, 314, 315, 228, 316, 317, 0, 318, 1011,
	319, 1012, 1013, 870, 320, 1014, 321, 229, 1015, 230,
	1016, 322, 323, 324, 325, 326, 327, 231, 232, 233,
	872, 1017, 237, 329, 0, 0, 0, 1018, 328, 330,
	337, 1019, 871, 331, 234, 333, 332, 334, 335, 336,
	235, 1020, 236, 1021, 338, 873, 874, 339, 340, 341,
	875, 342, 343, 0, 0, 344, 345, 346, 1022, 348,
	347, 1023, 238, 876, 349, 350, 877, 1024, 351, 352,
	1025, 1026, 353, 0, 354, 937, 936, 355, 356, 357,
	358, 360, 361, 359, 878, 362, 363, 365, 364, 1027,
	1028, 879, 1029, 239, 366, 240, 367, 368, 1030, 369,
	370, 1031, 1032, 371, 372, 1033, 1034, 373, 241, 880,
	374, 881, 242, 375, 376, 377, 378, 379, 380, 381,
	382, 1035, 383, 243, 384, 244, 385, 1036, 386, 387,
	388, 389, 390, 391, 245, 392, 393, 1037, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 1038, 406, 882, 407, 408, 409, 410, 246, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 1039, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 1040, 431,
	412, 413, 432, 883, 433, 247, 434, 435, 1041, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	248, 1042, 446, 447, 1043, 448, 449, 450, 451, 452,
	308, 453, 309, 454, 455, 1044, 249, 250, 251, 456,
	1045, 1046, 457, 458, 252, 253, 1047, 459, 460, 0,
	461, 462, 1048, 1049, 463, 464, 465, 467, 1050, 468,
	1051, 466, 469, 470, 471, 254, 255, 1052, 1053, 472,
	256, 1054, 1055, 1056, 1057, 473, 474, 257, 475, 476,
	477, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2406, 258, 259, 260,
	261, 977, 262, 978, 979, 980, 981, 214, 982, 983,
	984, 985, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 986, 269, 270, 271, 272, 273, 274, 987,
	988, 275, 219, 220, 221, 989, 276, 222, 990, 962,
	991, 277, 278, 279, 280, 281, 0, 283, 284, 285,
	282, 992, 286, 0, 287, 288, 993, 868, 289, 290,
	291, 994, 995, 997, 996, 998, 999, 1000, 292, 293,
	500, 294, 295, 296, 223, 224, 1001, 297, 1002, 298,
	1003, 299, 1004, 1005, 300, 301, 1006, 302, 303, 1007,
	0, 1008, 225, 304, 305, 307, 310, 306, 311, 312,
	226, 227, 1009, 869, 1010, 0, 0, 0, 0, 313,
	314, 315, 228, 316, 317, 0, 318, 1011, 319, 1012,
	1013, 870, 320, 1014, 321, 229, 1015, 230, 1016, 322,
	323, 324, 325, 326, 327, 231, 232, 233, 872, 1017,
	237, 329, 0, 0, 0, 1018, 328, 330, 337, 1019,
	871, 331, 234, 333, 332, 334, 335, 336, 235, 1020,
	236, 1021, 338, 873, 874, 339, 340, 341, 875, 342,
	343, 0, 0, 344, 345, 346, 1022, 348, 347, 1023,
	238, 876, 349, 350, 877, 1024, 351, 352, 1025, 1026,
	353, 0, 354, 937, 936, 355, 356, 357, 358, 360,
	361, 359, 878, 362, 363, 365, 364, 1027, 1028, 879,
	1029, 239, 366, 240, 367, 368, 1030, 369, 370, 1031,
	1032, 371, 372, 1033, 1034, 373, 241, 880, 374, 881,
	242, 375, 376, 377, 378, 379, 380, 381, 382, 1035,
	383, 243, 384, 244, 385, 1036, 386, 387, 388, 389,
	390, 391, 245, 392, 393, 1037, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 1038,
	406, 882, 407, 408, 409, 410, 246, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 1039, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 1040, 431, 412, 413,
	432, 883, 433, 247, 434, 435, 1041, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 248, 1042,
	446, 447, 1043, 448, 449, 450, 451, 452, 308, 453,
	309, 454, 455, 1044, 249, 250, 251, 456, 1045, 1046,
	457, 458, 252, 253, 1047, 459, 460, 0, 461, 462,
	1048, 1049, 463, 464, 465, 467, 1050, 468, 1051, 466,
	469, 470, 471, 254, 255, 1052, 1053, 472, 256, 1054,
	1055, 1056, 1057, 473, 474, 257, 475, 476, 477, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1852, 258, 259, 260, 261, 977,
	262, 978, 979, 980, 981, 214, 982, 983, 984, 985,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	986, 269, 270, 271, 272, 273, 274, 987, 988, 275,
	219, 220, 221, 989, 276, 222, 990, 962, 991, 277,
	278, 279, 280, 281, 0, 283, 284, 285, 282, 992,
	286, 0, 287, 288, 993, 868, 289, 290, 291, 994,
	995, 997, 996, 998, 999, 1000, 292, 293, 500, 294,
	295, 296, 223, 224, 1001, 297, 1002, 298, 1003, 299,
	1004, 1005, 300, 301, 1006, 302, 303, 1007, 0, 1008,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	1009, 869, 1010, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 1011, 319, 1012, 1013, 870,
	320, 1014, 321, 229, 1015, 230, 1016, 322, 323, 324,
	325, 326, 327, 231, 232, 233, 872, 1017, 237, 329,
	0, 0, 0, 1018, 328, 330, 337, 1019, 871, 331,
	234, 333, 332, 334, 335, 336, 235, 1020, 236, 1021,
	338, 873, 874, 339, 340, 341, 875, 342, 343, 0,
	0, 344, 345, 346, 1022, 348, 347, 1023, 238, 876,
	349, 350, 877, 1024, 351, 352, 1025, 1026, 353, 0,
	354, 937, 936, 355, 356, 357, 358, 360, 361, 359,
	878, 362, 363, 365, 364, 1027, 1028, 879, 1029, 239,
	366, 240, 367, 368, 1030, 369, 370, 1031, 1032, 371,
	372, 1033, 1034, 373, 241, 880, 374, 881, 242, 375,
	376, 377, 378, 379, 380, 381, 382, 1035, 383, 243,
	384, 244, 385, 1036, 386, 387, 388, 389, 390, 391,
	245, 392, 393, 1037, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 1038, 406, 882,
	407, 408, 409, 410, 246, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 1039, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 1040, 431, 412, 413, 432, 883,
	433, 247, 434, 435, 1041, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 248, 1042, 446, 447,
	1043, 448, 449, 450, 451, 452, 308, 453, 309, 454,
	455, 1044, 249, 250, 251, 456, 1045, 1046, 457, 458,
	252, 253, 1047, 459, 460, 0, 461, 462, 1048, 1049,
	463, 464, 465, 467, 1050, 468, 1051, 466, 469, 470,
	471, 254, 255, 1052, 1053, 472, 256, 1054, 1055, 1056,
	1057, 473, 474, 257, 475, 476, 477, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1528, 258, 259, 260, 261, 977, 262, 978,
	979, 980, 981, 214, 982, 983, 984, 985, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 986, 269,
	270, 271, 272, 273, 274, 987, 988, 275, 219, 220,
	221, 989, 276, 222, 990, 962, 991, 277, 278, 279,
	280, 281, 0, 283, 284, 285, 282, 992, 286, 0,
	287, 288, 993, 868, 289, 290, 291, 994, 995, 997,
	996, 998, 999, 1000, 292, 293, 500, 294, 295, 296,
	223, 224, 1001, 297, 1002, 298, 1003, 299, 1004, 1005,
	300, 301, 1006, 302, 303, 1007, 0, 1008, 225, 304,
	305, 307, 310, 306, 311, 312, 226, 227, 1009, 869,
	1010, 0, 0, 0, 0, 313, 314, 315, 228, 316,
	317, 0, 318, 1011, 319, 1012, 1013, 870, 320, 1014,
	321, 229, 1015, 230, 1016, 322, 323, 324, 325, 326,
	327, 231, 232, 233, 872, 1017, 237, 329, 0, 0,
	0, 1018, 328, 330, 337, 1019, 871, 331, 234, 333,
	332, 334, 335, 336, 235, 1020, 236, 1021, 338, 873,
	874, 339, 340, 341, 875, 342, 343, 0, 0, 344,
	345, 346, 1022, 348, 347, 1023, 238, 876, 349, 350,
	877, 1024, 351, 352, 1025, 1026, 353, 0, 354, 937,
	936, 355, 356, 357, 358, 360, 361, 359, 878, 362,
	363, 365, 364, 1027, 1028, 879, 1029, 239, 366, 240,
	367, 368, 1030, 369, 370, 1031, 1032, 371, 372, 1033,
	1034, 373, 241, 880, 374, 881, 242, 375, 376, 377,
	378, 379, 380, 381, 382, 1035, 383, 243, 384, 244,
	385, 1036, 386, 387, 388, 389, 390, 391, 245, 392,
	393, 1037, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 1038, 406, 882, 407, 408,
	409, 410, 246, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 1039, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 1040, 431, 412, 413, 432, 883, 433, 247,
	434, 435, 1041, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 248, 1042, 446, 447, 1043, 448,
	449, 450, 451, 452, 308, 453, 309, 454, 455, 1044,
	249, 250, 251, 456, 1045, 1046, 457, 458, 252, 253,
	1047, 459, 460, 0, 461, 462, 1048, 1049, 463, 464,
	465, 467, 1050, 468, 1051, 466, 469, 470, 471, 254,
	255, 1052, 1053, 472, 256, 1054, 1055, 1056, 1057, 473,
	474, 257, 475, 476, 477, 1859, 0, 783, 771, 772,
	769, 770, 762, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 1856, 262, 0,
	0, 0, 0, 819, 765, 0, 0, 0, 263, 264,
	265, 215, 840, 803, 841, 791, 827, 842, 0, 269,
	793, 792, 272, 273, 274, 766, 818, 275, 843, 844,
	221, 0, 276, 825, 0, 808, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 285, 282, 0, 286, 0,
	287, 288, 0, 868, 289, 290, 291, 811, 809, 810,
	815, 813, 812, 814, 292, 293, 500, 294, 828, 296,
	845, 846, 751, 297, 0, 298, 0, 299, 1857, 0,
	829, 301, 0, 302, 303, 0, 0, 0, 756, 304,
	305, 307, 310, 306, 311, 312, 847, 848, 778, 869,
	0, 0, 0, 0, 0, 313, 314, 315, 849, 830,
	831, 0, 318, 0, 319, 0, 0, 870, 320, 0,
	321, 850, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 820, 821, 824, 872, 0, 822, 802, 0, 0,
	0, 0, 328, 330, 337, 0, 871, 331, 851, 806,
	832, 833, 834, 835, 852, 0, 807, 0, 338, 873,
	874, 339, 340, 341, 875, 836, 837, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 853, 876, 349, 350,
	877, 0, 351, 352, 0, 0, 353, 0, 354, 753,
	752, 355, 356, 357, 358, 360, 795, 359, 878, 362,
	363, 365, 364, 748, 0, 879, 779, 823, 366, 854,
	367, 368, 0, 804, 805, 0, 0, 371, 372, 0,
	0, 373, 241, 880, 374, 881, 855, 375, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 856, 384, 244,
	385, 0, 386, 387, 388, 389, 390, 391, 857, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 882, 407, 408,
	409, 410, 757, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 796, 797, 798, 799, 423,
	429, 430, 816, 431, 412, 413, 432, 883, 433, 858,
	800, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	838, 440, 441, 442, 859, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 308, 453, 309, 794, 455, 0,
	860, 861, 862, 839, 0, 0, 457, 458, 863, 864,
	777, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 817, 468, 0, 801, 469, 470, 471, 254,
	865, 1855, 0, 472, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 476, 477, 749, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	1858, 0, 0, 0, 0, 0, 0, 758, 1853, 0,
	0, 0, 733, 761, 783, 771, 772, 769, 770, 762,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	819, 765, 0, 0, 0, 263, 264, 265, 215, 840,
	803, 841, 791, 827, 842, 0, 269, 793, 792, 272,
	273, 274, 766, 818, 275, 843, 844, 221, 0, 276,
	825, 0, 808, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 0, 286, 0, 287, 288, 0,
	868, 289, 290, 291, 811, 809, 810, 815, 813, 812,
	814, 292, 293, 500, 294, 828, 296, 845, 846, 751,
	297, 0, 298, 0, 299, 0, 0, 829, 301, 0,
	302, 303, 0, 0, 0, 756, 304, 305, 307, 310,
	306, 311, 312, 847, 848, 778, 869, 0, 0, 0,
	0, 0, 313, 314, 315, 849, 830, 831, 0, 318,
	0, 319, 0, 0, 870, 320, 0, 321, 850, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 820, 821,
	824, 872, 0, 822, 802, 0, 0, 0, 0, 328,
	330, 337, 0, 871, 331, 851, 806, 832, 833, 834,
	835, 852, 0, 807, 0, 338, 873, 874, 339, 340,
	341, 875, 836, 837, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 853, 876, 349, 350, 877, 0, 351,
	352, 0, 0, 353, 0, 354, 753, 752, 355, 356,
	357, 358, 360, 795, 359, 878, 362, 363, 365, 364,
	748, 0, 879, 779, 823, 366, 854, 367, 368, 0,
	804, 805, 0, 0, 371, 372, 0, 0, 373, 241,
	880, 374, 881, 855, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 856, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 857, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 882, 407, 408, 409, 410, 757,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 171,
	427, 428, 796, 797, 798, 799, 423, 429, 430, 816,
	431, 412, 413, 432, 883, 433, 858, 800, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 838, 440, 441,
	442, 859, 0, 446, 447, 173, 448, 449, 450, 451,
	452, 308, 453, 309, 794, 455, 0, 860, 861, 862,
	839, 0, 0, 457, 458, 863, 864, 777, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 817,
	468, 0, 801, 469, 470, 471, 1155, 865, 0, 0,
	472, 256, 0, 0, 0, 165, 473, 474, 257, 475,
	476, 477, 749, 166, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 745, 746, 783, 771, 772,
	769, 770, 762, 0, 1375, 0, 0, 0, 0, 0,
	761, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 819, 765, 0, 0, 0, 263, 264,
	265, 215, 840, 803, 841, 791, 827, 842, 0, 269,
	793, 792, 272, 273, 274, 766, 818, 275, 843, 844,
	221, 0, 276, 825, 0, 808, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 285, 282, 0, 286, 0,
	287, 288, 0, 868, 289, 290, 291, 811, 809, 810,
	815, 813, 812, 814, 292, 293, 500, 294, 828, 296,
	845, 846, 751, 297, 0, 298, 0, 299, 0, 0,
	829, 301, 0, 302, 303, 0, 0, 0, 756, 304,
	305, 307, 310, 306, 311, 312, 847, 848, 778, 869,
	0, 0, 0, 0, 0, 313, 314, 315, 849, 830,
	831, 0, 318, 0, 319, 0, 0, 870, 320, 0,
	321, 850, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 820, 821, 824, 872, 0, 822, 802, 0, 0,
	0, 0, 328, 330, 337, 0, 871, 331, 851, 806,
	832, 833, 834, 835, 852, 0, 807, 0, 338, 873,
	874, 339, 340, 341, 875, 836, 837, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 853, 876, 349, 350,
	877, 0, 351, 352, 0, 0, 353, 0, 354, 753,
	752, 355, 356, 357, 358, 360, 795, 359, 878, 362,
	363, 365, 364, 748, 0, 879, 779, 823, 366, 854,
	367, 368, 0, 804, 805, 0, 0, 371, 372, 0,
	0, 373, 241, 880, 374, 881, 855, 375, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 856, 384, 244,
	385, 0, 386, 387, 388, 389, 390, 391, 857, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 882, 407, 408,
	409, 410, 757, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 171, 427, 428, 796, 797, 798, 799, 423,
	429, 430, 816, 431, 412, 413, 432, 883, 433, 858,
	800, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	838, 440, 441, 442, 859, 0, 446, 447, 173, 448,
	449, 450, 451, 452, 308, 453, 309, 794, 455, 0,
	860, 861, 862, 839, 0, 0, 457, 458, 863, 864,
	777, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 817, 468, 0, 801, 469, 470, 471, 1155,
	865, 0, 0, 472, 256, 0, 0, 0, 165, 473,
	474, 257, 475, 476, 477, 749, 166, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	783, 771, 772, 769, 770, 762, 0, 1375, 0, 0,
	0, 0, 0, 761, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 819, 765, 0, 0,
	0, 263, 264, 265, 215, 840, 803, 841, 791, 827,
	842, 1930, 269, 793, 792, 272, 273, 274, 766, 818,
	275, 843, 844, 221, 0, 276, 825, 0, 808, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 291,
	811, 809, 810, 815, 813, 812, 814, 292, 293, 500,
	294, 828, 296, 845, 846, 751, 297, 0, 298, 0,
	299, 0, 0, 829, 301, 0, 302, 303, 0, 0,
	0, 756, 304, 305, 307, 310, 306, 311, 312, 847,
	848, 778, 869, 0, 0, 0, 0, 0, 313, 314,
	315, 849, 830, 831, 0, 318, 0, 319, 0, 1935,
	870, 320, 0, 321, 850, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 820, 821, 824, 872, 0, 822,
	802, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 851, 806, 832, 833, 834, 835, 852, 0, 807,
	0, 338, 873, 874, 339, 340, 341, 875, 836, 837,
	0, 0, 344, 345, 346, 0, 348, 347, 1931, 853,
	876, 349, 350, 877, 0, 351, 352, 0, 0, 353,
	0, 354, 753, 752, 355, 356, 357, 358, 360, 795,
	359, 878, 362, 363, 365, 364, 748, 0, 879, 779,
	823, 366, 854, 367, 368, 0, 804, 805, 0, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 855,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	856, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 857, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 757, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 796, 797,
	798, 799, 423, 429, 430, 816, 431, 412, 413, 432,
	883, 433, 858, 800, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 838, 440, 441, 442, 859, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	794, 455, 0, 860, 861, 862, 839, 0, 1932, 457,
	458, 863, 864, 777, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 817, 468, 0, 801, 469,
	470, 471, 254, 865, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 749, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 745, 746, 783, 771, 772, 769, 770, 762, 0,
	758, 0, 0, 0, 0, 0, 761, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 819,
	765, 0, 0, 0, 263, 264, 265, 215, 840, 803,
	841, 791, 827, 842, 0, 269, 793, 792, 272, 273,
	274, 766, 818, 275, 843, 844, 221, 0, 276, 825,
	0, 808, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 285, 282, 0, 286, 0, 287, 288, 0, 868,
	289, 290, 291, 811, 809, 810, 815, 813, 812, 814,
	292, 293, 500, 294, 828, 296, 845, 846, 751, 297,
	0, 298, 0, 299, 0, 0, 829, 301, 0, 302,
	303, 0, 0, 0, 756, 304, 305, 307, 310, 306,
	311, 312, 847, 848, 778, 869, 0, 0, 0, 0,
	0, 313, 314, 315, 849, 830, 831, 0, 318, 0,
	319, 0, 0, 870, 320, 0, 321, 850, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 820, 821, 824,
	872, 0, 822, 802, 0, 0, 0, 0, 328, 330,
	337, 0, 871, 331, 851, 806, 832, 833, 834, 835,
	852, 0, 807, 0, 338, 873, 874, 339, 340, 341,
	875, 836, 837, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 853, 876, 349, 350, 877, 0, 351, 352,
	0, 0, 353, 0, 354, 753, 752, 355, 356, 357,
	358, 360, 795, 359, 878, 362, 363, 365, 364, 748,
	2696, 879, 779, 823, 366, 854, 367, 368, 0, 804,
	805, 0, 0, 371, 372, 0, 0, 373, 241, 880,
	374, 881, 855, 375, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 856, 384, 244, 385, 0, 386, 387,
	388, 389, 390, 391, 857, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 882, 407, 408, 409, 410, 757, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 796, 797, 798, 799, 423, 429, 430, 816, 431,
	412, 413, 432, 883, 433, 858, 800, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 838, 440, 441, 442,
	859, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	308, 453, 309, 794, 455, 0, 860, 861, 862, 839,
	0, 0, 457, 458, 863, 864, 777, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 817, 468,
	0, 801, 469, 470, 471, 254, 865, 0, 0, 472,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 1440, 783, 771, 772,
	769, 770, 762, 758, 0, 0, 0, 0, 0, 761,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 819, 765, 0, 0, 0, 263, 264,
	265, 215, 840, 803, 841, 791, 827, 842, 0, 269,
	793, 792, 272, 273, 274, 766, 818, 275, 843, 844,
	221, 0, 276, 825, 0, 808, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 285, 282, 0, 286, 0,
	287, 288, 0, 868, 289, 290, 291, 811, 809, 810,
	815, 813, 812, 814, 292, 293, 500, 294, 828, 296,
	845, 846, 751, 297, 0, 298, 0, 299, 0, 0,
	829, 301, 0, 302, 303, 0, 0, 0, 756, 304,
	305, 307, 310, 306, 311, 312, 847, 848, 778, 869,
	0, 0, 0, 0, 0, 313, 314, 315, 849, 830,
	831, 0, 318, 0, 319, 0, 0, 870, 320, 0,
	321, 850, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 820, 821, 824, 872, 0, 822, 802, 0, 0,
	0, 1756, 328, 330, 337, 0, 871, 331, 851, 806,
	832, 833, 834, 835, 852, 0, 807, 0, 338, 873,
	874, 339, 340, 341, 875, 836, 837, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 853, 876, 349, 350,
	877, 0, 351, 352, 0, 0, 353, 0, 354, 753,
	752, 355, 356, 357, 358, 360, 795, 359, 878, 362,
	363, 365, 364, 748, 0, 879, 779, 823, 366, 854,
	367, 368, 0, 804, 805, 0, 0, 371, 372, 0,
	0, 373, 241, 880, 374, 881, 855, 375, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 856, 384, 244,
	385, 1755, 386, 387, 388, 389, 390, 391, 857, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 882, 407, 408,
	409, 410, 757, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 796, 797, 798, 799, 423,
	429, 430, 816, 431, 412, 413, 432, 883, 433, 858,
	800, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	838, 440, 441, 442, 859, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 308, 453, 309, 794, 455, 0,
	860, 861, 862, 839, 0, 0, 457, 458, 863, 864,
	777, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 817, 468, 0, 801, 469, 470, 471, 254,
	865, 0, 0, 472, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 476, 477, 749, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	0, 0, 0, 0, 0, 0, 0, 758, 0, 0,
	0, 0, 741, 761, 783, 771, 772, 769, 770, 762,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	819, 765, 0, 0, 0, 263, 264, 265, 215, 840,
	803, 841, 791, 827, 842, 0, 269, 793, 792, 272,
	273, 274, 766, 818, 275, 843, 844, 221, 0, 276,
	825, 0, 808, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 0, 286, 0, 287, 288, 0,
	868, 289, 290, 291, 811, 809, 810, 815, 813, 812,
	814, 292, 293, 500, 294, 828, 296, 845, 846, 751,
	297, 0, 298, 0, 299, 0, 0, 829, 301, 0,
	302, 303, 0, 0, 0, 756, 304, 305, 307, 310,
	306, 311, 312, 847, 848, 778, 869, 0, 0, 0,
	0, 0, 313, 314, 315, 849, 830, 831, 0, 318,
	0, 319, 0, 0, 870, 320, 0, 321, 850, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 820, 821,
	824, 872, 0, 822, 802, 0, 0, 0, 0, 328,
	330, 337, 0, 871, 331, 851, 806, 832, 833, 834,
	835, 852, 0, 807, 0, 338, 873, 874, 339, 340,
	341, 875, 836, 837, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 853, 876, 349, 350, 877, 0, 351,
	352, 0, 0, 353, 0, 354, 753, 752, 355, 356,
	357, 358, 360, 795, 359, 878, 362, 363, 365, 364,
	748, 0, 879, 779, 823, 366, 854, 367, 368, 0,
	804, 805, 743, 0, 371, 372, 0, 0, 373, 241,
	880, 374, 881, 855, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 856, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 857, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 882, 407, 408, 409, 410, 757,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 796, 797, 798, 799, 423, 429, 430, 816,
	431, 412, 413, 432, 883, 433, 858, 800, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 838, 440, 441,
	442, 859, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 794, 455, 0, 860, 861, 862,
	839, 0, 0, 457, 458, 863, 864, 777, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 817,
	468, 0, 801, 469, 470, 471, 254, 865, 0, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 749, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 745, 746, 783, 771, 772,
	769, 770, 762, 0, 758, 0, 0, 0, 0, 0,
	761, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 819, 765, 0, 0, 0, 263, 264,
	265, 215, 840, 803, 841, 791, 827, 842, 0, 269,
	793, 792, 272, 273, 274, 766, 818, 275, 843, 844,
	221, 0, 276, 825, 0, 808, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 285, 282, 0, 286, 0,
	287, 288, 0, 868, 289, 290, 291, 811, 809, 810,
	815, 813, 812, 814, 292, 293, 500, 294, 828, 296,
	845, 846, 751, 297, 0, 298, 0, 299, 0, 0,
	829, 301, 0, 302, 303, 0, 0, 0, 756, 304,
	305, 307, 310, 306, 311, 312, 847, 848, 778, 869,
	0, 0, 0, 0, 0, 313, 314, 315, 849, 830,
	831, 0, 318, 0, 319, 0, 0, 870, 320, 0,
	321, 850, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 820, 821, 824, 872, 0, 822, 802, 0, 0,
	0, 0, 328, 330, 337, 0, 871, 331, 851, 806,
	832, 833, 834, 835, 852, 0, 807, 0, 338, 873,
	874, 339, 340, 341, 875, 836, 837, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 853, 876, 349, 350,
	877, 0, 351, 352, 0, 0, 353, 0, 354, 753,
	752, 355, 356, 357, 358, 360, 795, 359, 878, 362,
	363, 365, 364, 748, 0, 879, 779, 823, 366, 854,
	367, 368, 0, 804, 805, 0, 0, 371, 372, 0,
	0, 373, 241, 880, 374, 881, 855, 375, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 856, 384, 244,
	385, 0, 386, 387, 388, 389, 390, 391, 857, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 882, 407, 408,
	409, 410, 757, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 796, 797, 798, 799, 423,
	429, 430, 816, 431, 412, 413, 432, 883, 433, 858,
	800, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	838, 440, 441, 442, 859, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 308, 453, 309, 794, 455, 0,
	860, 861, 862, 839, 0, 0, 457, 458, 863, 864,
	777, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 817, 468, 0, 801, 469, 470, 471, 254,
	865, 2531, 0, 472, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 476, 477, 749, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	783, 771, 772, 769, 770, 762, 0, 758, 0, 0,
	0, 0, 0, 761, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 819, 765, 0, 0,
	0, 263, 264, 265, 215, 840, 803, 841, 791, 827,
	842, 0, 269, 793, 792, 272, 273, 274, 766, 818,
	275, 843, 844, 221, 0, 276, 825, 0, 808, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 291,
	811, 809, 810, 815, 813, 812, 814, 292, 293, 500,
	294, 828, 296, 845, 846, 751, 297, 0, 298, 0,
	299, 0, 0, 829, 301, 0, 302, 303, 0, 0,
	0, 756, 304, 305, 307, 310, 306, 311, 312, 847,
	848, 778, 869, 0, 0, 0, 0, 0, 313, 314,
	315, 849, 830, 831, 0, 318, 0, 319, 0, 0,
	870, 320, 0, 321, 850, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 820, 821, 824, 872, 0, 822,
	802, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 851, 806, 832, 833, 834, 835, 852, 0, 807,
	0, 338, 873, 874, 339, 340, 341, 875, 836, 837,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 853,
	876, 349, 350, 877, 0, 351, 352, 0, 0, 353,
	0, 354, 753, 752, 355, 356, 357, 358, 360, 795,
	359, 878, 362, 363, 365, 364, 748, 0, 879, 779,
	823, 366, 854, 367, 368, 0, 804, 805, 743, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 855,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	856, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 857, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 757, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 796, 797,
	798, 799, 423, 429, 430, 816, 431, 412, 413, 432,
	883, 433, 858, 800, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 838, 440, 441, 442, 859, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	794, 455, 0, 860, 861, 862, 839, 0, 0, 457,
	458, 863, 864, 777, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 817, 468, 0, 801, 469,
	470, 471, 254, 865, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 749, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 745, 746, 783, 771, 772, 769, 770, 762, 0,
	758, 0, 0, 0, 0, 0, 761, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 819,
	765, 0, 0, 0, 263, 264, 265, 215, 840, 803,
	841, 791, 827, 842, 0, 269, 793, 792, 272, 273,
	274, 766, 818, 275, 843, 844, 221, 0, 276, 825,
	0, 808, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 285, 282, 0, 286, 0, 287, 288, 0, 868,
	289, 290, 291, 811, 809, 810, 815, 813, 812, 814,
	292, 293, 500, 294, 828, 296, 845, 846, 751, 297,
	0, 298, 0, 299, 0, 0, 829, 301, 0, 302,
	303, 0, 0, 0, 756, 304, 305, 307, 310, 306,
	311, 312, 847, 848, 778, 869, 0, 0, 0, 0,
	0, 313, 314, 315, 849, 830, 831, 0, 318, 0,
	319, 0, 0, 870, 320, 0, 321, 850, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 820, 821, 824,
	872, 0, 822, 802, 0, 0, 0, 0, 328, 330,
	337, 0, 871, 331, 851, 806, 832, 833, 834, 835,
	852, 0, 807, 0, 338, 873, 874, 339, 340, 341,
	875, 836, 837, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 853, 876, 349, 350, 877, 0, 351, 352,
	0, 0, 353, 0, 354, 753, 752, 355, 356, 357,
	358, 360, 795, 359, 878, 362, 363, 365, 364, 748,
	0, 879, 779, 823, 366, 854, 367, 368, 0, 804,
	805, 0, 0, 371, 372, 0, 0, 373, 241, 880,
	374, 881, 855, 375, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 856, 384, 244, 385, 0, 386, 387,
	388, 389, 390, 391, 857, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 882, 407, 408, 409, 410, 757, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 796, 797, 798, 799, 423, 429, 430, 816, 431,
	412, 413, 432, 883, 433, 858, 800, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 838, 440, 441, 442,
	859, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	308, 453, 309, 794, 455, 0, 860, 861, 862, 839,
	0, 0, 457, 458, 863, 864, 777, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 817, 468,
	0, 801, 469, 470, 471, 254, 865, 0, 0, 472,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 1440, 783, 771, 772,
	769, 770, 762, 758, 0, 0, 0, 0, 0, 761,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 819, 765, 0, 0, 0, 263, 264,
	265, 215, 840, 803, 841, 791, 827, 842, 0, 269,
	793, 792, 272, 273, 274, 766, 818, 275, 843, 844,
	221, 0, 276, 825, 0, 808, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 285, 282, 0, 286, 0,
	287, 288, 0, 868, 289, 290, 291, 811, 809, 810,
	815, 813, 812, 814, 292, 293, 500, 294, 828, 296,
	845, 846, 751, 297, 0, 298, 0, 299, 0, 0,
	829, 301, 0, 302, 303, 0, 0, 0, 756, 304,
	305, 307, 310, 306, 311, 312, 847, 848, 778, 869,
	0, 0, 0, 0, 0, 313, 314, 315, 849, 830,
	831, 0, 318, 0, 319, 0, 1935, 870, 320, 0,
	321, 850, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 820, 821, 824, 872, 0, 822, 802, 0, 0,
	0, 0, 328, 330, 337, 0, 871, 331, 851, 806,
	832, 833, 834, 835, 852, 0, 807, 0, 338, 873,
	874, 339, 340, 341, 875, 836, 837, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 853, 876, 349, 350,
	877, 0, 351, 352, 0, 0, 353, 0, 354, 753,
	752, 355, 356, 357, 358, 360, 795, 359, 878, 362,
	363, 365, 364, 748, 0, 879, 779, 823, 366, 854,
	367, 368, 0, 804, 805, 0, 0, 371, 372, 0,
	0, 373, 241, 880, 374, 881, 855, 375, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 856, 384, 244,
	385, 0, 386, 387, 388, 389, 390, 391, 857, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 882, 407, 408,
	409, 410, 757, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 796, 797, 798, 799, 423,
	429, 430, 816, 431, 412, 413, 432, 883, 433, 858,
	800, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	838, 440, 441, 442, 859, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 308, 453, 309, 794, 455, 0,
	860, 861, 862, 839, 0, 0, 457, 458, 863, 864,
	777, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 817, 468, 0, 801, 469, 470, 471, 254,
	865, 0, 0, 472, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 476, 477, 749, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	0, 0, 0, 0, 0, 0, 0, 758, 0, 0,
	0, 0, 1922, 761, 783, 771, 772, 769, 770, 762,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	819, 765, 0, 0, 0, 263, 264, 265, 215, 840,
	803, 841, 791, 827, 842, 0, 269, 793, 792, 272,
	273, 274, 766, 818, 275, 843, 844, 221, 0, 276,
	825, 0, 808, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 0, 286, 0, 287, 288, 0,
	868, 289, 290, 291, 811, 809, 810, 815, 813, 812,
	814, 292, 293, 500, 294, 828, 296, 845, 846, 751,
	297, 0, 298, 0, 299, 0, 0, 829, 301, 0,
	302, 303, 0, 0, 0, 756, 304, 305, 307, 310,
	306, 311, 312, 847, 848, 778, 869, 0, 0, 0,
	0, 0, 313, 314, 315, 849, 830, 831, 0, 318,
	0, 319, 0, 0, 870, 320, 0, 321, 850, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 820, 821,
	824, 872, 0, 822, 802, 0, 0, 0, 0, 328,
	330, 337, 0, 871, 331, 851, 806, 832, 833, 834,
	835, 852, 0, 807, 0, 338, 873, 874, 339, 340,
	341, 875, 836, 837, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 853, 876, 349, 350, 877, 0, 351,
	352, 0, 0, 353, 0, 354, 753, 752, 355, 356,
	357, 358, 360, 795, 359, 878, 362, 363, 365, 364,
	748, 0, 879, 779, 823, 366, 854, 367, 368, 0,
	804, 805, 0, 0, 371, 372, 0, 0, 373, 241,
	880, 374, 881, 855, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 856, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 857, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 882, 407, 408, 409, 410, 757,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 796, 797, 798, 799, 423, 429, 430, 816,
	431, 412, 413, 432, 883, 433, 858, 800, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 838, 440, 441,
	442, 859, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 794, 455, 0, 860, 861, 862,
	839, 0, 0, 457, 458, 863, 864, 777, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 817,
	468, 0, 801, 469, 470, 471, 254, 865, 0, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 749, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 745, 746, 0, 0, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 0, 1911,
	761, 783, 771, 772, 769, 770, 762, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 819, 765, 0,
	0, 0, 263, 264, 265, 215, 840, 803, 841, 791,
	827, 842, 0, 269, 793, 792, 272, 273, 274, 766,
	818, 275, 843, 844, 221, 0, 276, 825, 0, 808,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 285,
	282, 0, 286, 0, 287, 288, 0, 868, 289, 290,
	291, 811, 809, 810, 815, 813, 812, 814, 292, 293,
	500, 294, 828, 296, 845, 846, 751, 297, 0, 298,
	0, 299, 0, 0, 829, 301, 0, 302, 303, 0,
	0, 0, 756, 304, 305, 307, 310, 306, 311, 312,
	847, 848, 778, 869, 0, 0, 0, 0, 0, 313,
	314, 315, 849, 830, 831, 0, 318, 0, 319, 0,
	0, 870, 320, 0, 321, 850, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 820, 821, 824, 872, 0,
	822, 802, 0, 0, 0, 0, 328, 330, 337, 0,
	871, 331, 851, 806, 832, 833, 834, 835, 852, 0,
	807, 0, 338, 873, 874, 339, 340, 341, 875, 836,
	837, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	853, 876, 349, 350, 877, 0, 351, 352, 0, 0,
	353, 0, 354, 753, 752, 355, 356, 357, 358, 360,
	795, 359, 878, 362, 363, 365, 364, 748, 0, 879,
	779, 823, 366, 854, 367, 368, 0, 804, 805, 0,
	0, 371, 372, 0, 0, 373, 241, 880, 374, 881,
	855, 375, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 856, 384, 244, 385, 0, 386, 387, 388, 389,
	390, 391, 857, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 882, 407, 408, 409, 410, 757, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 796,
	797, 798, 799, 423, 429, 430, 816, 431, 412, 413,
	432, 883, 433, 858, 800, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 838, 440, 441, 442, 859, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 308, 453,
	309, 794, 455, 0, 860, 861, 862, 839, 0, 0,
	457, 458, 863, 864, 777, 459, 460, 0, 461, 462,
	0, 0, 463, 464, 465, 467, 817, 468, 0, 801,
	469, 470, 471, 254, 865, 0, 0, 472, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 749,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 745, 746, 0, 0, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 1909, 761, 783, 771,
	772, 769, 770, 762, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 819, 765, 0, 0, 0, 263,
	264, 265, 215, 840, 803, 841, 791, 827, 842, 0,
	269, 793, 792, 272, 273, 274, 766, 818, 275, 843,
	844, 221, 0, 276, 825, 0, 808, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 868, 289, 290, 291, 811, 809,
	810, 815, 813, 812, 814, 292, 293, 500, 294, 828,
	296, 845, 846, 751, 297, 0, 298, 0, 299, 0,
	0, 829, 301, 0, 302, 303, 0, 0, 0, 756,
	304, 305, 307, 310, 306, 311, 312, 847, 848, 778,
	869, 0, 0, 0, 0, 0, 313, 314, 315, 849,
	830, 831, 0, 318, 0, 319, 0, 0, 870, 320,
	0, 321, 850, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 820, 821, 824, 872, 0, 822, 802, 0,
	0, 0, 0, 328, 330, 337, 0, 871, 331, 851,
	806, 832, 833, 834, 835, 852, 0, 807, 0, 338,
	873, 874, 339, 340, 341, 875, 836, 837, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 853, 876, 349,
	350, 877, 0, 351, 352, 0, 0, 353, 0, 354,
	753, 752, 355, 356, 357, 358, 360, 795, 359, 878,
	362, 363, 365, 364, 748, 0, 879, 779, 823, 366,
	854, 367, 368, 0, 804, 805, 0, 0, 371, 372,
	0, 0, 373, 241, 880, 374, 881, 855, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 856, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 857,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 882, 407,
	408, 409, 410, 757, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 796, 797, 798, 799,
	423, 429, 430, 816, 431, 412, 413, 432, 883, 433,
	858, 800, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 838, 440, 441, 442, 859, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 794, 455,
	0, 860, 861, 862, 839, 0, 0, 457, 458, 863,
	864, 777, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 817, 468, 0, 801, 469, 470, 471,
	254, 865, 0, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 749, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 745,
	746, 0, 0, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 1907, 761, 783, 771, 772, 769, 770,
	762, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 819, 765, 0, 0, 0, 263, 264, 265, 215,
	840, 803, 841, 791, 827, 842, 0, 269, 793, 792,
	272, 273, 274, 766, 818, 275, 843, 844, 221, 0,
	276, 825, 0, 808, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 285, 282, 0, 286, 0, 287, 288,
	0, 868, 289, 290, 291, 811, 809, 810, 815, 813,
	812, 814, 292, 293, 500, 294, 828, 296, 845, 846,
	751, 297, 0, 298, 0, 299, 0, 0, 829, 301,
	0, 302, 303, 0, 0, 0, 756, 304, 305, 307,
	310, 306, 311, 312, 847, 848, 778, 869, 0, 0,
	0, 0, 0, 313, 314, 315, 849, 830, 831, 0,
	318, 0, 319, 0, 0, 870, 320, 0, 321, 850,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 820,
	821, 824, 872, 0, 822, 802, 0, 0, 0, 0,
	328, 330, 337, 0, 871, 331, 851, 806, 832, 833,
	834, 835, 852, 0, 807, 0, 338, 873, 874, 339,
	340, 341, 875, 836, 837, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 853, 876, 349, 350, 877, 0,
	351, 352, 0, 0, 353, 0, 354, 753, 752, 355,
	356, 357, 358, 360, 795, 359, 878, 362, 363, 365,
	364, 748, 0, 879, 779, 823, 366, 854, 367, 368,
	0, 804, 805, 0, 0, 371, 372, 0, 0, 373,
	241, 880, 374, 881, 855, 375, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 856, 384, 244, 385, 0,
	386, 387, 388, 389, 390, 391, 857, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 882, 407, 408, 409, 410,
	757, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 796, 797, 798, 799, 423, 429, 430,
	816, 431, 412, 413, 432, 883, 433, 858, 800, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 838, 440,
	441, 442, 859, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 308, 453, 309, 794, 455, 0, 860, 861,
	862, 839, 0, 0, 457, 458, 863, 864, 777, 459,
	460, 0, 461, 462, 0, 0, 463, 464, 465, 467,
	817, 468, 0, 801, 469, 470, 471, 254, 865, 0,
	0, 472, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 749, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 745, 746, 0, 0,
	0, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	1904, 761, 1896, 771, 772, 769, 770, 762, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 819, 765,
	0, 0, 0, 263, 264, 265, 215, 840, 803, 841,
	791, 827, 842, 0, 269, 793, 792, 272, 273, 274,
	766, 818, 275, 843, 844, 221, 0, 276, 825, 0,
	808, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 811, 809, 810, 815, 813, 812, 814, 292,
	293, 500, 294, 828, 1899, 845, 846, 751, 297, 0,
	298, 0, 299, 0, 0, 829, 301, 0, 302, 303,
	0, 0, 0, 756, 304, 305, 307, 310, 306, 311,
	312, 847, 848, 778, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 849, 830, 831, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 850, 0, 230, 0,
	322, 323, 1900, 325, 326, 327, 820, 821, 824, 872,
	0, 822, 802, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 851, 806, 832, 833, 834, 835, 852,
	0, 807, 0, 338, 873, 874, 339, 340, 341, 875,
	836, 837, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 853, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 753, 752, 1901, 1898, 357, 358,
	360, 795, 359, 878, 362, 363, 365, 364, 748, 0,
	879, 779, 823, 366, 854, 367, 368, 0, 804, 805,
	0, 0, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 855, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 856, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 857, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 757, 411, 0,
	415, 416, 417, 418, 419, 420, 1902, 0, 427, 428,
	796, 797, 798, 799, 423, 429, 430, 816, 431, 412,
	413, 432, 883, 433, 858, 800, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 838, 440, 441, 442, 859,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 794, 455, 0, 860, 861, 862, 839, 0,
	0, 457, 458, 863, 864, 777, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 817, 468, 0,
	801, 469, 470, 471, 254, 865, 0, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 1897, 477,
	749, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 0, 0, 0, 0, 0,
	0, 0, 758, 0, 0, 0, 0, 1893, 761, 1896,
	771, 772, 769, 770, 762, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 819, 765, 0, 0, 0,
	263, 264, 265, 215, 840, 803, 841, 791, 827, 842,
	0, 269, 793, 792, 272, 273, 274, 766, 818, 275,
	843, 844, 221, 0, 276, 825, 0, 808, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 285, 282, 0,
	286, 0, 287, 288, 0, 868, 289, 290, 291, 811,
	809, 810, 815, 813, 812, 814, 292, 293, 500, 294,
	828, 1899, 845, 846, 751, 297, 0, 298, 0, 299,
	0, 0, 829, 301, 0, 302, 303, 0, 0, 0,
	756, 304, 305, 307, 310, 306, 311, 312, 847, 848,
	778, 869, 0, 0, 0, 0, 0, 313, 314, 315,
	849, 830, 831, 0, 318, 0, 319, 0, 0, 870,
	320, 0, 321, 850, 0, 230, 0, 322, 323, 1900,
	325, 326, 327, 820, 821, 824, 872, 0, 822, 802,
	0, 0, 0, 0, 328, 330, 337, 0, 871, 331,
	851, 806, 832, 833, 834, 835, 852, 0, 807, 0,
	338, 873, 874, 339, 340, 341, 875, 836, 837, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 853, 876,
	349, 350, 877, 0, 351, 352, 0, 0, 353, 0,
	354, 753, 752, 1901, 1898, 357, 358, 360, 795, 359,
	878, 362, 363, 365, 364, 748, 0, 879, 779, 823,
	366, 854, 367, 368, 0, 804, 805, 0, 0, 371,
	372, 0, 0, 373, 241, 880, 374, 881, 855, 375,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 856,
	384, 244, 385, 0, 386, 387, 388, 389, 390, 391,
	857, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 882,
	407, 408, 409, 410, 757, 411, 0, 415, 416, 417,
	418, 419, 420, 1902, 0, 427, 428, 796, 797, 798,
	799, 423, 429, 430, 816, 431, 412, 413, 432, 883,
	433, 858, 800, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 838, 440, 441, 442, 859, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 308, 453, 309, 794,
	455, 0, 860, 861, 862, 839, 0, 0, 457, 458,
	863, 864, 777, 459, 460, 0, 461, 462, 0, 0,
	463, 464, 465, 467, 817, 468, 0, 801, 469, 470,
	471, 254, 865, 0, 0, 472, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 1897, 477, 749, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 783, 771, 772, 769, 770, 762, 0, 758,
	0, 0, 0, 0, 0, 761, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 819, 765,
	0, 0, 0, 263, 264, 265, 215, 840, 803, 841,
	791, 827, 842, 0, 269, 793, 792, 272, 273, 274,
	766, 818, 275, 843, 844, 221, 0, 276, 825, 0,
	808, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 811, 809, 810, 815, 813, 812, 814, 292,
	293, 500, 294, 828, 296, 845, 846, 751, 297, 0,
	298, 0, 299, 0, 0, 829, 301, 0, 302, 303,
	0, 0, 0, 756, 304, 305, 307, 310, 306, 311,
	312, 847, 848, 778, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 849, 830, 831, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 850, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 820, 821, 824, 872,
	0, 822, 802, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 851, 806, 832, 833, 834, 835, 852,
	0, 807, 0, 338, 873, 874, 339, 340, 341, 875,
	836, 837, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 853, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 753, 752, 355, 356, 357, 358,
	360, 795, 359, 878, 362, 363, 365, 364, 748, 0,
	879, 779, 823, 366, 854, 367, 368, 0, 804, 805,
	0, 0, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 855, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 856, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 857, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 757, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	796, 797, 798, 799, 423, 429, 430, 816, 431, 412,
	413, 432, 883, 433, 858, 800, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 838, 440, 441, 442, 859,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 794, 455, 0, 860, 861, 862, 839, 0,
	0, 457, 458, 863, 864, 777, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 817, 468, 0,
	801, 469, 470, 471, 254, 865, 0, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	749, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 0, 0, 0, 0, 0,
	1380, 0, 758, 0, 0, 0, 0, 0, 761, 783,
	771, 772, 769, 770, 762, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 1743,
	262, 0, 0, 0, 0, 819, 765, 0, 0, 0,
	263, 264, 265, 215, 840, 803, 841, 791, 827, 842,
	0, 269, 793, 792, 272, 273, 274, 766, 818, 275,
	843, 844, 221, 0, 276, 825, 0, 808, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 285, 282, 0,
	286, 0, 287, 288, 0, 868, 289, 290, 291, 811,
	809, 810, 815, 813, 812, 814, 292, 293, 500, 294,
	828, 296, 845, 846, 751, 297, 0, 298, 0, 299,
	0, 0, 829, 301, 0, 302, 303, 0, 0, 0,
	756, 304, 305, 307, 310, 306, 311, 312, 847, 848,
	778, 869, 0, 0, 0, 0, 0, 313, 314, 315,
	849, 830, 831, 0, 318, 0, 319, 0, 0, 870,
	320, 0, 321, 850, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 820, 821, 824, 872, 0, 822, 802,
	0, 0, 0, 0, 328, 330, 337, 0, 871, 331,
	851, 806, 832, 833, 834, 835, 852, 0, 807, 0,
	338, 873, 874, 339, 340, 341, 875, 836, 837, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 853, 876,
	349, 350, 877, 0, 351, 352, 0, 0, 353, 0,
	354, 753, 752, 355, 356, 357, 358, 360, 795, 359,
	878, 362, 363, 365, 364, 748, 0, 879, 779, 823,
	366, 854, 367, 368, 0, 804, 805, 0, 0, 371,
	372, 0, 0, 373, 241, 880, 374, 881, 855, 375,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 856,
	384, 244, 385, 0, 386, 387, 388, 389, 390, 391,
	857, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 882,
	407, 408, 409, 410, 757, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 796, 797, 798,
	799, 423, 429, 430, 816, 431, 412, 413, 432, 883,
	433, 858, 800, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 838, 440, 441, 442, 859, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 308, 453, 309, 794,
	455, 0, 860, 861, 862, 839, 0, 0, 457, 458,
	863, 864, 777, 459, 460, 0, 461, 462, 0, 0,
	463, 464, 465, 467, 817, 468, 0, 801, 469, 470,
	471, 254, 865, 0, 0, 472, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 749, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 0, 0, 0, 0, 0, 0, 0, 758,
	0, 0, 0, 0, 1080, 761, 783, 771, 772, 769,
	770, 762, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 819, 765, 0, 0, 0, 263, 264, 265,
	215, 840, 803, 841, 791, 827, 842, 0, 269, 793,
	792, 272, 273, 274, 766, 818, 275, 843, 844, 221,
	0, 276, 825, 0, 808, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 811, 809, 810, 815,
	813, 812, 814, 292, 293, 500, 294, 828, 296, 845,
	846, 751, 297, 0, 298, 0, 299, 0, 0, 829,
	301, 0, 302, 303, 0, 0, 0, 756, 304, 305,
	307, 310, 306, 311, 312, 847, 848, 778, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 849, 830, 831,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	850, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1079, 821, 824, 872, 0, 822, 802, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 851, 806, 832,
	833, 834, 835, 852, 0, 807, 0, 338, 873, 874,
	339, 340, 341, 875, 836, 837, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 853, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 753, 752,
	355, 356, 357, 358, 360, 795, 359, 878, 362, 363,
	365, 364, 748, 0, 879, 779, 823, 366, 854, 367,
	368, 0, 804, 805, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 855, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 856, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 857, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 757, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 796, 797, 798, 799, 423, 429,
	430, 816, 431, 412, 413, 432, 883, 433, 858, 800,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 838,
	440, 441, 442, 859, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 794, 455, 0, 860,
	861, 862, 839, 0, 0, 457, 458, 863, 864, 777,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 817, 468, 0, 801, 469, 470, 471, 254, 865,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 749, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 0,
	0, 0, 0, 0, 0, 0, 758, 0, 0, 0,
	0, 1074, 761, 783, 771, 772, 769, 770, 762, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 819,
	765, 0, 0, 0, 263, 264, 265, 215, 840, 803,
	841, 791, 827, 842, 0, 269, 793, 792, 272, 273,
	274, 766, 818, 275, 843, 844, 221, 0, 276, 825,
	0, 808, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 285, 282, 0, 286, 0, 287, 288, 0, 868,
	289, 290, 291, 811, 809, 810, 815, 813, 812, 814,
	292, 293, 500, 294, 828, 296, 845, 846, 751, 297,
	0, 298, 0, 299, 0, 0, 829, 301, 0, 302,
	303, 0, 0, 0, 756, 304, 305, 307, 310, 306,
	311, 312, 847, 848, 778, 869, 0, 0, 0, 0,
	0, 313, 314, 315, 849, 830, 831, 0, 318, 0,
	319, 0, 0, 870, 320, 0, 321, 850, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 1073, 821, 824,
	872, 0, 822, 802, 0, 0, 0, 0, 328, 330,
	337, 0, 871, 331, 851, 806, 832, 833, 834, 835,
	852, 0, 807, 0, 338, 873, 874, 339, 340, 341,
	875, 836, 837, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 853, 876, 349, 350, 877, 0, 351, 352,
	0, 0, 353, 0, 354, 753, 752, 355, 356, 357,
	358, 360, 795, 359, 878, 362, 363, 365, 364, 748,
	0, 879, 779, 823, 366, 854, 367, 368, 0, 804,
	805, 0, 0, 371, 372, 0, 0, 373, 241, 880,
	374, 881, 855, 375, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 856, 384, 244, 385, 0, 386, 387,
	388, 389, 390, 391, 857, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 882, 407, 408, 409, 410, 757, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 796, 797, 798, 799, 423, 429, 430, 816, 431,
	412, 413, 432, 883, 433, 858, 800, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 838, 440, 441, 442,
	859, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	308, 453, 309, 794, 455, 0, 860, 861, 862, 839,
	0, 0, 457, 458, 863, 864, 777, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 817, 468,
	0, 801, 469, 470, 471, 254, 865, 0, 0, 472,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 0, 0, 0, 0,
	0, 0, 0, 758, 0, 0, 0, 0, 1069, 761,
	783, 771, 772, 769, 770, 762, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 819, 765, 0, 0,
	0, 263, 264, 265, 215, 840, 803, 841, 791, 827,
	842, 0, 269, 793, 792, 272, 273, 274, 766, 818,
	275, 843, 844, 221, 0, 276, 825, 0, 808, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 291,
	811, 809, 810, 815, 813, 812, 814, 292, 293, 500,
	294, 828, 296, 845, 846, 751, 297, 0, 298, 0,
	299, 0, 0, 829, 301, 0, 302, 303, 0, 0,
	0, 756, 304, 305, 307, 310, 306, 311, 312, 847,
	848, 778, 869, 0, 0, 0, 0, 0, 313, 314,
	315, 849, 830, 831, 0, 318, 0, 319, 0, 0,
	870, 320, 0, 321, 850, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 820, 821, 824, 872, 0, 822,
	802, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 851, 806, 832, 833, 834, 835, 852, 0, 807,
	0, 338, 873, 874, 339, 340, 341, 875, 836, 837,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 853,
	876, 349, 350, 877, 0, 351, 352, 0, 0, 353,
	0, 354, 753, 752, 355, 356, 357, 358, 360, 795,
	359, 878, 362, 363, 365, 364, 748, 0, 879, 779,
	823, 366, 854, 367, 368, 0, 804, 805, 0, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 855,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	856, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 857, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 757, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 796, 797,
	798, 799, 423, 429, 430, 816, 431, 412, 413, 432,
	883, 433, 858, 800, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 838, 440, 441, 442, 859, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	794, 455, 0, 860, 861, 862, 839, 0, 0, 457,
	458, 863, 864, 777, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 817, 468, 0, 801, 469,
	470, 471, 254, 865, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 749, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 745, 746, 783, 771, 772, 769, 770, 762, 0,
	758, 0, 0, 0, 0, 0, 761, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 819,
	765, 0, 0, 0, 263, 264, 265, 215, 840, 803,
	841, 791, 827, 842, 0, 269, 793, 792, 272, 273,
	274, 766, 818, 275, 843, 844, 221, 0, 276, 825,
	0, 808, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 285, 282, 0, 286, 0, 287, 288, 0, 868,
	289, 290, 291, 811, 809, 810, 815, 813, 812, 814,
	292, 293, 500, 294, 828, 296, 845, 846, 751, 297,
	0, 298, 0, 299, 0, 0, 829, 301, 0, 302,
	303, 0, 0, 0, 756, 304, 305, 307, 310, 306,
	311, 312, 847, 848, 778, 869, 0, 0, 0, 0,
	0, 313, 314, 315, 849, 830, 831, 0, 318, 0,
	319, 0, 0, 870, 320, 0, 321, 850, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 820, 821, 824,
	872, 0, 822, 802, 0, 0, 0, 0, 328, 330,
	337, 0, 871, 331, 851, 806, 832, 833, 834, 835,
	852, 0, 807, 0, 338, 873, 874, 339, 340, 341,
	875, 836, 837, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 853, 876, 349, 350, 877, 0, 351, 352,
	0, 0, 353, 0, 354, 753, 752, 355, 356, 357,
	358, 360, 795, 359, 878, 362, 363, 365, 364, 748,
	0, 879, 779, 823, 366, 854, 367, 368, 0, 804,
	805, 0, 0, 371, 372, 0, 0, 373, 241, 880,
	374, 881, 855, 375, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 856, 384, 244, 385, 0, 386, 387,
	388, 389, 390, 391, 857, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 882, 407, 408, 409, 410, 757, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 796, 797, 798, 799, 423, 429, 430, 816, 431,
	412, 413, 432, 883, 433, 858, 800, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 838, 440, 441, 442,
	859, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	308, 453, 309, 794, 455, 0, 860, 861, 862, 839,
	0, 0, 457, 458, 863, 864, 777, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 817, 468,
	0, 801, 469, 470, 471, 254, 865, 0, 0, 472,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 783, 771, 772, 769,
	770, 762, 0, 758, 0, 0, 0, 0, 0, 761,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 819, 765, 0, 0, 0, 263, 264, 265,
	215, 840, 803, 841, 791, 827, 842, 0, 269, 793,
	792, 272, 273, 274, 766, 818, 275, 843, 844, 221,
	0, 276, 825, 0, 808, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 3080, 811, 809, 810, 815,
	813, 812, 814, 292, 293, 500, 294, 828, 296, 845,
	846, 751, 297, 0, 298, 0, 299, 0, 0, 829,
	301, 0, 302, 303, 0, 0, 0, 756, 304, 305,
	307, 310, 306, 311, 312, 847, 848, 778, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 849, 830, 831,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	850, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	820, 821, 824, 872, 0, 822, 802, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 851, 806, 832,
	833, 834, 835, 852, 0, 807, 0, 338, 873, 874,
	339, 340, 341, 875, 836, 837, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 853, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 753, 752,
	355, 356, 357, 358, 360, 795, 359, 878, 362, 363,
	365, 364, 748, 0, 879, 779, 823, 366, 854, 367,
	368, 0, 804, 805, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 855, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 856, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 857, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 757, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 796, 797, 798, 799, 423, 429,
	430, 816, 431, 412, 413, 432, 883, 433, 858, 800,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 838,
	440, 441, 442, 859, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 794, 455, 0, 860,
	861, 862, 839, 0, 0, 457, 458, 863, 864, 777,
	459, 460, 0, 3079, 462, 0, 0, 463, 464, 465,
	467, 817, 468, 0, 801, 469, 470, 471, 254, 865,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 749, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 783,
	771, 772, 769, 770, 762, 0, 758, 0, 0, 0,
	0, 0, 761, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 819, 765, 0, 0, 0,
	263, 264, 265, 3078, 840, 803, 841, 791, 827, 842,
	0, 269, 793, 792, 272, 273, 274, 766, 818, 275,
	843, 844, 221, 0, 276, 825, 0, 808, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 285, 282, 0,
	286, 0, 287, 288, 0, 868, 289, 290, 3080, 811,
	809, 810, 815, 813, 812, 814, 292, 293, 500, 294,
	828, 296, 845, 846, 751, 297, 0, 298, 0, 299,
	0, 0, 829, 301, 0, 302, 303, 0, 0, 0,
	756, 304, 305, 307, 310, 306, 311, 312, 847, 848,
	778, 869, 0, 0, 0, 0, 0, 313, 314, 315,
	849, 830, 831, 0, 318, 0, 319, 0, 0, 870,
	320, 0, 321, 850, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 820, 821, 824, 872, 0, 822, 802,
	0, 0, 0, 0, 328, 330, 337, 0, 871, 331,
	851, 806, 832, 833, 834, 835, 852, 0, 807, 0,
	338, 873, 874, 339, 340, 341, 875, 836, 837, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 853, 876,
	349, 350, 877, 0, 351, 352, 0, 0, 353, 0,
	354, 753, 752, 355, 356, 357, 358, 360, 795, 359,
	878, 362, 363, 365, 364, 748, 0, 879, 779, 823,
	366, 854, 367, 368, 0, 804, 805, 0, 0, 371,
	372, 0, 0, 373, 241, 880, 374, 881, 855, 375,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 856,
	384, 244, 385, 0, 386, 387, 388, 389, 390, 391,
	857, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 882,
	407, 408, 409, 410, 757, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 796, 797, 798,
	799, 423, 429, 430, 816, 431, 412, 413, 432, 883,
	433, 858, 800, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 838, 440, 441, 442, 859, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 308, 453, 309, 794,
	455, 0, 860, 861, 862, 839, 0, 0, 457, 458,
	863, 864, 777, 459, 460, 0, 3079, 462, 0, 0,
	463, 464, 465, 467, 817, 468, 0, 801, 469, 470,
	471, 254, 865, 0, 0, 472, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 749, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 783, 771, 772, 769, 770, 762, 0, 758,
	0, 0, 0, 0, 0, 761, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 819, 765,
	0, 0, 0, 263, 264, 265, 215, 840, 803, 841,
	791, 827, 842, 0, 269, 793, 792, 272, 273, 274,
	766, 818, 275, 843, 844, 221, 0, 276, 825, 0,
	808, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 811, 809, 810, 815, 813, 812, 814, 292,
	293, 500, 294, 828, 296, 845, 846, 0, 297, 0,
	298, 0, 299, 0, 0, 829, 301, 0, 302, 303,
	0, 0, 0, 756, 304, 305, 307, 310, 306, 311,
	312, 847, 848, 778, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 849, 830, 831, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 850, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 820, 821, 824, 872,
	0, 822, 802, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 851, 806, 832, 833, 834, 835, 852,
	0, 807, 0, 338, 873, 874, 339, 340, 341, 875,
	836, 837, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 853, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 795, 359, 878, 362, 363, 365, 364, 0, 0,
	879, 779, 823, 366, 854, 367, 368, 0, 804, 805,
	0, 0, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 855, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 856, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 857, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 757, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	796, 797, 798, 799, 423, 429, 430, 816, 431, 412,
	413, 432, 883, 433, 858, 800, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 838, 440, 441, 442, 859,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 794, 455, 0, 860, 861, 862, 839, 0,
	0, 457, 458, 863, 864, 777, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 817, 468, 0,
	801, 469, 470, 471, 254, 865, 0, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	783, 771, 772, 769, 770, 762, 0, 0, 1919, 0,
	0, 0, 0, 1917, 1918, 0, 258, 259, 260, 261,
	0, 262, 758, 0, 0, 0, 819, 765, 761, 0,
	0, 263, 264, 265, 0, 840, 803, 841, 791, 827,
	842, 0, 269, 793, 792, 272, 273, 274, 766, 818,
	275, 843, 844, 221, 0, 276, 825, 0, 808, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 3080,
	811, 809, 810, 815, 813, 812, 814, 292, 293, 500,
	294, 828, 296, 845, 846, 751, 297, 0, 298, 0,
	299, 0, 0, 829, 301, 0, 302, 303, 0, 0,
	0, 756, 304, 305, 307, 310, 306, 311, 312, 847,
	848, 778, 869, 0, 0, 0, 0, 0, 313, 314,
	315, 849, 830, 831, 0, 318, 0, 319, 0, 0,
	870, 320, 0, 321, 850, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 820, 821, 824, 0, 0, 822,
	802, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 851, 806, 832, 833, 834, 835, 852, 0, 807,
	0, 338, 0, 0, 339, 340, 341, 875, 836, 837,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 853,
	876, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 753, 752, 355, 356, 357, 358, 360, 795,
	359, 878, 362, 363, 365, 364, 748, 0, 0, 779,
	823, 366, 854, 367, 368, 0, 804, 805, 0, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 855,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	856, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 857, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 757, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 796, 797,
	798, 799, 423, 429, 430, 816, 431, 412, 413, 432,
	0, 433, 858, 800, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 838, 440, 441, 442, 859, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	794, 455, 0, 860, 861, 862, 839, 0, 0, 457,
	458, 863, 864, 777, 459, 460, 0, 3079, 462, 0,
	0, 463, 464, 465, 467, 817, 468, 0, 801, 469,
	470, 471, 254, 865, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 733, 0, 935, 0, 0, 0,
	0, 745, 746, 0, 0, 0, 0, 0, 0, 0,
	758, 0, 258, 259, 260, 261, 761, 262, 0, 0,
	0, 0, 819, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 818, 275, 219, 220, 221,
	0, 276, 825, 0, 808, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 811, 809, 810, 815,
	813, 812, 814, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 847, 848, 0, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	850, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	820, 821, 824, 872, 0, 822, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 922, 348, 347, 0, 853, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 823, 366, 240, 367,
	368, 0, 369, 370, 0, 927, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 855, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 856, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 929, 0, 415, 416, 417, 418, 419, 420,
	421, 171, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 816, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 859, 0, 446, 447, 173, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 863, 864, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 817, 468, 0, 466, 469, 470, 471, 1155, 255,
	0, 0, 472, 256, 0, 0, 935, 165, 473, 474,
	257, 475, 476, 477, 0, 166, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 819, 0, 919, 0, 1465, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 818, 275, 219, 220, 221,
	0, 276, 825, 0, 808, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 811, 809, 810, 815,
	813, 812, 814, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 847, 848, 0, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	850, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	820, 821, 824, 872, 0, 822, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 922, 348, 347, 0, 853, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 823, 366, 240, 367,
	368, 0, 369, 370, 0, 927, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 855, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 856, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 929, 0, 415, 416, 417, 418, 419, 420,
	421, 171, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 816, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 859, 0, 446, 447, 173, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 863, 864, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 817, 468, 0, 466, 469, 470, 471, 1155, 255,
	0, 0, 472, 256, 918, 0, 935, 165, 473, 474,
	257, 475, 476, 477, 0, 166, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 819, 0, 919, 0, 1465, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 818, 275, 219, 220, 221,
	0, 276, 825, 0, 808, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 811, 809, 810, 815,
	813, 812, 814, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 847, 848, 0, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	850, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	820, 821, 824, 872, 0, 822, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 922, 348, 347, 0, 853, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 823, 366, 240, 367,
	368, 0, 369, 370, 0, 927, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 855, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 856, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 929, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 816, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 859, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 863, 864, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 817, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 0, 0, 935, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 819, 0, 919, 0, 924, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 818, 275, 219, 220, 221,
	0, 276, 825, 0, 808, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 811, 809, 810, 815,
	813, 812, 814, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 847, 848, 0, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	850, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	820, 821, 824, 872, 0, 822, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 922, 348, 347, 0, 853, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 823, 366, 240, 367,
	368, 0, 369, 370, 0, 927, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 855, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 856, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 929, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 816, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 859, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 863, 864, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 817, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 0, 0, 935, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 819, 0, 919, 0, 924, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 818, 275, 219, 220, 221,
	0, 276, 825, 0, 808, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 811, 809, 810, 815,
	813, 812, 814, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 847, 848, 0, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	850, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	820, 821, 824, 872, 0, 822, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 853, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 823, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 855, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 856, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 816, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 859, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 863, 864, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 817, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 0, 0, 935, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 819, 0, 0, 0, 2637, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 818, 275, 219, 220, 221,
	0, 276, 825, 0, 808, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 811, 809, 810, 815,
	813, 812, 814, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 847, 848, 0, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	850, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	820, 821, 824, 872, 0, 822, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 853, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 823, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 855, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 856, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 929, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 816, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 859, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 863, 864, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 817, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1152, 0, 958, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 1369, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 962, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 872, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 171, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 173, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 1155, 255,
	0, 0, 472, 256, 0, 0, 935, 165, 473, 474,
	257, 475, 476, 477, 0, 166, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 819, 0, 0, 0, 138, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 818, 275, 219, 220, 221,
	0, 276, 825, 0, 808, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 811, 809, 810, 815,
	813, 812, 814, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 847, 848, 0, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	850, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	820, 821, 824, 872, 0, 822, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 873, 874,
	339, 340, 341, 875, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 853, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 361, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 0, 823, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 855, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 856, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 816, 431, 412, 413, 432, 883, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 859, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 863, 864, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 817, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 733, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 171, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 173, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 1155, 255,
	0, 0, 472, 256, 0, 0, 0, 165, 473, 474,
	257, 475, 476, 477, 0, 166, 783, 771, 772, 769,
	770, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 138, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 840, 803, 841, 791, 827, 842, 0, 269, 793,
	792, 272, 273, 274, 0, 0, 275, 843, 844, 221,
	0, 276, 222, 0, 962, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 868, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 828, 296, 845,
	846, 0, 297, 0, 298, 0, 299, 0, 0, 829,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 778, 869, 0,
	0, 0, 0, 0, 313, 314, 315, 849, 830, 831,
	0, 318, 0, 319, 0, 0, 870, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 872, 0, 237, 802, 0, 0, 0,
	0, 328, 330, 337, 0, 871, 331, 851, 806, 832,
	833, 834, 835, 852, 0, 807, 0, 338, 873, 874,
	339, 340, 341, 875, 836, 837, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 876, 349, 350, 877,
	0, 351, 352, 0, 0, 353, 0, 354, 937, 936,
	355, 356, 357, 358, 360, 795, 359, 878, 362, 363,
	365, 364, 0, 0, 879, 779, 239, 366, 854, 367,
	368, 0, 804, 805, 0, 0, 371, 372, 0, 0,
	373, 241, 880, 374, 881, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 857, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 882, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 796, 797, 798, 799, 423, 429,
	430, 0, 431, 412, 413, 432, 883, 433, 858, 800,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 838,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 794, 455, 0, 860,
	861, 862, 839, 0, 0, 457, 458, 252, 253, 777,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 801, 469, 470, 471, 254, 865,
	497, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 0, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	2103, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 0, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	2546, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 1235, 0,
	958, 957, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	1470, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 962, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 869, 0, 0, 0, 0, 0, 1234, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	870, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 872, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 873, 874, 339, 340, 341, 875, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	876, 349, 350, 877, 0, 351, 352, 0, 0, 353,
	0, 354, 937, 936, 355, 356, 357, 358, 360, 361,
	359, 878, 362, 363, 365, 364, 0, 0, 879, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 1233,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	883, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 1148, 0,
	958, 957, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 962, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 869, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	870, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 1147, 232, 233, 872, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 873, 874, 339, 340, 341, 875, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	876, 349, 350, 877, 0, 351, 352, 0, 0, 353,
	0, 354, 937, 936, 355, 356, 357, 358, 360, 361,
	359, 878, 362, 363, 365, 364, 0, 0, 879, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	883, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 1144, 0,
	958, 957, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 962, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 869, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	870, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 1143, 232, 233, 872, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 873, 874, 339, 340, 341, 875, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	876, 349, 350, 877, 0, 351, 352, 0, 0, 353,
	0, 354, 937, 936, 355, 356, 357, 358, 360, 361,
	359, 878, 362, 363, 365, 364, 0, 0, 879, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	883, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 1105, 0,
	958, 957, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 962, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 869, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	870, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 1104, 232, 233, 872, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 873, 874, 339, 340, 341, 875, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	876, 349, 350, 877, 0, 351, 352, 0, 0, 353,
	0, 354, 937, 936, 355, 356, 357, 358, 360, 361,
	359, 878, 362, 363, 365, 364, 0, 0, 879, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	883, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 1102, 0,
	958, 957, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 962, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 869, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	870, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 1101, 232, 233, 872, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 873, 874, 339, 340, 341, 875, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	876, 349, 350, 877, 0, 351, 352, 0, 0, 353,
	0, 354, 937, 936, 355, 356, 357, 358, 360, 361,
	359, 878, 362, 363, 365, 364, 0, 0, 879, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	883, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 951, 0,
	958, 957, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 962, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 868, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 869, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	870, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 953, 232, 233, 872, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 871,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 873, 874, 339, 340, 341, 875, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	876, 349, 350, 877, 0, 351, 352, 0, 0, 353,
	0, 354, 937, 936, 355, 356, 357, 358, 360, 361,
	359, 878, 362, 363, 365, 364, 0, 0, 879, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 880, 374, 881, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	882, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	883, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 958, 957, 472, 256, 0, 955,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 275, 219, 220, 221, 0, 276,
	222, 0, 962, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 0, 286, 0, 287, 288, 0,
	868, 289, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 500, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 869, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 870, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 872, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 871, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 873, 874, 339, 340,
	341, 875, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 876, 349, 350, 877, 0, 351,
	352, 0, 0, 353, 0, 354, 937, 936, 355, 356,
	357, 358, 360, 361, 359, 878, 362, 363, 365, 364,
	0, 0, 879, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	880, 374, 881, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 882, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 883, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 958, 957,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 962, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 868, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	869, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 870, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 872, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 871, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	873, 874, 339, 340, 341, 875, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 876, 349,
	350, 877, 0, 351, 352, 0, 0, 353, 0, 354,
	937, 936, 355, 356, 357, 358, 360, 361, 359, 878,
	362, 363, 365, 364, 0, 0, 879, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 880, 374, 881, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 882, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 883, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 958, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	962, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 868, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 869, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 870, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 872,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 871, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 873, 874, 339, 340, 341, 875,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 876, 349, 350, 877, 0, 351, 352, 0,
	0, 353, 0, 354, 937, 936, 355, 356, 357, 358,
	360, 361, 359, 878, 362, 363, 365, 364, 0, 0,
	879, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 880, 374,
	881, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 882, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 883, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	601, 0, 207, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 213, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 212, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	206, 0, 207, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 480, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 213, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 212, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 207, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 480, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 213, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 1712, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 212, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	207, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 480,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 213,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 212, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 497, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 480, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 275, 219, 220, 221, 0, 276,
	222, 0, 0, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 0, 286, 0, 287, 288, 0,
	0, 289, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 500, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 497, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 480, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 1995, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 1992, 286,
	0, 287, 288, 0, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	2072, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 1998, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 2070, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 2069,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 1997, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 2071, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 497, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 1995, 276, 222, 0,
	0, 1989, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 1992, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	1998, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 1988, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 1997, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 1996, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	608, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 607, 585, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 588, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 589, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 590, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	584, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 585, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 588, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 589, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 590, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 497, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 588, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 589, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 590, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1123, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 927, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 946, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	948, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 927, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 943, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	945, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 927, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 939, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	941, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 927, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 520, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 519, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 518,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	497, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 1970, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 497, 2468, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 275, 219, 220, 221, 0, 276,
	222, 0, 0, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 0, 286, 0, 287, 288, 0,
	0, 289, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 500, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 497, 2468,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 2465,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 497, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 927, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	1732, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	1730, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 0, 0, 472, 256,
	1728, 0, 497, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 497, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 1705, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1663, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1661, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 634, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 1206,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 635, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 631, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 630,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1556, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1555, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 634, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 1206,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 635, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 631, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 630,
	250, 251, 456, 0, 0, 457, 1207, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 634, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 624, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 635, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 631, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 1174,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 630,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1141, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1140, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1137, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1136, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1134, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1133, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1131, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1130, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 1127, 0, 497, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1126, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	497, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	1115, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 1113, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 1112, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 1107, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 1098, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 1097, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 1093, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 1089, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 1091, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 966, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 968, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 963, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 634, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 624, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 623, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	635, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 625, 411, 0, 415, 416,
	631, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 626, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 630, 250, 251, 456, 0, 0, 457,
	628, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 614, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 615, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 610, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 599, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 0, 0, 472, 256, 542, 0,
	497, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 497, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 275, 219, 220, 221, 0, 276,
	222, 0, 0, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 0, 286, 0, 287, 288, 0,
	0, 289, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 500, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 497, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 2367, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 497, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 2365, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 497, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	2354, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 389, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	497, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 219, 220, 221, 0, 276, 222, 0, 0, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 285, 282,
	0, 286, 0, 287, 288, 0, 0, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 500,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	243, 384, 244, 385, 0, 386, 387, 388, 389, 390,
	391, 245, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 246, 411, 0, 615, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 247, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 248, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 308, 453, 309,
	454, 455, 0, 249, 250, 251, 456, 0, 0, 457,
	458, 252, 253, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 254, 255, 497, 0, 472, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 1569, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 275, 219, 220, 221, 0, 276,
	222, 0, 0, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 285, 282, 0, 286, 0, 287, 288, 0,
	0, 289, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 500, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 243, 384, 244, 385, 0, 386,
	387, 388, 389, 390, 391, 245, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 246,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	0, 412, 413, 432, 0, 433, 247, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 248, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 308, 453, 309, 454, 455, 0, 249, 250, 251,
	456, 0, 0, 457, 458, 252, 253, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 254, 255, 497, 0,
	472, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 219,
	220, 221, 0, 276, 222, 0, 0, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 285, 282, 0, 286,
	0, 287, 288, 0, 0, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 500, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 1560, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 243, 384,
	244, 385, 0, 386, 387, 388, 389, 390, 391, 245,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 246, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	247, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 248, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 308, 453, 309, 454, 455,
	0, 249, 250, 251, 456, 0, 0, 457, 458, 252,
	253, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	254, 255, 497, 0, 472, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 219, 220, 221, 0, 276, 222, 0,
	0, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	285, 282, 0, 286, 0, 287, 288, 0, 0, 289,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 500, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 243, 384, 244, 385, 0, 386, 387, 388,
	389, 390, 391, 245, 901, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 246, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 247, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 248,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 308,
	453, 309, 454, 455, 0, 249, 250, 251, 456, 0,
	0, 457, 458, 252, 253, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 254, 255, 497, 0, 472, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 219, 220, 221,
	0, 276, 222, 0, 0, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 285, 282, 0, 286, 0, 287,
	288, 0, 0, 289, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 500, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 0,
	379, 380, 381, 382, 0, 383, 243, 384, 244, 385,
	0, 386, 387, 388, 0, 390, 391, 245, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 246, 0, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 247, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 248, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 308, 453, 309, 454, 455, 0, 249,
	250, 251, 456, 0, 0, 457, 458, 252, 253, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 254, 255,
	0, 0, 472, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 1306, 1307, 0, 1339, 1340, 1341,
	1349, 1350, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 0, 0, 0, 0, 0, 0, 1309,
	0, 0, 1355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1308, 0, 0, 0, 0,
	0, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 1306, 1307, 0, 1339,
	1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	0, 1309, 0, 0, 1355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 1332, 1333, 1334, 0, 1308, 0, 0,
	0, 0, 1314, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 1356, 0, 0, 1336,
	1337, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1352, 1353, 0, 0, 0, 0, 0, 0, 1323, 1324,
	0, 0, 0, 0, 1331, 1332, 1333, 1334, 0, 0,
	0, 1344, 0, 0, 1314, 0, 0, 0, 1329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1346, 1356, 0,
	0, 1336, 1337, 1338, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1352, 1353, 0, 0, 0, 0, 0, 0,
	1323, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 1335, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 1354, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 0, 1306,
	1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 0,
	1347, 0, 0, 0, 1309, 0, 1345, 1355, 0, 1320,
	1321, 1327, 1326, 1322, 1348, 0, 1319, 1317, 1318, 1310,
	1311, 1312, 1313, 1315, 1316, 0, 0, 0, 0, 0,
	1308, 0, 0, 2248, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 1309, 0, 1345, 1355,
	0, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317,
	1318, 1310, 1311, 1312, 1313, 1315, 1316, 1331, 1332, 1333,
	1334, 0, 1308, 0, 0, 2247, 0, 1314, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 1353, 0, 0, 0,
	0, 0, 0, 1323, 1324, 0, 0, 0, 0, 1331,
	1332, 1333, 1334, 0, 0, 0, 1344, 0, 0, 1314,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1346, 1356, 0, 0, 1336, 1337, 1338, 0,
	0, 0, 0, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1353, 0,
	0, 0, 0, 0, 0, 1323, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 1335, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 1354, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 1306, 1307, 0, 1339, 1340, 1341,
	1349, 1350, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 0, 0, 1347, 0, 0, 0, 1309,
	0, 1345, 1355, 0, 1320, 1321, 1327, 1326, 1322, 1348,
	0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316,
	0, 0, 0, 0, 0, 1308, 0, 0, 2244, 0,
	0, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 1306, 1307, 0, 1339,
	1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	0, 1309, 0, 1345, 1355, 0, 1320, 1321, 1327, 1326,
	1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313,
	1315, 1316, 1331, 1332, 1333, 1334, 0, 1308, 0, 0,
	2243, 0, 1314, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 1356, 0, 0, 1336,
	1337, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1352, 1353, 0, 0, 0, 0, 0, 0, 1323, 1324,
	0, 0, 0, 0, 1331, 1332, 1333, 1334, 0, 0,
	0, 1344, 0, 0, 1314, 0, 0, 0, 1329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1346, 1356, 0,
	0, 1336, 1337, 1338, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1352, 1353, 0, 0, 0, 0, 0, 0,
	1323, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 1335, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 1354, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 0, 1306,
	1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 0,
	1347, 0, 0, 0, 1309, 0, 1345, 1355, 0, 1320,
	1321, 1327, 1326, 1322, 1348, 0, 1319, 1317, 1318, 1310,
	1311, 1312, 1313, 1315, 1316, 0, 0, 0, 0, 0,
	1308, 0, 0, 2242, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 1309, 0, 1345, 1355,
	0, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317,
	1318, 1310, 1311, 1312, 1313, 1315, 1316, 1331, 1332, 1333,
	1334, 3044, 1308, 0, 0, 0, 0, 1314, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 1353, 0, 0, 0,
	0, 0, 0, 1323, 1324, 0, 0, 0, 0, 1331,
	1332, 1333, 1334, 0, 0, 0, 1344, 0, 0, 1314,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1346, 1356, 0, 0, 1336, 1337, 1338, 0,
	0, 0, 0, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1353, 0,
	0, 0, 0, 0, 0, 1323, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 1335, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 1354, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 1306, 1307, 0, 1339, 1340, 1341,
	1349, 1350, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 0, 0, 1347, 0, 0, 0, 1309,
	0, 1345, 1355, 0, 1320, 1321, 1327, 1326, 1322, 1348,
	0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316,
	0, 0, 0, 0, 3040, 1308, 0, 0, 0, 0,
	0, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 1306, 1307, 0, 1339,
	1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	0, 1309, 0, 1345, 1355, 0, 1320, 1321, 1327, 1326,
	1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313,
	1315, 1316, 1331, 1332, 1333, 1334, 2981, 1308, 0, 0,
	0, 0, 1314, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 1356, 0, 0, 1336,
	1337, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1352, 1353, 0, 0, 0, 0, 0, 0, 1323, 1324,
	0, 0, 0, 0, 1331, 1332, 1333, 1334, 0, 0,
	0, 1344, 0, 0, 1314, 0, 0, 0, 1329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1346, 1356, 0,
	0, 1336, 1337, 1338, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1352, 1353, 0, 0, 0, 0, 0, 0,
	1323, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 1335, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 1354, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 0, 1306,
	1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 0,
	1347, 0, 0, 0, 1309, 0, 1345, 1355, 0, 1320,
	1321, 1327, 1326, 1322, 1348, 0, 1319, 1317, 1318, 1310,
	1311, 1312, 1313, 1315, 1316, 0, 0, 0, 0, 2980,
	1308, 0, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 1309, 0, 1345, 1355,
	0, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317,
	1318, 1310, 1311, 1312, 1313, 1315, 1316, 1331, 1332, 1333,
	1334, 2930, 1308, 0, 0, 0, 0, 1314, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 1353, 0, 0, 0,
	0, 0, 0, 1323, 1324, 0, 0, 0, 0, 1331,
	1332, 1333, 1334, 0, 0, 0, 1344, 0, 0, 1314,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1346, 1356, 0, 0, 1336, 1337, 1338, 0,
	0, 0, 0, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1353, 0,
	0, 0, 0, 0, 0, 1323, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 1335, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 1354, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 1306, 1307, 0, 1339, 1340, 1341,
	1349, 1350, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 0, 0, 1347, 0, 0, 0, 1309,
	0, 1345, 1355, 0, 1320, 1321, 1327, 1326, 1322, 1348,
	0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316,
	0, 0, 0, 0, 2891, 1308, 0, 0, 0, 0,
	0, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 1306, 1307, 0, 1339,
	1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	0, 1309, 0, 1345, 1355, 0, 1320, 1321, 1327, 1326,
	1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313,
	1315, 1316, 1331, 1332, 1333, 1334, 2803, 1308, 0, 0,
	0, 0, 1314, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 1356, 0, 0, 1336,
	1337, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1352, 1353, 0, 0, 0, 0, 0, 0, 1323, 1324,
	0, 0, 0, 0, 1331, 1332, 1333, 1334, 0, 0,
	0, 1344, 0, 0, 1314, 0, 0, 0, 1329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1346, 1356, 0,
	0, 1336, 1337, 1338, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1352, 1353, 0, 0, 0, 0, 0, 0,
	1323, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 1335, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 1354, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 0, 1306,
	1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 0,
	1347, 0, 0, 0, 1309, 0, 1345, 1355, 0, 1320,
	1321, 1327, 1326, 1322, 1348, 0, 1319, 1317, 1318, 1310,
	1311, 1312, 1313, 1315, 1316, 0, 0, 0, 0, 2760,
	1308, 0, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 1309, 0, 1345, 1355,
	0, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317,
	1318, 1310, 1311, 1312, 1313, 1315, 1316, 1331, 1332, 1333,
	1334, 2759, 1308, 0, 0, 0, 0, 1314, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 1353, 0, 0, 0,
	0, 0, 0, 1323, 1324, 0, 0, 0, 0, 1331,
	1332, 1333, 1334, 0, 0, 0, 1344, 0, 0, 1314,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1346, 1356, 0, 0, 1336, 1337, 1338, 0,
	0, 0, 0, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1353, 0,
	0, 0, 0, 0, 0, 1323, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 1335, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 1354, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 1306, 1307, 0, 1339, 1340, 1341,
	1349, 1350, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 0, 0, 1347, 0, 0, 0, 1309,
	0, 1345, 1355, 0, 1320, 1321, 1327, 1326, 1322, 1348,
	0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316,
	0, 0, 0, 0, 2758, 1308, 0, 0, 0, 0,
	0, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 1306, 1307, 0, 1339,
	1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	0, 1309, 0, 1345, 1355, 0, 1320, 1321, 1327, 1326,
	1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313,
	1315, 1316, 1331, 1332, 1333, 1334, 2730, 1308, 0, 0,
	0, 0, 1314, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 1356, 0, 0, 1336,
	1337, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1352, 1353, 0, 0, 0, 0, 0, 0, 1323, 1324,
	0, 0, 0, 0, 1331, 1332, 1333, 1334, 0, 0,
	0, 1344, 0, 0, 1314, 0, 0, 0, 1329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1346, 1356, 0,
	0, 1336, 1337, 1338, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1352, 1353, 0, 0, 0, 0, 0, 0,
	1323, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 1335, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 1354, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 0, 1306,
	1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 0,
	1347, 0, 0, 0, 1309, 0, 1345, 1355, 0, 1320,
	1321, 1327, 1326, 1322, 1348, 0, 1319, 1317, 1318, 1310,
	1311, 1312, 1313, 1315, 1316, 0, 0, 0, 0, 2550,
	1308, 0, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 1309, 0, 1345, 1355,
	0, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317,
	1318, 1310, 1311, 1312, 1313, 1315, 1316, 1331, 1332, 1333,
	1334, 2523, 1308, 0, 0, 0, 0, 1314, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 1353, 0, 0, 0,
	0, 0, 0, 1323, 1324, 0, 0, 0, 0, 1331,
	1332, 1333, 1334, 0, 0, 0, 1344, 0, 0, 1314,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1346, 1356, 0, 0, 1336, 1337, 1338, 0,
	0, 0, 0, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1353, 0,
	0, 0, 0, 0, 0, 1323, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 1335, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 1354, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 0, 0, 0, 0,
	0, 1345, 0, 0, 1320, 1321, 1327, 1326, 1322, 1348,
	0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316,
	0, 0, 0, 0, 1842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 1309, 0, 0, 1355,
	0, 0, 0, 1345, 0, 0, 1320, 1321, 1327, 1326,
	1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313,
	1315, 1316, 1308, 0, 2209, 0, 0, 0, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 1306, 1307, 0, 1339, 1340, 1341, 1349,
	1350, 1351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 0, 0, 0, 0, 0, 0, 1309, 0,
	0, 1355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1331,
	1332, 1333, 1334, 0, 1308, 0, 0, 0, 0, 1314,
	3121, 0, 1328, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 1356, 0, 0, 1336, 1337, 1338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1353, 0,
	0, 0, 0, 0, 0, 1323, 1324, 0, 0, 0,
	0, 1331, 1332, 1333, 1334, 0, 0, 0, 1344, 0,
	0, 1314, 0, 2292, 0, 1329, 2291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1346, 1356, 0, 0, 1336, 1337,
	1338, 0, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1352,
	1353, 0, 0, 0, 0, 0, 3120, 1323, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 1335, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 1354, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1343,
	0, 0, 0, 0, 0, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 0, 1306, 1307, 0, 1339,
	1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 0, 1347, 0, 2184,
	0, 1309, 0, 1345, 1355, 0, 1320, 1321, 1327, 1326,
	1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313,
	1315, 1316, 0, 0, 0, 0, 0, 1308, 0, 0,
	0, 0, 0, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 1325, 1945, 0, 0, 0, 0, 0, 1306,
	1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 2185,
	0, 1944, 0, 0, 1309, 1345, 0, 1355, 1320, 1321,
	1327, 1326, 1322, 1348, 0, 1319, 1317, 1318, 1310, 1311,
	1312, 1313, 1315, 1316, 1331, 1332, 1333, 1334, 0, 0,
	1308, 0, 0, 0, 1314, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 1356, 0,
	0, 1336, 1337, 1338, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1352, 1353, 0, 0, 0, 0, 0, 0,
	1323, 1324, 0, 0, 0, 0, 0, 1331, 1332, 1333,
	1334, 0, 0, 1344, 0, 0, 0, 1314, 0, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 0,
	1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 1353, 0, 0, 0,
	0, 0, 0, 1323, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	1335, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 0, 0,
	0, 1354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1343, 0, 0, 0, 0,
	1347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 1309, 0, 0, 1355,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 1347, 0, 0, 0, 0, 1345, 0,
	1328, 1320, 1321, 1327, 1326, 1322, 1348, 1325, 1319, 1317,
	1318, 1310, 1311, 1312, 1313, 1315, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 1331,
	1332, 1333, 1334, 0, 0, 1309, 0, 0, 1355, 1314,
	0, 1345, 0, 0, 1320, 1321, 1327, 1326, 1322, 1348,
	0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315, 1316,
	0, 1308, 1346, 1356, 0, 0, 1336, 1337, 1338, 1328,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1353, 0,
	0, 0, 0, 0, 0, 1323, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 1332,
	1333, 1334, 0, 1354, 0, 0, 0, 0, 1314, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 730, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1356, 0, 0, 1336, 1337, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 1352, 1353, 0, 0,
	0, 0, 0, 0, 1323, 1324, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 0, 0, 0, 0,
	0, 0, 1354, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 1309, 0, 0, 1355,
	0, 1330, 0, 1345, 0, 0, 1320, 1321, 1327, 1326,
	1322, 1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313,
	1315, 1316, 1308, 0, 1347, 0, 0, 0, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1331,
	1332, 1333, 1334, 0, 0, 0, 0, 0, 0, 1314,
	0, 0, 1345, 0, 2302, 1320, 1321, 1327, 1326, 1322,
	1348, 0, 1319, 1317, 1318, 1310, 1311, 1312, 1313, 1315,
	1316, 0, 1346, 1356, 0, 0, 1336, 1337, 1338, 0,
	0, 0, 0, 0, 0, 0, 1306, 1307, 0, 1339,
	1340, 1341, 1349, 1350, 1351, 0, 0, 1352, 1353, 0,
	0, 0, 0, 0, 1342, 1323, 1324, 0, 2297, 0,
	0, 1309, 0, 0, 1355, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1308, 0, 0,
	0, 0, 0, 1354, 0, 1328, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 1331, 1332, 1333, 1334, 0, 0,
	0, 0, 1330, 0, 1314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 0, 1346, 1356, 0,
	0, 1336, 1337, 1338, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1352, 1353, 0, 0, 0, 0, 0, 0,
	1323, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 0,
	0, 0, 0, 1345, 0, 0, 1320, 1321, 1327, 1326,
	1322, 1348, 1343, 1319, 1317, 1318, 1310, 1311, 1312, 1313,
	1315, 1316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1306, 1307, 0, 1339,
	1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	0, 1309, 0, 0, 1355, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1308, 0, 0,
	1347, 0, 0, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1331, 1332, 1333, 1334, 0, 0,
	0, 0, 0, 0, 1314, 0, 0, 0, 1345, 0,
	0, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317,
	1318, 1310, 1311, 1312, 1313, 1315, 1316, 1346, 1356, 0,
	0, 1336, 1337, 1338, 0, 0, 0, 0, 0, 0,
	0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351,
	0, 0, 1352, 1353, 0, 0, 0, 0, 0, 1342,
	1323, 1324, 0, 2241, 0, 0, 1309, 0, 0, 1355,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 0, 0, 0, 0, 0, 1354, 0,
	1328, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 1331,
	1332, 1333, 1334, 0, 0, 0, 0, 1330, 0, 1314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1347, 0, 1346, 1356, 0, 0, 1336, 1337, 1338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1353, 0,
	0, 0, 0, 0, 0, 1323, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 0, 0, 0, 0, 1345, 0,
	0, 1320, 1321, 1327, 1326, 1322, 1348, 1343, 1319, 1317,
	1318, 1310, 1311, 1312, 1313, 1315, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1306, 1307, 0, 1339, 1340, 1341, 1349, 1350, 1351,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 1309, 0, 0, 1355,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 0, 0, 1347, 0, 0, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 1306, 1307, 0, 1339,
	1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	0, 1309, 0, 0, 1355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1331,
	1332, 1333, 1334, 0, 0, 0, 0, 1308, 0, 1314,
	0, 0, 0, 1345, 0, 1328, 1320, 1321, 1327, 1326,
	1322, 1348, 1325, 1319, 1317, 1318, 1310, 1311, 1312, 1313,
	1315, 1316, 1346, 1356, 0, 0, 1336, 1337, 1338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1353, 0,
	0, 0, 0, 0, 0, 1323, 1324, 0, 0, 0,
	0, 0, 0, 0, 1331, 1332, 1333, 1334, 1344, 0,
	0, 0, 0, 0, 1314, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 0, 0, 0, 1346, 1356, 0,
	0, 1336, 1337, 1338, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1352, 1353, 0, 0, 0, 0, 0, 0,
	1323, 1324, 0, 1306, 1307, 0, 1339, 1340, 1341, 1349,
	1350, 1351, 0, 1344, 0, 1335, 0, 0, 0, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 1309, 0,
	0, 1355, 1330, 0, 0, 0, 0, 0, 1354, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1308, 1347, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 1306, 1307, 0, 1339,
	1340, 1341, 1349, 1350, 1351, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1309, 0, 0, 1355, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 1332, 1333, 1334, 0, 0, 1308, 0, 0,
	1347, 1314, 0, 1345, 0, 1328, 1320, 1321, 1327, 1326,
	1322, 1348, 1325, 1319, 1317, 1318, 1310, 1311, 1312, 1313,
	1315, 1316, 0, 0, 1346, 1356, 0, 0, 1336, 1337,
	1338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 1324, 0,
	0, 0, 0, 0, 1331, 1332, 1333, 1334, 0, 0,
	1344, 0, 0, 0, 1314, 0, 0, 1329, 1345, 0,
	0, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317,
	1318, 1310, 1311, 1312, 1313, 1315, 1316, 1346, 1356, 0,
	0, 1336, 1337, 1338, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1352, 1353, 0, 0, 0, 0, 0, 0,
	1323, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 1335, 0, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 0, 0, 0, 1354, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 1634, 1619,
	1624, 1607, 1644, 1643, 0, 0, 1609, 1608, 0, 0,
	0, 0, 0, 0, 1653, 1652, 0, 0, 0, 0,
	1347, 0, 0, 0, 0, 1345, 0, 0, 1320, 1321,
	1327, 1326, 1322, 1348, 0, 1319, 1317, 1318, 1310, 1311,
	1312, 1313, 1315, 1316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1645, 0, 1641, 1640, 0, 0,
	0, 0, 0, 0, 0, 0, 1639, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1638, 1636, 1637, 0, 1345, 0,
	0, 1320, 1321, 1327, 1326, 1322, 1348, 0, 1319, 1317,
	1318, 1310, 1311, 1312, 1313, 1315, 1316, 0, 1623, 0,
	0, 0, 0, 1618, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1627, 1622, 1628, 1629, 1630, 1631,
	1632, 0, 1626, 0, 0, 0, 0, 0, 0, 0,
	0, 1650, 1651, 1634, 1619, 1624, 1607, 1644, 1643, 0,
	0, 1609, 1608, 0, 0, 0, 0, 0, 0, 1653,
	1652, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1611, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1642, 0, 0, 0, 1620,
	1621, 0, 0, 0, 0, 0, 0, 0, 0, 1645,
	0, 1641, 1640, 0, 0, 0, 0, 0, 0, 0,
	0, 1639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1635, 0, 0, 0, 1763, 1761,
	1762, 1765, 1764, 0, 0, 0, 0, 0, 0, 1638,
	1636, 1637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1612, 1613, 1614, 1615, 0, 0, 0, 1618, 0,
	0, 0, 0, 0, 0, 1633, 1616, 0, 0, 1627,
	1622, 1628, 1629, 1630, 1631, 1632, 1655, 1626, 0, 661,
	0, 692, 0, 0, 0, 0, 1650, 1651, 0, 0,
	0, 0, 0, 1610, 0, 0, 1646, 1647, 1648, 1649,
	0, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 666, 0, 0, 0, 1611, 0, 0,
	0, 1617, 0, 0, 0, 0, 1654, 0, 0, 0,
	1642, 0, 0, 0, 1620, 1621, 667, 0, 0, 0,
	0, 669, 0, 0, 0, 697, 0, 0, 0, 0,
	0, 675, 676, 0, 0, 0, 687, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1635,
	693, 670, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 691, 681, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1612, 1613, 1614, 1615,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1633, 1616, 0, 0, 671, 0, 0, 0, 0, 0,
	665, 1655, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 672, 673, 0, 1610, 0,
	0, 1646, 1647, 1648, 1649, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 679, 0, 0,
	0, 0, 0, 0, 674, 0, 1617, 0, 0, 0,
	0, 1654, 0, 0, 0, 0, 0, 678, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 677, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 689, 0, 0, 0, 0, 0, 0,
	0, 0, 684, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 663, 682, 695, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	685, 0, 0, 683, 0, 0, 0, 698, 699, 0,
	0, 0, 0, 0, 696, 0, 0, 0, 0, 0,
	0, 686, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 688,
}
var sqlPact = [...]int{

	5395, -1000, -27, -1000, -1000, -1000, 204, -1000, -1000, -1000,
	-1000, 203, 202, 199, -1000, 197, 195, 191, 188, 183,
	179, 178, 176, 175, 169, 167, 163, -1000, -1000, 162,
	-1000, -1000, -1000, -1000, 159, 158, 157, -1000, 156, 1724,
	31158, 155, 153, 149, 2238, 49020, 1588, 148, 145, -1000,
	143, 1546, 36192, 1532, 2083, -1000, 137, 136, 1550, 48636,
	410, 2053, 33858, 1394, 2052, 48246, 30768, 2038, 33468, 47856,
	-1000, -1000, 1119, -1000, -1000, 47466, 130, 129, 128, 127,
	126, -1000, 119, 47076, 117, 116, 115, 103, 95, 93,
	90, 88, -1000, 87, 79, 77, 73, 72, 66, 64,
	60, 59, 57, 54, 53, 52, 51, 50, 48, -1000,
	59047, 47, 44, 43, -1000, 1406, 42, 41, 39, 36,
	35, -1000, -1000, 34, 32, 30, 29, 28, 27, -1000,
	97, 26, 25, 24, 23, 22, -1000, 1196, 559, 2550,
	13350, 1277, 1272, 1267, 1265, 1244, 788, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51708, 49020, 21, -47, 20,
	-1000, 2502, 800, 22922, 5395, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35802, 35412, 35022,
	29226, 46686, 46296, 10443, 10443, 939, -1000, -1000, -1000, -1000,
	-1000, -29, 32310, 49020, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 271,
	-1000, -1000, -1000, -1000, -1000, -1000, 19686, 546, 19259, 456,
	18832, 314, 404, -1000, -1000, -1000, 269, -1000, -1000, -1000,
	-1000, 1328, -1000, -1000, -1000, -1000, 45906, 45516, 2140, 45126,
	28826, 28426, 44736, 1899, 1896, 44346, -1000, -1000, 43956, -1000,
	-1000, 2331, 2049, 2022, 34632, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 43572, 43182, 42792, 42402, 42012, 28026,
	27626, 635, -1000, -1000, -1000, -1000, 24482, 632, -1000, -1000,
	-1000, -1000, -1000, 16, -1000, 14, 13, -1000, 12, 11,
	6, 0, -1, -2, -3, -12, -1000, -13, -14, -1000,
	-16, -17, -1000, -18, -23, 1609, 1539, 1474, 41622, 1095,
	2092, -1000, 1585, -40, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 631, 49020, -1000, -1000, 20099, 99, -1000, 623, -1000,
	2067, -1000, 20099, 99, -1000, 1583, 231, 1520, -1000, -1000,
	-1000, 1359, 1079, -1000, -1000, 49020, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2702, 1444, 622, 41232, -1000, 1928, -1000,
	750, 14176, -1000, 1013, -1000, 14176, 268, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1429, 1231, 2635, 27226, 1628, 2506, 2330,
	2701, 1803, 2320, 2245, 2234, 2217, 2187, 2700, 1237, 2699,
	1030, 855, 2697, 2181, 2172, 2682, 1503, 864, 2695, 2694,
	2164, 2065, -1000, -1000, -1000, -1000, 1097, -1000, -1000, -1000,
	-1000, -1000, -1000, 37728, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1196, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1739, 2457, 2457, 2457,
	2546, 385, 374, -1000, 97, -1000, 1471, -1000, 1434, -1000,
	-1000, -1000, 58111, -1000, -1000, 20099, 20099, 20099, 20099, 20099,
	1428, -1000, -1000, -1000, 650, -1000, 619, 532, 11683, -1000,
	-1000, 2631, -1000, -1000, -1000, 384, 20099, -1000, 267, -1000,
	-1000, -1000, -1000, 618, 2675, -1000, 802, -1000, -1000, -1000,
	759, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2137, 617,
	614, -1000, 613, 611, 609, -1000, -1000, -1000, 608, 605,
	604, 603, 602, 601, 600, 596, -1000, -1000, -1000, 1396,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 789, -1000, 789, 789, 535, 535, 595, 594, 536,
	576, -1000, -1000, 575, 535, 574, 563, -1000, -1000, 562,
	705, -1000, 701, 561, 560, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1501, -1000, -1000, 1501, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 938, 50556, -1000, -1000, -1000,
	-31, 49020, -1000, 404, -31, -1000, -1000, 555, -1000, 14589,
	14589, 14589, -1000, -1000, 1582, 20099, -1000, 1885, -1000, 3936,
	-172, 694, 24092, -1000, 22532, 694, 658, 26826, -1000, 2057,
	-1000, -1000, 550, 262, -1000, -1000, -1000, -1000, -1000, -1000,
	1642, 2344, 1085, -1000, 1274, 2343, -1000, 3123, 2339, 1268,
	-1000, -1000, 773, 2335, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1457, -1000, -1000, 1862, 2329, -138,
	2188, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1602, -1000,
	29610, 32310, -33, -1000, -1000, -57, -1000, 10045, 58111, -1000,
	-1000, -1000, 58111, 700, -1000, -1000, 2325, -1000, 58111, 699,
	-1000, -1000, 2314, -1000, 2051, 49020, 10443, 49020, 49020, -1000,
	548, 1663, 1581, -1000, -1000, 31926, 3123, 1656, -1000, -1000,
	770, 1643, -1000, -1000, 1641, -1000, 404, -1000, -1000, 40842,
	51324, 770, 1639, -1000, -1000, -1000, 37728, -1000, 49020, -1000,
	49020, -1000, 1144, -1000, 50940, 140, 2301, -1000, -1000, 140,
	2295, -1000, 140, 2294, -1000, 139, 2285, -1000, -1000, 1492,
	2281, -1000, -70, 2276, -1000, -1000, -70, 2266, -1000, -1000,
	20099, -56, -1000, -1000, -1000, 800, 30378, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 40452, 29610, -1000, -1000, -1000, -1000,
	31926, 49020, 34242, 29610, 549, 58111, -1000, 2591, 58864, 29610,
	58111, -1000, 31926, 49020, 2134, -1000, 40062, 39672, 2470, 749,
	-1000, -1000, 49020, -1000, 20099, -1000, 2590, 1718, -48, -1000,
	-1000, -1000, -1000, -1000, 1715, 1760, 887, 1212, -1000, 14176,
	14176, 2400, -1000, 229, 10443, -1000, -1000, 1052, 1775, -1000,
	-1000, -1000, -1000, 29610, 29610, -1000, 39282, -1000, -1000, -1000,
	1424, 49020, -1000, -1000, 2133, -1000, 31542, 49020, -1000, 49020,
	-1000, 49020, -1000, 49020, -1000, 49020, -1000, -1000, -1000, -1000,
	-1000, 2312, 1263, 2130, -1000, 49020, -1000, 49020, -1000, -1000,
	-1000, 1709, -1000, -1000, -1000, 38898, 38508, 38118, -1000, -1000,
	1204, -1000, 1049, -1000, -1000, 144, -1000, -1000, 1739, -1000,
	1562, 1823, 18405, 1768, 20099, 97, -1000, -1000, 97, 97,
	12923, -1000, -1000, -1000, 49020, -1000, 58709, 58864, 10443, 951,
	20099, 20099, 20099, 20099, 20099, 20099, 20099, 20099, 20099, 20099,
	20099, 20099, 20099, 20099, 20099, 20099, 20099, 20099, 20099, 20099,
	20099, 20099, 20099, 20099, 20099, 20099, 20099, 20099, 20099, 20099,
	20099, 20099, 20099, 20099, 20099, 1619, 20099, 934, 20099, 20099,
	20099, 20099, 1648, -1000, -1000, 1380, 461, 1559, -1000, 2622,
	2622, 2622, 58446, 58446, 493, 650, -1000, 20099, -1000, 99,
	20099, 374, 55769, 1717, -30, 11270, -1000, -1000, -1000, -1000,
	17978, 781, 58111, 9647, 10843, -1000, 2657, 1404, 2151, 1950,
	545, 682, 680, 659, 652, 651, 20099, 20099, 20099, 20099,
	20099, 20099, 20099, 20099, -1000, -1000, -1000, -1000, -1000, -1000,
	2631, -1000, 17565, 17138, -1000, 2655, 16711, 16284, -1000, 15857,
	21338, 15430, 950, 949, 947, 946, 20099, 12096, -1000, -48,
	-1000, 50556, -1000, 49020, -31, 2588, 20099, 210, -1000, 56639,
	-1000, 210, 210, 544, -58, 58111, 1814, 1806, 23312, 2012,
	1464, 1464, 1464, -1000, 540, 648, 694, 7240, 36576, 1493,
	694, 694, 98, 260, 373, 22142, 1885, 36576, -1000, -1000,
	49020, 539, 10843, 10443, -41, 1177, -1000, 33078, 2520, 2508,
	2412, 1142, -1000, 1091, 2545, 37728, 2561, 99, 2448, 2045,
	-1000, -1000, 932, 37728, 3123, -1000, 58864, -1000, 1822, 2540,
	1099, 1076, 1099, 1099, 1102, 37728, 931, 1440, 29610, 2447,
	930, -42, 2560, 99, 2444, 2043, 928, -1000, -1000, 49020,
	10443, 2439, 1045, 691, -33, 32310, 49020, 224, -1000, 20099,
	99, 20099, 99, 1075, -59, 222, 1824, 1796, 98, -1000,
	32694, 2583, 2265, 49020, 1841, -1000, 3123, 2261, -1000, 1438,
	-1000, 2249, 2242, 2581, 1576, 1638, -1000, -1000, -1000, 1564,
	1637, 1019, 2228, 777, 547, 2579, 547, 26046, -1000, 49020,
	-1000, 49020, -1000, -1000, 49020, -1000, 49020, -1000, 49020, -1000,
	49020, 49020, -1000, 49020, 29610, 29610, 29610, -61, 3998, 30378,
	-64, 769, 927, -71, -1000, 372, 1677, 814, 32694, 5698,
	-69, -1000, 1039, -1000, -1000, -1000, 201, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 789, 537, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 536, 1396,
	535, 535, 535, -1000, -1000, -1000, 705, -1000, 701, -1000,
	-1000, -1000, 789, 789, -1000, -1000, -208, 2035, -57, 34242,
	691, -1000, 691, -1000, 2126, -1000, 2472, 721, -77, 851,
	-48, -1000, 1501, -1000, 1652, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2671, -1000,
	2627, -1000, -1000, 2650, -35, -1000, -35, -1000, 10443, -1000,
	49020, 2117, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	49020, -1000, 49020, -1000, -1000, -1000, -1000, -1000, -1000, 3153,
	-1000, 2089, -1000, 3998, 221, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 49020, 49020, 49020, -1000, 37728, -1000, -1000,
	-1000, -1000, 58111, -1000, 460, -1000, -1000, 58111, 1345, 1853,
	-1000, 1853, -36, -1000, 56566, 1767, 49020, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 739,
	1143, 1143, 1029, 1029, 1029, 1029, 2553, 577, 743, 3456,
	367, 367, 367, 367, 367, 367, 367, 367, 729, 842,
	842, 729, 729, 729, 729, 729, 842, 842, 842, 367,
	367, 367, 58446, 58186, 4633, 20099, 20099, 926, 1375, 461,
	4633, 20099, 4633, 4633, 4633, 4633, -1000, 1733, -1000, -1000,
	-1000, -1000, 2034, 534, 21338, 21338, -1000, -1000, -1000, 11683,
	20099, -1000, -1000, -1000, -1000, 532, 20099, -1000, 55841, -257,
	370, -146, 217, 49020, 20099, 646, -78, -1000, 1063, -1000,
	20099, 216, -1000, -1000, -22, 20099, 20099, 20099, 369, -1000,
	368, -1000, 924, -1000, 914, 912, 911, -1000, 531, 1430,
	529, 528, 20099, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 57851, 53214, 52921, 52849, 5875, 52556, 52484,
	-79, -82, 364, -1000, 2033, -146, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 363, -1000, 350, -85, -1000, -87, -1000,
	349, -1000, 57686, -146, 348, 4792, -1000, 21338, 21338, 21338,
	-1000, 346, -1000, 56273, -1000, 738, 737, 735, 734, 57426,
	15003, 15003, 15003, 345, 57261, 20099, -146, -1000, -1000, 527,
	-88, 777, 14589, 6687, 10443, -1000, 777, 777, 20099, -1000,
	20099, 23312, 23312, 1630, 1781, 23312, -1000, -1000, -1000, -1000,
	36576, 542, 694, 36576, -1000, 2631, 1819, -1000, -1000, -1000,
	49020, 404, -1000, 36576, 36576, 10443, 694, -1000, 341, 24872,
	-22, 215, 1646, 49020, 49020, 49020, -1000, -1000, 1634, 50172,
	1632, 58864, 49020, -1000, -1000, 523, 522, 1766, 1762, 49020,
	49020, 49788, 49404, 49020, 1410, 20099, 1578, 1625, 99, -1000,
	732, 516, 49020, 1234, -1000, -1000, -1000, -1000, -1000, 49020,
	-1000, -1000, 2649, -1000, 1099, -1000, -1000, -1000, 1099, 3123,
	1219, 49020, 29610, 772, 730, 49020, 1413, 99, -1000, 728,
	515, 10443, 1412, -1000, 726, 49020, 1930, -1000, 1596, -1000,
	-1000, 9249, 58111, -1000, 58111, -1000, -1000, -1000, 10443, 1815,
	1815, 336, -37, -1000, -1000, -1000, -1000, -1000, -1000, 1888,
	49020, 599, 49020, 99, 49020, 123, 769, 29610, 49020, 29610,
	29610, 29610, 99, 49020, 2227, 49020, 2219, 2356, 672, 49020,
	1505, 20099, 1423, -1000, 25262, 801, 49020, 1224, 122, -1000,
	-1000, -1000, -4, 49020, -1000, -1000, 140, 140, 140, -1000,
	139, 1492, -1000, -70, -70, -1000, -1000, -1000, 3998, 2017,
	37344, 49020, 2601, -1000, 514, 29610, -93, -1000, 817, 905,
	904, -1000, 58864, -1000, 636, 941, -1000, 2642, 513, 2631,
	-1000, 769, 49020, 74, -1000, 771, 1452, -1000, 14176, 14176,
	-1000, 1501, -1000, -1000, 1156, -1000, 1366, -1000, -1000, -1000,
	-1000, 14176, -1000, -1000, 1044, -57, -57, -1000, -1000, 541,
	-1000, 49020, -1000, -1000, -1000, -1000, 1345, -1000, 20099, -1000,
	-1000, -1000, 12923, -1000, -1000, -1000, 49020, -167, 20099, 4633,
	4633, 20099, 21338, 21338, -1000, 4633, -1000, -1000, -1000, -1000,
	-1000, 2015, 510, 20099, 58864, 5261, 4922, -94, 729, -1000,
	20099, -1000, 8851, -95, 55476, -1000, -1000, 1, 2352, -1000,
	20099, 57000, 8453, 334, 13763, -1000, 56901, -38, -38, -1000,
	2667, 1681, 1507, 1338, 1157, 2640, -1000, 26436, 778, 1505,
	55404, 58709, 58864, 20099, 20099, -1000, 20099, 20099, 20099, -1000,
	-1000, 2631, -1000, 20099, -1000, -1000, -1000, -1000, -1000, 2005,
	20099, -1000, 58709, 58864, 21338, 21338, 21338, 21338, 21338, 21338,
	21338, 21338, 21338, 21338, 21338, 21338, 21338, 21338, 21338, 21338,
	21338, 21338, 21338, 1782, 21338, 2620, 2620, 2620, -1000, 2085,
	2005, 20099, 20099, -1000, -1000, -1000, -1000, 58864, 332, 321,
	320, -1000, 20099, -146, 5698, -1000, 1945, -1000, -147, -1000,
	1885, -1000, -1000, 1945, 1945, -96, 58111, -1000, 1630, -1000,
	506, 20099, 23312, -1000, 644, -1000, -111, -1000, 36576, -1000,
	643, -248, -1000, 686, -1000, 404, -1000, -1000, -1000, 208,
	36576, -1000, -112, -1000, 2576, 316, 10443, -1000, -1000, 910,
	909, -1000, 2216, -1000, 1631, -1000, 805, -1000, 1369, 20099,
	23702, 505, 502, 1331, -1000, 2210, 1492, 2205, 1492, -1000,
	-1000, 702, -1000, 58111, 501, 499, -1000, -41, 1175, -1000,
	25662, 20099, -1000, 902, -1000, -1000, -1000, 3123, 894, -1000,
	-1000, 1416, 25662, -1000, -1000, -1000, 25662, 20099, -1000, -42,
	882, 25662, 2180, 769, 2003, 1062, -1000, -1000, -1000, -1000,
	-1000, -1000, 1889, 32694, 49020, 498, 49020, 497, -1000, -1000,
	496, 49020, -1000, -1000, 3123, -1000, 770, -1000, -1000, 810,
	10443, 495, 10443, 1721, 672, 29994, -1000, 770, 1823, -1000,
	58111, -1000, 1224, 12509, 2428, -114, -1000, 206, -1000, -1000,
	-1000, 777, 26046, 23312, 20099, 2693, -117, -1000, -1000, -1000,
	-1000, -1000, -1000, 99, -43, 494, -1000, 685, 684, -57,
	1516, 29610, 2092, 2092, -1000, 2633, -1000, 642, 312, 2631,
	311, -1000, -57, 49020, -1000, 1514, 10443, 49020, 49020, 10443,
	49020, -1000, -1000, -48, -1000, -1000, -1000, -1000, 49020, -1000,
	-1000, -1000, 1524, 55111, -1000, 2443, 10443, 2558, 4633, 4569,
	3400, 20099, 58864, 58373, -119, 20099, 20099, -1000, 637, 58111,
	-1000, -1000, -1000, -1000, -1000, -1000, 58111, 20099, 124, -1000,
	2661, 20099, 309, 307, 306, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 304, -1000, -1000, 52092, -1000, 20099, 303,
	-1000, 301, 298, 6179, 5230, 55039, 54746, 54674, 296, 58111,
	2085, 58111, -1000, -1000, 695, 695, 1070, 1070, 1070, 1070,
	2620, 421, 634, 597, 407, 407, 407, 589, 454, 454,
	407, 407, 407, 1981, 1754, 483, 5852, -1000, -1000, 58111,
	58111, 289, -1000, -1000, -1000, -146, 288, 1937, 2530, -1000,
	23312, 1937, 1937, -1000, -1000, 49020, 58111, -1000, -172, -1000,
	2631, -1000, -1000, 1819, -1000, 7652, -1000, 10443, -1000, -1000,
	24872, -1000, 477, -1000, 75, 49020, 49020, 49020, 2195, -1000,
	3494, -1000, 54381, -120, -1000, 2487, 2487, 20099, 98, 23702,
	49020, -1000, 1320, 1791, 837, 49020, -1000, 49020, -1000, -1000,
	49020, 49020, 49020, 49020, 49020, -1000, 476, -122, 49020, 49020,
	29610, -1000, -1000, -125, 10443, -1000, 2438, -1000, 29610, 944,
	1413, 1921, -1000, 475, 23702, 469, 49020, 32694, 2573, -1000,
	-1000, -1000, 465, 1957, 1560, 23702, 1551, 1740, 672, 29994,
	-1000, 1019, 1224, -1000, -1000, -53, -1000, 482, 99, 49020,
	2689, 1505, -1000, -54, 58111, -1000, 678, -1000, 36960, 36960,
	29610, 29610, -1000, 287, 2390, 2388, 598, -1000, -1000, 286,
	-1000, -57, 1654, -1000, -1000, 1426, 1592, -1000, -1000, -1000,
	-1000, -1000, 2443, 20099, 20099, 58373, -127, -1000, 4633, 4633,
	-1000, 58111, 8055, -1000, 56901, -1000, -1000, -1000, -1000, 1435,
	-1000, 54309, -1000, -1000, -1000, 20099, 20099, -1000, -1000, -1000,
	-1000, -1000, -1000, 21338, 1969, 464, 58864, -1000, -1000, 775,
	20099, 20099, 1885, 775, 775, -130, 694, -1000, -1000, -1000,
	2631, 75, -1000, 2687, 10443, -1000, -1000, -1000, 49020, -1000,
	49020, -1000, 10443, 49020, 1975, 1618, -1000, -1000, 1745, 463,
	21338, 49020, 708, -1000, 1339, 23702, 2443, 10443, 2443, 54016,
	-135, -136, 1615, -1000, -1000, 1614, 20099, -1000, 58864, 1492,
	1492, -141, -148, -1000, 880, 875, 20099, 871, -1000, -1000,
	-1000, 870, -1000, 725, -70, 25662, -1000, -1000, 1427, 23702,
	-149, 23702, -150, 282, 99, 23702, -1000, 49020, -165, 49020,
	-1000, 672, 29994, -1000, 2356, -1000, 2363, 49020, 2411, -1000,
	-1000, -1000, 1823, 461, -1000, -170, -1000, -1000, -1000, 459,
	455, -1000, -1000, -106, -1000, 696, 692, -1000, -1000, -1000,
	10443, 1041, -1000, 4633, 4633, -1000, -1000, -1000, 278, 1505,
	2524, -1000, 53944, 53651, 259, 21338, 58864, -173, -1000, 49020,
	58111, -146, -1000, -1000, -1000, 36576, 543, -1000, -1000, 1425,
	-1000, -1000, -1000, 49020, 1624, -1000, -1000, 20099, 5852, 442,
	20099, -1000, 1889, 441, -1000, -1000, -1000, -1000, -1000, -1000,
	2487, -1000, 1279, -1000, -1000, 58111, 2454, -1000, -1000, 439,
	438, 49020, 49020, -38, 433, 430, 25662, -1000, 49020, -175,
	1339, -176, -1000, 1889, -1000, -178, 810, -1000, 425, 29994,
	-1000, 1721, 983, -181, 49020, 1224, -1000, -1000, 29610, 29610,
	1654, -1000, 49020, -1000, 49020, -1000, 49020, -1000, 1377, 20099,
	-1000, -1000, 259, -183, -1000, -107, -1000, 2567, -1000, -1000,
	-1000, -1000, 2183, 53579, 1690, 49020, 53286, 1413, 49020, 2443,
	49020, 808, 10443, 1426, 1426, -1000, -1000, 277, 20099, 20099,
	-1000, 423, -1000, 1889, 1339, 1413, 1339, 422, 23702, -1000,
	1740, 1134, -1000, 777, -1000, -1000, -184, -189, -1000, -190,
	-191, -1000, 261, 20925, 20925, -146, -1000, 49020, 420, 2166,
	-1000, 1526, 1422, 211, 838, -1000, -192, -1000, 404, -1000,
	20099, -1000, -197, -1000, 799, -198, -1000, 794, 2661, -199,
	-205, 49020, 1413, 1889, -1000, 1889, 23702, -206, -1000, 26046,
	-1000, 769, 769, -1000, -1000, -1000, -1000, -1000, 21736, 1527,
	1188, 56201, -1000, -1000, -1000, 49020, -1000, 1535, 1529, 1106,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1690, 58111, -1000,
	1426, 1912, -1000, 1426, 1962, -1000, -1000, -207, -1000, 1413,
	1413, -213, -1000, -200, -1000, -1000, 2565, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2376, -1000, 829, 1587, 1587, 1526,
	-1000, 393, -1000, 392, 1489, -1000, -1000, 1339, -1000, 20512,
	-1000, 2604, -1000, -1000, 1744, -1000, -1000, 20099, 20099, -1000,
	-1000, -1000, 1889, -1000, -1000, -1000, -1000, -214, -219, 1413,
	1413, 869, -1000, -1000, 388, 20099, -237, 1413, -1000,
}
var sqlPgo = [...]int{

	0, 3150, 3149, 2077, 3148, 2446, 3147, 3145, 3142, 3140,
	3139, 2442, 3138, 3137, 3133, 3132, 3129, 3128, 3126, 3125,
	3124, 3121, 3119, 3118, 3117, 3111, 3106, 3105, 3102, 3099,
	3096, 3095, 2423, 3094, 2412, 3093, 3092, 3091, 3084, 3081,
	3079, 3078, 3077, 23, 3075, 3074, 3072, 3067, 2405, 3061,
	3060, 2402, 3058, 3054, 2392, 3053, 3051, 3049, 2386, 2384,
	3048, 3047, 2382, 3045, 3044, 2378, 3042, 2374, 3040, 3037,
	2369, 3031, 94, 111, 3030, 2348, 3029, 3028, 2339, 2327,
	2318, 3024, 2302, 3022, 3019, 2300, 2295, 3017, 121, 3015,
	3013, 3012, 3011, 2243, 2220, 3007, 3004, 3002, 182, 2984,
	2198, 2983, 2982, 2981, 2979, 2978, 2976, 2974, 2972, 2971,
	2968, 2958, 2956, 2955, 2954, 2951, 2950, 2947, 2945, 2940,
	2938, 2937, 2934, 2933, 2931, 2929, 2927, 179, 107, 2925,
	2924, 2181, 2170, 2921, 2920, 52, 43, 15, 64, 143,
	123, 189, 4395, 170, 2917, 2913, 2912, 2911, 2910, 26,
	115, 119, 108, 112, 243, 2908, 2905, 49, 37, 30,
	22, 79, 2904, 2903, 2898, 2065, 80, 2897, 2891, 173,
	148, 2887, 482, 2885, 33, 101, 72, 81, 683, 44,
	2883, 98, 18, 2882, 120, 268, 2880, 73, 34, 24,
	3380, 88, 83, 85, 354, 349, 150, 149, 124, 445,
	2878, 161, 75, 145, 2876, 2874, 2872, 50, 138, 7,
	2, 132, 5, 2870, 14, 2868, 10, 2866, 2865, 2864,
	2862, 27, 105, 45, 38, 2861, 31, 357, 128, 2859,
	168, 2857, 71, 2856, 165, 144, 59, 156, 2855, 77,
	20, 86, 2854, 2852, 93, 159, 2851, 25, 109, 87,
	78, 185, 154, 92, 152, 151, 2845, 2844, 2834, 130,
	2830, 137, 133, 2829, 2827, 118, 28, 2825, 55, 160,
	39, 2824, 2821, 106, 2815, 141, 2811, 2810, 2809, 175,
	147, 125, 8, 47, 82, 9, 157, 100, 54, 65,
	2803, 1, 2162, 2545, 58, 2801, 99, 68, 32, 91,
	103, 162, 29, 2799, 2798, 1576, 2797, 2792, 2790, 110,
	2788, 2786, 2784, 96, 42, 51, 2783, 104, 40, 97,
	171, 61, 153, 127, 163, 129, 2782, 134, 95, 2781,
	139, 208, 74, 2780, 1800, 2779, 135, 2777, 2776, 2775,
	2773, 1456, 2771, 2770, 2767, 1447, 2766, 102, 2765, 136,
	131, 113, 56, 126, 164, 155, 1732, 2762, 140, 35,
	2760, 178, 17, 0, 3144, 3089, 2756, 146, 90, 2752,
	2751, 2750, 2749, 36, 12, 4, 6, 13, 11, 860,
	578, 2739, 2738, 174, 89, 116, 2734, 172, 158, 2733,
	2732, 2730, 48, 2729, 19, 2727, 16, 2726, 2724, 21,
	3, 2723, 2722, 194, 2721, 2720, 2719, 2528, 2716, 169,
	2715, 2714, 2713, 2708, 2109, 2707, 2705, 57, 62, 114,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 409, 409, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 151,
	151, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	408, 408, 153, 153, 152, 148, 148, 411, 411, 154,
	154, 154, 156, 156, 32, 32, 86, 86, 86, 139,
	138, 138, 138, 138, 79, 79, 79, 79, 79, 74,
	74, 361, 361, 362, 362, 134, 134, 135, 135, 135,
	135, 136, 136, 137, 137, 137, 46, 34, 34, 34,
	34, 34, 34, 34, 35, 35, 35, 35, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 37, 37,
	44, 44, 128, 128, 47, 47, 47, 47, 47, 47,
	47, 47, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 58, 58, 56, 329,
	329, 59, 59, 60, 60, 60, 60, 60, 60, 61,
	61, 61, 61, 61, 61, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 68, 68, 68, 69, 69,
	69, 66, 66, 66, 64, 64, 64, 63, 63, 63,
	67, 67, 67, 65, 65, 65, 235, 235, 70, 70,
	70, 70, 70, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 73,
	73, 73, 73, 73, 73, 73, 73, 331, 331, 71,
	71, 303, 303, 75, 75, 260, 260, 76, 76, 76,
	76, 76, 77, 77, 77, 77, 87, 87, 87, 87,
	407, 407, 228, 228, 169, 169, 169, 169, 82, 82,
	82, 82, 83, 83, 83, 84, 84, 133, 133, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 38,
	38, 38, 39, 39, 40, 40, 41, 41, 42, 42,
	43, 43, 43, 43, 43, 94, 94, 94, 96, 93,
	93, 93, 95, 95, 95, 95, 97, 97, 98, 98,
	98, 98, 98, 98, 99, 99, 355, 355, 238, 238,
	353, 353, 354, 354, 205, 205, 205, 205, 205, 206,
	206, 206, 360, 360, 360, 360, 360, 360, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 118,
	118, 118, 127, 127, 127, 127, 127, 127, 127, 120,
	120, 120, 111, 111, 101, 101, 101, 101, 107, 107,
	107, 107, 107, 102, 102, 108, 108, 110, 110, 112,
	112, 112, 112, 112, 112, 103, 103, 103, 103, 114,
	114, 114, 114, 113, 113, 123, 123, 123, 123, 123,
	123, 123, 316, 316, 119, 119, 119, 119, 122, 122,
	122, 122, 117, 117, 117, 121, 121, 124, 124, 124,
	124, 104, 104, 105, 105, 106, 106, 125, 125, 116,
	116, 126, 126, 126, 126, 126, 126, 126, 115, 115,
	115, 410, 410, 109, 405, 405, 403, 403, 403, 403,
	403, 403, 403, 404, 404, 406, 406, 80, 80, 80,
	52, 52, 53, 53, 207, 207, 208, 208, 284, 284,
	284, 284, 209, 209, 155, 155, 155, 212, 213, 213,
	210, 210, 211, 211, 211, 215, 215, 214, 217, 217,
	216, 283, 371, 371, 372, 372, 372, 372, 372, 372,
	372, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 369, 369, 369, 370, 367, 367, 368, 368, 368,
	368, 412, 412, 282, 282, 221, 221, 374, 374, 374,
	374, 375, 375, 375, 375, 375, 378, 377, 376, 376,
	376, 376, 376, 312, 312, 312, 57, 57, 57, 249,
	249, 248, 248, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 130, 130, 54, 54,
	54, 161, 161, 51, 51, 51, 55, 55, 50, 50,
	50, 50, 50, 266, 266, 264, 264, 226, 226, 318,
	318, 318, 173, 173, 174, 174, 149, 149, 149, 20,
	22, 22, 16, 16, 16, 16, 16, 16, 29, 29,
	30, 30, 26, 26, 265, 265, 267, 267, 81, 81,
	85, 85, 85, 91, 91, 129, 129, 129, 129, 129,
	129, 129, 33, 33, 33, 33, 45, 45, 45, 45,
	89, 415, 415, 415, 90, 90, 414, 414, 168, 168,
	168, 168, 170, 170, 279, 279, 280, 280, 416, 416,
	281, 281, 281, 163, 162, 164, 164, 49, 49, 49,
	157, 157, 158, 158, 159, 159, 160, 160, 417, 417,
	78, 78, 78, 132, 132, 201, 201, 275, 275, 275,
	222, 222, 179, 179, 278, 278, 276, 276, 276, 247,
	247, 247, 131, 131, 231, 231, 240, 240, 241, 241,
	326, 326, 242, 88, 88, 142, 142, 140, 140, 140,
	140, 140, 140, 141, 141, 141, 143, 143, 143, 143,
	143, 143, 143, 146, 146, 146, 146, 147, 147, 147,
	145, 145, 385, 385, 385, 387, 387, 388, 384, 384,
	386, 386, 413, 413, 251, 251, 251, 219, 220, 218,
	218, 418, 418, 224, 224, 223, 225, 225, 317, 317,
	317, 245, 245, 245, 245, 270, 270, 268, 268, 269,
	269, 271, 271, 272, 272, 272, 273, 273, 274, 274,
	244, 244, 299, 299, 144, 144, 144, 230, 230, 230,
	232, 232, 289, 289, 289, 290, 290, 288, 288, 288,
	288, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	320, 320, 233, 233, 321, 277, 277, 401, 401, 401,
	402, 402, 315, 315, 322, 322, 322, 322, 322, 322,
	313, 313, 314, 314, 327, 328, 328, 254, 254, 254,
	254, 252, 252, 253, 253, 323, 323, 323, 323, 246,
	246, 324, 324, 324, 285, 285, 332, 332, 332, 347,
	347, 229, 229, 229, 342, 342, 333, 333, 333, 333,
	333, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 336, 336, 336, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 346, 346, 346, 346, 346, 337,
	337, 343, 344, 338, 339, 345, 345, 345, 345, 349,
	349, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	341, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 262, 262, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 293, 293, 293,
	293, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 379, 379, 379, 379, 379, 379,
	379, 379, 382, 382, 383, 383, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 389, 389, 390, 390, 392,
	392, 393, 393, 394, 395, 395, 395, 396, 397, 397,
	391, 391, 398, 398, 398, 399, 399, 400, 400, 400,
	400, 400, 305, 305, 311, 311, 311, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 171, 171, 171, 171, 171, 237, 237,
	236, 236, 302, 302, 300, 300, 304, 304, 255, 255,
	348, 348, 348, 348, 348, 348, 348, 256, 256, 256,
	263, 257, 257, 258, 258, 258, 258, 258, 296, 297,
	259, 259, 259, 298, 298, 306, 310, 310, 309, 308,
	308, 307, 307, 286, 286, 287, 287, 243, 243, 419,
	419, 239, 239, 325, 325, 325, 325, 203, 203, 234,
	234, 202, 202, 196, 196, 197, 197, 197, 197, 227,
	227, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 350, 350, 350, 351, 352, 301, 189, 188,
	176, 177, 187, 186, 185, 175, 178, 182, 183, 184,
	180, 181, 192, 191, 190, 330, 198, 198, 199, 199,
	199, 200, 200, 200, 200, 172, 172, 193, 193, 194,
	195, 195, 165, 165, 165, 166, 166, 167, 167, 359,
	359, 357, 357, 357, 358, 358, 358, 358, 356, 356,
	356, 356, 356, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 7, 2, 5, 6, 2, 1,
	1, 1, 1, 1, 5, 8, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 1, 7, 3, 6, 2,
	0, 8, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 1, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	3, 5, 3, 3, 5, 3, 1, 3, 2, 2,
	5, 6, 3, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 3, 5,
	2, 3, 0, 3, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 3, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 6, 3, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 3, 1, 3,
	2, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 5,
	7, 3, 3, 3, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 5, 4, 6, 4, 5,
	6, 5, 1, 0, 2, 3, 3, 3, 6, 4,
	2, 3, 4, 2, 3, 3, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 2, 3, 2,
	3, 7, 7, 8, 10, 7, 4, 5, 5, 5,
	3, 1, 1, 5, 2, 0, 1, 1, 1, 1,
	3, 2, 2, 2, 1, 2, 0, 3, 3, 2,
	8, 11, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 4, 2, 5, 5, 5,
	2, 8, 9, 6, 5, 3, 1, 4, 7, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 7, 3, 1,
	0, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 4, 2, 4, 7,
	3, 3, 0, 3, 6, 3, 6, 3, 13, 16,
	9, 12, 4, 2, 0, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 4, 3, 0, 2,
	2, 0, 10, 3, 2, 0, 1, 3, 1, 1,
	3, 3, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 5, 1,
	0, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 3, 4, 1, 5, 3, 4, 5,
	1, 5, 1, 3, 2, 0, 3, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	3, 2, 1, 0, 5, 1, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 2, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 2, 4, 2, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 1, 1, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 5, 5, 3, 1, 1,
	2, 2, 1, 5, 3, 5, 6, 8, 6, 6,
	4, 3, 4, 1, 1, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 8, 8,
	6, 4, 6, 6, 6, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 427, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 77, 65, -54, -51, -48,
	-58, 79, 100, -386, 104, -62, -65, -67, 108, 116,
	121, 122, 146, 155, 259, 267, 289, 291, 293, 302,
	-40, -39, 117, -140, -142, 287, -83, -84, -93, -94,
	-95, -96, -133, 320, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	323, -33, -45, -90, -89, 368, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-385, -63, -64, -66, -68, -69, -143, -141, 424, 288,
	378, 37, 332, 66, 112, 297, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 395, 403, -146, -144, -145,
	-147, 309, 386, 345, 428, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 2, 345, 389, 310,
	379, 93, 168, 272, 257, -403, 2, 4, -365, -363,
	-197, -196, 345, 93, 30, 38, 39, 41, 44, 55,
	56, 57, 60, 97, 98, 115, 123, 124, 135, 148,
	150, 158, 159, 160, 175, 181, 183, 163, 203, 234,
	236, 249, 253, 264, 266, 275, 299, 326, 341, 357,
	358, 359, 365, 366, 386, 387, 391, 398, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 54, 59, 64, 65, 66,
	67, 68, 73, 70, 71, 72, 75, 77, 78, 81,
	82, 83, 91, 92, 94, 95, 96, 100, 102, 104,
	107, 108, 110, 111, 116, 117, 120, 118, 351, 353,
	119, 121, 122, 132, 133, 134, 136, 137, 139, 141,
	145, 147, 152, 153, 154, 155, 156, 157, 169, 164,
	170, 174, 177, 176, 178, 179, 180, 171, 185, 188,
	189, 190, 192, 193, 196, 197, 198, 201, 200, 205,
	206, 209, 210, 213, 215, 218, 219, 220, 221, 224,
	222, 223, 226, 227, 229, 228, 235, 237, 238, 240,
	241, 244, 245, 248, 251, 254, 255, 256, 257, 258,
	259, 260, 261, 263, 265, 267, 269, 270, 271, 272,
	273, 274, 276, 277, 279, 280, 281, 282, 283, 287,
	285, 286, 288, 289, 290, 291, 293, 295, 296, 297,
	298, 300, 321, 322, 334, 302, 303, 304, 305, 306,
	307, 308, 312, 316, 313, 314, 315, 310, 311, 317,
	318, 320, 323, 325, 327, 328, 331, 332, 333, 335,
	338, 339, 340, 336, 337, 330, 343, 344, 346, 347,
	348, 349, 350, 352, 354, 355, 360, 363, 364, 368,
	369, 371, 372, 375, 376, 377, 382, 378, 380, 383,
	384, 385, 390, 396, 397, 399, 400, 401, -195, -165,
	417, -194, 427, 427, 427, 2, 189, 190, 271, 270,
	317, 318, -190, -193, -194, -195, -165, 4, -363, -365,
	93, 242, 427, 427, 427, 2, 345, 333, 54, 310,
	379, 295, 389, -264, 185, 93, 374, -165, 267, 24,
	2, 102, 174, 377, 376, 24, 263, 311, 347, 349,
	2, 427, 427, 2, 389, 310, 345, 168, 93, 379,
	295, -184, 2, -165, -73, 2, 424, 27, -72, -5,
	-48, -58, -62, -75, -70, -11, -32, -34, -54, -51,
	-59, -65, -67, -79, -78, -80, -82, -86, -85, -88,
	-93, -94, -100, -131, -132, 79, 25, 108, 320, 117,
	184, 2, -407, -228, 2, 24, -169, -165, 79, 146,
	309, -139, 345, 2, 220, 189, 190, 2, -184, 2,
	-403, 2, 189, 190, 2, -407, -228, 23, 2, -165,
	2, 306, 323, -170, 2, 302, -165, 427, 427, 427,
	427, 427, 427, 210, 59, 299, 317, -98, 364, -97,
	357, 304, -99, -355, 2, 224, -165, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 2, -127, 317, 333, 153, 36, 59, 24, 64,
	94, 147, 168, 169, 197, 74, 75, 270, 210, 190,
	-316, 119, 318, 346, 305, 343, 364, 79, 380, 296,
	-410, 118, 4, 93, 224, 319, 357, 68, 350, 351,
	427, 427, 427, -413, 2, 345, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, -141, -143, -142,
	427, 427, 427, 427, 427, -223, -224, 373, 182, 114,
	247, -140, -142, 2, -385, -127, 317, 2, 59, 24,
	-353, 2, -291, 242, -293, 415, 416, 410, 230, 402,
	-305, 99, 217, 216, -295, -306, 115, 299, 424, -200,
	-294, 430, 9, -382, -142, 31, 52, -198, -165, 7,
	8, 5, 6, -172, -334, -301, -341, 367, 125, 233,
	-379, -380, -199, 4, -363, -357, -335, -344, -339, -340,
	-342, 42, 48, 47, 354, 223, 312, 313, 314, 315,
	327, 382, 164, 40, 240, 241, 176, 183, 62, 85,
	86, 84, 89, 88, 90, 87, 319, 379, 53, 30,
	158, 159, 163, 234, 160, 60, -381, 43, 95, 107,
	136, 137, 177, 178, 179, 180, 192, 193, 337, 360,
	39, 41, 44, 55, 56, 97, 98, 123, 124, 135,
	148, 175, 181, 203, 236, 253, 264, 275, 326, 341,
	357, 358, 359, 365, 366, 387, -364, -345, 80, 126,
	144, 173, 161, 186, 187, 191, 204, 207, 225, 232,
	250, 252, 294, 324, -414, 2, 364, 364, 2, -414,
	2, -414, 2, -168, 2, 364, 361, -415, 364, 398,
	-387, 276, -388, -184, -387, 427, 427, 429, 427, -218,
	-219, -220, 2, 24, 105, 424, 2, -319, 2, 422,
	-323, -142, 199, -322, 424, -320, -190, 243, -383, 300,
	-379, -380, -172, -165, -199, 4, 217, 216, -3, 2,
	-323, 158, -190, 2, -323, 158, 2, -191, 158, -323,
	-193, 2, -361, 158, -359, 9, -358, 5, 4, -363,
	-365, -364, 62, 2, -175, -165, 2, -202, 158, -190,
	-187, -356, 4, -363, -365, -364, -366, 24, 26, 27,
	28, 29, 31, 32, 33, 34, 45, 52, 53, 58,
	61, 63, 74, 79, 84, 85, 87, 86, 88, 89,
	90, 99, 101, 103, 105, 106, 109, 112, 114, 125,
	127, 140, 142, 143, 146, 149, 151, 162, 168, 172,
	182, 184, 199, 202, 208, 211, 212, 230, 231, 233,
	239, 242, 243, 246, 247, 262, 268, 278, 292, 309,
	319, 329, 342, 345, 356, 361, 362, 367, 373, 374,
	379, 381, 388, 389, 392, 393, 394, 395, -188, -356,
	361, 429, -234, -196, -197, -227, -165, 426, -291, 2,
	-88, 2, -291, 158, 2, -88, 158, 2, -291, 158,
	2, -88, 158, 2, -221, 424, 426, 345, 63, 2,
	-190, 158, -180, 2, -165, 140, -191, 158, 2, -193,
	-361, 158, 2, -361, 158, 2, -192, 2, -190, 168,
	168, -175, 158, 2, -165, 24, 143, 2, 184, 2,
	184, 2, -324, 2, -323, -235, 158, 2, -190, -235,
	158, 2, -235, 158, 2, -203, 158, 2, -202, -175,
	158, 2, -362, 158, 2, -361, -362, 158, 2, -260,
	424, -331, 2, -330, -358, 386, 424, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 317, -138, -139, 81, 221, 261,
	242, 361, 429, 424, -190, -291, -88, -303, 424, 143,
	-291, -88, 242, 143, 244, 2, 93, 345, 401, 24,
	-165, 2, 321, 2, 424, -98, 57, 364, -280, 2,
	-281, -162, -163, -164, 188, 269, 274, 401, -353, 361,
	407, 143, -353, -238, 426, -127, 2, 140, 381, 2,
	7, 2, -361, 273, 132, 2, 321, 2, 270, 318,
	59, 143, 2, 2, -405, 2, 242, 143, 2, 143,
	2, 143, 2, 143, 2, 143, 2, 2, 270, 318,
	2, 363, 198, 363, 2, 143, 2, 143, 2, 5,
	2, 188, 269, 334, 2, 345, 389, 310, 2, 2,
	143, 2, 143, 401, 2, -246, -323, -223, -224, -245,
	-268, -269, 208, 127, 239, -251, 24, 105, -251, -251,
	46, 425, 425, -127, 321, 2, 10, 11, 61, 35,
	415, 416, 417, 418, 138, 419, 420, 413, 414, 412,
	405, 406, 409, 194, 195, 76, 408, 407, 69, 214,
	301, 128, 129, 130, 131, 284, 165, 166, 167, 13,
	14, 15, 28, 246, 207, 402, 161, 324, 410, 16,
	17, 18, 186, 187, 232, 38, 162, -171, -204, -291,
	-291, -291, -291, -291, 252, -243, -286, 422, -142, 424,
	424, -142, -291, -305, -236, 424, -352, 7, -142, -300,
	422, -307, -291, 426, 424, 5, 424, 5, -389, 396,
	140, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 266, -349, 390, -349, -349, -336,
	424, -336, 424, 424, -337, 424, 424, 424, -336, 424,
	424, 424, 397, 403, 397, 403, 424, 424, -279, -280,
	-279, 361, -170, 429, -387, -221, 424, -239, -325, -291,
	417, -239, -239, 242, -236, -291, 80, -254, 191, 225,
	144, 204, 294, 173, -352, -73, -288, 430, -315, 403,
	-142, -320, -165, -142, -322, 424, -319, -315, 417, -190,
	424, 143, 424, 426, -151, 285, -150, 22, 25, 108,
	384, 120, -211, 170, 257, 115, 330, -409, 117, 303,
	352, 353, 285, 115, -248, -250, 32, 91, 227, 254,
	49, 156, 216, 217, 332, 115, 285, 395, 115, 117,
	285, -153, 330, -409, 117, 303, 285, -152, -211, 115,
	430, 117, 237, -361, -234, 429, 429, -356, 417, 115,
	115, 115, 115, 143, -227, -356, -190, -198, -165, -199,
	424, -221, 230, 242, -403, -249, -248, 230, -161, -384,
	395, 230, 230, -221, -177, 158, 2, -166, -165, -177,
	158, -384, 230, -324, -201, -190, -201, 320, -184, 32,
	-154, 429, 51, 290, 115, -154, 115, -154, 115, -154,
	429, 115, -154, 115, 429, 115, 115, -236, 425, 429,
	-331, -361, -403, -227, -169, -361, 143, 79, 424, 32,
	-302, -332, -333, -334, -343, -338, -341, 42, 48, 47,
	354, 223, 312, 313, 314, 315, 327, 382, 164, 40,
	240, 241, 176, 4, 41, -345, 183, 175, 177, 178,
	179, 180, 181, 326, 39, 275, 136, 137, 135, 107,
	98, 97, 236, 44, 43, 95, 357, 358, 359, 360,
	192, 193, 56, 55, 387, 337, -362, -403, -227, 140,
	-175, 2, -190, 2, 70, 71, 401, -355, -236, 32,
	-280, 2, -416, 429, 206, -206, 213, 229, 152, 243,
	399, -360, 5, 4, -301, -312, 99, 210, -341, 8,
	416, -350, 7, 415, -354, -353, -354, 83, 426, -356,
	345, 192, -361, -361, -355, 24, 322, 2, -190, -406,
	140, -404, 295, -403, -190, -190, -190, -190, -190, 140,
	2, 363, 2, 140, -165, -165, 206, -190, 2, -192,
	2, -191, 2, 345, 168, 345, -154, 429, -245, -269,
	-268, -271, -291, 24, -274, 134, 226, -291, -293, -141,
	-141, -141, -225, -317, -291, 268, 168, -355, -347, -332,
	-346, 280, 281, 279, 283, 282, -332, -189, -356, 357,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, 207, 161, 324, 38, 162,
	-291, 361, -291, -291, -291, -291, 222, 230, 233, 367,
	125, 375, 105, 237, -419, 342, 34, -298, -142, 424,
	-311, 29, 329, 24, -305, 299, 424, -286, -291, -287,
	-237, -236, 425, 32, 429, -237, -304, -300, -310, -309,
	392, -356, 417, 425, -236, 388, 24, 105, 417, 2,
	7, -261, 400, 219, 96, 154, 218, -262, 308, -390,
	133, 149, 424, 425, 2, 425, 2, 425, 2, 425,
	2, 425, 2, -291, -291, -291, -291, -291, -291, -291,
	-236, -352, -255, 2, -348, -236, 4, 400, 219, 96,
	154, 218, 308, -255, 2, 7, -236, 2, -236, 2,
	-256, 2, -291, -236, -257, -292, -293, 415, 416, 410,
	-305, -258, 2, -291, -237, 357, 357, 357, 357, -291,
	45, 202, 362, -259, -291, 143, -236, -170, -388, 32,
	-236, -230, 429, 143, 32, 4, -230, -230, 424, 425,
	429, 191, 191, -319, -254, 191, -252, 250, -252, -252,
	-401, 424, 423, -315, -176, 422, 431, -356, -314, -313,
	32, -184, 248, -315, -315, 426, 425, -314, -190, 424,
	-236, -356, 429, 361, -265, 74, 63, -283, 158, 63,
	-367, -178, 74, -368, -165, 58, 374, 268, 142, -265,
	74, -265, 74, 74, 320, 333, 46, -323, 35, -88,
	72, 143, 361, -323, -250, -332, 91, 216, 217, 46,
	-351, -350, 416, -351, 46, -351, -351, -351, 395, -191,
	-323, 361, 258, -361, 72, 361, 429, 35, -88, 72,
	143, 361, -202, -176, 72, 345, -328, -327, 404, -196,
	-165, 426, -291, -88, -291, -88, 335, 425, 426, 186,
	186, -207, -208, -165, -284, -283, -369, -370, -367, 185,
	168, 374, 126, 32, 115, -227, -329, 184, 115, 258,
	115, 115, 32, 242, 230, 242, 230, -157, 348, 115,
	-285, 393, -275, -88, 424, 99, 32, -275, -240, -241,
	-326, -242, -178, 424, -184, -190, -235, -235, -235, -202,
	-203, -175, -361, -362, -362, 425, -73, -330, 425, -137,
	395, 361, 395, 425, -139, 381, -208, -72, 25, 79,
	108, 425, 429, -229, 31, 422, -261, 424, -349, 424,
	-137, -327, 143, -228, -328, -328, 140, 71, 407, 361,
	425, 364, -281, -205, 274, 328, 286, 316, 8, 7,
	7, 429, -356, -190, 140, -227, -227, 317, -73, 140,
	-73, 426, -190, -202, -190, -323, -272, -350, 424, -273,
	299, 300, 429, -149, 33, 103, 196, -190, 401, -291,
	-291, 361, -419, 342, -298, -291, 222, 233, 367, 125,
	375, 105, 237, 143, 424, -292, -292, -236, -291, 423,
	433, 425, 426, -227, -291, 423, 423, 429, -308, -309,
	109, -291, 426, -418, 429, -223, -291, -236, -236, 425,
	425, 361, 361, 361, 361, 424, -395, 251, 424, 424,
	-291, 32, 429, 429, 429, 425, 429, 429, 429, 425,
	425, 429, 425, 143, 425, 425, 425, 425, 425, -263,
	262, 425, 10, 11, 415, 416, 417, 418, 138, 419,
	420, 413, 414, 412, 405, 406, 407, 69, 214, 301,
	13, 14, 15, 186, 162, -292, -292, -292, 425, -296,
	-297, 143, 140, 401, 401, 401, 401, 32, -259, -259,
	-259, 425, 143, -236, 424, 425, -285, -325, -232, 2,
	-319, -186, -356, -285, -285, -236, -291, -319, -319, -253,
	381, 242, 191, -319, -313, 425, -402, -352, -315, -314,
	-352, -290, -289, 141, 228, -184, -221, -314, -314, -356,
	-315, 425, -233, -321, -383, -418, 426, -150, -190, -178,
	-185, -165, 230, -283, 158, -156, 230, -332, -185, 424,
	424, 196, 196, -178, -185, 158, -178, 158, -185, -185,
	-408, 274, 238, -291, 209, 272, 231, -151, 285, -88,
	401, 424, -192, 285, -198, -351, -351, -248, 285, -191,
	-361, 395, 401, -175, -152, -88, 401, 424, -176, -153,
	285, 401, -190, -134, 157, 237, 417, -356, -128, 5,
	233, -128, 425, 429, 168, -177, 168, -183, -166, -88,
	-190, 143, -137, -361, -191, -361, -361, -361, -88, -190,
	115, -190, 115, -158, 111, -417, 407, -175, -224, -223,
	-291, -247, -278, 292, 242, -222, -179, -178, 386, -184,
	-247, -231, 429, 143, 407, 426, -222, -154, -154, -154,
	-154, -154, -73, 143, -136, 245, -135, -165, 5, -227,
	23, 424, -361, 425, -332, 422, 423, 7, 7, 424,
	-352, -137, -227, 143, -41, 395, 272, 93, 345, 257,
	168, -353, -353, -280, 372, 67, 274, -353, 345, 317,
	-73, -165, -273, -291, -317, -190, 430, -291, -291, -292,
	-292, 143, 424, -291, -302, 28, 28, 425, -287, -291,
	417, -356, 425, 425, -300, 112, -291, 356, -356, 417,
	425, 388, -418, -418, -418, 5, 219, 154, 218, -262,
	218, -262, -262, 7, -396, -181, 424, -165, 393, -223,
	425, -347, -332, -291, -291, -291, -291, -291, -352, -291,
	-296, -291, -347, -332, -292, -292, -292, -292, -292, -292,
	-292, -292, -292, -292, -292, -292, -292, -292, -292, -292,
	-292, -292, -292, 105, 230, 237, -292, -297, -296, -291,
	-291, -332, 425, 425, 425, -236, -72, -244, 149, -328,
	429, -244, -244, 425, -253, 424, -291, -319, 423, 425,
	429, -314, 423, 429, 432, 407, -221, 426, -313, 425,
	429, -277, 32, 425, -356, 361, 361, 115, 230, 383,
	-371, -368, -291, -226, -318, -178, -383, 424, -165, 424,
	424, -148, 108, 320, -267, 115, -154, 115, -154, 399,
	424, 424, 361, -265, 74, -294, -172, -236, 361, 361,
	258, -294, -294, -236, 361, -294, 117, -137, 143, 344,
	-209, 171, -284, -166, 424, -177, 424, 424, -221, -190,
	-249, -161, -266, 381, -176, 424, -176, -159, 201, -417,
	-359, -384, -270, -268, -247, -239, 231, 73, 425, 429,
	426, -285, -241, -232, -291, 2, 425, -88, 429, 424,
	407, 407, 244, -361, -138, -138, 7, 423, 425, -352,
	425, -227, 245, -187, -175, -190, -188, -202, -190, 243,
	425, -149, -176, 28, 28, -291, -302, 425, -291, -291,
	423, -291, 426, 5, -291, 425, 425, 425, 425, -397,
	-165, -291, 425, 425, 425, 429, 429, 425, 425, 425,
	425, 425, -297, 143, 105, 237, 424, 425, 425, -299,
	151, 46, -319, -299, -299, -227, -288, -352, -289, -176,
	422, -356, -321, 424, 426, -178, -185, -283, 115, -372,
	74, -373, 61, 126, 79, 230, 233, 374, 268, 58,
	99, 278, 32, 425, 425, 429, -174, 61, -174, -291,
	-226, -227, 230, 339, 99, 230, 99, 92, 369, -178,
	-185, -227, -227, -190, -178, -185, 424, 425, -192, -191,
	-361, 425, -176, 72, -362, 357, -210, -211, 162, 424,
	-226, 424, -227, -207, 32, 424, 145, 242, -226, 242,
	-160, 200, -417, -359, -157, -247, -276, 424, 242, -88,
	-179, 2, -224, 407, -135, -136, -361, -361, 425, 92,
	92, 423, 425, -42, -43, 168, 74, 260, -213, -212,
	257, 237, -149, -291, -291, 425, -356, 417, -418, -391,
	257, 425, -291, -291, -292, 143, 424, -302, -392, 394,
	-291, -236, -392, -392, 425, -315, -352, 2, -283, -185,
	-189, -182, -165, 126, 158, 233, 196, 424, -292, -190,
	424, 2, -282, -412, 78, 340, -318, -149, -189, -149,
	425, 425, 425, 233, 233, -291, -332, -154, -154, 425,
	425, 361, 361, -236, 361, 361, 401, -294, 255, -226,
	425, -226, 425, 425, -88, -226, -190, 425, -190, -417,
	-359, -158, 106, -227, 74, -270, -298, 425, 424, 424,
	429, 24, 424, 24, 424, -188, 345, 425, -224, 46,
	425, 425, -292, -302, 425, -393, -394, -181, -314, 423,
	-373, -182, 230, -291, -167, 424, -291, -209, 424, -174,
	278, -173, 61, 424, 424, -178, -185, -418, 424, 424,
	-294, -190, 425, -282, 425, -209, 425, -266, 424, -359,
	-159, 376, 231, 425, -185, -247, -362, -362, -43, -227,
	-227, -190, -398, 272, 300, -236, 425, 429, 32, 115,
	425, -374, 215, -165, 425, -210, -227, -149, -190, -411,
	381, -189, -215, -214, -212, -217, -216, -212, 425, -236,
	-236, 424, -209, -282, -210, -282, 424, -226, -160, 320,
	-285, 425, 425, 425, 425, 425, -399, -400, 38, 371,
	83, -291, -399, -394, -396, 126, -375, -378, -377, 242,
	144, 256, 325, 425, 339, 391, 425, -221, -291, 425,
	429, 386, 425, 429, 386, 425, 425, -227, -210, -209,
	-209, -226, 425, -240, -137, -137, -400, 265, 139, 299,
	265, 139, -182, -377, 242, -378, 242, 376, 102, -374,
	-214, 162, -216, 143, 425, -210, -210, 425, -285, 28,
	-376, 227, 290, 51, 320, -376, -375, 424, 424, -155,
	51, 290, -282, -400, 21, 233, 99, -236, -236, -209,
	425, 425, -210, -210, 361, 424, -236, 425, -210,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 187, 189, 191, 0, 0, 0, 214, 216, 218,
	219, -2, 0, 0, 0, 249, 250, 252, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	389, 390, 0, 863, -2, 0, 368, 370, 379, 381,
	383, 385, 386, 0, 448, 450, 452, 454, 456, 458,
	460, 462, 464, 465, 467, 469, 471, 473, 475, 477,
	479, 481, 483, 485, 487, 489, 491, 493, 495, 497,
	-2, 775, 777, 779, 781, -2, 62, 64, 66, 68,
	70, 72, 87, 222, 224, 226, 228, 231, 233, 235,
	900, 255, 257, 259, 261, 263, -2, 914, 0, 0,
	0, -2, 0, -2, -2, -2, 793, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 876, 878, 880,
	882, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, -2, -2, -2,
	-2, 0, 0, 1539, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 1538, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
	1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
	1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,
	1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
	1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625,
	1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635,
	1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
	1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675,
	1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685,
	1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
	1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
	1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1425, 1479,
	1428, 1423, 188, 190, 192, 193, 0, 0, 0, 0,
	0, 0, 676, 1464, 1477, 1478, 1479, 1482, 1483, 1484,
	1539, 0, 215, 217, 220, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 735, 347, 1631, 349,
	351, 0, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 251, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 346, 344, 1459, 288, 289, 0, 0, 329, 330,
	331, 332, 333, 334, 336, 293, 295, 297, 298, 300,
	302, 304, 306, 308, 310, 312, 314, 315, 317, 319,
	320, 322, 324, 325, 327, 736, 0, 0, 0, 0,
	0, 170, 0, 361, 355, 360, 362, 364, 365, 366,
	367, 0, 0, 168, 159, 0, 0, 609, 342, 340,
	0, 158, 0, 0, 772, 0, 361, 1506, 359, 773,
	774, 0, 0, 768, 769, 1661, 803, 369, 371, 380,
	382, 384, 387, -2, -2, 1756, -2, 410, -2, 418,
	1759, 1663, 421, 0, 423, -2, 426, 449, 451, 453,
	455, 457, 459, 461, 463, 466, 468, 470, 472, 474,
	476, 478, 480, 482, 484, 486, 488, 490, 492, 494,
	496, 498, 499, 0, 0, 0, 0, 0, 503, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 502, 504, 505, 506, 0, 552, 591, 592,
	776, 778, 780, 0, 717, 902, 63, 65, 67, 69,
	71, 223, 225, 227, 229, 232, 234, -2, 874, 875,
	256, 258, 260, 262, 264, -2, 0, 906, 906, 906,
	0, 0, 875, 873, 0, 372, 0, 374, 0, 503,
	377, 378, 430, 431, 1117, 0, 0, 0, 0, 0,
	1242, 1195, -2, -2, 1227, 1229, 1735, 1756, 0, 1231,
	1232, 0, 1234, 1238, 1239, 0, 1402, 1471, 1466, 1431,
	1432, 1433, 1434, 0, 0, 1437, 0, 1439, 1440, 1441,
	1306, 1253, -2, -2, -2, 1475, 1031, 1032, 1033, 1034,
	1035, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1768, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 0, 1724,
	1741, 1742, 1747, 1749, 1743, 1732, 1276, -2, -2, 1546,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1736, 1737, -2,
	1739, -2, -2, 1748, -2, 1752, 1753, -2, -2, 1758,
	-2, -2, -2, 1762, 1763, -2, 1493, 1084, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1781, 1782,
	1783, 1784, 1785, 1786, 805, 783, 796, 805, 785, 786,
	787, 788, 789, 794, 795, 798, 0, 790, 791, 792,
	892, 1638, 895, 676, 893, 877, 879, 0, 881, 0,
	0, 0, 886, 909, 907, 0, 945, 890, 891, 901,
	960, 983, 0, 965, 0, 983, 1005, 0, 970, 1657,
	1254, 1255, 0, 1479, 1476, -2, 1779, 1780, 2, 79,
	0, 1741, 1005, 81, 0, 1741, 84, 0, 1741, 0,
	-2, 88, 0, 1741, 171, 172, 1489, 1490, 1494, 1495,
	1496, 1497, 1768, 91, 0, 1455, 99, 0, 1741, 1422,
	0, 1452, 1498, 1499, 1500, 1501, 1502, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 0, 1449,
	0, 0, 601, 1419, 1424, 602, 1429, 0, 194, 195,
	196, 197, 198, 1741, 200, 201, 0, 203, 204, 1741,
	206, 207, 0, 209, 0, 0, 0, 0, 0, 230,
	676, 1741, 0, 237, 1460, 0, 700, 1741, 698, 1463,
	-2, 1741, 720, 723, 1741, 725, 676, 727, 1462, -2,
	1486, 899, 1741, 819, 348, 350, 0, 242, 0, 832,
	0, 834, 0, 853, 1011, 151, 1741, 267, 286, 151,
	1741, 270, 151, 1741, 273, 151, 1741, 276, 1417, 151,
	1741, 279, 280, 1741, 282, 173, 283, 1741, 285, 343,
	0, 0, -2, 337, 1465, -2, 0, 335, 294, 296,
	299, 301, 303, 305, 307, 309, 311, 313, 316, 318,
	321, 323, 326, 328, -2, 0, 160, 161, 162, 163,
	0, 0, 0, 0, 0, 607, 608, 0, 0, 0,
	770, 771, 0, 0, 0, 391, 0, 0, 0, 0,
	802, 388, 0, 407, 0, 409, 1731, -2, -2, 413,
	806, 810, 811, 812, 0, 0, 0, 0, 420, 0,
	0, 0, 424, 427, 0, 500, 501, 0, 0, 511,
	512, 513, 514, 1636, 1559, 517, 0, 520, 541, 556,
	0, 0, 524, 526, 606, 528, 0, 0, 530, 0,
	532, 0, 534, 0, 536, 0, 538, 540, 542, 557,
	544, 0, 0, 0, 555, 0, 561, 0, 564, 565,
	566, 0, 568, 569, 570, 0, 0, 0, 578, 580,
	0, 590, 0, 507, 508, 151, 1009, -2, 0, 869,
	923, 924, 0, 0, 0, 0, 904, 905, 0, 0,
	0, 865, 866, 373, 0, 376, 0, 0, 0, 0,
	1337, 1338, 1339, 1340, 1341, 1342, 1345, 1346, 1343, 1344,
	1347, 1348, 0, 0, 0, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1350,
	1351, 1352, 0, 0, 1354, 0, 1356, 0, 0, 0,
	0, 0, 0, 1174, 1176, 1410, 0, 0, 1353, 1122,
	1123, 1124, 1159, 1160, 0, 1228, 1407, 1406, 1230, 0,
	1359, -2, 1360, 1242, 0, 0, 1233, 1446, 1240, 1241,
	1359, 0, 1401, 0, 0, 1436, 0, 1114, 1308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 1082, 1089, 1086, 1085, 1070,
	0, 1069, 0, 0, 1067, 0, 0, 0, 1071, 0,
	1382, -2, 0, 0, 0, 0, 0, 0, 782, -2,
	784, 0, 800, 0, 894, 0, 0, 949, 1411, 1415,
	1416, 949, 949, 0, 0, 1360, 0, 0, 0, 0,
	1002, 1002, 1002, 1000, 977, 0, 983, 0, 993, 0,
	983, 983, 0, -2, 965, 0, 0, 993, 1006, 1007,
	0, 0, 0, 0, 100, 765, 119, 0, 765, 765,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 115,
	107, 108, 0, 0, 85, 701, 0, 704, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 0, 117, 0, 142, 144, 0,
	0, 0, 0, 996, 600, 0, 0, 1480, 1427, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 1466, 1467,
	615, 0, 0, 0, 240, 696, 699, 0, 718, 0,
	898, 0, 0, 0, 0, 1741, 732, 1451, 1485, 0,
	1741, 821, 0, 1015, 0, 835, 0, 0, 1012, 0,
	265, 0, 149, 150, 0, 268, 0, 271, 0, 274,
	0, 0, 277, 0, 0, 0, 0, 0, 901, 0,
	0, 185, 0, 353, 363, 0, 0, 0, 0, 901,
	0, 1362, 1023, 1026, 1027, 1028, 1114, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1090, 1084, 1100, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1080, 0,
	1055, 1055, 1055, 1072, 1073, 1091, 1092, 1094, 1096, 1098,
	1024, 1025, 1090, 1090, 1087, 1088, 185, 0, 357, 0,
	996, 393, 996, 395, 0, 586, 0, 0, 0, 0,
	-2, 415, 0, 808, 0, 813, 439, 440, 441, 815,
	816, 419, 442, 443, 444, 445, 446, 447, 0, 693,
	0, 695, 1442, 0, 416, 432, 417, 422, 0, 428,
	0, 0, 515, 516, 518, 519, 521, 522, 523, 527,
	0, 594, 1653, 604, 529, 531, 533, 535, 537, 901,
	546, 0, 548, 901, 559, 562, 567, 571, 572, 573,
	574, 575, 576, 0, 0, 0, 716, 0, 872, 921,
	922, 927, 931, 932, 935, 938, 939, 929, 1117, 887,
	888, 889, 915, 916, 748, 0, 0, 375, 1118, 1019,
	1020, 1074, 1075, 1076, 1077, 1078, 1119, 1120, 1448, 0,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	-2, -2, -2, -2, -2, -2, -2, -2, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, -2,
	-2, -2, 1157, 1158, -2, 1355, 1357, 0, 1410, 0,
	-2, 0, -2, -2, -2, -2, 1171, 0, 1173, 1178,
	1180, 1182, 0, 0, 0, 0, 1409, 1192, 1393, 0,
	0, 1334, 1335, 1336, 1177, 0, 0, 1408, 1405, 0,
	0, 1358, 1237, 0, 0, 0, 0, 1366, 1400, 1396,
	0, 1468, 1474, 1244, 912, 0, 0, 0, 0, 1251,
	0, 1447, 1101, 1102, 1103, 1104, 1105, 1106, 1115, 1316,
	0, 0, 0, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1288, 0, 1369, -2, -2, -2, -2,
	-2, -2, -2, 0, 1290, 0, 0, 1302, 0, 1304,
	0, 1292, 1360, 1379, 0, 0, 1198, 0, 0, 0,
	1242, 0, 1295, 1360, 1387, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1360, 0, 1392, 799, 896, 0,
	0, 1015, 0, 0, 0, 1414, 1015, 1015, 0, 944,
	0, 0, 0, 0, 0, 0, 997, 1001, 998, 999,
	0, 0, 983, 993, 957, 0, 0, 1450, 963, 992,
	0, 676, 982, 993, 993, 0, -2, 967, 0, 0,
	912, -2, 0, 0, 0, 0, 764, 121, 1741, 0,
	153, 0, 0, 666, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 702, 703, 705, 711, 713, 0,
	707, 1445, 0, 708, 0, 710, 712, 714, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 1421, 0, 0, 176, 995, 0, 1420,
	1430, 0, 199, 202, 205, 208, 186, 675, 0, 0,
	0, 0, 614, -2, 616, 618, 619, 620, 621, 1584,
	1486, 0, 1486, 0, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 823, 829, 0,
	914, 0, 851, 837, 0, 0, 0, 851, 855, 856,
	858, 859, 0, 0, 1013, 287, 151, 151, 151, 1418,
	151, 151, 174, 281, 284, 345, 290, 338, 901, 0,
	0, 0, 0, 164, 0, 0, 0, 339, 0, 0,
	0, 341, 0, 1016, 1018, 0, 1029, 0, 1082, 0,
	156, 185, 0, 0, 392, 397, 0, 587, 0, 0,
	408, 0, 807, 814, 0, 436, 0, 438, 694, 1444,
	1443, 0, 429, 509, 0, 605, 603, 545, 549, 901,
	551, 0, 588, 589, 593, 1010, 0, 933, 0, 930,
	936, 937, 0, 918, 746, 747, 0, 0, 0, -2,
	-2, 0, 0, 0, 1193, -2, 1172, 1175, 1179, 1181,
	1183, 0, 0, 0, 0, 0, 0, 0, 1194, 1403,
	1406, 1332, 0, 0, 1361, 1364, 1365, 0, 0, 1397,
	0, 0, 0, 0, 0, 911, 912, 912, 912, 1250,
	0, 0, 0, 0, 0, 0, 1252, 0, 0, 0,
	0, 0, 0, 0, 0, 1271, 0, 0, 0, 1275,
	1053, 0, 1287, 0, 1289, 1079, 1301, 1303, 1291, 0,
	0, 1293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1201, 1202, 1203, 1294, 1385,
	1386, 0, 0, 1093, 1095, 1097, 1099, 0, 0, 0,
	0, 1300, 0, 1391, 901, 946, 941, 1412, 996, 948,
	950, 1413, 1453, 941, 941, 0, 1361, 985, 0, 987,
	0, 0, 0, 989, 0, 978, 0, 980, 993, 962,
	0, 0, 955, 0, 954, 676, 991, 964, 968, 1468,
	0, 1008, 0, 972, 975, 0, 0, 120, 752, 0,
	0, 1454, 0, 123, 1741, 132, 0, 643, 0, 0,
	0, 0, 0, 767, 133, 1741, 151, 1741, 151, 134,
	137, 0, 141, 139, 0, 0, 634, 101, 765, 104,
	0, 0, 758, 0, 706, 709, 715, 86, 0, 760,
	750, 0, 0, 749, 143, 105, 0, 0, 762, 103,
	0, 0, 0, 185, 0, 0, 1426, 1481, 210, 212,
	213, 211, 623, 0, 1486, 0, 1486, 0, 1458, 612,
	676, 0, 238, 239, 700, 721, -2, 724, 726, 734,
	0, 0, 0, 825, 829, 0, 828, 899, 926, 913,
	1014, 830, 851, 0, 0, 0, 840, 842, 839, 836,
	833, 1015, 0, 0, 0, 0, 0, 266, 269, 272,
	275, 278, 291, 0, 183, 1618, 181, 178, 180, 352,
	0, 0, 0, 0, 1363, 0, 1021, 0, 0, 0,
	0, 157, 356, 0, 394, 0, 0, 0, 0, 0,
	0, 405, 406, -2, 434, 435, 437, 433, 0, 547,
	550, 558, 0, 0, 917, 748, 0, 1121, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 1394, 0, 1405,
	1235, 1236, 1243, 1333, 1367, 1395, 1399, 0, 1469, 1473,
	1245, 0, 0, 0, 0, 1438, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 0, 1314, 1315, 1319, 1461, 0, 0,
	1256, 0, 0, 0, 0, 0, 0, 0, 0, 1368,
	1378, 1380, 1199, 1200, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1213, -2, -2, -2, 1217, 1218, 1219,
	-2, -2, -2, 0, 0, 0, 1381, 1383, 1384, 1388,
	1389, 0, 1297, 1298, 1299, 1390, 0, 943, 0, 947,
	0, 943, 943, 908, 986, 0, 1004, 988, 960, 979,
	0, 969, 958, 0, 959, 0, 990, 0, 966, 971,
	0, 974, 0, 1245, -2, 0, 0, 0, 0, 152,
	641, 665, 0, 0, 737, 745, 745, 0, 1456, 0,
	0, 125, 0, 0, 0, 0, 130, 0, 136, 140,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 111, 114, 0, 0, 110, 0, 154, 0, 0,
	631, 0, 617, 0, 0, 0, 0, 615, 0, 236,
	697, 719, 0, 0, 0, 0, 0, 827, 829, 0,
	820, 821, 851, 925, 831, 849, 850, 848, 0, 0,
	0, 914, 857, 854, 860, 861, 0, 169, 0, 0,
	0, 0, 354, 0, 0, 0, 0, 1022, 1030, 0,
	1083, 358, 0, 581, 582, 629, 0, 585, 510, 928,
	934, 919, 748, 0, 0, -2, 0, 1186, -2, -2,
	1404, 1398, 0, 1435, 912, 1246, 1248, 1249, 1116, 1321,
	1318, 0, 1305, 1266, 1267, 0, 0, 1270, 1272, 1273,
	1274, 1054, 1377, 0, 0, 0, 0, 1296, 897, 1310,
	0, 0, 951, 1310, 1310, 0, 983, 981, 956, 952,
	0, 1469, 973, 0, 0, 754, 756, 122, 0, 642,
	0, 645, 0, 0, 0, 0, 652, 653, 0, 0,
	0, 0, 0, 667, 674, 0, 748, 0, 748, 0,
	0, 0, 0, 127, 146, 0, 0, 766, 0, 151,
	151, 0, 0, 753, 0, 0, 0, 0, 759, 761,
	751, 0, 763, 0, 175, 0, 610, 630, 0, 0,
	0, 0, 0, 0, 0, 0, 733, 0, 0, 0,
	817, 829, 0, 822, 823, 241, 0, 0, 0, 838,
	841, 843, 926, 0, 182, 0, 177, 179, 165, 0,
	0, 1017, 1081, 396, 398, 0, 0, 404, 583, 628,
	0, 0, 920, -2, -2, 1187, 1470, 1472, 0, 914,
	0, 1307, 0, 0, -2, 0, 0, 0, 883, 0,
	942, 940, 884, 885, 1003, 993, 0, 976, 124, 0,
	646, 647, 1457, 649, 0, 651, 654, 0, 656, 1488,
	0, 660, 623, 0, 671, 672, 738, 739, 744, 740,
	745, 669, 0, 126, 128, 145, 743, 129, 135, 0,
	0, 0, 0, 912, 0, 0, 0, 994, 0, 0,
	674, 0, 664, 623, 613, 0, 734, 730, 0, 0,
	824, 825, 0, 0, 0, 851, 862, 184, 0, 0,
	0, 400, 0, 402, 0, 627, 0, 1247, 1324, 0,
	1268, 1269, -2, 0, 1225, 1309, 1311, 0, 961, 953,
	644, 648, 0, 0, 680, 0, 0, 631, 0, 748,
	0, 148, 0, 0, 0, 755, 757, 0, 0, 0,
	113, 0, 663, 623, 674, 631, 674, 0, 0, 826,
	827, 0, 845, 1015, 847, 852, 0, 0, 399, 0,
	0, 584, 0, 0, 0, 1320, 1226, 0, 0, 0,
	655, 685, 0, 0, 0, 668, 0, 741, 676, 131,
	0, 742, 0, 635, 0, 0, 638, 0, 0, 0,
	0, 0, 631, 623, 611, 623, 0, 0, 818, 0,
	846, 185, 185, 401, 403, 1317, 1322, 1325, -2, 1707,
	1536, 0, 1323, 1312, 1313, 0, 657, 681, 682, 0,
	677, 678, 679, 1487, 658, 659, 673, 680, 147, 632,
	0, 0, 633, 0, 0, 116, 118, 0, 661, 631,
	631, 0, 731, 1015, 166, 167, 0, 1327, 1328, 1329,
	1330, 1331, 650, 683, 0, 684, 0, 0, 0, 685,
	636, 0, 639, 0, 626, 662, 728, 674, 844, 0,
	686, 0, 689, 690, 0, 687, 670, 0, 0, 622,
	624, 625, 623, 1326, 688, 691, 692, 0, 0, 631,
	631, 0, 729, 637, 0, 0, 0, 631, 640,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 413, 3, 419, 414, 3,
	424, 425, 417, 415, 429, 416, 426, 418, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 433, 428,
	405, 407, 406, 409, 430, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 422, 3, 423, 420, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 431, 412, 432, 410,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 408, 57748, 411, 57749, 421,
	57750, 427, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1017
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1023
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1029
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1038
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1040
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1047
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1056
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1063
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1072
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1073
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1075
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1131
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1142
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1157
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1161
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1165
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1176
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1213
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1217
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1221
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1227
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1231
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1237
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1243
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1249
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1260
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1267
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1277
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1287
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1297
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1310
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1322
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1326
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1332
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1336
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1342
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1346
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1358
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1368
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1378
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1383
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1387
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1413
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1425
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1432
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1435
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1442
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1451
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1472
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1479
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1480
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1484
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1488
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1494
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1506
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1511
		{
			sqlVAL.union = sqlDollar[2].union
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1512
		{
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1517
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1521
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1525
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1531
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1535
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1561
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1564
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1587
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1594
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1598
		{
			sqlVAL.str = "MYSQLDUMP"
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1605
		{
			sqlVAL.str = "CSV"
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1609
		{
			sqlVAL.str = "MYSQLOUTFILE"
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1613
		{
			sqlVAL.str = "PGCOPY"
		}
	case 164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1643
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1647
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1655
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1658
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1675
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1678
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1682
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1686
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1692
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1706
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1712
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1716
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1720
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1724
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1730
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1740
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1744
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1747
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1751
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1763
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1764
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1765
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1766
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1776
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1784
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1786
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1789
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1799
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1808
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1816
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1818
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1822
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1825
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1835
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1844
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1852
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1854
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1858
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1861
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1865
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1870
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1876
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1877
		{
			sqlVAL.str = ""
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1886
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1887
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1889
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1890
		{
			return helpWith(sqllex, "CREATE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1893
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1894
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1895
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1896
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1898
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1899
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1900
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1911
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1918
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1922
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1932
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1936
		{
			sqlVAL.union.val = nil
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1949
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1959
		{
			return helpWith(sqllex, "DELETE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1966
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1969
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1970
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1971
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1972
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1973
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1982
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1983
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1984
		{
			return helpWith(sqllex, "DROP")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1987
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1988
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1989
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1990
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1991
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1999
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2003
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2014
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2018
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2021
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2029
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2033
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2036
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2044
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2052
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2059
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2067
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2075
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2082
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2090
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2094
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2097
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2105
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2109
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2112
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2116
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2120
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2141
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2144
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2146
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2150
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2157
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2160
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2161
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2163
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2164
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2165
		{
			return helpWith(sqllex, "DELETE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2166
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2167
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2168
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2169
		{
			return helpWith(sqllex, "INSERT")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2170
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2172
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2173
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2175
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2178
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2179
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2181
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2182
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2190
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2191
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2195
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2209
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2216
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2220
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2224
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2234
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2240
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2246
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2250
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2260
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2264
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2268
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2272
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2275
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2295
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2299
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2303
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2306
		{
			return helpWith(sqllex, "GRANT")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2326
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2330
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2334
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2337
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2342
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2346
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2357
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2361
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2375
		{
			return helpWith(sqllex, "RESET")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2376
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2384
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2388
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2391
		{
			return helpWith(sqllex, "RESET")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2399
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2402
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2413
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2416
		{
			return helpWith(sqllex, "USE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2420
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2421
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2422
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2423
		{
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2424
		{
			return helpWith(sqllex, "USE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2425
		{
			return unimplemented(sqllex, "set local")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2441
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2456
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2459
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2477
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2485
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2489
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2493
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2499
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2509
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2513
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2517
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2521
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2525
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2536
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2540
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2543
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2549
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2565
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2569
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2574
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2591
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2594
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2596
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2599
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2603
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2613
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2629
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2636
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2642
		{
			return unimplemented(sqllex, "set from current")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2643
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2651
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2656
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2663
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2667
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2673
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2677
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2684
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2690
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2700
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2704
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2708
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2712
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2716
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2722
		{
			sqlVAL.union.val = tree.Low
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2726
		{
			sqlVAL.union.val = tree.Normal
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2730
		{
			sqlVAL.union.val = tree.High
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2741
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2745
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2749
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2754
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2758
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2770
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2771
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2772
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2773
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2774
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2775
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2776
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2777
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2779
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2780
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2781
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2782
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2783
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2784
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2785
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2786
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2787
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2788
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2790
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2792
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2793
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2794
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2796
		{
			return helpWith(sqllex, "SHOW")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2803
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2804
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2805
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2816
		{
			sqlVAL.str = "client_encoding"
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2819
		{
			sqlVAL.str = "timezone"
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2820
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2834
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2838
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2841
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2852
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2860
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2868
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2875
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2882
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2888
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2898
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2902
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2905
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2907
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2910
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2921
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2929
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2932
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2945
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2953
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2961
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2964
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2966
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2969
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2971
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2974
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2982
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2985
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2987
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2990
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2998
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3001
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3003
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3007
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3017
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3020
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3030
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3035
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3038
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3040
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3044
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3048
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3054
		{
			sqlVAL.union.val = true
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3055
		{
			sqlVAL.union.val = false
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3063
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3066
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3068
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3072
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3082
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3091
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3100
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3103
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3110
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3114
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3117
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3124
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3128
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3136
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3141
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3146
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3150
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3158
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3161
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3169
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3172
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3179
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3182
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3190
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3193
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3201
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3204
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3208
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3213
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3218
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3225
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3233
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3240
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3245
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3257
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3261
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3264
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3272
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3279
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3284
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3404
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3408
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3412
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3451
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3455
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3460
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3464
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3473
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3480
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3484
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3496
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3505
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3508
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3544
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3556
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3570
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3581
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3595
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3601
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3605
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3611
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3617
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3623
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3631
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3638
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3643
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3648
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3654
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3661
		{
			sqlVAL.str = ""
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3668
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 632:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3674
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3681
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3688
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3694
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3698
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 637:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3704
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3714
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3718
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 640:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3724
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3735
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3746
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3750
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3756
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3760
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3764
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3768
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3772
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3776
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3780
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3798
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3802
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3806
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3810
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3814
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3818
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3822
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3830
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3834
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3838
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 661:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3845
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3855
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3867
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3877
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3889
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3894
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3900
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3906
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3917
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3927
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3951
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3955
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3961
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3965
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3970
		{
			return unimplemented(sqllex, "match full")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3971
		{
			return unimplemented(sqllex, "match partial")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3972
		{
			return unimplemented(sqllex, "match simple")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3973
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3980
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3984
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3988
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3992
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3996
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4002
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4008
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4016
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4020
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4024
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4028
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4032
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4038
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4042
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4046
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4064
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 697:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4072
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4080
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4084
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4087
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4091
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4092
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4094
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4095
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4096
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4099
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4101
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4103
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4105
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4106
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4108
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4109
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4111
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4120
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4123
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4131
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4135
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4138
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4142
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4146
		{
			sqlVAL.union.val = nil
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4156
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4160
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4163
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4171
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4178
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4196
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4209
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4223
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4232
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4241
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4246
		{
			sqlVAL.union.val = true
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4250
		{
			sqlVAL.union.val = false
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4256
		{
			sqlVAL.union.val = true
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4260
		{
			sqlVAL.union.val = false
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4266
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4270
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4279
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4282
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4283
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4286
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4287
		{
			sqlVAL.str = ""
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4290
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4291
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4295
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4299
		{
			sqlVAL.union.val = tree.Descending
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4303
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4309
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4320
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4326
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4330
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4334
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4338
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4342
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4344
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4348
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4352
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4358
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4362
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4368
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4372
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4378
		{
			sqlVAL.union.val = true
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4382
		{
			sqlVAL.union.val = false
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4387
		{
			sqlVAL.union.val = true
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4388
		{
			sqlVAL.union.val = false
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4396
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4399
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4409
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4418
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4421
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4429
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4432
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4436
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4437
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4438
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4454
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4457
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4459
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4462
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4472
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4475
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4477
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4480
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4484
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4489
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4490
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4491
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4499
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4506
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4509
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4510
		{
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4514
		{
			sqlVAL.str = ""
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4518
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4522
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4526
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4532
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4536
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4542
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4546
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4552
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4556
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4569
		{
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4571
		{
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4575
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4579
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4583
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4589
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4595
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4601
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4605
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4615
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4625
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4635
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4639
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4643
		{
			sqlVAL.str = ""
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4649
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4653
		{
			sqlVAL.str = ""
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4659
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4663
		{
			sqlVAL.str = ""
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4669
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4673
		{
			sqlVAL.str = ""
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4678
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4679
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4691
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4698
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4705
		{
			return helpWith(sqllex, "INSERT")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4716
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4723
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4727
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4735
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4741
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4745
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4749
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4755
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4759
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4779
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4783
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4787
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4793
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4797
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4799
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4805
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4810
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4814
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 852:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4831
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4842
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4846
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4847
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4851
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4868
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4871
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4875
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4918
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4924
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4928
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4943
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4947
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4951
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4955
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4959
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4963
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4970
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5005
		{
			return helpWith(sqllex, "SELECT")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5006
		{
			return helpWith(sqllex, "VALUES")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5007
		{
			return helpWith(sqllex, "TABLE")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5029
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5042
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5056
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5068
		{
			return helpWith(sqllex, "SELECT")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5072
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5081
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5090
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5105
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5112
		{
			return helpWith(sqllex, "TABLE")
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5124
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5127
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5128
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5132
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5136
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 897:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5142
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5150
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5151
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5155
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5158
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5161
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5162
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5166
		{
			sqlVAL.union.val = true
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5170
		{
			sqlVAL.union.val = false
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5174
		{
			sqlVAL.union.val = false
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5180
		{
			sqlVAL.union.val = true
		}
	case 908:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5186
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5191
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5192
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5195
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5196
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5200
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5204
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5210
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5216
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5220
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5226
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5230
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5234
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5243
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5252
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5263
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5267
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5276
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5282
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5289
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5296
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5305
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5309
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5313
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5319
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5320
		{
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5323
		{
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5324
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5341
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5345
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5351
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5355
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5374
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5377
		{
			return helpWith(sqllex, "VALUES")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5379
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5391
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5394
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5396
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5402
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5406
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5412
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5416
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5422
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5428
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5433
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5456
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5460
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5464
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5468
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5495
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5509
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5513
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5516
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5518
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5522
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5526
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5531
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 969:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5547
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5553
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5557
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5563
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5565
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5569
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5575
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5577
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5580
		{
			sqlVAL.union.val = nil
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5581
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5582
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5586
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5590
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5596
		{
			sqlVAL.union.val = true
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5600
		{
			sqlVAL.union.val = false
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5620
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5624
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5628
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5632
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5636
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5640
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5646
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5650
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5657
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5663
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5670
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5676
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5680
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5684
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5688
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5694
		{
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5695
		{
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5706
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5710
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5715
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5716
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5717
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5718
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5722
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5739
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5743
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5747
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5753
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5757
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5769
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5783
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5792
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5803
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5807
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5814
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5816
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5825
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5829
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5833
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5842
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5860
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5864
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5868
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5872
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5876
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5880
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5884
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5888
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5892
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5896
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5900
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5904
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5908
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5912
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5916
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5920
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5924
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5944
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5948
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5952
		{
			sqlVAL.union.val = nil
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5959
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5963
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5967
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5971
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5975
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5979
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5983
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5987
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5991
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5995
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5999
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6003
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6013
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6017
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6026
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6035
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6044
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6048
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6055
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6059
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6063
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6067
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6071
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6077
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6081
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6087
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6098
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6104
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6116
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6122
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6126
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6130
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6134
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6139
		{
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6140
		{
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6145
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6149
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6153
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6157
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6161
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6165
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6169
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6173
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6177
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6182
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6188
		{
			sqlVAL.union.val = tree.Year
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6192
		{
			sqlVAL.union.val = tree.Month
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6196
		{
			sqlVAL.union.val = tree.Day
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6200
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6204
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6208
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6214
		{
			sqlVAL.union.val = tree.Month
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6218
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6222
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6226
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6230
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6234
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6238
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6242
		{
			sqlVAL.union.val = nil
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6248
		{
			sqlVAL.union.val = tree.Second
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6251
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6275
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6279
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6283
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6286
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6295
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6299
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6303
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6307
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6311
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6315
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6319
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6323
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6343
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6347
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6351
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6355
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6359
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6363
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6371
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6375
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6379
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6383
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6387
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6391
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6395
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6399
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6403
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6407
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6411
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6415
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6419
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6423
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6427
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6431
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6435
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6439
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6443
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6447
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6451
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6455
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6459
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6463
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6467
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6471
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6475
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6479
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6483
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6487
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6491
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6495
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6499
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6503
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6507
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6511
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6514
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6516
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6520
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6524
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6528
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6532
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6536
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6540
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6544
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6548
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6552
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6556
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6560
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6564
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6568
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6572
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6576
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6580
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6597
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6601
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6605
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6620
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6624
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6628
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6632
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6636
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6640
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6644
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6648
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6652
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6656
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6660
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6664
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6668
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6672
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6676
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6680
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6684
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6688
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6692
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6696
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6700
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6704
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6708
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6712
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6716
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6720
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6724
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6728
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6742
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6750
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6786
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6791
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6800
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6805
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6809
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6813
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6818
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6822
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6826
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6830
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6835
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = &t
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6850
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6854
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6857
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6858
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6860
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6864
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6868
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6871
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6882
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6889
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6898
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6899
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6903
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6905
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6909
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6915
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6919
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6923
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6927
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6933
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6937
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6941
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6945
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6949
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6953
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6957
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6961
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6965
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6969
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6973
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6981
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6988
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6991
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6993
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6996
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6998
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7001
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7003
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7006
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7008
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7011
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7013
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7016
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7018
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7021
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7023
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7026
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7028
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7032
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7035
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7036
		{
			return unimplemented(sqllex, "treat")
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7038
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7042
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7046
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7050
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7054
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7057
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7059
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7062
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7067
		{
			return unimplemented(sqllex, "within group")
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7068
		{
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7072
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7076
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7083
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7087
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7093
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7097
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7103
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7111
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7115
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7119
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7126
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7145
		{
			sqlVAL.str = ""
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7151
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7155
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7165
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7166
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7167
		{
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7170
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7171
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7177
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7178
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7179
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7180
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7181
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7192
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7196
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7202
		{
			sqlVAL.union.val = tree.Any
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7206
		{
			sqlVAL.union.val = tree.Some
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7210
		{
			sqlVAL.union.val = tree.All
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7215
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7216
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7217
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7218
		{
			sqlVAL.union.val = tree.Div
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7219
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7220
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7221
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7222
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7223
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7224
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7225
		{
			sqlVAL.union.val = tree.LT
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7226
		{
			sqlVAL.union.val = tree.GT
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7227
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7228
		{
			sqlVAL.union.val = tree.LE
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7229
		{
			sqlVAL.union.val = tree.GE
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7230
		{
			sqlVAL.union.val = tree.NE
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7234
		{
			sqlVAL.union.val = tree.Like
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7235
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7236
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7237
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7249
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7255
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7259
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7265
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7275
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7279
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7285
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7289
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7295
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7299
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7321
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7325
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7329
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7335
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7342
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7346
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7363
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7367
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7371
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7375
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7379
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7385
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7391
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7397
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7401
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7405
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7411
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7415
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7426
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7433
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7437
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7443
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7449
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7453
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7460
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7466
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7470
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7477
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7483
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7492
		{
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7493
		{
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7497
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7501
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7507
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7516
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7520
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7524
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7532
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7536
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7542
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7546
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7552
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7559
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7587
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7591
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7595
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7601
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7605
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7612
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7616
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7620
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7624
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7627
		{
			return unimplemented(sqllex, "func const")
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7633
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7636
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7638
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7642
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7646
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7653
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7657
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7666
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7677
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7687
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7783
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7790
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7794
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7798
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7812
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7816
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7820
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7833
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7851
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7861
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7865
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7879
		{
			sqlVAL.str = ""
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7885
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7889
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
