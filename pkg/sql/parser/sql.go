// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:597
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9764

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1068,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 898,
	199, 898,
	214, 249,
	296, 249,
	304, 738,
	331, 249,
	340, 738,
	379, 738,
	403, 249,
	427, 738,
	-2, 0,
	-1, 74,
	214, 253,
	-2, 0,
	-1, 75,
	109, 1068,
	188, 1068,
	413, 1068,
	414, 1068,
	-2, 0,
	-1, 87,
	122, 1042,
	138, 1042,
	196, 1042,
	226, 1042,
	260, 1042,
	270, 1042,
	408, 1042,
	-2, 1020,
	-1, 118,
	128, 656,
	213, 656,
	298, 636,
	349, 636,
	396, 656,
	-2, 0,
	-1, 119,
	4, 1070,
	21, 1070,
	22, 1070,
	23, 1070,
	24, 1070,
	25, 1070,
	27, 1070,
	33, 1070,
	38, 1070,
	39, 1070,
	40, 1070,
	41, 1070,
	42, 1070,
	43, 1070,
	44, 1070,
	45, 1070,
	46, 1070,
	47, 1070,
	48, 1070,
	49, 1070,
	51, 1070,
	52, 1070,
	53, 1070,
	54, 1070,
	55, 1070,
	56, 1070,
	59, 1070,
	60, 1070,
	61, 1070,
	62, 1070,
	64, 1070,
	65, 1070,
	69, 1070,
	70, 1070,
	71, 1070,
	72, 1070,
	73, 1070,
	74, 1070,
	76, 1070,
	77, 1070,
	78, 1070,
	79, 1070,
	81, 1070,
	83, 1070,
	84, 1070,
	85, 1070,
	88, 1070,
	89, 1070,
	97, 1070,
	98, 1070,
	99, 1070,
	100, 1070,
	101, 1070,
	102, 1070,
	103, 1070,
	104, 1070,
	106, 1070,
	108, 1070,
	109, 1070,
	111, 1070,
	114, 1070,
	115, 1070,
	116, 1070,
	118, 1070,
	120, 1070,
	121, 1070,
	123, 1070,
	124, 1070,
	125, 1070,
	126, 1070,
	127, 1070,
	128, 1070,
	129, 1070,
	130, 1070,
	131, 1070,
	132, 1070,
	133, 1070,
	134, 1070,
	135, 1070,
	137, 1070,
	143, 1070,
	144, 1070,
	145, 1070,
	146, 1070,
	147, 1070,
	148, 1070,
	150, 1070,
	152, 1070,
	156, 1070,
	157, 1070,
	159, 1070,
	160, 1070,
	162, 1070,
	163, 1070,
	165, 1070,
	166, 1070,
	167, 1070,
	168, 1070,
	169, 1070,
	170, 1070,
	171, 1070,
	172, 1070,
	174, 1070,
	175, 1070,
	177, 1070,
	178, 1070,
	179, 1070,
	182, 1070,
	183, 1070,
	184, 1070,
	185, 1070,
	188, 1070,
	189, 1070,
	190, 1070,
	191, 1070,
	192, 1070,
	193, 1070,
	194, 1070,
	195, 1070,
	197, 1070,
	199, 1070,
	201, 1070,
	203, 1070,
	204, 1070,
	205, 1070,
	207, 1070,
	208, 1070,
	211, 1070,
	212, 1070,
	213, 1070,
	214, 1070,
	215, 1070,
	217, 1070,
	218, 1070,
	220, 1070,
	221, 1070,
	223, 1070,
	224, 1070,
	227, 1070,
	228, 1070,
	231, 1070,
	232, 1070,
	233, 1070,
	235, 1070,
	236, 1070,
	237, 1070,
	238, 1070,
	239, 1070,
	240, 1070,
	241, 1070,
	242, 1070,
	243, 1070,
	244, 1070,
	246, 1070,
	247, 1070,
	248, 1070,
	249, 1070,
	251, 1070,
	253, 1070,
	255, 1070,
	256, 1070,
	257, 1070,
	258, 1070,
	259, 1070,
	261, 1070,
	262, 1070,
	263, 1070,
	265, 1070,
	266, 1070,
	267, 1070,
	268, 1070,
	271, 1070,
	272, 1070,
	273, 1070,
	275, 1070,
	277, 1070,
	278, 1070,
	279, 1070,
	280, 1070,
	281, 1070,
	282, 1070,
	283, 1070,
	284, 1070,
	285, 1070,
	286, 1070,
	288, 1070,
	289, 1070,
	290, 1070,
	291, 1070,
	292, 1070,
	293, 1070,
	295, 1070,
	297, 1070,
	298, 1070,
	299, 1070,
	300, 1070,
	301, 1070,
	302, 1070,
	303, 1070,
	304, 1070,
	305, 1070,
	307, 1070,
	308, 1070,
	309, 1070,
	310, 1070,
	311, 1070,
	313, 1070,
	314, 1070,
	315, 1070,
	316, 1070,
	317, 1070,
	318, 1070,
	319, 1070,
	320, 1070,
	322, 1070,
	324, 1070,
	325, 1070,
	326, 1070,
	327, 1070,
	328, 1070,
	329, 1070,
	331, 1070,
	332, 1070,
	333, 1070,
	334, 1070,
	335, 1070,
	336, 1070,
	337, 1070,
	338, 1070,
	340, 1070,
	341, 1070,
	342, 1070,
	343, 1070,
	344, 1070,
	345, 1070,
	346, 1070,
	347, 1070,
	348, 1070,
	349, 1070,
	351, 1070,
	352, 1070,
	353, 1070,
	354, 1070,
	355, 1070,
	357, 1070,
	358, 1070,
	359, 1070,
	360, 1070,
	361, 1070,
	363, 1070,
	364, 1070,
	365, 1070,
	366, 1070,
	367, 1070,
	368, 1070,
	369, 1070,
	370, 1070,
	371, 1070,
	372, 1070,
	373, 1070,
	374, 1070,
	376, 1070,
	377, 1070,
	378, 1070,
	380, 1070,
	381, 1070,
	382, 1070,
	383, 1070,
	384, 1070,
	385, 1070,
	386, 1070,
	388, 1070,
	389, 1070,
	390, 1070,
	391, 1070,
	392, 1070,
	394, 1070,
	396, 1070,
	397, 1070,
	398, 1070,
	399, 1070,
	400, 1070,
	402, 1070,
	403, 1070,
	404, 1070,
	406, 1070,
	407, 1070,
	410, 1070,
	411, 1070,
	412, 1070,
	413, 1070,
	414, 1070,
	415, 1070,
	417, 1070,
	419, 1070,
	420, 1070,
	421, 1070,
	422, 1070,
	423, 1070,
	424, 1070,
	425, 1070,
	427, 1070,
	428, 1070,
	429, 1070,
	434, 1070,
	435, 1070,
	436, 1070,
	437, 1070,
	438, 1070,
	439, 1070,
	-2, 0,
	-1, 120,
	1, 951,
	203, 951,
	295, 951,
	302, 951,
	442, 951,
	465, 951,
	-2, 0,
	-1, 122,
	1, 951,
	465, 951,
	-2, 0,
	-1, 123,
	1, 951,
	465, 951,
	-2, 0,
	-1, 124,
	1, 955,
	465, 955,
	-2, 0,
	-1, 149,
	122, 1041,
	138, 1041,
	196, 1041,
	226, 1041,
	260, 1041,
	270, 1041,
	408, 1041,
	-2, 1029,
	-1, 182,
	4, 1077,
	5, 1077,
	6, 1077,
	7, 1077,
	8, 1077,
	9, 1077,
	10, 1077,
	21, 1077,
	22, 1077,
	23, 1077,
	24, 1077,
	25, 1077,
	27, 1077,
	33, 1077,
	34, 1077,
	38, 1077,
	39, 1077,
	40, 1077,
	41, 1077,
	42, 1077,
	43, 1077,
	44, 1077,
	45, 1077,
	46, 1077,
	47, 1077,
	48, 1077,
	49, 1077,
	51, 1077,
	52, 1077,
	53, 1077,
	54, 1077,
	55, 1077,
	56, 1077,
	57, 1077,
	58, 1077,
	59, 1077,
	60, 1077,
	61, 1077,
	62, 1077,
	64, 1077,
	65, 1077,
	67, 1077,
	69, 1077,
	70, 1077,
	71, 1077,
	72, 1077,
	73, 1077,
	74, 1077,
	76, 1077,
	77, 1077,
	78, 1077,
	79, 1077,
	81, 1077,
	83, 1077,
	84, 1077,
	85, 1077,
	87, 1077,
	88, 1077,
	89, 1077,
	90, 1077,
	91, 1077,
	92, 1077,
	93, 1077,
	94, 1077,
	95, 1077,
	96, 1077,
	97, 1077,
	98, 1077,
	99, 1077,
	100, 1077,
	101, 1077,
	102, 1077,
	103, 1077,
	104, 1077,
	105, 1077,
	106, 1077,
	108, 1077,
	109, 1077,
	111, 1077,
	114, 1077,
	115, 1077,
	116, 1077,
	118, 1077,
	120, 1077,
	121, 1077,
	123, 1077,
	124, 1077,
	125, 1077,
	126, 1077,
	127, 1077,
	128, 1077,
	129, 1077,
	130, 1077,
	131, 1077,
	132, 1077,
	133, 1077,
	134, 1077,
	135, 1077,
	136, 1077,
	137, 1077,
	143, 1077,
	144, 1077,
	145, 1077,
	146, 1077,
	147, 1077,
	148, 1077,
	150, 1077,
	152, 1077,
	155, 1077,
	156, 1077,
	157, 1077,
	159, 1077,
	160, 1077,
	162, 1077,
	163, 1077,
	165, 1077,
	166, 1077,
	167, 1077,
	168, 1077,
	169, 1077,
	170, 1077,
	171, 1077,
	172, 1077,
	173, 1077,
	174, 1077,
	175, 1077,
	177, 1077,
	178, 1077,
	179, 1077,
	182, 1077,
	183, 1077,
	184, 1077,
	185, 1077,
	187, 1077,
	188, 1077,
	189, 1077,
	190, 1077,
	191, 1077,
	192, 1077,
	193, 1077,
	194, 1077,
	195, 1077,
	197, 1077,
	199, 1077,
	200, 1077,
	201, 1077,
	202, 1077,
	203, 1077,
	204, 1077,
	205, 1077,
	206, 1077,
	207, 1077,
	208, 1077,
	211, 1077,
	212, 1077,
	213, 1077,
	214, 1077,
	215, 1077,
	217, 1077,
	218, 1077,
	220, 1077,
	221, 1077,
	222, 1077,
	223, 1077,
	224, 1077,
	225, 1077,
	227, 1077,
	228, 1077,
	231, 1077,
	232, 1077,
	233, 1077,
	235, 1077,
	236, 1077,
	237, 1077,
	238, 1077,
	239, 1077,
	240, 1077,
	241, 1077,
	242, 1077,
	243, 1077,
	244, 1077,
	245, 1077,
	246, 1077,
	247, 1077,
	248, 1077,
	249, 1077,
	250, 1077,
	251, 1077,
	252, 1077,
	253, 1077,
	254, 1077,
	255, 1077,
	256, 1077,
	257, 1077,
	258, 1077,
	259, 1077,
	261, 1077,
	262, 1077,
	263, 1077,
	266, 1077,
	267, 1077,
	268, 1077,
	271, 1077,
	272, 1077,
	273, 1077,
	274, 1077,
	275, 1077,
	276, 1077,
	277, 1077,
	278, 1077,
	279, 1077,
	280, 1077,
	281, 1077,
	282, 1077,
	283, 1077,
	284, 1077,
	285, 1077,
	286, 1077,
	288, 1077,
	289, 1077,
	290, 1077,
	291, 1077,
	292, 1077,
	293, 1077,
	295, 1077,
	297, 1077,
	298, 1077,
	299, 1077,
	300, 1077,
	301, 1077,
	302, 1077,
	303, 1077,
	304, 1077,
	305, 1077,
	307, 1077,
	308, 1077,
	309, 1077,
	310, 1077,
	311, 1077,
	313, 1077,
	314, 1077,
	315, 1077,
	316, 1077,
	317, 1077,
	318, 1077,
	319, 1077,
	320, 1077,
	322, 1077,
	323, 1077,
	324, 1077,
	325, 1077,
	326, 1077,
	327, 1077,
	328, 1077,
	329, 1077,
	331, 1077,
	332, 1077,
	333, 1077,
	334, 1077,
	335, 1077,
	336, 1077,
	337, 1077,
	338, 1077,
	340, 1077,
	341, 1077,
	342, 1077,
	343, 1077,
	344, 1077,
	345, 1077,
	346, 1077,
	347, 1077,
	348, 1077,
	349, 1077,
	350, 1077,
	351, 1077,
	352, 1077,
	353, 1077,
	354, 1077,
	355, 1077,
	356, 1077,
	357, 1077,
	358, 1077,
	359, 1077,
	360, 1077,
	361, 1077,
	363, 1077,
	364, 1077,
	365, 1077,
	366, 1077,
	367, 1077,
	368, 1077,
	369, 1077,
	370, 1077,
	371, 1077,
	372, 1077,
	373, 1077,
	374, 1077,
	376, 1077,
	377, 1077,
	378, 1077,
	380, 1077,
	381, 1077,
	382, 1077,
	383, 1077,
	384, 1077,
	385, 1077,
	386, 1077,
	388, 1077,
	389, 1077,
	390, 1077,
	391, 1077,
	392, 1077,
	394, 1077,
	396, 1077,
	397, 1077,
	398, 1077,
	399, 1077,
	400, 1077,
	401, 1077,
	402, 1077,
	403, 1077,
	404, 1077,
	406, 1077,
	407, 1077,
	409, 1077,
	410, 1077,
	411, 1077,
	412, 1077,
	413, 1077,
	414, 1077,
	415, 1077,
	416, 1077,
	417, 1077,
	419, 1077,
	420, 1077,
	421, 1077,
	422, 1077,
	423, 1077,
	424, 1077,
	425, 1077,
	427, 1077,
	428, 1077,
	429, 1077,
	434, 1077,
	435, 1077,
	436, 1077,
	437, 1077,
	438, 1077,
	439, 1077,
	440, 1077,
	446, 1077,
	453, 1077,
	454, 1077,
	455, 1077,
	462, 1077,
	466, 1077,
	-2, 0,
	-1, 560,
	154, 1754,
	393, 1754,
	445, 1754,
	464, 1754,
	-2, 0,
	-1, 561,
	154, 1833,
	393, 1833,
	445, 1833,
	464, 1833,
	-2, 0,
	-1, 562,
	154, 1743,
	393, 1743,
	445, 1743,
	464, 1743,
	-2, 0,
	-1, 564,
	154, 1925,
	393, 1925,
	445, 1925,
	464, 1925,
	-2, 0,
	-1, 566,
	154, 1955,
	393, 1955,
	445, 1955,
	464, 1955,
	-2, 0,
	-1, 573,
	154, 1844,
	393, 1844,
	445, 1844,
	464, 1844,
	-2, 506,
	-1, 590,
	464, 1701,
	467, 1701,
	-2, 707,
	-1, 591,
	464, 1703,
	467, 1703,
	-2, 708,
	-1, 592,
	464, 1702,
	467, 1702,
	-2, 709,
	-1, 593,
	467, 1648,
	-2, 710,
	-1, 741,
	298, 637,
	349, 637,
	-2, 0,
	-1, 742,
	298, 636,
	349, 636,
	-2, 587,
	-1, 745,
	1, 666,
	461, 666,
	463, 666,
	465, 666,
	-2, 0,
	-1, 746,
	1, 706,
	151, 706,
	461, 706,
	463, 706,
	465, 706,
	-2, 0,
	-1, 754,
	1, 640,
	461, 640,
	463, 640,
	465, 640,
	-2, 0,
	-1, 757,
	1, 666,
	461, 666,
	463, 666,
	465, 666,
	-2, 0,
	-1, 758,
	1, 668,
	461, 668,
	463, 668,
	465, 668,
	-2, 0,
	-1, 759,
	1, 671,
	461, 671,
	463, 671,
	465, 671,
	-2, 0,
	-1, 763,
	1, 685,
	461, 685,
	463, 685,
	465, 685,
	-2, 0,
	-1, 764,
	1, 687,
	461, 687,
	463, 687,
	465, 687,
	-2, 0,
	-1, 808,
	138, 1079,
	226, 1079,
	260, 1079,
	-2, 1029,
	-1, 824,
	138, 1078,
	226, 1078,
	260, 1078,
	-2, 1029,
	-1, 848,
	464, 1700,
	-2, 514,
	-1, 877,
	462, 1692,
	-2, 1683,
	-1, 883,
	5, 1216,
	-2, 1734,
	-1, 884,
	5, 1217,
	-2, 1738,
	-1, 885,
	5, 1218,
	-2, 1737,
	-1, 886,
	5, 1219,
	-2, 1952,
	-1, 887,
	5, 1220,
	-2, 1846,
	-1, 888,
	5, 1221,
	-2, 1917,
	-1, 889,
	5, 1222,
	-2, 1919,
	-1, 890,
	5, 1223,
	-2, 1932,
	-1, 891,
	5, 1224,
	-2, 1920,
	-1, 892,
	5, 1225,
	-2, 1921,
	-1, 893,
	5, 1226,
	-2, 1733,
	-1, 894,
	5, 1227,
	-2, 1968,
	-1, 895,
	5, 1228,
	-2, 1807,
	-1, 896,
	5, 1229,
	-2, 1856,
	-1, 897,
	5, 1230,
	-2, 1858,
	-1, 898,
	5, 1231,
	-2, 1811,
	-1, 899,
	5, 1232,
	462, 1710,
	-2, 1701,
	-1, 900,
	5, 1288,
	462, 1288,
	-2, 2003,
	-1, 905,
	462, 1711,
	-2, 1702,
	-1, 907,
	5, 1236,
	-2, 2001,
	-1, 908,
	5, 1237,
	-2, 2002,
	-1, 909,
	5, 1238,
	-2, 1810,
	-1, 910,
	5, 1239,
	-2, 2014,
	-1, 911,
	5, 1240,
	-2, 1812,
	-1, 912,
	5, 1241,
	-2, 1813,
	-1, 913,
	5, 1242,
	-2, 1814,
	-1, 914,
	5, 1243,
	-2, 1983,
	-1, 915,
	5, 1244,
	-2, 2012,
	-1, 916,
	5, 1245,
	-2, 1790,
	-1, 917,
	5, 1246,
	-2, 1791,
	-1, 918,
	5, 1260,
	-2, 1995,
	-1, 920,
	5, 1235,
	-2, 1991,
	-1, 921,
	5, 1235,
	-2, 1990,
	-1, 922,
	5, 1235,
	-2, 2007,
	-1, 923,
	5, 1252,
	-2, 1985,
	-1, 924,
	5, 1253,
	-2, 1735,
	-1, 925,
	5, 1263,
	-2, 1984,
	-1, 926,
	5, 1265,
	-2, 2023,
	-1, 928,
	5, 1276,
	-2, 1764,
	-1, 929,
	5, 1287,
	-2, 2016,
	-1, 930,
	5, 1279,
	-2, 2017,
	-1, 931,
	5, 1287,
	-2, 2018,
	-1, 932,
	5, 1283,
	-2, 2019,
	-1, 933,
	5, 1202,
	-2, 1820,
	-1, 934,
	5, 1203,
	-2, 1821,
	-1, 935,
	464, 1698,
	-2, 1682,
	-1, 936,
	462, 2043,
	-2, 1699,
	-1, 956,
	5, 1271,
	-2, 1943,
	-1, 973,
	5, 1270,
	-2, 2024,
	-1, 983,
	5, 1272,
	428, 1272,
	-2, 1986,
	-1, 984,
	5, 1273,
	428, 1273,
	-2, 1987,
	-1, 1020,
	462, 1710,
	-2, 1701,
	-1, 1047,
	154, 1955,
	393, 1955,
	445, 1955,
	464, 1955,
	-2, 0,
	-1, 1050,
	1, 492,
	465, 492,
	-2, 963,
	-1, 1170,
	313, 1679,
	455, 1679,
	-2, 1678,
	-1, 1193,
	466, 1679,
	-2, 1680,
	-1, 1228,
	304, 738,
	427, 738,
	-2, 248,
	-1, 1248,
	284, 1066,
	-2, 871,
	-1, 1257,
	264, 1705,
	-2, 0,
	-1, 1321,
	1, 367,
	461, 367,
	463, 367,
	465, 367,
	-2, 1040,
	-1, 1324,
	4, 2022,
	11, 2022,
	12, 2022,
	14, 2022,
	15, 2022,
	16, 2022,
	17, 2022,
	18, 2022,
	19, 2022,
	21, 2022,
	22, 2022,
	23, 2022,
	24, 2022,
	25, 2022,
	27, 2022,
	30, 2022,
	31, 2022,
	33, 2022,
	35, 2022,
	38, 2022,
	39, 2022,
	40, 2022,
	41, 2022,
	42, 2022,
	43, 2022,
	44, 2022,
	45, 2022,
	46, 2022,
	47, 2022,
	48, 2022,
	49, 2022,
	51, 2022,
	52, 2022,
	53, 2022,
	54, 2022,
	55, 2022,
	56, 2022,
	59, 2022,
	60, 2022,
	61, 2022,
	62, 2022,
	64, 2022,
	65, 2022,
	66, 2022,
	69, 2022,
	70, 2022,
	71, 2022,
	72, 2022,
	73, 2022,
	74, 2022,
	75, 2022,
	76, 2022,
	77, 2022,
	78, 2022,
	79, 2022,
	81, 2022,
	82, 2022,
	83, 2022,
	84, 2022,
	85, 2022,
	87, 2022,
	88, 2022,
	89, 2022,
	97, 2022,
	98, 2022,
	99, 2022,
	100, 2022,
	101, 2022,
	102, 2022,
	103, 2022,
	104, 2022,
	106, 2022,
	108, 2022,
	109, 2022,
	111, 2022,
	114, 2022,
	115, 2022,
	116, 2022,
	118, 2022,
	120, 2022,
	121, 2022,
	123, 2022,
	124, 2022,
	125, 2022,
	126, 2022,
	127, 2022,
	128, 2022,
	129, 2022,
	130, 2022,
	131, 2022,
	132, 2022,
	133, 2022,
	134, 2022,
	135, 2022,
	139, 2022,
	140, 2022,
	141, 2022,
	142, 2022,
	143, 2022,
	144, 2022,
	145, 2022,
	146, 2022,
	147, 2022,
	148, 2022,
	149, 2022,
	150, 2022,
	152, 2022,
	155, 2022,
	156, 2022,
	157, 2022,
	159, 2022,
	160, 2022,
	162, 2022,
	163, 2022,
	165, 2022,
	166, 2022,
	167, 2022,
	168, 2022,
	169, 2022,
	170, 2022,
	171, 2022,
	172, 2022,
	173, 2022,
	174, 2022,
	175, 2022,
	176, 2022,
	177, 2022,
	178, 2022,
	179, 2022,
	180, 2022,
	181, 2022,
	183, 2022,
	184, 2022,
	185, 2022,
	187, 2022,
	188, 2022,
	189, 2022,
	190, 2022,
	191, 2022,
	192, 2022,
	193, 2022,
	194, 2022,
	195, 2022,
	197, 2022,
	199, 2022,
	200, 2022,
	201, 2022,
	202, 2022,
	203, 2022,
	204, 2022,
	205, 2022,
	206, 2022,
	207, 2022,
	208, 2022,
	209, 2022,
	210, 2022,
	211, 2022,
	212, 2022,
	213, 2022,
	214, 2022,
	215, 2022,
	217, 2022,
	218, 2022,
	220, 2022,
	221, 2022,
	222, 2022,
	223, 2022,
	224, 2022,
	225, 2022,
	227, 2022,
	228, 2022,
	231, 2022,
	232, 2022,
	233, 2022,
	234, 2022,
	235, 2022,
	236, 2022,
	237, 2022,
	238, 2022,
	239, 2022,
	240, 2022,
	241, 2022,
	242, 2022,
	243, 2022,
	244, 2022,
	245, 2022,
	246, 2022,
	247, 2022,
	248, 2022,
	249, 2022,
	252, 2022,
	253, 2022,
	255, 2022,
	256, 2022,
	257, 2022,
	258, 2022,
	259, 2022,
	261, 2022,
	262, 2022,
	263, 2022,
	266, 2022,
	267, 2022,
	268, 2022,
	269, 2022,
	271, 2022,
	272, 2022,
	273, 2022,
	275, 2022,
	277, 2022,
	278, 2022,
	279, 2022,
	280, 2022,
	281, 2022,
	282, 2022,
	283, 2022,
	284, 2022,
	285, 2022,
	286, 2022,
	288, 2022,
	289, 2022,
	290, 2022,
	291, 2022,
	292, 2022,
	293, 2022,
	295, 2022,
	297, 2022,
	298, 2022,
	299, 2022,
	300, 2022,
	301, 2022,
	302, 2022,
	303, 2022,
	304, 2022,
	305, 2022,
	307, 2022,
	308, 2022,
	309, 2022,
	310, 2022,
	311, 2022,
	312, 2022,
	313, 2022,
	314, 2022,
	315, 2022,
	316, 2022,
	317, 2022,
	318, 2022,
	319, 2022,
	320, 2022,
	322, 2022,
	323, 2022,
	324, 2022,
	325, 2022,
	326, 2022,
	327, 2022,
	328, 2022,
	329, 2022,
	330, 2022,
	331, 2022,
	332, 2022,
	333, 2022,
	334, 2022,
	335, 2022,
	336, 2022,
	337, 2022,
	338, 2022,
	340, 2022,
	341, 2022,
	342, 2022,
	343, 2022,
	344, 2022,
	345, 2022,
	346, 2022,
	347, 2022,
	348, 2022,
	349, 2022,
	351, 2022,
	352, 2022,
	353, 2022,
	354, 2022,
	355, 2022,
	356, 2022,
	357, 2022,
	358, 2022,
	359, 2022,
	360, 2022,
	361, 2022,
	363, 2022,
	364, 2022,
	365, 2022,
	366, 2022,
	367, 2022,
	368, 2022,
	369, 2022,
	370, 2022,
	371, 2022,
	372, 2022,
	373, 2022,
	374, 2022,
	376, 2022,
	377, 2022,
	378, 2022,
	380, 2022,
	381, 2022,
	382, 2022,
	383, 2022,
	384, 2022,
	385, 2022,
	386, 2022,
	388, 2022,
	389, 2022,
	390, 2022,
	391, 2022,
	392, 2022,
	394, 2022,
	396, 2022,
	397, 2022,
	398, 2022,
	399, 2022,
	400, 2022,
	402, 2022,
	403, 2022,
	404, 2022,
	406, 2022,
	407, 2022,
	410, 2022,
	411, 2022,
	412, 2022,
	413, 2022,
	414, 2022,
	415, 2022,
	417, 2022,
	419, 2022,
	420, 2022,
	421, 2022,
	422, 2022,
	423, 2022,
	424, 2022,
	425, 2022,
	427, 2022,
	428, 2022,
	429, 2022,
	434, 2022,
	435, 2022,
	436, 2022,
	437, 2022,
	438, 2022,
	439, 2022,
	440, 2022,
	441, 2022,
	443, 2022,
	444, 2022,
	445, 2022,
	446, 2022,
	447, 2022,
	448, 2022,
	450, 2022,
	451, 2022,
	452, 2022,
	453, 2022,
	454, 2022,
	455, 2022,
	456, 2022,
	457, 2022,
	458, 2022,
	460, 2022,
	463, 2022,
	464, 2022,
	466, 2022,
	467, 2022,
	-2, 0,
	-1, 1329,
	154, 1925,
	393, 1925,
	445, 1925,
	464, 1925,
	-2, 0,
	-1, 1358,
	298, 637,
	349, 637,
	-2, 0,
	-1, 1381,
	1, 632,
	461, 632,
	463, 632,
	465, 632,
	-2, 0,
	-1, 1382,
	1, 657,
	461, 657,
	463, 657,
	465, 657,
	-2, 0,
	-1, 1383,
	1, 639,
	461, 639,
	463, 639,
	465, 639,
	-2, 0,
	-1, 1385,
	1, 643,
	461, 643,
	463, 643,
	465, 643,
	-2, 0,
	-1, 1410,
	1, 1975,
	461, 1975,
	463, 1975,
	464, 1975,
	465, 1975,
	-2, 683,
	-1, 1411,
	1, 1922,
	461, 1922,
	463, 1922,
	464, 1922,
	465, 1922,
	-2, 684,
	-1, 1426,
	1, 958,
	465, 958,
	-2, 963,
	-1, 1431,
	138, 1078,
	226, 1078,
	260, 1078,
	-2, 1029,
	-1, 1529,
	122, 1042,
	138, 1042,
	196, 1042,
	226, 1042,
	260, 1042,
	270, 1042,
	408, 1042,
	-2, 1444,
	-1, 1582,
	463, 1582,
	-2, 0,
	-1, 1624,
	122, 1042,
	138, 1042,
	196, 1042,
	226, 1042,
	260, 1042,
	270, 1042,
	408, 1042,
	-2, 1153,
	-1, 1673,
	462, 1275,
	-2, 1263,
	-1, 1717,
	1, 494,
	465, 494,
	-2, 963,
	-1, 1915,
	1, 634,
	461, 634,
	463, 634,
	465, 634,
	-2, 0,
	-1, 1916,
	1, 659,
	461, 659,
	463, 659,
	465, 659,
	-2, 0,
	-1, 2006,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1324,
	-1, 2007,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1325,
	-1, 2008,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1326,
	-1, 2009,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1327,
	-1, 2010,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1328,
	-1, 2011,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1329,
	-1, 2012,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1330,
	-1, 2013,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1331,
	-1, 2025,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1343,
	-1, 2026,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1344,
	-1, 2027,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1345,
	-1, 2030,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1350,
	-1, 2036,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1354,
	-1, 2038,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1362,
	-1, 2039,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1363,
	-1, 2040,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1364,
	-1, 2041,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1365,
	-1, 2135,
	5, 1232,
	154, 1593,
	462, 1710,
	-2, 1701,
	-1, 2136,
	154, 1594,
	-2, 1979,
	-1, 2137,
	154, 1595,
	-2, 1843,
	-1, 2138,
	154, 1596,
	-2, 1765,
	-1, 2139,
	154, 1597,
	-2, 1801,
	-1, 2140,
	154, 1598,
	-2, 1841,
	-1, 2141,
	154, 1599,
	-2, 1916,
	-1, 2142,
	154, 1600,
	-2, 1427,
	-1, 2218,
	1, 1154,
	2, 1154,
	87, 1154,
	122, 1154,
	138, 1154,
	151, 1154,
	155, 1154,
	161, 1154,
	164, 1154,
	187, 1154,
	196, 1154,
	206, 1154,
	222, 1154,
	226, 1154,
	245, 1154,
	260, 1154,
	264, 1154,
	270, 1154,
	321, 1154,
	323, 1154,
	408, 1154,
	418, 1154,
	431, 1154,
	432, 1154,
	433, 1154,
	442, 1154,
	461, 1154,
	463, 1154,
	465, 1154,
	467, 1154,
	-2, 1153,
	-1, 2223,
	462, 1684,
	-2, 1696,
	-1, 2244,
	462, 1274,
	-2, 1264,
	-1, 2486,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1352,
	-1, 2487,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1356,
	-1, 2493,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1358,
	-1, 2675,
	203, 963,
	295, 963,
	302, 963,
	442, 963,
	-2, 491,
	-1, 2767,
	284, 1066,
	-2, 871,
	-1, 2853,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1360,
	-1, 2860,
	200, 0,
	202, 0,
	252, 0,
	-2, 1379,
	-1, 2923,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1408,
	-1, 2924,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1409,
	-1, 2925,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1410,
	-1, 2929,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1414,
	-1, 2930,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1415,
	-1, 2931,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1416,
	-1, 2975,
	462, 1685,
	-2, 1697,
	-1, 3063,
	464, 2125,
	-2, 1006,
	-1, 3114,
	200, 0,
	202, 0,
	252, 0,
	-2, 1380,
	-1, 3117,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1383,
	-1, 3118,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1385,
	-1, 3279,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1384,
	-1, 3280,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1386,
	-1, 3290,
	200, 0,
	-2, 1417,
	-1, 3399,
	200, 0,
	-2, 1418,
	-1, 3517,
	43, 0,
	173, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1982,
}

const sqlPrivate = 57344

const sqlLast = 76955

var sqlAct = [...]int{

	905, 3320, 3611, 3348, 3516, 3323, 3526, 3220, 3601, 2754,
	2167, 3495, 3486, 3483, 2609, 3470, 3527, 2383, 3528, 3564,
	3355, 3309, 2891, 3096, 3403, 3515, 1021, 2610, 3244, 1993,
	834, 1313, 3268, 1174, 3055, 3360, 3176, 3050, 2692, 214,
	1056, 214, 214, 2210, 214, 214, 214, 214, 214, 2053,
	2776, 214, 1444, 3249, 2783, 2778, 3037, 2995, 2750, 592,
	1765, 571, 2845, 3294, 2996, 2479, 1648, 2416, 2331, 1075,
	1619, 1309, 2349, 1891, 2372, 1013, 2347, 214, 2651, 2637,
	1617, 592, 2418, 825, 2595, 2624, 1167, 3095, 689, 1851,
	1365, 2426, 2407, 2613, 2415, 2384, 2352, 2409, 1848, 1841,
	1591, 1840, 2275, 1527, 1990, 2211, 2104, 3148, 2594, 2332,
	2946, 833, 142, 862, 3404, 1555, 1774, 2615, 4, 2273,
	2514, 1537, 2066, 1986, 2475, 1799, 1186, 1803, 2213, 2425,
	2307, 1063, 1792, 2350, 3349, 2084, 901, 1752, 2656, 1750,
	1426, 2185, 86, 2050, 2752, 2096, 2308, 1176, 1592, 1322,
	2164, 821, 1306, 1649, 1296, 2377, 1837, 2078, 1242, 1052,
	1008, 2419, 593, 2265, 2193, 594, 2131, 2067, 1601, 525,
	1550, 2175, 987, 547, 1443, 1836, 1518, 214, 214, 555,
	1869, 539, 1445, 565, 588, 1320, 1011, 142, 1857, 1272,
	1199, 664, 1005, 1196, 683, 1764, 633, 149, 542, 208,
	861, 1010, 150, 985, 736, 37, 206, 1425, 752, 36,
	34, 1254, 25, 23, 21, 2964, 1449, 2965, 1871, 2510,
	1871, 2793, 1871, 1892, 2611, 205, 3641, 550, 207, 3632,
	2184, 1528, 1060, 2184, 829, 3631, 3610, 3593, 1183, 2184,
	1808, 3190, 3591, 3550, 3548, 3546, 3190, 3551, 2184, 2184,
	3543, 829, 2184, 1060, 3544, 1457, 1458, 2431, 597, 3540,
	2792, 3466, 3537, 3541, 3513, 699, 1808, 2673, 1808, 3512,
	3511, 824, 3385, 1808, 1883, 1488, 1457, 1458, 2950, 3508,
	597, 3507, 1460, 1883, 1883, 1883, 3465, 600, 1457, 1458,
	2237, 3459, 2950, 3458, 830, 2184, 1488, 2184, 32, 877,
	1457, 1458, 1002, 1460, 2176, 988, 988, 3453, 1488, 600,
	1459, 3190, 3452, 3446, 3440, 1460, 3190, 1808, 3190, 1479,
	1488, 3438, 3401, 3208, 3382, 3190, 2237, 1460, 1808, 3379,
	3338, 1459, 3337, 3190, 1808, 3330, 1808, 3329, 3300, 1808,
	809, 3190, 1808, 1459, 3281, 808, 3266, 3257, 2237, 1808,
	1883, 2806, 1479, 816, 75, 1459, 3217, 3207, 3189, 1476,
	2184, 2184, 3190, 3116, 2814, 2322, 3071, 2237, 2567, 2568,
	2822, 2585, 2586, 2587, 3065, 3035, 2970, 1769, 2822, 3036,
	2971, 989, 2264, 1482, 1483, 1484, 1485, 3112, 2960, 1723,
	2953, 2884, 2961, 1465, 2184, 1808, 2872, 2821, 3110, 2813,
	2184, 2822, 2745, 2814, 2608, 2606, 1883, 2605, 2184, 2184,
	2233, 2184, 2806, 2177, 1465, 2529, 1482, 1483, 1484, 1485,
	1032, 2530, 2359, 2559, 1487, 1489, 1465, 2184, 2478, 2542,
	2531, 2184, 2582, 2543, 2184, 2405, 2404, 2250, 1465, 1887,
	1887, 2184, 1037, 2236, 1808, 1487, 1489, 2237, 2513, 2231,
	927, 2225, 2183, 2184, 1870, 1808, 2184, 1487, 1489, 1886,
	1384, 1807, 991, 1887, 992, 2262, 1587, 2081, 1195, 1487,
	1489, 1618, 3022, 2848, 2831, 182, 1802, 2794, 1480, 1367,
	2204, 1872, 2203, 1872, 1019, 1872, 1474, 1475, 2202, 2201,
	2200, 182, 3165, 1217, 1033, 993, 2795, 3533, 990, 1480,
	815, 814, 813, 812, 811, 807, 2573, 1211, 806, 805,
	2455, 1480, 1457, 1458, 804, 184, 2209, 803, 802, 1743,
	801, 800, 799, 1480, 798, 797, 796, 795, 734, 733,
	214, 184, 3127, 2082, 2792, 732, 731, 2567, 2568, 1460,
	730, 729, 728, 727, 726, 725, 724, 723, 722, 721,
	720, 719, 718, 717, 716, 715, 1486, 2588, 214, 183,
	714, 713, 182, 712, 860, 214, 711, 1459, 710, 176,
	709, 708, 698, 697, 1481, 183, 655, 177, 118, 654,
	1033, 214, 1078, 214, 214, 1179, 214, 1078, 214, 1486,
	613, 2583, 612, 611, 603, 1481, 214, 214, 151, 602,
	1062, 2968, 184, 601, 1067, 2083, 2080, 1481, 578, 2380,
	577, 576, 575, 559, 151, 204, 1457, 1458, 203, 1481,
	202, 214, 201, 200, 199, 198, 197, 3253, 196, 1879,
	195, 1870, 194, 1961, 193, 214, 1488, 1179, 1179, 214,
	214, 192, 214, 1460, 2567, 2568, 183, 2585, 2586, 2587,
	1465, 191, 190, 189, 214, 188, 176, 187, 186, 1189,
	1216, 185, 214, 2823, 177, 2654, 1528, 2536, 2525, 2337,
	2226, 1459, 2365, 2217, 1210, 2573, 214, 214, 214, 214,
	214, 1179, 1179, 2122, 1620, 151, 1179, 2584, 1894, 214,
	1179, 214, 214, 1748, 1470, 1468, 1469, 1461, 1462, 1463,
	1464, 1466, 1467, 2085, 2120, 214, 1456, 1050, 2582, 1634,
	2327, 2567, 2568, 1317, 1544, 1470, 1468, 1469, 1461, 1462,
	1463, 1464, 1466, 1467, 1477, 1473, 2176, 1470, 1468, 1469,
	1461, 1462, 1463, 1464, 1466, 1467, 2118, 2116, 1201, 2114,
	1069, 1179, 1461, 1462, 1463, 1464, 1466, 1467, 1045, 1023,
	3514, 1558, 1845, 1558, 1465, 1033, 1893, 1557, 1198, 1557,
	2583, 1197, 1205, 214, 1539, 3020, 3434, 1073, 3394, 3388,
	3258, 3386, 3169, 1071, 1191, 1164, 1169, 214, 1561, 3319,
	1556, 1539, 2573, 3147, 3146, 1487, 1489, 3134, 3133, 3132,
	1170, 3131, 214, 1339, 1193, 597, 3125, 182, 142, 142,
	2579, 2580, 2581, 2079, 832, 1325, 1327, 2578, 2576, 2577,
	2569, 2570, 2571, 2572, 2574, 2575, 3124, 904, 3123, 3034,
	2817, 2984, 2983, 2981, 600, 3252, 1001, 2242, 830, 182,
	182, 1300, 1303, 1323, 2567, 2568, 2974, 184, 2943, 1480,
	1275, 2942, 2941, 182, 182, 1255, 1255, 2868, 1394, 2573,
	2864, 1256, 2366, 2567, 2568, 2649, 2584, 2602, 2593, 2566,
	2563, 2562, 1299, 1299, 1299, 1191, 2560, 2583, 2549, 184,
	184, 2548, 2567, 2568, 2547, 2544, 2541, 1332, 1333, 2519,
	1259, 183, 2518, 184, 184, 1193, 2511, 2406, 1386, 2218,
	2089, 176, 1432, 1456, 1526, 1813, 1540, 1455, 1538, 177,
	3639, 3609, 1811, 3608, 3549, 1204, 1022, 1209, 2893, 1215,
	3503, 3501, 3431, 183, 183, 2062, 3428, 3425, 1310, 3424,
	151, 3423, 3419, 176, 176, 3413, 3383, 183, 183, 1431,
	3378, 177, 177, 3377, 2583, 1481, 2582, 176, 176, 2056,
	3315, 3292, 1344, 3276, 3275, 177, 177, 2294, 3263, 1406,
	3262, 1359, 151, 151, 1461, 1462, 1463, 1464, 1466, 1467,
	1430, 3242, 3239, 2584, 1744, 2309, 2379, 151, 3233, 1424,
	3164, 1429, 2573, 2474, 3145, 3085, 1442, 2576, 2577, 2569,
	2570, 2571, 2572, 2574, 2575, 3082, 3011, 214, 2667, 3010,
	1427, 2573, 2999, 2998, 1335, 2956, 2859, 2824, 2807, 2770,
	2739, 1338, 1016, 2717, 2695, 2694, 2669, 2607, 2540, 2539,
	2573, 1598, 830, 214, 2364, 1589, 2524, 2502, 2346, 1457,
	1458, 1562, 1433, 214, 1078, 214, 214, 214, 1559, 1551,
	2584, 809, 592, 214, 214, 1548, 808, 592, 214, 1643,
	2246, 2245, 2221, 214, 1452, 1453, 1460, 1560, 2198, 1179,
	2182, 2112, 1522, 1385, 1633, 1715, 1468, 1469, 1461, 1462,
	1463, 1464, 1466, 1467, 1895, 1590, 182, 212, 1586, 1585,
	1078, 1584, 1583, 1582, 1459, 1581, 2579, 2580, 2581, 1580,
	1579, 1628, 1720, 2578, 2576, 2577, 2569, 2570, 2571, 2572,
	2574, 2575, 1552, 1553, 1746, 2583, 1595, 1596, 1076, 182,
	2695, 1578, 1576, 1187, 1714, 1575, 184, 1574, 1608, 1573,
	1572, 1571, 1570, 1569, 1568, 988, 142, 1567, 1566, 1565,
	3406, 2630, 1564, 1541, 1523, 1521, 1516, 1627, 1044, 1035,
	1028, 3238, 3166, 3120, 2980, 2963, 2959, 2528, 2199, 184,
	3304, 182, 2239, 3168, 2121, 1769, 2979, 1540, 2665, 1654,
	183, 1519, 830, 2569, 2570, 2571, 2572, 2574, 2575, 1629,
	176, 2720, 3210, 1640, 1743, 2119, 2567, 2568, 177, 3426,
	1625, 1064, 1734, 1733, 1066, 1739, 1743, 1740, 2779, 1846,
	1743, 184, 1358, 183, 3256, 3209, 2966, 2809, 1717, 151,
	1588, 2584, 2808, 176, 1743, 1179, 214, 2117, 2115, 1630,
	2113, 177, 1078, 3361, 1060, 3389, 1758, 3387, 1742, 1622,
	1616, 1620, 1639, 1636, 1615, 1614, 1644, 1612, 1611, 1610,
	848, 1711, 151, 1645, 1422, 183, 1065, 2546, 1712, 1457,
	1458, 597, 1646, 1571, 2545, 176, 597, 2311, 838, 3318,
	1571, 214, 214, 177, 1789, 2484, 1718, 1791, 214, 1051,
	1796, 1060, 3045, 1558, 2567, 2568, 1460, 3009, 214, 1557,
	600, 1060, 1735, 1638, 151, 600, 2081, 214, 2296, 214,
	1061, 214, 1729, 1737, 1395, 214, 2569, 2570, 2571, 2572,
	2574, 2575, 793, 1546, 1459, 1057, 1000, 214, 2756, 1892,
	2755, 3356, 1366, 1367, 3295, 2567, 2568, 2571, 2572, 2574,
	2575, 1773, 1842, 1613, 3026, 3013, 2829, 1019, 903, 1019,
	2733, 2578, 2576, 2577, 2569, 2570, 2571, 2572, 2574, 2575,
	1787, 794, 3612, 2611, 1800, 2895, 1641, 1179, 1829, 1179,
	214, 1179, 2082, 2534, 214, 2097, 3534, 1179, 2244, 1577,
	1179, 214, 1554, 214, 214, 2748, 774, 1833, 1232, 3545,
	3542, 1525, 2788, 1179, 1179, 1179, 1863, 214, 1198, 1854,
	2991, 1197, 214, 3480, 3051, 1676, 1348, 1465, 2413, 2376,
	3445, 592, 214, 3579, 214, 650, 214, 1058, 214, 3580,
	214, 2471, 3200, 1220, 1059, 1795, 2677, 2251, 789, 1806,
	787, 1230, 2573, 3535, 214, 597, 1738, 214, 785, 214,
	1766, 1441, 2277, 1861, 2083, 2080, 783, 3636, 214, 780,
	1066, 1821, 645, 1947, 1392, 3347, 1945, 844, 1911, 3340,
	3028, 1823, 1897, 3024, 600, 1822, 1393, 1827, 2268, 214,
	1762, 828, 1316, 2573, 1839, 214, 3023, 1439, 214, 2988,
	2266, 2666, 2987, 1066, 1730, 2523, 2522, 1057, 1832, 2268,
	1057, 1767, 1768, 1275, 651, 1858, 1856, 1858, 2521, 1859,
	1078, 2266, 1065, 1231, 1899, 2520, 1467, 2488, 2719, 830,
	2329, 830, 2321, 2318, 1323, 2679, 1323, 2583, 579, 1763,
	2299, 1874, 2232, 644, 1876, 2150, 1675, 1878, 2037, 1428,
	1194, 1881, 2280, 1015, 2108, 1065, 1965, 2373, 1974, 1391,
	2107, 1995, 2085, 2830, 1265, 827, 1264, 1263, 1959, 1262,
	1284, 1906, 1888, 1045, 1889, 1346, 1901, 2258, 2583, 1026,
	2052, 777, 1629, 1243, 1060, 2224, 3325, 1839, 3274, 2298,
	1904, 1955, 3444, 2068, 2069, 1958, 1226, 2287, 1968, 1058,
	1637, 2052, 1058, 1769, 1440, 1078, 1059, 1971, 1918, 1059,
	1024, 2068, 2094, 1914, 3505, 1927, 1435, 1360, 1928, 1241,
	1930, 3001, 1932, 1341, 1934, 1920, 1935, 2230, 2240, 2833,
	597, 1654, 1654, 2584, 3196, 585, 1405, 2286, 859, 829,
	1860, 1902, 2832, 1963, 2452, 706, 1749, 2130, 214, 2134,
	2134, 2148, 1969, 2068, 1952, 1972, 2168, 2170, 1240, 600,
	1651, 2174, 2079, 1438, 1960, 2315, 1915, 1964, 1962, 1744,
	2309, 1991, 1992, 2575, 2584, 3211, 1381, 1357, 1957, 1078,
	214, 1744, 1741, 3616, 1299, 1744, 2309, 1973, 3569, 214,
	2458, 2085, 214, 2279, 3596, 1078, 643, 848, 642, 1744,
	2309, 848, 3604, 1967, 2222, 3101, 2097, 809, 1921, 1162,
	809, 809, 1982, 2060, 1162, 1983, 1984, 1916, 587, 2058,
	1342, 1421, 2093, 2106, 830, 1600, 646, 1382, 2110, 2111,
	2476, 2477, 2219, 1463, 1464, 1466, 1467, 830, 828, 653,
	652, 830, 1390, 3579, 1043, 3531, 1060, 2206, 2205, 1060,
	2878, 3100, 2215, 2216, 2064, 2577, 2569, 2570, 2571, 2572,
	2574, 2575, 1228, 2785, 2786, 1367, 3597, 823, 2091, 3420,
	769, 2730, 2725, 2461, 214, 1786, 988, 826, 1809, 3194,
	2190, 2676, 1179, 1367, 1243, 3273, 2297, 1345, 1954, 769,
	1771, 2678, 820, 1604, 2578, 2576, 2577, 2569, 2570, 2571,
	2572, 2574, 2575, 2189, 1627, 682, 2143, 1760, 2278, 1078,
	2159, 820, 827, 3012, 214, 1720, 2707, 3270, 581, 142,
	2172, 2785, 214, 1017, 1760, 1607, 2234, 2180, 2181, 830,
	2195, 2196, 2191, 214, 2267, 1769, 586, 1402, 1798, 791,
	3626, 3229, 1347, 790, 1602, 781, 214, 1625, 2085, 1179,
	1871, 1283, 3599, 781, 1549, 2742, 3002, 2663, 1797, 2706,
	1605, 782, 214, 1078, 781, 770, 1179, 1946, 214, 214,
	1944, 3532, 2241, 2460, 3326, 1956, 583, 1225, 2220, 1560,
	3568, 2269, 3025, 1603, 770, 1016, 829, 1016, 1793, 3187,
	1025, 2457, 2361, 3602, 214, 1760, 214, 2334, 2088, 214,
	3097, 3195, 2626, 2319, 2333, 1919, 2249, 3463, 3286, 1767,
	1768, 537, 3586, 3491, 214, 580, 3430, 3184, 2490, 3269,
	1753, 214, 707, 214, 1754, 214, 1515, 1552, 1553, 1403,
	2034, 214, 2316, 2330, 214, 532, 214, 1794, 214, 2051,
	214, 214, 2252, 214, 1179, 1179, 1179, 3530, 1179, 1654,
	2301, 2538, 584, 214, 214, 2248, 214, 214, 778, 3185,
	2194, 1606, 1019, 582, 1913, 3603, 1434, 214, 1675, 1675,
	2459, 2310, 2312, 2313, 2314, 2272, 2400, 2401, 2281, 2283,
	214, 214, 214, 1775, 3617, 214, 1019, 214, 2214, 2302,
	214, 829, 214, 3598, 214, 2254, 3237, 3605, 3230, 2430,
	1343, 1404, 1779, 2333, 818, 2333, 769, 2256, 3091, 1369,
	771, 2396, 2370, 1755, 2289, 214, 214, 214, 214, 214,
	214, 3567, 214, 3271, 826, 2300, 1757, 1356, 820, 771,
	1198, 2976, 2429, 2335, 2432, 2433, 1994, 2875, 2317, 2257,
	2387, 2344, 2412, 1038, 3461, 1776, 3102, 1604, 1191, 2059,
	214, 2389, 1170, 2443, 2255, 2360, 2625, 3529, 142, 3578,
	2032, 3576, 3366, 2035, 3241, 2402, 819, 597, 1193, 2440,
	1790, 2774, 2434, 3462, 2435, 2382, 2427, 1172, 2368, 1607,
	2354, 1759, 1651, 1651, 1835, 1839, 2356, 2463, 2393, 2465,
	2394, 2709, 2395, 2397, 1042, 1323, 600, 2403, 2192, 2456,
	2414, 770, 1597, 3627, 3180, 1036, 1031, 524, 3181, 2876,
	3039, 1448, 2031, 1872, 1605, 2711, 772, 2392, 3098, 1770,
	1299, 2098, 1299, 2293, 1299, 1780, 1191, 1191, 3143, 1248,
	1251, 1731, 1447, 1437, 2932, 772, 1753, 2846, 2657, 1515,
	1754, 3410, 3621, 2516, 2517, 2491, 1193, 1193, 3183, 214,
	3332, 1162, 3331, 2436, 2326, 773, 3313, 2990, 2526, 1978,
	3186, 2775, 3199, 2690, 2710, 2686, 2441, 2369, 2444, 3198,
	2351, 2339, 2348, 2341, 773, 2445, 2469, 2446, 1728, 1760,
	1855, 2398, 1331, 1844, 2473, 1843, 1781, 1782, 1193, 1817,
	2874, 848, 2303, 3471, 2470, 1777, 1600, 1162, 533, 3432,
	1447, 2462, 1191, 2464, 1191, 2639, 2467, 2085, 1951, 1724,
	2713, 2223, 3245, 2512, 2468, 1606, 2378, 2186, 2378, 2442,
	1446, 3056, 1193, 2345, 1193, 3104, 1778, 1286, 2447, 1755,
	2448, 3354, 2449, 1351, 3352, 3314, 2483, 2604, 2489, 1078,
	2697, 2696, 1757, 2033, 2482, 1726, 771, 1970, 1907, 2958,
	534, 703, 2623, 2620, 1448, 2618, 2619, 2466, 214, 830,
	1979, 1727, 2622, 3182, 1604, 696, 214, 2229, 1383, 2228,
	2227, 1370, 2933, 214, 3144, 604, 214, 214, 1078, 2640,
	2934, 1257, 2358, 1271, 2188, 827, 1675, 1078, 1446, 2187,
	535, 3620, 536, 214, 1269, 3105, 1607, 1759, 1258, 2450,
	2644, 2533, 3415, 705, 3221, 2818, 1853, 3321, 214, 2634,
	2744, 3583, 3350, 1783, 3197, 1602, 3149, 2947, 1756, 2645,
	2646, 2638, 3474, 3311, 2102, 2263, 214, 214, 214, 1162,
	2633, 1605, 214, 2304, 2305, 214, 3416, 3585, 3547, 2527,
	2674, 2642, 214, 214, 214, 214, 214, 1531, 3433, 2648,
	817, 1536, 772, 2680, 1603, 3312, 3427, 2652, 214, 214,
	214, 1419, 2632, 2629, 3291, 2499, 2653, 214, 2597, 3142,
	2628, 2635, 2599, 2600, 2601, 3030, 1015, 1784, 1015, 214,
	1179, 2699, 214, 2703, 2704, 2612, 3322, 2658, 3475, 2497,
	1078, 773, 2596, 2627, 2858, 1760, 1417, 1399, 1078, 2687,
	1651, 2643, 3417, 214, 1397, 1380, 214, 214, 1378, 2048,
	1376, 1654, 2670, 2671, 2827, 1374, 214, 2641, 2561, 1179,
	214, 1372, 1179, 1179, 1179, 2501, 2682, 2659, 2660, 214,
	2722, 2355, 1606, 2046, 2328, 214, 1364, 1362, 2295, 2759,
	214, 2247, 214, 1635, 1267, 2683, 2684, 1654, 1632, 214,
	2781, 2664, 2675, 701, 702, 1943, 2724, 1420, 2740, 1758,
	1336, 2698, 2681, 2701, 2841, 2731, 2840, 694, 695, 823,
	2454, 2453, 2437, 1179, 1179, 1953, 1924, 605, 606, 1270,
	1016, 214, 214, 2661, 1758, 214, 1713, 2691, 2718, 2712,
	1268, 2763, 1179, 1563, 1340, 2494, 1247, 2790, 2672, 704,
	2101, 3525, 2727, 2726, 1016, 3216, 2728, 2495, 2735, 3206,
	2729, 2500, 3468, 1418, 2685, 3173, 214, 1800, 1078, 214,
	214, 1078, 214, 2741, 3054, 1800, 2753, 2301, 779, 3007,
	2782, 3005, 1642, 2989, 1756, 2773, 2758, 1019, 2757, 2042,
	2805, 2374, 2363, 214, 2721, 2723, 2354, 2043, 1416, 1398,
	2362, 2044, 1019, 2342, 1885, 2049, 1396, 1379, 2777, 2427,
	1377, 1884, 1375, 1882, 2825, 1193, 935, 1373, 2427, 2787,
	2789, 608, 607, 1371, 2820, 1880, 142, 142, 2796, 1877,
	2816, 1019, 830, 2803, 2804, 1832, 1078, 1162, 1363, 1361,
	2838, 1753, 1875, 2839, 1873, 1754, 1266, 1078, 1864, 214,
	1814, 1812, 2761, 1801, 1942, 210, 2765, 527, 528, 1788,
	543, 527, 543, 553, 558, 2772, 1785, 574, 1772, 2826,
	2734, 609, 610, 1761, 3565, 210, 2886, 3371, 2480, 2861,
	3580, 3497, 3265, 3260, 2798, 2799, 2800, 1450, 2801, 2802,
	997, 3259, 2428, 693, 2835, 1747, 1017, 210, 1017, 2714,
	2715, 784, 786, 2716, 2496, 1222, 2268, 2842, 2268, 2870,
	2871, 3373, 2844, 2498, 998, 2268, 1641, 2815, 2266, 2285,
	2284, 1769, 1162, 2780, 2944, 3064, 1654, 2282, 1414, 1415,
	1917, 1941, 2736, 2737, 1755, 1922, 2738, 1804, 1940, 3422,
	1457, 1458, 3396, 2866, 214, 3150, 2306, 1757, 2045, 2288,
	1454, 1721, 2481, 538, 1457, 1458, 2837, 2047, 1191, 214,
	2897, 2323, 2885, 2892, 2333, 1078, 2901, 2877, 2879, 2880,
	2898, 2896, 2290, 1451, 2899, 1654, 1654, 3467, 1193, 2847,
	2967, 1460, 2911, 2909, 214, 3435, 1019, 2962, 3043, 2936,
	3038, 1654, 1654, 527, 527, 1459, 1162, 1981, 1675, 549,
	999, 210, 1759, 2973, 2381, 2617, 2325, 2836, 2292, 1459,
	2173, 1716, 1162, 1647, 2937, 1991, 2902, 3600, 2324, 2662,
	2291, 3619, 1654, 2567, 2568, 1457, 1458, 2260, 2259, 142,
	214, 1991, 2912, 2949, 1675, 3437, 2945, 1350, 3014, 2951,
	2952, 1528, 2105, 1349, 2647, 2978, 2881, 2260, 2668, 2261,
	2954, 2955, 2109, 2655, 2103, 2076, 1401, 3121, 2977, 1400,
	3027, 2873, 2940, 1526, 2969, 1524, 3628, 214, 214, 214,
	3407, 3344, 3305, 1890, 3303, 3232, 3167, 3088, 3081, 1804,
	3070, 3049, 1900, 3033, 1078, 214, 2982, 3032, 3031, 1179,
	3004, 3018, 3019, 3021, 2797, 1908, 1909, 1910, 2771, 2769,
	1760, 2439, 2438, 214, 2391, 2993, 2367, 2343, 2063, 1939,
	1938, 3046, 1651, 1937, 1936, 1867, 3066, 214, 214, 1179,
	1179, 1179, 3058, 214, 214, 214, 1162, 3029, 214, 214,
	2151, 1751, 214, 214, 1866, 1179, 1865, 1847, 1825, 1824,
	1820, 214, 1078, 3057, 1819, 1818, 1816, 1815, 1651, 3061,
	1413, 1412, 3052, 1295, 1294, 3042, 2301, 1293, 1292, 1078,
	1291, 1290, 1289, 1288, 2655, 1287, 3089, 1285, 1280, 1279,
	1278, 1277, 1276, 1239, 2985, 3060, 3047, 1654, 1238, 3048,
	1162, 1237, 1236, 1235, 1234, 1233, 3119, 1227, 1221, 1219,
	3059, 1218, 3006, 1041, 3008, 3077, 3062, 3068, 3067, 1040,
	972, 882, 1722, 792, 214, 637, 776, 3324, 1407, 73,
	3073, 3078, 3079, 1229, 3072, 624, 67, 2691, 3084, 3080,
	3086, 1015, 2387, 3106, 3087, 3003, 3083, 3107, 3479, 2705,
	1923, 1368, 1019, 1019, 1925, 3094, 3115, 3099, 2631, 1756,
	2197, 3460, 3128, 2061, 2537, 1015, 3402, 3285, 2100, 1545,
	69, 870, 2427, 955, 3041, 3228, 3227, 3174, 2992, 2417,
	3225, 3224, 1531, 1675, 837, 1081, 1732, 214, 876, 1745,
	2243, 3053, 2133, 1655, 879, 1832, 1652, 1078, 881, 1078,
	880, 1653, 1547, 1654, 1187, 878, 1650, 1076, 2357, 2385,
	1274, 756, 1736, 2057, 2095, 2532, 1542, 850, 214, 214,
	214, 872, 2092, 1034, 3141, 1016, 849, 2636, 2784, 2155,
	214, 2972, 1675, 1675, 3251, 1977, 214, 2472, 214, 640,
	1016, 214, 214, 214, 2564, 2077, 1027, 3092, 1675, 1675,
	2156, 2149, 2145, 1078, 214, 214, 1179, 2375, 1423, 1078,
	1517, 1179, 2386, 1068, 853, 3160, 1029, 214, 2055, 1016,
	3157, 3154, 2883, 1533, 3159, 2506, 3202, 2652, 1436, 1675,
	3163, 2791, 214, 2889, 2650, 1078, 3192, 3172, 1179, 3152,
	3153, 2238, 3219, 3191, 1039, 3158, 3494, 1651, 3151, 1985,
	1834, 574, 996, 995, 994, 3485, 3156, 3482, 2751, 1725,
	2253, 1509, 2760, 866, 1192, 2616, 214, 210, 2819, 210,
	210, 3247, 1184, 1019, 210, 1244, 3421, 3218, 1078, 1508,
	788, 3412, 210, 1200, 1055, 1054, 1053, 3170, 3171, 2689,
	3625, 3214, 3246, 3250, 3000, 3235, 1651, 1651, 3234, 3223,
	3213, 181, 1966, 3243, 822, 3201, 3090, 1224, 1078, 178,
	180, 179, 1651, 1651, 3248, 3016, 2743, 90, 35, 16,
	3261, 1246, 117, 116, 115, 210, 210, 3155, 1184, 114,
	3255, 113, 112, 111, 110, 109, 3222, 108, 107, 106,
	210, 3297, 105, 1651, 104, 103, 1078, 3272, 1282, 102,
	101, 2975, 1599, 3277, 214, 100, 214, 99, 1078, 214,
	98, 1017, 210, 210, 210, 210, 1184, 214, 97, 96,
	3193, 95, 94, 93, 1016, 574, 92, 210, 210, 3205,
	91, 3203, 3204, 570, 1675, 1017, 3282, 3308, 567, 214,
	2354, 693, 3293, 49, 3307, 48, 3298, 3299, 89, 88,
	15, 2320, 33, 13, 53, 54, 12, 1898, 3301, 28,
	214, 1832, 29, 79, 214, 78, 27, 14, 26, 24,
	3343, 3306, 214, 10, 3358, 8, 1162, 1179, 7, 30,
	1019, 3353, 1609, 214, 3328, 3327, 11, 147, 1019, 1654,
	146, 72, 145, 71, 144, 3302, 143, 70, 22, 210,
	3341, 1019, 9, 3345, 214, 214, 3264, 139, 3362, 3351,
	3368, 3359, 3044, 210, 66, 1162, 3392, 3393, 141, 2151,
	2151, 140, 3357, 63, 1162, 138, 214, 3363, 558, 3369,
	3365, 3367, 214, 137, 3370, 64, 3375, 136, 3250, 3374,
	1675, 135, 214, 65, 1654, 134, 2399, 848, 1651, 20,
	3380, 3381, 5, 52, 6, 836, 3267, 2828, 83, 84,
	848, 3418, 3376, 3409, 31, 61, 60, 3231, 59, 19,
	3384, 51, 3236, 18, 3408, 3405, 3391, 171, 170, 169,
	168, 163, 162, 2753, 3334, 167, 165, 164, 3429, 3400,
	166, 161, 133, 173, 3254, 172, 175, 214, 1179, 3395,
	159, 155, 154, 3317, 214, 158, 160, 157, 1179, 1179,
	156, 153, 3335, 3336, 1179, 3451, 174, 132, 214, 131,
	214, 2151, 2151, 2151, 56, 3436, 130, 1162, 129, 128,
	3362, 3442, 3439, 127, 3443, 1162, 1654, 3464, 126, 3449,
	3450, 55, 3447, 17, 214, 3454, 2, 1, 3455, 0,
	214, 214, 3476, 1078, 1651, 0, 0, 0, 3364, 3448,
	0, 214, 214, 0, 0, 0, 3488, 0, 0, 3492,
	1016, 1016, 3498, 3372, 3500, 0, 3502, 3484, 3487, 0,
	0, 0, 3481, 0, 0, 0, 0, 3489, 3510, 3509,
	3390, 1191, 0, 0, 0, 0, 0, 214, 2155, 2155,
	0, 0, 3504, 0, 3506, 0, 0, 0, 3536, 0,
	0, 1193, 0, 0, 0, 3162, 1015, 0, 3521, 3522,
	3524, 3523, 0, 527, 0, 0, 0, 0, 0, 0,
	0, 1015, 3552, 0, 0, 3538, 214, 0, 3554, 0,
	3556, 0, 0, 3561, 210, 0, 210, 0, 3562, 210,
	3553, 0, 3566, 3558, 0, 1162, 214, 0, 1162, 1200,
	1015, 1184, 210, 0, 0, 0, 2503, 2504, 210, 1200,
	543, 3572, 3573, 210, 1200, 3577, 3575, 3574, 0, 574,
	214, 3496, 214, 3441, 3581, 3582, 0, 3584, 3590, 3555,
	3592, 3557, 3589, 3588, 0, 3484, 3595, 0, 3487, 0,
	2155, 2155, 2155, 3594, 0, 0, 0, 0, 3456, 0,
	3457, 3559, 3560, 0, 0, 3563, 0, 0, 3607, 3606,
	0, 0, 0, 1162, 0, 3614, 1675, 3613, 0, 3615,
	0, 0, 0, 0, 1162, 3618, 0, 3478, 0, 3622,
	3477, 1016, 0, 0, 1076, 0, 0, 3493, 0, 3623,
	3624, 3629, 0, 3630, 0, 2387, 0, 0, 0, 0,
	0, 0, 0, 3633, 3634, 3635, 3637, 3638, 2590, 2591,
	2592, 0, 0, 0, 3283, 3642, 0, 3187, 0, 0,
	3640, 1675, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3496, 0, 0, 0, 3184, 0, 0, 3177, 0,
	0, 0, 3283, 0, 0, 1015, 0, 0, 0, 0,
	0, 0, 3175, 0, 1994, 0, 0, 0, 3179, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	1651, 0, 0, 0, 0, 0, 0, 3185, 0, 0,
	0, 0, 1162, 0, 0, 0, 0, 0, 2151, 2151,
	0, 0, 0, 0, 3499, 0, 0, 0, 0, 0,
	3587, 0, 836, 1675, 0, 0, 836, 210, 210, 3178,
	0, 0, 2732, 0, 210, 0, 1017, 0, 0, 0,
	0, 0, 0, 0, 1852, 1651, 0, 0, 1016, 0,
	0, 1017, 0, 210, 0, 210, 1016, 210, 1202, 0,
	1206, 527, 1212, 0, 0, 0, 0, 0, 0, 1016,
	0, 2764, 0, 1868, 2766, 2767, 2768, 0, 0, 0,
	1017, 0, 0, 0, 0, 0, 0, 0, 2151, 2151,
	2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
	2151, 2151, 2151, 2151, 2151, 2151, 2151, 0, 2151, 0,
	0, 0, 0, 0, 0, 0, 574, 0, 0, 0,
	693, 1162, 0, 0, 0, 2811, 2812, 210, 0, 1184,
	210, 0, 0, 0, 0, 0, 0, 1651, 0, 0,
	0, 0, 3180, 574, 1804, 0, 3181, 1334, 210, 0,
	0, 0, 0, 0, 1337, 0, 0, 210, 210, 0,
	210, 0, 210, 0, 210, 0, 210, 0, 0, 0,
	2567, 2568, 0, 2585, 2586, 2587, 0, 0, 0, 1162,
	1948, 0, 0, 1949, 0, 1950, 3183, 2155, 2155, 3111,
	0, 0, 0, 0, 210, 0, 1162, 0, 3186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1387, 0,
	0, 1015, 1015, 0, 0, 558, 0, 0, 0, 1994,
	0, 574, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2582, 1017, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2854, 2855, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2155, 2155, 2155,
	2155, 2155, 2155, 2155, 2155, 2155, 2155, 2155, 2155, 2155,
	2155, 2155, 2155, 2155, 2155, 2155, 0, 2155, 0, 0,
	0, 0, 1510, 1511, 1512, 1513, 1514, 0, 0, 0,
	0, 3182, 0, 0, 0, 0, 0, 0, 2573, 0,
	0, 0, 0, 0, 1162, 0, 1162, 0, 0, 0,
	0, 0, 1530, 0, 0, 0, 0, 0, 1543, 0,
	0, 0, 0, 0, 0, 2913, 2914, 2915, 2916, 2917,
	2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927,
	2928, 2929, 2930, 2931, 0, 2935, 0, 1457, 1458, 2588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1162, 0, 0, 0, 527, 0, 1162, 1488, 0, 0,
	0, 0, 1015, 0, 1460, 0, 0, 0, 0, 210,
	0, 0, 0, 2583, 0, 0, 0, 0, 0, 0,
	0, 0, 1162, 0, 2567, 2568, 527, 2585, 2586, 2587,
	0, 0, 1459, 210, 0, 527, 1457, 1458, 210, 0,
	0, 1479, 0, 2863, 0, 0, 0, 0, 1476, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 1460, 0, 1162, 0, 1593, 1593, 1593,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2857, 2582, 0,
	0, 1459, 0, 0, 0, 1162, 0, 0, 0, 0,
	0, 1017, 1017, 0, 0, 1482, 1483, 1484, 1485, 2584,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1162, 0, 0, 836, 0, 0, 0,
	0, 3074, 3075, 3076, 0, 1162, 1487, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1015,
	2276, 0, 2573, 0, 0, 0, 0, 1015, 210, 0,
	0, 0, 0, 0, 1465, 1474, 1475, 848, 0, 210,
	1015, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	1480, 0, 0, 0, 0, 1487, 1489, 0, 210, 0,
	0, 0, 0, 2588, 210, 2336, 0, 0, 0, 0,
	0, 0, 2579, 2580, 2581, 0, 0, 0, 0, 2578,
	2576, 2577, 2569, 2570, 2571, 2572, 2574, 2575, 0, 0,
	210, 0, 1200, 0, 0, 210, 0, 2583, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	1852, 0, 0, 0, 0, 0, 0, 2276, 0, 527,
	0, 2390, 1017, 0, 0, 0, 0, 210, 1486, 0,
	210, 2151, 210, 0, 210, 0, 210, 210, 0, 1184,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 2410,
	693, 0, 2276, 2276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2151, 0, 210, 1184, 210, 0,
	0, 1200, 0, 1200, 0, 0, 1184, 0, 1184, 0,
	1184, 0, 0, 2584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 3215, 0,
	0, 210, 210, 210, 210, 1184, 210, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1162, 0, 0, 0, 848, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1477, 1473, 0, 1470, 1468, 1469, 1461,
	1462, 1463, 1464, 1466, 1467, 0, 0, 0, 0, 1017,
	2151, 0, 0, 0, 0, 0, 0, 1017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1017, 0, 0, 0, 0, 0, 2579, 2580, 2581, 0,
	2155, 0, 0, 2578, 2576, 2577, 2569, 2570, 2571, 2572,
	2574, 2575, 0, 0, 0, 0, 0, 1469, 1461, 1462,
	1463, 1464, 1466, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1200, 0, 0, 0, 0,
	0, 0, 0, 2155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1976,
	0, 1980, 0, 0, 0, 0, 0, 1987, 3290, 0,
	0, 0, 0, 0, 1996, 1997, 1998, 1999, 2000, 2001,
	2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
	2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
	2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 0,
	2036, 3316, 2038, 2039, 2040, 2041, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 2065, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 527, 0, 0, 1530, 0, 2155,
	0, 2090, 527, 0, 0, 0, 0, 0, 0, 527,
	0, 0, 527, 527, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1200,
	0, 0, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 0,
	0, 0, 0, 2147, 1200, 2158, 2160, 2165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 0, 2276, 2276, 210, 0, 0, 3399, 2276, 0,
	0, 2693, 58, 0, 0, 0, 0, 0, 2276, 2693,
	2276, 2693, 2693, 0, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 210, 210, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 68, 1184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2747,
	0, 0, 2749, 2276, 0, 0, 0, 74, 0, 0,
	0, 0, 210, 0, 0, 0, 210, 85, 0, 0,
	0, 0, 75, 82, 0, 210, 0, 0, 0, 0,
	0, 1184, 0, 210, 0, 0, 2276, 0, 527, 0,
	0, 0, 0, 0, 0, 2276, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 1852, 0,
	0, 1852, 0, 0, 0, 0, 0, 1457, 1458, 0,
	1490, 1491, 1492, 1500, 1501, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 1488, 0, 0,
	0, 0, 2834, 0, 1460, 1184, 210, 0, 210, 1506,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2338, 0, 2340, 0, 0, 210,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 2235, 1476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2894, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 80,
	0, 81, 0, 0, 0, 1482, 1483, 1484, 1485, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 688, 0, 0, 0, 118, 0, 0, 1497,
	0, 0, 1507, 0, 0, 0, 1487, 1489, 0, 0,
	0, 0, 0, 0, 2451, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 0, 0, 1503, 0, 1504, 210,
	210, 0, 0, 0, 0, 1474, 1475, 0, 57, 0,
	527, 0, 0, 119, 0, 0, 0, 0, 0, 0,
	0, 1495, 58, 0, 0, 527, 152, 0, 0, 0,
	1480, 0, 0, 0, 183, 0, 62, 2567, 2568, 0,
	2585, 2586, 2587, 0, 176, 0, 0, 0, 1505, 0,
	1200, 0, 177, 0, 0, 0, 2862, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 0, 68, 0, 0,
	0, 0, 0, 151, 2486, 2487, 0, 936, 0, 0,
	2493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 74, 0, 2507,
	2508, 2582, 0, 0, 0, 2090, 0, 85, 1486, 0,
	0, 0, 75, 82, 2515, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 3040, 210, 210, 211, 0, 0, 0,
	2535, 0, 0, 0, 0, 0, 0, 1457, 1458, 0,
	0, 210, 1498, 0, 0, 2550, 76, 0, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 2276,
	210, 0, 0, 0, 1460, 2573, 0, 0, 0, 0,
	0, 0, 0, 2410, 2410, 0, 0, 0, 0, 693,
	693, 2276, 0, 0, 1852, 1852, 0, 0, 693, 2276,
	0, 0, 1459, 0, 2165, 2165, 2165, 210, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 1476, 1593,
	0, 0, 0, 0, 0, 0, 2588, 2621, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 1471,
	1472, 1478, 1499, 1477, 1473, 0, 1470, 1468, 1469, 1461,
	1462, 1463, 1464, 1466, 1467, 0, 0, 2852, 0, 3137,
	2583, 0, 0, 3136, 0, 0, 77, 0, 0, 0,
	3129, 0, 0, 0, 0, 1482, 1483, 1484, 1485, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	902, 0, 836, 0, 0, 0, 0, 0, 148, 80,
	0, 81, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1487, 1489, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 210, 0, 209,
	2708, 0, 688, 1200, 0, 210, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 1474, 1475, 0, 210, 598,
	0, 0, 0, 0, 0, 0, 2584, 0, 0, 0,
	184, 0, 0, 0, 2276, 2276, 2276, 0, 0, 0,
	1480, 598, 0, 0, 0, 0, 1200, 0, 0, 0,
	0, 0, 2276, 119, 2693, 0, 0, 1200, 1200, 210,
	0, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	210, 210, 0, 0, 183, 215, 0, 0, 0, 0,
	0, 0, 0, 2276, 176, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 0, 3240, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1200, 0, 591, 0, 1481, 0, 0, 2579,
	2580, 2581, 0, 0, 0, 1018, 2578, 2576, 2577, 2569,
	2570, 2571, 2572, 2574, 2575, 0, 591, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2843, 0, 0,
	0, 1987, 0, 0, 0, 0, 0, 2849, 2850, 0,
	0, 2853, 0, 0, 0, 2856, 0, 0, 0, 0,
	0, 0, 0, 0, 2860, 0, 0, 0, 0, 0,
	2276, 0, 2693, 2867, 0, 3310, 2621, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2887, 0, 0,
	0, 0, 0, 1477, 1473, 574, 1470, 1468, 1469, 1461,
	1462, 1463, 1464, 1466, 1467, 0, 2903, 2904, 0, 2905,
	2906, 2907, 0, 0, 2908, 0, 3310, 0, 2910, 0,
	2276, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2938,
	2939, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 210, 0, 0, 2948, 0, 0, 0, 211, 1083,
	211, 211, 1083, 0, 1083, 211, 0, 0, 0, 2957,
	0, 0, 2894, 211, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3310, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 1083, 211, 211, 0, 0,
	1457, 1458, 2986, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 2994, 2997, 0,
	1488, 0, 0, 210, 0, 0, 0, 1460, 0, 0,
	2693, 0, 0, 211, 211, 211, 211, 0, 1083, 1083,
	0, 3015, 0, 1083, 1200, 0, 1200, 1083, 211, 211,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	3472, 1476, 0, 0, 0, 0, 1200, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 2276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 2567, 2568, 0, 2585, 2586, 2587, 0, 1593, 0,
	2851, 0, 0, 0, 0, 0, 0, 3069, 0, 0,
	211, 0, 0, 2894, 0, 0, 0, 0, 1482, 1483,
	1484, 1485, 0, 0, 211, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 209, 209, 0, 0, 0, 209, 0,
	0, 0, 2276, 0, 0, 2582, 598, 0, 0, 1487,
	1489, 0, 0, 0, 3108, 3109, 0, 0, 0, 0,
	3113, 3114, 3310, 0, 0, 3117, 3118, 0, 0, 0,
	0, 0, 3122, 0, 0, 0, 0, 0, 1474, 1475,
	0, 0, 0, 0, 0, 0, 1200, 0, 2276, 209,
	209, 3126, 0, 0, 0, 0, 0, 0, 3130, 0,
	0, 0, 0, 1480, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2573,
	0, 0, 0, 0, 0, 0, 209, 209, 209, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 209, 0, 0, 0, 2589, 1079, 0, 0,
	1180, 0, 1079, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2588, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	0, 2997, 1180, 1180, 2583, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 684, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 687, 686, 1180, 1180, 0, 0,
	211, 1180, 0, 0, 0, 1180, 0, 58, 0, 0,
	0, 1083, 0, 211, 211, 0, 0, 0, 0, 211,
	0, 62, 0, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2997, 1083, 0, 0, 0,
	0, 2567, 2568, 0, 2585, 2586, 2587, 0, 0, 0,
	2584, 0, 68, 0, 0, 0, 1180, 1083, 0, 0,
	0, 0, 0, 3278, 3279, 3280, 1477, 1473, 0, 1470,
	1468, 1469, 1461, 1462, 1463, 1464, 1466, 1467, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 3288, 3289,
	0, 0, 85, 0, 0, 0, 0, 75, 82, 0,
	0, 0, 3296, 0, 0, 2582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 2997, 0, 0, 0, 0, 0, 0,
	0, 3333, 0, 0, 0, 0, 0, 0, 0, 3339,
	0, 0, 836, 2579, 2580, 2581, 0, 0, 0, 3346,
	2578, 2576, 2577, 2569, 2570, 2571, 2572, 2574, 2575, 2573,
	0, 0, 1083, 211, 0, 0, 0, 0, 0, 1083,
	0, 0, 2997, 0, 0, 2997, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1623, 0,
	1018, 0, 0, 209, 0, 2997, 2997, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 1623, 211, 211,
	2588, 0, 598, 0, 0, 211, 0, 598, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 906,
	0, 77, 0, 0, 211, 0, 211, 674, 211, 0,
	0, 0, 0, 0, 2583, 0, 0, 0, 3411, 0,
	0, 3414, 0, 0, 0, 0, 0, 0, 0, 0,
	656, 0, 0, 148, 80, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 657, 1083, 0, 1083, 688, 1083, 0,
	0, 118, 658, 0, 1083, 0, 0, 1083, 211, 0,
	0, 211, 0, 0, 0, 0, 0, 0, 659, 1079,
	1083, 1083, 1083, 0, 0, 184, 0, 591, 0, 211,
	0, 0, 591, 0, 679, 0, 0, 0, 211, 211,
	2584, 211, 0, 211, 1180, 211, 0, 211, 119, 660,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 152, 0, 0, 0, 1079, 0, 0, 661, 183,
	0, 0, 0, 0, 0, 211, 598, 0, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 177, 662, 0,
	0, 663, 0, 0, 3520, 3520, 3520, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 685, 0,
	0, 0, 0, 3539, 0, 0, 0, 678, 0, 0,
	0, 209, 209, 0, 0, 0, 0, 1083, 209, 0,
	57, 0, 0, 0, 2997, 0, 2997, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 209, 0, 209,
	3520, 209, 0, 2579, 2580, 2581, 0, 0, 62, 0,
	2578, 2576, 2577, 2569, 2570, 2571, 2572, 2574, 2575, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	1180, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 665, 0, 871, 87, 0, 74,
	0, 209, 0, 0, 209, 0, 0, 0, 0, 85,
	0, 682, 666, 3520, 75, 82, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 209, 0, 209, 0, 209, 0, 209, 681,
	209, 0, 0, 0, 0, 0, 667, 0, 0, 668,
	0, 0, 0, 0, 0, 676, 0, 0, 76, 0,
	0, 0, 669, 0, 0, 0, 1083, 0, 209, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 670, 677, 0, 0, 0, 209, 0,
	0, 671, 1180, 0, 1180, 0, 1180, 0, 0, 0,
	0, 0, 1180, 0, 673, 1180, 0, 0, 0, 672,
	0, 0, 0, 0, 0, 0, 0, 0, 1180, 1180,
	1180, 680, 0, 0, 0, 0, 0, 0, 0, 810,
	0, 0, 675, 0, 0, 0, 591, 0, 831, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 0,
	0, 0, 57, 0, 0, 0, 0, 0, 77, 1083,
	0, 0, 0, 0, 0, 0, 58, 120, 0, 0,
	0, 1006, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	148, 80, 0, 81, 0, 39, 122, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	211, 68, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 688, 1079, 1083, 0, 118, 0,
	0, 41, 0, 0, 0, 0, 42, 0, 0, 211,
	1083, 74, 0, 1083, 123, 211, 0, 0, 0, 0,
	40, 85, 184, 1018, 0, 0, 75, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 0, 119, 211, 1018, 0, 0,
	0, 1080, 209, 43, 1181, 0, 1080, 0, 152, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 176, 0, 211, 0,
	1079, 211, 0, 211, 177, 211, 0, 211, 211, 0,
	0, 1083, 1083, 1083, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1328, 1181, 1181, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1181, 1181, 0, 0, 1079, 1181, 0, 0, 0, 1181,
	0, 0, 211, 211, 211, 211, 0, 211, 0, 211,
	1079, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 209, 0, 0, 0, 58, 0, 44, 0,
	0, 0, 0, 209, 0, 0, 0, 211, 0, 0,
	62, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	1181, 47, 148, 80, 0, 81, 0, 45, 0, 0,
	0, 124, 209, 0, 0, 0, 0, 46, 598, 0,
	0, 68, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	118, 0, 0, 0, 209, 0, 0, 1180, 0, 209,
	121, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 184, 0, 75, 82, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 209, 0, 209, 119, 209, 0,
	209, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 0, 0, 0, 0, 183, 0,
	76, 0, 0, 0, 1180, 0, 0, 209, 176, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 1079, 0,
	209, 1180, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	3, 0, 0, 87, 0, 87, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 209, 209, 209, 209, 0,
	209, 0, 209, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 1180,
	1180, 1180, 0, 1180, 0, 1083, 0, 0, 0, 0,
	77, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 831, 87, 87, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 148, 80, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 688, 0, 0, 0,
	118, 0, 0, 0, 0, 211, 211, 211, 0, 0,
	0, 87, 0, 0, 211, 0, 0, 0, 1181, 0,
	0, 0, 0, 0, 184, 0, 211, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 1080,
	0, 0, 0, 0, 0, 1083, 0, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 211, 0, 0, 1083, 211, 183, 1083,
	1083, 1083, 0, 0, 0, 0, 211, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	810, 0, 0, 0, 0, 0, 0, 0, 1018, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 1520, 0,
	0, 0, 0, 1018, 0, 0, 0, 0, 0, 0,
	1083, 1083, 0, 0, 0, 0, 1529, 0, 211, 0,
	1535, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 1623, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1181, 1083, 0, 211, 1083, 211,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 209, 209,
	209, 0, 1457, 1458, 0, 0, 0, 1623, 1500, 1501,
	1502, 0, 0, 1083, 0, 0, 0, 0, 0, 209,
	0, 0, 1488, 0, 1083, 0, 0, 0, 0, 1460,
	0, 0, 0, 1079, 1506, 0, 0, 0, 0, 0,
	0, 87, 1079, 0, 1621, 0, 1624, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 1459, 0, 0,
	209, 0, 0, 0, 0, 0, 1479, 0, 0, 209,
	0, 0, 0, 1476, 0, 0, 1181, 1018, 1181, 0,
	1181, 0, 0, 0, 0, 0, 1181, 0, 0, 1181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1181, 1181, 1181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 1483, 1484, 1485, 0, 1180, 0, 0, 0, 0,
	1465, 0, 1083, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	209, 0, 209, 0, 1497, 0, 0, 1507, 0, 0,
	0, 1487, 1489, 0, 1180, 0, 0, 1180, 1180, 1180,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1474, 1475, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 1180, 1180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 211, 1180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 211, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 1083, 1083, 1083, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 211, 1083,
	0, 1481, 0, 1018, 1018, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 1079, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 831, 0, 831, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 1499, 1477, 1473,
	0, 1470, 1468, 1469, 1461, 1462, 1463, 1464, 1466, 1467,
	0, 0, 0, 0, 1083, 0, 1083, 0, 209, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 1181, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 810, 0, 0, 810,
	810, 0, 0, 0, 1018, 0, 0, 0, 1080, 0,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 211, 211, 1083, 0, 0, 1083, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 1181, 0,
	0, 0, 1083, 0, 2054, 1083, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 1181, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1529, 0, 0, 0, 1529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 1079,
	0, 0, 0, 0, 1180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 1180, 1180, 1180, 0, 0, 0,
	0, 0, 0, 1181, 1181, 1181, 0, 1181, 0, 1006,
	1180, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 1018, 0, 1083, 0, 0, 0, 0, 0, 1018,
	0, 0, 0, 1624, 1079, 1083, 0, 0, 0, 0,
	0, 0, 1623, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	1458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 209, 209, 1460, 0, 0, 211,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 211, 211, 1479, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 0, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 2492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 1483, 1484,
	1485, 0, 87, 0, 0, 0, 0, 1465, 1079, 0,
	0, 1180, 0, 0, 1079, 0, 1180, 0, 0, 87,
	0, 87, 0, 0, 211, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 1083, 0, 1487, 1489,
	1079, 1083, 0, 1180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 87, 0, 87, 1474, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	1083, 0, 0, 1079, 0, 0, 0, 0, 211, 0,
	0, 0, 1480, 87, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 209, 209, 1080, 87, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	1457, 1458, 0, 1490, 1491, 1492, 1500, 1501, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	1488, 0, 0, 0, 0, 0, 0, 1460, 0, 0,
	0, 0, 1506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1180, 0, 0, 0, 0, 209, 0, 1181,
	0, 0, 2054, 0, 0, 1459, 0, 0, 0, 1080,
	0, 0, 0, 0, 1479, 0, 0, 1080, 0, 0,
	0, 1476, 0, 1529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1181, 0,
	0, 1181, 1181, 1181, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 1477, 1473, 0, 1470, 1468,
	1469, 1461, 1462, 1463, 1464, 1466, 1467, 0, 1482, 1483,
	1484, 1485, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 1181, 1181, 0, 0, 0, 0, 1457, 1458,
	0, 1490, 1491, 1492, 1500, 1501, 1502, 0, 0, 0,
	0, 1181, 1497, 1180, 0, 1507, 0, 1493, 1488, 1487,
	1489, 0, 0, 1180, 1180, 1460, 0, 0, 0, 1180,
	1506, 0, 0, 0, 0, 0, 0, 1080, 0, 1503,
	1080, 1504, 0, 0, 1006, 0, 0, 0, 1474, 1475,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 1006,
	0, 0, 1479, 0, 1495, 0, 0, 0, 1079, 1476,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 1494, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 1483, 1484, 1485,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 87, 87, 0,
	1497, 87, 0, 1507, 0, 0, 0, 1487, 1489, 1481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1503, 0, 1504,
	87, 87, 0, 0, 87, 1498, 1474, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 1505,
	0, 0, 0, 1006, 0, 0, 831, 614, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	615, 87, 87, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 1471, 1472, 1478, 1499, 1477, 1473, 0, 1470,
	1468, 1469, 1461, 1462, 1463, 1464, 1466, 1467, 0, 1486,
	0, 0, 2555, 616, 635, 0, 2556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 617, 0, 0, 618, 1457,
	1458, 0, 1490, 1491, 1492, 1500, 1501, 1502, 0, 0,
	0, 0, 0, 1498, 641, 0, 0, 0, 1493, 1488,
	619, 0, 0, 1080, 0, 0, 1460, 0, 1181, 639,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 1181, 1181,
	1181, 0, 0, 1479, 0, 0, 0, 0, 621, 0,
	1476, 622, 645, 0, 1181, 0, 648, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 1080, 0,
	1471, 1472, 1478, 1499, 1477, 1473, 0, 1470, 1468, 1469,
	1461, 1462, 1463, 1464, 1466, 1467, 0, 0, 0, 0,
	2086, 0, 0, 0, 2087, 0, 0, 1482, 1483, 1484,
	1485, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 644, 87, 0, 0, 0, 0, 0,
	0, 625, 0, 0, 0, 0, 0, 0, 0, 1006,
	1006, 1497, 0, 0, 1507, 0, 0, 0, 1487, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 623, 0, 0, 0, 1503, 0,
	1504, 0, 0, 0, 626, 0, 0, 1474, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 1495, 0, 0, 1080, 0, 1080, 0,
	0, 0, 1480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 647,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 0, 0, 0, 0, 0, 0, 1494, 0, 0,
	0, 0, 629, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 1181, 0, 0, 1080, 0,
	1181, 634, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 630, 0, 0, 643, 0, 642, 0,
	1486, 631, 0, 0, 1080, 0, 0, 1181, 0, 0,
	0, 0, 0, 0, 632, 0, 0, 0, 1481, 638,
	0, 0, 0, 0, 649, 0, 646, 0, 0, 0,
	1006, 636, 0, 0, 0, 1457, 1458, 0, 1490, 1491,
	1492, 1500, 1501, 1502, 1498, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 1493, 1488, 0, 0, 0, 0,
	0, 0, 1460, 0, 87, 0, 0, 1506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 1496, 0,
	0, 1471, 1472, 1478, 1499, 1477, 1473, 0, 1470, 1468,
	1469, 1461, 1462, 1463, 1464, 1466, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 3135, 0, 0, 0, 0,
	0, 0, 0, 1482, 1483, 1484, 1485, 0, 0, 0,
	0, 0, 0, 1465, 3571, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1006, 0, 0,
	0, 0, 0, 0, 0, 1006, 1181, 1497, 0, 0,
	1507, 0, 0, 0, 1487, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 0, 1504, 0, 0, 0,
	0, 0, 0, 1474, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 1480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 1505, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3570, 0, 1181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1181, 1181, 0,
	0, 0, 0, 1181, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 0,
	1498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 1077, 1471, 1472, 1478,
	1499, 1477, 1473, 0, 1470, 1468, 1469, 1461, 1462, 1463,
	1464, 1466, 1467, 219, 220, 221, 222, 223, 1084, 224,
	1085, 1086, 1087, 2054, 1088, 478, 1089, 1090, 1091, 1092,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 1093, 233, 234, 235, 236, 237, 238, 1094,
	1095, 239, 483, 484, 485, 1096, 240, 486, 1097, 1082,
	1098, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 1099, 251, 0, 252, 253, 254, 1100, 957,
	255, 256, 1101, 1102, 1104, 1103, 1105, 1106, 1107, 257,
	258, 259, 260, 261, 262, 487, 488, 1108, 263, 1109,
	265, 264, 1110, 266, 1111, 1112, 267, 268, 269, 1113,
	270, 1114, 271, 272, 1115, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 1116, 216,
	1117, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 1118, 290, 1119, 1120, 958, 291, 292,
	1121, 293, 493, 1122, 494, 294, 1123, 295, 296, 297,
	298, 495, 496, 497, 350, 960, 299, 300, 1124, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 1125, 959,
	306, 498, 308, 307, 309, 310, 311, 499, 1126, 500,
	1127, 313, 961, 501, 962, 314, 315, 316, 963, 317,
	318, 0, 87, 319, 320, 321, 322, 323, 1128, 325,
	324, 1129, 326, 502, 964, 327, 328, 965, 1130, 329,
	330, 1131, 1132, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 966, 344, 345,
	347, 346, 1133, 218, 967, 348, 1134, 503, 349, 504,
	351, 352, 1135, 353, 354, 355, 1136, 1137, 357, 358,
	359, 1138, 1139, 360, 361, 505, 968, 362, 969, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1140,
	371, 372, 507, 373, 508, 374, 1141, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 1142, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 1143, 397, 970, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 1144, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 1145, 424, 404, 405, 425, 426, 971, 427,
	428, 511, 429, 430, 1146, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 1147, 442, 443,
	441, 1148, 444, 445, 446, 447, 448, 278, 449, 1149,
	450, 513, 514, 515, 516, 1150, 457, 1151, 451, 452,
	517, 453, 518, 1152, 454, 455, 456, 0, 458, 459,
	1153, 1154, 460, 461, 462, 463, 464, 466, 1155, 467,
	1156, 465, 468, 469, 470, 519, 520, 521, 1157, 472,
	471, 522, 1158, 1159, 1160, 1161, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1077, 0, 0, 0, 0, 0,
	0, 0, 2207, 0, 0, 0, 0, 0, 0, 0,
	2208, 219, 220, 221, 222, 223, 1084, 224, 1085, 1086,
	1087, 0, 1088, 478, 1089, 1090, 1091, 1092, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	1093, 233, 234, 235, 236, 237, 238, 1094, 1095, 239,
	483, 484, 485, 1096, 240, 486, 1097, 1082, 1098, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1099, 251, 0, 252, 253, 254, 1100, 957, 255, 256,
	1101, 1102, 1104, 1103, 1105, 1106, 1107, 257, 258, 259,
	260, 261, 262, 487, 488, 1108, 263, 1109, 265, 264,
	1110, 266, 1111, 1112, 267, 268, 269, 1113, 270, 1114,
	271, 272, 1115, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 1116, 216, 1117, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 1118, 290, 1119, 1120, 958, 291, 292, 1121, 293,
	493, 1122, 494, 294, 1123, 295, 296, 297, 298, 495,
	496, 497, 350, 960, 299, 300, 1124, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1125, 959, 306, 498,
	308, 307, 309, 310, 311, 499, 1126, 500, 1127, 313,
	961, 501, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1128, 325, 324, 1129,
	326, 502, 964, 327, 328, 965, 1130, 329, 330, 1131,
	1132, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 346,
	1133, 218, 967, 348, 1134, 503, 349, 504, 351, 352,
	1135, 353, 354, 355, 1136, 1137, 357, 358, 359, 1138,
	1139, 360, 361, 505, 968, 362, 969, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1140, 371, 372,
	507, 373, 508, 374, 1141, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 1142, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 1143, 397, 970, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 1144,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	1145, 424, 404, 405, 425, 426, 971, 427, 428, 511,
	429, 430, 1146, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 1147, 442, 443, 441, 1148,
	444, 445, 446, 447, 448, 278, 449, 1149, 450, 513,
	514, 515, 516, 1150, 457, 1151, 451, 452, 517, 453,
	518, 1152, 454, 455, 456, 0, 458, 459, 1153, 1154,
	460, 461, 462, 463, 464, 466, 1155, 467, 1156, 465,
	468, 469, 470, 519, 520, 521, 1157, 472, 471, 522,
	1158, 1159, 1160, 1161, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 1077, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3161, 219, 220, 221, 222, 223, 1084, 224, 1085, 1086,
	1087, 0, 1088, 478, 1089, 1090, 1091, 1092, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	1093, 233, 234, 235, 236, 237, 238, 1094, 1095, 239,
	483, 484, 485, 1096, 240, 486, 1097, 1082, 1098, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1099, 251, 0, 252, 253, 254, 1100, 957, 255, 256,
	1101, 1102, 1104, 1103, 1105, 1106, 1107, 257, 258, 259,
	260, 261, 262, 487, 488, 1108, 263, 1109, 265, 264,
	1110, 266, 1111, 1112, 267, 268, 269, 1113, 270, 1114,
	271, 272, 1115, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 1116, 216, 1117, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 1118, 290, 1119, 1120, 958, 291, 292, 1121, 293,
	493, 1122, 494, 294, 1123, 295, 296, 297, 298, 495,
	496, 497, 350, 960, 299, 300, 1124, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1125, 959, 306, 498,
	308, 307, 309, 310, 311, 499, 1126, 500, 1127, 313,
	961, 501, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1128, 325, 324, 1129,
	326, 502, 964, 327, 328, 965, 1130, 329, 330, 1131,
	1132, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 346,
	1133, 218, 967, 348, 1134, 503, 349, 504, 351, 352,
	1135, 353, 354, 355, 1136, 1137, 357, 358, 359, 1138,
	1139, 360, 361, 505, 968, 362, 969, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1140, 371, 372,
	507, 373, 508, 374, 1141, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 1142, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 1143, 397, 970, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 1144,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	1145, 424, 404, 405, 425, 426, 971, 427, 428, 511,
	429, 430, 1146, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 1147, 442, 443, 441, 1148,
	444, 445, 446, 447, 448, 278, 449, 1149, 450, 513,
	514, 515, 516, 1150, 457, 1151, 451, 452, 517, 453,
	518, 1152, 454, 455, 456, 0, 458, 459, 1153, 1154,
	460, 461, 462, 463, 464, 466, 1155, 467, 1156, 465,
	468, 469, 470, 519, 520, 521, 1157, 472, 471, 522,
	1158, 1159, 1160, 1161, 473, 474, 523, 475, 476, 477,
	1077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3284, 0, 219, 220, 221,
	222, 223, 1084, 224, 1085, 1086, 1087, 0, 1088, 478,
	1089, 1090, 1091, 1092, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 1093, 233, 234, 235,
	236, 237, 238, 1094, 1095, 239, 483, 484, 485, 1096,
	240, 486, 1097, 1082, 1098, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 1099, 251, 0, 252,
	253, 254, 1100, 957, 255, 256, 1101, 1102, 1104, 1103,
	1105, 1106, 1107, 257, 258, 259, 260, 261, 262, 487,
	488, 1108, 263, 1109, 265, 264, 1110, 266, 1111, 1112,
	267, 268, 269, 1113, 270, 1114, 271, 272, 1115, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 1116, 216, 1117, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 1118, 290, 1119,
	1120, 958, 291, 292, 1121, 293, 493, 1122, 494, 294,
	1123, 295, 296, 297, 298, 495, 496, 497, 350, 960,
	299, 300, 1124, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 1125, 959, 306, 498, 308, 307, 309, 310,
	311, 499, 1126, 500, 1127, 313, 961, 501, 962, 314,
	315, 316, 963, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1128, 325, 324, 1129, 326, 502, 964, 327,
	328, 965, 1130, 329, 330, 1131, 1132, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 966, 344, 345, 347, 346, 1133, 218, 967, 348,
	1134, 503, 349, 504, 351, 352, 1135, 353, 354, 355,
	1136, 1137, 357, 358, 359, 1138, 1139, 360, 361, 505,
	968, 362, 969, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1140, 371, 372, 507, 373, 508, 374,
	1141, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 1142, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 1143, 397, 970,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 1144, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 1145, 424, 404, 405,
	425, 426, 971, 427, 428, 511, 429, 430, 1146, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 1147, 442, 443, 441, 1148, 444, 445, 446, 447,
	448, 278, 449, 1149, 450, 513, 514, 515, 516, 1150,
	457, 1151, 451, 452, 517, 453, 518, 1152, 454, 455,
	456, 0, 458, 459, 1153, 1154, 460, 461, 462, 463,
	464, 466, 1155, 467, 1156, 465, 468, 469, 470, 519,
	520, 521, 1157, 472, 471, 522, 1158, 1159, 1160, 1161,
	473, 474, 523, 475, 476, 477, 1077, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3212, 0, 219, 220, 221, 222, 223, 1084, 224,
	1085, 1086, 1087, 0, 1088, 478, 1089, 1090, 1091, 1092,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 1093, 233, 234, 235, 236, 237, 238, 1094,
	1095, 239, 483, 484, 485, 1096, 240, 486, 1097, 1082,
	1098, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 1099, 251, 0, 252, 253, 254, 1100, 957,
	255, 256, 1101, 1102, 1104, 1103, 1105, 1106, 1107, 257,
	258, 259, 260, 261, 262, 487, 488, 1108, 263, 1109,
	265, 264, 1110, 266, 1111, 1112, 267, 268, 269, 1113,
	270, 1114, 271, 272, 1115, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 1116, 216,
	1117, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 1118, 290, 1119, 1120, 958, 291, 292,
	1121, 293, 493, 1122, 494, 294, 1123, 295, 296, 297,
	298, 495, 496, 497, 350, 960, 299, 300, 1124, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 1125, 959,
	306, 498, 308, 307, 309, 310, 311, 499, 1126, 500,
	1127, 313, 961, 501, 962, 314, 315, 316, 963, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 1128, 325,
	324, 1129, 326, 502, 964, 327, 328, 965, 1130, 329,
	330, 1131, 1132, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 966, 344, 345,
	347, 346, 1133, 218, 967, 348, 1134, 503, 349, 504,
	351, 352, 1135, 353, 354, 355, 1136, 1137, 357, 358,
	359, 1138, 1139, 360, 361, 505, 968, 362, 969, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1140,
	371, 372, 507, 373, 508, 374, 1141, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 1142, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 1143, 397, 970, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 1144, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 1145, 424, 404, 405, 425, 426, 971, 427,
	428, 511, 429, 430, 1146, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 1147, 442, 443,
	441, 1148, 444, 445, 446, 447, 448, 278, 449, 1149,
	450, 513, 514, 515, 516, 1150, 457, 1151, 451, 452,
	517, 453, 518, 1152, 454, 455, 456, 0, 458, 459,
	1153, 1154, 460, 461, 462, 463, 464, 466, 1155, 467,
	1156, 465, 468, 469, 470, 519, 520, 521, 1157, 472,
	471, 522, 1158, 1159, 1160, 1161, 473, 474, 523, 475,
	476, 477, 1077, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3093, 0, 219,
	220, 221, 222, 223, 1084, 224, 1085, 1086, 1087, 0,
	1088, 478, 1089, 1090, 1091, 1092, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 1093, 233,
	234, 235, 236, 237, 238, 1094, 1095, 239, 483, 484,
	485, 1096, 240, 486, 1097, 1082, 1098, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 1099, 251,
	0, 252, 253, 254, 1100, 957, 255, 256, 1101, 1102,
	1104, 1103, 1105, 1106, 1107, 257, 258, 259, 260, 261,
	262, 487, 488, 1108, 263, 1109, 265, 264, 1110, 266,
	1111, 1112, 267, 268, 269, 1113, 270, 1114, 271, 272,
	1115, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 1116, 216, 1117, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 1118,
	290, 1119, 1120, 958, 291, 292, 1121, 293, 493, 1122,
	494, 294, 1123, 295, 296, 297, 298, 495, 496, 497,
	350, 960, 299, 300, 1124, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 1125, 959, 306, 498, 308, 307,
	309, 310, 311, 499, 1126, 500, 1127, 313, 961, 501,
	962, 314, 315, 316, 963, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1128, 325, 324, 1129, 326, 502,
	964, 327, 328, 965, 1130, 329, 330, 1131, 1132, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 966, 344, 345, 347, 346, 1133, 218,
	967, 348, 1134, 503, 349, 504, 351, 352, 1135, 353,
	354, 355, 1136, 1137, 357, 358, 359, 1138, 1139, 360,
	361, 505, 968, 362, 969, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1140, 371, 372, 507, 373,
	508, 374, 1141, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 1142, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 1143,
	397, 970, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 1144, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 1145, 424,
	404, 405, 425, 426, 971, 427, 428, 511, 429, 430,
	1146, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 1147, 442, 443, 441, 1148, 444, 445,
	446, 447, 448, 278, 449, 1149, 450, 513, 514, 515,
	516, 1150, 457, 1151, 451, 452, 517, 453, 518, 1152,
	454, 455, 456, 0, 458, 459, 1153, 1154, 460, 461,
	462, 463, 464, 466, 1155, 467, 1156, 465, 468, 469,
	470, 519, 520, 521, 1157, 472, 471, 522, 1158, 1159,
	1160, 1161, 473, 474, 523, 475, 476, 477, 1077, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2890, 0, 219, 220, 221, 222, 223,
	1084, 224, 1085, 1086, 1087, 0, 1088, 478, 1089, 1090,
	1091, 1092, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 1093, 233, 234, 235, 236, 237,
	238, 1094, 1095, 239, 483, 484, 485, 1096, 240, 486,
	1097, 1082, 1098, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 1099, 251, 0, 252, 253, 254,
	1100, 957, 255, 256, 1101, 1102, 1104, 1103, 1105, 1106,
	1107, 257, 258, 259, 260, 261, 262, 487, 488, 1108,
	263, 1109, 265, 264, 1110, 266, 1111, 1112, 267, 268,
	269, 1113, 270, 1114, 271, 272, 1115, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	1116, 216, 1117, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 1118, 290, 1119, 1120, 958,
	291, 292, 1121, 293, 493, 1122, 494, 294, 1123, 295,
	296, 297, 298, 495, 496, 497, 350, 960, 299, 300,
	1124, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	1125, 959, 306, 498, 308, 307, 309, 310, 311, 499,
	1126, 500, 1127, 313, 961, 501, 962, 314, 315, 316,
	963, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	1128, 325, 324, 1129, 326, 502, 964, 327, 328, 965,
	1130, 329, 330, 1131, 1132, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 966,
	344, 345, 347, 346, 1133, 218, 967, 348, 1134, 503,
	349, 504, 351, 352, 1135, 353, 354, 355, 1136, 1137,
	357, 358, 359, 1138, 1139, 360, 361, 505, 968, 362,
	969, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1140, 371, 372, 507, 373, 508, 374, 1141, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	1142, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 1143, 397, 970, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 1144, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 1145, 424, 404, 405, 425, 426,
	971, 427, 428, 511, 429, 430, 1146, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 1147,
	442, 443, 441, 1148, 444, 445, 446, 447, 448, 278,
	449, 1149, 450, 513, 514, 515, 516, 1150, 457, 1151,
	451, 452, 517, 453, 518, 1152, 454, 455, 456, 0,
	458, 459, 1153, 1154, 460, 461, 462, 463, 464, 466,
	1155, 467, 1156, 465, 468, 469, 470, 519, 520, 521,
	1157, 472, 471, 522, 1158, 1159, 1160, 1161, 473, 474,
	523, 475, 476, 477, 1077, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2882,
	0, 219, 220, 221, 222, 223, 1084, 224, 1085, 1086,
	1087, 0, 1088, 478, 1089, 1090, 1091, 1092, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	1093, 233, 234, 235, 236, 237, 238, 1094, 1095, 239,
	483, 484, 485, 1096, 240, 486, 1097, 1082, 1098, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1099, 251, 0, 252, 253, 254, 1100, 957, 255, 256,
	1101, 1102, 1104, 1103, 1105, 1106, 1107, 257, 258, 259,
	260, 261, 262, 487, 488, 1108, 263, 1109, 265, 264,
	1110, 266, 1111, 1112, 267, 268, 269, 1113, 270, 1114,
	271, 272, 1115, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 1116, 216, 1117, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 1118, 290, 1119, 1120, 958, 291, 292, 1121, 293,
	493, 1122, 494, 294, 1123, 295, 296, 297, 298, 495,
	496, 497, 350, 960, 299, 300, 1124, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1125, 959, 306, 498,
	308, 307, 309, 310, 311, 499, 1126, 500, 1127, 313,
	961, 501, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1128, 325, 324, 1129,
	326, 502, 964, 327, 328, 965, 1130, 329, 330, 1131,
	1132, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 346,
	1133, 218, 967, 348, 1134, 503, 349, 504, 351, 352,
	1135, 353, 354, 355, 1136, 1137, 357, 358, 359, 1138,
	1139, 360, 361, 505, 968, 362, 969, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1140, 371, 372,
	507, 373, 508, 374, 1141, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 1142, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 1143, 397, 970, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 1144,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	1145, 424, 404, 405, 425, 426, 971, 427, 428, 511,
	429, 430, 1146, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 1147, 442, 443, 441, 1148,
	444, 445, 446, 447, 448, 278, 449, 1149, 450, 513,
	514, 515, 516, 1150, 457, 1151, 451, 452, 517, 453,
	518, 1152, 454, 455, 456, 0, 458, 459, 1153, 1154,
	460, 461, 462, 463, 464, 466, 1155, 467, 1156, 465,
	468, 469, 470, 519, 520, 521, 1157, 472, 471, 522,
	1158, 1159, 1160, 1161, 473, 474, 523, 475, 476, 477,
	1077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2746, 0, 219, 220, 221,
	222, 223, 1084, 224, 1085, 1086, 1087, 0, 1088, 478,
	1089, 1090, 1091, 1092, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 1093, 233, 234, 235,
	236, 237, 238, 1094, 1095, 239, 483, 484, 485, 1096,
	240, 486, 1097, 1082, 1098, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 1099, 251, 0, 252,
	253, 254, 1100, 957, 255, 256, 1101, 1102, 1104, 1103,
	1105, 1106, 1107, 257, 258, 259, 260, 261, 262, 487,
	488, 1108, 263, 1109, 265, 264, 1110, 266, 1111, 1112,
	267, 268, 269, 1113, 270, 1114, 271, 272, 1115, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 1116, 216, 1117, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 1118, 290, 1119,
	1120, 958, 291, 292, 1121, 293, 493, 1122, 494, 294,
	1123, 295, 296, 297, 298, 495, 496, 497, 350, 960,
	299, 300, 1124, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 1125, 959, 306, 498, 308, 307, 309, 310,
	311, 499, 1126, 500, 1127, 313, 961, 501, 962, 314,
	315, 316, 963, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1128, 325, 324, 1129, 326, 502, 964, 327,
	328, 965, 1130, 329, 330, 1131, 1132, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 966, 344, 345, 347, 346, 1133, 218, 967, 348,
	1134, 503, 349, 504, 351, 352, 1135, 353, 354, 355,
	1136, 1137, 357, 358, 359, 1138, 1139, 360, 361, 505,
	968, 362, 969, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1140, 371, 372, 507, 373, 508, 374,
	1141, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 1142, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 1143, 397, 970,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 1144, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 1145, 424, 404, 405,
	425, 426, 971, 427, 428, 511, 429, 430, 1146, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 1147, 442, 443, 441, 1148, 444, 445, 446, 447,
	448, 278, 449, 1149, 450, 513, 514, 515, 516, 1150,
	457, 1151, 451, 452, 517, 453, 518, 1152, 454, 455,
	456, 0, 458, 459, 1153, 1154, 460, 461, 462, 463,
	464, 466, 1155, 467, 1156, 465, 468, 469, 470, 519,
	520, 521, 1157, 472, 471, 522, 1158, 1159, 1160, 1161,
	473, 474, 523, 475, 476, 477, 1077, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2099, 0, 219, 220, 221, 222, 223, 1084, 224,
	1085, 1086, 1087, 0, 1088, 478, 1089, 1090, 1091, 1092,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 1093, 233, 234, 235, 236, 237, 238, 1094,
	1095, 239, 483, 484, 485, 1096, 240, 486, 1097, 1082,
	1098, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 1099, 251, 0, 252, 253, 254, 1100, 957,
	255, 256, 1101, 1102, 1104, 1103, 1105, 1106, 1107, 257,
	258, 259, 260, 261, 262, 487, 488, 1108, 263, 1109,
	265, 264, 1110, 266, 1111, 1112, 267, 268, 269, 1113,
	270, 1114, 271, 272, 1115, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 1116, 216,
	1117, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 1118, 290, 1119, 1120, 958, 291, 292,
	1121, 293, 493, 1122, 494, 294, 1123, 295, 296, 297,
	298, 495, 496, 497, 350, 960, 299, 300, 1124, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 1125, 959,
	306, 498, 308, 307, 309, 310, 311, 499, 1126, 500,
	1127, 313, 961, 501, 962, 314, 315, 316, 963, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 1128, 325,
	324, 1129, 326, 502, 964, 327, 328, 965, 1130, 329,
	330, 1131, 1132, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 966, 344, 345,
	347, 346, 1133, 218, 967, 348, 1134, 503, 349, 504,
	351, 352, 1135, 353, 354, 355, 1136, 1137, 357, 358,
	359, 1138, 1139, 360, 361, 505, 968, 362, 969, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1140,
	371, 372, 507, 373, 508, 374, 1141, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 1142, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 1143, 397, 970, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 1144, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 1145, 424, 404, 405, 425, 426, 971, 427,
	428, 511, 429, 430, 1146, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 1147, 442, 443,
	441, 1148, 444, 445, 446, 447, 448, 278, 449, 1149,
	450, 513, 514, 515, 516, 1150, 457, 1151, 451, 452,
	517, 453, 518, 1152, 454, 455, 456, 0, 458, 459,
	1153, 1154, 460, 461, 462, 463, 464, 466, 1155, 467,
	1156, 465, 468, 469, 470, 519, 520, 521, 1157, 472,
	471, 522, 1158, 1159, 1160, 1161, 473, 474, 523, 475,
	476, 477, 1185, 0, 1077, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1810, 0, 0,
	0, 219, 220, 221, 222, 223, 1084, 224, 1085, 1086,
	1087, 0, 1088, 478, 1089, 1090, 1091, 1092, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	1093, 233, 234, 235, 236, 237, 238, 1094, 1095, 239,
	483, 484, 485, 1096, 240, 486, 1097, 1082, 1098, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1099, 251, 0, 252, 253, 254, 1100, 957, 255, 256,
	1101, 1102, 1104, 1103, 1105, 1106, 1107, 257, 258, 259,
	260, 261, 262, 487, 488, 1108, 263, 1109, 265, 264,
	1110, 266, 1111, 1112, 267, 268, 269, 1113, 270, 1114,
	271, 272, 1115, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 1116, 216, 1117, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 1118, 290, 1119, 1120, 958, 291, 292, 1121, 293,
	493, 1122, 494, 294, 1123, 295, 296, 297, 298, 495,
	496, 497, 350, 960, 299, 300, 1124, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1125, 959, 306, 498,
	308, 307, 309, 310, 311, 499, 1126, 500, 1127, 313,
	961, 501, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1128, 325, 324, 1129,
	326, 502, 964, 327, 328, 965, 1130, 329, 330, 1131,
	1132, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 346,
	1133, 218, 967, 348, 1134, 503, 349, 504, 351, 352,
	1135, 353, 354, 355, 1136, 1137, 357, 358, 359, 1138,
	1139, 360, 361, 505, 968, 362, 969, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1140, 371, 372,
	507, 373, 508, 374, 1141, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 1142, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 1143, 397, 970, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 1144,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	1145, 424, 404, 405, 425, 426, 971, 427, 428, 511,
	429, 430, 1146, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 1147, 442, 443, 441, 1148,
	444, 445, 446, 447, 448, 278, 449, 1149, 450, 513,
	514, 515, 516, 1150, 457, 1151, 451, 452, 517, 453,
	518, 1152, 454, 455, 456, 0, 458, 459, 1153, 1154,
	460, 461, 462, 463, 464, 466, 1155, 467, 1156, 465,
	468, 469, 470, 519, 520, 521, 1157, 472, 471, 522,
	1158, 1159, 1160, 1161, 473, 474, 523, 475, 476, 477,
	1074, 0, 1077, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 1084, 224, 1085, 1086, 1087, 0,
	1088, 478, 1089, 1090, 1091, 1092, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 1093, 233,
	234, 235, 236, 237, 238, 1094, 1095, 239, 483, 484,
	485, 1096, 240, 486, 1097, 1082, 1098, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 1099, 251,
	0, 252, 253, 254, 1100, 957, 255, 256, 1101, 1102,
	1104, 1103, 1105, 1106, 1107, 257, 258, 259, 260, 261,
	262, 487, 488, 1108, 263, 1109, 265, 264, 1110, 266,
	1111, 1112, 267, 268, 269, 1113, 270, 1114, 271, 272,
	1115, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 1116, 216, 1117, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 1118,
	290, 1119, 1120, 958, 291, 292, 1121, 293, 493, 1122,
	494, 294, 1123, 295, 296, 297, 298, 495, 496, 497,
	350, 960, 299, 300, 1124, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 1125, 959, 306, 498, 308, 307,
	309, 310, 311, 499, 1126, 500, 1127, 313, 961, 501,
	962, 314, 315, 316, 963, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1128, 325, 324, 1129, 326, 502,
	964, 327, 328, 965, 1130, 329, 330, 1131, 1132, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 966, 344, 345, 347, 346, 1133, 218,
	967, 348, 1134, 503, 349, 504, 351, 352, 1135, 353,
	354, 355, 1136, 1137, 357, 358, 359, 1138, 1139, 360,
	361, 505, 968, 362, 969, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1140, 371, 372, 507, 373,
	508, 374, 1141, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 1142, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 1143,
	397, 970, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 1144, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 1145, 424,
	404, 405, 425, 426, 971, 427, 428, 511, 429, 430,
	1146, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 1147, 442, 443, 441, 1148, 444, 445,
	446, 447, 448, 278, 449, 1149, 450, 513, 514, 515,
	516, 1150, 457, 1151, 451, 452, 517, 453, 518, 1152,
	454, 455, 456, 0, 458, 459, 1153, 1154, 460, 461,
	462, 463, 464, 466, 1155, 467, 1156, 465, 468, 469,
	470, 519, 520, 521, 1157, 472, 471, 522, 1158, 1159,
	1160, 1161, 473, 474, 523, 475, 476, 477, 1077, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	1084, 224, 1085, 1086, 1087, 0, 1088, 478, 1089, 1090,
	1091, 1092, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 1093, 233, 234, 235, 236, 237,
	238, 1094, 1095, 239, 483, 484, 485, 1096, 240, 486,
	1097, 1082, 1098, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 1099, 251, 0, 252, 253, 254,
	1100, 957, 255, 256, 1101, 1102, 1104, 1103, 1105, 1106,
	1107, 257, 258, 259, 260, 261, 262, 487, 488, 1108,
	263, 1109, 265, 264, 1110, 266, 1111, 1112, 267, 268,
	269, 1113, 270, 1114, 271, 272, 1115, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	1116, 216, 1117, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 1118, 290, 1119, 1120, 958,
	291, 292, 1121, 293, 493, 1122, 494, 294, 1123, 295,
	296, 297, 298, 495, 496, 497, 350, 960, 299, 300,
	1124, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	1125, 959, 306, 498, 308, 307, 309, 310, 311, 499,
	1126, 500, 1127, 313, 961, 501, 962, 314, 315, 316,
	963, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	1128, 325, 324, 1129, 326, 502, 964, 327, 328, 965,
	1130, 329, 330, 1131, 1132, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 966,
	344, 345, 347, 346, 1133, 218, 967, 348, 1134, 503,
	349, 504, 351, 352, 1135, 353, 354, 355, 1136, 1137,
	357, 358, 359, 1138, 1139, 360, 361, 505, 968, 362,
	969, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1140, 371, 372, 507, 373, 508, 374, 1141, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	1142, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 1143, 397, 970, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 1144, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 1145, 424, 404, 405, 425, 426,
	971, 427, 428, 511, 429, 430, 1146, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 1147,
	442, 443, 441, 1148, 444, 445, 446, 447, 448, 278,
	449, 1149, 450, 513, 514, 515, 516, 1150, 457, 1151,
	451, 452, 517, 453, 518, 1152, 454, 455, 456, 0,
	458, 459, 1153, 1154, 460, 461, 462, 463, 464, 466,
	1155, 467, 1156, 465, 468, 469, 470, 519, 520, 521,
	1157, 472, 471, 522, 1158, 1159, 1160, 1161, 473, 474,
	523, 475, 476, 477, 2075, 0, 899, 856, 857, 858,
	854, 855, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 2072, 224,
	0, 0, 0, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 983, 984, 485, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 262, 921, 920, 845, 263, 0,
	265, 264, 0, 266, 2073, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 851, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 974, 975, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 981, 0, 874, 294, 0, 295, 296, 297,
	298, 949, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 895, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 982, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 887, 341, 966, 344, 345,
	347, 346, 842, 218, 967, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 976,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 977, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 915, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	852, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 888, 889, 891, 892, 415, 421,
	422, 423, 945, 424, 404, 405, 425, 426, 971, 427,
	428, 910, 890, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 956, 436, 437, 438, 978, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 886, 0,
	450, 929, 930, 931, 932, 0, 457, 0, 451, 452,
	979, 453, 980, 863, 454, 455, 456, 0, 458, 459,
	0, 846, 460, 461, 462, 463, 464, 466, 946, 467,
	0, 894, 468, 469, 470, 519, 926, 973, 2071, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 843, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 0, 0, 839, 840, 2074, 0, 0,
	0, 0, 0, 0, 869, 2070, 0, 832, 867, 899,
	856, 857, 858, 854, 855, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 873,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 914,
	893, 925, 883, 924, 923, 0, 233, 885, 884, 236,
	237, 238, 875, 947, 239, 983, 984, 485, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 928, 262, 921, 920,
	845, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	919, 269, 0, 270, 0, 271, 272, 0, 273, 851,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 974,
	975, 864, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 918, 916, 917, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 981, 0, 874, 294, 0,
	295, 296, 297, 298, 949, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 895, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 907, 898, 909, 911, 912, 913,
	908, 0, 900, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 933, 934, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 982, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 887, 341,
	966, 344, 345, 347, 346, 842, 218, 967, 348, 865,
	952, 349, 922, 351, 352, 0, 896, 354, 897, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 968,
	362, 969, 976, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 977, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 915, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 970, 398,
	399, 400, 401, 852, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 182, 419, 420, 888, 889, 891,
	892, 415, 421, 422, 423, 945, 424, 404, 405, 425,
	426, 971, 427, 428, 910, 890, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 956, 436, 437, 438, 978,
	0, 442, 443, 441, 184, 444, 445, 446, 447, 448,
	278, 886, 0, 450, 929, 930, 931, 932, 0, 457,
	0, 451, 452, 979, 453, 980, 863, 454, 455, 456,
	0, 458, 459, 0, 846, 460, 461, 462, 463, 464,
	466, 946, 467, 0, 894, 468, 469, 470, 1324, 926,
	973, 0, 472, 471, 522, 0, 0, 0, 176, 473,
	474, 523, 475, 476, 477, 843, 177, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 839, 840,
	899, 856, 857, 858, 854, 855, 868, 1534, 1532, 0,
	0, 867, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 983, 984, 485, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 845, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	851, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	974, 975, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 981, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 982, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 346, 842, 218, 967, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	968, 362, 969, 976, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 977, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 915,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 970,
	398, 399, 400, 401, 852, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 182, 419, 420, 888, 889,
	891, 892, 415, 421, 422, 423, 945, 424, 404, 405,
	425, 426, 971, 427, 428, 910, 890, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 956, 436, 437, 438,
	978, 0, 442, 443, 441, 184, 444, 445, 446, 447,
	448, 278, 886, 0, 450, 929, 930, 931, 932, 0,
	457, 0, 451, 452, 979, 453, 980, 863, 454, 455,
	456, 0, 458, 459, 0, 846, 460, 461, 462, 463,
	464, 466, 946, 467, 0, 894, 468, 469, 470, 1324,
	926, 973, 0, 472, 471, 522, 0, 0, 0, 176,
	473, 474, 523, 475, 476, 477, 843, 177, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 839,
	840, 899, 856, 857, 858, 854, 855, 868, 1534, 2505,
	0, 0, 867, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	948, 873, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 914, 893, 925, 883, 924, 923, 0, 233, 885,
	884, 236, 237, 238, 875, 947, 239, 983, 984, 485,
	0, 240, 954, 0, 937, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 957, 255, 256, 940, 938, 939,
	944, 942, 941, 943, 257, 258, 259, 260, 928, 262,
	921, 920, 845, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 919, 269, 0, 270, 0, 271, 272, 0,
	273, 851, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 974, 975, 864, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 918, 916, 917, 0, 289, 0, 290,
	0, 0, 958, 291, 292, 0, 293, 981, 0, 874,
	294, 0, 295, 296, 297, 298, 949, 950, 953, 350,
	960, 299, 300, 0, 301, 302, 895, 0, 0, 217,
	303, 305, 312, 0, 959, 306, 907, 898, 909, 911,
	912, 913, 908, 0, 900, 0, 313, 961, 951, 962,
	314, 315, 316, 963, 933, 934, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 982, 964,
	327, 328, 965, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	887, 341, 966, 344, 345, 347, 346, 842, 218, 967,
	348, 865, 952, 349, 922, 351, 352, 0, 896, 354,
	897, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 968, 362, 969, 976, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 977, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	915, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	970, 398, 399, 400, 401, 852, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 182, 419, 420, 888,
	889, 891, 892, 415, 421, 422, 423, 945, 424, 404,
	405, 425, 426, 971, 427, 428, 910, 890, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 956, 436, 437,
	438, 978, 0, 442, 443, 441, 184, 444, 445, 446,
	447, 448, 278, 886, 0, 450, 929, 930, 931, 932,
	0, 457, 0, 451, 452, 979, 453, 980, 863, 454,
	455, 456, 0, 458, 459, 0, 846, 460, 461, 462,
	463, 464, 466, 946, 467, 0, 894, 468, 469, 470,
	1324, 926, 973, 0, 472, 471, 522, 0, 0, 0,
	176, 473, 474, 523, 475, 476, 477, 843, 177, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	839, 840, 899, 856, 857, 858, 854, 855, 868, 1534,
	1532, 0, 0, 867, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 948, 873, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 914, 893, 925, 883, 924, 923, 2161, 233,
	885, 884, 236, 237, 238, 875, 947, 239, 983, 984,
	485, 0, 240, 954, 0, 937, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 256, 940, 938,
	939, 944, 942, 941, 943, 257, 258, 259, 260, 928,
	262, 921, 920, 845, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 919, 269, 0, 270, 0, 271, 272,
	0, 273, 851, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 974, 975, 864, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 918, 916, 917, 0, 289, 0,
	290, 0, 2166, 958, 291, 292, 0, 293, 981, 0,
	874, 294, 0, 295, 296, 297, 298, 949, 950, 953,
	350, 960, 299, 300, 0, 301, 302, 895, 0, 0,
	217, 303, 305, 312, 0, 959, 306, 907, 898, 909,
	911, 912, 913, 908, 0, 900, 0, 313, 961, 951,
	962, 314, 315, 316, 963, 933, 934, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 2162, 326, 982,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 887, 341, 966, 344, 345, 347, 346, 842, 218,
	967, 348, 865, 952, 349, 922, 351, 352, 0, 896,
	354, 897, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 968, 362, 969, 976, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 977, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 915, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 970, 398, 399, 400, 401, 852, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	888, 889, 891, 892, 415, 421, 422, 423, 945, 424,
	404, 405, 425, 426, 971, 427, 428, 910, 890, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 956, 436,
	437, 438, 978, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 886, 0, 450, 929, 930, 931,
	932, 0, 457, 2163, 451, 452, 979, 453, 980, 863,
	454, 455, 456, 0, 458, 459, 0, 846, 460, 461,
	462, 463, 464, 466, 946, 467, 0, 894, 468, 469,
	470, 519, 926, 973, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 843, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 839, 840, 0, 0, 0, 0, 0, 0, 0,
	869, 0, 0, 1389, 867, 899, 856, 857, 858, 854,
	855, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 948, 873, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 914, 893, 925, 883, 924,
	923, 0, 233, 885, 884, 236, 237, 238, 875, 947,
	239, 983, 984, 485, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 928, 262, 921, 920, 845, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 919, 269, 0, 270,
	0, 271, 272, 0, 273, 851, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 974, 975, 864, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 918, 916, 917,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 981, 0, 874, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	895, 0, 0, 217, 303, 305, 312, 0, 959, 306,
	907, 898, 909, 911, 912, 913, 908, 0, 900, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 933, 934,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 982, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 887, 341, 966, 344, 345, 347,
	346, 842, 218, 967, 348, 865, 952, 349, 922, 351,
	352, 0, 896, 354, 897, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 968, 362, 969, 976, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 977, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 915, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 970, 398, 399, 400, 401, 852,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 888, 889, 891, 892, 415, 421, 422,
	423, 945, 424, 404, 405, 425, 426, 971, 427, 428,
	910, 890, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 956, 436, 437, 438, 978, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 886, 0, 450,
	929, 930, 931, 932, 0, 457, 0, 451, 452, 979,
	453, 980, 863, 454, 455, 456, 0, 458, 459, 0,
	846, 460, 461, 462, 463, 464, 466, 946, 467, 0,
	894, 468, 469, 470, 519, 926, 973, 0, 472, 471,
	522, 1388, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 843, 0, 0, 0, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 839, 840, 0, 0, 0, 0,
	0, 0, 0, 869, 0, 0, 835, 867, 899, 856,
	857, 858, 854, 855, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 948, 873, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 914, 893,
	925, 883, 924, 923, 0, 233, 885, 884, 236, 237,
	238, 875, 947, 239, 983, 984, 485, 0, 240, 954,
	0, 937, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 957, 255, 256, 940, 938, 939, 944, 942, 941,
	943, 257, 258, 259, 260, 928, 262, 921, 920, 845,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 919,
	269, 0, 270, 0, 271, 272, 0, 273, 851, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 974, 975,
	864, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	918, 916, 917, 0, 289, 0, 290, 0, 0, 958,
	291, 292, 0, 293, 981, 0, 874, 294, 0, 295,
	296, 297, 298, 949, 950, 953, 350, 960, 299, 300,
	0, 301, 302, 895, 0, 0, 217, 303, 305, 312,
	0, 959, 306, 907, 898, 909, 911, 912, 913, 908,
	0, 900, 0, 313, 961, 951, 962, 314, 315, 316,
	963, 933, 934, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 982, 964, 327, 328, 965,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 887, 341, 966,
	344, 345, 347, 346, 842, 218, 967, 348, 865, 952,
	349, 922, 351, 352, 0, 896, 354, 897, 847, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 968, 362,
	969, 976, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 977, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 915, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 970, 398, 399,
	400, 401, 852, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 888, 889, 891, 892,
	415, 421, 422, 423, 945, 424, 404, 405, 425, 426,
	971, 427, 428, 910, 890, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 956, 436, 437, 438, 978, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	886, 0, 450, 929, 930, 931, 932, 0, 457, 0,
	451, 452, 979, 453, 980, 863, 454, 455, 456, 0,
	458, 459, 0, 846, 460, 461, 462, 463, 464, 466,
	946, 467, 0, 894, 468, 469, 470, 519, 926, 973,
	0, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 843, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 0, 0, 839, 840, 899,
	856, 857, 858, 854, 855, 868, 869, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 873,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 914,
	893, 925, 883, 924, 923, 0, 233, 885, 884, 236,
	237, 238, 875, 947, 239, 983, 984, 485, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 3490,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 928, 262, 921, 920,
	845, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	919, 269, 0, 270, 0, 271, 272, 0, 273, 851,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 974,
	975, 864, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 918, 916, 917, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 981, 0, 874, 294, 0,
	295, 296, 297, 298, 949, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 895, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 907, 898, 909, 911, 912, 913,
	908, 0, 900, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 933, 934, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 982, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 887, 341,
	966, 344, 345, 347, 346, 842, 218, 967, 348, 865,
	952, 349, 922, 351, 352, 0, 896, 354, 897, 847,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 968,
	362, 969, 976, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 977, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 915, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 970, 398,
	399, 400, 401, 852, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 888, 889, 891,
	892, 415, 421, 422, 423, 945, 424, 404, 405, 425,
	426, 971, 427, 428, 910, 890, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 956, 436, 437, 438, 978,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 886, 0, 450, 929, 930, 931, 932, 0, 457,
	0, 451, 452, 979, 453, 980, 863, 454, 455, 456,
	0, 458, 459, 0, 846, 460, 461, 462, 463, 464,
	466, 946, 467, 0, 894, 468, 469, 470, 519, 926,
	973, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 843, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 839, 840,
	899, 856, 857, 858, 854, 855, 868, 869, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 983, 984, 485, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	3342, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 845, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	851, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	974, 975, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 981, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 982, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 346, 842, 218, 967, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	847, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	968, 362, 969, 976, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 977, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 915,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 970,
	398, 399, 400, 401, 852, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 888, 889,
	891, 892, 415, 421, 422, 423, 945, 424, 404, 405,
	425, 426, 971, 427, 428, 910, 890, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 956, 436, 437, 438,
	978, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 886, 0, 450, 929, 930, 931, 932, 0,
	457, 0, 451, 452, 979, 453, 980, 863, 454, 455,
	456, 0, 458, 459, 0, 846, 460, 461, 462, 463,
	464, 466, 946, 467, 0, 894, 468, 469, 470, 519,
	926, 973, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 843, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 839,
	840, 899, 856, 857, 858, 854, 855, 868, 869, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	948, 873, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 914, 893, 925, 883, 924, 923, 0, 233, 885,
	884, 236, 237, 238, 875, 947, 239, 983, 984, 485,
	0, 240, 954, 0, 937, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 957, 255, 256, 940, 938, 939,
	944, 942, 941, 943, 257, 258, 259, 260, 928, 262,
	921, 920, 845, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 919, 269, 0, 270, 0, 271, 272, 0,
	273, 851, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 974, 975, 864, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 918, 916, 917, 0, 289, 0, 290,
	0, 0, 958, 291, 292, 0, 293, 981, 0, 874,
	294, 0, 295, 296, 297, 298, 949, 950, 953, 350,
	960, 299, 300, 0, 301, 302, 895, 0, 0, 217,
	303, 305, 312, 0, 959, 306, 907, 898, 909, 911,
	912, 913, 908, 0, 900, 0, 313, 961, 951, 962,
	314, 315, 316, 963, 933, 934, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 982, 964,
	327, 328, 965, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	887, 341, 966, 344, 345, 347, 346, 842, 3063, 967,
	348, 865, 952, 349, 922, 351, 352, 0, 896, 354,
	897, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 968, 362, 969, 976, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 977, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	915, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	970, 398, 399, 400, 401, 852, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 888,
	889, 891, 892, 415, 421, 422, 423, 945, 424, 404,
	405, 425, 426, 971, 427, 428, 910, 890, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 956, 436, 437,
	438, 978, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 886, 0, 450, 929, 930, 931, 932,
	0, 457, 0, 451, 452, 979, 453, 980, 863, 454,
	455, 456, 0, 458, 459, 0, 846, 460, 461, 462,
	463, 464, 466, 946, 467, 0, 894, 468, 469, 470,
	519, 926, 973, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 843, 0, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	839, 840, 1594, 0, 0, 0, 0, 0, 0, 869,
	0, 0, 0, 867, 899, 856, 857, 858, 854, 855,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 948, 873, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 914, 893, 925, 883, 924, 923,
	0, 233, 885, 884, 236, 237, 238, 875, 947, 239,
	983, 984, 485, 0, 240, 954, 0, 937, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 256,
	940, 938, 939, 944, 942, 941, 943, 257, 258, 259,
	260, 928, 262, 921, 920, 845, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 919, 269, 0, 270, 0,
	271, 272, 0, 273, 851, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 974, 975, 864, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 918, 916, 917, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	981, 0, 874, 294, 0, 295, 296, 297, 298, 949,
	950, 953, 350, 960, 299, 300, 0, 301, 302, 895,
	0, 0, 217, 303, 305, 312, 0, 959, 306, 907,
	898, 909, 911, 912, 913, 908, 0, 900, 0, 313,
	961, 951, 962, 314, 315, 316, 963, 933, 934, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 982, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 887, 341, 966, 344, 345, 347, 346,
	842, 218, 967, 348, 865, 952, 349, 922, 351, 352,
	0, 896, 354, 897, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 968, 362, 969, 976, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	977, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 915, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 970, 398, 399, 400, 401, 852, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 888, 889, 891, 892, 415, 421, 422, 423,
	945, 424, 404, 405, 425, 426, 971, 427, 428, 910,
	890, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	956, 436, 437, 438, 978, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 886, 0, 450, 929,
	930, 931, 932, 0, 457, 0, 451, 452, 979, 453,
	980, 863, 454, 455, 456, 0, 458, 459, 0, 846,
	460, 461, 462, 463, 464, 466, 946, 467, 0, 894,
	468, 469, 470, 519, 926, 973, 2869, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	843, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 839, 840, 899, 856, 857, 858, 854,
	855, 868, 869, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 948, 873, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 914, 893, 925, 883, 924,
	923, 0, 233, 885, 884, 236, 237, 238, 875, 947,
	239, 983, 984, 485, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 928, 262, 921, 920, 845, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 919, 269, 0, 270,
	0, 271, 272, 0, 273, 851, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 974, 975, 864, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 918, 916, 917,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 981, 0, 874, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	895, 0, 0, 1989, 303, 305, 312, 0, 959, 306,
	907, 898, 909, 911, 912, 913, 908, 0, 900, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 933, 934,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 982, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 887, 341, 966, 344, 345, 347,
	346, 842, 218, 967, 348, 865, 952, 349, 922, 351,
	352, 0, 896, 354, 897, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 968, 362, 969, 976, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 977, 373, 508, 374, 1988, 375, 0, 376, 377,
	378, 379, 380, 381, 915, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 970, 398, 399, 400, 401, 852,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 888, 889, 891, 892, 415, 421, 422,
	423, 945, 424, 404, 405, 425, 426, 971, 427, 428,
	910, 890, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 956, 436, 437, 438, 978, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 886, 0, 450,
	929, 930, 931, 932, 0, 457, 0, 451, 452, 979,
	453, 980, 863, 454, 455, 456, 0, 458, 459, 0,
	846, 460, 461, 462, 463, 464, 466, 946, 467, 0,
	894, 468, 469, 470, 519, 926, 973, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 843, 0, 0, 0, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 839, 840, 899, 856, 857, 858,
	854, 855, 868, 869, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 983, 984, 485, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 262, 921, 920, 845, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 851, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 974, 975, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 981, 0, 874, 294, 0, 295, 296, 297,
	298, 949, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 895, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 982, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 887, 341, 966, 344, 345,
	347, 346, 842, 218, 967, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 847, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 976,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 977, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 915, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	852, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 888, 889, 891, 892, 415, 421,
	422, 423, 945, 424, 404, 405, 425, 426, 971, 427,
	428, 910, 890, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 956, 436, 437, 438, 978, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 886, 0,
	450, 929, 930, 931, 932, 0, 457, 0, 451, 452,
	979, 453, 980, 863, 454, 455, 456, 0, 458, 459,
	0, 846, 460, 461, 462, 463, 464, 466, 946, 467,
	0, 894, 468, 469, 470, 519, 926, 973, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 843, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 0, 0, 839, 840, 899, 856, 857,
	858, 854, 855, 868, 869, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 948, 873, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 914, 893, 925,
	883, 924, 923, 0, 233, 885, 884, 236, 237, 238,
	875, 947, 239, 983, 984, 485, 0, 240, 954, 0,
	937, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 256, 940, 938, 939, 944, 942, 941, 943,
	257, 258, 259, 260, 928, 262, 921, 920, 845, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 919, 269,
	0, 270, 0, 271, 272, 0, 273, 851, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 974, 975, 864,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 918,
	916, 917, 0, 289, 0, 290, 0, 0, 958, 291,
	292, 0, 293, 981, 0, 874, 294, 0, 295, 296,
	297, 298, 949, 950, 953, 350, 960, 299, 300, 0,
	301, 302, 895, 0, 0, 217, 303, 305, 312, 0,
	959, 306, 907, 898, 909, 911, 912, 913, 908, 0,
	900, 0, 313, 961, 951, 962, 314, 315, 316, 963,
	933, 934, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 982, 964, 327, 328, 965, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 887, 341, 966, 344,
	345, 347, 346, 842, 218, 967, 348, 865, 952, 349,
	922, 351, 352, 0, 896, 354, 897, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 968, 362, 969,
	976, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 977, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 915, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 970, 398, 399, 400,
	401, 852, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 888, 889, 891, 892, 415,
	421, 422, 423, 945, 424, 404, 405, 425, 426, 971,
	427, 428, 910, 890, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 956, 436, 437, 438, 978, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 886,
	0, 450, 929, 930, 931, 932, 0, 457, 0, 451,
	452, 979, 453, 980, 863, 454, 455, 456, 0, 458,
	459, 0, 846, 460, 461, 462, 463, 464, 466, 946,
	467, 0, 894, 468, 469, 470, 519, 926, 973, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 843, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 0, 0, 839, 840, 1594, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 0, 867,
	899, 856, 857, 858, 854, 855, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 983, 984, 485, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 845, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	851, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	974, 975, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	2166, 958, 291, 292, 0, 293, 981, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 982, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 346, 842, 218, 967, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	968, 362, 969, 976, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 977, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 915,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 970,
	398, 399, 400, 401, 852, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 888, 889,
	891, 892, 415, 421, 422, 423, 945, 424, 404, 405,
	425, 426, 971, 427, 428, 910, 890, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 956, 436, 437, 438,
	978, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 886, 0, 450, 929, 930, 931, 932, 0,
	457, 0, 451, 452, 979, 453, 980, 863, 454, 455,
	456, 0, 458, 459, 0, 846, 460, 461, 462, 463,
	464, 466, 946, 467, 0, 894, 468, 469, 470, 519,
	926, 973, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 843, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 839,
	840, 899, 856, 857, 858, 854, 855, 868, 869, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	948, 873, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 914, 893, 925, 883, 924, 923, 0, 233, 885,
	884, 236, 237, 238, 875, 947, 239, 983, 984, 485,
	0, 240, 954, 0, 937, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 957, 255, 256, 940, 938, 939,
	944, 942, 941, 943, 257, 258, 259, 260, 928, 262,
	921, 920, 845, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 919, 269, 0, 270, 0, 271, 272, 0,
	273, 851, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 974, 975, 864, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 918, 916, 917, 0, 289, 0, 290,
	0, 0, 958, 291, 292, 0, 293, 981, 0, 874,
	294, 0, 295, 296, 297, 298, 949, 950, 953, 350,
	960, 299, 300, 0, 301, 302, 895, 0, 0, 217,
	303, 305, 312, 0, 959, 306, 907, 898, 909, 911,
	912, 913, 908, 0, 900, 0, 313, 961, 951, 962,
	314, 315, 316, 963, 933, 934, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 982, 964,
	327, 328, 965, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	887, 341, 966, 344, 345, 347, 346, 842, 218, 967,
	348, 865, 952, 349, 922, 351, 352, 0, 896, 354,
	897, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 968, 362, 969, 976, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 977, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	915, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	970, 398, 399, 400, 401, 852, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 888,
	889, 891, 892, 415, 421, 422, 423, 945, 424, 404,
	405, 425, 426, 971, 427, 428, 910, 890, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 956, 436, 437,
	438, 978, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 886, 0, 450, 929, 930, 931, 932,
	0, 457, 0, 451, 452, 979, 453, 980, 863, 454,
	455, 456, 0, 458, 459, 0, 846, 460, 461, 462,
	463, 464, 466, 946, 467, 0, 894, 468, 469, 470,
	519, 926, 973, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 843, 0, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	839, 840, 0, 0, 0, 0, 0, 0, 0, 869,
	1532, 0, 2171, 867, 899, 856, 857, 858, 854, 855,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 948, 873, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 914, 893, 925, 883, 924, 923,
	0, 233, 885, 884, 236, 237, 238, 875, 947, 239,
	983, 984, 485, 0, 240, 954, 0, 937, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 256,
	940, 938, 939, 944, 942, 941, 943, 257, 258, 259,
	260, 928, 262, 921, 920, 845, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 919, 269, 0, 270, 0,
	271, 272, 0, 273, 851, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 974, 975, 864, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 918, 916, 917, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	981, 0, 874, 294, 0, 295, 296, 297, 298, 949,
	950, 953, 350, 960, 299, 300, 0, 301, 302, 895,
	0, 0, 217, 303, 305, 312, 0, 959, 306, 907,
	898, 909, 911, 912, 913, 908, 0, 900, 0, 313,
	961, 951, 962, 314, 315, 316, 963, 933, 934, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 982, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 887, 341, 966, 344, 345, 347, 346,
	842, 218, 967, 348, 865, 952, 349, 922, 351, 352,
	0, 896, 354, 897, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 968, 362, 969, 976, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	977, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 915, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 970, 398, 399, 400, 401, 852, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 888, 889, 891, 892, 415, 421, 422, 423,
	945, 424, 404, 405, 425, 426, 971, 427, 428, 910,
	890, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	956, 436, 437, 438, 978, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 886, 0, 450, 929,
	930, 931, 932, 0, 457, 0, 451, 452, 979, 453,
	980, 863, 454, 455, 456, 0, 458, 459, 0, 846,
	460, 461, 462, 463, 464, 466, 946, 467, 0, 894,
	468, 469, 470, 519, 926, 973, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	843, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 839, 840, 0, 0, 0, 0, 0,
	0, 0, 869, 0, 0, 2169, 867, 899, 856, 857,
	858, 854, 855, 868, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 948, 873, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 914, 893, 925,
	883, 924, 923, 0, 233, 885, 884, 236, 237, 238,
	875, 947, 239, 983, 984, 485, 0, 240, 954, 0,
	937, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 256, 940, 938, 939, 944, 942, 941, 943,
	257, 258, 259, 260, 928, 262, 921, 920, 845, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 919, 269,
	0, 270, 0, 271, 272, 0, 273, 851, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 974, 975, 864,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 918,
	916, 917, 0, 289, 0, 290, 0, 0, 958, 291,
	292, 0, 293, 981, 0, 874, 294, 0, 295, 296,
	297, 298, 949, 950, 953, 350, 960, 299, 300, 0,
	301, 302, 895, 0, 0, 217, 303, 305, 312, 0,
	959, 306, 907, 898, 909, 911, 912, 913, 908, 0,
	900, 0, 313, 961, 951, 962, 314, 315, 316, 963,
	933, 934, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 982, 964, 327, 328, 965, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 887, 341, 966, 344,
	345, 347, 346, 842, 218, 967, 348, 865, 952, 349,
	922, 351, 352, 0, 896, 354, 897, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 968, 362, 969,
	976, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 977, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 915, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 970, 398, 399, 400,
	401, 852, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 888, 889, 891, 892, 415,
	421, 422, 423, 945, 424, 404, 405, 425, 426, 971,
	427, 428, 910, 890, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 956, 436, 437, 438, 978, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 886,
	0, 450, 929, 930, 931, 932, 0, 457, 0, 451,
	452, 979, 453, 980, 863, 454, 455, 456, 0, 458,
	459, 0, 846, 460, 461, 462, 463, 464, 466, 946,
	467, 0, 894, 468, 469, 470, 519, 926, 973, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 843, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 0, 0, 839, 840, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 2157, 867,
	899, 856, 857, 858, 854, 855, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 983, 984, 485, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 845, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	851, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	974, 975, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 981, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 982, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 346, 842, 218, 967, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	968, 362, 969, 976, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 977, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 915,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 970,
	398, 399, 400, 401, 852, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 888, 889,
	891, 892, 415, 421, 422, 423, 945, 424, 404, 405,
	425, 426, 971, 427, 428, 910, 890, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 956, 436, 437, 438,
	978, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 886, 0, 450, 929, 930, 931, 932, 0,
	457, 0, 451, 452, 979, 453, 980, 863, 454, 455,
	456, 0, 458, 459, 0, 846, 460, 461, 462, 463,
	464, 466, 946, 467, 0, 894, 468, 469, 470, 519,
	926, 973, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 843, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 869, 0,
	0, 2146, 867, 899, 856, 857, 858, 854, 855, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 948, 873, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 914, 893, 925, 883, 924, 923, 0,
	233, 885, 884, 236, 237, 238, 875, 947, 239, 983,
	984, 485, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	928, 262, 921, 920, 845, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 919, 269, 0, 270, 0, 271,
	272, 0, 273, 851, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 974, 975, 864, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 918, 916, 917, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 981,
	0, 874, 294, 0, 295, 296, 297, 298, 949, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 895, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 907, 898,
	909, 911, 912, 913, 908, 0, 900, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 933, 934, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	982, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 887, 341, 966, 344, 345, 347, 346, 842,
	218, 967, 348, 865, 952, 349, 922, 351, 352, 0,
	896, 354, 897, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 968, 362, 969, 976, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 977,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 915, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 970, 398, 399, 400, 401, 852, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 888, 889, 891, 892, 415, 421, 422, 423, 945,
	424, 404, 405, 425, 426, 971, 427, 428, 910, 890,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 956,
	436, 437, 438, 978, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 886, 0, 450, 929, 930,
	931, 932, 0, 457, 0, 451, 452, 979, 453, 980,
	863, 454, 455, 456, 0, 458, 459, 0, 846, 460,
	461, 462, 463, 464, 466, 946, 467, 0, 894, 468,
	469, 470, 519, 926, 973, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 843,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 839, 840, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 2144, 867, 2135, 2142, 857, 858,
	854, 855, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 983, 984, 485, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 2138, 921, 920, 845, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 851, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 974, 975, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 981, 0, 874, 294, 0, 295, 296, 297,
	2139, 949, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 895, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 982, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 2140, 2137, 342, 887, 341, 966, 344, 345,
	347, 346, 842, 218, 967, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 976,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 977, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 915, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	852, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	2141, 0, 419, 420, 888, 889, 891, 892, 415, 421,
	422, 423, 945, 424, 404, 405, 425, 426, 971, 427,
	428, 910, 890, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 956, 436, 437, 438, 978, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 886, 0,
	450, 929, 930, 931, 932, 0, 457, 0, 451, 452,
	979, 453, 980, 863, 454, 455, 456, 0, 458, 459,
	0, 846, 460, 461, 462, 463, 464, 466, 946, 467,
	0, 894, 468, 469, 470, 519, 926, 973, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	2136, 477, 843, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 0, 0, 839, 840, 0, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 2132, 867, 2135,
	2142, 857, 858, 854, 855, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 873,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 914,
	893, 925, 883, 924, 923, 0, 233, 885, 884, 236,
	237, 238, 875, 947, 239, 983, 984, 485, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 928, 2138, 921, 920,
	845, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	919, 269, 0, 270, 0, 271, 272, 0, 273, 851,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 974,
	975, 864, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 918, 916, 917, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 981, 0, 874, 294, 0,
	295, 296, 297, 2139, 949, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 895, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 907, 898, 909, 911, 912, 913,
	908, 0, 900, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 933, 934, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 982, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 2140, 2137, 342, 887, 341,
	966, 344, 345, 347, 346, 842, 218, 967, 348, 865,
	952, 349, 922, 351, 352, 0, 896, 354, 897, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 968,
	362, 969, 976, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 977, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 915, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 970, 398,
	399, 400, 401, 852, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 2141, 0, 419, 420, 888, 889, 891,
	892, 415, 421, 422, 423, 945, 424, 404, 405, 425,
	426, 971, 427, 428, 910, 890, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 956, 436, 437, 438, 978,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 886, 0, 450, 929, 930, 931, 932, 0, 457,
	0, 451, 452, 979, 453, 980, 863, 454, 455, 456,
	0, 458, 459, 0, 846, 460, 461, 462, 463, 464,
	466, 946, 467, 0, 894, 468, 469, 470, 519, 926,
	973, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 2136, 477, 843, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 839, 840,
	899, 856, 857, 858, 854, 855, 868, 869, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 983, 984, 485, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 845, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	851, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	974, 975, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 981, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 982, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 346, 842, 218, 967, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	968, 362, 969, 976, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 977, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 915,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 970,
	398, 399, 400, 401, 852, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 888, 889,
	891, 892, 415, 421, 422, 423, 945, 424, 404, 405,
	425, 426, 971, 427, 428, 910, 890, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 956, 436, 437, 438,
	978, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 886, 0, 450, 929, 930, 931, 932, 0,
	457, 0, 451, 452, 979, 453, 980, 863, 454, 455,
	456, 0, 458, 459, 0, 846, 460, 461, 462, 463,
	464, 466, 946, 467, 0, 894, 468, 469, 470, 519,
	926, 973, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 843, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 839,
	840, 0, 0, 0, 0, 0, 1540, 0, 869, 0,
	0, 0, 867, 899, 856, 857, 858, 854, 855, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 1975, 224, 0, 0, 0,
	0, 0, 948, 873, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 914, 893, 925, 883, 924, 923, 0,
	233, 885, 884, 236, 237, 238, 875, 947, 239, 983,
	984, 485, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	928, 262, 921, 920, 845, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 919, 269, 0, 270, 0, 271,
	272, 0, 273, 851, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 974, 975, 864, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 918, 916, 917, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 981,
	0, 874, 294, 0, 295, 296, 297, 298, 949, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 895, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 907, 898,
	909, 911, 912, 913, 908, 0, 900, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 933, 934, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	982, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 887, 341, 966, 344, 345, 347, 346, 842,
	218, 967, 348, 865, 952, 349, 922, 351, 352, 0,
	896, 354, 897, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 968, 362, 969, 976, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 977,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 915, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 970, 398, 399, 400, 401, 852, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 888, 889, 891, 892, 415, 421, 422, 423, 945,
	424, 404, 405, 425, 426, 971, 427, 428, 910, 890,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 956,
	436, 437, 438, 978, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 886, 0, 450, 929, 930,
	931, 932, 0, 457, 0, 451, 452, 979, 453, 980,
	863, 454, 455, 456, 0, 458, 459, 0, 846, 460,
	461, 462, 463, 464, 466, 946, 467, 0, 894, 468,
	469, 470, 519, 926, 973, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 843,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 839, 840, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 1214, 867, 899, 856, 857, 858,
	854, 855, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 983, 984, 485, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 262, 921, 920, 845, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 851, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 974, 975, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 981, 0, 874, 294, 0, 295, 296, 297,
	298, 1213, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 895, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 982, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 887, 341, 966, 344, 345,
	347, 346, 842, 218, 967, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 976,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 977, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 915, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	852, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 888, 889, 891, 892, 415, 421,
	422, 423, 945, 424, 404, 405, 425, 426, 971, 427,
	428, 910, 890, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 956, 436, 437, 438, 978, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 886, 0,
	450, 929, 930, 931, 932, 0, 457, 0, 451, 452,
	979, 453, 980, 863, 454, 455, 456, 0, 458, 459,
	0, 846, 460, 461, 462, 463, 464, 466, 946, 467,
	0, 894, 468, 469, 470, 519, 926, 973, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 843, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 0, 0, 839, 840, 0, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 1208, 867, 899,
	856, 857, 858, 854, 855, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 873,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 914,
	893, 925, 883, 924, 923, 0, 233, 885, 884, 236,
	237, 238, 875, 947, 239, 983, 984, 485, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 928, 262, 921, 920,
	845, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	919, 269, 0, 270, 0, 271, 272, 0, 273, 851,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 974,
	975, 864, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 918, 916, 917, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 981, 0, 874, 294, 0,
	295, 296, 297, 298, 1207, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 895, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 907, 898, 909, 911, 912, 913,
	908, 0, 900, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 933, 934, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 982, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 887, 341,
	966, 344, 345, 347, 346, 842, 218, 967, 348, 865,
	952, 349, 922, 351, 352, 0, 896, 354, 897, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 968,
	362, 969, 976, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 977, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 915, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 970, 398,
	399, 400, 401, 852, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 888, 889, 891,
	892, 415, 421, 422, 423, 945, 424, 404, 405, 425,
	426, 971, 427, 428, 910, 890, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 956, 436, 437, 438, 978,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 886, 0, 450, 929, 930, 931, 932, 0, 457,
	0, 451, 452, 979, 453, 980, 863, 454, 455, 456,
	0, 458, 459, 0, 846, 460, 461, 462, 463, 464,
	466, 946, 467, 0, 894, 468, 469, 470, 519, 926,
	973, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 843, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 839, 840,
	0, 0, 0, 0, 0, 0, 0, 869, 0, 0,
	1203, 867, 899, 856, 857, 858, 854, 855, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 948, 873, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 914, 893, 925, 883, 924, 923, 0, 233,
	885, 884, 236, 237, 238, 875, 947, 239, 983, 984,
	485, 0, 240, 954, 0, 937, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 256, 940, 938,
	939, 944, 942, 941, 943, 257, 258, 259, 260, 928,
	262, 921, 920, 845, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 919, 269, 0, 270, 0, 271, 272,
	0, 273, 851, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 974, 975, 864, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 918, 916, 917, 0, 289, 0,
	290, 0, 0, 958, 291, 292, 0, 293, 981, 0,
	874, 294, 0, 295, 296, 297, 298, 949, 950, 953,
	350, 960, 299, 300, 0, 301, 302, 895, 0, 0,
	217, 303, 305, 312, 0, 959, 306, 907, 898, 909,
	911, 912, 913, 908, 0, 900, 0, 313, 961, 951,
	962, 314, 315, 316, 963, 933, 934, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 982,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 887, 341, 966, 344, 345, 347, 346, 842, 218,
	967, 348, 865, 952, 349, 922, 351, 352, 0, 896,
	354, 897, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 968, 362, 969, 976, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 977, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 915, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 970, 398, 399, 400, 401, 852, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	888, 889, 891, 892, 415, 421, 422, 423, 945, 424,
	404, 405, 425, 426, 971, 427, 428, 910, 890, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 956, 436,
	437, 438, 978, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 886, 0, 450, 929, 930, 931,
	932, 0, 457, 0, 451, 452, 979, 453, 980, 863,
	454, 455, 456, 0, 458, 459, 0, 846, 460, 461,
	462, 463, 464, 466, 946, 467, 0, 894, 468, 469,
	470, 519, 926, 973, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 843, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 839, 840, 899, 856, 857, 858, 854, 855, 868,
	869, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 948, 873, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 914, 893, 925, 883, 924, 923, 0,
	233, 885, 884, 236, 237, 238, 875, 947, 239, 983,
	984, 485, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	928, 262, 921, 920, 845, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 919, 269, 0, 270, 0, 271,
	272, 0, 273, 851, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 974, 975, 864, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 918, 916, 917, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 981,
	0, 874, 294, 0, 295, 296, 297, 298, 949, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 895, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 907, 898,
	909, 911, 912, 913, 908, 0, 900, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 933, 934, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	982, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 887, 341, 966, 344, 345, 347, 346, 842,
	218, 967, 348, 865, 952, 349, 922, 351, 352, 0,
	896, 354, 897, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 968, 362, 969, 976, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 977,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 915, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 970, 398, 399, 400, 401, 852, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 888, 889, 891, 892, 415, 421, 422, 423, 945,
	424, 404, 405, 425, 426, 971, 427, 428, 910, 890,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 956,
	436, 437, 438, 978, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 886, 0, 450, 929, 930,
	931, 932, 0, 457, 0, 451, 452, 979, 453, 980,
	863, 454, 455, 456, 0, 458, 459, 0, 846, 460,
	461, 462, 463, 464, 466, 946, 467, 0, 894, 468,
	469, 470, 519, 926, 973, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 843,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 839, 840, 899, 856, 857, 858, 854, 855,
	868, 869, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 948, 873, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 914, 893, 925, 883, 924, 923,
	0, 233, 885, 884, 236, 237, 238, 875, 947, 239,
	983, 984, 485, 0, 240, 954, 0, 937, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 3519,
	940, 938, 939, 944, 942, 941, 943, 257, 258, 259,
	260, 928, 262, 921, 920, 845, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 919, 269, 0, 270, 0,
	271, 272, 0, 273, 851, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 974, 975, 864, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 918, 916, 917, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	981, 0, 874, 294, 0, 295, 296, 297, 298, 949,
	950, 953, 350, 960, 299, 300, 0, 301, 302, 895,
	0, 0, 217, 303, 305, 312, 0, 959, 306, 907,
	898, 909, 911, 912, 913, 908, 0, 900, 0, 313,
	961, 951, 962, 314, 315, 316, 963, 933, 934, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 982, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 887, 341, 966, 344, 345, 347, 346,
	842, 218, 967, 348, 865, 952, 349, 922, 351, 352,
	0, 896, 354, 897, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 968, 362, 969, 976, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	977, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 915, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 970, 398, 399, 400, 401, 852, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 888, 889, 891, 892, 415, 421, 422, 423,
	945, 424, 404, 405, 425, 426, 971, 427, 428, 910,
	890, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	956, 436, 437, 438, 978, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 886, 0, 450, 929,
	930, 931, 932, 0, 457, 0, 451, 452, 979, 453,
	980, 863, 454, 455, 456, 0, 3518, 459, 0, 846,
	460, 461, 462, 463, 464, 466, 946, 467, 0, 894,
	468, 469, 470, 519, 926, 973, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	843, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 839, 840, 899, 856, 857, 858, 854,
	855, 868, 869, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 948, 873, 0, 0, 0, 225,
	227, 226, 228, 229, 3517, 914, 893, 925, 883, 924,
	923, 0, 233, 885, 884, 236, 237, 238, 875, 947,
	239, 983, 984, 485, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	3519, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 928, 262, 921, 920, 845, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 919, 269, 0, 270,
	0, 271, 272, 0, 273, 851, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 974, 975, 864, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 918, 916, 917,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 981, 0, 874, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	895, 0, 0, 217, 303, 305, 312, 0, 959, 306,
	907, 898, 909, 911, 912, 913, 908, 0, 900, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 933, 934,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 982, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 887, 341, 966, 344, 345, 347,
	346, 842, 218, 967, 348, 865, 952, 349, 922, 351,
	352, 0, 896, 354, 897, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 968, 362, 969, 976, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 977, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 915, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 970, 398, 399, 400, 401, 852,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 888, 889, 891, 892, 415, 421, 422,
	423, 945, 424, 404, 405, 425, 426, 971, 427, 428,
	910, 890, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 956, 436, 437, 438, 978, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 886, 0, 450,
	929, 930, 931, 932, 0, 457, 0, 451, 452, 979,
	453, 980, 863, 454, 455, 456, 0, 3518, 459, 0,
	846, 460, 461, 462, 463, 464, 466, 946, 467, 0,
	894, 468, 469, 470, 519, 926, 973, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 843, 0, 0, 0, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 839, 840, 899, 856, 857, 858,
	854, 855, 868, 869, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 983, 984, 485, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 262, 921, 920, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 851, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 974, 975, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 981, 0, 874, 294, 0, 295, 296, 297,
	298, 949, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 895, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 982, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 887, 341, 966, 344, 345,
	347, 346, 0, 218, 967, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 976,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 977, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 915, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	852, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 888, 889, 891, 892, 415, 421,
	422, 423, 945, 424, 404, 405, 425, 426, 971, 427,
	428, 910, 890, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 956, 436, 437, 438, 978, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 886, 0,
	450, 929, 930, 931, 932, 0, 457, 0, 451, 452,
	979, 453, 980, 863, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 946, 467,
	0, 894, 468, 469, 470, 519, 926, 973, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 2154, 0,
	0, 0, 0, 0, 0, 2152, 2153, 899, 856, 857,
	858, 854, 855, 868, 869, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 948, 873, 0, 0,
	0, 225, 227, 226, 228, 229, 0, 914, 893, 925,
	883, 924, 923, 0, 233, 885, 884, 236, 237, 238,
	875, 947, 239, 983, 984, 485, 0, 240, 954, 0,
	937, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 3519, 940, 938, 939, 944, 942, 941, 943,
	257, 258, 259, 260, 928, 262, 921, 920, 845, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 919, 269,
	0, 270, 0, 271, 272, 0, 273, 851, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 974, 975, 864,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 918,
	916, 917, 0, 289, 0, 290, 0, 0, 958, 291,
	292, 0, 293, 981, 0, 874, 294, 0, 295, 296,
	297, 298, 949, 950, 953, 350, 0, 299, 300, 0,
	301, 302, 895, 0, 0, 217, 303, 305, 312, 0,
	959, 306, 907, 898, 909, 911, 912, 913, 908, 0,
	900, 0, 313, 0, 951, 0, 314, 315, 316, 963,
	933, 934, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 982, 964, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 887, 341, 966, 344,
	345, 347, 346, 842, 218, 0, 348, 865, 952, 349,
	922, 351, 352, 0, 896, 354, 897, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 968, 362, 969,
	976, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 977, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 915, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 970, 398, 399, 400,
	401, 852, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 888, 889, 891, 892, 415,
	421, 422, 423, 945, 424, 404, 405, 425, 426, 0,
	427, 428, 910, 890, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 956, 436, 437, 438, 978, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 886,
	0, 450, 929, 930, 931, 932, 0, 457, 0, 451,
	452, 979, 453, 980, 863, 454, 455, 456, 0, 3518,
	459, 0, 846, 460, 461, 462, 463, 464, 466, 946,
	467, 0, 894, 468, 469, 470, 519, 926, 973, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 1020, 0, 0, 839, 840, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 0, 867,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 948, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 947, 239, 483,
	484, 485, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 974, 975, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 981,
	0, 494, 294, 0, 295, 296, 297, 298, 949, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1007, 325, 324, 0, 326,
	982, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 966, 344, 345, 347, 346, 0,
	218, 967, 348, 0, 952, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 1012, 357, 358, 359, 0, 0,
	360, 361, 505, 968, 362, 969, 976, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 977,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 970, 398, 399, 400, 401, 510, 1014, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 182, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 945,
	424, 404, 405, 425, 426, 971, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 978, 0, 442, 443, 441, 184, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 979, 453, 980,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 946, 467, 0, 465, 468,
	469, 470, 1324, 520, 521, 0, 472, 471, 522, 1020,
	0, 0, 176, 473, 474, 523, 475, 476, 477, 0,
	177, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 1004,
	0, 1626, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 947, 239, 483, 484, 485, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 974,
	975, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 981, 0, 494, 294, 0,
	295, 296, 297, 298, 949, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1007, 325, 324, 0, 326, 982, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	966, 344, 345, 347, 346, 0, 218, 967, 348, 0,
	952, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	1012, 357, 358, 359, 0, 0, 360, 361, 505, 968,
	362, 969, 976, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 977, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 970, 398,
	399, 400, 401, 510, 1014, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 182, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 945, 424, 404, 405, 425,
	426, 971, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 978,
	0, 442, 443, 441, 184, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 979, 453, 980, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 946, 467, 0, 465, 468, 469, 470, 1324, 520,
	521, 0, 472, 471, 522, 2614, 0, 1020, 176, 473,
	474, 523, 475, 476, 477, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 1004, 948, 1626, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 947, 239, 483, 484, 485, 0, 240, 954, 0,
	937, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 256, 940, 938, 939, 944, 942, 941, 943,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 974, 975, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 958, 291,
	292, 0, 293, 981, 0, 494, 294, 0, 295, 296,
	297, 298, 949, 950, 953, 350, 960, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	959, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 961, 951, 962, 314, 315, 316, 963,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1007,
	325, 324, 0, 326, 982, 964, 327, 328, 965, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 966, 344,
	345, 347, 346, 0, 218, 967, 348, 0, 952, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 1012, 357,
	358, 359, 0, 0, 360, 361, 505, 968, 362, 969,
	976, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 977, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 970, 398, 399, 400,
	401, 510, 1014, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 945, 424, 404, 405, 425, 426, 971,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 978, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 979, 453, 980, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 946,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 1003, 0, 1020, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 1004, 948, 1009, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 947,
	239, 483, 484, 485, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 974, 975, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 981, 0, 494, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 959, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1007, 325, 324,
	0, 326, 982, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	346, 0, 218, 967, 348, 0, 952, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 1012, 357, 358, 359,
	0, 0, 360, 361, 505, 968, 362, 969, 976, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 977, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 970, 398, 399, 400, 401, 510,
	1014, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 945, 424, 404, 405, 425, 426, 971, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 978, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 979,
	453, 980, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 946, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1020, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	948, 1004, 0, 1009, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 947, 239, 483, 484, 485,
	0, 240, 954, 0, 937, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 957, 255, 256, 940, 938, 939,
	944, 942, 941, 943, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 974, 975, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 958, 291, 292, 0, 293, 981, 0, 494,
	294, 0, 295, 296, 297, 298, 949, 950, 953, 350,
	960, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 959, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 961, 951, 962,
	314, 315, 316, 963, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1007, 325, 324, 0, 326, 982, 964,
	327, 328, 965, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 966, 344, 345, 347, 346, 0, 218, 967,
	348, 0, 952, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 1012, 357, 358, 359, 0, 0, 360, 361,
	505, 968, 362, 969, 976, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 977, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	970, 398, 399, 400, 401, 510, 1014, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 945, 424, 404,
	405, 425, 426, 971, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 978, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 979, 453, 980, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 946, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 1020, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 948, 1004, 0, 1009,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 947, 239, 483, 484, 485, 0, 240, 954, 0,
	937, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 256, 940, 938, 939, 944, 942, 941, 943,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 974, 975, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 958, 291,
	292, 0, 293, 981, 0, 494, 294, 0, 295, 296,
	297, 298, 949, 950, 953, 350, 960, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	959, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 961, 951, 962, 314, 315, 316, 963,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 982, 964, 327, 328, 965, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 966, 344,
	345, 347, 346, 0, 218, 967, 348, 0, 952, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 968, 362, 969,
	976, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 977, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 970, 398, 399, 400,
	401, 510, 1014, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 945, 424, 404, 405, 425, 426, 971,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 978, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 979, 453, 980, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 946,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 832, 0, 1178, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 1521, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 1082, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 960, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 959, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 961, 501, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	346, 0, 0, 967, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 968, 362, 969, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 970, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	182, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 971, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	184, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 1324, 520, 521, 0, 472, 471,
	522, 1321, 0, 1178, 176, 473, 474, 523, 475, 476,
	477, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 151, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 1082, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 960, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 959, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 961,
	501, 962, 314, 315, 316, 963, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 966, 344, 345, 347, 346, 0,
	0, 967, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 968, 362, 969, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 970, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 182, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 971, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 184, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 1324, 520, 521, 0, 472, 471, 522, 0,
	0, 0, 176, 473, 474, 523, 475, 476, 477, 0,
	177, 0, 0, 0, 0, 1178, 1177, 0, 0, 0,
	0, 1175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 1082, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 960, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 959, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 961, 501, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	346, 0, 0, 967, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 968, 362, 969, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 970, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 971, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 1178, 1177, 0, 0, 0, 0, 1175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 1805, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 1082, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 957, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 958, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	960, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 959, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 961, 501, 962,
	314, 315, 316, 963, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 964,
	327, 328, 965, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 966, 344, 345, 347, 346, 0, 0, 967,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 968, 362, 969, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	970, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 971, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 1178, 1177, 0,
	0, 0, 0, 1175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 2810,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	1082, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 958, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 960, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	959, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 961, 501, 962, 314, 315, 316, 963,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 964, 327, 328, 965, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 966, 344,
	345, 347, 346, 0, 0, 967, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 968, 362, 969,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 970, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 971,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 1020, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 948, 0, 0, 1330, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 947, 239, 483,
	484, 485, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 974, 975, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 981,
	0, 494, 294, 0, 295, 296, 297, 298, 949, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	982, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 966, 344, 345, 347, 346, 0,
	218, 967, 348, 0, 952, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 968, 362, 969, 976, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 977,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 970, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 945,
	424, 404, 405, 425, 426, 971, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 978, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 979, 453, 980,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 946, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 832,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 182, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 184, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	1324, 520, 521, 0, 472, 471, 522, 213, 0, 0,
	176, 473, 474, 523, 475, 476, 477, 0, 177, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 151,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 218, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 213, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 1631, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 213,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 2762,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 213, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 2388, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 213, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 2893, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 700, 0, 590,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 1896,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 596, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 218, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 595, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 0, 589, 0, 590, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	599, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 596, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 218, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 595, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 590, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 599,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 596,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 1926, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 595,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	590, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 599, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 596, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 218, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 595, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 213, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 599, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 1355, 0, 1178, 1177, 0, 0, 0, 0,
	1175, 0, 0, 0, 0, 0, 0, 599, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 1082, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 1354, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 960, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 959, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	961, 501, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 346,
	0, 0, 967, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 968, 362, 969, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 1353, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 970, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 1352, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 971, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	1319, 0, 1178, 1177, 0, 0, 0, 0, 1175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 1082, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 958, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 1318, 496, 497,
	350, 960, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 959, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 961, 501,
	962, 314, 315, 316, 963, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 966, 344, 345, 347, 346, 0, 0,
	967, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 968, 362, 969, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 970, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 971, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 1315, 0,
	1178, 1177, 0, 0, 0, 0, 1175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 1082, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 1314, 496, 497, 350, 960,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 959, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 961, 501, 962, 314,
	315, 316, 963, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 966, 344, 345, 347, 346, 0, 0, 967, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	968, 362, 969, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 970,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 971, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 1253, 0, 1178, 1177,
	0, 0, 0, 0, 1175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 1082, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 957, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 958,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 1252, 496, 497, 350, 960, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 959, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 961, 501, 962, 314, 315, 316,
	963, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 964, 327, 328, 965,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 966,
	344, 345, 347, 346, 0, 0, 967, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 968, 362,
	969, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 970, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	971, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 1250, 0, 1178, 1177, 0, 0,
	0, 0, 1175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 1082,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 1249, 496, 497, 350, 960, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 959,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 961, 501, 962, 314, 315, 316, 963, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 966, 344, 345,
	347, 346, 0, 0, 967, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 971, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 1171, 0, 1178, 1177, 0, 0, 0, 0,
	1175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 1082, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 1173,
	496, 497, 350, 960, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 959, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	961, 501, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 346,
	0, 0, 967, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 968, 362, 969, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 970, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 971, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	1178, 1177, 0, 0, 0, 0, 1175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 1082, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 960,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 959, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 961, 501, 962, 314,
	315, 316, 963, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 966, 344, 345, 347, 346, 0, 0, 967, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	968, 362, 969, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 970,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 971, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 1178, 1177, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 1082,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 1719, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 960, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 959,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 961, 501, 962, 314, 315, 316, 963, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 966, 344, 345,
	347, 346, 0, 0, 967, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 971, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 1178, 1177, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 1082, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 958, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 960, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 959, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 961, 501,
	962, 314, 315, 316, 963, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 966, 344, 345, 347, 346, 0, 0,
	967, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 968, 362, 969, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 970, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 971, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 1178, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 1082, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 960, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 959, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	961, 501, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 346,
	0, 0, 967, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 968, 362, 969, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 970, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 971, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 2277, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 2274, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 2424,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 2280, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 2421, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 2423, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 2420, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 2279, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 2422, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 2277, 240, 486,
	0, 0, 2271, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 2274, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 2280, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 2270, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 2279, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 2278, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 1408, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 1411, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 1409, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 1410,
	471, 522, 1166, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 1168,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 1012, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1163, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 1165, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 1012, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 1070, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 1072, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 218, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 1012, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 552, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 551, 223,
	541, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	544, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 545, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 546, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 540, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 541, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 544, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	545, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 546, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 218, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 1012,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 2353, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 1905, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 1838, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 1831, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 1830,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1826, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 1828, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 1308, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 1307, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 218, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 1305, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 1304, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 218, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 1302, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 1301, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 1298, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 1297,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1273, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 1188, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 1190, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 218, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 213, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 213, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 544, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 545, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 546,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 1933, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 1931, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 218, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 1929, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 218, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 692, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 691, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 690, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 2424, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	3226, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 531, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	530, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 529, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 2212, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 213, 2411, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 3017,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 213, 2411, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 2408, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 1912, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 1903, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	572, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 1048, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	1046, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 573, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 569, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 1049, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 568, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 1850, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 1849, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 572, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 562, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 573, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 569, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 1329, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 568, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 1312, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 1311, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 1261, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 1260,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1245, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 1182, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 572, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 1048, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 1046, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 573, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 569, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 1049, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 568, 514, 515, 516, 0, 457, 0,
	451, 1047, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 1030, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 572, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 562, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 560, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 561, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 573, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 563, 402, 0, 403, 407, 408, 569, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 564, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 568, 514, 515, 516, 0, 457, 0,
	451, 566, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 556, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 557, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 554, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	548, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 526, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 213, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 213, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 2702,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 2700, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 2688, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 2371, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 213, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	557, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 213, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 1862, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 0, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 1281, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 1223, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	986, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 213, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 0, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	0, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 0, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 0, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 1457, 1458,
	0, 1490, 1491, 1492, 1500, 1501, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 1488, 0,
	0, 0, 0, 0, 0, 1460, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 1458, 0, 1490, 1491, 1492,
	1500, 1501, 1502, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 1493, 1488, 0, 0, 0, 0, 1476,
	0, 1460, 0, 0, 0, 0, 1506, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 1483, 1484, 1485,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 1507, 0, 0, 0, 1487, 1489, 0,
	0, 0, 1482, 1483, 1484, 1485, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 1503, 0, 1504,
	0, 0, 0, 0, 0, 0, 1474, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 1507,
	0, 0, 1495, 1487, 1489, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1503, 0, 1504, 0, 0, 0, 1505,
	0, 0, 1474, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 1495, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 1494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 1458, 0, 1490, 1491, 1492, 1500, 1501,
	1502, 0, 0, 1498, 0, 1486, 0, 0, 0, 0,
	0, 1493, 1488, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 1481, 1506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 1498,
	0, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	1471, 1472, 1478, 1499, 1477, 1473, 0, 1470, 1468, 1469,
	1461, 1462, 1463, 1464, 1466, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 2865, 0, 0, 0, 0, 0,
	1482, 1483, 1484, 1485, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 1496, 0, 0, 1471, 1472, 1478, 1499,
	1477, 1473, 0, 1470, 1468, 1469, 1461, 1462, 1463, 1464,
	1466, 1467, 0, 0, 1497, 0, 0, 1507, 0, 0,
	2558, 1487, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 1504, 0, 0, 0, 0, 0, 0,
	1474, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 1457, 1458, 0, 1490, 1491, 1492, 1500,
	1501, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 1488, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 0, 0, 1506, 0, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 1481, 0, 0, 0, 0, 0, 1479, 0, 0,
	0, 0, 0, 0, 1476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 1458, 1498, 1490, 1491,
	1492, 1500, 1501, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 1488, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 0, 1506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1482, 1483, 1484, 1485, 0, 0, 0, 0, 0,
	1459, 1465, 0, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 0, 0, 1507, 0,
	0, 1496, 1487, 1489, 1471, 1472, 1478, 1499, 1477, 1473,
	0, 1470, 1468, 1469, 1461, 1462, 1463, 1464, 1466, 1467,
	0, 0, 1503, 0, 1504, 0, 0, 0, 2557, 0,
	0, 1474, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 1483, 1484, 1485, 1495, 0, 0,
	0, 0, 0, 1465, 0, 0, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 1497, 0, 0,
	1507, 0, 0, 0, 1487, 1489, 0, 0, 0, 0,
	0, 1494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 0, 1504, 0, 0, 0,
	0, 0, 0, 1474, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 1486, 0, 0, 0, 1480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1481, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 0, 1457, 1458, 1498, 1490,
	1491, 1492, 1500, 1501, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 1488, 0, 0, 0,
	0, 0, 0, 1460, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 1481, 0, 0, 0, 0, 0,
	1479, 0, 0, 0, 0, 0, 0, 1476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 0, 1496, 0, 0, 1471, 1472, 1478, 1499, 1477,
	1473, 0, 1470, 1468, 1469, 1461, 1462, 1463, 1464, 1466,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 2554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 1483, 1484, 1485, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1497, 0,
	0, 1507, 0, 0, 1496, 1487, 1489, 1471, 1472, 1478,
	1499, 1477, 1473, 0, 1470, 1468, 1469, 1461, 1462, 1463,
	1464, 1466, 1467, 0, 0, 1503, 0, 1504, 0, 0,
	0, 2553, 0, 0, 1474, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1494, 0, 0, 1457, 1458, 0,
	1490, 1491, 1492, 1500, 1501, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 1488, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 1481, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 1476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	1458, 1498, 1490, 1491, 1492, 1500, 1501, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 1488,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 1483, 1484, 1485, 0,
	0, 0, 0, 0, 1459, 1465, 0, 0, 0, 0,
	0, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 1507, 0, 0, 1496, 1487, 1489, 1471, 1472,
	1478, 1499, 1477, 1473, 0, 1470, 1468, 1469, 1461, 1462,
	1463, 1464, 1466, 1467, 0, 0, 1503, 0, 1504, 0,
	0, 0, 2552, 0, 0, 1474, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 1483, 1484,
	1485, 1495, 0, 0, 0, 0, 0, 1465, 0, 0,
	1480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 1497, 0, 0, 1507, 0, 0, 0, 1487, 1489,
	0, 0, 0, 0, 0, 1494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	1504, 0, 0, 0, 0, 0, 0, 1474, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 1486, 0,
	0, 0, 1480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 0, 0,
	0, 0, 1498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 1496, 0, 0, 1471,
	1472, 1478, 1499, 1477, 1473, 0, 1470, 1468, 1469, 1461,
	1462, 1463, 1464, 1466, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 2087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 1458, 0, 1490, 1491, 1492, 1500, 1501,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 1488, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 0, 1506, 0, 0, 0, 1496, 0,
	0, 1471, 1472, 1478, 1499, 1477, 1473, 0, 1470, 1468,
	1469, 1461, 1462, 1463, 1464, 1466, 1467, 1459, 0, 0,
	0, 3473, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 0, 1457,
	1458, 0, 1490, 1491, 1492, 1500, 1501, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 1488,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 1483, 1484, 1485, 1459, 0, 0, 0, 0, 0,
	1465, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 0, 1507, 0, 0,
	0, 1487, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 1504, 0, 0, 0, 0, 0, 0,
	1474, 1475, 0, 0, 0, 0, 0, 1482, 1483, 1484,
	1485, 0, 0, 0, 0, 0, 1495, 1465, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 1505, 1507, 0, 0, 0, 1487, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 1457, 1458, 0, 0, 0, 1503, 0,
	1504, 0, 0, 0, 0, 0, 0, 1474, 1475, 0,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 1480, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	1505, 1481, 0, 0, 0, 0, 0, 1479, 0, 0,
	0, 0, 0, 0, 1476, 0, 0, 1494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2485, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1482, 1483, 1484, 1485, 0, 0, 0, 1481, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 1496, 1487, 1489, 1471, 1472, 1478, 1499, 1477, 1473,
	0, 1470, 1468, 1469, 1461, 1462, 1463, 1464, 1466, 1467,
	0, 0, 0, 0, 3469, 0, 0, 0, 0, 0,
	0, 1474, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 1458, 0, 1490, 1491, 1492, 1500, 1501,
	1502, 0, 0, 0, 0, 0, 1480, 0, 0, 0,
	0, 1493, 1488, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 0, 1506, 0, 0, 0, 1496, 0,
	0, 1471, 1472, 1478, 1499, 1477, 1473, 0, 1470, 1468,
	1469, 1461, 1462, 1463, 1464, 1466, 1467, 1459, 0, 0,
	0, 3398, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 0, 1457,
	1458, 0, 1490, 1491, 1492, 1500, 1501, 1502, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 1493, 1488,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 1506, 1481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 1483, 1484, 1485, 1459, 0, 0, 0, 0, 0,
	1465, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 0, 1507, 0, 0,
	0, 1487, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 1504, 0, 0, 0, 0, 0, 0,
	1474, 1475, 0, 0, 0, 0, 0, 1482, 1483, 1484,
	1485, 0, 0, 0, 0, 0, 1495, 1465, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 1477,
	1473, 0, 1470, 1468, 1469, 1461, 1462, 1463, 1464, 1466,
	1467, 1497, 0, 1505, 1507, 0, 0, 0, 1487, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 1457, 1458, 0, 0, 0, 1503, 0,
	1504, 0, 0, 0, 0, 0, 0, 1474, 1475, 0,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 1480, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	1505, 1481, 0, 0, 0, 0, 0, 1479, 0, 0,
	0, 0, 0, 0, 1476, 0, 0, 1494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1482, 1483, 1484, 1485, 0, 0, 0, 1481, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 1496, 1487, 1489, 1471, 1472, 1478, 1499, 1477, 1473,
	0, 1470, 1468, 1469, 1461, 1462, 1463, 1464, 1466, 1467,
	0, 0, 0, 0, 3397, 0, 0, 0, 0, 0,
	0, 1474, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 1458, 0, 1490, 1491, 1492, 1500, 1501,
	1502, 0, 0, 0, 0, 0, 1480, 0, 0, 0,
	0, 1493, 1488, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 0, 1506, 0, 0, 0, 1496, 0,
	0, 1471, 1472, 1478, 1499, 1477, 1473, 0, 1470, 1468,
	1469, 1461, 1462, 1463, 1464, 1466, 1467, 1459, 0, 0,
	0, 3287, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 0, 1457,
	1458, 0, 1490, 1491, 1492, 1500, 1501, 1502, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 1493, 1488,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 1506, 1481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 1483, 1484, 1485, 1459, 0, 0, 0, 0, 0,
	1465, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 0, 1507, 0, 0,
	0, 1487, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 1504, 0, 0, 0, 0, 0, 0,
	1474, 1475, 0, 0, 0, 0, 0, 1482, 1483, 1484,
	1485, 0, 0, 0, 0, 0, 1495, 1465, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 1477,
	1473, 0, 1470, 1468, 1469, 1461, 1462, 1463, 1464, 1466,
	1467, 1497, 0, 1505, 1507, 0, 0, 0, 1487, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	1504, 0, 0, 0, 0, 0, 0, 1474, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 1480, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 1471, 1472, 1478, 1499, 1477, 1473,
	0, 1470, 1468, 1469, 1461, 1462, 1463, 1464, 1466, 1467,
	0, 0, 0, 0, 3188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 1458, 0, 1490, 1491, 1492, 1500, 1501,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 1488, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 0, 1506, 0, 0, 0, 1496, 0,
	0, 1471, 1472, 1478, 1499, 1477, 1473, 0, 1470, 1468,
	1469, 1461, 1462, 1463, 1464, 1466, 1467, 1459, 0, 0,
	0, 3140, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 0, 1457,
	1458, 0, 1490, 1491, 1492, 1500, 1501, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 1488,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 1483, 1484, 1485, 1459, 0, 0, 0, 0, 0,
	1465, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 0, 1507, 0, 0,
	0, 1487, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 1504, 0, 0, 0, 0, 0, 0,
	1474, 1475, 0, 0, 0, 0, 0, 1482, 1483, 1484,
	1485, 0, 0, 0, 0, 0, 1495, 1465, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 1505, 1507, 0, 0, 0, 1487, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	1504, 0, 0, 0, 0, 0, 0, 1474, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 1480, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 1471, 1472, 1478, 1499, 1477, 1473,
	0, 1470, 1468, 1469, 1461, 1462, 1463, 1464, 1466, 1467,
	0, 0, 0, 0, 3139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 1458, 0, 1490, 1491, 1492, 1500, 1501,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 1488, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 0, 1506, 0, 0, 0, 1496, 0,
	0, 1471, 1472, 1478, 1499, 1477, 1473, 0, 1470, 1468,
	1469, 1461, 1462, 1463, 1464, 1466, 1467, 1459, 0, 0,
	0, 3138, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 0, 1457,
	1458, 0, 1490, 1491, 1492, 1500, 1501, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 1488,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 1483, 1484, 1485, 1459, 0, 0, 0, 0, 0,
	1465, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 0, 1507, 0, 0,
	0, 1487, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 1504, 0, 0, 0, 0, 0, 0,
	1474, 1475, 0, 0, 0, 0, 0, 1482, 1483, 1484,
	1485, 0, 0, 0, 0, 0, 1495, 1465, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 1505, 1507, 0, 0, 0, 1487, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	1504, 0, 0, 0, 0, 0, 0, 1474, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 1480, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 1471, 1472, 1478, 1499, 1477, 1473,
	0, 1470, 1468, 1469, 1461, 1462, 1463, 1464, 1466, 1467,
	0, 0, 0, 0, 3103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 1458, 0, 1490, 1491, 1492, 1500, 1501,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 1488, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 0, 1506, 0, 0, 0, 1496, 0,
	0, 1471, 1472, 1478, 1499, 1477, 1473, 0, 1470, 1468,
	1469, 1461, 1462, 1463, 1464, 1466, 1467, 1459, 0, 0,
	0, 2900, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 0, 1457,
	1458, 0, 1490, 1491, 1492, 1500, 1501, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 1488,
	0, 0, 0, 0, 2480, 0, 1460, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 1483, 1484, 1485, 1459, 0, 0, 0, 0, 0,
	1465, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 0, 1507, 0, 0,
	0, 1487, 1489, 0, 0, 0, 0, 0, 2481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 1504, 0, 0, 0, 0, 0, 0,
	1474, 1475, 0, 0, 0, 0, 0, 1482, 1483, 1484,
	1485, 0, 0, 0, 0, 0, 1495, 1465, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 1505, 1507, 0, 0, 0, 1487, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	1504, 0, 0, 0, 0, 0, 0, 1474, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 1480, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	1457, 1458, 0, 1490, 1491, 1492, 1500, 1501, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	1488, 0, 0, 0, 1498, 0, 0, 1460, 0, 0,
	0, 1496, 1506, 0, 1471, 1472, 1478, 1499, 1477, 1473,
	0, 1470, 1468, 1469, 1461, 1462, 1463, 1464, 1466, 1467,
	0, 0, 2509, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	2179, 1476, 0, 0, 0, 0, 0, 1457, 1458, 0,
	1490, 1491, 1492, 1500, 1501, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 1488, 0, 0,
	0, 2178, 0, 0, 1460, 0, 0, 0, 1496, 1506,
	0, 1471, 1472, 1478, 1499, 1477, 1473, 0, 1470, 1468,
	1469, 1461, 1462, 1463, 1464, 1466, 1467, 0, 1482, 1483,
	1484, 1485, 1459, 0, 0, 0, 0, 0, 1465, 0,
	2597, 1479, 0, 2596, 0, 0, 0, 0, 1476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 1507, 0, 0, 0, 1487,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 1504, 0, 0, 0, 0, 0, 0, 1474, 1475,
	0, 0, 0, 0, 0, 1482, 1483, 1484, 1485, 0,
	0, 0, 0, 0, 1495, 1465, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 1505, 1507, 0, 0, 0, 1487, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 0,
	0, 0, 0, 0, 0, 0, 1503, 0, 1504, 0,
	0, 0, 0, 0, 0, 1474, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 1481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 0, 1457, 1458,
	0, 1490, 1491, 1492, 1500, 1501, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 1488, 0,
	0, 0, 1498, 0, 0, 1460, 0, 0, 0, 1496,
	1506, 0, 1471, 1472, 1478, 1499, 1477, 1473, 0, 1470,
	1468, 1469, 1461, 1462, 1463, 1464, 1466, 1467, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 0, 1457, 1458, 0, 1490, 1491,
	1492, 1500, 1501, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 1488, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 1496, 1506, 0, 1471,
	1472, 1478, 1499, 1477, 1473, 0, 1470, 1468, 1469, 1461,
	1462, 1463, 1464, 1466, 1467, 0, 1482, 1483, 1484, 1485,
	1459, 0, 0, 0, 0, 0, 1465, 0, 0, 1479,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 1507, 0, 0, 0, 1487, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1503, 0, 1504,
	0, 0, 0, 0, 0, 0, 1474, 1475, 0, 0,
	0, 0, 0, 1482, 1483, 1484, 1485, 0, 0, 0,
	0, 0, 1495, 1465, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 1505,
	1507, 0, 0, 0, 1487, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 829, 0, 0,
	0, 0, 0, 0, 1503, 0, 1504, 0, 0, 0,
	0, 0, 0, 1474, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 1480, 1486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 1457, 1458, 0,
	1490, 1491, 1492, 1500, 1501, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 1488, 0, 0,
	1498, 0, 0, 0, 1460, 0, 0, 1496, 0, 1506,
	1471, 1472, 1478, 1499, 1477, 1473, 0, 1470, 1468, 1469,
	1461, 1462, 1463, 1464, 1466, 1467, 0, 0, 0, 0,
	0, 2888, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 1476, 0,
	0, 0, 0, 0, 1457, 1458, 0, 1490, 1491, 1492,
	1500, 1501, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 1488, 0, 0, 0, 2598, 0,
	0, 1460, 0, 0, 1496, 0, 1506, 1471, 1472, 1478,
	1499, 1477, 1473, 0, 1470, 1468, 1469, 1461, 1462, 1463,
	1464, 1466, 1467, 0, 0, 1482, 1483, 1484, 1485, 1459,
	0, 0, 0, 0, 0, 1465, 0, 0, 1479, 0,
	2603, 0, 0, 0, 0, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 1507, 0, 0, 0, 1487, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1503, 0, 1504, 0,
	0, 0, 0, 0, 0, 1474, 1475, 0, 0, 0,
	0, 0, 1482, 1483, 1484, 1485, 0, 0, 0, 0,
	0, 1495, 1465, 0, 0, 0, 0, 0, 0, 0,
	1480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 1505, 1507,
	0, 0, 0, 1487, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 0, 0, 0, 0,
	0, 0, 0, 1503, 0, 1504, 0, 0, 0, 0,
	0, 0, 1474, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 1486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1481, 0, 1457, 1458, 0, 1490, 1491,
	1492, 1500, 1501, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 1488, 0, 0, 0, 1498,
	0, 0, 1460, 0, 0, 0, 1496, 1506, 0, 1471,
	1472, 1478, 1499, 1477, 1473, 0, 1470, 1468, 1469, 1461,
	1462, 1463, 1464, 1466, 1467, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 1471, 1472, 1478, 1499,
	1477, 1473, 0, 1470, 1468, 1469, 1461, 1462, 1463, 1464,
	1466, 1467, 0, 1482, 1483, 1484, 1485, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 1458,
	0, 1490, 1491, 1492, 1500, 1501, 1502, 1497, 0, 0,
	1507, 0, 0, 0, 1487, 1489, 0, 1493, 1488, 0,
	0, 0, 2551, 0, 0, 1460, 0, 0, 0, 0,
	1506, 0, 0, 0, 1503, 0, 1504, 0, 0, 0,
	0, 0, 0, 1474, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 1495,
	0, 0, 1479, 0, 0, 0, 0, 0, 1480, 1476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2565, 0, 0, 0, 0, 1482, 1483, 1484, 1485,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 1507, 1481, 0, 0, 1487, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1503, 0, 1504,
	1498, 0, 0, 0, 0, 0, 1474, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 1471, 1472, 1478,
	1499, 1477, 1473, 0, 1470, 1468, 1469, 1461, 1462, 1463,
	1464, 1466, 1467, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 1457, 1458,
	0, 1490, 1491, 1492, 1500, 1501, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 1488, 0,
	0, 0, 0, 1498, 0, 1460, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	1471, 1472, 1478, 1499, 1477, 1473, 0, 1470, 1468, 1469,
	1461, 1462, 1463, 1464, 1466, 1467, 1482, 1483, 1484, 1485,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 1458, 0, 1490,
	1491, 1492, 1500, 1501, 1502, 0, 0, 0, 0, 0,
	1497, 0, 0, 1507, 0, 1493, 1488, 1487, 1489, 0,
	0, 0, 0, 1460, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 1503, 0, 1504,
	0, 0, 0, 0, 0, 0, 1474, 1475, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	1479, 0, 1495, 0, 0, 0, 0, 1476, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 1483, 1484, 1485, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 0, 1497, 0,
	0, 1507, 0, 0, 0, 1487, 1489, 1481, 0, 0,
	1457, 1458, 0, 1490, 1491, 1492, 1500, 1501, 1502, 0,
	0, 0, 0, 0, 0, 1503, 0, 1504, 0, 0,
	1488, 0, 0, 1498, 1474, 1475, 0, 1460, 0, 0,
	0, 0, 1506, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 1505, 0, 0,
	0, 1476, 0, 0, 0, 0, 0, 1457, 1458, 0,
	1490, 1491, 1492, 1500, 1501, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 1496, 0, 1506,
	1471, 1472, 1478, 1499, 1477, 1473, 0, 1470, 1468, 1469,
	1461, 1462, 1463, 1464, 1466, 1467, 0, 1486, 1482, 1483,
	1484, 1485, 1459, 0, 0, 0, 0, 0, 1465, 0,
	0, 1479, 0, 0, 0, 1481, 0, 0, 1476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 1507, 0, 0, 0, 1487,
	1489, 1498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 1504, 0, 0, 0, 0, 0, 0, 1474, 1475,
	0, 0, 0, 0, 0, 1482, 1483, 1484, 1485, 0,
	0, 0, 0, 0, 1495, 1465, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 1505, 1507, 0, 0, 0, 1487, 1489, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 1471, 1472,
	1478, 1499, 1477, 1473, 0, 1470, 1468, 1469, 1461, 1462,
	1463, 1464, 1466, 1467, 0, 1474, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1672, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 1689, 1666, 1673,
	1656, 1699, 1698, 0, 0, 1658, 1657, 0, 0, 0,
	0, 0, 0, 1709, 1710, 0, 0, 0, 0, 0,
	0, 0, 1498, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 1471, 1472, 1478, 1499, 1477, 1473, 0, 1470,
	1468, 1469, 1461, 1462, 1463, 1464, 1466, 1467, 0, 0,
	0, 0, 0, 0, 1700, 0, 1696, 1695, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1694, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1693,
	1691, 1692, 0, 0, 0, 0, 1496, 0, 0, 1471,
	1472, 1478, 1499, 1477, 1473, 0, 1470, 1468, 1469, 1461,
	1462, 1463, 1464, 1466, 1467, 0, 0, 735, 0, 769,
	0, 0, 1668, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1682, 1671, 1684, 1686, 1687, 1688, 1683, 0,
	1676, 742, 0, 0, 0, 0, 0, 0, 0, 0,
	1705, 1706, 0, 0, 0, 753, 740, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 743, 0, 1660, 0, 775, 0,
	0, 0, 0, 0, 0, 750, 751, 0, 0, 0,
	1697, 762, 0, 0, 1669, 0, 1670, 0, 0, 0,
	0, 0, 0, 0, 770, 745, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 1690, 0, 0, 0,
	1679, 1677, 1678, 1681, 1680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 0,
	0, 0, 739, 0, 0, 1661, 1662, 1664, 1665, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 748, 0,
	0, 0, 1685, 1663, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1708, 0, 0, 0, 0, 0, 755,
	754, 0, 0, 0, 0, 0, 0, 749, 0, 1659,
	0, 0, 1701, 1702, 1703, 1704, 0, 0, 0, 0,
	0, 0, 0, 774, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 771,
	0, 0, 1667, 0, 0, 0, 0, 1674, 1707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 766, 767, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	764, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	758, 0, 0, 0, 0, 0, 759, 0, 0, 0,
	0, 0, 0, 737, 0, 772, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 738, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 760, 0, 0, 0, 757, 0, 0, 0, 0,
	0, 0, 0, 0, 773, 0, 0, 0, 0, 0,
	0, 0, 761, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 763, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 765,
}
var sqlPact = [...]int{

	6895, -1000, -1000, -1000, -1000, -1000, -1000, 196, 193, 192,
	190, 188, 187, 186, 176, -1000, -1000, -1000, 169, -1000,
	-1000, 167, -1000, 165, 163, 161, 160, -1000, 159, 158,
	157, -1000, -1000, -1000, -1000, 155, 153, 150, 52998, 1783,
	64496, 55964, 1849, 47452, 64068, 47024, 63640, 63212, 148, -1000,
	62784, 147, 146, 145, -1000, -1000, 143, 1476, 38424, 138,
	134, 129, 2213, 128, 127, -1000, 125, -1000, 9135, 1266,
	-1000, 114, 111, -1000, 6475, 6186, 55114, 2203, 108, 107,
	37995, 2189, 2241, -1000, -1000, 1526, -1000, -1000, 106, 105,
	103, 101, 98, 96, 95, 90, 89, -1000, 88, 87,
	86, 85, 84, 83, 82, -1000, 81, 80, 79, 78,
	77, 76, 75, 71, 70, 64, 63, -1000, 76515, 1519,
	1407, 1404, 1396, 1388, 1386, 885, 62, 61, 60, 59,
	57, 56, 55, -1000, -1000, 53, 52, 49, 44, -1000,
	43, 40, 152, 39, 38, 37, 36, 35, 1942, 2258,
	1309, 802, 18414, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 68716, 64918, 33, -3,
	30, -1000, 2578, 824, 31561, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 444, -1000, -1000, -1000, 285,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1451, 668, -1000, -1000, -1000, 62356,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1782, 27,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 667, -1000, 1781,
	288, 1716, -1000, -1000, -1000, -1000, -1000, 64918, -1000, -1000,
	2887, 2881, 1682, 666, 61934, -1000, 1247, -1000, 831, 21132,
	-1000, 1017, -1000, 21132, 276, -1000, -1000, -1000, -1000, -1000,
	46596, 14798, 46168, 45740, 42330, 61506, 14360, 52576, 1097, -1000,
	-1000, -1000, -1000, -1000, 1, 39702, 64918, -1000, 274, -1000,
	-1000, -1000, -1000, -1000, -1000, 27578, 760, 27115, 505, 26652,
	491, -1000, -1000, -1000, -1000, 2879, 2877, 984, 2876, 2512,
	68294, 1438, 2875, 1387, 1060, 921, 2873, 2872, 2871, 2870,
	2869, 2866, 2861, 1219, 61078, 2285, 41892, 41454, 52998, 52998,
	2039, 60650, -1000, -1000, 1126, 1123, -1000, -1000, -1000, -1000,
	2382, 2232, 2221, 52148, -1000, -1000, 2860, 2859, 2858, 2857,
	2856, 67872, 1412, 2855, 1953, 2853, 2851, 2850, 2849, 2848,
	2846, 2845, 2842, 2841, -1000, 51720, 51292, 50864, 50436, 60222,
	41016, 40578, -1000, -1000, -1000, 33269, 7145, 6643, 59794, 34583,
	52998, 52998, -1000, -1000, 28029, 136, -1000, -1000, -1000, 2246,
	-1000, 28029, 136, -1000, 64918, -1000, 2283, 1561, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1725, 1364, 2725,
	40140, 1615, 1118, 2375, 2374, 1290, 1947, 2359, 2353, 2348,
	2346, 2343, 1318, 2003, 458, 17951, 1286, 1272, 2342, 2335,
	2744, 1574, 45312, 2839, 2838, 2542, 2334, 2299, 2243, -1000,
	-1000, -1000, -1000, 1222, -1000, -1000, 47874, -1000, -1000, 1082,
	-1000, -1000, 1082, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1096, 67028, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1556, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1706, -1000, 1554,
	-1000, -1000, 1815, 1190, 2258, 1934, 2551, 2551, 2551, 2589,
	434, 430, -1000, 152, -1000, -1000, 75657, -1000, -1000, 28029,
	28029, 28029, 28029, 28029, 1590, -1000, 664, -1000, -1000, 691,
	-1000, 663, 590, -1000, -1000, -1000, -1000, -1000, -1000, 662,
	2750, -1000, 889, -1000, -1000, -1000, -1000, 2723, -1000, 17037,
	-1000, -1000, -1000, 436, 661, 28029, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 250, 849, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 573, 1502,
	567, 567, 567, -1000, -1000, 914, -1000, -1000, -1000, 318,
	566, 316, 559, -1000, -1000, -1000, -1000, 2282, 660, 657,
	-1000, 656, 655, 652, -1000, -1000, -1000, 651, 650, 649,
	648, 647, 645, 643, 640, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 911, -1000, 639, 618, 617, 613, 611, 610,
	609, 607, 606, -1000, -1000, -1, 64918, -1000, 444, -1,
	-1000, -1000, 603, -1000, 21583, 21583, 21583, -1000, -1000, 1778,
	28029, -1000, 2049, -1000, 223, 5, 770, 32413, -1000, 30705,
	770, 704, 35863, -1000, 2234, -1000, -1000, 592, 245, -1000,
	-1000, 2229, 64918, 15234, 64918, 52998, 52998, 2361, 28029, -1000,
	-1000, 39276, 64918, 53420, 2668, 76343, 39276, 64918, 2275, -1000,
	-1000, -1000, 64918, -1000, 28029, -1000, 2666, 1244, 43192, 2602,
	-78, -1000, -1000, -1000, -1000, -1000, -1000, 1925, 1952, 1007,
	1813, 1168, -1000, 21132, 2496, -1000, -1000, -1000, 229, 15234,
	-1000, 2508, 2439, 1067, -1000, 1801, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1417, 2434, -1000, 1888, 2432, 1402,
	-1000, -1000, 887, 2425, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1697, -1000, -1000, 2533, -1000, -1000, 1465,
	2419, 10, -1000, -1000, 33711, 39702, -6, -1000, -1000, -118,
	-1000, 13922, 75657, -1000, -1000, -1000, 75657, 778, -1000, -1000,
	2417, -1000, 75657, 771, -1000, -1000, 2416, -1000, -1000, -1000,
	2835, -1000, 2834, 1879, 2833, 2832, 2828, -1000, 1255, 1449,
	2827, -1000, 2826, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	50008, 49580, 920, -1000, 1760, -1000, -1000, 49152, 869, 1875,
	-1000, -1000, 1873, -1000, 717, -1000, 2825, 59366, 2064, 869,
	1870, -1000, -1000, -1000, -1000, -1000, 52998, -1000, 52998, -1000,
	52998, -1000, 1229, -1000, 67450, 5, -1000, -1000, -1000, -1000,
	-1000, 2414, 2824, 2822, 2803, -1000, 64918, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 164, 2410, -1000, -1000,
	164, 2408, -1000, 164, 2395, -1000, 162, 2391, -1000, -1000,
	1734, 2379, -1000, -183, 2377, -1000, -1000, -183, 2370, -1000,
	-4, -1000, -1000, -1000, 824, -1000, 32841, -1000, 32841, 58938,
	42766, 856, 602, 37567, 75657, -1000, 33711, 75657, -1000, 42766,
	49152, -1000, 58510, 48730, -1000, -1000, 1132, 1981, -1000, -1000,
	-1000, -1000, 42766, 42766, 42766, -1000, 58082, -1000, 1551, 1308,
	2543, 52998, -1000, 1466, -1000, -1000, -1000, 2555, 2265, -1000,
	38850, 54686, -1000, 54264, -1000, 53842, -1000, 52998, -1000, 52998,
	-1000, 2802, 2801, 2798, -1000, 2797, 2554, 75657, 2547, -1000,
	2393, 1414, 1411, 64918, -1000, -1000, 64918, -1000, 64918, -1000,
	-1000, -1000, 1924, -1000, -1000, -1000, -1000, 52998, -1000, -1000,
	-1000, -1000, -1000, -1000, 2264, -1000, 1349, -1000, 1436, -1000,
	1129, -1000, -1000, 166, -1000, -1000, -78, -1000, 67028, -1000,
	-1000, 2258, 1934, -1000, 64918, -1000, 1285, 52998, -1000, 1976,
	-1000, 1193, -1000, 2258, 1791, 2002, 26189, 1954, 28029, 152,
	-1000, -1000, 152, 152, 20681, -1000, -1000, 76343, 76343, 15234,
	1112, 28029, 28029, 28029, 28029, 28029, 28029, 28029, 28029, 28029,
	28029, 28029, 28029, 28029, 28029, 28029, 28029, 28029, 28029, 28029,
	28029, 28029, 28029, 28029, 28029, 28029, 28029, 28029, 28029, 28029,
	28029, 28029, 28029, 28029, 28029, 28029, 1827, 28029, 1095, 28029,
	28029, 28029, 28029, 2237, -1000, -1000, 1504, 477, 1627, -1000,
	2704, 2704, 2704, 75979, 75979, 453, 2796, 691, -1000, 28029,
	-1000, 136, 28029, 15672, -1000, 2737, 1164, -1000, -1000, 430,
	8877, 1803, -1000, 427, 16135, -1000, -1000, -1000, 17037, 590,
	25726, 28029, 905, 75657, 13486, 2296, 2103, -1000, 2736, -1000,
	-1000, 2724, -1000, -1000, -1000, -1000, 2724, 1111, 1105, 2734,
	-1000, 2724, 2724, 589, 737, 735, 734, 702, 681, 28029,
	28029, 28029, 28029, 28029, 28029, 28029, 28029, -1000, 25275, 24812,
	24349, 29382, 23886, 28029, 17488, 23423, 22960, 64918, -1, 2665,
	28029, 259, -1000, 74066, -1000, 259, 259, 588, -11, 75657,
	1992, 1992, 31987, 1832, 1626, 1626, 1626, -1000, 586, 677,
	25, 24, 23, -1000, -1000, 17, 15, 770, 9982, 56386,
	1657, 770, 770, 209, 243, 426, 30279, 2049, 56386, -1000,
	-1000, 52998, 580, 15672, 15234, 1157, -12, 206, 2010, 2009,
	2007, -1000, 1238, -14, 1089, -23, -1000, 4741, -20, -1000,
	1108, -1000, -1000, -1000, 365, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 910, 579, 578, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 573, 1502, 567, 567, 567, -1000, -1000,
	-1000, 318, 566, 316, 559, -1000, -1000, -1000, -1000, -1000,
	-1000, 2227, -118, 53420, 781, -26, 990, -78, -1000, -1000,
	-1000, 43192, 1082, -1000, 1633, -1000, -1000, -1000, -1000, -1000,
	-1000, 1140, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2748,
	-1000, 2709, -1000, -1000, 2731, -2, -1000, -1000, 15234, -1000,
	-85, 1381, -1000, 44884, 2537, 2530, 2529, 1226, -1000, 1171,
	2588, 47874, 2624, 2672, 727, -1000, 2224, -1000, -1000, 829,
	1347, 1087, 47874, 1888, -1000, 76343, -1000, 2035, 2585, 1156,
	1186, 1156, 1156, 1172, -1000, 47874, 1080, 1559, 42766, -1000,
	1079, -1000, -102, 2613, 2670, 490, -1000, 2220, 1077, -1000,
	-1000, 52998, 15234, 762, -1000, 42766, -6, 39702, 64918, 205,
	-1000, 28029, 136, 28029, 136, -1000, -1000, 2369, -1000, -1000,
	-1000, 2795, 1420, 1949, -1000, -1000, -1000, 556, 1862, 1888,
	1860, -1000, -1000, 48302, 2217, 64918, 2024, -45, 52998, -1000,
	-1000, 1548, -1000, 2366, 2358, 552, 2794, -1000, 1754, 1857,
	-1000, -1000, -1000, 66606, 1115, 2357, 951, 504, 2659, 504,
	36715, -1000, 64918, -1000, 64918, -1000, -1000, -1000, 2792, -1000,
	52998, -1000, -1000, 52998, -1000, 52998, -1000, 52998, -1000, 52998,
	52998, -1000, 64918, 42766, 42766, 42766, 5111, 44040, -27, -28,
	424, -1000, 57660, 64918, 950, 44462, 64918, 2484, -210, -1000,
	856, 856, 762, -1000, 762, -1000, 52998, 2261, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2790, 2789, -1000, 860, 52998,
	64918, 52998, -1000, -1000, 64918, -1000, 64918, -1000, -1000, 64918,
	-1000, 64918, -1000, 64918, -1000, -1000, -1000, -1000, -1000, -1000,
	136, 28029, 1236, -1000, 2260, -1000, 2259, -1000, 46, -1000,
	-1000, -1000, -1000, 1531, 52998, 52998, 52998, 52998, 64918, 52998,
	-1000, 47874, -1000, -1000, 2258, -1000, -1000, 1903, -1000, -13,
	968, -1000, -1000, -1000, -1000, -1000, 75657, 511, -1000, -1000,
	75657, 1342, 2029, -1000, 2029, -39, -1000, 73668, 1973, 52998,
	-1000, -1000, -1000, -1000, -1000, 806, 1218, 1218, 1008, 1008,
	1008, 1008, 2633, 4125, 289, 605, 7711, 7711, 244, 244,
	244, 244, 244, 7711, 265, 501, 501, 265, 265, 265,
	265, 265, 501, 501, 501, 7711, 7711, 7711, 75979, 75805,
	71502, 28029, 28029, 1074, 1483, 477, 8408, 28029, 71972, 71972,
	71972, 71972, -1000, 2193, -1000, -1000, -1000, -1000, 2211, 555,
	29382, 29382, -1000, -1000, -1000, -1000, 16586, 28029, -1000, -1000,
	-1000, -1000, 22497, -1000, -1000, 73591, -251, 423, -215, -19,
	-1000, 28029, 28029, 28029, 419, -1000, 416, -1000, -1000, 1072,
	-1000, 1065, 1053, 1052, -1000, 554, 204, 28029, 64918, -1000,
	70766, 676, -46, -1000, -33, 1216, -1000, 28029, 203, -1000,
	1616, 547, 546, 413, -34, -1000, 412, 795, 788, 411,
	408, 405, 28029, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 75337, 70505, 70244, 70162, 8729, 69901, 69613,
	-40, 403, -1000, 2204, -215, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 398, -1000, 397, -1000, 75184, -215, 396,
	5940, -1000, 29382, 29382, 29382, -1000, 395, -1000, 73989, -1000,
	74863, 22046, 22046, 22046, 394, 74786, 28029, -215, -56, -1000,
	-58, -1000, -1000, 545, -59, 892, 21583, 31133, 15234, -1000,
	892, 892, 28029, -1000, 28029, 1996, -1000, -1000, -1000, 1986,
	1578, 1992, 31987, -1000, -1000, -1000, -1000, 56386, 658, 770,
	-1000, -1000, -1000, -1000, -1000, 56386, -1000, 2723, 2109, -1000,
	-1000, -1000, 64918, 444, -1000, 56386, 56386, 15234, 770, -1000,
	392, 35009, -19, 201, -1000, -1000, 15234, 2073, 2073, 2073,
	-1000, -1000, 64918, 2685, -1000, 1509, -1000, 76343, -1000, 688,
	980, -1000, 2730, 544, -1000, 2724, 2724, 64918, 113, 21132,
	-1000, 1082, -1000, -1000, 1314, -1000, 1429, -1000, 1086, -1000,
	-1000, -1000, 21132, -1000, 2053, 64918, 64918, 52998, -1000, -1000,
	1855, 66184, 1853, 76343, 64918, -1000, -1000, 543, 542, 1970,
	1969, 64918, 64918, 65762, 65340, 64918, 1497, 28029, 1804, 1837,
	136, 136, -1000, -1000, 136, 541, 1050, 52998, 52998, 52998,
	1399, -1000, -1000, -1000, -1000, -1000, 52998, -1000, -1000, 2729,
	-1000, 1156, -1000, -1000, -1000, 1156, 1888, 1398, 52998, 42766,
	877, 64918, 1553, 136, 136, -1000, -1000, 136, 538, 15234,
	1482, -1000, 2072, -1000, -61, -1000, -1000, 13050, 75657, -1000,
	75657, -1000, 64918, -1000, 918, 64918, 44462, 855, 2354, -1000,
	1888, 2352, 444, -1000, -1000, 36289, -118, 856, 42766, 52998,
	-45, 42766, 42766, 42766, 2787, 537, 2786, -1000, 52998, 2351,
	1747, 1851, 2380, 733, 64918, 892, 31987, 1440, -1000, 35437,
	929, 64918, 1382, 67, -1000, -1000, -1000, 32, 64918, -1000,
	2782, -1000, -1000, 164, 164, 164, -1000, 162, 1734, -1000,
	-183, -183, -1000, -1000, 5111, 5111, 856, -55, 536, -1000,
	747, 742, 34147, 42766, -64, -1000, -1000, -1000, -1000, -1000,
	52998, 64918, 638, 2063, 64918, -66, -1000, 199, 535, -1000,
	856, 33711, 2200, -1000, -1000, 873, -1000, 1124, -1000, -1000,
	-1000, -1000, -1000, -1000, 8, -118, -118, -1000, -1000, -1000,
	-1000, 75657, -1000, 1234, 1221, 64918, -1000, 15234, 64918, 52998,
	15234, 52998, 2255, 2253, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1342, -1000, 28029, -1000, -1000, -1000, 20681, 1821,
	-1000, -1000, 52998, 7, 28029, 28029, 5839, 5266, 28029, 29382,
	29382, -1000, 28029, 4066, -1000, -1000, -1000, -1000, -1000, 2180,
	534, 28029, 76343, 5156, 4113, -1000, 387, 69567, 265, -1000,
	28029, -1000, 384, 20230, -1000, 74387, -36, -67, -1000, 2746,
	1889, 1809, 1450, 1293, 2728, 12614, -215, -72, -1000, -1000,
	687, -1000, 2447, -1000, 28029, 74464, 12178, -1000, 37141, 894,
	1661, -1000, -1000, 2724, 818, -1000, -1000, -1000, 818, -1000,
	73198, 76343, 76343, 28029, 28029, -1000, 28029, 28029, 28029, -1000,
	-1000, 28029, -1000, -1000, 2178, 28029, -1000, 76343, 76343, 29382,
	29382, 29382, 29382, 29382, 29382, 29382, 29382, 29382, 29382, 29382,
	29382, 29382, 29382, 29382, 29382, 29382, 29382, 29382, 1962, 29382,
	2702, 2702, 2702, -1000, 2157, 2178, 28029, 28029, 76343, 379,
	378, 375, -1000, 28029, -215, -1000, -1000, 5111, -1000, 2096,
	-1000, 28029, -1000, -189, -1000, 2049, -1000, -1000, 2096, 2096,
	-73, 75657, 31987, 31987, -1000, 533, 28029, 1983, -1000, 675,
	-1000, -75, -1000, 56386, -1000, 674, -252, -1000, 741, -1000,
	-1000, -1000, -1000, 444, -1000, -1000, -1000, 137, 56386, -1000,
	-87, -1000, 2658, 373, 15234, -1000, -1000, -1000, -1000, -1000,
	-1000, -118, 1704, 2743, -1000, 2727, 686, 673, 360, 2724,
	359, 358, -118, 64918, -1000, -78, -1000, -1000, -1000, 28029,
	-1000, -1000, 2528, 1049, 1046, -1000, 2349, -1000, 1847, -1000,
	940, -1000, 1339, -1000, 28029, 28029, 531, 530, 1445, 2778,
	2347, 1734, 2345, 1734, -1000, -1000, 820, -1000, 75657, 527,
	524, -1000, -85, 1360, 872, -1000, -1000, 28029, 28029, 57234,
	-1000, 299, 2533, 6, -1000, 1043, -1000, -1000, -1000, 1888,
	1030, -1000, -1000, 1538, -1000, -1000, 871, -1000, -1000, 28029,
	-1000, -102, 1027, 856, 2161, -1000, -1000, 2776, 2775, 2771,
	356, -88, -103, 76343, 2645, 1788, 64918, 52998, 52998, 2643,
	819, -1000, 2723, -1000, -1000, -1000, -1000, 869, -1000, -1000,
	2769, -1000, 946, 15234, 52998, 2340, 1943, 733, 43618, -1000,
	869, 1661, -175, -1000, 1382, 19767, 2536, -89, -1000, -1000,
	-1000, 892, 36715, 31987, 28029, 2768, -97, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 56812, 56812, 42766, 42766,
	42766, 856, 64918, 64918, 44462, 2766, 523, 64918, 64918, 513,
	-1000, 64918, 64918, 2765, 42766, -1000, -1000, 136, -1000, 1680,
	52998, 11742, -1000, -1000, 860, -1000, -1000, 1558, 1800, 1558,
	1363, 1317, 1721, 73121, -1000, -1000, 2020, 2532, 15234, 2619,
	71972, 28029, 28029, 277, 3879, 357, 71972, 28029, 28029, 76343,
	76056, -100, 28029, 28029, -1000, 28029, 672, 75657, 2742, 28029,
	355, 353, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 333, -1000, -1000, -1000, -1000, -1000, 75657, 28029, 68,
	-1000, -1000, -1000, 69138, -1000, 28029, 328, 326, -1000, -1000,
	-1000, 325, 324, 9208, 4926, 72728, 72651, 72258, 75657, 2157,
	75657, -1000, -1000, 842, 842, 1155, 1155, 1155, 1155, 2702,
	1243, 700, 526, 861, 861, 861, 1284, 823, 823, 861,
	861, 861, 2155, 1956, 512, 6250, -1000, -1000, 75657, 75657,
	321, -1000, -1000, -1000, -215, 320, 2092, 2584, 75657, -1000,
	31987, 2092, 2092, -1000, -1000, 1578, 64918, 75657, 31987, 5,
	-1000, 2723, -1000, -1000, 2109, -1000, 10430, -1000, 15234, -1000,
	-1000, 35009, -1000, 508, -1000, 28, -1000, -1000, 671, 2764,
	683, -1000, 309, -1000, -1000, -118, 75657, 64918, 64918, 64918,
	2331, -1000, 3612, -1000, 72181, -105, -1000, 73668, 28029, 64918,
	-1000, 1469, 2004, 978, -1000, 64918, -1000, 64918, -1000, -1000,
	64918, 64918, 52998, 2319, -106, 75657, -144, -1000, 740, -1000,
	1160, -1000, 11306, 52998, 52998, 42766, 2315, -107, 15234, -1000,
	42766, -1000, -1000, -1000, 2059, -1000, 55536, 1644, 136, -1000,
	2763, 506, 1888, 136, -1000, 1668, -1000, 670, -1000, -1000,
	500, 64918, 1740, 499, 15234, 1935, 733, 43618, -1000, 1115,
	2002, -1000, -163, -1000, 363, 136, 1661, -1000, -175, 75657,
	-1000, 739, -1000, -116, -1000, -1000, 307, -1000, 2483, 2475,
	-1000, -1000, 28029, 488, 486, 64918, 2474, -1000, -1000, -117,
	-1000, 1677, -1000, -1000, -1000, -1000, -1000, 15234, 1346, -1000,
	482, 481, -1000, -1000, -1000, -1000, -1000, 2532, 71972, 71972,
	28029, 28029, 28029, 71972, 76056, -119, -1000, 71972, 71972, -215,
	-1000, -1000, 74387, -1000, -1000, -1000, 75657, 10870, 1566, -1000,
	71788, -1000, -1000, -1000, -1000, 28029, 28029, -1000, -1000, -1000,
	-1000, -1000, 29382, 2150, 479, 76343, -1000, -1000, 862, 28029,
	28029, 2049, 862, 862, -1000, -125, -1000, 770, -1000, -1000,
	-1000, 2723, 28, -1000, 2762, 15234, 680, -1000, 2760, -1000,
	-1000, -1000, -1000, 64918, -1000, 64918, -1000, 15234, 64918, 2126,
	1842, -1000, -1000, 1964, 478, 29382, 52998, 777, 2140, 1441,
	28029, 1821, -126, -128, 1838, -1000, -1000, 1836, 28029, -1000,
	76343, 1734, 1734, -131, -133, -1000, 28029, 1026, 64918, 19316,
	-1000, 2759, 2533, -1000, -1000, -1000, 28029, 1022, -1000, -183,
	1553, 2076, -1000, -1000, -1000, -1000, 1963, -1000, -1000, 64918,
	1960, 858, -1000, 44462, 855, -1000, -1000, 809, -1000, 28029,
	-1000, 52998, 28029, 1738, -1000, 733, 43618, -1000, 2380, 1382,
	-1000, 2454, 64918, 2521, -1000, 2002, 477, -1000, 856, 471,
	468, -134, 28029, 28029, -139, 464, 856, -195, -1000, 745,
	743, -1000, -1000, 52998, 52998, 28029, 28029, -1000, 71972, 71972,
	71972, -1000, 305, -1000, -1000, 1661, 2581, -1000, 71711, 71318,
	633, 29382, 76343, -141, -1000, 64918, 75657, -215, -1000, -1000,
	-1000, 56386, 659, -1000, 2758, -1000, -1000, 1794, -1000, -1000,
	-1000, 64918, 1831, -1000, -1000, 28029, 6250, 463, 28029, -1000,
	-1000, 2056, 2168, 2059, 460, -1000, -1000, -1000, -1000, -1000,
	1403, -1000, -1000, 75657, 2563, -1000, -1000, 459, 457, 75657,
	455, 724, 2142, -1000, -1000, -1000, 75657, 454, 855, -1000,
	1576, 1644, 450, -1000, -1000, -1000, 2041, 303, 2640, 809,
	-1000, 2716, -1000, -142, 946, -149, 52998, 43618, -1000, 1943,
	-1000, 1119, -150, 64918, 1382, -1000, -1000, 42766, 42766, 1441,
	-151, -156, -1000, 42766, -1000, 1677, -1000, 64918, -1000, 64918,
	-1000, -1000, -170, -172, -1000, 1684, 28029, -1000, -1000, 633,
	-177, -1000, -206, -1000, 2632, -1000, -1000, -1000, -1000, -1000,
	2328, 71241, 1898, 64918, 70848, 2154, -1000, -1000, 1553, 64918,
	52998, 945, 15234, 1558, 1558, 28029, 18865, 1573, 28029, -1000,
	52998, 64918, -1000, 2473, 2059, 136, -1000, -1000, 1441, 449,
	1441, 448, -1000, 1935, 1203, -1000, 892, -1000, -1000, -182,
	-184, 2059, 1441, -1000, -193, -1000, -194, -199, -1000, -1000,
	287, 28931, 28931, 28931, -215, -1000, 64918, 446, 2304, -1000,
	1733, 1530, 34, 964, -1000, -1000, 2140, -201, 444, -1000,
	28029, -1000, -204, -1000, 927, -213, -1000, 926, -218, -1000,
	2124, -1000, -219, 442, -220, -1000, -1000, -1000, 1553, 858,
	2059, 28029, 2059, 28029, -1000, 36715, -1000, 856, 856, 1553,
	2059, 856, -1000, -1000, -1000, 2441, -1000, 29833, 1670, 1300,
	9544, 2441, 2441, -1000, -1000, 64918, -1000, 1737, 1735, 1270,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1898, 75657,
	-1000, 1558, 2075, -1000, 1558, 2123, -1000, 1572, -1000, 64918,
	-1000, 64918, 855, -1000, 1553, -221, 1553, -226, -207, -1000,
	-1000, -1000, 1553, -1000, -1000, 1545, 2677, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2461, -1000, 960, 1586,
	1586, 1733, -1000, 441, -1000, 439, -1000, -227, -1000, -1000,
	891, 1441, 891, 1441, -1000, -1000, 1295, -1000, -1000, 1652,
	28480, -1000, 2689, -1000, -1000, 1977, -1000, 2140, 28029, 28029,
	1724, -1000, 2754, 2059, -1000, 2059, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -228, -234, -1000, -1000, -1000, -1000, 1553,
	1553, 1553, 1014, 891, 891, -1000, 438, -1000, -1000, 28029,
	-237, 1553, -1000,
}
var sqlPgo = [...]int{

	0, 3417, 3416, 3413, 3411, 3408, 3403, 3399, 3398, 3396,
	3394, 3389, 3387, 3386, 3381, 3380, 3377, 3376, 3375, 3372,
	3371, 3370, 3366, 3365, 3363, 3362, 3361, 3360, 3357, 3356,
	3355, 3352, 3351, 3350, 3349, 3348, 3347, 3343, 3341, 3339,
	3338, 3336, 3335, 3334, 3329, 3328, 3327, 3326, 32, 3324,
	3323, 3322, 3319, 3315, 3313, 3311, 3307, 3305, 3303, 3295,
	3293, 3291, 3288, 3284, 3282, 3281, 35, 3277, 214, 3272,
	3268, 3267, 3266, 3264, 3263, 3262, 3261, 3260, 3257, 213,
	3256, 118, 3252, 3249, 3248, 3245, 3243, 212, 3239, 3238,
	3237, 3236, 3235, 3233, 3232, 3229, 127, 3227, 3226, 298,
	3225, 3224, 3223, 3222, 3220, 3219, 3218, 3215, 3213, 3208,
	183, 3203, 210, 3200, 3196, 3193, 3192, 3191, 3189, 3188,
	3180, 3177, 3175, 3170, 3169, 3165, 3164, 3162, 3159, 3158,
	3157, 3155, 3154, 3153, 3152, 3151, 3149, 3144, 3143, 3142,
	204, 138, 3139, 3138, 209, 205, 3137, 3136, 97, 92,
	73, 3135, 88, 142, 202, 6756, 197, 3131, 3130, 3129,
	151, 3124, 3122, 3121, 3114, 65, 62, 137, 139, 125,
	132, 180, 3110, 3109, 74, 50, 34, 28, 101, 3106,
	3105, 3104, 2506, 89, 3101, 3100, 198, 179, 3099, 1578,
	3096, 238, 68, 98, 119, 91, 3095, 114, 21, 3088,
	128, 38, 3085, 126, 69, 29, 5420, 186, 3084, 86,
	211, 96, 206, 228, 199, 165, 162, 136, 299, 3083,
	188, 3082, 71, 152, 3081, 3080, 3079, 58, 144, 76,
	3078, 7, 3, 134, 23, 87, 13, 3077, 12, 3075,
	3074, 3073, 3072, 26, 129, 3070, 120, 83, 3069, 57,
	3066, 190, 181, 3061, 171, 93, 3054, 3051, 193, 156,
	154, 3048, 10, 167, 3045, 3043, 3038, 3034, 3033, 100,
	17, 95, 3032, 3030, 110, 174, 3028, 54, 3027, 133,
	72, 116, 216, 90, 164, 85, 168, 141, 166, 3022,
	3021, 3020, 150, 3016, 3015, 135, 157, 3014, 3009, 208,
	37, 52, 182, 53, 3007, 124, 3005, 155, 3004, 3001,
	2998, 207, 140, 159, 5, 67, 94, 27, 14, 176,
	122, 80, 79, 2997, 3172, 1485, 1238, 2996, 108, 84,
	49, 107, 121, 200, 66, 2993, 2992, 1417, 2991, 2987,
	2986, 2985, 145, 2984, 2983, 2982, 105, 43, 70, 2981,
	123, 64, 11, 117, 201, 78, 160, 192, 189, 2980,
	148, 2979, 40, 109, 2978, 149, 185, 153, 2976, 564,
	115, 2975, 170, 2972, 2971, 2970, 2968, 113, 2966, 2964,
	450, 2963, 104, 2962, 2960, 146, 106, 130, 103, 30,
	2959, 61, 516, 2958, 147, 33, 2956, 1432, 31, 0,
	6469, 5207, 5535, 2955, 1067, 2954, 161, 102, 2951, 2950,
	2949, 82, 2948, 56, 2947, 2946, 36, 2945, 15, 6,
	8, 18, 16, 1308, 817, 2943, 2941, 75, 99, 111,
	2940, 203, 172, 2939, 2938, 2937, 63, 2936, 24, 2934,
	22, 2932, 2931, 25, 4, 19, 2930, 2928, 184, 2924,
	175, 2921, 2920, 2643, 2919, 195, 60, 2918, 131, 163,
	2915, 2906, 2905, 2903, 191, 2899, 196, 2898, 9, 20,
	1, 2897, 2896, 2895, 158, 2, 2468, 2893, 2892, 55,
	2891, 2890, 143,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 455,
	455, 19, 31, 20, 32, 13, 456, 456, 456, 456,
	24, 21, 33, 22, 22, 22, 22, 22, 151, 151,
	151, 151, 18, 18, 27, 27, 168, 168, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 454,
	454, 170, 170, 169, 164, 164, 457, 457, 171, 171,
	171, 173, 173, 37, 37, 95, 95, 95, 96, 96,
	97, 97, 152, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 83, 83, 397, 397, 398, 398, 147, 147,
	148, 148, 148, 148, 149, 149, 150, 150, 150, 51,
	39, 39, 39, 39, 39, 39, 39, 40, 40, 40,
	40, 41, 41, 41, 41, 41, 41, 42, 42, 42,
	42, 42, 42, 49, 49, 49, 141, 141, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 461, 461, 461,
	461, 461, 461, 461, 461, 461, 461, 461, 461, 461,
	461, 461, 461, 461, 461, 461, 461, 461, 462, 462,
	463, 463, 464, 464, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 63,
	63, 245, 245, 221, 221, 64, 64, 64, 65, 65,
	66, 66, 53, 53, 450, 450, 259, 259, 364, 364,
	68, 68, 278, 278, 69, 69, 69, 69, 69, 69,
	70, 70, 70, 70, 70, 70, 70, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 77, 77, 77,
	78, 78, 78, 75, 75, 75, 73, 73, 73, 72,
	72, 72, 76, 76, 76, 74, 74, 74, 260, 260,
	79, 79, 79, 79, 79, 79, 79, 79, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 366, 366, 80, 80, 80, 335, 335,
	84, 84, 84, 293, 293, 85, 85, 85, 85, 85,
	86, 86, 86, 86, 98, 98, 98, 98, 453, 453,
	252, 252, 186, 186, 186, 186, 91, 91, 91, 91,
	92, 92, 92, 93, 93, 146, 146, 104, 104, 104,
	104, 104, 103, 103, 103, 103, 103, 103, 43, 43,
	43, 44, 44, 45, 45, 46, 46, 47, 47, 48,
	48, 48, 48, 48, 106, 106, 458, 458, 108, 105,
	105, 105, 107, 107, 107, 107, 109, 110, 110, 110,
	110, 110, 110, 110, 110, 111, 111, 391, 391, 268,
	268, 389, 389, 405, 405, 390, 390, 225, 225, 225,
	225, 225, 226, 226, 226, 396, 396, 396, 396, 396,
	396, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 131, 131, 131, 140, 140, 140, 140,
	140, 140, 140, 133, 133, 133, 121, 121, 113, 113,
	113, 113, 113, 117, 117, 117, 117, 117, 114, 114,
	123, 123, 123, 123, 123, 118, 118, 120, 120, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 115, 115,
	115, 115, 125, 125, 125, 125, 299, 299, 299, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 136,
	136, 136, 136, 136, 136, 349, 349, 132, 132, 132,
	132, 135, 135, 135, 135, 283, 283, 129, 129, 129,
	130, 130, 130, 134, 134, 137, 137, 137, 137, 116,
	116, 116, 467, 467, 467, 138, 138, 128, 128, 139,
	139, 139, 139, 139, 139, 139, 139, 127, 127, 127,
	126, 126, 126, 126, 119, 451, 451, 448, 448, 448,
	448, 448, 448, 448, 449, 449, 452, 452, 89, 89,
	89, 58, 58, 468, 468, 468, 59, 59, 469, 469,
	469, 466, 466, 466, 466, 466, 466, 466, 466, 227,
	227, 228, 228, 316, 316, 316, 316, 316, 231, 231,
	172, 172, 172, 234, 235, 235, 232, 232, 233, 233,
	233, 237, 237, 236, 239, 239, 238, 315, 412, 412,
	414, 414, 414, 414, 414, 414, 414, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 410, 410, 410,
	411, 406, 406, 407, 407, 407, 407, 229, 229, 230,
	230, 230, 230, 408, 409, 250, 250, 352, 413, 413,
	415, 415, 417, 470, 470, 470, 470, 470, 470, 471,
	471, 314, 314, 243, 243, 418, 418, 418, 418, 419,
	419, 419, 419, 419, 422, 421, 420, 420, 420, 420,
	420, 345, 345, 345, 62, 62, 62, 280, 280, 279,
	279, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 143, 143, 60, 60, 60,
	178, 178, 57, 57, 57, 473, 473, 61, 61, 61,
	474, 474, 67, 67, 67, 67, 67, 67, 56, 56,
	56, 56, 56, 475, 475, 300, 300, 298, 298, 249,
	249, 351, 190, 190, 165, 165, 165, 23, 25, 25,
	17, 17, 34, 34, 35, 35, 30, 30, 459, 459,
	460, 460, 90, 90, 94, 94, 94, 102, 102, 142,
	142, 142, 142, 142, 142, 142, 38, 38, 38, 38,
	50, 50, 50, 50, 100, 477, 477, 477, 101, 101,
	476, 476, 185, 185, 185, 185, 187, 187, 311, 311,
	312, 312, 478, 478, 313, 313, 313, 313, 180, 179,
	181, 181, 55, 55, 55, 174, 174, 175, 175, 176,
	176, 177, 177, 479, 479, 87, 87, 87, 145, 145,
	220, 220, 307, 307, 307, 244, 244, 195, 195, 310,
	310, 308, 308, 308, 308, 277, 277, 277, 144, 144,
	257, 257, 270, 270, 271, 271, 361, 361, 272, 99,
	99, 155, 155, 153, 153, 153, 153, 153, 153, 160,
	160, 261, 261, 161, 161, 161, 161, 162, 162, 162,
	154, 154, 154, 156, 156, 156, 156, 156, 156, 156,
	159, 159, 159, 159, 163, 163, 163, 158, 158, 429,
	429, 429, 431, 431, 432, 428, 428, 430, 430, 472,
	472, 282, 282, 282, 241, 242, 240, 240, 247, 247,
	246, 248, 248, 350, 350, 350, 166, 166, 166, 275,
	275, 275, 275, 303, 303, 301, 301, 301, 302, 302,
	304, 304, 304, 305, 305, 306, 306, 274, 274, 331,
	331, 157, 157, 157, 254, 254, 254, 255, 255, 322,
	322, 322, 322, 322, 322, 323, 323, 321, 321, 321,
	321, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	354, 354, 256, 256, 355, 309, 309, 446, 446, 446,
	447, 447, 348, 348, 356, 356, 356, 356, 356, 356,
	346, 346, 347, 347, 362, 363, 363, 286, 286, 286,
	286, 284, 284, 287, 287, 287, 287, 285, 285, 357,
	357, 357, 357, 276, 276, 358, 358, 358, 359, 317,
	318, 318, 367, 367, 367, 367, 382, 253, 253, 253,
	253, 253, 480, 480, 368, 368, 368, 368, 368, 368,
	368, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 372, 372, 372, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 381, 381, 381, 381, 381, 373,
	373, 378, 378, 379, 379, 379, 374, 375, 380, 380,
	380, 380, 481, 481, 384, 384, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 370, 370, 370, 377, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 294, 294, 295, 295, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 326, 326, 326, 326, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	423, 423, 423, 423, 423, 423, 423, 423, 426, 426,
	427, 427, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 433, 433, 434, 434, 436, 436, 437, 437, 438,
	439, 439, 439, 440, 441, 441, 435, 435, 442, 442,
	442, 442, 443, 443, 444, 444, 444, 444, 444, 445,
	445, 445, 445, 445, 337, 337, 338, 338, 344, 344,
	344, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 188, 188, 188,
	188, 188, 266, 266, 264, 264, 264, 267, 267, 265,
	265, 263, 263, 262, 262, 334, 334, 332, 332, 336,
	336, 288, 288, 383, 383, 383, 383, 383, 383, 383,
	383, 289, 289, 289, 297, 290, 290, 291, 291, 291,
	291, 291, 328, 329, 292, 292, 292, 330, 330, 339,
	343, 343, 342, 341, 341, 340, 340, 319, 319, 320,
	320, 273, 273, 482, 482, 269, 269, 360, 360, 360,
	360, 223, 223, 258, 258, 222, 222, 215, 215, 216,
	216, 216, 216, 251, 251, 385, 385, 385, 386, 387,
	388, 333, 205, 204, 192, 193, 203, 202, 201, 191,
	194, 198, 199, 200, 196, 197, 211, 210, 209, 207,
	208, 365, 217, 217, 218, 218, 218, 219, 219, 219,
	219, 189, 189, 212, 212, 213, 214, 214, 206, 206,
	206, 182, 182, 182, 183, 183, 184, 184, 395, 395,
	393, 393, 393, 394, 394, 394, 394, 392, 392, 392,
	392, 392, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 401, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 404, 404,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 2, 0, 1, 1,
	0, 2, 0, 7, 2, 5, 6, 2, 1, 3,
	1, 3, 1, 6, 4, 9, 7, 12, 12, 12,
	9, 2, 7, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 5,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 6, 6, 6, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 3, 3, 4,
	3, 4, 7, 4, 4, 4, 3, 5, 7, 4,
	3, 3, 4, 3, 3, 3, 3, 3, 2, 0,
	1, 0, 1, 0, 3, 3, 3, 3, 3, 6,
	4, 4, 4, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 1, 1, 2, 1, 2, 7,
	3, 2, 0, 1, 3, 3, 1, 0, 1, 2,
	2, 1, 6, 5, 1, 2, 1, 3, 2, 0,
	9, 3, 2, 0, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 3, 5, 3, 1, 3,
	2, 2, 5, 3, 3, 6, 6, 3, 1, 1,
	2, 1, 1, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	2, 1, 2, 1, 3, 5, 7, 2, 3, 0,
	3, 5, 2, 3, 0, 2, 3, 2, 3, 2,
	6, 4, 7, 2, 6, 4, 7, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 5, 4, 6, 4, 3, 0, 1, 3, 2,
	4, 2, 4, 1, 6, 3, 1, 1, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 1, 3, 2,
	3, 3, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 5, 7, 3, 3, 3, 3, 4,
	4, 4, 3, 4, 4, 3, 4, 4, 5, 3,
	5, 5, 5, 7, 3, 3, 3, 4, 3, 4,
	3, 5, 4, 5, 3, 4, 5, 3, 4, 3,
	4, 3, 3, 4, 4, 5, 0, 1, 1, 3,
	2, 4, 3, 3, 5, 4, 3, 5, 3, 5,
	4, 6, 4, 6, 4, 1, 0, 3, 4, 4,
	5, 7, 5, 3, 3, 2, 0, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 3,
	4, 3, 1, 1, 1, 2, 3, 2, 3, 6,
	6, 7, 9, 7, 9, 3, 4, 10, 10, 3,
	5, 5, 5, 3, 5, 2, 0, 1, 1, 1,
	1, 3, 2, 2, 2, 1, 2, 0, 3, 3,
	2, 10, 13, 0, 2, 3, 9, 12, 0, 2,
	3, 1, 1, 2, 2, 2, 2, 1, 0, 1,
	0, 1, 3, 1, 1, 1, 1, 3, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 5, 8, 5, 11, 3, 0, 2,
	4, 3, 3, 1, 5, 1, 3, 1, 2, 0,
	1, 2, 2, 0, 1, 3, 3, 2, 2, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 5, 8, 4, 1, 0, 1,
	2, 2, 1, 2, 3, 2, 2, 3, 2, 2,
	2, 2, 2, 3, 1, 4, 2, 4, 7, 3,
	3, 0, 3, 6, 3, 1, 1, 8, 7, 5,
	0, 1, 6, 7, 6, 5, 3, 4, 14, 17,
	14, 17, 4, 0, 2, 2, 0, 1, 0, 1,
	3, 3, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 1, 3, 1, 3, 8,
	5, 3, 4, 3, 0, 2, 2, 0, 10, 3,
	2, 0, 1, 3, 1, 1, 3, 3, 5, 1,
	1, 3, 3, 2, 3, 4, 3, 4, 5, 0,
	3, 0, 2, 2, 4, 2, 3, 0, 2, 1,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	3, 1, 3, 3, 4, 5, 2, 2, 0, 2,
	2, 1, 1, 1, 0, 2, 2, 5, 2, 3,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 1, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 3, 4, 1, 5, 3, 4, 5,
	1, 5, 1, 3, 2, 0, 3, 0, 2, 3,
	1, 3, 2, 0, 3, 5, 6, 4, 6, 4,
	3, 2, 1, 0, 5, 1, 0, 2, 2, 2,
	1, 1, 0, 1, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 2,
	1, 0, 2, 5, 7, 2, 1, 2, 4, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 4, 1, 2, 1, 4, 1, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 2, 5, 1,
	4, 2, 5, 1, 4, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 1, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 5, 4, 6, 3, 5, 4, 6, 4, 6,
	5, 7, 3, 3, 3, 3, 3, 4, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 1,
	5, 5, 3, 1, 1, 1, 2, 2, 2, 4,
	3, 5, 6, 8, 6, 5, 4, 3, 4, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 8, 8, 6, 4, 6, 6,
	6, 4, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 3, 3,
	3, 0, 1, 4, 2, 2, 2, 2, 2, 3,
	2, 2, 3, 0, 4, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 1, 2, 3, 2, 3, 2,
	3, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 1, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 7, 1, 7, 5,
	3, 1, 1, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 465, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -142, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -143, -144, -145, 84, 70,
	125, 106, 111, 158, 293, 322, 332, 316, -107, -108,
	351, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -461, 86, -430,
	-71, -74, -76, -465, 116, 131, 175, 285, -92, -93,
	318, 320, 132, -45, -44, 126, -153, -155, -105, -106,
	-146, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, -139, 355, 402,
	42, 365, 71, 119, 326, 21, -5, -6, -7, -8,
	-9, -11, -12, -25, -53, -55, -56, -58, -59, -67,
	-61, -62, -429, -72, -73, -75, -77, -78, 317, -156,
	-154, 462, 415, -14, -19, -20, -15, -16, -18, -21,
	-17, -26, -31, -32, -28, -29, -27, -30, -33, -34,
	-35, -36, -23, -24, -13, -22, 433, 441, -159, -157,
	-158, -163, 339, 423, 379, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, -207, -212, -213, -214, -206,
	-182, -401, -404, 4, -399, -402, 137, 182, 251, 21,
	22, 23, 24, 25, 27, 38, 40, 39, 41, 42,
	45, 47, 48, 51, 52, 53, 54, 55, 56, 59,
	64, 69, 70, 71, 72, 73, 74, 79, 76, 77,
	78, 81, 83, 84, 85, 88, 89, 97, 98, 99,
	100, 101, 102, 106, 109, 108, 111, 114, 115, 116,
	118, 120, 121, 123, 125, 126, 129, 127, 385, 128,
	130, 131, 132, 133, 143, 144, 145, 147, 148, 150,
	152, 156, 157, 159, 163, 165, 166, 167, 168, 174,
	175, 177, 178, 183, 179, 184, 188, 191, 190, 192,
	193, 194, 185, 199, 203, 204, 205, 207, 208, 211,
	212, 213, 214, 215, 218, 217, 220, 223, 224, 227,
	228, 231, 232, 233, 235, 236, 239, 237, 240, 238,
	241, 244, 242, 243, 246, 247, 249, 248, 253, 256,
	172, 258, 259, 261, 262, 263, 279, 266, 267, 268,
	271, 272, 275, 278, 280, 281, 282, 283, 284, 285,
	286, 288, 289, 291, 293, 295, 297, 298, 299, 300,
	301, 302, 304, 305, 307, 308, 309, 310, 311, 316,
	313, 314, 315, 317, 318, 319, 320, 322, 324, 325,
	326, 327, 329, 331, 352, 353, 367, 332, 333, 334,
	335, 336, 337, 338, 342, 346, 343, 344, 345, 340,
	341, 347, 348, 349, 351, 354, 355, 357, 358, 360,
	361, 363, 364, 365, 366, 368, 371, 372, 373, 369,
	370, 378, 376, 377, 380, 381, 382, 383, 384, 386,
	388, 396, 397, 399, 402, 403, 404, 394, 406, 407,
	410, 411, 412, 413, 414, 419, 415, 417, 420, 421,
	422, 428, 427, 434, 435, 437, 438, 439, 33, 43,
	44, 46, 49, 60, 61, 62, 65, 103, 104, 124,
	134, 135, 146, 160, 162, 169, 170, 171, 189, 195,
	197, 201, 221, 255, 257, 273, 277, 290, 292, 303,
	328, 359, 374, 389, 390, 391, 392, 398, 400, 423,
	424, 425, 429, 436, 264, -200, 2, -182, -182, 293,
	26, 2, 26, 289, 341, 381, 383, 2, -453, -252,
	2, 26, -186, -182, 86, 158, 339, -200, 2, -453,
	-252, 24, 2, -182, 2, -187, 2, 332, -182, 465,
	81, 228, 64, 328, 348, -110, 397, -109, 389, 334,
	-111, -391, 2, 244, -182, 465, 465, 465, 465, 2,
	379, 282, 427, 340, 416, 99, 300, 182, -448, 2,
	4, -402, -399, -216, -215, 379, 99, -214, -206, 455,
	-213, 465, 465, 465, 2, 204, 205, 299, 298, 348,
	349, 465, 465, 465, 2, 25, 58, 80, 83, 105,
	133, 153, 156, 269, -462, 236, 279, 297, 334, 347,
	378, 386, 399, -466, 366, 59, 416, -473, 404, 114,
	-298, 99, 383, 381, 228, 157, 411, 324, 161, 409,
	109, 188, 414, 413, 465, 465, 25, 58, 67, 83,
	114, 133, 153, 156, -464, 279, 297, 331, 334, 347,
	378, 386, 404, 399, 2, 427, 340, 379, 182, 99,
	416, 324, 296, -81, 2, 462, 29, 28, 351, -152,
	379, 198, 2, -182, 204, 205, 2, 465, 465, -448,
	2, 204, 205, 2, 198, 2, 59, 336, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 2, -140, 348, 366, 167,
	41, 64, 26, 69, 283, 100, 159, 182, 183, 212,
	80, 81, -299, 40, 205, 204, -349, 380, 335, 341,
	376, 397, 86, 417, 325, 439, 300, 301, 127, 4,
	99, 244, 350, 389, 228, 73, -472, 2, 379, -476,
	2, 397, 397, 2, -476, 2, -476, 2, -185, 2,
	397, 393, -477, 397, 436, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, -154, -156,
	-155, 465, 465, 465, 465, 465, -140, 348, 2, 64,
	26, -160, -161, 151, -246, -247, 408, 196, 122, 270,
	-153, -155, 2, -429, -389, 2, -324, -405, -326, 453,
	454, 446, 250, 440, -337, 105, 409, 264, -404, -327,
	-339, 124, 328, -267, 8, 9, 5, 6, 7, -189,
	-369, -333, -377, 401, 136, 254, -219, 466, 10, 462,
	-426, -155, -338, 34, 162, 57, -393, -218, -371, -379,
	-375, -376, -480, 47, 53, 52, 386, 243, 342, 343,
	360, 344, 345, 45, 419, 179, 261, 263, 190, 4,
	197, -217, -206, -423, -424, -399, -400, 189, 195, 191,
	359, 192, 193, 194, 44, 303, 147, 148, 146, 115,
	104, 103, 257, 49, 48, 46, 424, -380, 101, 389,
	390, 391, 392, 207, 208, -182, -401, 67, 91, 92,
	90, 95, 94, 96, 93, 350, 416, 58, 33, 169,
	170, 201, 255, 171, 65, -425, 370, 87, 155, 187,
	173, 200, 202, 206, 222, 225, 245, 252, 274, 276,
	323, 356, -481, 425, 134, 135, 277, 290, 374, 398,
	400, 160, 221, 60, 61, -431, 304, -432, -200, -431,
	465, 465, 467, 465, -240, -241, -242, 2, 26, 112,
	462, 2, -353, 2, 460, -357, -155, 216, -356, 462,
	-354, -207, 265, -427, 329, -423, -424, -189, -206, -218,
	4, -243, 462, 464, 99, 379, 68, -293, 462, -182,
	26, 264, 393, 467, -335, 462, 264, 154, 267, -182,
	2, 2, 352, 2, 462, -110, 62, 397, 39, 348,
	-312, 2, -313, -179, -180, -181, -362, 203, 295, 302,
	442, 439, -389, -458, 154, 445, 393, -389, -268, 464,
	2, -357, 169, -207, 2, -204, -392, 4, -399, -402,
	-400, -403, 67, -401, 26, 28, 29, 30, 32, 34,
	35, 36, 37, 50, 57, 58, 63, 66, 68, 80,
	86, 90, 91, 93, 92, 94, 95, 96, 105, 107,
	110, 112, 113, 117, 119, 122, 136, 138, 151, 153,
	154, 158, 161, 164, 176, 186, 196, 198, 216, 219,
	226, 229, 230, 250, 254, 260, 264, 265, 269, 270,
	287, 294, 306, 321, 339, 350, 362, 375, 379, 387,
	393, 395, 401, 408, 409, 416, 418, 426, 430, 431,
	432, 433, -404, 2, -357, 169, 2, -209, 169, -357,
	-212, 2, -397, 169, -395, 10, -394, 5, 4, -399,
	-402, -400, 2, -191, -182, 2, -203, -392, 2, -222,
	169, -207, -208, -212, 393, 467, -258, -215, -216, -251,
	-182, 464, -324, 2, -99, 2, -324, 169, 2, -99,
	169, 2, -324, 169, 2, -99, 169, 2, 2, 2,
	399, 2, 83, 169, -182, 379, 98, 2, 315, -463,
	331, 403, 427, 2, 2, 2, 2, 2, 2, 2,
	379, 340, -474, 304, -196, 2, -182, 151, -397, 169,
	2, -397, 169, 2, -210, -212, -210, 182, 199, -191,
	169, 2, 383, 381, 383, 381, 154, 2, 198, 2,
	198, 2, -358, 2, -359, -207, 2, 2, 2, 2,
	2, 169, -182, 379, 98, 2, 214, 2, 2, 2,
	2, 2, 2, 2, 2, 2, -260, 169, 2, -207,
	-260, 169, 2, -260, 169, 2, -223, 169, 2, -222,
	-191, 169, 2, -398, 169, 2, -397, -398, 169, 2,
	-366, 2, -365, -394, 423, -81, 462, -81, 462, 348,
	462, -397, -207, -207, -324, -99, 154, -324, -99, -152,
	151, 2, 99, 379, -140, 2, 151, 418, 2, 8,
	2, -397, 335, 301, 143, 2, 352, 2, 64, -299,
	439, 154, 2, 154, 2, -283, 2, 433, -451, 2,
	264, 154, 2, 154, 2, 154, 2, 154, 2, 154,
	2, 298, 349, 205, 2, -99, 430, -324, 430, 2,
	396, 213, 128, 154, -283, 2, 154, 2, 154, 2,
	5, 2, 203, 295, 367, 2, -207, -467, 2, 379,
	427, 340, 2, 2, 76, 77, 154, 2, 154, 2,
	154, 439, 2, -276, -357, -311, -312, -311, 393, -187,
	-160, -246, -247, -140, 352, 2, -261, 258, 413, 247,
	354, 211, -160, -275, -301, -302, 226, 138, 260, -282,
	26, 112, -282, -282, 51, 463, 463, 11, 12, 66,
	38, 453, 454, 455, 456, 149, 457, 458, 451, 452,
	450, 443, 444, 448, 209, 210, 82, 447, 445, 75,
	234, 330, 139, 140, 141, 142, 312, 180, 31, 181,
	14, 15, 16, 30, 269, 225, 440, 173, 356, 446,
	17, 18, 19, 200, 202, 252, 43, 176, -188, -224,
	-324, -324, -324, -324, -324, 276, 462, -273, -319, 460,
	-155, 462, 462, 462, 5, 462, 5, -388, 8, -155,
	-324, -337, 463, -265, 462, -155, -337, -332, 462, 328,
	460, 462, -340, -324, 464, -433, 434, -373, 462, 292,
	-372, 462, -372, -372, 428, -370, 462, 441, 435, 462,
	-370, 462, 462, 151, 462, 462, 462, 462, 462, 462,
	462, 462, 462, 462, 462, 462, 462, 428, 462, 462,
	462, 462, 462, 462, 462, 462, 462, 467, -431, -243,
	462, -269, -360, -324, 455, -269, -269, 264, -262, -324,
	87, -286, 206, 245, 155, 222, 323, 187, -388, -82,
	-68, -79, -87, -99, -112, -144, -145, -321, 466, -348,
	441, -155, -354, -206, -155, -356, 462, -353, -348, 455,
	-207, 462, 154, 462, 464, 154, -251, -392, -191, -207,
	-217, -218, 111, -262, -448, -251, -186, 35, -334, -367,
	-368, -369, -378, -374, -377, -381, 47, 53, 52, 386,
	243, 342, 343, 360, 344, 345, 45, 419, 179, 261,
	263, 190, 4, 46, 424, -380, 197, 308, 309, 307,
	311, 310, 189, 195, 191, 359, 192, 193, 194, 44,
	303, 147, 148, 146, 115, 104, 103, 257, 49, 48,
	101, 389, 390, 391, 392, 207, 208, 425, 370, 60,
	61, -448, -251, 151, -391, -262, 35, -312, 2, 105,
	-395, 39, -478, 467, 224, -226, 233, 249, 166, 265,
	437, 258, -396, 5, 4, -333, -345, 105, 228, -377,
	9, 454, -385, 8, 453, -390, -389, 89, 464, -392,
	-168, 313, -167, 23, 27, 116, 421, 129, -233, 184,
	282, 124, 363, 412, -455, -456, 333, 384, 385, 78,
	258, 313, 124, -279, -281, 35, 97, 247, 278, 54,
	177, 238, 239, 365, 429, 124, 313, 433, 124, -456,
	313, -456, -170, 363, 412, -455, -456, 333, 313, -169,
	-233, 124, 466, -96, -397, 462, -258, 467, 467, -392,
	455, 124, 124, 124, 124, 2, 2, 250, 2, 2,
	2, 156, -466, -464, 2, 2, 2, -207, 169, -209,
	169, 2, -212, 427, -245, 264, -450, -259, 379, -207,
	-178, -428, 433, 250, 250, 35, 462, 2, -193, 169,
	2, -183, -182, 182, -428, 250, -358, -220, -207, -220,
	351, -200, 35, -321, 124, 2, 2, 2, -182, -171,
	467, 56, 319, 124, -171, 124, -171, 124, -171, 467,
	124, -171, 124, 467, 124, 124, 463, 467, -366, -366,
	-397, -150, 433, 154, 86, 462, 462, -152, -97, -96,
	-397, -450, -191, 2, -207, 2, 379, 207, -397, -397,
	-397, -391, 26, 353, 2, 298, 349, 77, -207, 379,
	99, 182, 70, -452, 151, -449, 324, -448, -207, 99,
	-207, 99, -207, 99, -207, -207, 2, 2, 2, 2,
	74, 74, 151, 2, 396, 2, 396, 2, -182, -182,
	-182, 224, -207, 151, 379, 182, 379, 182, 99, 379,
	-171, 467, -187, -160, -275, -391, -162, 358, 253, -260,
	211, 354, -160, -302, -301, 26, -324, -306, 145, 246,
	-324, -326, -154, -154, -154, -248, -350, -324, 294, 182,
	-382, -367, -367, -205, -392, 389, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, 225, 173, 356, 43, 176, -324, 393, -324, -324,
	-324, -324, 242, 250, 254, 401, 136, 410, 112, 258,
	-482, 375, 37, -330, -155, -266, 462, -344, 32, 362,
	26, -337, 462, 2, -319, -324, -320, -263, -262, -262,
	463, 426, 26, 112, 455, 2, 8, -294, -296, 438,
	241, 102, 168, 240, -295, 338, 463, 467, 35, 463,
	-324, -263, -336, -332, -262, -343, -342, 430, -392, 455,
	-434, 144, 161, 8, -386, 8, -386, 389, 389, 8,
	-386, -386, 462, 463, 2, 463, 2, 463, 2, 463,
	2, 463, 2, -324, -324, -324, -324, -324, -324, -324,
	-262, -288, 2, -383, -262, 4, 438, 241, 102, 168,
	240, 338, 5, -288, 2, -289, 2, -324, -262, -290,
	-325, -326, 453, 454, 446, -337, -291, 2, -324, -263,
	-324, 50, 219, 395, -292, -324, 154, -262, -262, 2,
	-262, 2, -432, 35, -262, -254, 467, 154, 35, 4,
	-254, -254, 462, 463, 467, -287, 165, 237, 232, -287,
	-353, -286, 206, -284, 274, -284, -284, -446, 462, 461,
	465, 465, 465, 465, 465, -348, -192, 460, 468, -392,
	-347, -346, 35, -200, 271, -348, -348, 464, 463, -347,
	-207, 462, -262, -392, 368, 463, 464, 200, 200, 200,
	329, 463, 393, 433, -81, 266, 463, 467, -253, 34,
	460, -296, 462, -384, 428, 462, 462, 154, -252, -458,
	463, 397, -313, -225, 302, 361, 314, 346, 377, 9,
	8, 8, 467, -392, 467, -459, 80, 393, 68, -315,
	169, 68, -406, -194, 80, -407, -182, 63, 409, 294,
	153, -459, 80, -459, 80, 80, 351, 366, 51, -357,
	38, 38, 26, -99, 220, 154, 439, 379, 182, 393,
	-357, -281, -367, 97, 238, 239, 51, -387, -385, 454,
	-387, 51, -387, -387, -387, 433, -209, -357, 393, 284,
	-397, 393, 467, 38, 38, 26, -99, 220, 154, 393,
	-222, -192, -363, -362, -398, -215, -182, 464, -324, -99,
	-324, -99, 124, 2, -474, 214, 462, -229, 250, -280,
	-279, 250, -211, 2, -207, 154, -251, -364, 198, 467,
	-259, 284, 124, 124, 462, 120, 300, 2, 264, 250,
	-193, 169, -174, 382, 124, -278, 418, -307, -99, 462,
	105, 35, -307, -270, -271, -361, -272, -194, 462, -200,
	-182, 2, -207, -260, -260, -260, -222, -223, -191, -397,
	-398, -398, -81, -365, 463, 463, 463, -149, 268, -148,
	-182, 5, -152, 418, -228, -316, -315, -410, -411, -406,
	225, 182, 409, 199, 137, -244, -195, -194, 98, -150,
	-362, 467, -150, -150, -363, -363, -207, 151, 2, 2,
	-283, -207, -191, -222, -207, -251, -251, -191, -191, -191,
	-99, -324, 348, 151, 151, 464, -283, 300, 99, 379,
	282, 182, -207, -222, -207, -222, -191, -207, -357, -160,
	231, 413, -304, -385, 462, -305, 328, 329, 467, -165,
	36, 110, 211, -207, 439, 121, -324, -324, 393, -482,
	375, -330, 121, -324, 242, 254, 401, 136, 410, 112,
	258, 154, 462, -325, -325, 463, -264, -324, -324, 461,
	470, 463, -247, 467, -246, -324, -262, -262, 463, 463,
	393, 393, 393, 393, 462, 464, -262, -251, 461, 461,
	467, 463, -341, -342, 117, -324, 464, -439, 275, 462,
	462, 463, 463, 467, 463, 439, 439, 463, 463, 463,
	-324, 35, 467, 467, 467, 463, 467, 467, 467, 463,
	463, 154, 463, 463, -297, 287, 463, 11, 12, 453,
	454, 455, 456, 149, 457, 458, 451, 452, 450, 443,
	444, 445, 75, 234, 330, 14, 15, 16, 200, 176,
	-325, -325, -325, 463, -328, -329, 154, 151, 35, -292,
	-292, -292, 463, 154, -262, 463, 463, 462, 463, -318,
	-317, 431, -360, -255, 2, -353, -202, -392, -318, -318,
	-262, -324, 206, 206, -285, 418, 264, -287, -353, -346,
	463, -447, -388, -348, -347, -388, -323, -322, 152, 36,
	110, 248, 172, -200, -243, -347, -347, -392, -348, 463,
	-256, -355, -427, -247, 464, -392, -141, 5, 254, -141,
	-141, -251, 24, 288, -367, 460, 461, 8, 8, 462,
	-386, -386, -251, 154, -389, -312, 407, 72, 302, 389,
	-389, -167, 313, -194, -194, -207, 250, -315, 169, -173,
	250, -367, -201, -182, 462, 462, 211, 211, -194, -201,
	169, -194, 169, -201, -201, -454, 302, 259, -324, 227,
	300, 251, -168, 313, -99, -99, -99, 462, -458, 418,
	111, -207, -222, -207, -211, 313, -217, -387, -387, -279,
	313, -209, -397, 433, -191, -169, -99, -99, -99, 462,
	-192, -170, 313, -147, 178, 463, 455, -182, 427, -182,
	-227, -230, -228, -194, -468, 435, 433, 124, 124, -243,
	-221, -207, 460, -150, -397, -207, -397, -397, -397, 2,
	462, 2, -207, 124, 264, 250, -175, 118, -479, 445,
	-191, -318, -255, -277, -310, 321, 264, -244, 423, -200,
	-277, -257, 467, 154, 445, 464, -244, 2, -171, -171,
	-171, -171, -171, -81, -81, -150, 467, 462, 445, 445,
	462, -397, -397, 463, 467, -207, -193, 182, 182, -199,
	-183, 463, 467, 464, 462, -150, -96, 154, -46, 433,
	379, 466, 348, 348, -182, -203, -191, -207, -204, -222,
	151, 151, -305, -324, -350, -166, 256, -207, 466, -324,
	-324, 121, 121, -324, -325, -325, -324, 121, 154, 462,
	-324, -334, 30, 30, 463, 467, -320, -324, 463, 426,
	-247, -247, 463, 5, 241, 168, 240, -295, 240, -295,
	-295, 8, 455, -392, 463, -332, 119, -324, 387, -392,
	455, -440, -197, 462, -182, 431, -246, -386, -370, -370,
	463, -382, -367, -324, -324, -324, -324, -324, -324, -328,
	-324, -382, -367, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, 112, 250, 258, -325, -329, -328, -324, -324,
	-367, 463, 463, 463, -262, -81, -274, 161, -324, -363,
	467, -274, -274, 463, -353, -353, 462, -324, 206, 461,
	463, 467, -347, 461, 467, 469, 445, -243, 464, -346,
	463, 467, -309, 35, 463, -392, 267, 5, 8, 460,
	461, 463, -386, 463, 463, -251, -324, 393, 393, 124,
	250, 420, -412, -407, -324, -249, -351, -324, 462, 462,
	-164, 116, 351, -460, 2, 124, -171, 124, -171, 437,
	462, 462, 393, 433, -262, -324, -151, 105, -391, -456,
	466, -456, 466, 393, 393, 284, 433, -262, 393, -150,
	154, 2, 2, 2, 463, 463, 467, -413, 35, 262,
	-182, -207, -209, 35, -64, 433, -362, -388, -178, 2,
	-300, 418, -192, -207, 124, -176, 218, -479, -395, -428,
	-247, -277, -269, 251, 79, 463, -318, -271, -255, -324,
	2, 463, -148, -149, -397, -397, -397, -150, -152, -152,
	-316, 2, 462, -193, -183, 462, -152, -195, 2, -398,
	-99, 268, -207, 455, -283, -235, -234, 282, 258, -235,
	328, 328, 265, 463, 145, 215, -165, -192, -324, -324,
	121, 30, 30, -324, -324, -334, 463, -324, -324, -262,
	461, 5, -324, 463, 463, 463, -324, 464, -441, -182,
	-324, 463, 463, 463, 463, 467, 467, 463, 463, 463,
	463, -329, 154, 112, 258, 462, 463, 463, -331, 164,
	51, -353, -331, -331, -285, -251, -353, -321, -388, -322,
	-192, 460, -392, -355, 462, 464, 461, 2, 460, 463,
	-194, -194, -315, 124, -414, 80, -416, 66, 137, 86,
	250, 254, 409, 294, 63, 105, 306, 35, 463, 463,
	467, -165, -249, -251, 250, 372, 105, 250, 105, 98,
	404, -194, -201, -251, -251, -207, 130, 463, 467, 445,
	2, 455, 455, -211, -209, -397, 130, 463, -192, -398,
	-231, 185, -194, -411, -408, -409, 294, -415, -417, 137,
	294, -99, 2, 462, -229, -280, -99, 268, 461, 462,
	-182, 264, 462, -192, -177, 217, -479, -395, -174, -303,
	-301, -308, 462, 264, -99, -247, 445, 463, 463, 98,
	98, -249, 462, 462, -251, 98, 463, -47, -48, 182,
	80, 286, -204, 379, 182, 462, 462, -165, -324, -324,
	-324, 463, -247, -392, 455, -435, 282, 463, -324, -324,
	-325, 154, 462, -334, -436, 432, -324, -262, -436, -436,
	463, -348, -388, 2, 460, 2, -315, -201, -205, -198,
	-182, 137, 169, 254, 211, 462, -325, -207, 462, 2,
	-470, 107, 186, -314, -471, 85, 373, -351, -166, 463,
	463, 254, 254, -324, -367, -171, -171, 463, 463, -324,
	393, -391, 84, -389, 2, -456, -324, 393, -232, -233,
	176, -413, 211, -198, 211, -469, 433, -227, -468, -65,
	-66, 394, -362, -249, -207, -249, 264, -479, -395, -175,
	-277, 113, -251, 80, -303, -330, -150, 462, 462, 463,
	-249, -249, 463, 462, -150, 467, 26, 462, 26, 462,
	-207, -222, -262, -262, 463, -247, 51, 463, 463, -325,
	-334, 463, -437, -438, -197, -347, 461, 2, -416, -198,
	250, -324, -184, 462, -324, 186, 108, 174, -231, 462,
	306, -190, 66, 462, 462, 462, 445, 154, 462, -468,
	280, 462, 98, 247, 463, 35, -66, 9, 463, -300,
	463, -207, -395, -176, 413, 251, 463, -201, -277, -398,
	-398, -314, 463, 463, -398, -48, -251, -251, 463, 463,
	-442, 300, 329, 163, -262, 463, 467, 35, 124, 463,
	-418, 235, -182, 463, 108, 174, -232, -251, -207, -457,
	418, -205, -237, -236, -234, -239, -238, -234, -262, -389,
	84, 280, -262, -207, -250, -352, -194, 98, -231, -99,
	-314, 462, -314, 462, -177, 351, -317, 463, 463, -231,
	-314, 463, 463, 463, 463, -443, -444, 43, 406, 89,
	-324, -443, -443, -438, -440, 137, -419, -422, -421, 264,
	357, 155, 281, 463, 372, 429, -470, 463, -243, -324,
	463, 467, 423, 463, 467, 423, 463, 154, 463, 462,
	463, 467, -232, -469, -231, -249, -231, -249, -270, -150,
	-150, -232, -231, -150, -445, 123, -444, 291, 150, 328,
	291, 150, -445, -445, -198, -421, 264, -422, 264, 413,
	109, -418, -236, 176, -238, 154, 280, -251, -352, -468,
	-232, 463, -232, 463, -318, -232, 89, 161, 388, 247,
	30, -420, 247, 319, 56, 351, -420, -419, 462, 462,
	463, -475, 431, -314, -475, -314, 328, 272, -444, 22,
	254, 105, -470, -262, -262, -172, 56, 319, 2, -231,
	-231, 463, 463, -232, -232, -232, 393, -475, -475, 462,
	-262, 463, -232,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 368, 369, 371,
	372, 373, 375, 376, 378, 380, 382, 384, 385, 387,
	389, 391, 392, 393, 394, 395, 397, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 457, 459,
	0, 929, 931, 933, 935, 25, 26, 0, 0, 190,
	192, 194, 0, 218, 220, 222, 223, 225, -2, 0,
	320, 321, 323, 325, -2, -2, 0, 0, 446, 448,
	0, 0, 0, 468, 469, 0, 1019, -2, 462, 464,
	466, 531, 533, 535, 537, 539, 541, 543, 544, 546,
	548, 550, 552, 554, 556, 558, 559, 561, 563, 565,
	567, 569, 571, 573, 575, 577, 579, 581, -2, -2,
	-2, 0, -2, -2, -2, 947, 29, 31, 33, 35,
	37, 39, 41, 61, 274, 275, 277, 279, 281, 284,
	285, 287, 1067, 327, 329, 331, 333, 335, 0, -2,
	1079, 0, 0, 43, 44, 45, 46, 47, 48, 49,
	50, 68, 69, 70, 71, 72, 73, 74, 75, 54,
	56, 57, 63, 64, 66, 52, 0, 0, 1043, 1045,
	1047, 1049, -2, 0, 0, 7, 9, 11, 13, 15,
	17, 19, 21, 370, 374, 377, 379, 381, 383, 386,
	388, 390, 396, 398, 400, 824, 1679, 1693, 1694, 1695,
	1698, 1699, 1700, 1701, 1702, 1703, 2044, 2124, 2125, 1722,
	1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
	1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
	1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
	1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
	1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
	1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
	1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892,
	1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,
	1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
	1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
	1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
	1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
	2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
	2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022,
	2023, 2024, 2025, 2026, 0, 424, 422, 1673, 425, 1877,
	427, 429, 314, 315, 316, 317, 318, 319, 0, 439,
	433, 438, 440, 442, 443, 444, 445, 419, 417, 0,
	439, 1725, 437, 927, 928, 922, 923, 1910, 957, 458,
	-2, -2, -2, 2013, -2, 490, -2, 497, 2016, 1912,
	502, 0, 504, -2, 507, 930, 932, 934, 27, 28,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	-2, -2, -2, -2, 0, 0, 1762, 1649, 1695, 1652,
	1647, 191, 193, 195, 196, 0, 0, 0, 0, 0,
	0, 219, 221, 224, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 731, 732, 0, 0, 737, 875, 876, 897,
	0, 0, 0, 0, 322, 324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 0, 0, 0,
	0, 0, 252, 360, 361, 0, 1068, 1068, 0, 0,
	0, 0, 171, 162, 0, 0, 720, 447, 449, 0,
	157, 0, 0, 926, 0, 173, 0, 0, 463, 465,
	467, 532, 534, 536, 538, 540, 542, 545, 547, 549,
	551, 553, 555, 557, 560, 562, 564, 566, 568, 570,
	572, 574, 576, 578, 580, 582, 583, 0, 0, 0,
	0, -2, -2, 0, 0, -2, -2, 0, 0, 0,
	0, 0, 0, 0, -2, 0, 0, -2, -2, -2,
	0, 0, 0, -2, -2, 0, 0, 0, 0, 586,
	588, 589, 590, 0, 638, 655, 0, 866, 1069, 959,
	937, 950, 959, 939, 940, 941, 942, 943, 948, 949,
	952, 0, 944, 945, 946, 30, 32, 34, 36, 38,
	40, 42, 276, 278, 280, 282, 286, 288, -2, 1041,
	1042, 328, 330, 332, 334, 336, 450, 0, 452, 0,
	587, 1023, 1031, 0, -2, 0, 1073, 1073, 1073, 0,
	0, 1042, 1040, 0, 455, 456, 511, 512, 1306, 0,
	0, 0, 0, 0, 1546, 1390, 0, 513, -2, 1421,
	1423, 1992, 2013, 1545, 1425, 1426, 1427, 1428, 1429, 0,
	0, 1432, 0, 1434, 1435, 1436, 1437, 0, 1439, 0,
	1443, 1444, 1445, 0, 1997, 1626, 1691, -2, 1211, 1212,
	1213, 1214, 1215, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1687, 0, 1512, 1459, -2, 1712, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1771,
	-2, -2, -2, -2, -2, -2, -2, 1267, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 2027, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 0, 1981, 1998,
	1999, 2004, 2006, 2000, 1989, 1482, -2, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 1268, -2, 1993, 1994, 2009, 2010, 2015, 2020,
	2021, 1996, 2005, -2, -2, 1059, 1885, 1062, 824, 1060,
	1044, 1046, 0, 1048, 0, 0, 0, 1053, 1076, 1074,
	0, 1112, 1057, 1058, 1068, 1130, 1153, 0, 1135, 0,
	1153, 1179, 0, 1140, 1905, 1460, 1461, 0, 1695, 1692,
	-2, 0, 0, 0, 0, 0, 0, 420, 0, 426,
	428, 0, 0, 0, 0, 0, 0, 0, 0, 956,
	460, 461, 0, 485, 0, 489, 1988, -2, 1730, 1925,
	-2, 493, 960, 964, 965, 966, 967, 0, 0, 0,
	0, 0, 499, 0, 0, 486, 487, 505, 508, 0,
	51, 0, 1998, 1179, 53, 0, 1663, 1717, 1718, 1719,
	1720, 1721, 2027, 2043, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
	2121, 2122, 2123, 55, 0, 1998, 58, 0, 1998, 0,
	-2, 62, 0, 1998, 174, 175, 1708, 1709, 1713, 1714,
	1715, 1716, 65, 0, 1669, 67, 0, 1666, 76, 0,
	1998, 0, 1646, -2, 0, 0, 712, 1643, 1648, 713,
	1653, 0, 197, 198, 199, 200, 201, 1998, 203, 204,
	0, 206, 207, 1998, 209, 210, 0, 212, 227, 228,
	0, 230, 0, 1998, 0, 0, 0, 236, -2, 253,
	0, 250, 0, 240, 241, 243, 244, 245, 246, 247,
	0, 0, 0, 881, 292, 290, 1674, 0, -2, 1998,
	869, 872, 1998, 874, 886, 1677, 0, -2, 0, 1066,
	1998, 974, 733, 734, 735, 736, 0, 311, 0, 987,
	0, 989, 0, 1009, 1185, 1130, 254, 255, 256, 257,
	258, 1998, 0, 0, 0, 263, 0, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 150, 1998, 339, 358,
	150, 1998, 342, 150, 1998, 345, 150, 1998, 348, 1641,
	150, 1998, 351, 352, 1998, 354, 176, 355, 1998, 357,
	0, -2, 413, 1681, -2, 363, 0, 364, 0, -2,
	0, 188, 0, 0, 718, 719, 0, 924, 925, 0,
	0, 470, 0, 0, 584, 585, 0, 0, 595, 596,
	597, 598, 1913, 1883, 1787, 602, 0, 605, -2, 0,
	0, 0, 609, 0, 614, 615, 616, 0, 717, 618,
	0, 0, 620, 0, 624, 0, 627, 0, 629, 0,
	631, -2, -2, -2, 642, -2, 0, 646, 0, 648,
	0, 0, 0, 0, 663, 664, 0, 669, 0, 672,
	673, 674, 0, 676, 677, 678, 679, 0, 681, 682,
	-2, -2, 686, 688, 0, 695, 0, 699, 0, 703,
	0, 591, 592, 150, 1183, 936, -2, 938, 0, 954,
	1026, -2, 0, 451, 0, 454, 1037, 0, 1033, 0,
	1035, 0, 1024, 1029, 1091, 1092, 0, 0, 0, 0,
	1071, 1072, 0, 0, 0, 1021, 1022, 0, 0, 0,
	0, 1551, 1552, 1553, 1554, 1555, 1556, 1559, 1560, 1557,
	1558, 1561, 1562, 0, 0, 0, 0, 0, 1563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1564, 1565, 1566, 0, 0, 1568, 0, 1570, 0, 0,
	0, 0, 0, 0, 1369, 1371, 1634, 0, 0, 1567,
	1311, 1312, 1313, 1348, 1349, 0, 0, 1422, 1631, 1630,
	1424, 0, 1582, 0, 1431, 0, 1303, 1438, 1660, -2,
	0, 1546, 1577, 0, 0, 1446, 1447, 1448, 0, 0,
	1582, 0, 0, 1625, 0, 1514, 0, 1247, 0, 1248,
	1249, 0, 1250, 1251, 1264, 1277, 0, 0, 0, 0,
	1281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1269, 0, 0,
	0, 1606, -2, 0, 0, 0, 0, 0, 1061, 0,
	0, 1116, 1635, 1639, 1640, 1116, 1116, 0, 0, 1583,
	1176, 1176, 0, 0, 1172, 1172, 1172, 1170, 1147, 0,
	401, 403, 405, 407, 408, 409, 411, 1153, 0, 1163,
	0, 1153, 1153, 0, -2, 1135, 0, 0, 1163, 1180,
	1181, 0, 0, 0, 0, 0, 0, 1696, 0, 0,
	0, 1683, 0, 0, 0, 431, 441, 1068, 0, 1585,
	1201, 1204, 1205, 1206, 1207, 1210, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, -2, 1265, 1267, 1288, 1254, 1255, 1256,
	1257, 1258, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
	1244, 1245, 1246, 1260, 0, 1235, 1235, 1235, 1252, 1253,
	1276, 1287, 1279, 1287, 1283, 1202, 1203, 1270, 1271, 1272,
	1273, 0, 435, 0, 0, 0, 0, -2, 495, 500,
	501, 0, 0, 962, 0, 968, 522, 523, 524, 970,
	971, 0, 498, 525, 526, 527, 528, 529, 530, 0,
	841, 0, 843, 1655, 0, 496, 515, 503, 0, 509,
	77, 919, 116, 0, 919, 919, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 101, 112, 89, 90, 0,
	0, 0, 0, 59, 849, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 100,
	0, 95, 79, 0, 0, 0, 102, 114, 0, 141,
	143, 0, 0, 1166, 158, 0, 711, 0, 0, 1696,
	1651, 0, 0, 0, 0, 229, 231, 0, 233, 234,
	235, 0, 880, 0, 242, 239, 283, 798, 1998, 848,
	1998, 846, 1678, 0, 0, 0, 309, 304, 0, 306,
	867, 0, 1065, 0, 0, 0, 0, 887, 0, 1998,
	892, 1665, 1704, 1705, 976, 0, 313, 0, 990, 0,
	0, 1186, 0, 1188, 0, 260, 261, 262, 0, 337,
	0, 148, 149, 0, 340, 0, 343, 0, 346, 0,
	0, 349, 0, 0, 0, 0, 1068, 0, 0, 0,
	0, 164, 0, 0, 0, 0, 0, 0, 188, 160,
	188, 188, 1166, 472, 1166, 474, 0, 0, 599, 600,
	601, 603, 604, 606, 607, -2, -2, 696, 666, 0,
	0, 0, 665, 617, 0, 705, 1901, 715, 619, 1762,
	622, 1762, 625, 1762, 628, 630, 633, 658, 641, 645,
	0, 0, 0, 650, 0, 652, 0, 654, 666, 667,
	670, 675, 680, 0, 0, 0, 0, 0, 0, 0,
	865, 0, 953, 1027, 1029, 453, 1030, 0, 1039, 1032,
	0, 1036, 1025, 1089, 1090, 1095, 1096, 1102, 1105, 1106,
	1098, 1306, 1054, 1055, 1056, 1080, 1081, 906, 0, 2124,
	1307, 1196, 1308, 1309, 1662, 0, 1314, 1315, 1316, 1317,
	1318, 1319, 1320, 1321, 1322, 1323, -2, -2, -2, -2,
	-2, -2, -2, -2, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, -2, -2, -2, 1346, 1347,
	-2, 1569, 1571, 0, 1634, 0, -2, 0, -2, -2,
	-2, -2, 1366, 0, 1368, 1373, 1375, 1377, 0, 0,
	0, 0, 1633, 1387, 1617, 1618, 0, 0, 1548, 1549,
	1550, 1372, 0, 1391, 1632, 1629, 0, 0, 1581, 1079,
	1450, 0, 0, 0, 0, 1457, 0, 1661, 1302, 1289,
	1290, 1291, 1292, 1293, 1294, 1304, 1442, 1579, 0, 1578,
	0, 0, 0, 1589, 0, 1624, 1620, 0, 1684, 1690,
	1522, 0, 0, 0, 0, 1658, 0, 0, 0, 0,
	0, 0, 0, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1494, 0, 1592, -2, -2, -2, -2, -2,
	-2, -2, -2, 0, 1496, 0, 1498, 1583, 1603, 0,
	0, 1392, 0, 0, 0, 1546, 0, 1501, 1583, 1611,
	0, 0, 0, 0, 0, 1583, 0, 1616, 0, 1508,
	0, 1510, 1063, 0, 0, 1191, 0, 0, 0, 1638,
	1191, 1191, 0, 1111, 0, 0, 1173, 1174, 1175, 0,
	0, 1176, 0, 1167, 1171, 1168, 1169, 0, 0, 1153,
	402, 404, 406, 410, 412, 1163, 1127, 0, 0, 1664,
	1133, 1162, 0, 824, 1152, 1163, 1163, 0, -2, 1137,
	0, 0, 1079, -2, 189, 823, 0, 0, 0, 0,
	421, 423, 0, 0, 415, 0, 418, 0, 1192, 1195,
	0, 1208, 0, 0, -2, 0, 0, 0, 0, 0,
	488, 0, 961, 969, 0, 519, 0, 521, 0, 842,
	1657, 1656, 0, 510, 0, 0, 0, 0, 918, 120,
	1998, 0, 152, 0, 0, 792, 1670, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 91, 0, 0, 0, 0, 0, 0,
	0, 850, 851, 853, 859, 861, 0, 855, 1659, 0,
	856, 0, 858, 860, 862, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 92, 0, 0, 0,
	0, 1645, 179, 1165, 0, 1644, 1654, 0, 202, 205,
	208, 211, 0, 237, 0, 0, 740, 723, 0, 844,
	847, 0, 824, 879, 1676, 0, 291, 188, 0, 0,
	305, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	0, 1998, 978, 984, 0, 1191, 0, 1007, 992, 0,
	0, 0, 1007, 1011, 1012, 1014, 1015, 0, 0, 1187,
	0, 264, 359, 150, 150, 150, 1642, 150, 150, 177,
	353, 356, 362, 414, 1068, 1068, 188, 186, 1862, 184,
	181, 183, 0, 0, 0, 741, 743, 744, 745, 746,
	0, 1705, 0, 1816, 1705, 0, 995, 997, 0, 155,
	188, 0, 0, 303, 471, 476, 593, 0, 635, 660,
	608, 610, 611, 612, 0, 716, 714, 621, 623, 626,
	644, 647, 649, 0, 0, 0, 662, 0, 0, 0,
	0, 0, 0, 0, 700, 701, 702, 704, 1184, 1028,
	1038, 1034, 0, 1100, 0, 1099, 1103, 1104, 0, 1088,
	904, 905, 0, 0, 0, 0, -2, -2, 0, 0,
	0, 1388, 0, -2, 1367, 1370, 1374, 1376, 1378, 0,
	0, 0, 0, 0, 0, 1572, 0, 1574, 1389, 1627,
	1630, 1544, 0, 0, 1078, 1079, 1079, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 1580, 0, 1587, 1588,
	0, 1449, 0, 1621, 0, 0, 0, 1458, 0, 0,
	0, 1259, 1233, 0, 1287, 1285, 1286, 1280, 1287, 1284,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 1481,
	1493, 0, 1495, 1497, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1395, 1396, 1397, 1500, 1609, 1610, 0, 0, 0, 0,
	0, 0, 1506, 0, 1615, 1507, 1509, 1068, 1113, 1108,
	1190, 0, 1636, 1166, 1115, 1117, 1637, 1667, 1108, 1108,
	0, 1584, 0, 0, 1157, 0, 0, 0, 1159, 0,
	1148, 0, 1150, 1163, 1132, 0, 0, 1125, 0, 1121,
	1122, 1123, 1124, 824, 1161, 1134, 1138, 1684, 0, 1182,
	0, 1142, 1145, 0, 0, 1697, 213, 216, 217, 214,
	215, 430, 0, 0, 1586, 0, 1197, 0, 0, 0,
	0, 0, 434, 0, 484, -2, 517, 518, 520, 0,
	516, 117, 919, 0, 0, 910, 0, 122, 1998, 131,
	0, 769, 0, 1668, 0, 0, 0, 0, 921, 0,
	1998, 150, 1998, 150, 133, 136, 0, 140, 138, 0,
	0, 760, 78, 919, 81, 85, 93, 0, 0, 0,
	99, 0, 0, 0, 912, 0, 854, 857, 863, 60,
	0, 914, 908, 0, 907, 142, 83, 87, 94, 0,
	916, 80, 0, 188, 0, 159, 1650, 0, 0, 0,
	0, 0, 739, 809, 0, 0, 0, 0, 0, 0,
	297, 293, 0, 302, 308, 307, 870, -2, 873, 882,
	0, 884, 896, 0, 0, 0, 980, 984, 0, 983,
	1066, 1079, 312, 985, 1007, 0, 0, 0, 994, 991,
	988, 1191, 0, 0, 0, 0, 0, 259, 338, 341,
	344, 347, 350, 365, 366, 163, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 1705, 1705, 0,
	1672, 0, 0, 0, 0, 156, 161, 0, 473, 0,
	0, 0, 651, 653, 666, 689, 690, 755, 0, 755,
	0, 0, 0, 0, 1082, 1083, 0, 906, 0, 1310,
	1351, 0, 0, -2, 0, 0, 1355, 0, 0, 0,
	-2, 0, 0, 0, 1573, 1575, 0, 1629, 1451, 0,
	0, 0, 1455, 1433, 1295, 1296, 1297, 1298, 1299, 1300,
	1301, 0, 1440, 1441, 1547, 1590, 1619, 1623, 0, 1685,
	1689, 1520, 1521, 1525, 1675, 0, 0, 0, 1278, 1282,
	1462, 0, 0, 0, 0, 0, 0, 0, 1591, 1602,
	1604, 1393, 1394, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, -2, -2, -2, 1411, 1412, 1413, -2,
	-2, -2, 0, 0, 0, 1605, 1607, 1608, 1612, 1613,
	0, 1503, 1504, 1505, 1614, 0, 1110, 0, 1189, 1114,
	0, 1110, 1110, 1075, 1155, 0, 0, 1178, 0, 1130,
	1149, 0, 1139, 1128, 0, 1129, 0, 1160, 0, 1136,
	1141, 0, 1144, 0, 1451, -2, 432, 416, 0, 0,
	1199, 1209, 0, 1262, 1266, 436, 1164, 0, 0, 0,
	0, 151, 767, 791, 0, 0, 899, 906, 0, 0,
	124, 0, 0, 0, 132, 0, 129, 0, 135, 139,
	0, 0, 0, 0, 0, 96, 97, 98, 0, 103,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 153,
	0, 232, 878, 238, 749, 797, 0, 799, 0, 724,
	0, 798, 848, 0, 289, 0, 296, 0, 868, 883,
	0, 0, 0, 0, 0, 982, 984, 0, 975, 976,
	1094, 986, 1005, -2, 1004, 0, 1079, 1013, 1010, 1016,
	1017, 0, 185, 0, 180, 182, 0, 166, 0, 0,
	742, 747, 0, 0, 0, 0, 0, 996, 998, 0,
	172, 0, 594, 613, 661, 691, 754, 0, 0, 693,
	0, 0, 1097, 1101, 1086, 1087, 1084, 906, 1353, 1357,
	0, 0, 0, 1359, -2, 0, 1381, -2, -2, 1576,
	1628, 1430, 1079, 1452, 1454, 1305, 1622, 0, 1527, 1524,
	0, 1511, 1234, 1472, 1473, 0, 0, 1476, 1478, 1479,
	1480, 1601, 0, 0, 0, 0, 1502, 1064, 1516, 0,
	0, 1118, 1516, 1516, 1156, 0, 1158, 1153, 1151, 1126,
	1119, 0, 1685, 1143, 0, 0, 1193, 1198, 0, 1261,
	118, 119, 121, 0, 768, 0, 771, 0, 0, 0,
	0, 778, 779, 0, 0, 0, 0, 0, 813, 822,
	0, 1088, 0, 0, 0, 126, 145, 0, 0, 920,
	0, 150, 150, 0, 0, 911, 0, 0, 0, 0,
	106, 0, 0, 913, 915, 909, 0, 0, 917, 178,
	757, 0, 809, 801, 802, 803, 0, 808, 810, 0,
	0, 728, 725, 740, 723, 845, 877, 0, 294, 0,
	895, 0, 0, 0, 972, 984, 0, 977, 978, 1007,
	1093, 0, 0, 0, 993, 1094, 0, 187, 188, 0,
	0, 0, 0, 0, 0, 0, 188, 475, 477, 0,
	0, 483, 753, 0, 0, 0, 0, 1085, 1361, -2,
	-2, 1382, 0, 1686, 1688, 1079, 0, 1513, 0, 0,
	-2, 0, 0, 0, 1050, 0, 1109, 1107, 1051, 1052,
	1177, 1163, 0, 1146, 0, 1200, 123, 0, 772, 773,
	1671, 775, 0, 777, 780, 0, 782, 1707, 0, 786,
	793, 814, 0, 749, 0, 819, 820, 900, 901, 795,
	0, 125, 127, 144, 903, 128, 134, 0, 0, 82,
	0, 0, 1756, 109, 107, 105, 84, 0, 723, 756,
	0, 800, 0, 811, 812, 726, 0, 0, 0, 295,
	298, 0, 301, 0, 896, 0, 0, 0, 979, 980,
	310, 0, 0, 0, 1007, 1018, 165, 0, 0, 822,
	0, 0, 790, 0, 170, 0, 479, 0, 481, 0,
	692, 694, 0, 0, 1453, 1531, 0, 1474, 1475, -2,
	0, 1419, 1515, 1517, 0, 1131, 1120, 1194, 770, 774,
	0, 0, 828, 0, 0, 0, 817, 818, 757, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 721,
	0, 0, 729, 0, 749, 0, 299, 300, 822, 0,
	822, 0, 981, 982, 0, 1000, 1001, 1003, 1008, 0,
	0, 749, 822, 789, 0, 478, 0, 0, 697, 698,
	0, 0, 0, 0, 1526, 1420, 0, 0, 0, 781,
	833, 0, 0, 0, 815, 816, 813, 0, 824, 130,
	0, 902, 0, 761, 0, 0, 764, 0, 0, 110,
	1756, 108, 0, 0, 0, 805, 807, 730, 757, 728,
	749, 0, 749, 0, 973, 0, 1002, 188, 188, 757,
	749, 188, 480, 482, 1523, 1543, 1532, -2, 1961, 1759,
	0, 1543, 1543, 1518, 1519, 0, 783, 829, 830, 0,
	825, 826, 827, 1706, 784, 785, 794, 821, 828, 146,
	758, 0, 0, 759, 0, 0, 113, 0, 115, 0,
	804, 0, 723, 727, 757, 0, 757, 0, 1191, 167,
	168, 787, 757, 169, 1528, 0, 0, 1534, 1535, 1536,
	1537, 1538, 1529, 1530, 776, 831, 0, 832, 0, 0,
	0, 833, 762, 0, 765, 0, 111, 0, 806, 722,
	893, 822, 893, 822, 999, 788, 0, 1540, 1541, 0,
	0, 834, 0, 837, 838, 0, 835, 813, 0, 0,
	752, 888, 0, 749, 890, 749, 1539, 1542, 1533, 836,
	839, 840, 796, 0, 0, 748, 750, 751, 894, 757,
	757, 757, 0, 893, 893, 763, 0, 889, 891, 0,
	0, 757, 766,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 451, 3, 457, 452, 3,
	462, 463, 455, 453, 467, 454, 464, 456, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 470, 3,
	443, 445, 444, 448, 466, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 460, 3, 461, 458, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 468, 450, 469, 446,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 447, 57786, 449, 57787, 459, 57788, 465, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1085
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1094
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1095
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1096
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1098
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1099
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1100
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1101
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1105
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1114
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1115
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1118
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1119
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1120
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1121
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1122
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1123
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1124
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1177
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1203
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1214
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1229
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1233
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1237
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1248
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1260
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1279
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1311
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1315
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1319
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1325
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1329
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1335
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1344
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1355
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1359
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1365
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1373
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1383
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1387
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1397
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1408
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1415
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1427
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1434
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1442
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1447
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1451
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1456
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1462
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1470
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1481
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1491
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1501
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1510
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1521
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1527
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1539
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1547
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1553
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1558
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1573
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1579
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1610
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1615
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1625
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1635
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1640
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1649
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1678
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1688
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1697
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1706
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1711
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1718
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1726
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1727
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1731
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1735
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1741
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1749
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1753
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1759
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1763
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1770
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1774
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1778
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1784
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1788
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1814
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1817
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1840
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1844
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1847
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1851
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1855
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1861
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1865
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1871
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1908
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1913
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1917
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1923
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1928
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1933
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1938
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1943
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1947
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1963
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1966
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1970
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1974
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1982
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1992
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1996
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2002
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2006
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2010
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2014
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2020
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2024
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2030
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2034
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2038
		{
			sqlVAL.union.val = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2044
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2057
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2058
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2059
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2060
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2070
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2080
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2102
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2110
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2112
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2116
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2119
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2129
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2138
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2146
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2148
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2152
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2155
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2159
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2167
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2184
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2189
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2201
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2202
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2204
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2205
		{
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2206
		{
			return helpWith(sqllex, "CREATE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2209
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2210
		{
			return unimplemented(sqllex, "create cast")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2211
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2212
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2213
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2214
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2215
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2216
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2217
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2218
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2219
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2220
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2221
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2222
		{
			return unimplemented(sqllex, "create operator")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2223
		{
			return unimplemented(sqllex, "create publication")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2224
		{
			return unimplemented(sqllex, "create rule")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2225
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2226
		{
			return unimplemented(sqllex, "create server")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2227
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2228
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2232
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2233
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2236
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2237
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2240
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2241
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2244
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2245
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2246
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2247
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2248
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2249
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2252
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2253
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2254
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2255
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2256
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2258
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2259
		{
			return unimplemented(sqllex, "drop server")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2260
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2261
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2262
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2267
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2268
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2269
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2270
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2272
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2273
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2274
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2275
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2285
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2293
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2297
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2301
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2307
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2311
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2320
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2327
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2333
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2339
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2343
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2354
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2366
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2374
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2382
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2392
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2396
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2402
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2406
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2413
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2417
		{

			sqlVAL.union.val = nil
		}
	case 310:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2431
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2441
		{
			return helpWith(sqllex, "DELETE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2444
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2445
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2453
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2456
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2457
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2458
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2459
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2460
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2469
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2470
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2471
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2472
		{
			return helpWith(sqllex, "DROP")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2475
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2476
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2478
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2479
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2487
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2491
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2502
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2509
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2517
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2521
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2524
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2532
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2540
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2547
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2555
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2563
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2570
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2578
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2582
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2585
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2593
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2597
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2600
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2604
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2609
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2632
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2635
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2637
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2641
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2645
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2649
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2653
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2660
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2664
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2667
		{
			return helpWith(sqllex, "DELETE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2669
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2670
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2671
		{
			return helpWith(sqllex, "INSERT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2672
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2674
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2675
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2676
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2679
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2684
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2685
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2691
		{
			return helpWith(sqllex, "DELETE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2692
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2693
		{
			return helpWith(sqllex, "INSERT")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2695
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2699
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2700
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2704
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2708
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2718
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2726
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2734
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2738
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2742
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2752
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2759
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2767
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2771
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2775
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2785
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2789
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2793
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2797
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2800
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2820
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2824
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2828
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2831
		{
			return helpWith(sqllex, "GRANT")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2851
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2855
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2859
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2862
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2867
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2871
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2881
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2899
		{
			return helpWith(sqllex, "RESET")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2900
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2908
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2912
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2915
		{
			return helpWith(sqllex, "RESET")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2923
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2926
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2937
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2940
		{
			return helpWith(sqllex, "USE")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2944
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2945
		{
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2946
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2947
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2951
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2952
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2953
		{
			return helpWith(sqllex, "USE")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2969
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2984
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2987
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3005
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3013
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3017
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3021
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3027
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3037
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3041
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3045
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3049
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3053
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3064
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3067
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3077
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3093
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3097
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3102
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3119
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3122
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3124
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3127
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3131
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3150
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3157
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3162
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3167
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3172
		{
			return unimplemented(sqllex, "set from current")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3173
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3181
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3186
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3193
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3197
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3203
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3207
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3214
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3235
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3245
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3249
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3253
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3257
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3261
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3267
		{
			sqlVAL.union.val = tree.Low
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3271
		{
			sqlVAL.union.val = tree.Normal
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3275
		{
			sqlVAL.union.val = tree.High
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3286
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3294
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3299
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3303
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3316
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3318
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3319
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3320
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3321
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3323
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3324
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3325
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3326
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3327
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3328
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3329
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3331
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3332
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3333
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3334
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3339
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3340
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3343
		{
			return helpWith(sqllex, "SHOW")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3350
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3351
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3352
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3363
		{
			sqlVAL.str = "client_encoding"
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3366
		{
			sqlVAL.str = "timezone"
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3367
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3381
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3385
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3389
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3400
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3408
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3416
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3423
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3431
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3439
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3446
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3456
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3463
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3465
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3468
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3476
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3479
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3487
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3491
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3495
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3499
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3502
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3510
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3513
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3526
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3534
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3542
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3545
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3547
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3551
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3555
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3558
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3560
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3564
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3567
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3575
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3578
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3580
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3583
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3591
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3594
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3596
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3599
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3603
		{
			sqlVAL.union.val = true
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3605
		{
			sqlVAL.union.val = true
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3607
		{
			sqlVAL.union.val = false
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3624
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3625
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3627
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3631
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3634
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3636
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3644
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3652
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3661
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3664
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3666
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3669
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3671
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3675
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3678
		{
			sqlVAL.union.val = true
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3679
		{
			sqlVAL.union.val = false
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3687
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3690
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3692
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3695
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3703
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3713
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3723
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3726
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = true
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3730
		{
			sqlVAL.union.val = false
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3737
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3741
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3744
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3751
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3755
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3758
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3765
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3769
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3777
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3782
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3787
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3791
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3799
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3803
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3807
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3820
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3823
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3831
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3834
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3838
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3842
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3846
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3854
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3862
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3869
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3876
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3880
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3891
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3899
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3905
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3914
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3919
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3923
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3926
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3930
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3937
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3942
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4062
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4066
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4070
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4109
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4113
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4118
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4122
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4131
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4138
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4142
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4154
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4163
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4166
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4202
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4214
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4227
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4228
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4229
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4233
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4244
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4256
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4257
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4258
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4272
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4273
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4274
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4275
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4276
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4277
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4278
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4279
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4284
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4294
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4300
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4306
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4309
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4313
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4322
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4329
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4334
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4339
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4345
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4352
		{
			sqlVAL.str = ""
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4359
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4365
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4372
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4379
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4385
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4389
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4405
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4409
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 766:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4415
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4429
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4440
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4444
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4450
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4458
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4462
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4466
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4470
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4474
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4492
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4496
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4500
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4512
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4516
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4526
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4530
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4534
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 787:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4541
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4551
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4563
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4573
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4585
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4590
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4596
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4602
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4613
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4623
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4637
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4641
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4647
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4657
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4668
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4672
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4679
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4685
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4696
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4700
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4706
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4716
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4722
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4726
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4732
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4737
		{
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4738
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4739
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4740
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4741
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4742
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4759
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4773
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4797
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4801
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4805
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4814
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4818
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4822
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4826
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4830
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4836
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4842
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4850
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4854
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4858
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4862
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4866
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4872
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4876
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4882
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4901
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4906
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4910
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4914
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4917
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4921
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4922
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4924
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4925
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4926
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4929
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4931
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4933
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4935
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4936
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4938
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4939
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4941
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4943
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4951
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4954
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4962
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4966
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4969
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4973
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4977
		{
			sqlVAL.union.val = nil
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4987
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4991
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4994
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4999
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5000
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5008
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5016
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 879:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5017
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5020
		{
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5021
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5027
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 883:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5029
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 884:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5031
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5033
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5035
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5037
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5053
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5067
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5082
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5096
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5110
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5113
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5114
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5118
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5133
		{
			sqlVAL.union.val = false
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5139
		{
			sqlVAL.union.val = true
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5143
		{
			sqlVAL.union.val = false
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5149
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5162
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5184
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5185
		{
			sqlVAL.str = ""
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5189
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.union.val = tree.Descending
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5197
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 907:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5203
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5210
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5214
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5220
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5226
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5234
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5240
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5248
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5254
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5262
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5266
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5271
		{
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5272
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5275
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5276
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5284
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5287
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5297
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5306
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5309
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5317
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5320
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5324
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5325
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5326
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5342
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5345
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5347
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5350
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5360
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5363
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5365
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5368
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5372
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5377
		{
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5378
		{
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5379
		{
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5387
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5394
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5397
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5398
		{
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5402
		{
			sqlVAL.str = ""
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5406
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5410
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5414
		{
			sqlVAL.str = ""
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5420
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5424
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5430
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5434
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5440
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5444
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5457
		{
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5459
		{
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5463
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5468
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5472
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5476
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5482
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5494
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5498
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 972:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5508
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5518
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5528
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5532
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5536
		{
			sqlVAL.str = ""
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5542
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5546
		{
			sqlVAL.str = ""
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5552
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5556
		{
			sqlVAL.str = ""
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5562
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5566
		{
			sqlVAL.str = ""
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5571
		{
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5572
		{
		}
	case 985:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5584
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 986:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5591
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5598
		{
			return helpWith(sqllex, "INSERT")
		}
	case 988:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5609
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5616
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5620
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5629
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5636
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5640
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5644
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5650
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5654
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5674
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5678
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5682
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5688
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5691
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5692
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5694
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5700
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5705
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5709
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5726
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5738
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5741
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5744
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5750
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5754
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5767
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5770
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5774
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5817
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5823
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5827
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5842
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5846
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5850
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5854
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5858
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5862
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5867
		{
			sqlVAL.union.val = tree.ForLocked{}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5869
		{
			sqlVAL.union.val = tree.ForLocked{Strength: sqlDollar[1].union.lockingStrength(), Targets: sqlDollar[2].union.tableNames()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5874
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5875
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5878
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5879
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5880
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5881
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5884
		{
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5886
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5887
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5892
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5927
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5928
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5929
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5951
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5964
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5978
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5990
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5994
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6003
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6012
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6027
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6034
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6046
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6050
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6055
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6061
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6071
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6079
		{
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6080
		{
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6084
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6088
		{
			sqlVAL.union.val = nil
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6093
		{
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6094
		{
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6098
		{
			sqlVAL.union.val = true
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6102
		{
			sqlVAL.union.val = false
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6106
		{
			sqlVAL.union.val = false
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6112
		{
			sqlVAL.union.val = true
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6118
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6123
		{
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6124
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6128
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6132
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6138
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6144
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6154
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6175
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6180
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6192
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6196
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6200
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6209
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6218
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6230
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6234
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6238
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6247
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6253
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6260
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6269
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6273
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6277
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6283
		{
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6284
		{
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6287
		{
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6288
		{
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6305
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6309
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6319
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6338
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6341
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6343
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6355
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6358
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6360
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6366
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6370
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6376
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6380
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6385
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6390
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6396
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6401
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6408
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6413
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6424
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6428
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6432
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6440
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6471
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6485
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6495
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6503
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6520
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6531
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6555
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6561
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6565
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6571
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6573
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6577
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6583
		{
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6585
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6588
		{
			sqlVAL.union.val = nil
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6589
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6590
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6594
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6598
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6604
		{
			sqlVAL.union.val = true
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6608
		{
			sqlVAL.union.val = false
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6628
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6632
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6636
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6640
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6644
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6648
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6658
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6665
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6671
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6678
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6684
		{
			sqlVAL.str = tree.AstFull
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6688
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6692
		{
			sqlVAL.str = tree.AstRight
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6696
		{
			sqlVAL.str = tree.AstInner
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6702
		{
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6703
		{
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6724
		{
			sqlVAL.str = tree.AstHash
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6728
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6732
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6736
		{
			sqlVAL.str = ""
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6749
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6753
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6759
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6760
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6761
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6765
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6770
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6784
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6788
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6794
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6802
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6812
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6819
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6831
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6844
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6852
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6853
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6863
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6870
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6871
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6873
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6881
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6882
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6893
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6895
		{
			prec, err := sqlDollar[3].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			if prec == 6 {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			} else {
				return unimplementedWithIssue(sqllex, 32564)
			}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6923
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6927
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6931
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6935
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6939
		{
			sqlVAL.union.val = types.String
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6943
		{
			sqlVAL.union.val = types.Name
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6947
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6960
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6964
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6976
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = types.INet
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = types.Oid
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6992
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6996
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7027
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7035
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7043
		{
			sqlVAL.union.val = nil
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7050
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7054
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7058
		{
			sqlVAL.union.val = types.Int2
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7062
		{
			sqlVAL.union.val = types.Int2
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7066
		{
			sqlVAL.union.val = types.Int4
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7070
		{
			sqlVAL.union.val = types.Int
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7074
		{
			sqlVAL.union.val = types.Int
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7078
		{
			sqlVAL.union.val = types.Int
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = types.Float4
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = types.Float4
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7090
		{
			sqlVAL.union.val = types.Float
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7094
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7098
		{
			sqlVAL.union.val = types.Float
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7102
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7110
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7118
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7126
		{
			sqlVAL.union.val = types.Bool
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7130
		{
			sqlVAL.union.val = types.Bool
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7137
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7145
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7149
		{
			sqlVAL.union.val = types.RegType
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7159
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7172
		{
			sqlVAL.union.val = types.Float
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7178
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7184
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7192
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7196
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7200
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7206
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7218
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7224
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7228
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7232
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7236
		{
			sqlVAL.union.val = types.String
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = true
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7246
		{
			sqlVAL.union.val = false
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = types.Date
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7255
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7260
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7267
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7268
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7270
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7278
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7290
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7294
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7303
		{
			sqlVAL.union.val = true
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7304
		{
			sqlVAL.union.val = false
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7305
		{
			sqlVAL.union.val = false
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7309
		{
			sqlVAL.union.val = types.Interval
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7315
		{
			sqlVAL.union.val = tree.Year
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = tree.Month
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = tree.Day
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7341
		{
			sqlVAL.union.val = tree.Month
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7345
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7349
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7353
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7357
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7361
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7365
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7372
		{
			sqlVAL.union.val = nil
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7378
		{
			sqlVAL.union.val = tree.Second
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7381
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7405
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7409
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7413
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7417
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7428
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7433
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7437
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7441
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7445
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7449
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7453
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7457
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7461
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7465
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7473
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7481
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7493
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7497
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7501
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7505
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7521
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7533
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7537
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7577
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7589
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7597
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7605
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7609
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7613
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7617
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7621
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7637
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7645
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7649
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7653
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7657
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7665
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7669
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7672
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7686
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7694
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7726
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7738
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7755
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7760
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7772
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7776
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7780
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7788
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7792
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7796
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7808
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7812
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7816
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7820
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7824
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7894
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7938
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7950
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7954
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7959
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7961
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7965
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7968
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7970
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7986
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7995
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8006
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8010
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8023
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8031
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8034
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8038
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8045
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8046
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8048
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8061
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8072
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8079
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8088
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8108
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8112
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8116
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8120
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8130
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8158
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8174
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8181
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8184
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8189
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8191
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8194
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8196
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8199
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8201
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8204
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8209
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8214
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8216
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8219
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8225
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8228
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8229
		{
			return unimplemented(sqllex, "treat")
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8239
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8243
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8247
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8250
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8252
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8255
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8260
		{
			return unimplemented(sqllex, "within group")
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8261
		{
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8265
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8269
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8280
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8286
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8296
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8319
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8339
		{
			sqlVAL.str = ""
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8349
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8355
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8363
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8371
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8379
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8385
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8398
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8430
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8434
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8438
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8445
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8454
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8458
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8462
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8466
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8484
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8488
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8495
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8507
		{
			sqlVAL.union.val = tree.Any
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8511
		{
			sqlVAL.union.val = tree.Some
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8515
		{
			sqlVAL.union.val = tree.All
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8520
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8521
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8522
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8523
		{
			sqlVAL.union.val = tree.Div
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8524
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8525
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8526
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8527
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8528
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8529
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8530
		{
			sqlVAL.union.val = tree.LT
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8531
		{
			sqlVAL.union.val = tree.GT
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8532
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8533
		{
			sqlVAL.union.val = tree.LE
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8534
		{
			sqlVAL.union.val = tree.GE
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8535
		{
			sqlVAL.union.val = tree.NE
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8539
		{
			sqlVAL.union.val = tree.Like
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8540
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8541
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8542
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8565
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8569
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8575
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8579
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8583
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8598
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8604
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8608
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8615
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8621
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8625
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8631
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8635
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8641
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8645
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8651
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8661
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8665
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8688
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8692
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8696
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8702
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8709
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8713
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8730
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8734
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8738
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8742
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8746
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8752
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8758
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8764
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8768
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8772
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8778
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8790
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8797
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8801
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8807
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8813
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8817
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8824
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8830
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8834
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8841
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8847
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8856
		{
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8857
		{
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8861
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8865
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8871
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8880
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8884
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8888
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8896
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8900
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8906
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8929
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8937
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8960
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8969
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8973
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8977
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8981
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8987
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8999
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9003
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9012
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9023
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9032
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9040
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9137
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9144
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9148
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9152
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9166
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9170
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9174
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9187
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9205
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9218
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9225
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9250
		{
			sqlVAL.str = ""
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9256
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9260
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
