// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}
func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:66

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *tree.ShardedIndexDef {
	return u.val.(*tree.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:621
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BUNDLE = lex.BUNDLE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOGIN = lex.LOGIN
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NOLOGIN = lex.NOLOGIN
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const UNTIL = lex.UNTIL
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BUNDLE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOGIN",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NOLOGIN",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"UNTIL",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10188

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1098,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 67,
	185, 925,
	202, 925,
	217, 247,
	303, 247,
	312, 744,
	339, 247,
	348, 744,
	387, 744,
	411, 247,
	436, 744,
	-2, 0,
	-1, 72,
	217, 251,
	-2, 0,
	-1, 73,
	112, 1098,
	191, 1098,
	421, 1098,
	422, 1098,
	-2, 0,
	-1, 85,
	125, 1072,
	141, 1072,
	154, 1072,
	199, 1072,
	229, 1072,
	267, 1072,
	277, 1072,
	416, 1072,
	-2, 1043,
	-1, 117,
	131, 657,
	216, 657,
	306, 637,
	357, 637,
	404, 657,
	-2, 0,
	-1, 118,
	4, 1100,
	21, 1100,
	22, 1100,
	23, 1100,
	24, 1100,
	25, 1100,
	27, 1100,
	33, 1100,
	38, 1100,
	39, 1100,
	40, 1100,
	41, 1100,
	42, 1100,
	43, 1100,
	44, 1100,
	45, 1100,
	46, 1100,
	47, 1100,
	48, 1100,
	49, 1100,
	50, 1100,
	52, 1100,
	53, 1100,
	54, 1100,
	55, 1100,
	56, 1100,
	57, 1100,
	58, 1100,
	61, 1100,
	62, 1100,
	63, 1100,
	64, 1100,
	66, 1100,
	67, 1100,
	71, 1100,
	72, 1100,
	73, 1100,
	74, 1100,
	75, 1100,
	76, 1100,
	78, 1100,
	79, 1100,
	80, 1100,
	81, 1100,
	83, 1100,
	85, 1100,
	86, 1100,
	87, 1100,
	89, 1100,
	91, 1100,
	92, 1100,
	100, 1100,
	101, 1100,
	102, 1100,
	103, 1100,
	104, 1100,
	105, 1100,
	106, 1100,
	107, 1100,
	109, 1100,
	111, 1100,
	112, 1100,
	114, 1100,
	117, 1100,
	118, 1100,
	119, 1100,
	121, 1100,
	123, 1100,
	124, 1100,
	126, 1100,
	127, 1100,
	128, 1100,
	129, 1100,
	130, 1100,
	131, 1100,
	132, 1100,
	133, 1100,
	134, 1100,
	135, 1100,
	136, 1100,
	137, 1100,
	138, 1100,
	140, 1100,
	146, 1100,
	147, 1100,
	148, 1100,
	149, 1100,
	150, 1100,
	151, 1100,
	153, 1100,
	155, 1100,
	159, 1100,
	160, 1100,
	162, 1100,
	163, 1100,
	165, 1100,
	166, 1100,
	168, 1100,
	169, 1100,
	170, 1100,
	171, 1100,
	172, 1100,
	173, 1100,
	174, 1100,
	175, 1100,
	177, 1100,
	178, 1100,
	180, 1100,
	181, 1100,
	182, 1100,
	185, 1100,
	186, 1100,
	187, 1100,
	188, 1100,
	191, 1100,
	192, 1100,
	193, 1100,
	194, 1100,
	195, 1100,
	196, 1100,
	197, 1100,
	198, 1100,
	200, 1100,
	202, 1100,
	204, 1100,
	206, 1100,
	207, 1100,
	208, 1100,
	210, 1100,
	211, 1100,
	214, 1100,
	215, 1100,
	216, 1100,
	217, 1100,
	218, 1100,
	220, 1100,
	221, 1100,
	223, 1100,
	224, 1100,
	226, 1100,
	227, 1100,
	230, 1100,
	231, 1100,
	234, 1100,
	235, 1100,
	236, 1100,
	237, 1100,
	239, 1100,
	240, 1100,
	241, 1100,
	242, 1100,
	243, 1100,
	244, 1100,
	245, 1100,
	246, 1100,
	247, 1100,
	248, 1100,
	250, 1100,
	251, 1100,
	252, 1100,
	253, 1100,
	254, 1100,
	256, 1100,
	258, 1100,
	260, 1100,
	262, 1100,
	263, 1100,
	264, 1100,
	265, 1100,
	266, 1100,
	268, 1100,
	269, 1100,
	270, 1100,
	272, 1100,
	273, 1100,
	274, 1100,
	275, 1100,
	278, 1100,
	279, 1100,
	280, 1100,
	282, 1100,
	284, 1100,
	285, 1100,
	286, 1100,
	287, 1100,
	288, 1100,
	289, 1100,
	290, 1100,
	291, 1100,
	292, 1100,
	293, 1100,
	295, 1100,
	296, 1100,
	297, 1100,
	298, 1100,
	299, 1100,
	300, 1100,
	302, 1100,
	304, 1100,
	305, 1100,
	306, 1100,
	307, 1100,
	308, 1100,
	309, 1100,
	310, 1100,
	311, 1100,
	312, 1100,
	313, 1100,
	315, 1100,
	316, 1100,
	317, 1100,
	318, 1100,
	319, 1100,
	321, 1100,
	322, 1100,
	323, 1100,
	324, 1100,
	325, 1100,
	326, 1100,
	327, 1100,
	328, 1100,
	330, 1100,
	332, 1100,
	333, 1100,
	334, 1100,
	335, 1100,
	336, 1100,
	337, 1100,
	339, 1100,
	340, 1100,
	341, 1100,
	342, 1100,
	343, 1100,
	344, 1100,
	345, 1100,
	346, 1100,
	348, 1100,
	349, 1100,
	350, 1100,
	351, 1100,
	352, 1100,
	353, 1100,
	354, 1100,
	355, 1100,
	356, 1100,
	357, 1100,
	359, 1100,
	360, 1100,
	361, 1100,
	362, 1100,
	363, 1100,
	365, 1100,
	366, 1100,
	367, 1100,
	368, 1100,
	369, 1100,
	371, 1100,
	372, 1100,
	373, 1100,
	374, 1100,
	375, 1100,
	376, 1100,
	377, 1100,
	378, 1100,
	379, 1100,
	380, 1100,
	381, 1100,
	382, 1100,
	384, 1100,
	385, 1100,
	386, 1100,
	388, 1100,
	389, 1100,
	390, 1100,
	391, 1100,
	392, 1100,
	393, 1100,
	394, 1100,
	396, 1100,
	397, 1100,
	398, 1100,
	399, 1100,
	400, 1100,
	402, 1100,
	404, 1100,
	405, 1100,
	406, 1100,
	407, 1100,
	408, 1100,
	410, 1100,
	411, 1100,
	412, 1100,
	414, 1100,
	415, 1100,
	418, 1100,
	419, 1100,
	420, 1100,
	421, 1100,
	422, 1100,
	423, 1100,
	424, 1100,
	426, 1100,
	428, 1100,
	429, 1100,
	430, 1100,
	431, 1100,
	432, 1100,
	433, 1100,
	434, 1100,
	436, 1100,
	437, 1100,
	438, 1100,
	443, 1100,
	444, 1100,
	445, 1100,
	446, 1100,
	447, 1100,
	448, 1100,
	-2, 0,
	-1, 119,
	1, 977,
	206, 977,
	302, 977,
	310, 977,
	451, 977,
	474, 977,
	-2, 0,
	-1, 121,
	1, 977,
	474, 977,
	-2, 0,
	-1, 122,
	1, 977,
	474, 977,
	-2, 0,
	-1, 123,
	1, 977,
	401, 977,
	474, 977,
	-2, 0,
	-1, 148,
	125, 1071,
	141, 1071,
	154, 1071,
	199, 1071,
	229, 1071,
	267, 1071,
	277, 1071,
	416, 1071,
	-2, 1046,
	-1, 181,
	4, 1107,
	5, 1107,
	6, 1107,
	7, 1107,
	8, 1107,
	9, 1107,
	10, 1107,
	21, 1107,
	22, 1107,
	23, 1107,
	24, 1107,
	25, 1107,
	27, 1107,
	33, 1107,
	34, 1107,
	38, 1107,
	39, 1107,
	40, 1107,
	41, 1107,
	42, 1107,
	43, 1107,
	44, 1107,
	45, 1107,
	46, 1107,
	47, 1107,
	48, 1107,
	49, 1107,
	50, 1107,
	52, 1107,
	53, 1107,
	54, 1107,
	55, 1107,
	56, 1107,
	57, 1107,
	58, 1107,
	59, 1107,
	60, 1107,
	61, 1107,
	62, 1107,
	63, 1107,
	64, 1107,
	66, 1107,
	67, 1107,
	69, 1107,
	71, 1107,
	72, 1107,
	73, 1107,
	74, 1107,
	75, 1107,
	76, 1107,
	78, 1107,
	79, 1107,
	80, 1107,
	81, 1107,
	83, 1107,
	85, 1107,
	86, 1107,
	87, 1107,
	89, 1107,
	90, 1107,
	91, 1107,
	92, 1107,
	93, 1107,
	94, 1107,
	95, 1107,
	96, 1107,
	97, 1107,
	98, 1107,
	99, 1107,
	100, 1107,
	101, 1107,
	102, 1107,
	103, 1107,
	104, 1107,
	105, 1107,
	106, 1107,
	107, 1107,
	108, 1107,
	109, 1107,
	111, 1107,
	112, 1107,
	114, 1107,
	117, 1107,
	118, 1107,
	119, 1107,
	121, 1107,
	123, 1107,
	124, 1107,
	126, 1107,
	127, 1107,
	128, 1107,
	129, 1107,
	130, 1107,
	131, 1107,
	132, 1107,
	133, 1107,
	134, 1107,
	135, 1107,
	136, 1107,
	137, 1107,
	138, 1107,
	139, 1107,
	140, 1107,
	146, 1107,
	147, 1107,
	148, 1107,
	149, 1107,
	150, 1107,
	151, 1107,
	153, 1107,
	155, 1107,
	158, 1107,
	159, 1107,
	160, 1107,
	162, 1107,
	163, 1107,
	165, 1107,
	166, 1107,
	168, 1107,
	169, 1107,
	170, 1107,
	171, 1107,
	172, 1107,
	173, 1107,
	174, 1107,
	175, 1107,
	176, 1107,
	177, 1107,
	178, 1107,
	180, 1107,
	181, 1107,
	182, 1107,
	185, 1107,
	186, 1107,
	187, 1107,
	188, 1107,
	190, 1107,
	191, 1107,
	192, 1107,
	193, 1107,
	194, 1107,
	195, 1107,
	196, 1107,
	197, 1107,
	198, 1107,
	200, 1107,
	202, 1107,
	203, 1107,
	204, 1107,
	205, 1107,
	206, 1107,
	207, 1107,
	208, 1107,
	209, 1107,
	210, 1107,
	211, 1107,
	214, 1107,
	215, 1107,
	216, 1107,
	217, 1107,
	218, 1107,
	220, 1107,
	221, 1107,
	223, 1107,
	224, 1107,
	225, 1107,
	226, 1107,
	227, 1107,
	228, 1107,
	230, 1107,
	231, 1107,
	232, 1107,
	233, 1107,
	234, 1107,
	235, 1107,
	236, 1107,
	237, 1107,
	239, 1107,
	240, 1107,
	241, 1107,
	242, 1107,
	243, 1107,
	244, 1107,
	245, 1107,
	246, 1107,
	247, 1107,
	248, 1107,
	249, 1107,
	250, 1107,
	251, 1107,
	252, 1107,
	253, 1107,
	254, 1107,
	255, 1107,
	256, 1107,
	257, 1107,
	258, 1107,
	259, 1107,
	260, 1107,
	261, 1107,
	262, 1107,
	263, 1107,
	264, 1107,
	265, 1107,
	266, 1107,
	268, 1107,
	269, 1107,
	270, 1107,
	273, 1107,
	274, 1107,
	275, 1107,
	278, 1107,
	279, 1107,
	280, 1107,
	281, 1107,
	282, 1107,
	283, 1107,
	284, 1107,
	285, 1107,
	286, 1107,
	287, 1107,
	288, 1107,
	289, 1107,
	290, 1107,
	291, 1107,
	292, 1107,
	293, 1107,
	295, 1107,
	296, 1107,
	297, 1107,
	298, 1107,
	299, 1107,
	300, 1107,
	302, 1107,
	304, 1107,
	305, 1107,
	306, 1107,
	307, 1107,
	308, 1107,
	309, 1107,
	310, 1107,
	311, 1107,
	312, 1107,
	313, 1107,
	315, 1107,
	316, 1107,
	317, 1107,
	318, 1107,
	319, 1107,
	321, 1107,
	322, 1107,
	323, 1107,
	324, 1107,
	325, 1107,
	326, 1107,
	327, 1107,
	328, 1107,
	330, 1107,
	331, 1107,
	332, 1107,
	333, 1107,
	334, 1107,
	335, 1107,
	336, 1107,
	337, 1107,
	339, 1107,
	340, 1107,
	341, 1107,
	342, 1107,
	343, 1107,
	344, 1107,
	345, 1107,
	346, 1107,
	348, 1107,
	349, 1107,
	350, 1107,
	351, 1107,
	352, 1107,
	353, 1107,
	354, 1107,
	355, 1107,
	356, 1107,
	357, 1107,
	358, 1107,
	359, 1107,
	360, 1107,
	361, 1107,
	362, 1107,
	363, 1107,
	364, 1107,
	365, 1107,
	366, 1107,
	367, 1107,
	368, 1107,
	369, 1107,
	371, 1107,
	372, 1107,
	373, 1107,
	374, 1107,
	375, 1107,
	376, 1107,
	377, 1107,
	378, 1107,
	379, 1107,
	380, 1107,
	381, 1107,
	382, 1107,
	384, 1107,
	385, 1107,
	386, 1107,
	388, 1107,
	389, 1107,
	390, 1107,
	391, 1107,
	392, 1107,
	393, 1107,
	394, 1107,
	396, 1107,
	397, 1107,
	398, 1107,
	399, 1107,
	400, 1107,
	402, 1107,
	404, 1107,
	405, 1107,
	406, 1107,
	407, 1107,
	408, 1107,
	409, 1107,
	410, 1107,
	411, 1107,
	412, 1107,
	414, 1107,
	415, 1107,
	417, 1107,
	418, 1107,
	419, 1107,
	420, 1107,
	421, 1107,
	422, 1107,
	423, 1107,
	424, 1107,
	425, 1107,
	426, 1107,
	428, 1107,
	429, 1107,
	430, 1107,
	431, 1107,
	432, 1107,
	433, 1107,
	434, 1107,
	436, 1107,
	437, 1107,
	438, 1107,
	443, 1107,
	444, 1107,
	445, 1107,
	446, 1107,
	447, 1107,
	448, 1107,
	449, 1107,
	455, 1107,
	462, 1107,
	463, 1107,
	464, 1107,
	471, 1107,
	475, 1107,
	-2, 0,
	-1, 567,
	157, 1810,
	401, 1810,
	454, 1810,
	473, 1810,
	-2, 0,
	-1, 568,
	157, 1890,
	401, 1890,
	454, 1890,
	473, 1890,
	-2, 0,
	-1, 569,
	157, 1799,
	401, 1799,
	454, 1799,
	473, 1799,
	-2, 0,
	-1, 571,
	157, 1986,
	401, 1986,
	454, 1986,
	473, 1986,
	-2, 0,
	-1, 573,
	157, 2016,
	401, 2016,
	454, 2016,
	473, 2016,
	-2, 0,
	-1, 580,
	157, 1902,
	401, 1902,
	454, 1902,
	473, 1902,
	-2, 502,
	-1, 601,
	473, 1755,
	476, 1755,
	-2, 710,
	-1, 602,
	473, 1757,
	476, 1757,
	-2, 711,
	-1, 603,
	473, 1756,
	476, 1756,
	-2, 712,
	-1, 604,
	476, 1693,
	-2, 713,
	-1, 646,
	436, 907,
	-2, 745,
	-1, 750,
	306, 638,
	357, 638,
	-2, 0,
	-1, 751,
	306, 637,
	357, 637,
	-2, 585,
	-1, 755,
	1, 667,
	470, 667,
	472, 667,
	474, 667,
	-2, 0,
	-1, 756,
	1, 709,
	154, 709,
	470, 709,
	472, 709,
	474, 709,
	-2, 0,
	-1, 764,
	1, 641,
	470, 641,
	472, 641,
	474, 641,
	-2, 0,
	-1, 767,
	1, 667,
	470, 667,
	472, 667,
	474, 667,
	-2, 0,
	-1, 768,
	1, 669,
	470, 669,
	472, 669,
	474, 669,
	-2, 0,
	-1, 769,
	1, 672,
	470, 672,
	472, 672,
	474, 672,
	-2, 0,
	-1, 774,
	1, 688,
	470, 688,
	472, 688,
	474, 688,
	-2, 0,
	-1, 775,
	1, 690,
	470, 690,
	472, 690,
	474, 690,
	-2, 0,
	-1, 818,
	141, 1109,
	154, 1109,
	229, 1109,
	267, 1109,
	-2, 1050,
	-1, 831,
	141, 1108,
	154, 1108,
	229, 1108,
	267, 1108,
	-2, 1047,
	-1, 855,
	473, 1754,
	-2, 510,
	-1, 883,
	471, 1746,
	-2, 1737,
	-1, 889,
	5, 1249,
	-2, 1788,
	-1, 890,
	5, 1250,
	-2, 1794,
	-1, 891,
	5, 1251,
	-2, 1793,
	-1, 892,
	5, 1252,
	-2, 2013,
	-1, 893,
	5, 1253,
	-2, 1904,
	-1, 894,
	5, 1254,
	-2, 1978,
	-1, 895,
	5, 1255,
	-2, 1980,
	-1, 896,
	5, 1256,
	-2, 1993,
	-1, 897,
	5, 1257,
	-2, 1981,
	-1, 898,
	5, 1258,
	-2, 1982,
	-1, 899,
	5, 1259,
	-2, 1787,
	-1, 900,
	5, 1260,
	-2, 2030,
	-1, 901,
	5, 1261,
	-2, 1864,
	-1, 902,
	5, 1262,
	-2, 1916,
	-1, 903,
	5, 1263,
	-2, 1918,
	-1, 904,
	5, 1264,
	-2, 1868,
	-1, 905,
	5, 1265,
	471, 1764,
	-2, 1755,
	-1, 911,
	471, 1765,
	-2, 1756,
	-1, 913,
	5, 1269,
	-2, 2063,
	-1, 914,
	5, 1270,
	-2, 2064,
	-1, 915,
	5, 1271,
	-2, 1867,
	-1, 916,
	5, 1272,
	-2, 2076,
	-1, 917,
	5, 1273,
	-2, 1869,
	-1, 918,
	5, 1274,
	-2, 1870,
	-1, 919,
	5, 1275,
	-2, 1871,
	-1, 920,
	5, 1276,
	-2, 2045,
	-1, 921,
	5, 1277,
	-2, 2074,
	-1, 922,
	5, 1278,
	-2, 1847,
	-1, 923,
	5, 1279,
	-2, 1848,
	-1, 924,
	5, 1293,
	-2, 2057,
	-1, 926,
	5, 1268,
	-2, 2053,
	-1, 927,
	5, 1268,
	-2, 2052,
	-1, 928,
	5, 1268,
	-2, 2069,
	-1, 929,
	5, 1285,
	-2, 2047,
	-1, 930,
	5, 1286,
	-2, 1789,
	-1, 931,
	5, 1296,
	-2, 2046,
	-1, 932,
	5, 1298,
	-2, 2085,
	-1, 934,
	5, 1309,
	-2, 1821,
	-1, 935,
	5, 1320,
	-2, 2078,
	-1, 936,
	5, 1312,
	-2, 2079,
	-1, 937,
	5, 1320,
	-2, 2080,
	-1, 938,
	5, 1316,
	-2, 2081,
	-1, 939,
	5, 1237,
	-2, 1877,
	-1, 940,
	5, 1238,
	-2, 1878,
	-1, 941,
	473, 1752,
	-2, 1736,
	-1, 942,
	471, 2106,
	-2, 1753,
	-1, 964,
	5, 1304,
	-2, 2004,
	-1, 982,
	5, 1303,
	-2, 2086,
	-1, 992,
	5, 1305,
	437, 1305,
	-2, 2048,
	-1, 993,
	5, 1306,
	437, 1306,
	-2, 2049,
	-1, 1030,
	471, 1764,
	-2, 1755,
	-1, 1058,
	157, 2016,
	401, 2016,
	454, 2016,
	473, 2016,
	-2, 0,
	-1, 1061,
	1, 488,
	474, 488,
	-2, 985,
	-1, 1181,
	321, 1733,
	464, 1733,
	-2, 1731,
	-1, 1193,
	475, 1733,
	-2, 1734,
	-1, 1194,
	1, 904,
	470, 904,
	472, 904,
	474, 904,
	-2, 1096,
	-1, 1242,
	312, 744,
	436, 744,
	-2, 246,
	-1, 1265,
	1, 904,
	470, 904,
	472, 904,
	474, 904,
	-2, 1096,
	-1, 1271,
	271, 1759,
	-2, 0,
	-1, 1334,
	1, 363,
	470, 363,
	472, 363,
	474, 363,
	-2, 1070,
	-1, 1337,
	4, 2084,
	11, 2084,
	12, 2084,
	14, 2084,
	15, 2084,
	16, 2084,
	17, 2084,
	18, 2084,
	19, 2084,
	21, 2084,
	22, 2084,
	23, 2084,
	24, 2084,
	25, 2084,
	27, 2084,
	30, 2084,
	31, 2084,
	33, 2084,
	35, 2084,
	38, 2084,
	39, 2084,
	40, 2084,
	41, 2084,
	42, 2084,
	43, 2084,
	44, 2084,
	45, 2084,
	46, 2084,
	47, 2084,
	48, 2084,
	49, 2084,
	50, 2084,
	52, 2084,
	53, 2084,
	54, 2084,
	55, 2084,
	56, 2084,
	57, 2084,
	58, 2084,
	61, 2084,
	62, 2084,
	63, 2084,
	64, 2084,
	66, 2084,
	67, 2084,
	68, 2084,
	71, 2084,
	72, 2084,
	73, 2084,
	74, 2084,
	75, 2084,
	76, 2084,
	77, 2084,
	78, 2084,
	79, 2084,
	80, 2084,
	81, 2084,
	83, 2084,
	84, 2084,
	85, 2084,
	86, 2084,
	87, 2084,
	89, 2084,
	90, 2084,
	91, 2084,
	92, 2084,
	100, 2084,
	101, 2084,
	102, 2084,
	103, 2084,
	104, 2084,
	105, 2084,
	106, 2084,
	107, 2084,
	109, 2084,
	111, 2084,
	112, 2084,
	114, 2084,
	117, 2084,
	118, 2084,
	119, 2084,
	121, 2084,
	123, 2084,
	124, 2084,
	126, 2084,
	127, 2084,
	128, 2084,
	129, 2084,
	130, 2084,
	131, 2084,
	132, 2084,
	133, 2084,
	134, 2084,
	135, 2084,
	136, 2084,
	137, 2084,
	138, 2084,
	142, 2084,
	143, 2084,
	144, 2084,
	145, 2084,
	146, 2084,
	147, 2084,
	148, 2084,
	149, 2084,
	150, 2084,
	151, 2084,
	152, 2084,
	153, 2084,
	155, 2084,
	158, 2084,
	159, 2084,
	160, 2084,
	162, 2084,
	163, 2084,
	165, 2084,
	166, 2084,
	168, 2084,
	169, 2084,
	170, 2084,
	171, 2084,
	172, 2084,
	173, 2084,
	174, 2084,
	175, 2084,
	176, 2084,
	177, 2084,
	178, 2084,
	179, 2084,
	180, 2084,
	181, 2084,
	182, 2084,
	183, 2084,
	184, 2084,
	186, 2084,
	187, 2084,
	188, 2084,
	190, 2084,
	191, 2084,
	192, 2084,
	193, 2084,
	194, 2084,
	195, 2084,
	196, 2084,
	197, 2084,
	198, 2084,
	200, 2084,
	202, 2084,
	203, 2084,
	204, 2084,
	205, 2084,
	206, 2084,
	207, 2084,
	208, 2084,
	209, 2084,
	210, 2084,
	211, 2084,
	212, 2084,
	213, 2084,
	214, 2084,
	215, 2084,
	216, 2084,
	217, 2084,
	218, 2084,
	220, 2084,
	221, 2084,
	223, 2084,
	224, 2084,
	225, 2084,
	226, 2084,
	227, 2084,
	228, 2084,
	230, 2084,
	231, 2084,
	234, 2084,
	235, 2084,
	236, 2084,
	237, 2084,
	238, 2084,
	239, 2084,
	240, 2084,
	241, 2084,
	242, 2084,
	243, 2084,
	244, 2084,
	245, 2084,
	246, 2084,
	247, 2084,
	248, 2084,
	249, 2084,
	250, 2084,
	251, 2084,
	252, 2084,
	253, 2084,
	254, 2084,
	256, 2084,
	259, 2084,
	260, 2084,
	262, 2084,
	263, 2084,
	264, 2084,
	265, 2084,
	266, 2084,
	268, 2084,
	269, 2084,
	270, 2084,
	273, 2084,
	274, 2084,
	275, 2084,
	276, 2084,
	278, 2084,
	279, 2084,
	280, 2084,
	282, 2084,
	284, 2084,
	285, 2084,
	286, 2084,
	287, 2084,
	288, 2084,
	289, 2084,
	290, 2084,
	291, 2084,
	292, 2084,
	293, 2084,
	295, 2084,
	296, 2084,
	297, 2084,
	298, 2084,
	299, 2084,
	300, 2084,
	302, 2084,
	304, 2084,
	305, 2084,
	306, 2084,
	307, 2084,
	308, 2084,
	309, 2084,
	310, 2084,
	311, 2084,
	312, 2084,
	313, 2084,
	315, 2084,
	316, 2084,
	317, 2084,
	318, 2084,
	319, 2084,
	320, 2084,
	321, 2084,
	322, 2084,
	323, 2084,
	324, 2084,
	325, 2084,
	326, 2084,
	327, 2084,
	328, 2084,
	330, 2084,
	331, 2084,
	332, 2084,
	333, 2084,
	334, 2084,
	335, 2084,
	336, 2084,
	337, 2084,
	338, 2084,
	339, 2084,
	340, 2084,
	341, 2084,
	342, 2084,
	343, 2084,
	344, 2084,
	345, 2084,
	346, 2084,
	348, 2084,
	349, 2084,
	350, 2084,
	351, 2084,
	352, 2084,
	353, 2084,
	354, 2084,
	355, 2084,
	356, 2084,
	357, 2084,
	359, 2084,
	360, 2084,
	361, 2084,
	362, 2084,
	363, 2084,
	364, 2084,
	365, 2084,
	366, 2084,
	367, 2084,
	368, 2084,
	369, 2084,
	371, 2084,
	372, 2084,
	373, 2084,
	374, 2084,
	375, 2084,
	376, 2084,
	377, 2084,
	378, 2084,
	379, 2084,
	380, 2084,
	381, 2084,
	382, 2084,
	384, 2084,
	385, 2084,
	386, 2084,
	388, 2084,
	389, 2084,
	390, 2084,
	391, 2084,
	392, 2084,
	393, 2084,
	394, 2084,
	396, 2084,
	397, 2084,
	398, 2084,
	399, 2084,
	400, 2084,
	402, 2084,
	404, 2084,
	405, 2084,
	406, 2084,
	407, 2084,
	408, 2084,
	410, 2084,
	411, 2084,
	412, 2084,
	414, 2084,
	415, 2084,
	418, 2084,
	419, 2084,
	420, 2084,
	421, 2084,
	422, 2084,
	423, 2084,
	424, 2084,
	426, 2084,
	428, 2084,
	429, 2084,
	430, 2084,
	431, 2084,
	432, 2084,
	433, 2084,
	434, 2084,
	436, 2084,
	437, 2084,
	438, 2084,
	443, 2084,
	444, 2084,
	445, 2084,
	446, 2084,
	447, 2084,
	448, 2084,
	449, 2084,
	450, 2084,
	452, 2084,
	453, 2084,
	454, 2084,
	455, 2084,
	456, 2084,
	457, 2084,
	459, 2084,
	460, 2084,
	461, 2084,
	462, 2084,
	463, 2084,
	464, 2084,
	465, 2084,
	466, 2084,
	467, 2084,
	469, 2084,
	472, 2084,
	473, 2084,
	475, 2084,
	476, 2084,
	-2, 0,
	-1, 1343,
	157, 1986,
	401, 1986,
	454, 1986,
	473, 1986,
	-2, 0,
	-1, 1375,
	306, 638,
	357, 638,
	-2, 0,
	-1, 1399,
	1, 633,
	470, 633,
	472, 633,
	474, 633,
	-2, 0,
	-1, 1400,
	1, 658,
	470, 658,
	472, 658,
	474, 658,
	-2, 0,
	-1, 1401,
	1, 640,
	470, 640,
	472, 640,
	474, 640,
	-2, 0,
	-1, 1403,
	1, 644,
	470, 644,
	472, 644,
	474, 644,
	-2, 0,
	-1, 1430,
	1, 2037,
	470, 2037,
	472, 2037,
	473, 2037,
	474, 2037,
	-2, 686,
	-1, 1431,
	1, 1983,
	470, 1983,
	472, 1983,
	473, 1983,
	474, 1983,
	-2, 687,
	-1, 1446,
	1, 980,
	474, 980,
	-2, 985,
	-1, 1449,
	141, 1108,
	154, 1108,
	229, 1108,
	267, 1108,
	-2, 1051,
	-1, 1543,
	125, 1072,
	141, 1072,
	154, 1072,
	199, 1072,
	229, 1072,
	267, 1072,
	277, 1072,
	416, 1072,
	-2, 1479,
	-1, 1600,
	472, 1627,
	-2, 0,
	-1, 1634,
	125, 1072,
	141, 1072,
	154, 1072,
	199, 1072,
	229, 1072,
	267, 1072,
	277, 1072,
	416, 1072,
	-2, 1187,
	-1, 1693,
	471, 1308,
	-2, 1296,
	-1, 1737,
	1, 490,
	474, 490,
	-2, 985,
	-1, 1942,
	1, 635,
	470, 635,
	472, 635,
	474, 635,
	-2, 0,
	-1, 1943,
	1, 660,
	470, 660,
	472, 660,
	474, 660,
	-2, 0,
	-1, 2015,
	336, 1133,
	337, 1133,
	-2, 1341,
	-1, 2046,
	14, 0,
	15, 0,
	16, 0,
	452, 0,
	453, 0,
	454, 0,
	-2, 1359,
	-1, 2047,
	14, 0,
	15, 0,
	16, 0,
	452, 0,
	453, 0,
	454, 0,
	-2, 1360,
	-1, 2048,
	84, 0,
	212, 0,
	213, 0,
	456, 0,
	457, 0,
	-2, 1361,
	-1, 2049,
	84, 0,
	212, 0,
	213, 0,
	456, 0,
	457, 0,
	-2, 1362,
	-1, 2050,
	84, 0,
	212, 0,
	213, 0,
	456, 0,
	457, 0,
	-2, 1363,
	-1, 2051,
	84, 0,
	212, 0,
	213, 0,
	456, 0,
	457, 0,
	-2, 1364,
	-1, 2052,
	84, 0,
	212, 0,
	213, 0,
	456, 0,
	457, 0,
	-2, 1365,
	-1, 2053,
	14, 0,
	15, 0,
	16, 0,
	452, 0,
	453, 0,
	454, 0,
	-2, 1366,
	-1, 2065,
	14, 0,
	15, 0,
	16, 0,
	452, 0,
	453, 0,
	454, 0,
	-2, 1378,
	-1, 2066,
	14, 0,
	15, 0,
	16, 0,
	452, 0,
	453, 0,
	454, 0,
	-2, 1379,
	-1, 2067,
	14, 0,
	15, 0,
	16, 0,
	452, 0,
	453, 0,
	454, 0,
	-2, 1380,
	-1, 2070,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1385,
	-1, 2076,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1389,
	-1, 2078,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1397,
	-1, 2079,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1398,
	-1, 2080,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1399,
	-1, 2081,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1400,
	-1, 2183,
	5, 1265,
	157, 1638,
	471, 1764,
	-2, 1755,
	-1, 2184,
	157, 1639,
	-2, 2041,
	-1, 2185,
	157, 1640,
	-2, 1901,
	-1, 2186,
	157, 1641,
	-2, 1822,
	-1, 2187,
	157, 1642,
	-2, 1858,
	-1, 2188,
	157, 1643,
	-2, 1899,
	-1, 2189,
	157, 1644,
	-2, 1977,
	-1, 2190,
	157, 1645,
	-2, 1462,
	-1, 2259,
	1, 1188,
	2, 1188,
	90, 1188,
	125, 1188,
	141, 1188,
	154, 1188,
	158, 1188,
	164, 1188,
	167, 1188,
	190, 1188,
	199, 1188,
	209, 1188,
	225, 1188,
	229, 1188,
	249, 1188,
	267, 1188,
	271, 1188,
	277, 1188,
	329, 1188,
	331, 1188,
	416, 1188,
	427, 1188,
	440, 1188,
	441, 1188,
	442, 1188,
	451, 1188,
	470, 1188,
	472, 1188,
	474, 1188,
	476, 1188,
	-2, 1187,
	-1, 2272,
	471, 1738,
	-2, 1750,
	-1, 2292,
	471, 1307,
	-2, 1297,
	-1, 2393,
	1, 904,
	470, 904,
	472, 904,
	474, 904,
	-2, 1096,
	-1, 2545,
	272, 1136,
	-2, 2075,
	-1, 2546,
	272, 1137,
	-2, 1966,
	-1, 2550,
	336, 1704,
	337, 1704,
	-2, 1460,
	-1, 2551,
	336, 1708,
	337, 1708,
	-2, 1461,
	-1, 2552,
	336, 1705,
	337, 1705,
	-2, 1460,
	-1, 2553,
	336, 1709,
	337, 1709,
	-2, 1461,
	-1, 2566,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1387,
	-1, 2567,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1391,
	-1, 2573,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1393,
	-1, 2762,
	206, 985,
	302, 985,
	310, 985,
	451, 985,
	-2, 487,
	-1, 2860,
	1, 904,
	470, 904,
	472, 904,
	474, 904,
	-2, 1096,
	-1, 2949,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1395,
	-1, 2956,
	203, 0,
	205, 0,
	259, 0,
	-2, 1414,
	-1, 3020,
	14, 0,
	15, 0,
	16, 0,
	452, 0,
	453, 0,
	454, 0,
	-2, 1443,
	-1, 3021,
	14, 0,
	15, 0,
	16, 0,
	452, 0,
	453, 0,
	454, 0,
	-2, 1444,
	-1, 3022,
	14, 0,
	15, 0,
	16, 0,
	452, 0,
	453, 0,
	454, 0,
	-2, 1445,
	-1, 3026,
	14, 0,
	15, 0,
	16, 0,
	452, 0,
	453, 0,
	454, 0,
	-2, 1449,
	-1, 3027,
	14, 0,
	15, 0,
	16, 0,
	452, 0,
	453, 0,
	454, 0,
	-2, 1450,
	-1, 3028,
	14, 0,
	15, 0,
	16, 0,
	452, 0,
	453, 0,
	454, 0,
	-2, 1451,
	-1, 3072,
	471, 1739,
	-2, 1751,
	-1, 3164,
	473, 2188,
	-2, 1029,
	-1, 3214,
	203, 0,
	205, 0,
	259, 0,
	-2, 1415,
	-1, 3217,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1418,
	-1, 3218,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1420,
	-1, 3383,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1419,
	-1, 3384,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	176, 0,
	179, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 1421,
	-1, 3394,
	203, 0,
	-2, 1452,
	-1, 3508,
	203, 0,
	-2, 1453,
	-1, 3638,
	43, 0,
	176, 0,
	228, 0,
	364, 0,
	449, 0,
	455, 0,
	-2, 2044,
}

const sqlPrivate = 57344

const sqlLast = 85000

var sqlAct = [...]int{

	911, 3423, 3452, 3637, 3743, 3648, 3426, 2693, 3319, 3730,
	2324, 3197, 3606, 3615, 3649, 3529, 3603, 3587, 3650, 3412,
	3688, 2846, 2446, 3092, 3459, 2988, 3636, 3512, 2694, 3348,
	3156, 1031, 3372, 2033, 3151, 2875, 856, 2779, 3468, 213,
	3332, 213, 213, 3276, 213, 213, 213, 213, 213, 1325,
	1668, 213, 3353, 841, 1458, 2868, 1197, 2093, 832, 603,
	3136, 2870, 2215, 2941, 2842, 1086, 578, 1829, 2478, 3093,
	3398, 2410, 1329, 2419, 2480, 213, 2559, 2382, 2435, 603,
	1895, 2716, 2422, 1640, 3249, 1023, 2679, 3196, 2736, 1178,
	1872, 2708, 2488, 2471, 2477, 2447, 1824, 2469, 1825, 1875,
	1383, 2326, 1797, 1609, 2697, 4, 3043, 2252, 2678, 1788,
	2594, 2030, 696, 3513, 1828, 1551, 933, 2106, 2026, 2699,
	2543, 1258, 1186, 2135, 2394, 1213, 1813, 84, 2384, 1571,
	1669, 2251, 3453, 2254, 907, 2359, 1074, 1183, 2487, 1820,
	840, 141, 1446, 1775, 1773, 2420, 2742, 2126, 2090, 1763,
	1995, 1610, 2212, 2014, 2233, 1312, 1997, 1351, 1199, 2844,
	1335, 1322, 2440, 1858, 1263, 2316, 1566, 546, 1629, 207,
	2137, 2481, 2129, 1063, 532, 1017, 213, 213, 554, 689,
	2241, 1014, 996, 2179, 1619, 1534, 2107, 1459, 2223, 1996,
	1460, 1998, 562, 599, 1857, 206, 1350, 1333, 604, 1626,
	1013, 572, 1881, 1286, 671, 1787, 1210, 646, 605, 2019,
	867, 2360, 37, 557, 141, 205, 549, 868, 36, 34,
	1019, 148, 994, 149, 25, 1916, 23, 21, 608, 745,
	1465, 1445, 762, 1268, 3057, 2590, 3058, 2695, 836, 2885,
	1897, 1897, 1402, 1897, 1071, 2760, 2232, 3776, 608, 32,
	57, 2232, 3766, 3765, 611, 3740, 2232, 2232, 3720, 1834,
	831, 3718, 3290, 3674, 58, 3290, 3672, 3675, 3582, 3047,
	2232, 3670, 707, 2884, 611, 2232, 836, 3494, 837, 3667,
	62, 1542, 3664, 3668, 2225, 3659, 3665, 1473, 1474, 1834,
	1506, 1507, 1508, 1516, 1517, 1518, 3634, 3633, 3632, 2603,
	1834, 1834, 1909, 1011, 3629, 2604, 1509, 1504, 1909, 997,
	997, 67, 1473, 1474, 1476, 2283, 3628, 3601, 3581, 1522,
	1909, 3290, 2287, 3575, 3574, 3569, 3047, 2232, 2232, 3290,
	2651, 2652, 1504, 3568, 3562, 1048, 3556, 3290, 1834, 1476,
	3290, 3554, 72, 3510, 1475, 3290, 3491, 2287, 1071, 1834,
	1834, 3488, 83, 1495, 1332, 3290, 2224, 73, 80, 1000,
	1492, 1001, 3461, 819, 3442, 818, 3462, 3441, 1834, 1475,
	3433, 1834, 3432, 1924, 1834, 3404, 3290, 826, 1495, 1834,
	3385, 2198, 3370, 3361, 2287, 3317, 1909, 2898, 1043, 2232,
	3308, 3289, 2651, 2652, 2232, 3290, 2666, 2378, 3216, 998,
	3172, 74, 2287, 1909, 2914, 3166, 3134, 73, 3067, 2914,
	3135, 3065, 3068, 3050, 3309, 3066, 181, 2232, 1498, 1499,
	1500, 1501, 2972, 2968, 1834, 2913, 1834, 2232, 1481, 2914,
	2905, 2692, 2690, 2906, 2906, 2232, 2232, 2232, 2689, 2373,
	2315, 1743, 2232, 1498, 1499, 1500, 1501, 2643, 1896, 2898,
	2622, 2232, 1513, 1481, 2623, 1523, 183, 2605, 2467, 1503,
	1505, 2232, 1912, 1044, 2651, 2652, 2466, 2669, 2670, 2671,
	1912, 2657, 2396, 2300, 2286, 2593, 1909, 2232, 2287, 1519,
	1792, 1520, 2281, 3212, 1503, 1505, 2232, 2416, 1490, 1491,
	2274, 2651, 2652, 2231, 1834, 1911, 2285, 2232, 2558, 1912,
	1833, 182, 2313, 1605, 1511, 1209, 3120, 2944, 1231, 1898,
	1898, 175, 1898, 2922, 1496, 75, 1627, 1823, 2268, 176,
	2267, 181, 2886, 1385, 2266, 1225, 2265, 2651, 2652, 2264,
	2666, 1002, 999, 2657, 825, 1521, 2132, 213, 824, 1496,
	150, 2887, 1542, 181, 823, 822, 821, 817, 147, 78,
	816, 79, 2249, 815, 2523, 1558, 3265, 2667, 2884, 814,
	813, 183, 2170, 812, 1044, 213, 811, 810, 809, 808,
	181, 807, 213, 806, 805, 804, 743, 742, 741, 740,
	739, 738, 695, 183, 2346, 737, 117, 181, 213, 1089,
	213, 213, 213, 1089, 213, 1202, 1502, 736, 735, 1202,
	734, 3228, 2133, 2224, 733, 2657, 182, 213, 213, 732,
	183, 731, 730, 729, 1497, 728, 175, 727, 726, 2667,
	181, 1502, 725, 1219, 176, 724, 723, 183, 182, 722,
	1073, 213, 2657, 118, 1078, 721, 117, 720, 719, 1497,
	1514, 1067, 718, 1189, 213, 150, 213, 151, 1202, 213,
	213, 717, 213, 716, 1044, 182, 2672, 2668, 1905, 1896,
	183, 1990, 213, 705, 704, 175, 662, 150, 2657, 213,
	3061, 839, 182, 176, 623, 2134, 2131, 622, 1230, 1404,
	614, 613, 175, 213, 213, 213, 213, 213, 1202, 612,
	176, 2667, 1202, 585, 150, 1224, 213, 1202, 213, 213,
	1473, 1474, 584, 583, 582, 182, 566, 1202, 181, 203,
	202, 150, 201, 213, 2915, 175, 1061, 200, 2667, 2668,
	1504, 199, 198, 176, 197, 1512, 196, 1476, 1487, 1488,
	1494, 1515, 1493, 1489, 195, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 150, 194, 193, 2739, 183, 2443,
	1202, 2651, 2652, 192, 2667, 191, 1205, 1475, 190, 189,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 1082,
	188, 1175, 1180, 1056, 213, 2616, 608, 2136, 2662, 2660,
	2661, 2653, 2654, 2655, 2656, 2658, 2659, 187, 213, 1273,
	186, 2668, 185, 182, 184, 2599, 2400, 2275, 1338, 1340,
	1342, 1574, 611, 175, 1574, 1212, 1181, 1573, 1630, 1193,
	1573, 176, 2258, 2651, 2652, 1211, 2428, 2156, 2668, 837,
	1771, 2154, 1473, 1474, 1326, 1355, 1653, 1560, 1577, 1553,
	1472, 1572, 150, 141, 141, 141, 1215, 1080, 1033, 1316,
	1319, 1481, 2661, 2653, 2654, 2655, 2656, 2658, 2659, 1476,
	1336, 3655, 1919, 181, 2668, 3635, 3549, 3503, 1067, 2651,
	2652, 1067, 1289, 3422, 1269, 1269, 3362, 1218, 1412, 1223,
	181, 1229, 1503, 1505, 3357, 3118, 3497, 1450, 2130, 1475,
	3495, 3269, 3248, 1270, 3247, 3235, 3234, 3233, 3232, 3227,
	3224, 3223, 2657, 183, 3140, 3133, 3081, 3080, 3079, 3071,
	3040, 1193, 2296, 2909, 3039, 2663, 2664, 2665, 3038, 2964,
	183, 2960, 2662, 2660, 2661, 2653, 2654, 2655, 2656, 2658,
	2659, 1918, 2734, 2686, 2677, 1869, 2650, 1496, 2647, 1449,
	2646, 2644, 2629, 2628, 2627, 2624, 2621, 2615, 182, 2662,
	2660, 2661, 2653, 2654, 2655, 2656, 2658, 2659, 175, 1194,
	2598, 2591, 1349, 1206, 2657, 182, 176, 1541, 2468, 2259,
	1354, 2119, 1554, 1481, 1552, 175, 1472, 1010, 181, 1444,
	1553, 1471, 1839, 176, 1837, 3773, 1360, 150, 2653, 2654,
	2655, 2656, 2658, 2659, 1376, 3739, 3738, 3514, 181, 3673,
	1473, 1474, 1032, 2990, 150, 3624, 213, 3622, 3543, 3540,
	2657, 2429, 1265, 837, 3537, 3339, 2731, 3536, 183, 3535,
	3528, 3522, 3492, 3487, 1403, 3486, 181, 1476, 2096, 1473,
	1474, 1559, 1455, 213, 1454, 1447, 3438, 1497, 183, 1607,
	3418, 2754, 2169, 213, 1089, 213, 213, 213, 213, 1504,
	3396, 3380, 3379, 603, 213, 213, 1476, 1475, 603, 213,
	3367, 1345, 3366, 182, 213, 3346, 183, 1451, 3343, 3336,
	1202, 1206, 819, 175, 818, 1468, 1469, 1576, 3264, 3246,
	3186, 176, 1616, 182, 3356, 3183, 1475, 3109, 3108, 1473,
	1474, 1089, 3096, 175, 3095, 3053, 2667, 1661, 2955, 1538,
	2916, 176, 150, 2899, 1568, 1569, 3139, 2862, 2826, 1504,
	2805, 182, 1663, 2782, 1367, 2102, 1476, 2781, 1613, 1614,
	2755, 175, 2442, 2691, 2620, 2619, 1740, 2614, 1735, 176,
	1734, 2582, 2409, 1578, 1575, 1567, 1067, 1564, 1769, 997,
	2294, 1481, 2293, 2270, 2263, 2230, 1475, 2152, 1637, 1652,
	150, 1087, 1608, 1473, 1474, 1187, 837, 1604, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 1603, 1655, 1602,
	1481, 141, 1601, 1695, 2427, 1600, 1599, 1598, 1597, 1665,
	1476, 1659, 1657, 1596, 1732, 1594, 1593, 1592, 1591, 910,
	1590, 1589, 1588, 1587, 1586, 1585, 2668, 1584, 1638, 2782,
	1583, 1503, 1505, 1582, 1635, 1581, 1580, 1555, 1539, 1537,
	1475, 1737, 2653, 2654, 2655, 2656, 2658, 2659, 1202, 1202,
	213, 3266, 608, 1532, 1628, 1781, 1089, 608, 1606, 1055,
	1481, 1046, 1039, 3220, 1754, 1753, 3077, 3064, 1762, 1764,
	3056, 2602, 2261, 1647, 2289, 1920, 1664, 1632, 611, 1646,
	1645, 1731, 3407, 611, 3268, 1643, 1496, 1642, 1641, 3076,
	1554, 1503, 1505, 1193, 213, 2651, 2652, 1671, 213, 2752,
	1535, 1666, 1762, 213, 3311, 1648, 2655, 2656, 2658, 2659,
	1644, 1075, 213, 1477, 1478, 1479, 1480, 1482, 1483, 2808,
	1830, 213, 1765, 213, 1760, 213, 1077, 2155, 1738, 213,
	1755, 2153, 3736, 1810, 3729, 1062, 1812, 3538, 1762, 1817,
	1762, 3469, 2132, 213, 2626, 2871, 1496, 3464, 2660, 2661,
	2653, 2654, 2655, 2656, 2658, 2659, 1589, 3463, 1589, 3360,
	3310, 3498, 1821, 3059, 1796, 3496, 2901, 2900, 1757, 3143,
	1068, 1071, 3421, 1630, 1442, 1574, 1375, 2625, 1071, 1076,
	1202, 1573, 1202, 2364, 213, 1202, 1497, 1749, 213, 2564,
	1071, 2348, 1862, 1202, 845, 1072, 1202, 213, 3107, 213,
	213, 1870, 1867, 1026, 1798, 2848, 1831, 2847, 2133, 1202,
	1202, 1202, 1878, 213, 802, 1562, 1384, 1917, 3460, 608,
	213, 1413, 1792, 3660, 3647, 1802, 1385, 1826, 3123, 603,
	213, 3111, 213, 2920, 213, 1816, 213, 1900, 213, 3399,
	1902, 3744, 2695, 1904, 2992, 611, 1497, 1907, 1212, 2608,
	3656, 2127, 213, 2292, 803, 213, 1832, 213, 1211, 1595,
	1759, 1570, 1886, 2840, 1866, 1246, 1069, 3669, 213, 1799,
	3666, 2880, 3088, 851, 1070, 2833, 1009, 1364, 3530, 1938,
	3599, 2134, 2131, 1479, 1480, 1482, 1483, 3152, 1849, 213,
	1848, 1758, 3519, 213, 3102, 2475, 2439, 3561, 3704, 2936,
	1922, 3300, 3705, 1234, 2301, 1923, 2764, 837, 3657, 837,
	1477, 1478, 1479, 1480, 1482, 1483, 1089, 1410, 1865, 800,
	658, 1289, 1244, 1883, 1880, 1883, 2385, 1884, 1976, 1888,
	1889, 798, 1068, 2753, 2328, 3770, 1928, 3451, 1336, 1068,
	1336, 785, 796, 835, 3444, 2005, 2319, 3125, 3122, 1803,
	3121, 794, 3085, 1776, 2007, 1077, 3084, 1777, 2317, 1994,
	2005, 1750, 1974, 791, 1989, 2766, 2613, 2612, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 1411, 1913, 2611, 1914,
	2610, 2568, 2003, 2136, 2319, 1056, 2380, 2372, 2371, 1925,
	2351, 1927, 909, 2282, 1245, 2077, 2317, 2003, 608, 659,
	1448, 1089, 1409, 1206, 1208, 2148, 1077, 2147, 1076, 2035,
	2436, 1804, 1805, 3724, 1279, 1071, 1278, 834, 2921, 1277,
	1800, 1276, 1956, 1847, 611, 2331, 1656, 544, 1069, 1362,
	1695, 1695, 2807, 1934, 788, 1069, 1070, 3378, 1988, 1483,
	1932, 2108, 2109, 1070, 2031, 2032, 213, 2308, 1253, 1778,
	2273, 539, 2350, 2018, 1801, 1984, 2001, 2108, 2124, 1076,
	3560, 2092, 1780, 2092, 1421, 2339, 2541, 3626, 1089, 1357,
	213, 1300, 2387, 1772, 3428, 2338, 1946, 1885, 2927, 213,
	1993, 1991, 1992, 1789, 2130, 3725, 2006, 1999, 2280, 2386,
	2388, 213, 2526, 2004, 1089, 836, 1941, 2178, 1453, 2182,
	2182, 2196, 1987, 2108, 2926, 837, 2216, 2218, 2004, 2290,
	2123, 2222, 1240, 1785, 2520, 1054, 837, 1782, 2556, 883,
	837, 3296, 1766, 1767, 1671, 1671, 866, 819, 2391, 2022,
	819, 819, 2023, 2024, 1790, 1791, 2368, 2100, 3098, 1915,
	1942, 2136, 1806, 2098, 2877, 2246, 3747, 1206, 1949, 1399,
	1926, 2659, 2002, 2548, 2549, 2271, 2361, 2362, 1377, 2104,
	2981, 3693, 1786, 1935, 1936, 1937, 3312, 2002, 2127, 1358,
	2330, 3202, 3727, 1036, 213, 2529, 1025, 1071, 2145, 997,
	2238, 2121, 1202, 2146, 1071, 1986, 2149, 3201, 2150, 2151,
	1408, 1943, 2361, 2362, 2361, 2362, 1637, 3653, 2819, 1373,
	1400, 714, 2579, 1242, 837, 1034, 1648, 1807, 1835, 2878,
	2260, 3704, 1089, 2284, 2237, 2813, 1809, 213, 1794, 1783,
	1441, 2191, 3733, 1264, 2555, 213, 2577, 2207, 2220, 661,
	660, 1950, 1425, 3531, 833, 2245, 213, 2250, 1740, 3377,
	2256, 2257, 2228, 2229, 2243, 2244, 2239, 2763, 141, 213,
	1067, 2801, 1635, 656, 2349, 655, 1385, 1983, 1264, 1262,
	2304, 1385, 2136, 213, 1089, 3759, 2392, 2877, 1202, 2765,
	3294, 828, 2306, 780, 213, 213, 1897, 3110, 688, 2528,
	1565, 1783, 3374, 1792, 2750, 2320, 2329, 3692, 1037, 3328,
	3287, 1783, 3198, 1576, 2319, 830, 3579, 213, 2525, 2795,
	213, 1776, 1363, 1029, 2307, 1777, 2333, 213, 3713, 2295,
	1027, 2299, 2381, 2829, 1531, 2318, 3390, 3726, 213, 2305,
	3284, 540, 792, 1568, 1569, 1776, 213, 3654, 213, 1777,
	1975, 213, 2978, 2574, 792, 829, 2450, 213, 2369, 2353,
	213, 2298, 213, 2794, 213, 792, 213, 213, 2575, 213,
	1202, 1202, 2580, 1202, 793, 1695, 2302, 1299, 213, 213,
	1779, 213, 213, 3285, 1973, 1202, 792, 3611, 3429, 2354,
	1792, 781, 2489, 213, 541, 3542, 2118, 2527, 3099, 2363,
	2365, 2366, 2367, 2332, 2335, 3373, 2397, 1985, 2323, 213,
	213, 213, 2618, 3295, 213, 2459, 213, 1778, 1239, 213,
	941, 213, 2242, 213, 3652, 2979, 2341, 2570, 2433, 2091,
	1780, 3748, 836, 2074, 542, 3731, 543, 2352, 3338, 789,
	2255, 1778, 2413, 2463, 213, 213, 213, 213, 213, 213,
	2370, 213, 3691, 1948, 1780, 1945, 1422, 1420, 3577, 209,
	2508, 534, 535, 608, 550, 534, 550, 560, 565, 1671,
	3329, 581, 3192, 2407, 1359, 1940, 1452, 2464, 3073, 209,
	1049, 2452, 213, 2417, 1181, 1782, 2797, 3578, 2034, 611,
	213, 2474, 1212, 1053, 2531, 700, 2533, 2345, 1193, 209,
	2493, 2099, 2398, 2496, 715, 2497, 2461, 2445, 2505, 1782,
	1035, 3732, 141, 3375, 2799, 2456, 2576, 2457, 2512, 2458,
	2514, 1622, 2516, 3203, 2938, 2578, 2377, 2136, 2460, 2539,
	1618, 1336, 3280, 2465, 1618, 1387, 3281, 782, 2524, 2510,
	2476, 2511, 2492, 3734, 1811, 2334, 3138, 2507, 2402, 3651,
	2404, 3703, 1423, 1625, 3760, 3701, 2513, 3475, 2515, 3345,
	2517, 2866, 2431, 1856, 2798, 1898, 2072, 1615, 1047, 2075,
	1042, 531, 2240, 2139, 1463, 1462, 3283, 1372, 1374, 213,
	3199, 1193, 1193, 2021, 780, 2534, 1793, 1783, 1623, 3286,
	3029, 2441, 3244, 2571, 2441, 2547, 534, 534, 1622, 1783,
	1751, 2942, 1622, 2537, 209, 3435, 830, 3753, 3434, 2491,
	2538, 1783, 2494, 2495, 3416, 3518, 2743, 2088, 2071, 2769,
	2018, 2500, 2501, 2502, 2542, 1424, 1193, 3087, 2592, 2867,
	1625, 1819, 2536, 2859, 1625, 2596, 2597, 2557, 2777, 1748,
	2600, 2086, 2393, 1774, 1531, 827, 1462, 783, 2773, 1620,
	1361, 1818, 780, 1620, 2432, 2421, 1026, 2411, 1026, 1457,
	1193, 3299, 1193, 1461, 1879, 1623, 2272, 1868, 3298, 1623,
	1861, 1843, 2011, 2977, 830, 3544, 2234, 3588, 1462, 2518,
	2939, 1814, 781, 2569, 837, 1980, 784, 1089, 1744, 1621,
	3157, 3349, 3282, 1621, 1624, 3204, 2702, 2703, 2408, 2718,
	1302, 1463, 1790, 1791, 2601, 3458, 213, 1746, 3456, 3417,
	2787, 213, 2784, 2355, 213, 2710, 2279, 213, 213, 1089,
	2783, 2562, 1933, 213, 2462, 2540, 1747, 3055, 1779, 2707,
	1815, 2706, 3030, 2607, 1461, 1401, 1089, 2688, 2278, 1206,
	3031, 2277, 3245, 213, 2236, 2276, 2724, 1271, 2082, 2235,
	781, 2415, 1779, 2704, 2073, 1285, 1283, 615, 213, 2083,
	3752, 3424, 713, 2084, 1272, 3205, 1461, 2089, 834, 1545,
	3524, 1624, 1463, 1550, 2012, 1624, 2719, 213, 213, 213,
	3320, 2910, 1877, 213, 2314, 2395, 213, 2770, 2771, 3710,
	2738, 2714, 3591, 213, 213, 3454, 213, 213, 213, 3525,
	3596, 3585, 3250, 2785, 1388, 3044, 2789, 2733, 2143, 3712,
	213, 213, 213, 2761, 711, 3671, 2737, 3297, 2717, 213,
	2712, 1439, 2683, 2684, 2685, 3545, 1437, 2767, 782, 1067,
	2730, 2786, 213, 213, 2791, 2792, 2696, 2713, 2721, 1417,
	3425, 1089, 2722, 703, 3539, 2681, 3395, 2723, 2725, 2726,
	3414, 2774, 1202, 3243, 2711, 2356, 2357, 2680, 3592, 2954,
	2810, 1089, 1415, 1398, 1695, 3526, 213, 1396, 2748, 213,
	213, 2709, 2744, 213, 2918, 2836, 1202, 213, 2751, 213,
	2845, 1394, 3415, 2759, 2745, 2746, 2747, 1202, 2728, 2645,
	2729, 2581, 213, 2412, 2812, 2379, 782, 2347, 213, 2297,
	1392, 1695, 1390, 213, 2762, 213, 2873, 1654, 1781, 1651,
	1382, 2085, 213, 2489, 2858, 2778, 1380, 2720, 2827, 2768,
	2087, 2820, 2489, 1440, 2756, 2757, 1281, 2758, 1352, 2935,
	2934, 1972, 2583, 2584, 1781, 1202, 1202, 1457, 783, 2522,
	2521, 2882, 2499, 213, 213, 2806, 2800, 213, 2000, 1982,
	2834, 1953, 1733, 2815, 1284, 1282, 1579, 1040, 1671, 2740,
	2816, 712, 616, 617, 2817, 1356, 1821, 1257, 2828, 2142,
	2821, 3646, 2830, 2822, 1821, 2818, 1438, 784, 3316, 3307,
	3584, 1436, 2837, 2353, 213, 1050, 1089, 213, 213, 1089,
	213, 3273, 581, 3155, 1416, 1671, 3148, 2890, 2891, 2892,
	2856, 2893, 2894, 3105, 2874, 3103, 783, 3086, 209, 2865,
	209, 209, 1184, 2857, 209, 2849, 2437, 1414, 1397, 709,
	710, 2426, 1395, 213, 2418, 3689, 1193, 209, 1214, 1025,
	837, 1025, 2895, 2896, 2908, 2872, 1393, 2405, 2881, 2933,
	1910, 2879, 2674, 2675, 2676, 784, 2912, 1865, 701, 702,
	2888, 1238, 2802, 2803, 2932, 1391, 2804, 1389, 1908, 1906,
	1089, 619, 618, 1903, 1256, 1381, 1261, 141, 141, 209,
	209, 1379, 1184, 1901, 2923, 1899, 2924, 1089, 2925, 213,
	2835, 1280, 209, 1971, 2823, 2824, 1890, 1840, 2825, 1298,
	1838, 1827, 1822, 2957, 1808, 1795, 1784, 2974, 2869, 3480,
	2853, 2560, 586, 209, 209, 209, 209, 1184, 2929, 790,
	1466, 620, 621, 1662, 2966, 2967, 581, 3705, 209, 209,
	3617, 1006, 3369, 2937, 2930, 3364, 3363, 2490, 1770, 1236,
	2319, 2319, 3482, 700, 2337, 3165, 1792, 2940, 1944, 1970,
	1434, 1435, 2317, 2336, 1969, 1007, 1951, 3301, 3533, 1378,
	3505, 594, 1473, 1474, 2897, 3251, 1029, 2358, 1029, 1695,
	2340, 1470, 3706, 1027, 3699, 1027, 1741, 2374, 2962, 2376,
	545, 2344, 2342, 3583, 3553, 3550, 1660, 3147, 2561, 2917,
	2973, 2375, 3137, 2343, 3070, 2444, 2221, 1736, 1667, 213,
	213, 2993, 2989, 3728, 209, 2980, 2982, 2983, 2749, 1467,
	1089, 3751, 591, 2651, 2652, 1193, 2831, 2998, 209, 1475,
	3041, 3552, 1695, 1695, 2995, 3060, 556, 3006, 2996, 647,
	1542, 213, 3225, 3008, 687, 3033, 2031, 2999, 1695, 1695,
	2854, 795, 797, 799, 1008, 2138, 1473, 1474, 1366, 2701,
	3075, 2860, 2031, 3009, 1365, 2984, 1473, 1474, 3034, 2311,
	2312, 2309, 2310, 1671, 2994, 2311, 2309, 3042, 2144, 1695,
	1026, 3221, 1419, 1476, 596, 1418, 3074, 2985, 213, 3048,
	3049, 2727, 3046, 3037, 1540, 3763, 1026, 3515, 2015, 3448,
	3408, 3406, 3335, 3267, 3189, 593, 3051, 3052, 2741, 2903,
	2904, 3182, 141, 1475, 1202, 3171, 3062, 1202, 3150, 3132,
	3131, 3130, 3101, 2889, 2863, 2861, 1671, 1671, 2504, 2503,
	213, 2454, 2430, 2406, 2103, 1968, 1967, 1966, 213, 1965,
	1893, 3063, 1671, 1671, 1892, 1891, 1089, 213, 3112, 1871,
	3104, 1202, 3106, 1851, 3116, 1850, 1846, 1845, 1844, 1842,
	1841, 3090, 1433, 1432, 1311, 213, 3082, 1310, 1309, 3124,
	1308, 3167, 1307, 1671, 1306, 2450, 1305, 1304, 1303, 213,
	213, 1202, 1202, 1202, 1301, 213, 213, 213, 1296, 3128,
	213, 213, 3162, 1295, 213, 213, 1294, 1202, 3144, 3117,
	3119, 2353, 213, 1089, 1293, 2489, 3078, 3159, 1292, 588,
	1252, 3158, 3161, 1251, 1250, 1249, 3145, 1248, 1247, 1241,
	1235, 1233, 1232, 3153, 1052, 1089, 1051, 3146, 592, 981,
	888, 2950, 2951, 2741, 2199, 1742, 534, 3149, 801, 787,
	3427, 1427, 1695, 71, 1243, 2101, 634, 66, 3100, 642,
	3598, 3160, 595, 2793, 2383, 1952, 2778, 209, 1386, 209,
	3168, 3163, 1545, 209, 1954, 2732, 2262, 3576, 590, 3190,
	3169, 213, 3173, 1214, 3229, 1184, 209, 3174, 209, 2617,
	3184, 3181, 3511, 209, 1214, 550, 3215, 3188, 209, 1214,
	3185, 3389, 2141, 1561, 581, 68, 876, 3179, 3180, 963,
	3206, 3200, 3207, 3327, 3219, 3326, 3187, 587, 3274, 3195,
	3089, 2479, 3324, 2203, 3323, 3010, 3011, 3012, 3013, 3014,
	3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024,
	3025, 3026, 3027, 3028, 213, 3032, 1671, 844, 1092, 1752,
	1089, 882, 1089, 3129, 1768, 597, 1761, 2291, 2181, 1675,
	885, 1672, 1695, 1865, 1674, 887, 589, 886, 1187, 1673,
	1563, 1087, 884, 1670, 2414, 213, 213, 213, 2448, 1288,
	766, 1756, 2097, 3242, 2125, 3270, 3271, 213, 2606, 1556,
	857, 878, 2122, 1045, 213, 2715, 213, 2876, 3069, 213,
	213, 213, 3355, 2010, 3302, 650, 2648, 2128, 1038, 3292,
	2204, 1089, 213, 213, 2197, 2193, 1089, 2438, 1443, 3178,
	1533, 2449, 1079, 3253, 3254, 860, 213, 3259, 2095, 3258,
	213, 1547, 2586, 3303, 3255, 2020, 3321, 2883, 2735, 213,
	3262, 2288, 2970, 213, 2737, 3272, 1089, 3263, 3614, 1202,
	2025, 1855, 1005, 1004, 1003, 3605, 1671, 3252, 3191, 2986,
	209, 3291, 3602, 1025, 2843, 3257, 1745, 2303, 1525, 3256,
	2850, 872, 1192, 2700, 2911, 1254, 3532, 213, 3126, 1025,
	1524, 2390, 2389, 3521, 1066, 1065, 1064, 2776, 3758, 1089,
	3097, 180, 2554, 3318, 3314, 1464, 1456, 3365, 177, 179,
	3322, 178, 3315, 3337, 209, 3351, 3354, 3331, 209, 3350,
	3340, 3114, 3293, 209, 88, 35, 3359, 16, 116, 1089,
	115, 3342, 1876, 3347, 3304, 3305, 114, 113, 112, 3352,
	111, 209, 110, 209, 105, 209, 109, 108, 107, 534,
	106, 104, 103, 102, 101, 3175, 3176, 3177, 100, 99,
	98, 97, 96, 1894, 3376, 95, 1089, 94, 93, 92,
	91, 90, 89, 577, 213, 574, 213, 49, 1089, 213,
	48, 3386, 87, 86, 3381, 15, 33, 213, 13, 53,
	54, 12, 3072, 28, 29, 77, 76, 3397, 27, 14,
	1029, 26, 24, 10, 581, 8, 7, 1027, 700, 30,
	213, 3411, 3368, 3410, 3401, 1639, 1029, 209, 11, 1184,
	209, 146, 145, 1027, 3402, 3403, 144, 70, 143, 213,
	142, 69, 22, 581, 9, 138, 3467, 213, 1865, 3142,
	209, 65, 3409, 140, 3405, 139, 213, 2845, 3457, 209,
	209, 1202, 209, 137, 209, 3431, 209, 213, 209, 3466,
	3430, 136, 135, 1695, 3447, 2544, 63, 3472, 134, 133,
	3474, 64, 1977, 132, 3471, 1978, 3445, 1979, 213, 213,
	20, 5, 3455, 3439, 3440, 52, 6, 3330, 209, 3479,
	3489, 3490, 3371, 2919, 81, 82, 31, 3341, 61, 60,
	213, 3465, 59, 19, 51, 1026, 3470, 3477, 3478, 565,
	18, 3476, 3483, 581, 3354, 213, 3358, 1695, 3484, 170,
	1026, 169, 168, 3449, 167, 162, 161, 166, 3500, 164,
	163, 3437, 165, 160, 3517, 3527, 172, 171, 174, 158,
	154, 153, 3501, 3502, 2203, 2199, 2199, 3509, 3504, 157,
	1026, 159, 156, 155, 3516, 152, 173, 1671, 56, 131,
	130, 129, 3534, 213, 128, 127, 126, 125, 55, 17,
	2, 1, 0, 0, 3541, 0, 213, 1202, 0, 0,
	0, 0, 3481, 213, 0, 1473, 1474, 1202, 1202, 0,
	0, 0, 0, 1202, 0, 0, 0, 213, 0, 213,
	3547, 3548, 0, 3546, 3567, 1504, 3551, 0, 3555, 3559,
	0, 1671, 1476, 1695, 0, 0, 0, 0, 0, 3564,
	3563, 0, 0, 213, 2203, 2203, 0, 3571, 0, 213,
	3593, 0, 213, 3558, 1089, 3470, 0, 0, 3595, 0,
	0, 0, 1475, 213, 213, 0, 0, 3604, 3607, 0,
	0, 0, 0, 0, 3616, 2199, 2199, 2199, 3618, 3565,
	3566, 0, 0, 3623, 0, 3570, 534, 3600, 3580, 0,
	3621, 0, 0, 0, 3630, 0, 0, 0, 0, 0,
	0, 209, 0, 213, 3631, 0, 0, 0, 3485, 3625,
	534, 3627, 3609, 0, 1193, 3658, 3493, 209, 0, 534,
	3608, 0, 0, 3612, 0, 3642, 3643, 1671, 0, 3645,
	3644, 209, 0, 0, 3261, 0, 0, 3663, 0, 1026,
	0, 3676, 3572, 0, 3573, 3394, 1481, 213, 3678, 3661,
	0, 0, 3680, 0, 2203, 2203, 2203, 2450, 3686, 3685,
	0, 0, 3690, 0, 3677, 0, 3679, 213, 3681, 3682,
	0, 0, 0, 0, 3594, 0, 0, 1503, 1505, 0,
	0, 0, 0, 3696, 3697, 3702, 3698, 3419, 3700, 0,
	1617, 0, 3708, 0, 213, 0, 213, 3604, 0, 3707,
	3607, 3711, 3709, 3719, 0, 0, 3616, 3717, 3722, 3715,
	3721, 0, 0, 0, 550, 3723, 0, 0, 3716, 0,
	0, 0, 0, 0, 0, 0, 2651, 2652, 0, 2669,
	2670, 2671, 1496, 3737, 0, 3735, 0, 0, 0, 0,
	3741, 0, 0, 0, 0, 3211, 3746, 3745, 0, 0,
	0, 0, 3749, 0, 3742, 0, 0, 2327, 0, 3755,
	0, 0, 0, 0, 0, 209, 3761, 0, 0, 3762,
	0, 1087, 0, 0, 3764, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3768, 3769, 209,
	3771, 3767, 2666, 3772, 0, 0, 3774, 3508, 1025, 3777,
	0, 3387, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1025, 209, 2399, 0, 0, 0, 3714,
	3619, 3756, 3757, 3620, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 1214, 3387, 0,
	209, 0, 843, 1025, 0, 0, 0, 209, 0, 0,
	2034, 0, 0, 0, 0, 0, 3775, 0, 1876, 0,
	0, 0, 0, 0, 0, 0, 2327, 2657, 534, 0,
	0, 2453, 0, 0, 3683, 3684, 0, 209, 3687, 0,
	209, 0, 209, 0, 209, 0, 209, 209, 0, 1184,
	0, 0, 0, 0, 0, 0, 0, 0, 2472, 700,
	0, 2327, 2327, 0, 0, 0, 1026, 1026, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 2672, 0,
	0, 0, 0, 2651, 2652, 1029, 2669, 2670, 2671, 209,
	1184, 209, 1027, 0, 1214, 0, 1214, 0, 0, 1184,
	1029, 1184, 0, 1184, 2199, 2199, 0, 1027, 0, 0,
	0, 0, 0, 2667, 0, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 0, 0, 209, 209, 209, 209, 1184, 209,
	1029, 209, 0, 0, 3287, 0, 0, 1027, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2666,
	0, 0, 0, 0, 0, 2651, 2652, 0, 2669, 2670,
	2671, 0, 209, 0, 3284, 0, 0, 3277, 0, 0,
	209, 0, 1025, 0, 2959, 0, 0, 0, 0, 0,
	0, 3275, 0, 2203, 2203, 0, 0, 3279, 2199, 2199,
	2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
	2199, 2199, 2199, 2199, 2199, 2199, 2199, 3285, 2199, 0,
	0, 0, 0, 2668, 0, 0, 0, 0, 1660, 0,
	0, 2666, 0, 0, 2657, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3278,
	0, 0, 0, 0, 0, 1026, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1214,
	0, 0, 0, 0, 0, 0, 2034, 2203, 2203, 2203,
	2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203,
	2203, 2203, 2203, 2203, 2203, 2203, 0, 2203, 0, 0,
	0, 0, 0, 0, 0, 0, 2657, 0, 0, 1029,
	0, 0, 0, 0, 0, 0, 1027, 0, 0, 0,
	2667, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2663, 2664, 2665,
	0, 0, 0, 0, 2662, 2660, 2661, 2653, 2654, 2655,
	2656, 2658, 2659, 0, 0, 0, 0, 2672, 0, 0,
	0, 0, 0, 0, 0, 0, 3280, 0, 0, 0,
	3281, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 2667, 0, 0, 0, 534, 0, 0, 0,
	0, 534, 0, 0, 534, 0, 0, 534, 534, 0,
	3283, 0, 0, 534, 0, 0, 0, 1026, 0, 0,
	2668, 209, 0, 3286, 0, 1026, 0, 0, 0, 0,
	0, 0, 0, 1214, 0, 0, 0, 843, 1026, 0,
	0, 843, 0, 0, 0, 0, 0, 0, 1214, 1025,
	1025, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2327, 2327, 209,
	0, 0, 0, 2327, 0, 0, 2780, 1216, 0, 1220,
	0, 1226, 0, 2327, 2780, 0, 2327, 2780, 2780, 0,
	0, 0, 2668, 0, 0, 0, 0, 0, 0, 0,
	209, 209, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 1184, 0, 0, 3282, 0, 0, 0,
	0, 0, 0, 0, 2663, 2664, 2665, 0, 0, 0,
	0, 2662, 2660, 2661, 2653, 2654, 2655, 2656, 2658, 2659,
	0, 0, 0, 0, 0, 0, 2839, 0, 0, 2841,
	2327, 0, 1348, 209, 0, 0, 0, 209, 0, 1261,
	1353, 0, 0, 0, 0, 0, 1029, 1029, 0, 0,
	0, 0, 209, 1027, 1027, 0, 0, 0, 1184, 0,
	209, 0, 0, 2327, 0, 534, 0, 0, 0, 0,
	0, 0, 2327, 0, 0, 0, 2663, 2664, 2665, 0,
	0, 0, 0, 2662, 2660, 2661, 2653, 2654, 2655, 2656,
	2658, 2659, 0, 0, 0, 0, 1405, 0, 1025, 0,
	0, 0, 0, 209, 1876, 0, 0, 1876, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2651, 2652, 0, 2669,
	2670, 2671, 0, 124, 0, 0, 0, 0, 0, 57,
	0, 0, 0, 0, 2928, 2958, 0, 1184, 209, 0,
	209, 0, 0, 58, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	1473, 1474, 0, 0, 0, 0, 0, 1526, 1527, 1528,
	1529, 1530, 0, 209, 39, 121, 0, 0, 0, 0,
	1504, 0, 2666, 0, 0, 0, 0, 1476, 38, 0,
	67, 0, 0, 0, 0, 0, 1544, 0, 0, 0,
	0, 0, 1557, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 0, 1029, 42, 1475, 0, 0,
	0, 72, 1027, 0, 122, 0, 1495, 0, 0, 2991,
	40, 83, 0, 1492, 0, 0, 73, 80, 0, 877,
	85, 0, 57, 0, 0, 0, 0, 0, 2199, 0,
	1025, 0, 0, 0, 0, 0, 58, 2657, 1025, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 0, 0,
	0, 1025, 62, 3210, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2199, 1498, 1499, 1500, 1501, 0, 0, 0, 0, 0,
	0, 1481, 0, 67, 0, 0, 0, 0, 2672, 0,
	0, 0, 0, 85, 0, 0, 0, 209, 209, 0,
	0, 0, 0, 0, 1611, 1611, 1611, 2203, 0, 0,
	0, 0, 1503, 1505, 72, 0, 0, 0, 0, 534,
	534, 0, 0, 2667, 83, 0, 0, 0, 0, 73,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1490, 1491, 0, 0, 0, 0, 0, 0, 2203,
	0, 1214, 0, 0, 0, 0, 0, 1029, 0, 0,
	0, 820, 0, 0, 1027, 1029, 0, 1496, 0, 0,
	838, 0, 1027, 74, 75, 843, 0, 0, 1029, 0,
	2199, 0, 44, 0, 0, 1027, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 0, 0, 1015, 0, 0, 47, 147, 78, 0,
	79, 0, 45, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 46, 2668, 0, 0, 0, 0, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 50, 0, 0, 0, 117, 0, 0, 209, 1502,
	0, 0, 0, 0, 0, 120, 0, 209, 0, 2203,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 183,
	0, 0, 0, 0, 0, 2327, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 2472,
	2472, 0, 118, 0, 0, 700, 700, 2327, 0, 0,
	1876, 1876, 0, 0, 700, 2327, 151, 0, 0, 0,
	0, 0, 209, 0, 182, 0, 0, 0, 0, 0,
	147, 78, 0, 79, 175, 0, 0, 2203, 2203, 0,
	0, 0, 176, 0, 0, 0, 0, 2663, 2664, 2665,
	0, 0, 181, 0, 2662, 2660, 2661, 2653, 2654, 2655,
	2656, 2658, 2659, 150, 695, 0, 3, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3230, 183, 0, 0, 1493, 1489, 0, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 209, 0,
	0, 0, 0, 0, 1214, 176, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 2327, 2327, 2327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1214, 0, 0,
	0, 0, 0, 0, 2327, 0, 2780, 0, 0, 1214,
	1214, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2327, 0, 0, 0,
	3333, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 3344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2009, 0, 2013, 0, 0, 0, 0, 0,
	0, 2027, 0, 0, 0, 0, 0, 1214, 2036, 2037,
	2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
	2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
	2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 0, 2076, 0, 2078, 2079, 2080, 2081,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2105, 85, 0, 85,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 1544,
	0, 0, 0, 2120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2327, 0, 2780, 0, 0, 3413,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 2158, 2161, 2164, 2167, 0, 2171, 2172,
	2173, 2174, 2175, 2176, 2177, 0, 0, 0, 0, 2195,
	581, 2206, 2208, 2213, 2651, 2652, 0, 2669, 2670, 2671,
	0, 838, 85, 85, 85, 0, 0, 0, 0, 3413,
	0, 0, 85, 0, 0, 0, 0, 2327, 0, 0,
	85, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 942, 0, 0, 0, 0, 0, 0, 209, 209,
	2666, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 0,
	2991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 3413, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 1473, 1474, 0, 1506, 1507, 1508,
	1516, 1517, 1518, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 1509, 1504, 2657, 0, 0, 0, 0,
	0, 1476, 0, 3333, 0, 0, 1522, 0, 0, 0,
	820, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 2673, 2780, 0, 0, 0, 0, 1536, 0,
	0, 1475, 0, 0, 0, 0, 0, 1214, 0, 1214,
	1495, 0, 0, 0, 0, 1543, 2672, 1492, 0, 1549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3589, 0, 0, 0, 0, 0, 1214,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 2667, 0, 209, 2327, 0, 0, 0, 2401, 0,
	2403, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 0, 2991, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 0, 1523, 0, 0, 0, 1503, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 2327, 1520, 0,
	0, 0, 0, 0, 0, 1490, 1491, 0, 0, 0,
	0, 2668, 0, 57, 0, 0, 1631, 3413, 1634, 0,
	85, 1511, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 1496, 0, 0, 1473, 1474, 0, 1506, 1507, 1508,
	1516, 1517, 1518, 62, 1214, 0, 2327, 0, 0, 0,
	0, 2519, 1521, 1509, 1504, 0, 0, 0, 0, 0,
	0, 1476, 0, 0, 0, 0, 1522, 0, 0, 1510,
	0, 0, 0, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 1526, 1527, 0,
	1495, 0, 0, 0, 0, 72, 0, 1492, 0, 0,
	0, 0, 0, 1502, 0, 83, 0, 0, 0, 0,
	73, 80, 0, 0, 0, 2663, 2664, 2665, 0, 0,
	0, 1497, 2662, 2660, 2661, 2653, 2654, 2655, 2656, 2658,
	2659, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2566, 2567, 1473, 1474, 0, 1514, 2573, 0,
	1516, 1517, 1518, 0, 74, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 1504, 1481, 0, 2587, 2588, 0,
	0, 1476, 0, 2120, 0, 0, 1522, 0, 0, 0,
	0, 0, 2595, 0, 0, 0, 0, 0, 0, 1513,
	0, 0, 1523, 0, 0, 0, 1503, 1505, 2609, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 0, 0, 0, 1519, 1492, 1520, 0,
	0, 0, 0, 2630, 0, 1490, 1491, 0, 0, 0,
	0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493,
	1489, 1511, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 1496, 0, 0, 0, 3238, 0, 0, 0, 3237,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	0, 0, 1521, 0, 0, 1498, 1499, 1500, 1501, 0,
	2213, 2213, 2213, 0, 0, 1481, 0, 0, 0, 1510,
	0, 0, 0, 0, 0, 1611, 0, 0, 0, 0,
	0, 147, 78, 2705, 79, 0, 0, 0, 0, 1513,
	0, 0, 1523, 0, 0, 0, 1503, 1505, 0, 210,
	1094, 210, 210, 181, 1094, 210, 1094, 0, 0, 838,
	1094, 838, 0, 1502, 0, 695, 0, 0, 210, 117,
	0, 0, 0, 0, 0, 1490, 1491, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1511, 0, 183, 0, 0, 0, 0, 0, 0,
	843, 1496, 0, 0, 0, 0, 0, 1514, 0, 1094,
	210, 210, 0, 0, 843, 0, 118, 0, 0, 0,
	0, 2651, 2652, 210, 2669, 2670, 2671, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	2796, 0, 0, 0, 210, 210, 210, 210, 175, 1094,
	0, 0, 0, 1094, 0, 0, 176, 0, 1094, 210,
	210, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 1341, 0, 0,
	0, 0, 0, 1502, 0, 820, 0, 2666, 820, 820,
	0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493,
	1489, 1497, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 1094, 0, 0, 0, 2639, 0, 0, 0, 2640,
	0, 0, 0, 0, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 2094, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 2657, 0, 0, 0, 0, 0, 1543, 0,
	0, 0, 1543, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 2672, 0, 0, 0, 0, 1515, 1493,
	1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1015, 0, 0, 0, 0, 0, 0, 0, 2667, 0,
	0, 0, 0, 0, 0, 0, 1634, 0, 0, 2027,
	0, 0, 0, 0, 0, 2945, 2946, 0, 0, 2949,
	0, 0, 0, 2952, 0, 0, 0, 0, 0, 0,
	0, 0, 2956, 0, 0, 0, 0, 85, 0, 0,
	0, 2963, 0, 0, 2705, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3000, 3001,
	0, 3002, 3003, 3004, 0, 0, 3005, 0, 2668, 0,
	3007, 0, 0, 1473, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 1474, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	1476, 3035, 3036, 0, 210, 1504, 0, 0, 0, 0,
	0, 0, 1476, 0, 0, 1094, 3045, 210, 210, 210,
	0, 0, 0, 0, 210, 0, 0, 85, 0, 210,
	1475, 3054, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 1094, 1475, 0, 0, 0, 1492, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 85, 0, 1492, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	85, 214, 2663, 2664, 2665, 0, 2953, 3083, 0, 2662,
	2660, 2661, 2653, 2654, 2655, 2656, 2658, 2659, 2948, 0,
	0, 0, 3091, 3094, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1481, 0, 1498, 1499, 1500, 1501,
	0, 85, 0, 0, 85, 0, 1481, 3113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 0, 0, 0, 0, 1503, 1505, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 1503, 1505, 0,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	681, 0, 0, 0, 1490, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 1094,
	1094, 210, 0, 663, 0, 0, 0, 1094, 1611, 0,
	1496, 0, 0, 0, 0, 0, 0, 3170, 0, 85,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 664, 0,
	0, 0, 0, 0, 0, 210, 0, 665, 0, 210,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 666, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 210, 0, 210, 0, 3208, 3209,
	686, 0, 0, 0, 3213, 3214, 0, 0, 0, 3217,
	3218, 0, 1502, 0, 0, 667, 3222, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 3226, 0, 0,
	1497, 0, 0, 0, 668, 0, 0, 0, 0, 0,
	0, 0, 1497, 3231, 0, 2094, 0, 0, 0, 0,
	0, 1094, 0, 1094, 669, 0, 1094, 670, 0, 0,
	0, 0, 596, 908, 1094, 0, 1543, 1094, 210, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 1094, 1094, 685, 0, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 210, 208, 210, 0, 210, 0, 210, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 609, 1021, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 609, 0, 0, 0, 3094, 0, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	1493, 1489, 204, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 0, 1015, 0, 0, 0, 0,
	0, 688, 0, 673, 0, 0, 0, 0, 0, 0,
	1015, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 0, 3094, 0, 0, 674, 0, 0,
	675, 0, 0, 0, 0, 0, 683, 1028, 0, 0,
	0, 0, 0, 676, 0, 0, 0, 0, 0, 0,
	0, 3382, 3383, 3384, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 0,
	0, 855, 0, 0, 677, 684, 0, 3392, 3393, 0,
	0, 0, 678, 0, 0, 0, 0, 0, 0, 0,
	0, 3400, 0, 0, 0, 680, 0, 0, 0, 0,
	679, 0, 85, 85, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 597, 0, 0, 912, 0, 0, 0,
	0, 0, 0, 0, 682, 0, 0, 0, 0, 1094,
	0, 3094, 0, 0, 85, 85, 0, 0, 85, 3436,
	0, 0, 0, 0, 0, 0, 0, 0, 3443, 0,
	0, 843, 210, 0, 0, 1094, 0, 3450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3094, 0, 0, 3094, 1504, 0,
	1090, 0, 0, 0, 1090, 1476, 1203, 0, 0, 1015,
	1203, 0, 838, 0, 0, 0, 0, 3094, 3094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 85, 85, 0, 0,
	0, 0, 0, 0, 1495, 0, 0, 0, 0, 0,
	0, 1492, 0, 1094, 0, 0, 0, 0, 0, 1203,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3520,
	0, 0, 3523, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 3094,
	0, 2947, 0, 0, 0, 0, 210, 0, 0, 1203,
	0, 0, 0, 1203, 0, 0, 0, 210, 1203, 1498,
	1499, 1500, 1501, 0, 0, 690, 0, 0, 1203, 1481,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 1094, 0, 0, 0, 1094,
	57, 693, 692, 0, 0, 210, 0, 0, 0, 0,
	1503, 1505, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 1203, 0, 0, 0, 694, 0, 0, 0, 0,
	62, 210, 0, 0, 0, 0, 0, 0, 210, 1490,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 0, 0, 1496, 0, 0, 210, 0,
	0, 210, 0, 210, 0, 210, 0, 210, 210, 0,
	0, 1094, 1094, 0, 1094, 0, 0, 0, 3641, 3641,
	3641, 0, 72, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 83, 0, 210, 0, 0, 73, 80, 0,
	3662, 208, 0, 208, 208, 0, 0, 208, 0, 0,
	210, 85, 210, 0, 0, 0, 0, 0, 0, 0,
	609, 0, 0, 3094, 57, 3094, 1015, 1015, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1502, 58, 3641,
	0, 74, 0, 0, 0, 210, 210, 210, 210, 0,
	210, 0, 210, 0, 62, 1497, 855, 0, 0, 0,
	855, 1084, 208, 208, 0, 0, 0, 1191, 1173, 0,
	0, 0, 1173, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 67, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 208, 208, 208, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 208, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 0, 0, 3641,
	3750, 73, 80, 0, 0, 1290, 0, 3754, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 1315, 1315, 1315, 1191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 1493, 1489, 74, 1486, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 1483, 0, 0, 208, 147, 78,
	0, 79, 0, 0, 0, 1090, 0, 0, 0, 0,
	0, 208, 0, 0, 602, 1015, 0, 0, 0, 602,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1203, 695, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 1090, 0, 0, 0, 0, 1426, 0, 0,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 0, 0, 0, 1091,
	0, 1204, 0, 118, 0, 1204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 1094, 75,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 0, 0, 0, 0,
	1094, 0, 147, 78, 1204, 79, 0, 0, 0, 0,
	0, 0, 1473, 1474, 691, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 0, 695, 0, 0, 1476,
	117, 0, 0, 0, 1204, 0, 0, 1015, 1204, 1203,
	1203, 0, 0, 1204, 0, 1015, 0, 1090, 0, 0,
	210, 0, 0, 1204, 183, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 1492, 0, 118, 0, 0,
	0, 210, 210, 210, 0, 0, 0, 0, 0, 0,
	210, 151, 0, 0, 0, 0, 1204, 0, 0, 182,
	1633, 0, 1028, 210, 0, 0, 208, 0, 0, 175,
	0, 0, 1094, 0, 0, 2572, 0, 176, 0, 208,
	1633, 208, 0, 1094, 0, 0, 609, 85, 0, 0,
	0, 609, 1094, 1498, 1499, 1500, 1501, 85, 1339, 0,
	0, 0, 0, 1481, 210, 0, 0, 1094, 210, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 1094, 0,
	0, 0, 0, 210, 0, 0, 1649, 0, 0, 0,
	0, 1203, 0, 1203, 1503, 1505, 1203, 0, 0, 1658,
	0, 1191, 0, 1173, 1203, 0, 0, 1203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1203, 1203, 1203, 1490, 1491, 0, 1094, 1094, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	602, 0, 0, 0, 855, 0, 0, 0, 0, 1496,
	1173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1094, 0, 210,
	1094, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 609, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 1094, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 208, 0, 0, 0, 0, 208, 0, 1094, 0,
	2094, 0, 0, 0, 0, 0, 1473, 1474, 0, 0,
	0, 0, 0, 0, 208, 1173, 208, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 0,
	1091, 0, 0, 1476, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 1853, 0, 0,
	0, 1860, 0, 0, 0, 0, 1204, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 1290, 0, 1882, 1091, 1882, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 0, 0, 208, 0, 0, 0, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 1090,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 2565,
	0, 1094, 609, 208, 0, 208, 0, 208, 0, 208,
	0, 208, 0, 0, 0, 1090, 0, 1498, 1499, 1500,
	1501, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	1860, 0, 0, 1930, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1947, 0, 0, 0, 0, 1503, 1505,
	0, 0, 0, 1957, 0, 1959, 0, 1961, 0, 1963,
	85, 1964, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1204, 1204, 0, 1490, 1491, 0,
	0, 0, 1091, 0, 0, 1094, 0, 0, 1094, 0,
	0, 1981, 0, 1203, 0, 0, 0, 0, 0, 0,
	0, 210, 0, 1496, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 1094, 210, 0,
	0, 0, 1094, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1173, 0, 0, 0, 0,
	0, 0, 1094, 1094, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 210, 1094, 1090, 0, 0, 0, 1203,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 1204, 0, 1204, 0,
	0, 1204, 1473, 1474, 0, 0, 0, 0, 0, 1204,
	0, 0, 1204, 0, 1028, 0, 0, 0, 0, 0,
	1173, 0, 1504, 0, 0, 1204, 1204, 1204, 0, 1476,
	1028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 1203, 1203, 0, 1203, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 1203, 0, 1495, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 1094, 2269, 0, 0, 0, 0, 0,
	0, 1493, 1489, 1173, 1486, 1484, 1485, 1477, 1478, 1479,
	1480, 1482, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 1498, 1499, 1500, 1501, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 210, 210, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 1503, 1505, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	210, 0, 0, 0, 0, 0, 0, 1094, 0, 0,
	1094, 0, 208, 1490, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 609, 0, 1496,
	0, 1173, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 624, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 1191, 0, 0, 625,
	0, 0, 0, 1173, 1091, 0, 0, 0, 0, 0,
	208, 0, 0, 208, 0, 208, 0, 208, 0, 208,
	208, 0, 0, 0, 0, 0, 0, 1094, 0, 0,
	1091, 1502, 0, 1860, 626, 644, 0, 0, 0, 1094,
	2425, 0, 0, 0, 0, 0, 208, 0, 210, 1497,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 628,
	0, 0, 208, 0, 208, 0, 0, 0, 0, 0,
	2455, 0, 0, 1315, 0, 1315, 651, 1315, 0, 1191,
	1191, 0, 629, 0, 0, 0, 0, 0, 1090, 0,
	0, 649, 0, 0, 0, 0, 0, 208, 208, 208,
	208, 0, 208, 0, 208, 0, 2498, 210, 0, 0,
	630, 0, 1094, 0, 0, 0, 0, 0, 1204, 0,
	1090, 0, 2506, 0, 2509, 0, 0, 0, 0, 0,
	631, 0, 0, 632, 653, 208, 0, 1090, 596, 210,
	210, 0, 0, 208, 0, 0, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 0, 0, 2530, 1191, 2532,
	1191, 0, 2535, 0, 0, 0, 0, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1315, 0, 0, 0, 0,
	1091, 0, 0, 2563, 1204, 652, 0, 0, 0, 0,
	0, 0, 0, 0, 635, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1692, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 1094, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 1094, 1094,
	633, 0, 0, 1203, 1094, 0, 0, 0, 0, 0,
	636, 0, 1090, 0, 1709, 1686, 1693, 0, 1676, 1719,
	1718, 0, 0, 0, 1678, 1677, 0, 1203, 0, 637,
	0, 0, 1729, 1730, 0, 0, 1204, 1204, 1203, 1204,
	0, 0, 0, 210, 0, 1094, 0, 0, 0, 0,
	0, 1204, 0, 0, 210, 0, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 1720, 0, 1716, 1715, 0, 638,
	0, 0, 0, 0, 0, 0, 1203, 1203, 1714, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 643, 0,
	0, 0, 0, 0, 1028, 0, 0, 0, 0, 0,
	639, 0, 0, 656, 0, 655, 0, 0, 640, 1713,
	1711, 1712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 641, 0, 0, 1633, 0, 648, 1090, 0, 0,
	1090, 657, 0, 654, 0, 0, 0, 0, 0, 597,
	0, 0, 1688, 0, 0, 0, 1173, 0, 0, 0,
	0, 0, 1702, 1691, 1704, 1706, 1707, 1708, 1703, 0,
	1696, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1725, 1726, 208, 0, 0, 0, 0, 0, 1173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1173, 0, 0, 0, 0,
	0, 1090, 0, 208, 208, 208, 0, 1680, 0, 0,
	0, 0, 1633, 0, 0, 0, 0, 0, 1090, 855,
	0, 0, 0, 0, 1717, 208, 0, 0, 1689, 0,
	1690, 0, 2772, 855, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1509, 1504, 0, 0, 0, 0,
	0, 0, 1476, 2809, 2811, 2425, 208, 1522, 0, 0,
	208, 1710, 0, 0, 0, 1699, 1697, 1698, 1701, 1700,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 1475, 1028, 0, 0, 0, 0, 0, 0,
	1173, 1495, 0, 0, 0, 0, 0, 0, 1492, 0,
	1681, 1682, 1684, 1685, 0, 0, 0, 0, 0, 0,
	1173, 0, 0, 0, 0, 0, 2851, 1705, 1683, 0,
	2855, 0, 0, 0, 0, 0, 208, 0, 1728, 0,
	0, 1090, 0, 1091, 0, 2864, 0, 0, 0, 0,
	0, 0, 0, 0, 1679, 0, 0, 1721, 1722, 1723,
	1724, 0, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 1091, 1481, 0, 0, 0,
	0, 208, 0, 208, 0, 0, 0, 0, 1687, 0,
	0, 0, 1091, 1694, 1727, 0, 2907, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 1203, 1490, 1491, 1203, 0,
	0, 2931, 0, 1191, 0, 1173, 0, 0, 1173, 0,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 1090, 0, 0,
	0, 0, 1203, 0, 0, 0, 2943, 0, 0, 0,
	0, 0, 0, 1521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 0, 0,
	1510, 0, 1203, 1203, 1203, 0, 0, 0, 1204, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 1203, 1173,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 1204, 0, 0, 0, 1173, 0, 0, 0,
	0, 0, 0, 1204, 1502, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1028, 1028, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 1204, 1204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 1091, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1173,
	0, 1090, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 0, 0, 0, 0, 2116, 0, 0, 0,
	2117, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 1091, 0, 0, 0,
	208, 0, 1090, 0, 0, 0, 0, 1090, 0, 0,
	0, 0, 0, 1091, 0, 0, 0, 0, 0, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	1203, 0, 0, 3141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	3154, 0, 0, 0, 0, 1173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 3193, 0, 0, 0, 0,
	0, 0, 1173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1091, 0, 0, 0,
	0, 0, 0, 0, 1173, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1028, 0, 0, 0, 0, 0, 0, 0, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1204, 0, 1203, 1204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 208, 0, 0, 1173,
	0, 1173, 1091, 0, 0, 0, 0, 1204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1204, 1204, 1204,
	0, 0, 0, 0, 3306, 0, 0, 0, 0, 0,
	0, 0, 0, 1204, 0, 2425, 0, 0, 0, 1091,
	1173, 0, 0, 0, 0, 1173, 0, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 1091, 2425, 0, 0, 0, 0, 0, 1509, 1504,
	0, 0, 0, 0, 0, 1173, 1476, 0, 1203, 0,
	0, 1522, 0, 0, 0, 0, 0, 0, 1203, 1203,
	0, 0, 0, 0, 1203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 1173, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 1173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1091, 0, 1091, 0,
	1498, 1499, 1500, 1501, 0, 1173, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 1173, 0, 208,
	3420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1513, 0, 0, 1523, 0, 0,
	0, 1503, 1505, 0, 0, 0, 0, 0, 0, 0,
	855, 208, 208, 0, 0, 0, 0, 1091, 0, 0,
	0, 1519, 1091, 1520, 0, 0, 0, 0, 0, 0,
	1490, 1491, 0, 0, 0, 0, 0, 0, 0, 3473,
	0, 0, 0, 0, 0, 0, 1511, 0, 0, 0,
	0, 0, 1091, 0, 0, 1204, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3499, 1191, 0, 0, 0, 0, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 1091, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 1091, 0, 0, 208, 0, 0, 0, 3557,
	0, 0, 0, 0, 1091, 0, 208, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3597, 0, 0, 0, 0,
	0, 0, 0, 1173, 0, 0, 3613, 0, 855, 0,
	0, 0, 0, 0, 0, 0, 0, 1204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 3236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1204, 1204, 0, 0, 0, 0, 1204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 1095, 223, 1096, 1097, 1098,
	1091, 1099, 485, 1100, 1101, 1102, 1103, 224, 226, 225,
	227, 228, 486, 487, 229, 488, 232, 230, 231, 489,
	1104, 233, 234, 235, 236, 237, 238, 239, 1105, 1106,
	240, 490, 491, 492, 1107, 241, 493, 1108, 1093, 1109,
	242, 243, 244, 245, 246, 247, 0, 249, 250, 251,
	248, 1110, 252, 0, 253, 254, 255, 1111, 256, 965,
	257, 258, 1112, 1113, 1115, 1114, 1116, 1117, 1118, 259,
	260, 261, 262, 263, 264, 494, 495, 1119, 265, 1120,
	267, 266, 1121, 268, 1122, 1123, 269, 270, 271, 1124,
	272, 1125, 273, 274, 1126, 275, 496, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 497, 498, 1127, 215,
	1128, 0, 0, 0, 0, 286, 287, 288, 499, 289,
	290, 0, 291, 1129, 292, 1130, 1131, 966, 293, 294,
	1132, 295, 500, 1133, 501, 296, 1134, 297, 298, 299,
	300, 502, 503, 504, 355, 968, 301, 302, 1135, 303,
	304, 306, 0, 0, 216, 305, 307, 314, 1136, 967,
	308, 505, 310, 309, 311, 312, 313, 506, 1137, 507,
	1138, 315, 969, 508, 970, 316, 317, 318, 971, 319,
	320, 0, 0, 321, 322, 323, 324, 325, 1139, 327,
	326, 1140, 328, 509, 972, 329, 330, 973, 1141, 331,
	332, 1142, 1143, 333, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 974, 347,
	348, 351, 352, 350, 975, 349, 1144, 217, 976, 353,
	1145, 510, 354, 511, 356, 357, 1146, 358, 359, 360,
	1147, 1148, 362, 363, 364, 1149, 1150, 365, 366, 512,
	977, 367, 978, 513, 368, 361, 369, 370, 371, 372,
	373, 374, 375, 1151, 376, 377, 514, 378, 515, 379,
	1152, 380, 0, 381, 382, 383, 384, 385, 386, 387,
	516, 388, 389, 1153, 390, 391, 392, 393, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 1154, 403,
	979, 404, 405, 406, 407, 517, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 1155, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 429, 1156, 430, 410,
	411, 431, 432, 980, 433, 434, 518, 435, 436, 1157,
	437, 438, 439, 440, 412, 441, 445, 446, 442, 443,
	444, 519, 1158, 448, 449, 447, 1159, 450, 451, 452,
	453, 454, 280, 455, 1160, 456, 520, 521, 522, 523,
	1161, 463, 1162, 457, 458, 524, 459, 525, 1163, 460,
	461, 462, 0, 464, 465, 1164, 1165, 466, 467, 468,
	470, 471, 469, 473, 1166, 474, 1167, 472, 475, 476,
	477, 526, 527, 528, 1168, 479, 478, 529, 1169, 1170,
	1171, 1172, 480, 481, 530, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 2247, 0,
	0, 0, 0, 0, 0, 0, 2248, 218, 219, 220,
	221, 222, 1095, 223, 1096, 1097, 1098, 0, 1099, 485,
	1100, 1101, 1102, 1103, 224, 226, 225, 227, 228, 486,
	487, 229, 488, 232, 230, 231, 489, 1104, 233, 234,
	235, 236, 237, 238, 239, 1105, 1106, 240, 490, 491,
	492, 1107, 241, 493, 1108, 1093, 1109, 242, 243, 244,
	245, 246, 247, 0, 249, 250, 251, 248, 1110, 252,
	0, 253, 254, 255, 1111, 256, 965, 257, 258, 1112,
	1113, 1115, 1114, 1116, 1117, 1118, 259, 260, 261, 262,
	263, 264, 494, 495, 1119, 265, 1120, 267, 266, 1121,
	268, 1122, 1123, 269, 270, 271, 1124, 272, 1125, 273,
	274, 1126, 275, 496, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 497, 498, 1127, 215, 1128, 0, 0,
	0, 0, 286, 287, 288, 499, 289, 290, 0, 291,
	1129, 292, 1130, 1131, 966, 293, 294, 1132, 295, 500,
	1133, 501, 296, 1134, 297, 298, 299, 300, 502, 503,
	504, 355, 968, 301, 302, 1135, 303, 304, 306, 0,
	0, 216, 305, 307, 314, 1136, 967, 308, 505, 310,
	309, 311, 312, 313, 506, 1137, 507, 1138, 315, 969,
	508, 970, 316, 317, 318, 971, 319, 320, 0, 0,
	321, 322, 323, 324, 325, 1139, 327, 326, 1140, 328,
	509, 972, 329, 330, 973, 1141, 331, 332, 1142, 1143,
	333, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 974, 347, 348, 351, 352,
	350, 975, 349, 1144, 217, 976, 353, 1145, 510, 354,
	511, 356, 357, 1146, 358, 359, 360, 1147, 1148, 362,
	363, 364, 1149, 1150, 365, 366, 512, 977, 367, 978,
	513, 368, 361, 369, 370, 371, 372, 373, 374, 375,
	1151, 376, 377, 514, 378, 515, 379, 1152, 380, 0,
	381, 382, 383, 384, 385, 386, 387, 516, 388, 389,
	1153, 390, 391, 392, 393, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 1154, 403, 979, 404, 405,
	406, 407, 517, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 1155, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 429, 1156, 430, 410, 411, 431, 432,
	980, 433, 434, 518, 435, 436, 1157, 437, 438, 439,
	440, 412, 441, 445, 446, 442, 443, 444, 519, 1158,
	448, 449, 447, 1159, 450, 451, 452, 453, 454, 280,
	455, 1160, 456, 520, 521, 522, 523, 1161, 463, 1162,
	457, 458, 524, 459, 525, 1163, 460, 461, 462, 0,
	464, 465, 1164, 1165, 466, 467, 468, 470, 471, 469,
	473, 1166, 474, 1167, 472, 475, 476, 477, 526, 527,
	528, 1168, 479, 478, 529, 1169, 1170, 1171, 1172, 480,
	481, 530, 482, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	2969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2971, 218, 219, 220, 221, 222, 1095, 223, 1096,
	1097, 1098, 0, 1099, 485, 1100, 1101, 1102, 1103, 224,
	226, 225, 227, 228, 486, 487, 229, 488, 232, 230,
	231, 489, 1104, 233, 234, 235, 236, 237, 238, 239,
	1105, 1106, 240, 490, 491, 492, 1107, 241, 493, 1108,
	1093, 1109, 242, 243, 244, 245, 246, 247, 0, 249,
	250, 251, 248, 1110, 252, 0, 253, 254, 255, 1111,
	256, 965, 257, 258, 1112, 1113, 1115, 1114, 1116, 1117,
	1118, 259, 260, 261, 262, 263, 264, 494, 495, 1119,
	265, 1120, 267, 266, 1121, 268, 1122, 1123, 269, 270,
	271, 1124, 272, 1125, 273, 274, 1126, 275, 496, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 497, 498,
	1127, 215, 1128, 0, 0, 0, 0, 286, 287, 288,
	499, 289, 290, 0, 291, 1129, 292, 1130, 1131, 966,
	293, 294, 1132, 295, 500, 1133, 501, 296, 1134, 297,
	298, 299, 300, 502, 503, 504, 355, 968, 301, 302,
	1135, 303, 304, 306, 0, 0, 216, 305, 307, 314,
	1136, 967, 308, 505, 310, 309, 311, 312, 313, 506,
	1137, 507, 1138, 315, 969, 508, 970, 316, 317, 318,
	971, 319, 320, 0, 0, 321, 322, 323, 324, 325,
	1139, 327, 326, 1140, 328, 509, 972, 329, 330, 973,
	1141, 331, 332, 1142, 1143, 333, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	974, 347, 348, 351, 352, 350, 975, 349, 1144, 217,
	976, 353, 1145, 510, 354, 511, 356, 357, 1146, 358,
	359, 360, 1147, 1148, 362, 363, 364, 1149, 1150, 365,
	366, 512, 977, 367, 978, 513, 368, 361, 369, 370,
	371, 372, 373, 374, 375, 1151, 376, 377, 514, 378,
	515, 379, 1152, 380, 0, 381, 382, 383, 384, 385,
	386, 387, 516, 388, 389, 1153, 390, 391, 392, 393,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	1154, 403, 979, 404, 405, 406, 407, 517, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 1155, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 429, 1156,
	430, 410, 411, 431, 432, 980, 433, 434, 518, 435,
	436, 1157, 437, 438, 439, 440, 412, 441, 445, 446,
	442, 443, 444, 519, 1158, 448, 449, 447, 1159, 450,
	451, 452, 453, 454, 280, 455, 1160, 456, 520, 521,
	522, 523, 1161, 463, 1162, 457, 458, 524, 459, 525,
	1163, 460, 461, 462, 0, 464, 465, 1164, 1165, 466,
	467, 468, 470, 471, 469, 473, 1166, 474, 1167, 472,
	475, 476, 477, 526, 527, 528, 1168, 479, 478, 529,
	1169, 1170, 1171, 1172, 480, 481, 530, 482, 483, 484,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3260, 218, 219, 220, 221, 222, 1095, 223, 1096, 1097,
	1098, 0, 1099, 485, 1100, 1101, 1102, 1103, 224, 226,
	225, 227, 228, 486, 487, 229, 488, 232, 230, 231,
	489, 1104, 233, 234, 235, 236, 237, 238, 239, 1105,
	1106, 240, 490, 491, 492, 1107, 241, 493, 1108, 1093,
	1109, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 1110, 252, 0, 253, 254, 255, 1111, 256,
	965, 257, 258, 1112, 1113, 1115, 1114, 1116, 1117, 1118,
	259, 260, 261, 262, 263, 264, 494, 495, 1119, 265,
	1120, 267, 266, 1121, 268, 1122, 1123, 269, 270, 271,
	1124, 272, 1125, 273, 274, 1126, 275, 496, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 497, 498, 1127,
	215, 1128, 0, 0, 0, 0, 286, 287, 288, 499,
	289, 290, 0, 291, 1129, 292, 1130, 1131, 966, 293,
	294, 1132, 295, 500, 1133, 501, 296, 1134, 297, 298,
	299, 300, 502, 503, 504, 355, 968, 301, 302, 1135,
	303, 304, 306, 0, 0, 216, 305, 307, 314, 1136,
	967, 308, 505, 310, 309, 311, 312, 313, 506, 1137,
	507, 1138, 315, 969, 508, 970, 316, 317, 318, 971,
	319, 320, 0, 0, 321, 322, 323, 324, 325, 1139,
	327, 326, 1140, 328, 509, 972, 329, 330, 973, 1141,
	331, 332, 1142, 1143, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 974,
	347, 348, 351, 352, 350, 975, 349, 1144, 217, 976,
	353, 1145, 510, 354, 511, 356, 357, 1146, 358, 359,
	360, 1147, 1148, 362, 363, 364, 1149, 1150, 365, 366,
	512, 977, 367, 978, 513, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 1151, 376, 377, 514, 378, 515,
	379, 1152, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 516, 388, 389, 1153, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 1154,
	403, 979, 404, 405, 406, 407, 517, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 1155, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 429, 1156, 430,
	410, 411, 431, 432, 980, 433, 434, 518, 435, 436,
	1157, 437, 438, 439, 440, 412, 441, 445, 446, 442,
	443, 444, 519, 1158, 448, 449, 447, 1159, 450, 451,
	452, 453, 454, 280, 455, 1160, 456, 520, 521, 522,
	523, 1161, 463, 1162, 457, 458, 524, 459, 525, 1163,
	460, 461, 462, 0, 464, 465, 1164, 1165, 466, 467,
	468, 470, 471, 469, 473, 1166, 474, 1167, 472, 475,
	476, 477, 526, 527, 528, 1168, 479, 478, 529, 1169,
	1170, 1171, 1172, 480, 481, 530, 482, 483, 484, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3388, 0, 218, 219, 220, 221,
	222, 1095, 223, 1096, 1097, 1098, 0, 1099, 485, 1100,
	1101, 1102, 1103, 224, 226, 225, 227, 228, 486, 487,
	229, 488, 232, 230, 231, 489, 1104, 233, 234, 235,
	236, 237, 238, 239, 1105, 1106, 240, 490, 491, 492,
	1107, 241, 493, 1108, 1093, 1109, 242, 243, 244, 245,
	246, 247, 0, 249, 250, 251, 248, 1110, 252, 0,
	253, 254, 255, 1111, 256, 965, 257, 258, 1112, 1113,
	1115, 1114, 1116, 1117, 1118, 259, 260, 261, 262, 263,
	264, 494, 495, 1119, 265, 1120, 267, 266, 1121, 268,
	1122, 1123, 269, 270, 271, 1124, 272, 1125, 273, 274,
	1126, 275, 496, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 497, 498, 1127, 215, 1128, 0, 0, 0,
	0, 286, 287, 288, 499, 289, 290, 0, 291, 1129,
	292, 1130, 1131, 966, 293, 294, 1132, 295, 500, 1133,
	501, 296, 1134, 297, 298, 299, 300, 502, 503, 504,
	355, 968, 301, 302, 1135, 303, 304, 306, 0, 0,
	216, 305, 307, 314, 1136, 967, 308, 505, 310, 309,
	311, 312, 313, 506, 1137, 507, 1138, 315, 969, 508,
	970, 316, 317, 318, 971, 319, 320, 0, 0, 321,
	322, 323, 324, 325, 1139, 327, 326, 1140, 328, 509,
	972, 329, 330, 973, 1141, 331, 332, 1142, 1143, 333,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 974, 347, 348, 351, 352, 350,
	975, 349, 1144, 217, 976, 353, 1145, 510, 354, 511,
	356, 357, 1146, 358, 359, 360, 1147, 1148, 362, 363,
	364, 1149, 1150, 365, 366, 512, 977, 367, 978, 513,
	368, 361, 369, 370, 371, 372, 373, 374, 375, 1151,
	376, 377, 514, 378, 515, 379, 1152, 380, 0, 381,
	382, 383, 384, 385, 386, 387, 516, 388, 389, 1153,
	390, 391, 392, 393, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 1154, 403, 979, 404, 405, 406,
	407, 517, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 1155, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 429, 1156, 430, 410, 411, 431, 432, 980,
	433, 434, 518, 435, 436, 1157, 437, 438, 439, 440,
	412, 441, 445, 446, 442, 443, 444, 519, 1158, 448,
	449, 447, 1159, 450, 451, 452, 453, 454, 280, 455,
	1160, 456, 520, 521, 522, 523, 1161, 463, 1162, 457,
	458, 524, 459, 525, 1163, 460, 461, 462, 0, 464,
	465, 1164, 1165, 466, 467, 468, 470, 471, 469, 473,
	1166, 474, 1167, 472, 475, 476, 477, 526, 527, 528,
	1168, 479, 478, 529, 1169, 1170, 1171, 1172, 480, 481,
	530, 482, 483, 484, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3313,
	0, 218, 219, 220, 221, 222, 1095, 223, 1096, 1097,
	1098, 0, 1099, 485, 1100, 1101, 1102, 1103, 224, 226,
	225, 227, 228, 486, 487, 229, 488, 232, 230, 231,
	489, 1104, 233, 234, 235, 236, 237, 238, 239, 1105,
	1106, 240, 490, 491, 492, 1107, 241, 493, 1108, 1093,
	1109, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 1110, 252, 0, 253, 254, 255, 1111, 256,
	965, 257, 258, 1112, 1113, 1115, 1114, 1116, 1117, 1118,
	259, 260, 261, 262, 263, 264, 494, 495, 1119, 265,
	1120, 267, 266, 1121, 268, 1122, 1123, 269, 270, 271,
	1124, 272, 1125, 273, 274, 1126, 275, 496, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 497, 498, 1127,
	215, 1128, 0, 0, 0, 0, 286, 287, 288, 499,
	289, 290, 0, 291, 1129, 292, 1130, 1131, 966, 293,
	294, 1132, 295, 500, 1133, 501, 296, 1134, 297, 298,
	299, 300, 502, 503, 504, 355, 968, 301, 302, 1135,
	303, 304, 306, 0, 0, 216, 305, 307, 314, 1136,
	967, 308, 505, 310, 309, 311, 312, 313, 506, 1137,
	507, 1138, 315, 969, 508, 970, 316, 317, 318, 971,
	319, 320, 0, 0, 321, 322, 323, 324, 325, 1139,
	327, 326, 1140, 328, 509, 972, 329, 330, 973, 1141,
	331, 332, 1142, 1143, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 974,
	347, 348, 351, 352, 350, 975, 349, 1144, 217, 976,
	353, 1145, 510, 354, 511, 356, 357, 1146, 358, 359,
	360, 1147, 1148, 362, 363, 364, 1149, 1150, 365, 366,
	512, 977, 367, 978, 513, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 1151, 376, 377, 514, 378, 515,
	379, 1152, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 516, 388, 389, 1153, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 1154,
	403, 979, 404, 405, 406, 407, 517, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 1155, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 429, 1156, 430,
	410, 411, 431, 432, 980, 433, 434, 518, 435, 436,
	1157, 437, 438, 439, 440, 412, 441, 445, 446, 442,
	443, 444, 519, 1158, 448, 449, 447, 1159, 450, 451,
	452, 453, 454, 280, 455, 1160, 456, 520, 521, 522,
	523, 1161, 463, 1162, 457, 458, 524, 459, 525, 1163,
	460, 461, 462, 0, 464, 465, 1164, 1165, 466, 467,
	468, 470, 471, 469, 473, 1166, 474, 1167, 472, 475,
	476, 477, 526, 527, 528, 1168, 479, 478, 529, 1169,
	1170, 1171, 1172, 480, 481, 530, 482, 483, 484, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3194, 0, 218, 219, 220, 221,
	222, 1095, 223, 1096, 1097, 1098, 0, 1099, 485, 1100,
	1101, 1102, 1103, 224, 226, 225, 227, 228, 486, 487,
	229, 488, 232, 230, 231, 489, 1104, 233, 234, 235,
	236, 237, 238, 239, 1105, 1106, 240, 490, 491, 492,
	1107, 241, 493, 1108, 1093, 1109, 242, 243, 244, 245,
	246, 247, 0, 249, 250, 251, 248, 1110, 252, 0,
	253, 254, 255, 1111, 256, 965, 257, 258, 1112, 1113,
	1115, 1114, 1116, 1117, 1118, 259, 260, 261, 262, 263,
	264, 494, 495, 1119, 265, 1120, 267, 266, 1121, 268,
	1122, 1123, 269, 270, 271, 1124, 272, 1125, 273, 274,
	1126, 275, 496, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 497, 498, 1127, 215, 1128, 0, 0, 0,
	0, 286, 287, 288, 499, 289, 290, 0, 291, 1129,
	292, 1130, 1131, 966, 293, 294, 1132, 295, 500, 1133,
	501, 296, 1134, 297, 298, 299, 300, 502, 503, 504,
	355, 968, 301, 302, 1135, 303, 304, 306, 0, 0,
	216, 305, 307, 314, 1136, 967, 308, 505, 310, 309,
	311, 312, 313, 506, 1137, 507, 1138, 315, 969, 508,
	970, 316, 317, 318, 971, 319, 320, 0, 0, 321,
	322, 323, 324, 325, 1139, 327, 326, 1140, 328, 509,
	972, 329, 330, 973, 1141, 331, 332, 1142, 1143, 333,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 974, 347, 348, 351, 352, 350,
	975, 349, 1144, 217, 976, 353, 1145, 510, 354, 511,
	356, 357, 1146, 358, 359, 360, 1147, 1148, 362, 363,
	364, 1149, 1150, 365, 366, 512, 977, 367, 978, 513,
	368, 361, 369, 370, 371, 372, 373, 374, 375, 1151,
	376, 377, 514, 378, 515, 379, 1152, 380, 0, 381,
	382, 383, 384, 385, 386, 387, 516, 388, 389, 1153,
	390, 391, 392, 393, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 1154, 403, 979, 404, 405, 406,
	407, 517, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 1155, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 429, 1156, 430, 410, 411, 431, 432, 980,
	433, 434, 518, 435, 436, 1157, 437, 438, 439, 440,
	412, 441, 445, 446, 442, 443, 444, 519, 1158, 448,
	449, 447, 1159, 450, 451, 452, 453, 454, 280, 455,
	1160, 456, 520, 521, 522, 523, 1161, 463, 1162, 457,
	458, 524, 459, 525, 1163, 460, 461, 462, 0, 464,
	465, 1164, 1165, 466, 467, 468, 470, 471, 469, 473,
	1166, 474, 1167, 472, 475, 476, 477, 526, 527, 528,
	1168, 479, 478, 529, 1169, 1170, 1171, 1172, 480, 481,
	530, 482, 483, 484, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2987,
	0, 218, 219, 220, 221, 222, 1095, 223, 1096, 1097,
	1098, 0, 1099, 485, 1100, 1101, 1102, 1103, 224, 226,
	225, 227, 228, 486, 487, 229, 488, 232, 230, 231,
	489, 1104, 233, 234, 235, 236, 237, 238, 239, 1105,
	1106, 240, 490, 491, 492, 1107, 241, 493, 1108, 1093,
	1109, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 1110, 252, 0, 253, 254, 255, 1111, 256,
	965, 257, 258, 1112, 1113, 1115, 1114, 1116, 1117, 1118,
	259, 260, 261, 262, 263, 264, 494, 495, 1119, 265,
	1120, 267, 266, 1121, 268, 1122, 1123, 269, 270, 271,
	1124, 272, 1125, 273, 274, 1126, 275, 496, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 497, 498, 1127,
	215, 1128, 0, 0, 0, 0, 286, 287, 288, 499,
	289, 290, 0, 291, 1129, 292, 1130, 1131, 966, 293,
	294, 1132, 295, 500, 1133, 501, 296, 1134, 297, 298,
	299, 300, 502, 503, 504, 355, 968, 301, 302, 1135,
	303, 304, 306, 0, 0, 216, 305, 307, 314, 1136,
	967, 308, 505, 310, 309, 311, 312, 313, 506, 1137,
	507, 1138, 315, 969, 508, 970, 316, 317, 318, 971,
	319, 320, 0, 0, 321, 322, 323, 324, 325, 1139,
	327, 326, 1140, 328, 509, 972, 329, 330, 973, 1141,
	331, 332, 1142, 1143, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 974,
	347, 348, 351, 352, 350, 975, 349, 1144, 217, 976,
	353, 1145, 510, 354, 511, 356, 357, 1146, 358, 359,
	360, 1147, 1148, 362, 363, 364, 1149, 1150, 365, 366,
	512, 977, 367, 978, 513, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 1151, 376, 377, 514, 378, 515,
	379, 1152, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 516, 388, 389, 1153, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 1154,
	403, 979, 404, 405, 406, 407, 517, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 1155, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 429, 1156, 430,
	410, 411, 431, 432, 980, 433, 434, 518, 435, 436,
	1157, 437, 438, 439, 440, 412, 441, 445, 446, 442,
	443, 444, 519, 1158, 448, 449, 447, 1159, 450, 451,
	452, 453, 454, 280, 455, 1160, 456, 520, 521, 522,
	523, 1161, 463, 1162, 457, 458, 524, 459, 525, 1163,
	460, 461, 462, 0, 464, 465, 1164, 1165, 466, 467,
	468, 470, 471, 469, 473, 1166, 474, 1167, 472, 475,
	476, 477, 526, 527, 528, 1168, 479, 478, 529, 1169,
	1170, 1171, 1172, 480, 481, 530, 482, 483, 484, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2838, 0, 218, 219, 220, 221,
	222, 1095, 223, 1096, 1097, 1098, 0, 1099, 485, 1100,
	1101, 1102, 1103, 224, 226, 225, 227, 228, 486, 487,
	229, 488, 232, 230, 231, 489, 1104, 233, 234, 235,
	236, 237, 238, 239, 1105, 1106, 240, 490, 491, 492,
	1107, 241, 493, 1108, 1093, 1109, 242, 243, 244, 245,
	246, 247, 0, 249, 250, 251, 248, 1110, 252, 0,
	253, 254, 255, 1111, 256, 965, 257, 258, 1112, 1113,
	1115, 1114, 1116, 1117, 1118, 259, 260, 261, 262, 263,
	264, 494, 495, 1119, 265, 1120, 267, 266, 1121, 268,
	1122, 1123, 269, 270, 271, 1124, 272, 1125, 273, 274,
	1126, 275, 496, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 497, 498, 1127, 215, 1128, 0, 0, 0,
	0, 286, 287, 288, 499, 289, 290, 0, 291, 1129,
	292, 1130, 1131, 966, 293, 294, 1132, 295, 500, 1133,
	501, 296, 1134, 297, 298, 299, 300, 502, 503, 504,
	355, 968, 301, 302, 1135, 303, 304, 306, 0, 0,
	216, 305, 307, 314, 1136, 967, 308, 505, 310, 309,
	311, 312, 313, 506, 1137, 507, 1138, 315, 969, 508,
	970, 316, 317, 318, 971, 319, 320, 0, 0, 321,
	322, 323, 324, 325, 1139, 327, 326, 1140, 328, 509,
	972, 329, 330, 973, 1141, 331, 332, 1142, 1143, 333,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 974, 347, 348, 351, 352, 350,
	975, 349, 1144, 217, 976, 353, 1145, 510, 354, 511,
	356, 357, 1146, 358, 359, 360, 1147, 1148, 362, 363,
	364, 1149, 1150, 365, 366, 512, 977, 367, 978, 513,
	368, 361, 369, 370, 371, 372, 373, 374, 375, 1151,
	376, 377, 514, 378, 515, 379, 1152, 380, 0, 381,
	382, 383, 384, 385, 386, 387, 516, 388, 389, 1153,
	390, 391, 392, 393, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 1154, 403, 979, 404, 405, 406,
	407, 517, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 1155, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 429, 1156, 430, 410, 411, 431, 432, 980,
	433, 434, 518, 435, 436, 1157, 437, 438, 439, 440,
	412, 441, 445, 446, 442, 443, 444, 519, 1158, 448,
	449, 447, 1159, 450, 451, 452, 453, 454, 280, 455,
	1160, 456, 520, 521, 522, 523, 1161, 463, 1162, 457,
	458, 524, 459, 525, 1163, 460, 461, 462, 0, 464,
	465, 1164, 1165, 466, 467, 468, 470, 471, 469, 473,
	1166, 474, 1167, 472, 475, 476, 477, 526, 527, 528,
	1168, 479, 478, 529, 1169, 1170, 1171, 1172, 480, 481,
	530, 482, 483, 484, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2140,
	0, 218, 219, 220, 221, 222, 1095, 223, 1096, 1097,
	1098, 0, 1099, 485, 1100, 1101, 1102, 1103, 224, 226,
	225, 227, 228, 486, 487, 229, 488, 232, 230, 231,
	489, 1104, 233, 234, 235, 236, 237, 238, 239, 1105,
	1106, 240, 490, 491, 492, 1107, 241, 493, 1108, 1093,
	1109, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 1110, 252, 0, 253, 254, 255, 1111, 256,
	965, 257, 258, 1112, 1113, 1115, 1114, 1116, 1117, 1118,
	259, 260, 261, 262, 263, 264, 494, 495, 1119, 265,
	1120, 267, 266, 1121, 268, 1122, 1123, 269, 270, 271,
	1124, 272, 1125, 273, 274, 1126, 275, 496, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 497, 498, 1127,
	215, 1128, 0, 0, 0, 0, 286, 287, 288, 499,
	289, 290, 0, 291, 1129, 292, 1130, 1131, 966, 293,
	294, 1132, 295, 500, 1133, 501, 296, 1134, 297, 298,
	299, 300, 502, 503, 504, 355, 968, 301, 302, 1135,
	303, 304, 306, 0, 0, 216, 305, 307, 314, 1136,
	967, 308, 505, 310, 309, 311, 312, 313, 506, 1137,
	507, 1138, 315, 969, 508, 970, 316, 317, 318, 971,
	319, 320, 0, 0, 321, 322, 323, 324, 325, 1139,
	327, 326, 1140, 328, 509, 972, 329, 330, 973, 1141,
	331, 332, 1142, 1143, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 974,
	347, 348, 351, 352, 350, 975, 349, 1144, 217, 976,
	353, 1145, 510, 354, 511, 356, 357, 1146, 358, 359,
	360, 1147, 1148, 362, 363, 364, 1149, 1150, 365, 366,
	512, 977, 367, 978, 513, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 1151, 376, 377, 514, 378, 515,
	379, 1152, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 516, 388, 389, 1153, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 1154,
	403, 979, 404, 405, 406, 407, 517, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 1155, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 429, 1156, 430,
	410, 411, 431, 432, 980, 433, 434, 518, 435, 436,
	1157, 437, 438, 439, 440, 412, 441, 445, 446, 442,
	443, 444, 519, 1158, 448, 449, 447, 1159, 450, 451,
	452, 453, 454, 280, 455, 1160, 456, 520, 521, 522,
	523, 1161, 463, 1162, 457, 458, 524, 459, 525, 1163,
	460, 461, 462, 0, 464, 465, 1164, 1165, 466, 467,
	468, 470, 471, 469, 473, 1166, 474, 1167, 472, 475,
	476, 477, 526, 527, 528, 1168, 479, 478, 529, 1169,
	1170, 1171, 1172, 480, 481, 530, 482, 483, 484, 1185,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1836, 0, 0, 0, 218, 219,
	220, 221, 222, 1095, 223, 1096, 1097, 1098, 0, 1099,
	485, 1100, 1101, 1102, 1103, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 1104, 233,
	234, 235, 236, 237, 238, 239, 1105, 1106, 240, 490,
	491, 492, 1107, 241, 493, 1108, 1093, 1109, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 1110,
	252, 0, 253, 254, 255, 1111, 256, 965, 257, 258,
	1112, 1113, 1115, 1114, 1116, 1117, 1118, 259, 260, 261,
	262, 263, 264, 494, 495, 1119, 265, 1120, 267, 266,
	1121, 268, 1122, 1123, 269, 270, 271, 1124, 272, 1125,
	273, 274, 1126, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 1127, 215, 1128, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 1129, 292, 1130, 1131, 966, 293, 294, 1132, 295,
	500, 1133, 501, 296, 1134, 297, 298, 299, 300, 502,
	503, 504, 355, 968, 301, 302, 1135, 303, 304, 306,
	0, 0, 216, 305, 307, 314, 1136, 967, 308, 505,
	310, 309, 311, 312, 313, 506, 1137, 507, 1138, 315,
	969, 508, 970, 316, 317, 318, 971, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 1139, 327, 326, 1140,
	328, 509, 972, 329, 330, 973, 1141, 331, 332, 1142,
	1143, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 974, 347, 348, 351,
	352, 350, 975, 349, 1144, 217, 976, 353, 1145, 510,
	354, 511, 356, 357, 1146, 358, 359, 360, 1147, 1148,
	362, 363, 364, 1149, 1150, 365, 366, 512, 977, 367,
	978, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 1151, 376, 377, 514, 378, 515, 379, 1152, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 1153, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 1154, 403, 979, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 1155, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 1156, 430, 410, 411, 431,
	432, 980, 433, 434, 518, 435, 436, 1157, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	1158, 448, 449, 447, 1159, 450, 451, 452, 453, 454,
	280, 455, 1160, 456, 520, 521, 522, 523, 1161, 463,
	1162, 457, 458, 524, 459, 525, 1163, 460, 461, 462,
	0, 464, 465, 1164, 1165, 466, 467, 468, 470, 471,
	469, 473, 1166, 474, 1167, 472, 475, 476, 477, 526,
	527, 528, 1168, 479, 478, 529, 1169, 1170, 1171, 1172,
	480, 481, 530, 482, 483, 484, 1085, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	1095, 223, 1096, 1097, 1098, 0, 1099, 485, 1100, 1101,
	1102, 1103, 224, 226, 225, 227, 228, 486, 487, 229,
	488, 232, 230, 231, 489, 1104, 233, 234, 235, 236,
	237, 238, 239, 1105, 1106, 240, 490, 491, 492, 1107,
	241, 493, 1108, 1093, 1109, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 1110, 252, 0, 253,
	254, 255, 1111, 256, 965, 257, 258, 1112, 1113, 1115,
	1114, 1116, 1117, 1118, 259, 260, 261, 262, 263, 264,
	494, 495, 1119, 265, 1120, 267, 266, 1121, 268, 1122,
	1123, 269, 270, 271, 1124, 272, 1125, 273, 274, 1126,
	275, 496, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 497, 498, 1127, 215, 1128, 0, 0, 0, 0,
	286, 287, 288, 499, 289, 290, 0, 291, 1129, 292,
	1130, 1131, 966, 293, 294, 1132, 295, 500, 1133, 501,
	296, 1134, 297, 298, 299, 300, 502, 503, 504, 355,
	968, 301, 302, 1135, 303, 304, 306, 0, 0, 216,
	305, 307, 314, 1136, 967, 308, 505, 310, 309, 311,
	312, 313, 506, 1137, 507, 1138, 315, 969, 508, 970,
	316, 317, 318, 971, 319, 320, 0, 0, 321, 322,
	323, 324, 325, 1139, 327, 326, 1140, 328, 509, 972,
	329, 330, 973, 1141, 331, 332, 1142, 1143, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 1144, 217, 976, 353, 1145, 510, 354, 511, 356,
	357, 1146, 358, 359, 360, 1147, 1148, 362, 363, 364,
	1149, 1150, 365, 366, 512, 977, 367, 978, 513, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 1151, 376,
	377, 514, 378, 515, 379, 1152, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 516, 388, 389, 1153, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 1154, 403, 979, 404, 405, 406, 407,
	517, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 1155, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 429, 1156, 430, 410, 411, 431, 432, 980, 433,
	434, 518, 435, 436, 1157, 437, 438, 439, 440, 412,
	441, 445, 446, 442, 443, 444, 519, 1158, 448, 449,
	447, 1159, 450, 451, 452, 453, 454, 280, 455, 1160,
	456, 520, 521, 522, 523, 1161, 463, 1162, 457, 458,
	524, 459, 525, 1163, 460, 461, 462, 0, 464, 465,
	1164, 1165, 466, 467, 468, 470, 471, 469, 473, 1166,
	474, 1167, 472, 475, 476, 477, 526, 527, 528, 1168,
	479, 478, 529, 1169, 1170, 1171, 1172, 480, 481, 530,
	482, 483, 484, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 1095, 223, 1096, 1097, 1098,
	0, 1099, 485, 1100, 1101, 1102, 1103, 224, 226, 225,
	227, 228, 486, 487, 229, 488, 232, 230, 231, 489,
	1104, 233, 234, 235, 236, 237, 238, 239, 1105, 1106,
	240, 490, 491, 492, 1107, 241, 493, 1108, 1093, 1109,
	242, 243, 244, 245, 246, 247, 0, 249, 250, 251,
	248, 1110, 252, 0, 253, 254, 255, 1111, 256, 965,
	257, 258, 1112, 1113, 1115, 1114, 1116, 1117, 1118, 259,
	260, 261, 262, 263, 264, 494, 495, 1119, 265, 1120,
	267, 266, 1121, 268, 1122, 1123, 269, 270, 271, 1124,
	272, 1125, 273, 274, 1126, 275, 496, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 497, 498, 1127, 215,
	1128, 0, 0, 0, 0, 286, 287, 288, 499, 289,
	290, 0, 291, 1129, 292, 1130, 1131, 966, 293, 294,
	1132, 295, 500, 1133, 501, 296, 1134, 297, 298, 299,
	300, 502, 503, 504, 355, 968, 301, 302, 1135, 303,
	304, 306, 0, 0, 216, 305, 307, 314, 1136, 967,
	308, 505, 310, 309, 311, 312, 313, 506, 1137, 507,
	1138, 315, 969, 508, 970, 316, 317, 318, 971, 319,
	320, 0, 0, 321, 322, 323, 324, 325, 1139, 327,
	326, 1140, 328, 509, 972, 329, 330, 973, 1141, 331,
	332, 1142, 1143, 333, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 974, 347,
	348, 351, 352, 350, 975, 349, 1144, 217, 976, 353,
	1145, 510, 354, 511, 356, 357, 1146, 358, 359, 360,
	1147, 1148, 362, 363, 364, 1149, 1150, 365, 366, 512,
	977, 367, 978, 513, 368, 361, 369, 370, 371, 372,
	373, 374, 375, 1151, 376, 377, 514, 378, 515, 379,
	1152, 380, 0, 381, 382, 383, 384, 385, 386, 387,
	516, 388, 389, 1153, 390, 391, 392, 393, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 1154, 403,
	979, 404, 405, 406, 407, 517, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 1155, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 429, 1156, 430, 410,
	411, 431, 432, 980, 433, 434, 518, 435, 436, 1157,
	437, 438, 439, 440, 412, 441, 445, 446, 442, 443,
	444, 519, 1158, 448, 449, 447, 1159, 450, 451, 452,
	453, 454, 280, 455, 1160, 456, 520, 521, 522, 523,
	1161, 463, 1162, 457, 458, 524, 459, 525, 1163, 460,
	461, 462, 0, 464, 465, 1164, 1165, 466, 467, 468,
	470, 471, 469, 473, 1166, 474, 1167, 472, 475, 476,
	477, 526, 527, 528, 1168, 479, 478, 529, 1169, 1170,
	1171, 1172, 480, 481, 530, 482, 483, 484, 2115, 0,
	905, 863, 864, 865, 861, 862, 874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 2112, 223, 0, 0, 0, 0, 0, 956,
	879, 0, 0, 0, 224, 226, 225, 227, 228, 486,
	920, 899, 931, 232, 889, 930, 929, 0, 233, 234,
	891, 890, 237, 238, 239, 881, 955, 240, 992, 993,
	492, 0, 241, 962, 0, 943, 0, 242, 243, 244,
	245, 246, 247, 0, 249, 250, 251, 248, 0, 252,
	0, 253, 254, 255, 0, 256, 965, 257, 258, 946,
	944, 945, 952, 948, 947, 951, 259, 260, 261, 262,
	934, 264, 927, 926, 852, 265, 0, 267, 266, 0,
	268, 2113, 0, 269, 925, 271, 0, 272, 0, 273,
	274, 0, 275, 858, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 983, 984, 870, 215, 0, 0, 0,
	0, 0, 286, 287, 288, 924, 922, 923, 0, 291,
	0, 292, 0, 0, 966, 293, 294, 0, 295, 990,
	0, 880, 296, 0, 297, 298, 299, 300, 957, 958,
	961, 355, 968, 301, 302, 0, 303, 304, 901, 0,
	0, 216, 305, 307, 314, 0, 967, 308, 913, 904,
	915, 917, 918, 919, 914, 0, 906, 0, 315, 969,
	959, 970, 316, 317, 318, 971, 939, 940, 0, 0,
	321, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	991, 972, 329, 330, 973, 0, 331, 332, 950, 949,
	333, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 893, 344, 974, 347, 348, 351, 352,
	350, 975, 349, 849, 217, 976, 353, 871, 960, 354,
	928, 356, 357, 0, 902, 359, 903, 0, 0, 362,
	363, 364, 0, 0, 365, 366, 512, 977, 367, 978,
	985, 368, 361, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 377, 986, 378, 515, 379, 0, 380, 0,
	381, 382, 383, 384, 385, 386, 387, 921, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 979, 404, 405,
	406, 407, 859, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 894, 895, 897, 898,
	421, 427, 428, 429, 953, 430, 410, 411, 431, 432,
	980, 433, 434, 916, 896, 436, 0, 437, 438, 439,
	440, 412, 441, 445, 964, 442, 443, 444, 987, 0,
	448, 449, 447, 0, 450, 451, 452, 453, 454, 280,
	892, 0, 456, 935, 936, 937, 938, 0, 463, 0,
	457, 458, 988, 459, 989, 869, 460, 461, 462, 0,
	464, 465, 0, 853, 466, 467, 468, 470, 471, 469,
	473, 954, 474, 0, 900, 475, 476, 477, 526, 932,
	982, 2111, 479, 478, 529, 0, 0, 0, 0, 480,
	481, 530, 482, 483, 484, 850, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 846, 847,
	2114, 0, 0, 0, 0, 0, 0, 875, 2110, 0,
	839, 873, 905, 863, 864, 865, 861, 862, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 920, 899, 931, 232, 889, 930, 929, 0,
	233, 234, 891, 890, 237, 238, 239, 881, 955, 240,
	992, 993, 492, 0, 241, 962, 0, 943, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 965, 257,
	258, 946, 944, 945, 952, 948, 947, 951, 259, 260,
	261, 262, 934, 264, 927, 926, 852, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 925, 271, 0, 272,
	0, 273, 274, 0, 275, 858, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 983, 984, 870, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 924, 922, 923,
	0, 291, 0, 292, 0, 0, 966, 293, 294, 0,
	295, 990, 0, 880, 296, 0, 297, 298, 299, 300,
	957, 958, 961, 355, 968, 301, 302, 0, 303, 304,
	901, 0, 0, 216, 305, 307, 314, 0, 967, 308,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	315, 969, 959, 970, 316, 317, 318, 971, 939, 940,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 991, 972, 329, 330, 973, 0, 331, 332,
	950, 949, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 893, 344, 974, 347, 348,
	351, 352, 350, 975, 349, 849, 217, 976, 353, 871,
	960, 354, 928, 356, 357, 0, 902, 359, 903, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 977,
	367, 978, 985, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 986, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 921,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 979,
	404, 405, 406, 407, 859, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 181, 425, 426, 894, 895,
	897, 898, 421, 427, 428, 429, 953, 430, 410, 411,
	431, 432, 980, 433, 434, 916, 896, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 964, 442, 443, 444,
	987, 0, 448, 449, 447, 183, 450, 451, 452, 453,
	454, 280, 892, 0, 456, 935, 936, 937, 938, 0,
	463, 0, 457, 458, 988, 459, 989, 869, 460, 461,
	462, 0, 464, 465, 0, 853, 466, 467, 468, 470,
	471, 469, 473, 954, 474, 0, 900, 475, 476, 477,
	1337, 932, 982, 0, 479, 478, 529, 0, 0, 0,
	175, 480, 481, 530, 482, 483, 484, 850, 176, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	846, 847, 905, 863, 864, 865, 861, 862, 874, 1548,
	1546, 0, 0, 873, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 920, 899, 931, 232, 889, 930, 929, 0,
	233, 234, 891, 890, 237, 238, 239, 881, 955, 240,
	992, 993, 492, 0, 241, 962, 0, 943, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 965, 257,
	258, 946, 944, 945, 952, 948, 947, 951, 259, 260,
	261, 262, 934, 264, 927, 926, 852, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 925, 271, 0, 272,
	0, 273, 274, 0, 275, 858, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 983, 984, 870, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 924, 922, 923,
	0, 291, 0, 292, 0, 0, 966, 293, 294, 0,
	295, 990, 0, 880, 296, 0, 297, 298, 299, 300,
	957, 958, 961, 355, 968, 301, 302, 0, 303, 304,
	901, 0, 0, 216, 305, 307, 314, 0, 967, 308,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	315, 969, 959, 970, 316, 317, 318, 971, 939, 940,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 991, 972, 329, 330, 973, 0, 331, 332,
	950, 949, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 893, 344, 974, 347, 348,
	351, 352, 350, 975, 349, 849, 217, 976, 353, 871,
	960, 354, 928, 356, 357, 0, 902, 359, 903, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 977,
	367, 978, 985, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 986, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 921,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 979,
	404, 405, 406, 407, 859, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 181, 425, 426, 894, 895,
	897, 898, 421, 427, 428, 429, 953, 430, 410, 411,
	431, 432, 980, 433, 434, 916, 896, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 964, 442, 443, 444,
	987, 0, 448, 449, 447, 183, 450, 451, 452, 453,
	454, 280, 892, 0, 456, 935, 936, 937, 938, 0,
	463, 0, 457, 458, 988, 459, 989, 869, 460, 461,
	462, 0, 464, 465, 0, 853, 466, 467, 468, 470,
	471, 469, 473, 954, 474, 0, 900, 475, 476, 477,
	1337, 932, 982, 0, 479, 478, 529, 0, 0, 0,
	175, 480, 481, 530, 482, 483, 484, 850, 176, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	846, 847, 905, 863, 864, 865, 861, 862, 874, 1548,
	2585, 0, 0, 873, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 920, 899, 931, 232, 889, 930, 929, 0,
	233, 234, 891, 890, 237, 238, 239, 881, 955, 240,
	992, 993, 492, 0, 241, 962, 0, 943, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 965, 257,
	258, 946, 944, 945, 952, 948, 947, 951, 259, 260,
	261, 262, 934, 264, 927, 926, 852, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 925, 271, 0, 272,
	0, 273, 274, 0, 275, 858, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 983, 984, 870, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 924, 922, 923,
	0, 291, 0, 292, 0, 0, 966, 293, 294, 0,
	295, 990, 0, 880, 296, 0, 297, 298, 299, 300,
	957, 958, 961, 355, 968, 301, 302, 0, 303, 304,
	901, 0, 0, 216, 305, 307, 314, 0, 967, 308,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	315, 969, 959, 970, 316, 317, 318, 971, 939, 940,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 991, 972, 329, 330, 973, 0, 331, 332,
	950, 949, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 893, 344, 974, 347, 348,
	351, 352, 350, 975, 349, 849, 217, 976, 353, 871,
	960, 354, 928, 356, 357, 0, 902, 359, 903, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 977,
	367, 978, 985, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 986, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 921,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 979,
	404, 405, 406, 407, 859, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 181, 425, 426, 894, 895,
	897, 898, 421, 427, 428, 429, 953, 430, 410, 411,
	431, 432, 980, 433, 434, 916, 896, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 964, 442, 443, 444,
	987, 0, 448, 449, 447, 183, 450, 451, 452, 453,
	454, 280, 892, 0, 456, 935, 936, 937, 938, 0,
	463, 0, 457, 458, 988, 459, 989, 869, 460, 461,
	462, 0, 464, 465, 0, 853, 466, 467, 468, 470,
	471, 469, 473, 954, 474, 0, 900, 475, 476, 477,
	1337, 932, 982, 0, 479, 478, 529, 0, 0, 0,
	175, 480, 481, 530, 482, 483, 484, 850, 176, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	846, 847, 905, 863, 864, 865, 861, 862, 874, 1548,
	1546, 0, 0, 873, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 920, 899, 931, 232, 889, 930, 929, 2209,
	233, 234, 891, 890, 237, 238, 239, 881, 955, 240,
	992, 993, 492, 0, 241, 962, 0, 943, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 965, 257,
	258, 946, 944, 945, 952, 948, 947, 951, 259, 260,
	261, 262, 934, 264, 927, 926, 852, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 925, 271, 0, 272,
	0, 273, 274, 0, 275, 858, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 983, 984, 870, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 924, 922, 923,
	0, 291, 0, 292, 0, 2214, 966, 293, 294, 0,
	295, 990, 0, 880, 296, 0, 297, 298, 299, 300,
	957, 958, 961, 355, 968, 301, 302, 0, 303, 304,
	901, 0, 0, 216, 305, 307, 314, 0, 967, 308,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	315, 969, 959, 970, 316, 317, 318, 971, 939, 940,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	2210, 328, 991, 972, 329, 330, 973, 0, 331, 332,
	950, 949, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 893, 344, 974, 347, 348,
	351, 352, 350, 975, 349, 849, 217, 976, 353, 871,
	960, 354, 928, 356, 357, 0, 902, 359, 903, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 977,
	367, 978, 985, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 986, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 921,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 979,
	404, 405, 406, 407, 859, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 894, 895,
	897, 898, 421, 427, 428, 429, 953, 430, 410, 411,
	431, 432, 980, 433, 434, 916, 896, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 964, 442, 443, 444,
	987, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 892, 0, 456, 935, 936, 937, 938, 0,
	463, 2211, 457, 458, 988, 459, 989, 869, 460, 461,
	462, 0, 464, 465, 0, 853, 466, 467, 468, 470,
	471, 469, 473, 954, 474, 0, 900, 475, 476, 477,
	526, 932, 982, 0, 479, 478, 529, 0, 0, 0,
	0, 480, 481, 530, 482, 483, 484, 850, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	846, 847, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 2168, 873, 905, 863, 864, 865, 861, 862,
	874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 224, 226,
	225, 227, 228, 486, 920, 899, 931, 232, 889, 930,
	929, 0, 233, 234, 891, 890, 237, 238, 239, 881,
	955, 240, 992, 993, 492, 0, 241, 962, 0, 943,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 254, 255, 0, 256,
	965, 257, 258, 946, 944, 945, 952, 948, 947, 951,
	259, 260, 261, 262, 934, 264, 927, 926, 852, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 925, 271,
	0, 272, 0, 273, 274, 0, 275, 858, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 983, 984, 870,
	215, 0, 0, 0, 0, 0, 286, 287, 288, 924,
	922, 923, 0, 291, 0, 292, 0, 0, 966, 293,
	294, 0, 295, 990, 0, 880, 296, 0, 297, 298,
	299, 300, 957, 958, 961, 355, 968, 301, 302, 0,
	303, 304, 901, 0, 0, 216, 305, 307, 314, 0,
	967, 308, 913, 904, 915, 917, 918, 919, 914, 0,
	906, 0, 315, 969, 959, 970, 316, 317, 318, 971,
	939, 940, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 991, 972, 329, 330, 973, 0,
	331, 332, 950, 949, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 352, 350, 975, 349, 849, 217, 976,
	353, 871, 960, 354, 928, 356, 357, 0, 902, 359,
	903, 0, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 977, 367, 978, 985, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 986, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 921, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 979, 404, 405, 406, 407, 859, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	894, 895, 897, 898, 421, 427, 428, 429, 953, 430,
	410, 411, 431, 432, 980, 433, 434, 916, 896, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 964, 442,
	443, 444, 987, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 892, 0, 456, 935, 936, 937,
	938, 0, 463, 0, 457, 458, 988, 459, 989, 869,
	460, 461, 462, 0, 464, 465, 0, 853, 466, 467,
	468, 470, 471, 469, 473, 954, 474, 0, 900, 475,
	476, 477, 526, 932, 982, 0, 479, 478, 529, 0,
	0, 0, 0, 480, 481, 530, 482, 483, 484, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 0, 0, 0, 0, 0, 0,
	0, 875, 2166, 0, 2165, 873, 905, 863, 864, 865,
	861, 862, 874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 920, 899, 931, 232,
	889, 930, 929, 0, 233, 234, 891, 890, 237, 238,
	239, 881, 955, 240, 992, 993, 492, 0, 241, 962,
	0, 943, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 965, 257, 258, 946, 944, 945, 952, 948,
	947, 951, 259, 260, 261, 262, 934, 264, 927, 926,
	852, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	925, 271, 0, 272, 0, 273, 274, 0, 275, 858,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 983,
	984, 870, 215, 0, 0, 0, 0, 0, 286, 287,
	288, 924, 922, 923, 0, 291, 0, 292, 0, 0,
	966, 293, 294, 0, 295, 990, 0, 880, 296, 0,
	297, 298, 299, 300, 957, 958, 961, 355, 968, 301,
	302, 0, 303, 304, 901, 0, 0, 216, 305, 307,
	314, 0, 967, 308, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 315, 969, 959, 970, 316, 317,
	318, 971, 939, 940, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 991, 972, 329, 330,
	973, 0, 331, 332, 950, 949, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 352, 350, 975, 349, 849,
	217, 976, 353, 871, 960, 354, 928, 356, 357, 0,
	902, 359, 903, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 977, 367, 978, 985, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 986,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 921, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 979, 404, 405, 406, 407, 859, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 894, 895, 897, 898, 421, 427, 428, 429,
	953, 430, 410, 411, 431, 432, 980, 433, 434, 916,
	896, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	964, 442, 443, 444, 987, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 892, 0, 456, 935,
	936, 937, 938, 0, 463, 0, 457, 458, 988, 459,
	989, 869, 460, 461, 462, 0, 464, 465, 0, 853,
	466, 467, 468, 470, 471, 469, 473, 954, 474, 0,
	900, 475, 476, 477, 526, 932, 982, 0, 479, 478,
	529, 0, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 850, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 846, 847, 0, 0, 0, 0,
	0, 0, 0, 875, 2163, 0, 2162, 873, 905, 863,
	864, 865, 861, 862, 874, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 258, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 264,
	927, 926, 852, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 849, 217, 976, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	859, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 464, 465,
	0, 853, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 0, 0,
	0, 0, 0, 0, 0, 875, 2160, 0, 2159, 873,
	905, 863, 864, 865, 861, 862, 874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 956,
	879, 0, 0, 0, 224, 226, 225, 227, 228, 486,
	920, 899, 931, 232, 889, 930, 929, 0, 233, 234,
	891, 890, 237, 238, 239, 881, 955, 240, 992, 993,
	492, 0, 241, 962, 0, 943, 0, 242, 243, 244,
	245, 246, 247, 0, 249, 250, 251, 248, 0, 252,
	0, 253, 254, 255, 0, 256, 965, 257, 258, 946,
	944, 945, 952, 948, 947, 951, 259, 260, 261, 262,
	934, 264, 927, 926, 852, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 925, 271, 0, 272, 0, 273,
	274, 0, 275, 858, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 983, 984, 870, 215, 0, 0, 0,
	0, 0, 286, 287, 288, 924, 922, 923, 0, 291,
	0, 292, 0, 0, 966, 293, 294, 0, 295, 990,
	0, 880, 296, 0, 297, 298, 299, 300, 957, 958,
	961, 355, 968, 301, 302, 0, 303, 304, 901, 0,
	0, 216, 305, 307, 314, 0, 967, 308, 913, 904,
	915, 917, 918, 919, 914, 0, 906, 0, 315, 969,
	959, 970, 316, 317, 318, 971, 939, 940, 0, 0,
	321, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	991, 972, 329, 330, 973, 0, 331, 332, 950, 949,
	333, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 893, 344, 974, 347, 348, 351, 352,
	350, 975, 349, 849, 217, 976, 353, 871, 960, 354,
	928, 356, 357, 0, 902, 359, 903, 0, 0, 362,
	363, 364, 0, 0, 365, 366, 512, 977, 367, 978,
	985, 368, 361, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 377, 986, 378, 515, 379, 0, 380, 0,
	381, 382, 383, 384, 385, 386, 387, 921, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 979, 404, 405,
	406, 407, 859, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 894, 895, 897, 898,
	421, 427, 428, 429, 953, 430, 410, 411, 431, 432,
	980, 433, 434, 916, 896, 436, 0, 437, 438, 439,
	440, 412, 441, 445, 964, 442, 443, 444, 987, 0,
	448, 449, 447, 0, 450, 451, 452, 453, 454, 280,
	892, 0, 456, 935, 936, 937, 938, 0, 463, 0,
	457, 458, 988, 459, 989, 869, 460, 461, 462, 0,
	464, 465, 0, 853, 466, 467, 468, 470, 471, 469,
	473, 954, 474, 0, 900, 475, 476, 477, 526, 932,
	982, 0, 479, 478, 529, 0, 0, 0, 0, 480,
	481, 530, 482, 483, 484, 850, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 846, 847,
	0, 0, 0, 0, 0, 0, 0, 875, 2157, 0,
	1407, 873, 905, 863, 864, 865, 861, 862, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 920, 899, 931, 232, 889, 930, 929, 0,
	233, 234, 891, 890, 237, 238, 239, 881, 955, 240,
	992, 993, 492, 0, 241, 962, 0, 943, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 965, 257,
	258, 946, 944, 945, 952, 948, 947, 951, 259, 260,
	261, 262, 934, 264, 927, 926, 852, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 925, 271, 0, 272,
	0, 273, 274, 0, 275, 858, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 983, 984, 870, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 924, 922, 923,
	0, 291, 0, 292, 0, 0, 966, 293, 294, 0,
	295, 990, 0, 880, 296, 0, 297, 298, 299, 300,
	957, 958, 961, 355, 968, 301, 302, 0, 303, 304,
	901, 0, 0, 216, 305, 307, 314, 0, 967, 308,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	315, 969, 959, 970, 316, 317, 318, 971, 939, 940,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 991, 972, 329, 330, 973, 0, 331, 332,
	950, 949, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 893, 344, 974, 347, 348,
	351, 352, 350, 975, 349, 849, 217, 976, 353, 871,
	960, 354, 928, 356, 357, 0, 902, 359, 903, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 977,
	367, 978, 985, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 986, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 921,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 979,
	404, 405, 406, 407, 859, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 894, 895,
	897, 898, 421, 427, 428, 429, 953, 430, 410, 411,
	431, 432, 980, 433, 434, 916, 896, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 964, 442, 443, 444,
	987, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 892, 0, 456, 935, 936, 937, 938, 0,
	463, 0, 457, 458, 988, 459, 989, 869, 460, 461,
	462, 0, 464, 465, 0, 853, 466, 467, 468, 470,
	471, 469, 473, 954, 474, 0, 900, 475, 476, 477,
	526, 932, 982, 0, 479, 478, 529, 1406, 0, 0,
	0, 480, 481, 530, 482, 483, 484, 850, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	846, 847, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 842, 873, 905, 863, 864, 865, 861, 862,
	874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 224, 226,
	225, 227, 228, 486, 920, 899, 931, 232, 889, 930,
	929, 0, 233, 234, 891, 890, 237, 238, 239, 881,
	955, 240, 992, 993, 492, 0, 241, 962, 0, 943,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 254, 255, 0, 256,
	965, 257, 258, 946, 944, 945, 952, 948, 947, 951,
	259, 260, 261, 262, 934, 264, 927, 926, 852, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 925, 271,
	0, 272, 0, 273, 274, 0, 275, 858, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 983, 984, 870,
	215, 0, 0, 0, 0, 0, 286, 287, 288, 924,
	922, 923, 0, 291, 0, 292, 0, 0, 966, 293,
	294, 0, 295, 990, 0, 880, 296, 0, 297, 298,
	299, 300, 957, 958, 961, 355, 968, 301, 302, 0,
	303, 304, 901, 0, 0, 216, 305, 307, 314, 0,
	967, 308, 913, 904, 915, 917, 918, 919, 914, 0,
	906, 0, 315, 969, 959, 970, 316, 317, 318, 971,
	939, 940, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 991, 972, 329, 330, 973, 0,
	331, 332, 950, 949, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 352, 350, 975, 349, 849, 217, 976,
	353, 871, 960, 354, 928, 356, 357, 0, 902, 359,
	903, 854, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 977, 367, 978, 985, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 986, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 921, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 979, 404, 405, 406, 407, 859, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	894, 895, 897, 898, 421, 427, 428, 429, 953, 430,
	410, 411, 431, 432, 980, 433, 434, 916, 896, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 964, 442,
	443, 444, 987, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 892, 0, 456, 935, 936, 937,
	938, 0, 463, 0, 457, 458, 988, 459, 989, 869,
	460, 461, 462, 0, 464, 465, 0, 853, 466, 467,
	468, 470, 471, 469, 473, 954, 474, 0, 900, 475,
	476, 477, 526, 932, 982, 0, 479, 478, 529, 0,
	0, 0, 0, 480, 481, 530, 482, 483, 484, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 905, 863, 864, 865, 861, 862,
	874, 875, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 224, 226,
	225, 227, 228, 486, 920, 899, 931, 232, 889, 930,
	929, 0, 233, 234, 891, 890, 237, 238, 239, 881,
	955, 240, 992, 993, 492, 0, 241, 962, 0, 943,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 3610, 255, 0, 256,
	965, 257, 258, 946, 944, 945, 952, 948, 947, 951,
	259, 260, 261, 262, 934, 264, 927, 926, 852, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 925, 271,
	0, 272, 0, 273, 274, 0, 275, 858, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 983, 984, 870,
	215, 0, 0, 0, 0, 0, 286, 287, 288, 924,
	922, 923, 0, 291, 0, 292, 0, 0, 966, 293,
	294, 0, 295, 990, 0, 880, 296, 0, 297, 298,
	299, 300, 957, 958, 961, 355, 968, 301, 302, 0,
	303, 304, 901, 0, 0, 216, 305, 307, 314, 0,
	967, 308, 913, 904, 915, 917, 918, 919, 914, 0,
	906, 0, 315, 969, 959, 970, 316, 317, 318, 971,
	939, 940, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 991, 972, 329, 330, 973, 0,
	331, 332, 950, 949, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 352, 350, 975, 349, 849, 217, 976,
	353, 871, 960, 354, 928, 356, 357, 0, 902, 359,
	903, 854, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 977, 367, 978, 985, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 986, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 921, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 979, 404, 405, 406, 407, 859, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	894, 895, 897, 898, 421, 427, 428, 429, 953, 430,
	410, 411, 431, 432, 980, 433, 434, 916, 896, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 964, 442,
	443, 444, 987, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 892, 0, 456, 935, 936, 937,
	938, 0, 463, 0, 457, 458, 988, 459, 989, 869,
	460, 461, 462, 0, 464, 465, 0, 853, 466, 467,
	468, 470, 471, 469, 473, 954, 474, 0, 900, 475,
	476, 477, 526, 932, 982, 0, 479, 478, 529, 0,
	0, 0, 0, 480, 481, 530, 482, 483, 484, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 905, 863, 864, 865, 861, 862,
	874, 875, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 224, 226,
	225, 227, 228, 486, 920, 899, 931, 232, 889, 930,
	929, 0, 233, 234, 891, 890, 237, 238, 239, 881,
	955, 240, 992, 993, 492, 0, 241, 962, 0, 943,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 3446, 255, 0, 256,
	965, 257, 258, 946, 944, 945, 952, 948, 947, 951,
	259, 260, 261, 262, 934, 264, 927, 926, 852, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 925, 271,
	0, 272, 0, 273, 274, 0, 275, 858, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 983, 984, 870,
	215, 0, 0, 0, 0, 0, 286, 287, 288, 924,
	922, 923, 0, 291, 0, 292, 0, 0, 966, 293,
	294, 0, 295, 990, 0, 880, 296, 0, 297, 298,
	299, 300, 957, 958, 961, 355, 968, 301, 302, 0,
	303, 304, 901, 0, 0, 216, 305, 307, 314, 0,
	967, 308, 913, 904, 915, 917, 918, 919, 914, 0,
	906, 0, 315, 969, 959, 970, 316, 317, 318, 971,
	939, 940, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 991, 972, 329, 330, 973, 0,
	331, 332, 950, 949, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 352, 350, 975, 349, 849, 217, 976,
	353, 871, 960, 354, 928, 356, 357, 0, 902, 359,
	903, 854, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 977, 367, 978, 985, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 986, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 921, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 979, 404, 405, 406, 407, 859, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	894, 895, 897, 898, 421, 427, 428, 429, 953, 430,
	410, 411, 431, 432, 980, 433, 434, 916, 896, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 964, 442,
	443, 444, 987, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 892, 0, 456, 935, 936, 937,
	938, 0, 463, 0, 457, 458, 988, 459, 989, 869,
	460, 461, 462, 0, 464, 465, 0, 853, 466, 467,
	468, 470, 471, 469, 473, 954, 474, 0, 900, 475,
	476, 477, 526, 932, 982, 0, 479, 478, 529, 0,
	0, 0, 0, 480, 481, 530, 482, 483, 484, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 905, 863, 864, 865, 861, 862,
	874, 875, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 224, 226,
	225, 227, 228, 486, 920, 899, 931, 232, 889, 930,
	929, 0, 233, 234, 891, 890, 237, 238, 239, 881,
	955, 240, 992, 993, 492, 0, 241, 962, 0, 943,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 254, 255, 0, 256,
	965, 257, 258, 946, 944, 945, 952, 948, 947, 951,
	259, 260, 261, 262, 934, 264, 927, 926, 852, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 925, 271,
	0, 272, 0, 273, 274, 0, 275, 858, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 983, 984, 870,
	215, 0, 0, 0, 0, 0, 286, 287, 288, 924,
	922, 923, 0, 291, 0, 292, 0, 0, 966, 293,
	294, 0, 295, 990, 0, 880, 296, 0, 297, 298,
	299, 300, 957, 958, 961, 355, 968, 301, 302, 0,
	303, 304, 901, 0, 0, 216, 305, 307, 314, 0,
	967, 308, 913, 904, 915, 917, 918, 919, 914, 0,
	906, 0, 315, 969, 959, 970, 316, 317, 318, 971,
	939, 940, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 991, 972, 329, 330, 973, 0,
	331, 332, 950, 949, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 352, 350, 975, 349, 849, 3164, 976,
	353, 871, 960, 354, 928, 356, 357, 0, 902, 359,
	903, 0, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 977, 367, 978, 985, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 986, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 921, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 979, 404, 405, 406, 407, 859, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	894, 895, 897, 898, 421, 427, 428, 429, 953, 430,
	410, 411, 431, 432, 980, 433, 434, 916, 896, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 964, 442,
	443, 444, 987, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 892, 0, 456, 935, 936, 937,
	938, 0, 463, 0, 457, 458, 988, 459, 989, 869,
	460, 461, 462, 0, 464, 465, 0, 853, 466, 467,
	468, 470, 471, 469, 473, 954, 474, 0, 900, 475,
	476, 477, 526, 932, 982, 0, 479, 478, 529, 0,
	0, 0, 0, 480, 481, 530, 482, 483, 484, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 1612, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 873, 905, 863, 864, 865,
	861, 862, 874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 920, 899, 931, 232,
	889, 930, 929, 0, 233, 234, 891, 890, 237, 238,
	239, 881, 955, 240, 992, 993, 492, 0, 241, 962,
	0, 943, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 965, 257, 258, 946, 944, 945, 952, 948,
	947, 951, 259, 260, 261, 262, 934, 264, 927, 926,
	852, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	925, 271, 0, 272, 0, 273, 274, 0, 275, 858,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 983,
	984, 870, 215, 0, 0, 0, 0, 0, 286, 287,
	288, 924, 922, 923, 0, 291, 0, 292, 0, 0,
	966, 293, 294, 0, 295, 990, 0, 880, 296, 0,
	297, 298, 299, 300, 957, 958, 961, 355, 968, 301,
	302, 0, 303, 304, 901, 0, 0, 216, 305, 307,
	314, 0, 967, 308, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 315, 969, 959, 970, 316, 317,
	318, 971, 939, 940, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 991, 972, 329, 330,
	973, 0, 331, 332, 950, 949, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 352, 350, 975, 349, 849,
	217, 976, 353, 871, 960, 354, 928, 356, 357, 0,
	902, 359, 903, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 977, 367, 978, 985, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 986,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 921, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 979, 404, 405, 406, 407, 859, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 894, 895, 897, 898, 421, 427, 428, 429,
	953, 430, 410, 411, 431, 432, 980, 433, 434, 916,
	896, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	964, 442, 443, 444, 987, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 892, 0, 456, 935,
	936, 937, 938, 0, 463, 0, 457, 458, 988, 459,
	989, 869, 460, 461, 462, 0, 464, 465, 0, 853,
	466, 467, 468, 470, 471, 469, 473, 954, 474, 0,
	900, 475, 476, 477, 526, 932, 982, 2965, 479, 478,
	529, 0, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 850, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 846, 847, 905, 863, 864, 865,
	861, 862, 874, 875, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 920, 899, 931, 232,
	889, 930, 929, 0, 233, 234, 891, 890, 237, 238,
	239, 881, 955, 240, 992, 993, 492, 0, 241, 962,
	0, 943, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 965, 257, 258, 946, 944, 945, 952, 948,
	947, 951, 259, 260, 261, 262, 934, 264, 927, 926,
	852, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	925, 271, 0, 272, 0, 273, 274, 0, 275, 858,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 983,
	984, 870, 215, 0, 0, 0, 0, 0, 286, 287,
	288, 924, 922, 923, 0, 291, 0, 292, 0, 0,
	966, 293, 294, 0, 295, 990, 0, 880, 296, 0,
	297, 298, 299, 300, 957, 958, 961, 355, 968, 301,
	302, 0, 303, 304, 901, 0, 0, 2029, 305, 307,
	314, 0, 967, 308, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 315, 969, 959, 970, 316, 317,
	318, 971, 939, 940, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 991, 972, 329, 330,
	973, 0, 331, 332, 950, 949, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 352, 350, 975, 349, 849,
	217, 976, 353, 871, 960, 354, 928, 356, 357, 0,
	902, 359, 903, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 977, 367, 978, 985, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 986,
	378, 515, 379, 2028, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 921, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 979, 404, 405, 406, 407, 859, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 894, 895, 897, 898, 421, 427, 428, 429,
	953, 430, 410, 411, 431, 432, 980, 433, 434, 916,
	896, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	964, 442, 443, 444, 987, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 892, 0, 456, 935,
	936, 937, 938, 0, 463, 0, 457, 458, 988, 459,
	989, 869, 460, 461, 462, 0, 464, 465, 0, 853,
	466, 467, 468, 470, 471, 469, 473, 954, 474, 0,
	900, 475, 476, 477, 526, 932, 982, 0, 479, 478,
	529, 0, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 850, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 846, 847, 905, 863, 864, 865,
	861, 862, 874, 875, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 920, 899, 931, 232,
	889, 930, 929, 0, 233, 234, 891, 890, 237, 238,
	239, 881, 955, 240, 992, 993, 492, 0, 241, 962,
	0, 943, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 965, 257, 258, 946, 944, 945, 952, 948,
	947, 951, 259, 260, 261, 262, 934, 264, 927, 926,
	852, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	925, 271, 0, 272, 0, 273, 274, 0, 275, 858,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 983,
	984, 870, 215, 0, 0, 0, 0, 0, 286, 287,
	288, 924, 922, 923, 0, 291, 0, 292, 0, 0,
	966, 293, 294, 0, 295, 990, 0, 880, 296, 0,
	297, 298, 299, 300, 957, 958, 961, 355, 968, 301,
	302, 0, 303, 304, 901, 0, 0, 216, 305, 307,
	314, 0, 967, 308, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 315, 969, 959, 970, 316, 317,
	318, 971, 939, 940, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 991, 972, 329, 330,
	973, 0, 331, 332, 950, 949, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 352, 350, 975, 349, 849,
	217, 976, 353, 871, 960, 354, 928, 356, 357, 0,
	902, 359, 903, 854, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 977, 367, 978, 985, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 986,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 921, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 979, 404, 405, 406, 407, 859, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 894, 895, 897, 898, 421, 427, 428, 429,
	953, 430, 410, 411, 431, 432, 980, 433, 434, 916,
	896, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	964, 442, 443, 444, 987, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 892, 0, 456, 935,
	936, 937, 938, 0, 463, 0, 457, 458, 988, 459,
	989, 869, 460, 461, 462, 0, 464, 465, 0, 853,
	466, 467, 468, 470, 471, 469, 473, 954, 474, 0,
	900, 475, 476, 477, 526, 932, 982, 0, 479, 478,
	529, 0, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 850, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 846, 847, 905, 863, 864, 865,
	861, 862, 874, 875, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 920, 899, 931, 232,
	889, 930, 929, 0, 233, 234, 891, 890, 237, 238,
	239, 881, 955, 240, 992, 993, 492, 0, 241, 962,
	0, 943, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 965, 257, 258, 946, 944, 945, 952, 948,
	947, 951, 259, 260, 261, 262, 934, 264, 927, 926,
	852, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	925, 271, 0, 272, 0, 273, 274, 0, 275, 858,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 983,
	984, 870, 215, 0, 0, 0, 0, 0, 286, 287,
	288, 924, 922, 923, 0, 291, 0, 292, 0, 0,
	966, 293, 294, 0, 295, 990, 0, 880, 296, 0,
	297, 298, 299, 300, 957, 958, 961, 355, 968, 301,
	302, 0, 303, 304, 901, 0, 0, 216, 305, 307,
	314, 0, 967, 308, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 315, 969, 959, 970, 316, 317,
	318, 971, 939, 940, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 991, 972, 329, 330,
	973, 0, 331, 332, 950, 949, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 352, 350, 975, 349, 849,
	217, 976, 353, 871, 960, 354, 928, 356, 357, 0,
	902, 359, 903, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 977, 367, 978, 985, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 986,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 921, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 979, 404, 405, 406, 407, 859, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 894, 895, 897, 898, 421, 427, 428, 429,
	953, 430, 410, 411, 431, 432, 980, 433, 434, 916,
	896, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	964, 442, 443, 444, 987, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 892, 0, 456, 935,
	936, 937, 938, 0, 463, 0, 457, 458, 988, 459,
	989, 869, 460, 461, 462, 0, 464, 465, 0, 853,
	466, 467, 468, 470, 471, 469, 473, 954, 474, 0,
	900, 475, 476, 477, 526, 932, 982, 0, 479, 478,
	529, 0, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 850, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 846, 847, 1612, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 0, 873, 905, 863,
	864, 865, 861, 862, 874, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 258, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 264,
	927, 926, 852, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 2214, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 849, 217, 976, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	859, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 464, 465,
	0, 853, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 905, 863,
	864, 865, 861, 862, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 258, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 264,
	927, 926, 852, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 849, 217, 976, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	859, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 464, 465,
	0, 853, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 0, 0,
	0, 0, 0, 0, 0, 875, 1546, 0, 2219, 873,
	905, 863, 864, 865, 861, 862, 874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 956,
	879, 0, 0, 0, 224, 226, 225, 227, 228, 486,
	920, 899, 931, 232, 889, 930, 929, 0, 233, 234,
	891, 890, 237, 238, 239, 881, 955, 240, 992, 993,
	492, 0, 241, 962, 0, 943, 0, 242, 243, 244,
	245, 246, 247, 0, 249, 250, 251, 248, 0, 252,
	0, 253, 254, 255, 0, 256, 965, 257, 258, 946,
	944, 945, 952, 948, 947, 951, 259, 260, 261, 262,
	934, 264, 927, 926, 852, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 925, 271, 0, 272, 0, 273,
	274, 0, 275, 858, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 983, 984, 870, 215, 0, 0, 0,
	0, 0, 286, 287, 288, 924, 922, 923, 0, 291,
	0, 292, 0, 0, 966, 293, 294, 0, 295, 990,
	0, 880, 296, 0, 297, 298, 299, 300, 957, 958,
	961, 355, 968, 301, 302, 0, 303, 304, 901, 0,
	0, 216, 305, 307, 314, 0, 967, 308, 913, 904,
	915, 917, 918, 919, 914, 0, 906, 0, 315, 969,
	959, 970, 316, 317, 318, 971, 939, 940, 0, 0,
	321, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	991, 972, 329, 330, 973, 0, 331, 332, 950, 949,
	333, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 893, 344, 974, 347, 348, 351, 352,
	350, 975, 349, 849, 217, 976, 353, 871, 960, 354,
	928, 356, 357, 0, 902, 359, 903, 0, 0, 362,
	363, 364, 0, 0, 365, 366, 512, 977, 367, 978,
	985, 368, 361, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 377, 986, 378, 515, 379, 0, 380, 0,
	381, 382, 383, 384, 385, 386, 387, 921, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 979, 404, 405,
	406, 407, 859, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 894, 895, 897, 898,
	421, 427, 428, 429, 953, 430, 410, 411, 431, 432,
	980, 433, 434, 916, 896, 436, 0, 437, 438, 439,
	440, 412, 441, 445, 964, 442, 443, 444, 987, 0,
	448, 449, 447, 0, 450, 451, 452, 453, 454, 280,
	892, 0, 456, 935, 936, 937, 938, 0, 463, 0,
	457, 458, 988, 459, 989, 869, 460, 461, 462, 0,
	464, 465, 0, 853, 466, 467, 468, 470, 471, 469,
	473, 954, 474, 0, 900, 475, 476, 477, 526, 932,
	982, 0, 479, 478, 529, 0, 0, 0, 0, 480,
	481, 530, 482, 483, 484, 850, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 846, 847,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	2217, 873, 905, 863, 864, 865, 861, 862, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 920, 899, 931, 232, 889, 930, 929, 0,
	233, 234, 891, 890, 237, 238, 239, 881, 955, 240,
	992, 993, 492, 0, 241, 962, 0, 943, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 965, 257,
	258, 946, 944, 945, 952, 948, 947, 951, 259, 260,
	261, 262, 934, 264, 927, 926, 852, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 925, 271, 0, 272,
	0, 273, 274, 0, 275, 858, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 983, 984, 870, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 924, 922, 923,
	0, 291, 0, 292, 0, 0, 966, 293, 294, 0,
	295, 990, 0, 880, 296, 0, 297, 298, 299, 300,
	957, 958, 961, 355, 968, 301, 302, 0, 303, 304,
	901, 0, 0, 216, 305, 307, 314, 0, 967, 308,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	315, 969, 959, 970, 316, 317, 318, 971, 939, 940,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 991, 972, 329, 330, 973, 0, 331, 332,
	950, 949, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 893, 344, 974, 347, 348,
	351, 352, 350, 975, 349, 849, 217, 976, 353, 871,
	960, 354, 928, 356, 357, 0, 902, 359, 903, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 977,
	367, 978, 985, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 986, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 921,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 979,
	404, 405, 406, 407, 859, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 894, 895,
	897, 898, 421, 427, 428, 429, 953, 430, 410, 411,
	431, 432, 980, 433, 434, 916, 896, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 964, 442, 443, 444,
	987, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 892, 0, 456, 935, 936, 937, 938, 0,
	463, 0, 457, 458, 988, 459, 989, 869, 460, 461,
	462, 0, 464, 465, 0, 853, 466, 467, 468, 470,
	471, 469, 473, 954, 474, 0, 900, 475, 476, 477,
	526, 932, 982, 0, 479, 478, 529, 0, 0, 0,
	0, 480, 481, 530, 482, 483, 484, 850, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	846, 847, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 2205, 873, 905, 863, 864, 865, 861, 862,
	874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 224, 226,
	225, 227, 228, 486, 920, 899, 931, 232, 889, 930,
	929, 0, 233, 234, 891, 890, 237, 238, 239, 881,
	955, 240, 992, 993, 492, 0, 241, 962, 0, 943,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 254, 255, 0, 256,
	965, 257, 258, 946, 944, 945, 952, 948, 947, 951,
	259, 260, 261, 262, 934, 264, 927, 926, 852, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 925, 271,
	0, 272, 0, 273, 274, 0, 275, 858, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 983, 984, 870,
	215, 0, 0, 0, 0, 0, 286, 287, 288, 924,
	922, 923, 0, 291, 0, 292, 0, 0, 966, 293,
	294, 0, 295, 990, 0, 880, 296, 0, 297, 298,
	299, 300, 957, 958, 961, 355, 968, 301, 302, 0,
	303, 304, 901, 0, 0, 216, 305, 307, 314, 0,
	967, 308, 913, 904, 915, 917, 918, 919, 914, 0,
	906, 0, 315, 969, 959, 970, 316, 317, 318, 971,
	939, 940, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 991, 972, 329, 330, 973, 0,
	331, 332, 950, 949, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 352, 350, 975, 349, 849, 217, 976,
	353, 871, 960, 354, 928, 356, 357, 0, 902, 359,
	903, 0, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 977, 367, 978, 985, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 986, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 921, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 979, 404, 405, 406, 407, 859, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	894, 895, 897, 898, 421, 427, 428, 429, 953, 430,
	410, 411, 431, 432, 980, 433, 434, 916, 896, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 964, 442,
	443, 444, 987, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 892, 0, 456, 935, 936, 937,
	938, 0, 463, 0, 457, 458, 988, 459, 989, 869,
	460, 461, 462, 0, 464, 465, 0, 853, 466, 467,
	468, 470, 471, 469, 473, 954, 474, 0, 900, 475,
	476, 477, 526, 932, 982, 0, 479, 478, 529, 0,
	0, 0, 0, 480, 481, 530, 482, 483, 484, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 2194, 873, 905, 863, 864, 865,
	861, 862, 874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 920, 899, 931, 232,
	889, 930, 929, 0, 233, 234, 891, 890, 237, 238,
	239, 881, 955, 240, 992, 993, 492, 0, 241, 962,
	0, 943, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 965, 257, 258, 946, 944, 945, 952, 948,
	947, 951, 259, 260, 261, 262, 934, 264, 927, 926,
	852, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	925, 271, 0, 272, 0, 273, 274, 0, 275, 858,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 983,
	984, 870, 215, 0, 0, 0, 0, 0, 286, 287,
	288, 924, 922, 923, 0, 291, 0, 292, 0, 0,
	966, 293, 294, 0, 295, 990, 0, 880, 296, 0,
	297, 298, 299, 300, 957, 958, 961, 355, 968, 301,
	302, 0, 303, 304, 901, 0, 0, 216, 305, 307,
	314, 0, 967, 308, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 315, 969, 959, 970, 316, 317,
	318, 971, 939, 940, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 991, 972, 329, 330,
	973, 0, 331, 332, 950, 949, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 352, 350, 975, 349, 849,
	217, 976, 353, 871, 960, 354, 928, 356, 357, 0,
	902, 359, 903, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 977, 367, 978, 985, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 986,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 921, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 979, 404, 405, 406, 407, 859, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 894, 895, 897, 898, 421, 427, 428, 429,
	953, 430, 410, 411, 431, 432, 980, 433, 434, 916,
	896, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	964, 442, 443, 444, 987, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 892, 0, 456, 935,
	936, 937, 938, 0, 463, 0, 457, 458, 988, 459,
	989, 869, 460, 461, 462, 0, 464, 465, 0, 853,
	466, 467, 468, 470, 471, 469, 473, 954, 474, 0,
	900, 475, 476, 477, 526, 932, 982, 0, 479, 478,
	529, 0, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 850, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 846, 847, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 2192, 873, 2183, 2190,
	864, 865, 861, 862, 874, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 258, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 2186,
	927, 926, 852, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 2187, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 2188, 2185,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 849, 217, 976, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	859, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	2189, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 464, 465,
	0, 853, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 2184, 484, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 0, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 2180, 873,
	2183, 2190, 864, 865, 861, 862, 874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 956,
	879, 0, 0, 0, 224, 226, 225, 227, 228, 486,
	920, 899, 931, 232, 889, 930, 929, 0, 233, 234,
	891, 890, 237, 238, 239, 881, 955, 240, 992, 993,
	492, 0, 241, 962, 0, 943, 0, 242, 243, 244,
	245, 246, 247, 0, 249, 250, 251, 248, 0, 252,
	0, 253, 254, 255, 0, 256, 965, 257, 258, 946,
	944, 945, 952, 948, 947, 951, 259, 260, 261, 262,
	934, 2186, 927, 926, 852, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 925, 271, 0, 272, 0, 273,
	274, 0, 275, 858, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 983, 984, 870, 215, 0, 0, 0,
	0, 0, 286, 287, 288, 924, 922, 923, 0, 291,
	0, 292, 0, 0, 966, 293, 294, 0, 295, 990,
	0, 880, 296, 0, 297, 298, 299, 2187, 957, 958,
	961, 355, 968, 301, 302, 0, 303, 304, 901, 0,
	0, 216, 305, 307, 314, 0, 967, 308, 913, 904,
	915, 917, 918, 919, 914, 0, 906, 0, 315, 969,
	959, 970, 316, 317, 318, 971, 939, 940, 0, 0,
	321, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	991, 972, 329, 330, 973, 0, 331, 332, 950, 949,
	333, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	2188, 2185, 345, 893, 344, 974, 347, 348, 351, 352,
	350, 975, 349, 849, 217, 976, 353, 871, 960, 354,
	928, 356, 357, 0, 902, 359, 903, 0, 0, 362,
	363, 364, 0, 0, 365, 366, 512, 977, 367, 978,
	985, 368, 361, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 377, 986, 378, 515, 379, 0, 380, 0,
	381, 382, 383, 384, 385, 386, 387, 921, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 979, 404, 405,
	406, 407, 859, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 2189, 0, 425, 426, 894, 895, 897, 898,
	421, 427, 428, 429, 953, 430, 410, 411, 431, 432,
	980, 433, 434, 916, 896, 436, 0, 437, 438, 439,
	440, 412, 441, 445, 964, 442, 443, 444, 987, 0,
	448, 449, 447, 0, 450, 451, 452, 453, 454, 280,
	892, 0, 456, 935, 936, 937, 938, 0, 463, 0,
	457, 458, 988, 459, 989, 869, 460, 461, 462, 0,
	464, 465, 0, 853, 466, 467, 468, 470, 471, 469,
	473, 954, 474, 0, 900, 475, 476, 477, 526, 932,
	982, 0, 479, 478, 529, 0, 0, 0, 0, 480,
	481, 530, 482, 2184, 484, 850, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 846, 847,
	905, 863, 864, 865, 861, 862, 874, 875, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 956,
	879, 0, 0, 0, 224, 226, 225, 227, 228, 486,
	920, 899, 931, 232, 889, 930, 929, 0, 233, 234,
	891, 890, 237, 238, 239, 881, 955, 240, 992, 993,
	492, 0, 241, 962, 0, 943, 0, 242, 243, 244,
	245, 246, 247, 0, 249, 250, 251, 248, 0, 252,
	0, 253, 254, 255, 0, 256, 965, 257, 258, 946,
	944, 945, 952, 948, 947, 951, 259, 260, 261, 262,
	934, 264, 927, 926, 852, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 925, 271, 0, 272, 0, 273,
	274, 0, 275, 858, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 983, 984, 870, 215, 0, 0, 0,
	0, 0, 286, 287, 288, 924, 922, 923, 0, 291,
	0, 292, 0, 0, 966, 293, 294, 0, 295, 990,
	0, 880, 296, 0, 297, 298, 299, 300, 957, 958,
	961, 355, 968, 301, 302, 0, 303, 304, 901, 0,
	0, 216, 305, 307, 314, 0, 967, 308, 913, 904,
	915, 917, 918, 919, 914, 0, 906, 0, 315, 969,
	959, 970, 316, 317, 318, 971, 939, 940, 0, 0,
	321, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	991, 972, 329, 330, 973, 0, 331, 332, 950, 949,
	333, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 893, 344, 974, 347, 348, 351, 352,
	350, 975, 349, 849, 217, 976, 353, 871, 960, 354,
	928, 356, 357, 0, 902, 359, 903, 0, 0, 362,
	363, 364, 0, 0, 365, 366, 512, 977, 367, 978,
	985, 368, 361, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 377, 986, 378, 515, 379, 0, 380, 0,
	381, 382, 383, 384, 385, 386, 387, 921, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 979, 404, 405,
	406, 407, 859, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 894, 895, 897, 898,
	421, 427, 428, 429, 953, 430, 410, 411, 431, 432,
	980, 433, 434, 916, 896, 436, 0, 437, 438, 439,
	440, 412, 441, 445, 964, 442, 443, 444, 987, 0,
	448, 449, 447, 0, 450, 451, 452, 453, 454, 280,
	892, 0, 456, 935, 936, 937, 938, 0, 463, 0,
	457, 458, 988, 459, 989, 869, 460, 461, 462, 0,
	464, 465, 0, 853, 466, 467, 468, 470, 471, 469,
	473, 954, 474, 0, 900, 475, 476, 477, 526, 932,
	982, 0, 479, 478, 529, 0, 0, 0, 0, 480,
	481, 530, 482, 483, 484, 850, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 846, 847,
	0, 0, 0, 0, 0, 1554, 0, 875, 0, 0,
	0, 873, 905, 863, 864, 865, 861, 862, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 2008, 223, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 920, 899, 931, 232, 889, 930, 929, 0,
	233, 234, 891, 890, 237, 238, 239, 881, 955, 240,
	992, 993, 492, 0, 241, 962, 0, 943, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 965, 257,
	258, 946, 944, 945, 952, 948, 947, 951, 259, 260,
	261, 262, 934, 264, 927, 926, 852, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 925, 271, 0, 272,
	0, 273, 274, 0, 275, 858, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 983, 984, 870, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 924, 922, 923,
	0, 291, 0, 292, 0, 0, 966, 293, 294, 0,
	295, 990, 0, 880, 296, 0, 297, 298, 299, 300,
	957, 958, 961, 355, 968, 301, 302, 0, 303, 304,
	901, 0, 0, 216, 305, 307, 314, 0, 967, 308,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	315, 969, 959, 970, 316, 317, 318, 971, 939, 940,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 991, 972, 329, 330, 973, 0, 331, 332,
	950, 949, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 893, 344, 974, 347, 348,
	351, 352, 350, 975, 349, 849, 217, 976, 353, 871,
	960, 354, 928, 356, 357, 0, 902, 359, 903, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 977,
	367, 978, 985, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 986, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 921,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 979,
	404, 405, 406, 407, 859, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 894, 895,
	897, 898, 421, 427, 428, 429, 953, 430, 410, 411,
	431, 432, 980, 433, 434, 916, 896, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 964, 442, 443, 444,
	987, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 892, 0, 456, 935, 936, 937, 938, 0,
	463, 0, 457, 458, 988, 459, 989, 869, 460, 461,
	462, 0, 464, 465, 0, 853, 466, 467, 468, 470,
	471, 469, 473, 954, 474, 0, 900, 475, 476, 477,
	526, 932, 982, 0, 479, 478, 529, 0, 0, 0,
	0, 480, 481, 530, 482, 483, 484, 850, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	846, 847, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 1228, 873, 905, 863, 864, 865, 861, 862,
	874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 224, 226,
	225, 227, 228, 486, 920, 899, 931, 232, 889, 930,
	929, 0, 233, 234, 891, 890, 237, 238, 239, 881,
	955, 240, 992, 993, 492, 0, 241, 962, 0, 943,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 254, 255, 0, 256,
	965, 257, 258, 946, 944, 945, 952, 948, 947, 951,
	259, 260, 261, 262, 934, 264, 927, 926, 852, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 925, 271,
	0, 272, 0, 273, 274, 0, 275, 858, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 983, 984, 870,
	215, 0, 0, 0, 0, 0, 286, 287, 288, 924,
	922, 923, 0, 291, 0, 292, 0, 0, 966, 293,
	294, 0, 295, 990, 0, 880, 296, 0, 297, 298,
	299, 300, 1227, 958, 961, 355, 968, 301, 302, 0,
	303, 304, 901, 0, 0, 216, 305, 307, 314, 0,
	967, 308, 913, 904, 915, 917, 918, 919, 914, 0,
	906, 0, 315, 969, 959, 970, 316, 317, 318, 971,
	939, 940, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 991, 972, 329, 330, 973, 0,
	331, 332, 950, 949, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 352, 350, 975, 349, 849, 217, 976,
	353, 871, 960, 354, 928, 356, 357, 0, 902, 359,
	903, 0, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 977, 367, 978, 985, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 986, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 921, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 979, 404, 405, 406, 407, 859, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	894, 895, 897, 898, 421, 427, 428, 429, 953, 430,
	410, 411, 431, 432, 980, 433, 434, 916, 896, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 964, 442,
	443, 444, 987, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 892, 0, 456, 935, 936, 937,
	938, 0, 463, 0, 457, 458, 988, 459, 989, 869,
	460, 461, 462, 0, 464, 465, 0, 853, 466, 467,
	468, 470, 471, 469, 473, 954, 474, 0, 900, 475,
	476, 477, 526, 932, 982, 0, 479, 478, 529, 0,
	0, 0, 0, 480, 481, 530, 482, 483, 484, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 1222, 873, 905, 863, 864, 865,
	861, 862, 874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 920, 899, 931, 232,
	889, 930, 929, 0, 233, 234, 891, 890, 237, 238,
	239, 881, 955, 240, 992, 993, 492, 0, 241, 962,
	0, 943, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 965, 257, 258, 946, 944, 945, 952, 948,
	947, 951, 259, 260, 261, 262, 934, 264, 927, 926,
	852, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	925, 271, 0, 272, 0, 273, 274, 0, 275, 858,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 983,
	984, 870, 215, 0, 0, 0, 0, 0, 286, 287,
	288, 924, 922, 923, 0, 291, 0, 292, 0, 0,
	966, 293, 294, 0, 295, 990, 0, 880, 296, 0,
	297, 298, 299, 300, 1221, 958, 961, 355, 968, 301,
	302, 0, 303, 304, 901, 0, 0, 216, 305, 307,
	314, 0, 967, 308, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 315, 969, 959, 970, 316, 317,
	318, 971, 939, 940, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 991, 972, 329, 330,
	973, 0, 331, 332, 950, 949, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 352, 350, 975, 349, 849,
	217, 976, 353, 871, 960, 354, 928, 356, 357, 0,
	902, 359, 903, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 977, 367, 978, 985, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 986,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 921, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 979, 404, 405, 406, 407, 859, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 894, 895, 897, 898, 421, 427, 428, 429,
	953, 430, 410, 411, 431, 432, 980, 433, 434, 916,
	896, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	964, 442, 443, 444, 987, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 892, 0, 456, 935,
	936, 937, 938, 0, 463, 0, 457, 458, 988, 459,
	989, 869, 460, 461, 462, 0, 464, 465, 0, 853,
	466, 467, 468, 470, 471, 469, 473, 954, 474, 0,
	900, 475, 476, 477, 526, 932, 982, 0, 479, 478,
	529, 0, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 850, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 846, 847, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 1217, 873, 905, 863,
	864, 865, 861, 862, 874, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 258, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 264,
	927, 926, 852, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 849, 217, 976, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	859, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 464, 465,
	0, 853, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 905, 863,
	864, 865, 861, 862, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 258, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 264,
	927, 926, 852, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 849, 217, 976, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	859, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 464, 465,
	0, 853, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 905, 863,
	864, 865, 861, 862, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 3640, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 264,
	927, 926, 852, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 849, 217, 976, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	859, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 3639, 465,
	0, 853, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 905, 863,
	864, 865, 861, 862, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 3638, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 3640, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 264,
	927, 926, 852, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 849, 217, 976, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	859, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 3639, 465,
	0, 853, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 905, 863,
	864, 865, 2552, 2553, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 258, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 264,
	927, 926, 852, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 849, 217, 976, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	859, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 464, 465,
	0, 853, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 905, 863,
	864, 865, 2550, 2551, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 258, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 264,
	927, 926, 852, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 849, 217, 976, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	859, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 464, 465,
	0, 853, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 905, 863,
	864, 865, 861, 862, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 258, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 264,
	927, 926, 852, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 849, 217, 976, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	859, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 464, 465,
	0, 853, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 2016, 2017, 905, 863,
	864, 865, 861, 862, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 258, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 264,
	927, 926, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 0, 217, 976, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	859, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 464, 465,
	0, 0, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 2202,
	0, 0, 0, 0, 0, 0, 2200, 2201, 905, 863,
	864, 865, 861, 862, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 258, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 264,
	927, 926, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 0, 217, 976, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	2545, 2546, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 464, 465,
	0, 0, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 905, 863, 864, 865, 861, 862, 874,
	0, 0, 0, 0, 0, 0, 1766, 1767, 0, 0,
	218, 219, 220, 221, 222, 875, 223, 0, 0, 873,
	0, 0, 956, 879, 0, 0, 0, 224, 226, 225,
	227, 228, 486, 920, 899, 931, 232, 889, 930, 929,
	0, 233, 234, 891, 890, 237, 238, 239, 0, 955,
	240, 992, 993, 492, 0, 241, 962, 0, 943, 0,
	242, 243, 244, 245, 246, 247, 0, 249, 250, 251,
	248, 0, 252, 0, 253, 254, 255, 0, 256, 965,
	257, 258, 946, 944, 945, 952, 948, 947, 951, 259,
	260, 261, 262, 934, 264, 927, 926, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 925, 271, 0,
	272, 0, 273, 274, 0, 275, 496, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 983, 984, 870, 215,
	0, 0, 0, 0, 0, 286, 287, 288, 924, 922,
	923, 0, 291, 0, 292, 0, 0, 966, 293, 294,
	0, 295, 990, 0, 880, 296, 0, 297, 298, 299,
	300, 957, 958, 961, 355, 968, 301, 302, 0, 303,
	304, 901, 0, 0, 216, 305, 307, 314, 0, 967,
	308, 913, 904, 915, 917, 918, 919, 914, 0, 906,
	0, 315, 969, 959, 970, 316, 317, 318, 971, 939,
	940, 0, 0, 321, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 991, 972, 329, 330, 973, 0, 331,
	332, 950, 949, 333, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 893, 344, 974, 347,
	348, 351, 352, 350, 975, 349, 0, 217, 976, 353,
	871, 960, 354, 928, 356, 357, 0, 902, 359, 903,
	0, 0, 362, 363, 364, 0, 0, 365, 366, 512,
	977, 367, 978, 985, 368, 361, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 377, 986, 378, 515, 379,
	0, 380, 0, 381, 382, 383, 384, 385, 386, 387,
	921, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	979, 404, 405, 406, 407, 859, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 894,
	895, 897, 898, 421, 427, 428, 429, 953, 430, 410,
	411, 431, 432, 980, 433, 434, 916, 896, 436, 0,
	437, 438, 439, 440, 412, 441, 445, 964, 442, 443,
	444, 987, 0, 448, 449, 447, 0, 450, 451, 452,
	453, 454, 280, 892, 0, 456, 935, 936, 937, 938,
	0, 463, 0, 457, 458, 988, 459, 989, 869, 460,
	461, 462, 0, 464, 465, 0, 0, 466, 467, 468,
	470, 471, 469, 473, 954, 474, 0, 900, 475, 476,
	477, 526, 932, 982, 0, 479, 478, 529, 0, 0,
	0, 0, 480, 481, 530, 482, 483, 484, 905, 863,
	864, 865, 861, 862, 874, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	875, 223, 0, 0, 873, 0, 0, 956, 879, 0,
	0, 0, 224, 226, 225, 227, 228, 0, 920, 899,
	931, 232, 889, 930, 929, 0, 233, 234, 891, 890,
	237, 238, 239, 881, 955, 240, 992, 993, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 3640, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 934, 264,
	927, 926, 852, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 925, 271, 0, 272, 0, 273, 274, 0,
	275, 858, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 870, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 924, 922, 923, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 880,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	0, 301, 302, 0, 303, 304, 901, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 315, 0, 959, 0,
	316, 317, 318, 971, 939, 940, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 991, 972,
	329, 330, 0, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 849, 217, 0, 353, 871, 960, 354, 928, 356,
	357, 0, 902, 359, 903, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 921, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	859, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 894, 895, 897, 898, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 0, 433,
	434, 916, 896, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 964, 442, 443, 444, 987, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 892, 0,
	456, 935, 936, 937, 938, 0, 463, 0, 457, 458,
	988, 459, 989, 869, 460, 461, 462, 0, 3639, 465,
	0, 853, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 900, 475, 476, 477, 526, 932, 982, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 839, 0, 1030, 0, 0, 846, 847, 0, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 873,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 486, 487, 229, 488, 232, 230, 231, 489,
	0, 233, 234, 235, 236, 237, 238, 239, 0, 955,
	240, 490, 491, 492, 0, 241, 962, 0, 943, 0,
	242, 243, 244, 245, 246, 247, 0, 249, 250, 251,
	248, 0, 252, 0, 253, 254, 255, 0, 256, 965,
	257, 258, 946, 944, 945, 952, 948, 947, 951, 259,
	260, 261, 262, 263, 264, 494, 495, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 496, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 983, 984, 0, 215,
	0, 0, 0, 0, 0, 286, 287, 288, 499, 289,
	290, 0, 291, 0, 292, 0, 0, 966, 293, 294,
	0, 295, 990, 0, 501, 296, 0, 297, 298, 299,
	300, 957, 958, 961, 355, 968, 301, 302, 0, 303,
	304, 306, 0, 0, 216, 305, 307, 314, 0, 967,
	308, 505, 310, 309, 311, 312, 313, 506, 0, 507,
	0, 315, 969, 959, 970, 316, 317, 318, 971, 319,
	320, 0, 0, 321, 322, 323, 324, 325, 1016, 327,
	326, 0, 328, 991, 972, 329, 330, 973, 0, 331,
	332, 950, 949, 333, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 974, 347,
	348, 351, 352, 350, 975, 349, 0, 217, 976, 353,
	0, 960, 354, 511, 356, 357, 0, 358, 359, 360,
	0, 1022, 362, 363, 364, 0, 0, 365, 366, 512,
	977, 367, 978, 985, 368, 361, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 377, 986, 378, 515, 379,
	0, 380, 0, 381, 382, 383, 384, 385, 386, 387,
	516, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	979, 404, 405, 406, 407, 517, 1024, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 181, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 429, 953, 430, 410,
	411, 431, 432, 980, 433, 434, 518, 435, 436, 0,
	437, 438, 439, 440, 412, 441, 445, 446, 442, 443,
	444, 987, 0, 448, 449, 447, 183, 450, 451, 452,
	453, 454, 280, 455, 0, 456, 520, 521, 522, 523,
	0, 463, 0, 457, 458, 988, 459, 989, 0, 460,
	461, 462, 0, 464, 465, 0, 0, 466, 467, 468,
	470, 471, 469, 473, 954, 474, 0, 472, 475, 476,
	477, 1337, 527, 528, 0, 479, 478, 529, 1030, 0,
	0, 175, 480, 481, 530, 482, 483, 484, 0, 176,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 956, 1020, 0,
	1636, 0, 224, 226, 225, 227, 228, 486, 487, 229,
	488, 232, 230, 231, 489, 0, 233, 234, 235, 236,
	237, 238, 239, 0, 955, 240, 490, 491, 492, 0,
	241, 962, 0, 943, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 258, 946, 944, 945,
	952, 948, 947, 951, 259, 260, 261, 262, 263, 264,
	494, 495, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 496, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 983, 984, 0, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 499, 289, 290, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 990, 0, 501,
	296, 0, 297, 298, 299, 300, 957, 958, 961, 355,
	968, 301, 302, 0, 303, 304, 306, 0, 0, 216,
	305, 307, 314, 0, 967, 308, 505, 310, 309, 311,
	312, 313, 506, 0, 507, 0, 315, 969, 959, 970,
	316, 317, 318, 971, 319, 320, 0, 0, 321, 322,
	323, 324, 325, 1016, 327, 326, 0, 328, 991, 972,
	329, 330, 973, 0, 331, 332, 950, 949, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 0, 217, 976, 353, 0, 960, 354, 511, 356,
	357, 0, 358, 359, 360, 0, 1022, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 985, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 986, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 516, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	517, 1024, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 181, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 429, 953, 430, 410, 411, 431, 432, 980, 433,
	434, 518, 435, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 446, 442, 443, 444, 987, 0, 448, 449,
	447, 183, 450, 451, 452, 453, 454, 280, 455, 0,
	456, 520, 521, 522, 523, 0, 463, 0, 457, 458,
	988, 459, 989, 0, 460, 461, 462, 0, 464, 465,
	0, 0, 466, 467, 468, 470, 471, 469, 473, 954,
	474, 0, 472, 475, 476, 477, 1337, 527, 528, 0,
	479, 478, 529, 2698, 0, 1030, 175, 480, 481, 530,
	482, 483, 484, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 1020, 956, 1636, 0, 0, 0, 224,
	226, 225, 227, 228, 486, 487, 229, 488, 232, 230,
	231, 489, 0, 233, 234, 235, 236, 237, 238, 239,
	0, 955, 240, 490, 491, 492, 0, 241, 962, 0,
	943, 0, 242, 243, 244, 245, 246, 247, 0, 249,
	250, 251, 248, 0, 252, 0, 253, 254, 255, 0,
	256, 965, 257, 258, 946, 944, 945, 952, 948, 947,
	951, 259, 260, 261, 262, 263, 264, 494, 495, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 496, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 983, 984,
	0, 215, 0, 0, 0, 0, 0, 286, 287, 288,
	499, 289, 290, 0, 291, 0, 292, 0, 0, 966,
	293, 294, 0, 295, 990, 0, 501, 296, 0, 297,
	298, 299, 300, 957, 958, 961, 355, 968, 301, 302,
	0, 303, 304, 306, 0, 0, 216, 305, 307, 314,
	0, 967, 308, 505, 310, 309, 311, 312, 313, 506,
	0, 507, 0, 315, 969, 959, 970, 316, 317, 318,
	971, 319, 320, 0, 0, 321, 322, 323, 324, 325,
	1016, 327, 326, 0, 328, 991, 972, 329, 330, 973,
	0, 331, 332, 950, 949, 333, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	974, 347, 348, 351, 352, 350, 975, 349, 0, 217,
	976, 353, 0, 960, 354, 511, 356, 357, 0, 358,
	359, 360, 0, 1022, 362, 363, 364, 0, 0, 365,
	366, 512, 977, 367, 978, 985, 368, 361, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 377, 986, 378,
	515, 379, 0, 380, 0, 381, 382, 383, 384, 385,
	386, 387, 516, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 979, 404, 405, 406, 407, 517, 1024, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 429, 953,
	430, 410, 411, 431, 432, 980, 433, 434, 518, 435,
	436, 0, 437, 438, 439, 440, 412, 441, 445, 446,
	442, 443, 444, 987, 0, 448, 449, 447, 0, 450,
	451, 452, 453, 454, 280, 455, 0, 456, 520, 521,
	522, 523, 0, 463, 0, 457, 458, 988, 459, 989,
	0, 460, 461, 462, 0, 464, 465, 0, 0, 466,
	467, 468, 470, 471, 469, 473, 954, 474, 0, 472,
	475, 476, 477, 526, 527, 528, 0, 479, 478, 529,
	1012, 0, 1030, 0, 480, 481, 530, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	1020, 956, 1018, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 955, 240,
	490, 491, 492, 0, 241, 962, 0, 943, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 965, 257,
	258, 946, 944, 945, 952, 948, 947, 951, 259, 260,
	261, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 983, 984, 0, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 966, 293, 294, 0,
	295, 990, 0, 501, 296, 0, 297, 298, 299, 300,
	957, 958, 961, 355, 968, 301, 302, 0, 303, 304,
	306, 0, 0, 216, 305, 307, 314, 0, 967, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 969, 959, 970, 316, 317, 318, 971, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 1016, 327, 326,
	0, 328, 991, 972, 329, 330, 973, 0, 331, 332,
	950, 949, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 974, 347, 348,
	351, 352, 350, 975, 349, 0, 217, 976, 353, 0,
	960, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	1022, 362, 363, 364, 0, 0, 365, 366, 512, 977,
	367, 978, 985, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 986, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 979,
	404, 405, 406, 407, 517, 1024, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 953, 430, 410, 411,
	431, 432, 980, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	987, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 988, 459, 989, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 954, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 0, 479, 478, 529, 1030, 0, 0,
	0, 480, 481, 530, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 956, 1020, 0, 1018,
	0, 224, 226, 225, 227, 228, 486, 487, 229, 488,
	232, 230, 231, 489, 0, 233, 234, 235, 236, 237,
	238, 239, 0, 955, 240, 490, 491, 492, 0, 241,
	962, 0, 943, 0, 242, 243, 244, 245, 246, 247,
	0, 249, 250, 251, 248, 0, 252, 0, 253, 254,
	255, 0, 256, 965, 257, 258, 946, 944, 945, 952,
	948, 947, 951, 259, 260, 261, 262, 263, 264, 494,
	495, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	496, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	983, 984, 0, 215, 0, 0, 0, 0, 0, 286,
	287, 288, 499, 289, 290, 0, 291, 0, 292, 0,
	0, 966, 293, 294, 0, 295, 990, 0, 501, 296,
	0, 297, 298, 299, 300, 957, 958, 961, 355, 968,
	301, 302, 0, 303, 304, 306, 0, 0, 216, 305,
	307, 314, 0, 967, 308, 505, 310, 309, 311, 312,
	313, 506, 0, 507, 0, 315, 969, 959, 970, 316,
	317, 318, 971, 319, 320, 0, 0, 321, 322, 323,
	324, 325, 1016, 327, 326, 0, 328, 991, 972, 329,
	330, 973, 0, 331, 332, 950, 949, 333, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 974, 347, 348, 351, 352, 350, 975, 349,
	0, 217, 976, 353, 0, 960, 354, 511, 356, 357,
	0, 358, 359, 360, 0, 1022, 362, 363, 364, 0,
	0, 365, 366, 512, 977, 367, 978, 985, 368, 361,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 377,
	986, 378, 515, 379, 0, 380, 0, 381, 382, 383,
	384, 385, 386, 387, 516, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 979, 404, 405, 406, 407, 517,
	1024, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	429, 953, 430, 410, 411, 431, 432, 980, 433, 434,
	518, 435, 436, 0, 437, 438, 439, 440, 412, 441,
	445, 446, 442, 443, 444, 987, 0, 448, 449, 447,
	0, 450, 451, 452, 453, 454, 280, 455, 0, 456,
	520, 521, 522, 523, 0, 463, 0, 457, 458, 988,
	459, 989, 0, 460, 461, 462, 0, 464, 465, 0,
	0, 466, 467, 468, 470, 471, 469, 473, 954, 474,
	0, 472, 475, 476, 477, 526, 527, 528, 0, 479,
	478, 529, 1030, 0, 0, 0, 480, 481, 530, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 956, 1020, 0, 1018, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 955, 240,
	490, 491, 492, 0, 241, 962, 0, 943, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 965, 257,
	258, 946, 944, 945, 952, 948, 947, 951, 259, 260,
	261, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 983, 984, 0, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 966, 293, 294, 0,
	295, 990, 0, 501, 296, 0, 297, 298, 299, 300,
	957, 958, 961, 355, 968, 301, 302, 0, 303, 304,
	306, 0, 0, 216, 305, 307, 314, 0, 967, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 969, 959, 970, 316, 317, 318, 971, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 991, 972, 329, 330, 973, 0, 331, 332,
	950, 949, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 974, 347, 348,
	351, 352, 350, 975, 349, 0, 217, 976, 353, 0,
	960, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 977,
	367, 978, 985, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 986, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 979,
	404, 405, 406, 407, 517, 1024, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 953, 430, 410, 411,
	431, 432, 980, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	987, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 988, 459, 989, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 954, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 0, 479, 478, 529, 839, 0, 1201,
	0, 480, 481, 530, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 485, 1537,
	0, 0, 0, 224, 226, 225, 227, 228, 486, 487,
	229, 488, 232, 230, 231, 489, 0, 233, 234, 235,
	236, 237, 238, 239, 0, 0, 240, 490, 491, 492,
	0, 241, 493, 0, 1093, 0, 242, 243, 244, 245,
	246, 247, 0, 249, 250, 251, 248, 0, 252, 0,
	253, 254, 255, 0, 256, 965, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 494, 495, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 496, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 497, 498, 0, 215, 0, 0, 0, 0,
	0, 286, 287, 288, 499, 289, 290, 0, 291, 0,
	292, 0, 0, 966, 293, 294, 0, 295, 500, 0,
	501, 296, 0, 297, 298, 299, 300, 502, 503, 504,
	355, 968, 301, 302, 0, 303, 304, 306, 0, 0,
	0, 305, 307, 314, 0, 967, 308, 505, 310, 309,
	311, 312, 313, 506, 0, 507, 0, 315, 969, 508,
	970, 316, 317, 318, 971, 319, 320, 0, 0, 321,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 509,
	972, 329, 330, 973, 0, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 974, 347, 348, 351, 352, 350,
	975, 349, 0, 0, 976, 353, 0, 510, 354, 511,
	356, 357, 0, 358, 359, 360, 0, 0, 362, 363,
	364, 0, 0, 365, 366, 512, 977, 367, 978, 513,
	368, 361, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 377, 514, 378, 515, 379, 0, 380, 0, 381,
	382, 383, 384, 385, 386, 387, 516, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 979, 404, 405, 406,
	407, 517, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 181, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 429, 0, 430, 410, 411, 431, 432, 980,
	433, 434, 518, 435, 436, 0, 437, 438, 439, 440,
	412, 441, 445, 446, 442, 443, 444, 519, 0, 448,
	449, 447, 183, 450, 451, 452, 453, 454, 280, 455,
	0, 456, 520, 521, 522, 523, 0, 463, 0, 457,
	458, 524, 459, 525, 0, 460, 461, 462, 0, 464,
	465, 0, 0, 466, 467, 468, 470, 471, 469, 473,
	0, 474, 0, 472, 475, 476, 477, 1337, 527, 528,
	0, 479, 478, 529, 1334, 0, 1201, 175, 480, 481,
	530, 482, 483, 484, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 485, 150, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 487, 229, 488, 232,
	230, 231, 489, 0, 233, 234, 235, 236, 237, 238,
	239, 0, 0, 240, 490, 491, 492, 0, 241, 493,
	0, 1093, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 965, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 494, 495,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 496,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 497,
	498, 0, 215, 0, 0, 0, 0, 0, 286, 287,
	288, 499, 289, 290, 0, 291, 0, 292, 0, 0,
	966, 293, 294, 0, 295, 500, 0, 501, 296, 0,
	297, 298, 299, 300, 502, 503, 504, 355, 968, 301,
	302, 0, 303, 304, 306, 0, 0, 0, 305, 307,
	314, 0, 967, 308, 505, 310, 309, 311, 312, 313,
	506, 0, 507, 0, 315, 969, 508, 970, 316, 317,
	318, 971, 319, 320, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 509, 972, 329, 330,
	973, 0, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 974, 347, 348, 351, 352, 350, 975, 349, 0,
	0, 976, 353, 0, 510, 354, 511, 356, 357, 0,
	358, 359, 360, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 977, 367, 978, 513, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 514,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 516, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 979, 404, 405, 406, 407, 517, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 181,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 429,
	0, 430, 410, 411, 431, 432, 980, 433, 434, 518,
	435, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	446, 442, 443, 444, 519, 0, 448, 449, 447, 183,
	450, 451, 452, 453, 454, 280, 455, 0, 456, 520,
	521, 522, 523, 0, 463, 0, 457, 458, 524, 459,
	525, 0, 460, 461, 462, 0, 464, 465, 0, 0,
	466, 467, 468, 470, 471, 469, 473, 0, 474, 0,
	472, 475, 476, 477, 1337, 527, 528, 0, 479, 478,
	529, 0, 0, 0, 175, 480, 481, 530, 482, 483,
	484, 0, 176, 0, 0, 0, 0, 1201, 1200, 0,
	0, 0, 0, 1198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 486, 487, 229, 488,
	232, 230, 231, 489, 0, 233, 234, 235, 236, 237,
	238, 239, 0, 0, 240, 490, 491, 492, 0, 241,
	493, 0, 1093, 0, 242, 243, 244, 245, 246, 247,
	0, 249, 250, 251, 248, 0, 252, 0, 253, 254,
	255, 0, 256, 965, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 494,
	495, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	496, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	497, 498, 0, 215, 0, 0, 0, 0, 0, 286,
	287, 288, 499, 289, 290, 0, 291, 0, 292, 0,
	0, 966, 293, 294, 0, 295, 500, 0, 501, 296,
	0, 297, 298, 299, 300, 502, 503, 504, 355, 968,
	301, 302, 0, 303, 304, 306, 0, 0, 0, 305,
	307, 314, 0, 967, 308, 505, 310, 309, 311, 312,
	313, 506, 0, 507, 0, 315, 969, 508, 970, 316,
	317, 318, 971, 319, 320, 0, 0, 321, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 509, 972, 329,
	330, 973, 0, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 974, 347, 348, 351, 352, 350, 975, 349,
	0, 0, 976, 353, 0, 510, 354, 511, 356, 357,
	0, 358, 359, 360, 0, 0, 362, 363, 364, 0,
	0, 365, 366, 512, 977, 367, 978, 513, 368, 361,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 377,
	514, 378, 515, 379, 0, 380, 0, 381, 382, 383,
	384, 385, 386, 387, 516, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 979, 404, 405, 406, 407, 517,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	429, 0, 430, 410, 411, 431, 432, 980, 433, 434,
	518, 435, 436, 0, 437, 438, 439, 440, 412, 441,
	445, 446, 442, 443, 444, 519, 0, 448, 449, 447,
	0, 450, 451, 452, 453, 454, 280, 455, 0, 456,
	520, 521, 522, 523, 0, 463, 0, 457, 458, 524,
	459, 525, 0, 460, 461, 462, 0, 464, 465, 0,
	0, 466, 467, 468, 470, 471, 469, 473, 0, 474,
	0, 472, 475, 476, 477, 526, 527, 528, 0, 479,
	478, 529, 0, 0, 0, 0, 480, 481, 530, 482,
	483, 484, 1201, 1200, 0, 0, 0, 0, 1198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 2902, 223, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 0, 240,
	490, 491, 492, 0, 241, 493, 0, 1093, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 965, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 497, 498, 0, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 966, 293, 294, 0,
	295, 500, 0, 501, 296, 0, 297, 298, 299, 300,
	502, 503, 504, 355, 968, 301, 302, 0, 303, 304,
	306, 0, 0, 0, 305, 307, 314, 0, 967, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 969, 508, 970, 316, 317, 318, 971, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 509, 972, 329, 330, 973, 0, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 974, 347, 348,
	351, 352, 350, 975, 349, 0, 0, 976, 353, 0,
	510, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 977,
	367, 978, 513, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 514, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 979,
	404, 405, 406, 407, 517, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 0, 430, 410, 411,
	431, 432, 980, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	519, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 524, 459, 525, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 0, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 0, 479, 478, 529, 0, 0, 0,
	0, 480, 481, 530, 482, 483, 484, 1201, 1200, 0,
	0, 0, 0, 1198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 1207,
	223, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 486, 487, 229, 488,
	232, 230, 231, 489, 0, 233, 234, 235, 236, 237,
	238, 239, 0, 0, 240, 490, 491, 492, 0, 241,
	493, 0, 1093, 0, 242, 243, 244, 245, 246, 247,
	0, 249, 250, 251, 248, 0, 252, 0, 253, 254,
	255, 0, 256, 965, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 494,
	495, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	496, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	497, 498, 0, 215, 0, 0, 0, 0, 0, 286,
	287, 288, 499, 289, 290, 0, 291, 0, 292, 0,
	0, 966, 293, 294, 0, 295, 500, 0, 501, 296,
	0, 297, 298, 299, 300, 502, 503, 504, 355, 968,
	301, 302, 0, 303, 304, 306, 0, 0, 0, 305,
	307, 314, 0, 967, 308, 505, 310, 309, 311, 312,
	313, 506, 0, 507, 0, 315, 969, 508, 970, 316,
	317, 318, 971, 319, 320, 0, 0, 321, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 509, 972, 329,
	330, 973, 0, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 974, 347, 348, 351, 352, 350, 975, 349,
	0, 0, 976, 353, 0, 510, 354, 511, 356, 357,
	0, 358, 359, 360, 0, 0, 362, 363, 364, 0,
	0, 365, 366, 512, 977, 367, 978, 513, 368, 361,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 377,
	514, 378, 515, 379, 0, 380, 0, 381, 382, 383,
	384, 385, 386, 387, 516, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 979, 404, 405, 406, 407, 517,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	429, 0, 430, 410, 411, 431, 432, 980, 433, 434,
	518, 435, 436, 0, 437, 438, 439, 440, 412, 441,
	445, 446, 442, 443, 444, 519, 0, 448, 449, 447,
	0, 450, 451, 452, 453, 454, 280, 455, 0, 456,
	520, 521, 522, 523, 0, 463, 0, 457, 458, 524,
	459, 525, 0, 460, 461, 462, 0, 464, 465, 0,
	0, 466, 467, 468, 470, 471, 469, 473, 0, 474,
	0, 472, 475, 476, 477, 526, 527, 528, 0, 479,
	478, 529, 1030, 0, 0, 0, 480, 481, 530, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 956, 0, 0, 1344, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 955, 240,
	490, 491, 492, 0, 241, 962, 0, 943, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 965, 257,
	258, 946, 944, 945, 952, 948, 947, 951, 259, 260,
	261, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 983, 984, 0, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 966, 293, 294, 0,
	295, 990, 0, 501, 296, 0, 297, 298, 299, 300,
	957, 958, 961, 355, 968, 301, 302, 0, 303, 304,
	306, 0, 0, 216, 305, 307, 314, 0, 967, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 969, 959, 970, 316, 317, 318, 971, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 991, 972, 329, 330, 973, 0, 331, 332,
	950, 949, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 974, 347, 348,
	351, 352, 350, 975, 349, 0, 217, 976, 353, 0,
	960, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 977,
	367, 978, 985, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 986, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 979,
	404, 405, 406, 407, 517, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 953, 430, 410, 411,
	431, 432, 980, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	987, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 988, 459, 989, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 954, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 0, 479, 478, 529, 839, 0, 212,
	0, 480, 481, 530, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 486, 487,
	229, 488, 232, 230, 231, 489, 0, 233, 234, 235,
	236, 237, 238, 239, 0, 0, 240, 490, 491, 492,
	0, 241, 493, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 0, 249, 250, 251, 248, 0, 252, 0,
	253, 254, 255, 0, 256, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 494, 495, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 496, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 286, 287, 288, 499, 289, 290, 0, 291, 0,
	292, 0, 0, 0, 293, 294, 0, 295, 500, 0,
	501, 296, 0, 297, 298, 299, 300, 502, 503, 504,
	355, 0, 301, 302, 0, 303, 304, 306, 0, 0,
	0, 305, 307, 314, 0, 0, 308, 505, 310, 309,
	311, 312, 313, 506, 0, 507, 0, 315, 0, 508,
	0, 316, 317, 318, 0, 319, 320, 0, 0, 321,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 509,
	0, 329, 330, 0, 0, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 0, 347, 348, 351, 352, 350,
	0, 349, 0, 0, 0, 353, 0, 510, 354, 511,
	356, 357, 0, 358, 359, 360, 0, 0, 362, 363,
	364, 0, 0, 365, 366, 512, 0, 367, 0, 513,
	368, 361, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 377, 514, 378, 515, 379, 0, 380, 0, 381,
	382, 383, 384, 385, 386, 387, 516, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 517, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 181, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 429, 0, 430, 410, 411, 431, 432, 0,
	433, 434, 518, 435, 436, 0, 437, 438, 439, 440,
	412, 441, 445, 446, 442, 443, 444, 519, 0, 448,
	449, 447, 183, 450, 451, 452, 453, 454, 280, 455,
	0, 456, 520, 521, 522, 523, 0, 463, 0, 457,
	458, 524, 459, 525, 0, 460, 461, 462, 0, 464,
	465, 0, 0, 466, 467, 468, 470, 471, 469, 473,
	0, 474, 0, 472, 475, 476, 477, 1337, 527, 528,
	0, 479, 478, 529, 212, 0, 0, 175, 480, 481,
	530, 482, 483, 484, 0, 176, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 485, 0, 0, 150, 0, 224, 226,
	225, 227, 228, 486, 487, 229, 488, 232, 230, 231,
	489, 0, 233, 234, 235, 236, 237, 238, 239, 0,
	0, 240, 490, 491, 492, 0, 241, 493, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 254, 255, 0, 256,
	0, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 494, 495, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 496, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 497, 498, 0,
	215, 0, 0, 0, 0, 0, 286, 287, 288, 499,
	289, 290, 0, 291, 0, 292, 0, 0, 0, 293,
	294, 0, 295, 500, 0, 501, 296, 0, 297, 298,
	299, 300, 502, 503, 504, 355, 0, 301, 302, 0,
	303, 304, 306, 0, 0, 216, 305, 307, 314, 0,
	0, 308, 505, 310, 309, 311, 312, 313, 506, 0,
	507, 0, 315, 0, 508, 0, 316, 317, 318, 0,
	319, 320, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 509, 0, 329, 330, 0, 0,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 0,
	347, 348, 351, 352, 350, 0, 349, 0, 217, 0,
	353, 0, 510, 354, 511, 356, 357, 0, 358, 359,
	360, 0, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 0, 367, 0, 513, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 514, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 516, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 517, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 429, 0, 430,
	410, 411, 431, 432, 0, 433, 434, 518, 435, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 446, 442,
	443, 444, 519, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 455, 0, 456, 520, 521, 522,
	523, 0, 463, 0, 457, 458, 524, 459, 525, 0,
	460, 461, 462, 0, 464, 465, 0, 0, 466, 467,
	468, 470, 471, 469, 473, 0, 474, 0, 472, 475,
	476, 477, 526, 527, 528, 0, 479, 478, 529, 1287,
	0, 212, 0, 480, 481, 530, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	485, 1650, 0, 0, 0, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 0, 233,
	234, 235, 236, 237, 238, 239, 0, 0, 240, 490,
	491, 492, 0, 241, 493, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 0,
	252, 0, 253, 254, 255, 0, 256, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 494, 495, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 0, 215, 0, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	500, 0, 501, 296, 0, 297, 298, 299, 300, 502,
	503, 504, 355, 0, 301, 302, 0, 303, 304, 306,
	0, 0, 216, 305, 307, 314, 0, 0, 308, 505,
	310, 309, 311, 312, 313, 506, 0, 507, 0, 315,
	0, 508, 0, 316, 317, 318, 0, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 509, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	352, 350, 0, 349, 0, 217, 0, 353, 0, 510,
	354, 511, 356, 357, 0, 358, 359, 360, 0, 0,
	362, 363, 364, 0, 0, 365, 366, 512, 0, 367,
	0, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 377, 514, 378, 515, 379, 0, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 0, 430, 410, 411, 431,
	432, 0, 433, 434, 518, 435, 436, 0, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	0, 448, 449, 447, 0, 450, 451, 452, 453, 454,
	280, 455, 0, 456, 520, 521, 522, 523, 0, 463,
	0, 457, 458, 524, 459, 525, 0, 460, 461, 462,
	0, 464, 465, 0, 0, 466, 467, 468, 470, 471,
	469, 473, 0, 474, 0, 472, 475, 476, 477, 526,
	527, 528, 0, 479, 478, 529, 212, 0, 0, 0,
	480, 481, 530, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 485, 1291, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 487, 229, 488, 232,
	230, 231, 489, 0, 233, 234, 235, 236, 237, 238,
	239, 0, 0, 240, 490, 491, 492, 0, 241, 493,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 0, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 494, 495,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 496,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 497,
	498, 0, 215, 0, 0, 0, 0, 0, 286, 287,
	288, 499, 289, 290, 0, 291, 0, 292, 0, 0,
	0, 293, 294, 0, 295, 500, 0, 501, 296, 0,
	297, 298, 299, 300, 502, 503, 504, 355, 0, 301,
	302, 0, 303, 304, 306, 0, 0, 216, 305, 307,
	314, 0, 0, 308, 505, 310, 309, 311, 312, 313,
	506, 0, 507, 0, 315, 0, 508, 0, 316, 317,
	318, 0, 319, 320, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 509, 0, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 352, 350, 0, 349, 0,
	217, 0, 353, 0, 510, 354, 511, 356, 357, 0,
	358, 359, 360, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 0, 367, 0, 513, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 514,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 516, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 517, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 429,
	0, 430, 410, 411, 431, 432, 0, 433, 434, 518,
	435, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	446, 442, 443, 444, 519, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 455, 0, 456, 520,
	521, 522, 523, 0, 463, 0, 457, 458, 524, 459,
	525, 0, 460, 461, 462, 0, 464, 465, 0, 0,
	466, 467, 468, 470, 471, 469, 473, 0, 474, 0,
	472, 475, 476, 477, 526, 527, 528, 0, 479, 478,
	529, 212, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	485, 2852, 0, 0, 0, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 0, 233,
	234, 235, 236, 237, 238, 239, 0, 0, 240, 490,
	491, 492, 0, 241, 493, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 0,
	252, 0, 253, 254, 255, 0, 256, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 494, 495, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 0, 215, 0, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	500, 0, 501, 296, 0, 297, 298, 299, 300, 502,
	503, 504, 355, 0, 301, 302, 0, 303, 304, 306,
	0, 0, 216, 305, 307, 314, 0, 0, 308, 505,
	310, 309, 311, 312, 313, 506, 0, 507, 0, 315,
	0, 508, 0, 316, 317, 318, 0, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 509, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	352, 350, 0, 349, 0, 217, 0, 353, 0, 510,
	354, 511, 356, 357, 0, 358, 359, 360, 0, 0,
	362, 363, 364, 0, 0, 365, 366, 512, 0, 367,
	0, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 377, 514, 378, 515, 379, 0, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 0, 430, 410, 411, 431,
	432, 0, 433, 434, 518, 435, 436, 0, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	0, 448, 449, 447, 0, 450, 451, 452, 453, 454,
	280, 455, 0, 456, 520, 521, 522, 523, 0, 463,
	0, 457, 458, 524, 459, 525, 0, 460, 461, 462,
	0, 464, 465, 0, 0, 466, 467, 468, 470, 471,
	469, 473, 0, 474, 0, 472, 475, 476, 477, 526,
	527, 528, 0, 479, 478, 529, 212, 0, 0, 0,
	480, 481, 530, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 485, 1291, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 487, 229, 488, 232,
	230, 231, 489, 0, 233, 234, 235, 236, 237, 238,
	239, 0, 0, 240, 490, 491, 492, 0, 241, 493,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 0, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 494, 495,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 496,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 286, 287,
	288, 499, 289, 290, 0, 291, 0, 292, 0, 0,
	0, 293, 294, 0, 295, 500, 0, 501, 296, 0,
	297, 298, 299, 300, 502, 503, 504, 355, 0, 301,
	302, 0, 303, 304, 306, 0, 0, 0, 305, 307,
	314, 0, 0, 308, 505, 310, 309, 311, 312, 313,
	506, 0, 507, 0, 315, 0, 508, 0, 316, 317,
	318, 0, 319, 320, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 509, 0, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 352, 350, 0, 349, 0,
	0, 0, 353, 0, 510, 354, 511, 356, 357, 0,
	358, 359, 360, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 0, 367, 0, 513, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 514,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 516, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 517, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 429,
	0, 430, 410, 411, 431, 432, 0, 433, 434, 518,
	435, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	446, 442, 443, 444, 519, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 455, 0, 456, 520,
	521, 522, 523, 0, 463, 0, 457, 458, 524, 459,
	525, 0, 460, 461, 462, 0, 464, 465, 0, 0,
	466, 467, 468, 470, 471, 469, 473, 0, 474, 0,
	472, 475, 476, 477, 526, 527, 528, 0, 479, 478,
	529, 212, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	485, 0, 0, 2451, 0, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 0, 233,
	234, 235, 236, 237, 238, 239, 0, 0, 240, 490,
	491, 492, 0, 241, 493, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 0,
	252, 0, 253, 254, 255, 0, 256, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 494, 495, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 0, 0, 0, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	500, 0, 501, 296, 0, 297, 298, 299, 300, 502,
	503, 504, 355, 0, 301, 302, 0, 303, 304, 306,
	0, 0, 0, 305, 307, 314, 0, 0, 308, 505,
	310, 309, 311, 312, 313, 506, 0, 507, 0, 315,
	0, 508, 0, 316, 317, 318, 0, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 509, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	352, 350, 0, 349, 0, 0, 0, 353, 0, 510,
	354, 511, 356, 357, 0, 358, 359, 360, 0, 0,
	362, 363, 364, 0, 0, 365, 366, 512, 0, 367,
	0, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 377, 514, 378, 515, 379, 0, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 0, 430, 410, 411, 431,
	432, 0, 433, 434, 518, 435, 436, 0, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	0, 448, 449, 447, 0, 450, 451, 452, 453, 454,
	280, 455, 0, 456, 520, 521, 522, 523, 0, 463,
	0, 457, 458, 524, 459, 525, 0, 460, 461, 462,
	0, 464, 465, 0, 0, 466, 467, 468, 470, 471,
	469, 473, 0, 474, 0, 472, 475, 476, 477, 526,
	527, 528, 0, 479, 478, 529, 212, 0, 0, 0,
	480, 481, 530, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 485, 0, 0, 2990, 0,
	224, 226, 225, 227, 228, 486, 487, 229, 488, 232,
	230, 231, 489, 0, 233, 234, 235, 236, 237, 238,
	239, 0, 0, 240, 490, 491, 492, 0, 241, 493,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 0, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 494, 495,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 496,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 286, 287,
	288, 499, 289, 290, 0, 291, 0, 292, 0, 0,
	0, 293, 294, 0, 295, 500, 0, 501, 296, 0,
	297, 298, 299, 300, 502, 503, 504, 355, 0, 301,
	302, 0, 303, 304, 306, 0, 0, 0, 305, 307,
	314, 0, 0, 308, 505, 310, 309, 311, 312, 313,
	506, 0, 507, 0, 315, 0, 508, 0, 316, 317,
	318, 0, 319, 320, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 509, 0, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 352, 350, 0, 349, 0,
	0, 0, 353, 0, 510, 354, 511, 356, 357, 0,
	358, 359, 360, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 0, 367, 0, 513, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 514,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 516, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 517, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 429,
	0, 430, 410, 411, 431, 432, 0, 433, 434, 518,
	435, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	446, 442, 443, 444, 519, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 455, 0, 456, 520,
	521, 522, 523, 0, 463, 0, 457, 458, 524, 459,
	525, 0, 460, 461, 462, 0, 464, 465, 0, 0,
	466, 467, 468, 470, 471, 469, 473, 0, 474, 0,
	472, 475, 476, 477, 526, 527, 528, 0, 479, 478,
	529, 708, 0, 601, 0, 480, 481, 530, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 485, 1921, 0, 0, 0, 224, 226, 225,
	227, 228, 486, 487, 229, 488, 232, 230, 231, 489,
	0, 233, 234, 235, 236, 237, 238, 239, 0, 0,
	240, 490, 491, 492, 0, 241, 493, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 0, 249, 250, 251,
	248, 0, 252, 0, 253, 254, 255, 0, 256, 0,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 607, 262, 263, 264, 494, 495, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 496, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 497, 498, 0, 215,
	0, 0, 0, 0, 0, 286, 287, 288, 499, 289,
	290, 0, 291, 0, 292, 0, 706, 0, 293, 294,
	0, 295, 500, 0, 501, 296, 0, 297, 298, 299,
	300, 502, 503, 504, 355, 0, 301, 302, 0, 303,
	304, 306, 0, 0, 216, 305, 307, 314, 0, 0,
	308, 505, 310, 309, 311, 312, 313, 506, 0, 507,
	0, 315, 0, 508, 0, 316, 317, 318, 0, 319,
	320, 0, 0, 321, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 509, 0, 329, 330, 0, 0, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 0, 347,
	348, 351, 352, 350, 0, 349, 0, 217, 0, 353,
	0, 510, 354, 511, 356, 357, 0, 358, 359, 360,
	0, 0, 362, 363, 364, 0, 0, 365, 366, 512,
	0, 367, 0, 513, 368, 361, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 377, 514, 378, 515, 379,
	0, 380, 0, 381, 382, 383, 384, 385, 386, 387,
	516, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 517, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 429, 0, 430, 410,
	411, 431, 432, 0, 433, 434, 518, 435, 436, 0,
	437, 438, 439, 440, 412, 441, 445, 446, 442, 443,
	444, 519, 0, 448, 449, 447, 606, 450, 451, 452,
	453, 454, 280, 455, 0, 456, 520, 521, 522, 523,
	0, 463, 0, 457, 458, 524, 459, 525, 0, 460,
	461, 462, 0, 464, 465, 0, 0, 466, 467, 468,
	470, 471, 469, 473, 0, 474, 0, 472, 475, 476,
	477, 526, 527, 528, 0, 479, 478, 529, 0, 600,
	0, 601, 480, 481, 530, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 610, 223, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 0, 233,
	234, 235, 236, 237, 238, 239, 0, 0, 240, 490,
	491, 492, 0, 241, 493, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 0,
	252, 0, 253, 254, 255, 0, 256, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 607,
	262, 263, 264, 494, 495, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 0, 215, 0, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	500, 0, 501, 296, 0, 297, 298, 299, 300, 502,
	503, 504, 355, 0, 301, 302, 0, 303, 304, 306,
	0, 0, 216, 305, 307, 314, 0, 0, 308, 505,
	310, 309, 311, 312, 313, 506, 0, 507, 0, 315,
	0, 508, 0, 316, 317, 318, 0, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 509, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	352, 350, 0, 349, 0, 217, 0, 353, 0, 510,
	354, 511, 356, 357, 0, 358, 359, 360, 0, 0,
	362, 363, 364, 0, 0, 365, 366, 512, 0, 367,
	0, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 377, 514, 378, 515, 379, 0, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 0, 430, 410, 411, 431,
	432, 0, 433, 434, 518, 435, 436, 0, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	0, 448, 449, 447, 606, 450, 451, 452, 453, 454,
	280, 455, 0, 456, 520, 521, 522, 523, 598, 463,
	0, 457, 458, 524, 459, 525, 0, 460, 461, 462,
	0, 464, 465, 0, 0, 466, 467, 468, 470, 471,
	469, 473, 0, 474, 0, 472, 475, 476, 477, 526,
	527, 528, 0, 479, 478, 529, 0, 0, 0, 0,
	480, 481, 530, 482, 483, 484, 1201, 1200, 0, 0,
	0, 0, 1198, 0, 0, 0, 0, 0, 0, 0,
	0, 610, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 487, 229, 488, 232,
	230, 231, 489, 0, 233, 234, 235, 236, 237, 238,
	239, 0, 0, 240, 490, 491, 492, 0, 241, 493,
	0, 1093, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 965, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 494, 495,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 496,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 497,
	498, 0, 215, 0, 0, 0, 0, 0, 286, 287,
	288, 499, 289, 290, 0, 291, 0, 292, 0, 0,
	966, 293, 294, 0, 295, 500, 0, 501, 296, 0,
	297, 298, 299, 300, 502, 503, 504, 355, 968, 301,
	302, 0, 303, 304, 306, 0, 0, 0, 305, 307,
	314, 0, 967, 308, 505, 310, 309, 311, 312, 313,
	506, 0, 507, 0, 315, 969, 508, 970, 316, 317,
	318, 971, 319, 320, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 509, 972, 329, 330,
	973, 0, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 974, 347, 348, 351, 352, 350, 975, 349, 0,
	0, 976, 353, 3127, 510, 354, 511, 356, 357, 0,
	358, 359, 360, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 977, 367, 978, 513, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 514,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 516, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 979, 404, 405, 406, 407, 517, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 429,
	0, 430, 410, 411, 431, 432, 980, 433, 434, 518,
	435, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	446, 442, 443, 444, 519, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 455, 0, 456, 520,
	521, 522, 523, 0, 463, 0, 457, 458, 524, 459,
	525, 0, 460, 461, 462, 0, 464, 465, 0, 0,
	466, 467, 468, 470, 471, 469, 473, 0, 474, 0,
	472, 475, 476, 477, 526, 527, 528, 0, 479, 478,
	529, 0, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 1201, 1200, 0, 0, 0, 0, 1198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 0, 233,
	234, 235, 236, 237, 238, 239, 0, 0, 240, 490,
	491, 492, 0, 241, 493, 0, 1093, 0, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 0,
	252, 0, 253, 254, 255, 0, 256, 965, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 494, 495, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 0, 215, 0, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 0, 292, 0, 0, 966, 293, 294, 0, 295,
	500, 0, 501, 296, 0, 297, 298, 299, 300, 502,
	503, 504, 355, 968, 301, 302, 0, 303, 304, 306,
	0, 0, 0, 305, 307, 314, 0, 967, 308, 505,
	310, 309, 311, 312, 313, 506, 0, 507, 0, 315,
	969, 508, 970, 316, 317, 318, 971, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 509, 972, 329, 330, 973, 0, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 974, 347, 348, 351,
	352, 350, 975, 349, 0, 0, 976, 353, 2832, 510,
	354, 511, 356, 357, 0, 358, 359, 360, 0, 0,
	362, 363, 364, 0, 0, 365, 366, 512, 977, 367,
	978, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 377, 514, 378, 515, 379, 0, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 979, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 0, 430, 410, 411, 431,
	432, 980, 433, 434, 518, 435, 436, 0, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	0, 448, 449, 447, 0, 450, 451, 452, 453, 454,
	280, 455, 0, 456, 520, 521, 522, 523, 0, 463,
	0, 457, 458, 524, 459, 525, 0, 460, 461, 462,
	0, 464, 465, 0, 0, 466, 467, 468, 470, 471,
	469, 473, 0, 474, 0, 472, 475, 476, 477, 526,
	527, 528, 601, 479, 478, 529, 0, 0, 0, 0,
	480, 481, 530, 482, 483, 484, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 0, 240,
	490, 491, 492, 0, 241, 493, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	607, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 497, 498, 0, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 500, 0, 501, 296, 0, 297, 298, 299, 300,
	502, 503, 504, 355, 0, 301, 302, 0, 303, 304,
	306, 0, 0, 216, 305, 307, 314, 0, 0, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 0, 508, 0, 316, 317, 318, 0, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 509, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 352, 350, 0, 349, 0, 217, 0, 353, 0,
	510, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 0,
	367, 0, 513, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 514, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	1955, 405, 406, 407, 517, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 0, 430, 410, 411,
	431, 432, 0, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	519, 0, 448, 449, 447, 606, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 524, 459, 525, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 0, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 0, 479, 478, 529, 601, 0, 0,
	0, 480, 481, 530, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 610, 0, 0, 0, 485, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 486, 487, 229, 488,
	232, 230, 231, 489, 0, 233, 234, 235, 236, 237,
	238, 239, 0, 0, 240, 490, 491, 492, 0, 241,
	493, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	0, 249, 250, 251, 248, 0, 252, 0, 253, 254,
	255, 0, 256, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 607, 262, 263, 264, 494,
	495, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	496, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	497, 498, 0, 215, 0, 0, 0, 0, 0, 286,
	287, 288, 499, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 500, 0, 501, 296,
	0, 297, 298, 299, 300, 502, 503, 504, 355, 0,
	301, 302, 0, 303, 304, 306, 0, 0, 216, 305,
	307, 314, 0, 0, 308, 505, 310, 309, 311, 312,
	313, 506, 0, 507, 0, 315, 0, 508, 0, 316,
	317, 318, 0, 319, 320, 0, 0, 321, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 509, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 352, 350, 0, 349,
	0, 217, 0, 353, 0, 510, 354, 511, 356, 357,
	0, 358, 359, 360, 0, 0, 362, 363, 364, 0,
	0, 365, 366, 512, 0, 367, 0, 513, 368, 361,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 377,
	514, 378, 515, 379, 0, 380, 0, 381, 382, 383,
	384, 385, 386, 387, 516, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 517,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	429, 0, 430, 410, 411, 431, 432, 0, 433, 434,
	518, 435, 436, 0, 437, 438, 439, 440, 412, 441,
	445, 446, 442, 443, 444, 519, 0, 448, 449, 447,
	606, 450, 451, 452, 453, 454, 280, 455, 0, 456,
	520, 521, 522, 523, 0, 463, 0, 457, 458, 524,
	459, 525, 0, 460, 461, 462, 0, 464, 465, 0,
	0, 466, 467, 468, 470, 471, 469, 473, 0, 474,
	0, 472, 475, 476, 477, 526, 527, 528, 0, 479,
	478, 529, 0, 0, 0, 0, 480, 481, 530, 482,
	483, 484, 1371, 0, 1201, 1200, 0, 0, 0, 0,
	1198, 0, 0, 0, 0, 0, 0, 610, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 486, 487, 229, 488, 232, 230, 231,
	489, 0, 233, 234, 235, 236, 237, 238, 239, 0,
	0, 240, 490, 491, 492, 0, 241, 493, 0, 1093,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 254, 255, 0, 256,
	965, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 494, 495, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 496, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 497, 498, 0,
	215, 0, 0, 0, 0, 0, 1370, 287, 288, 499,
	289, 290, 0, 291, 0, 292, 0, 0, 966, 293,
	294, 0, 295, 500, 0, 501, 296, 0, 297, 298,
	299, 300, 502, 503, 504, 355, 968, 301, 302, 0,
	303, 304, 306, 0, 0, 0, 305, 307, 314, 0,
	967, 308, 505, 310, 309, 311, 312, 313, 506, 0,
	507, 0, 315, 969, 508, 970, 316, 317, 318, 971,
	319, 320, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 509, 972, 329, 330, 973, 0,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 974,
	347, 348, 351, 352, 350, 975, 349, 0, 0, 976,
	353, 0, 510, 354, 511, 356, 357, 0, 358, 359,
	360, 0, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 977, 367, 978, 513, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 514, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 1369,
	387, 516, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 979, 404, 405, 406, 407, 517, 408, 0, 409,
	413, 414, 415, 1368, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 429, 0, 430,
	410, 411, 431, 432, 980, 433, 434, 518, 435, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 446, 442,
	443, 444, 519, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 455, 0, 456, 520, 521, 522,
	523, 0, 463, 0, 457, 458, 524, 459, 525, 0,
	460, 461, 462, 0, 464, 465, 0, 0, 466, 467,
	468, 470, 471, 469, 473, 0, 474, 0, 472, 475,
	476, 477, 526, 527, 528, 0, 479, 478, 529, 0,
	0, 0, 0, 480, 481, 530, 482, 483, 484, 1331,
	0, 1201, 1200, 0, 0, 0, 0, 1198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 0, 233,
	234, 235, 236, 237, 238, 239, 0, 0, 240, 490,
	491, 492, 0, 241, 493, 0, 1093, 0, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 0,
	252, 0, 253, 254, 255, 0, 256, 965, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 494, 495, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 0, 215, 0, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 0, 292, 0, 0, 966, 293, 294, 0, 295,
	500, 0, 501, 296, 0, 297, 298, 299, 300, 1330,
	503, 504, 355, 968, 301, 302, 0, 303, 304, 306,
	0, 0, 0, 305, 307, 314, 0, 967, 308, 505,
	310, 309, 311, 312, 313, 506, 0, 507, 0, 315,
	969, 508, 970, 316, 317, 318, 971, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 509, 972, 329, 330, 973, 0, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 974, 347, 348, 351,
	352, 350, 975, 349, 0, 0, 976, 353, 0, 510,
	354, 511, 356, 357, 0, 358, 359, 360, 0, 0,
	362, 363, 364, 0, 0, 365, 366, 512, 977, 367,
	978, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 377, 514, 378, 515, 379, 0, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 979, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 0, 430, 410, 411, 431,
	432, 980, 433, 434, 518, 435, 436, 0, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	0, 448, 449, 447, 0, 450, 451, 452, 453, 454,
	280, 455, 0, 456, 520, 521, 522, 523, 0, 463,
	0, 457, 458, 524, 459, 525, 0, 460, 461, 462,
	0, 464, 465, 0, 0, 466, 467, 468, 470, 471,
	469, 473, 0, 474, 0, 472, 475, 476, 477, 526,
	527, 528, 0, 479, 478, 529, 0, 0, 0, 0,
	480, 481, 530, 482, 483, 484, 1267, 0, 1201, 1200,
	0, 0, 0, 0, 1198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 487, 229,
	488, 232, 230, 231, 489, 0, 233, 234, 235, 236,
	237, 238, 239, 0, 0, 240, 490, 491, 492, 0,
	241, 493, 0, 1093, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 965, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	494, 495, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 496, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 497, 498, 0, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 499, 289, 290, 0, 291, 0, 292,
	0, 0, 966, 293, 294, 0, 295, 500, 0, 501,
	296, 0, 297, 298, 299, 300, 1266, 503, 504, 355,
	968, 301, 302, 0, 303, 304, 306, 0, 0, 0,
	305, 307, 314, 0, 967, 308, 505, 310, 309, 311,
	312, 313, 506, 0, 507, 0, 315, 969, 508, 970,
	316, 317, 318, 971, 319, 320, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 509, 972,
	329, 330, 973, 0, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 974, 347, 348, 351, 352, 350, 975,
	349, 0, 0, 976, 353, 0, 510, 354, 511, 356,
	357, 0, 358, 359, 360, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 977, 367, 978, 513, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 514, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 516, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 979, 404, 405, 406, 407,
	517, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 429, 0, 430, 410, 411, 431, 432, 980, 433,
	434, 518, 435, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 446, 442, 443, 444, 519, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 455, 0,
	456, 520, 521, 522, 523, 0, 463, 0, 457, 458,
	524, 459, 525, 0, 460, 461, 462, 0, 464, 465,
	0, 0, 466, 467, 468, 470, 471, 469, 473, 0,
	474, 0, 472, 475, 476, 477, 526, 527, 528, 0,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 1196, 0, 1201, 1200, 0, 0, 0,
	0, 1198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 486, 487, 229, 488, 232, 230,
	231, 489, 0, 233, 234, 235, 236, 237, 238, 239,
	0, 0, 240, 490, 491, 492, 0, 241, 493, 0,
	1093, 0, 242, 243, 244, 245, 246, 247, 0, 249,
	250, 251, 248, 0, 252, 0, 253, 254, 255, 0,
	256, 965, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 494, 495, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 496, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 497, 498,
	0, 215, 0, 0, 0, 0, 0, 286, 287, 288,
	499, 289, 290, 0, 291, 0, 292, 0, 0, 966,
	293, 294, 0, 295, 500, 0, 501, 296, 0, 297,
	298, 299, 300, 1195, 503, 504, 355, 968, 301, 302,
	0, 303, 304, 306, 0, 0, 0, 305, 307, 314,
	0, 967, 308, 505, 310, 309, 311, 312, 313, 506,
	0, 507, 0, 315, 969, 508, 970, 316, 317, 318,
	971, 319, 320, 0, 0, 321, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 509, 972, 329, 330, 973,
	0, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	974, 347, 348, 351, 352, 350, 975, 349, 0, 0,
	976, 353, 0, 510, 354, 511, 356, 357, 0, 358,
	359, 360, 0, 0, 362, 363, 364, 0, 0, 365,
	366, 512, 977, 367, 978, 513, 368, 361, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 377, 514, 378,
	515, 379, 0, 380, 0, 381, 382, 383, 384, 385,
	386, 387, 516, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 979, 404, 405, 406, 407, 517, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 429, 0,
	430, 410, 411, 431, 432, 980, 433, 434, 518, 435,
	436, 0, 437, 438, 439, 440, 412, 441, 445, 446,
	442, 443, 444, 519, 0, 448, 449, 447, 0, 450,
	451, 452, 453, 454, 280, 455, 0, 456, 520, 521,
	522, 523, 0, 463, 0, 457, 458, 524, 459, 525,
	0, 460, 461, 462, 0, 464, 465, 0, 0, 466,
	467, 468, 470, 471, 469, 473, 0, 474, 0, 472,
	475, 476, 477, 526, 527, 528, 0, 479, 478, 529,
	0, 0, 0, 0, 480, 481, 530, 482, 483, 484,
	1201, 1200, 0, 0, 0, 0, 1198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 486,
	487, 229, 488, 232, 230, 231, 489, 0, 233, 234,
	235, 236, 237, 238, 239, 0, 0, 240, 490, 491,
	492, 0, 241, 493, 0, 1093, 0, 242, 243, 244,
	245, 246, 247, 0, 249, 250, 251, 248, 0, 252,
	0, 253, 254, 255, 0, 256, 965, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 494, 495, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 496, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 497, 498, 0, 215, 0, 0, 0,
	0, 0, 286, 287, 288, 499, 289, 290, 0, 291,
	0, 292, 0, 0, 966, 293, 294, 0, 295, 500,
	0, 501, 296, 0, 297, 298, 299, 300, 502, 503,
	504, 355, 968, 301, 302, 0, 303, 304, 306, 0,
	0, 0, 305, 307, 314, 0, 967, 308, 505, 310,
	309, 311, 312, 313, 506, 0, 507, 0, 315, 969,
	508, 970, 316, 317, 318, 971, 319, 320, 0, 0,
	321, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	509, 972, 329, 330, 973, 0, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 974, 347, 348, 351, 352,
	350, 975, 349, 0, 0, 976, 353, 0, 510, 354,
	511, 356, 357, 0, 358, 359, 360, 0, 0, 362,
	363, 364, 0, 0, 365, 366, 512, 977, 367, 978,
	513, 368, 361, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 377, 514, 378, 515, 379, 0, 380, 0,
	381, 382, 383, 384, 385, 386, 387, 516, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 979, 404, 405,
	406, 407, 517, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 429, 0, 430, 410, 411, 431, 432,
	980, 433, 434, 518, 435, 436, 0, 437, 438, 439,
	440, 412, 441, 445, 446, 442, 443, 444, 519, 0,
	448, 449, 447, 0, 450, 451, 452, 453, 454, 280,
	455, 0, 456, 520, 521, 522, 523, 0, 463, 0,
	457, 458, 524, 459, 525, 0, 460, 461, 462, 0,
	464, 465, 0, 0, 466, 467, 468, 470, 471, 469,
	473, 0, 474, 0, 472, 475, 476, 477, 526, 527,
	528, 212, 479, 478, 529, 0, 0, 0, 0, 480,
	481, 530, 482, 483, 484, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 0, 233,
	234, 235, 236, 237, 238, 239, 0, 0, 240, 490,
	491, 492, 0, 241, 493, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 0,
	252, 0, 253, 254, 255, 0, 256, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 494, 495, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 0, 215, 0, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	500, 0, 501, 296, 0, 297, 298, 299, 300, 502,
	503, 504, 355, 0, 301, 302, 0, 303, 304, 306,
	0, 0, 216, 305, 307, 314, 0, 0, 308, 505,
	310, 309, 311, 312, 313, 506, 0, 507, 0, 315,
	0, 508, 0, 316, 317, 318, 0, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 509, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	352, 350, 0, 349, 0, 217, 0, 353, 0, 510,
	354, 511, 356, 357, 0, 358, 359, 360, 0, 0,
	362, 363, 364, 0, 0, 365, 366, 512, 0, 367,
	0, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 377, 514, 378, 515, 379, 0, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 0, 430, 410, 411, 431,
	432, 0, 433, 434, 518, 435, 436, 0, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	0, 448, 449, 447, 0, 450, 451, 452, 453, 454,
	280, 455, 0, 456, 520, 521, 522, 523, 0, 463,
	0, 457, 458, 524, 459, 525, 0, 460, 461, 462,
	0, 464, 465, 0, 0, 466, 467, 468, 470, 471,
	469, 473, 0, 474, 0, 472, 475, 476, 477, 526,
	527, 528, 0, 479, 478, 529, 1201, 1200, 0, 0,
	480, 481, 530, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 610, 0, 0, 0, 485, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 487, 229, 488, 232,
	230, 231, 489, 0, 233, 234, 235, 236, 237, 238,
	239, 0, 0, 240, 490, 491, 492, 0, 241, 493,
	0, 1093, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 965, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 494, 495,
	1739, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 496,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 497,
	498, 0, 215, 0, 0, 0, 0, 0, 286, 287,
	288, 499, 289, 290, 0, 291, 0, 292, 0, 0,
	966, 293, 294, 0, 295, 500, 0, 501, 296, 0,
	297, 298, 299, 300, 502, 503, 504, 355, 968, 301,
	302, 0, 303, 304, 306, 0, 0, 0, 305, 307,
	314, 0, 967, 308, 505, 310, 309, 311, 312, 313,
	506, 0, 507, 0, 315, 969, 508, 970, 316, 317,
	318, 971, 319, 320, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 509, 972, 329, 330,
	973, 0, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 974, 347, 348, 351, 352, 350, 975, 349, 0,
	0, 976, 353, 0, 510, 354, 511, 356, 357, 0,
	358, 359, 360, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 977, 367, 978, 513, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 514,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 516, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 979, 404, 405, 406, 407, 517, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 429,
	0, 430, 410, 411, 431, 432, 980, 433, 434, 518,
	435, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	446, 442, 443, 444, 519, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 455, 0, 456, 520,
	521, 522, 523, 0, 463, 0, 457, 458, 524, 459,
	525, 0, 460, 461, 462, 0, 464, 465, 0, 0,
	466, 467, 468, 470, 471, 469, 473, 0, 474, 0,
	472, 475, 476, 477, 526, 527, 528, 0, 479, 478,
	529, 1201, 1200, 0, 0, 480, 481, 530, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 0, 233,
	234, 235, 236, 237, 238, 239, 0, 0, 240, 490,
	491, 492, 0, 241, 493, 0, 1093, 0, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 0,
	252, 0, 253, 254, 255, 0, 256, 965, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 494, 495, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 0, 215, 0, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 0, 292, 0, 0, 966, 293, 294, 0, 295,
	500, 0, 501, 296, 0, 297, 298, 299, 300, 502,
	503, 504, 355, 968, 301, 302, 0, 303, 304, 306,
	0, 0, 0, 305, 307, 314, 0, 967, 308, 505,
	310, 309, 311, 312, 313, 506, 0, 507, 0, 315,
	969, 508, 970, 316, 317, 318, 971, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 509, 972, 329, 330, 973, 0, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 974, 347, 348, 351,
	352, 350, 975, 349, 0, 0, 976, 353, 0, 510,
	354, 511, 356, 357, 0, 358, 359, 360, 0, 0,
	362, 363, 364, 0, 0, 365, 366, 512, 977, 367,
	978, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 377, 514, 378, 515, 379, 0, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 979, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 0, 430, 410, 411, 431,
	432, 980, 433, 434, 518, 435, 436, 0, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	0, 448, 449, 447, 0, 450, 451, 452, 453, 454,
	280, 455, 0, 456, 520, 521, 522, 523, 0, 463,
	0, 457, 458, 524, 459, 525, 0, 460, 461, 462,
	0, 464, 465, 0, 0, 466, 467, 468, 470, 471,
	469, 473, 0, 474, 0, 472, 475, 476, 477, 526,
	527, 528, 1201, 479, 478, 529, 0, 0, 0, 0,
	480, 481, 530, 482, 483, 484, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 0, 240,
	490, 491, 492, 0, 241, 493, 0, 1093, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 965, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 497, 498, 0, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 966, 293, 294, 0,
	295, 500, 0, 501, 296, 0, 297, 298, 299, 300,
	502, 503, 504, 355, 968, 301, 302, 0, 303, 304,
	306, 0, 0, 0, 305, 307, 314, 0, 967, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 969, 508, 970, 316, 317, 318, 971, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 509, 972, 329, 330, 973, 0, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 974, 347, 348,
	351, 352, 350, 975, 349, 0, 0, 976, 353, 0,
	510, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 977,
	367, 978, 513, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 514, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 979,
	404, 405, 406, 407, 517, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 0, 430, 410, 411,
	431, 432, 980, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	519, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 524, 459, 525, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 0, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 212, 479, 478, 529, 0, 0, 0,
	0, 480, 481, 530, 482, 483, 484, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 486, 487, 229, 488, 232, 230, 231, 489,
	0, 233, 234, 235, 236, 237, 238, 239, 0, 0,
	240, 490, 491, 492, 2328, 241, 493, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 0, 249, 250, 251,
	248, 2325, 252, 0, 253, 254, 255, 0, 256, 0,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 494, 495, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 496, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 497, 498, 0, 2486,
	0, 0, 0, 0, 0, 286, 287, 288, 499, 289,
	290, 0, 291, 0, 292, 2331, 0, 0, 293, 294,
	0, 295, 500, 0, 501, 296, 0, 297, 298, 299,
	300, 502, 503, 504, 355, 0, 301, 302, 0, 303,
	304, 306, 0, 0, 2483, 305, 307, 314, 0, 0,
	308, 505, 310, 309, 311, 312, 313, 506, 0, 507,
	0, 2485, 0, 508, 0, 316, 317, 318, 0, 319,
	320, 0, 0, 321, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 509, 0, 329, 330, 2482, 0, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 0, 347,
	348, 351, 352, 350, 0, 349, 0, 0, 0, 353,
	0, 510, 354, 511, 356, 357, 0, 358, 359, 360,
	0, 0, 362, 363, 364, 0, 0, 365, 366, 512,
	0, 367, 0, 513, 368, 361, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 377, 514, 378, 515, 379,
	2330, 380, 0, 381, 382, 383, 384, 385, 386, 387,
	516, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 517, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 429, 0, 430, 410,
	411, 431, 432, 0, 433, 434, 518, 435, 436, 0,
	437, 438, 439, 440, 412, 441, 445, 446, 442, 443,
	444, 519, 0, 448, 449, 447, 0, 450, 451, 452,
	453, 454, 280, 455, 0, 456, 520, 521, 522, 523,
	0, 463, 0, 457, 458, 524, 459, 525, 0, 460,
	461, 462, 0, 464, 465, 0, 2484, 466, 467, 468,
	470, 471, 469, 473, 0, 474, 0, 472, 475, 476,
	477, 526, 527, 528, 212, 479, 478, 529, 0, 0,
	0, 0, 480, 481, 530, 482, 483, 484, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 486, 487, 229, 488, 232, 230, 231,
	489, 0, 233, 234, 235, 236, 237, 238, 239, 0,
	0, 240, 490, 491, 492, 2328, 241, 493, 0, 0,
	2322, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 2325, 252, 0, 253, 254, 255, 0, 256,
	0, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 494, 495, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 496, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 286, 287, 288, 499,
	289, 290, 0, 291, 0, 292, 2331, 0, 0, 293,
	294, 0, 295, 500, 0, 501, 296, 0, 297, 298,
	299, 300, 2321, 503, 504, 355, 0, 301, 302, 0,
	303, 304, 306, 0, 0, 0, 305, 307, 314, 0,
	0, 308, 505, 310, 309, 311, 312, 313, 506, 0,
	507, 0, 315, 0, 508, 0, 316, 317, 318, 0,
	319, 320, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 509, 0, 329, 330, 0, 0,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 0,
	347, 348, 351, 352, 350, 0, 349, 0, 0, 0,
	353, 0, 510, 354, 511, 356, 357, 0, 358, 359,
	360, 0, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 0, 367, 0, 513, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 514, 378, 515,
	379, 2330, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 516, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 517, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 429, 0, 430,
	410, 411, 431, 432, 0, 433, 434, 518, 435, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 446, 442,
	443, 444, 519, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 455, 0, 456, 520, 521, 522,
	523, 0, 463, 0, 457, 458, 524, 459, 525, 0,
	460, 461, 462, 0, 464, 465, 0, 2329, 466, 467,
	468, 470, 471, 469, 473, 0, 474, 0, 472, 475,
	476, 477, 526, 527, 528, 0, 479, 478, 529, 1428,
	0, 212, 0, 480, 481, 530, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 0, 233,
	234, 235, 236, 237, 238, 239, 0, 0, 240, 490,
	491, 492, 0, 241, 493, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 0,
	252, 0, 253, 254, 255, 0, 256, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 494, 495, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 0, 215, 0, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	500, 0, 501, 296, 0, 297, 298, 299, 300, 502,
	503, 504, 355, 0, 301, 302, 0, 303, 304, 306,
	0, 0, 216, 305, 307, 314, 0, 0, 308, 505,
	310, 309, 311, 312, 313, 506, 0, 507, 0, 315,
	0, 508, 0, 316, 317, 318, 0, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 509, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	352, 350, 0, 349, 0, 217, 0, 353, 0, 510,
	354, 511, 356, 357, 0, 358, 359, 360, 0, 0,
	362, 363, 364, 0, 0, 365, 366, 512, 0, 367,
	0, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 377, 514, 378, 515, 379, 0, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 1431, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 0, 430, 410, 411, 431,
	432, 0, 433, 434, 518, 435, 436, 0, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	0, 448, 449, 447, 1429, 450, 451, 452, 453, 454,
	280, 455, 0, 456, 520, 521, 522, 523, 0, 463,
	0, 457, 458, 524, 459, 525, 0, 460, 461, 462,
	0, 464, 465, 0, 0, 466, 467, 468, 470, 471,
	469, 473, 0, 474, 0, 472, 475, 476, 477, 526,
	527, 528, 0, 1430, 478, 529, 1177, 0, 212, 0,
	480, 481, 530, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 487, 229,
	488, 232, 230, 231, 489, 0, 233, 234, 235, 236,
	237, 238, 239, 0, 0, 240, 490, 491, 492, 0,
	241, 493, 0, 0, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	494, 495, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 496, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 497, 498, 0, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 499, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 500, 0, 501,
	296, 0, 297, 298, 299, 300, 1179, 503, 504, 355,
	0, 301, 302, 0, 303, 304, 306, 0, 0, 216,
	305, 307, 314, 0, 0, 308, 505, 310, 309, 311,
	312, 313, 506, 0, 507, 0, 315, 0, 508, 0,
	316, 317, 318, 0, 319, 320, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 509, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 0, 347, 348, 351, 352, 350, 0,
	349, 0, 217, 0, 353, 0, 510, 354, 511, 356,
	357, 0, 358, 359, 360, 0, 1022, 362, 363, 364,
	0, 0, 365, 366, 512, 0, 367, 0, 513, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 514, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 516, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	517, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 429, 0, 430, 410, 411, 431, 432, 0, 433,
	434, 518, 435, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 446, 442, 443, 444, 519, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 455, 0,
	456, 520, 521, 522, 523, 0, 463, 0, 457, 458,
	524, 459, 525, 0, 460, 461, 462, 0, 464, 465,
	0, 0, 466, 467, 468, 470, 471, 469, 473, 0,
	474, 0, 472, 475, 476, 477, 526, 527, 528, 0,
	479, 478, 529, 1174, 0, 212, 0, 480, 481, 530,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 486, 487, 229, 488, 232, 230,
	231, 489, 0, 233, 234, 235, 236, 237, 238, 239,
	0, 0, 240, 490, 491, 492, 0, 241, 493, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 0, 249,
	250, 251, 248, 0, 252, 0, 253, 254, 255, 0,
	256, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 494, 495, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 496, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 497, 498,
	0, 215, 0, 0, 0, 0, 0, 286, 287, 288,
	499, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 500, 0, 501, 296, 0, 297,
	298, 299, 300, 1176, 503, 504, 355, 0, 301, 302,
	0, 303, 304, 306, 0, 0, 216, 305, 307, 314,
	0, 0, 308, 505, 310, 309, 311, 312, 313, 506,
	0, 507, 0, 315, 0, 508, 0, 316, 317, 318,
	0, 319, 320, 0, 0, 321, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 509, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 352, 350, 0, 349, 0, 217,
	0, 353, 0, 510, 354, 511, 356, 357, 0, 358,
	359, 360, 0, 1022, 362, 363, 364, 0, 0, 365,
	366, 512, 0, 367, 0, 513, 368, 361, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 377, 514, 378,
	515, 379, 0, 380, 0, 381, 382, 383, 384, 385,
	386, 387, 516, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 517, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 429, 0,
	430, 410, 411, 431, 432, 0, 433, 434, 518, 435,
	436, 0, 437, 438, 439, 440, 412, 441, 445, 446,
	442, 443, 444, 519, 0, 448, 449, 447, 0, 450,
	451, 452, 453, 454, 280, 455, 0, 456, 520, 521,
	522, 523, 0, 463, 0, 457, 458, 524, 459, 525,
	0, 460, 461, 462, 0, 464, 465, 0, 0, 466,
	467, 468, 470, 471, 469, 473, 0, 474, 0, 472,
	475, 476, 477, 526, 527, 528, 0, 479, 478, 529,
	1081, 0, 212, 0, 480, 481, 530, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 0, 240,
	490, 491, 492, 0, 241, 493, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 497, 498, 0, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 500, 0, 501, 296, 0, 297, 298, 299, 300,
	1083, 503, 504, 355, 0, 301, 302, 0, 303, 304,
	306, 0, 0, 216, 305, 307, 314, 0, 0, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 0, 508, 0, 316, 317, 318, 0, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 509, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 352, 350, 0, 349, 0, 217, 0, 353, 0,
	510, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	1022, 362, 363, 364, 0, 0, 365, 366, 512, 0,
	367, 0, 513, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 514, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 517, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 0, 430, 410, 411,
	431, 432, 0, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	519, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 524, 459, 525, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 0, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 0, 479, 478, 529, 559, 0, 212,
	0, 480, 481, 530, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 558,
	222, 548, 223, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 486, 487,
	229, 488, 232, 230, 231, 489, 0, 233, 234, 235,
	236, 237, 238, 239, 0, 0, 240, 490, 491, 492,
	0, 241, 493, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 0, 249, 250, 251, 248, 0, 252, 0,
	253, 254, 255, 551, 256, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 494, 495, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 496, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 286, 287, 288, 499, 289, 290, 0, 291, 0,
	292, 0, 0, 0, 293, 294, 552, 295, 500, 0,
	501, 296, 0, 297, 298, 299, 300, 502, 503, 504,
	355, 0, 301, 302, 0, 303, 304, 306, 0, 0,
	0, 305, 307, 314, 0, 0, 308, 505, 310, 309,
	311, 312, 313, 506, 0, 507, 0, 315, 0, 508,
	0, 316, 317, 318, 0, 319, 320, 0, 0, 321,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 509,
	0, 329, 330, 0, 0, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 0, 347, 348, 351, 352, 350,
	0, 349, 0, 0, 0, 353, 0, 510, 354, 511,
	356, 357, 0, 358, 359, 360, 0, 0, 362, 363,
	364, 0, 0, 365, 366, 512, 0, 367, 0, 513,
	368, 361, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 377, 514, 378, 515, 379, 0, 380, 0, 381,
	382, 383, 384, 385, 386, 387, 516, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 517, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 553, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 429, 0, 430, 410, 411, 431, 432, 0,
	433, 434, 518, 435, 436, 0, 437, 438, 439, 440,
	412, 441, 445, 446, 442, 443, 444, 519, 0, 448,
	449, 447, 0, 450, 451, 452, 453, 454, 280, 455,
	0, 456, 520, 521, 522, 523, 0, 463, 0, 457,
	458, 524, 459, 525, 0, 460, 461, 462, 0, 464,
	465, 0, 0, 466, 467, 468, 470, 471, 469, 473,
	0, 474, 0, 472, 475, 476, 477, 526, 527, 528,
	0, 479, 478, 529, 547, 0, 212, 0, 480, 481,
	530, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 548, 223,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 487, 229, 488, 232,
	230, 231, 489, 0, 233, 234, 235, 236, 237, 238,
	239, 0, 0, 240, 490, 491, 492, 0, 241, 493,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	551, 256, 0, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 494, 495,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 496,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 286, 287,
	288, 499, 289, 290, 0, 291, 0, 292, 0, 0,
	0, 293, 294, 552, 295, 500, 0, 501, 296, 0,
	297, 298, 299, 300, 502, 503, 504, 355, 0, 301,
	302, 0, 303, 304, 306, 0, 0, 0, 305, 307,
	314, 0, 0, 308, 505, 310, 309, 311, 312, 313,
	506, 0, 507, 0, 315, 0, 508, 0, 316, 317,
	318, 0, 319, 320, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 509, 0, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 352, 350, 0, 349, 0,
	0, 0, 353, 0, 510, 354, 511, 356, 357, 0,
	358, 359, 360, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 0, 367, 0, 513, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 514,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 516, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 517, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 553,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 429,
	0, 430, 410, 411, 431, 432, 0, 433, 434, 518,
	435, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	446, 442, 443, 444, 519, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 455, 0, 456, 520,
	521, 522, 523, 0, 463, 0, 457, 458, 524, 459,
	525, 0, 460, 461, 462, 0, 464, 465, 0, 0,
	466, 467, 468, 470, 471, 469, 473, 0, 474, 0,
	472, 475, 476, 477, 526, 527, 528, 212, 479, 478,
	529, 0, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 486, 487, 229, 488,
	232, 230, 231, 489, 0, 233, 234, 235, 236, 237,
	238, 239, 0, 0, 240, 490, 491, 492, 0, 241,
	493, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	0, 249, 250, 251, 248, 0, 252, 0, 253, 254,
	255, 0, 256, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 494,
	495, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	496, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	497, 498, 0, 215, 0, 0, 0, 0, 0, 286,
	287, 288, 499, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 500, 0, 501, 296,
	0, 297, 298, 299, 300, 502, 503, 504, 355, 0,
	301, 302, 0, 303, 304, 306, 0, 0, 216, 305,
	307, 314, 0, 0, 308, 505, 310, 309, 311, 312,
	313, 506, 0, 507, 0, 315, 0, 508, 0, 316,
	317, 318, 0, 319, 320, 0, 0, 321, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 509, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 352, 350, 2814, 349,
	0, 217, 0, 353, 0, 510, 354, 511, 356, 357,
	0, 358, 359, 360, 0, 0, 362, 363, 364, 0,
	0, 365, 366, 512, 0, 367, 0, 513, 368, 361,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 377,
	514, 378, 515, 379, 0, 380, 0, 381, 382, 383,
	384, 385, 386, 387, 516, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 517,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	429, 0, 430, 410, 411, 431, 432, 0, 433, 434,
	518, 435, 436, 0, 437, 438, 439, 440, 412, 441,
	445, 446, 442, 443, 444, 519, 0, 448, 449, 447,
	0, 450, 451, 452, 453, 454, 280, 455, 0, 456,
	520, 521, 522, 523, 0, 463, 0, 457, 458, 524,
	459, 525, 0, 460, 461, 462, 0, 464, 465, 0,
	0, 466, 467, 468, 470, 471, 469, 473, 0, 474,
	0, 472, 475, 476, 477, 526, 527, 528, 212, 479,
	478, 529, 0, 0, 0, 0, 480, 481, 530, 482,
	483, 484, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 487, 229,
	488, 232, 230, 231, 489, 0, 233, 234, 235, 236,
	237, 238, 239, 0, 0, 240, 490, 491, 492, 0,
	241, 493, 0, 0, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	494, 495, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 496, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 497, 498, 0, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 499, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 500, 0, 501,
	296, 0, 297, 298, 299, 300, 502, 503, 504, 355,
	0, 301, 302, 0, 303, 304, 306, 0, 0, 216,
	305, 307, 314, 0, 0, 308, 505, 310, 309, 311,
	312, 313, 506, 0, 507, 0, 315, 0, 508, 0,
	316, 317, 318, 0, 319, 320, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 509, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 0, 347, 348, 351, 352, 350, 0,
	349, 0, 217, 0, 353, 0, 510, 354, 511, 356,
	357, 0, 358, 359, 360, 0, 1022, 362, 363, 364,
	0, 0, 365, 366, 512, 0, 367, 0, 513, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 514, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 516, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	517, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 429, 0, 430, 410, 411, 431, 432, 0, 433,
	434, 518, 435, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 446, 442, 443, 444, 519, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 455, 0,
	456, 520, 521, 522, 523, 0, 463, 0, 457, 458,
	524, 459, 525, 0, 460, 461, 462, 0, 464, 465,
	0, 0, 466, 467, 468, 470, 471, 469, 473, 0,
	474, 0, 472, 475, 476, 477, 526, 527, 528, 0,
	479, 478, 529, 2424, 0, 212, 0, 480, 481, 530,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 486, 487, 229, 488, 232, 230,
	231, 489, 0, 233, 234, 235, 236, 237, 238, 239,
	0, 0, 240, 490, 491, 492, 0, 241, 493, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 0, 249,
	250, 251, 248, 0, 252, 0, 253, 254, 255, 0,
	256, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 494, 495, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 496, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 497, 498,
	0, 215, 0, 0, 0, 0, 0, 286, 287, 288,
	499, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 500, 0, 501, 296, 0, 297,
	298, 299, 300, 2423, 503, 504, 355, 0, 301, 302,
	0, 303, 304, 306, 0, 0, 216, 305, 307, 314,
	0, 0, 308, 505, 310, 309, 311, 312, 313, 506,
	0, 507, 0, 315, 0, 508, 0, 316, 317, 318,
	0, 319, 320, 0, 0, 321, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 509, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 352, 350, 0, 349, 0, 217,
	0, 353, 0, 510, 354, 511, 356, 357, 0, 358,
	359, 360, 0, 0, 362, 363, 364, 0, 0, 365,
	366, 512, 0, 367, 0, 513, 368, 361, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 377, 514, 378,
	515, 379, 0, 380, 0, 381, 382, 383, 384, 385,
	386, 387, 516, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 517, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 429, 0,
	430, 410, 411, 431, 432, 0, 433, 434, 518, 435,
	436, 0, 437, 438, 439, 440, 412, 441, 445, 446,
	442, 443, 444, 519, 0, 448, 449, 447, 0, 450,
	451, 452, 453, 454, 280, 455, 0, 456, 520, 521,
	522, 523, 0, 463, 0, 457, 458, 524, 459, 525,
	0, 460, 461, 462, 0, 464, 465, 0, 0, 466,
	467, 468, 470, 471, 469, 473, 0, 474, 0, 472,
	475, 476, 477, 526, 527, 528, 0, 479, 478, 529,
	1931, 0, 212, 0, 480, 481, 530, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 0, 240,
	490, 491, 492, 0, 241, 493, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 497, 498, 0, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 500, 0, 501, 296, 0, 297, 298, 299, 300,
	502, 503, 504, 355, 0, 301, 302, 0, 303, 304,
	306, 0, 0, 216, 305, 307, 314, 0, 0, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 0, 508, 0, 316, 317, 318, 0, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 509, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 352, 350, 0, 349, 0, 217, 0, 353, 0,
	510, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 0,
	367, 0, 513, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 514, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 517, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 0, 430, 410, 411,
	431, 432, 0, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	519, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 524, 459, 525, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 0, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 212, 479, 478, 529, 0, 0, 0,
	0, 480, 481, 530, 482, 483, 484, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 486, 487, 229, 488, 232, 230, 231, 489,
	0, 233, 234, 235, 236, 237, 238, 239, 0, 0,
	240, 490, 491, 492, 0, 241, 493, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 0, 249, 250, 251,
	248, 0, 252, 0, 253, 254, 255, 0, 256, 0,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 494, 495, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 496, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 497, 498, 0, 215,
	0, 0, 0, 0, 0, 286, 287, 288, 499, 289,
	290, 0, 291, 0, 292, 0, 0, 0, 293, 294,
	0, 295, 500, 0, 501, 296, 0, 297, 298, 299,
	300, 502, 503, 504, 355, 0, 301, 302, 0, 303,
	304, 306, 0, 0, 216, 305, 307, 314, 0, 0,
	308, 505, 310, 309, 311, 312, 313, 506, 0, 507,
	0, 315, 0, 508, 0, 316, 317, 318, 0, 319,
	320, 0, 0, 321, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 509, 0, 329, 330, 0, 0, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 0, 347,
	348, 351, 352, 350, 0, 349, 0, 217, 0, 353,
	0, 510, 354, 511, 356, 357, 0, 358, 359, 360,
	0, 0, 362, 363, 364, 0, 0, 365, 366, 512,
	0, 367, 0, 513, 368, 361, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 377, 514, 378, 515, 379,
	0, 380, 0, 381, 382, 383, 384, 385, 386, 387,
	516, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 517, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 429, 0, 430, 410,
	411, 431, 432, 0, 433, 434, 518, 435, 436, 0,
	437, 438, 439, 440, 412, 441, 445, 446, 442, 443,
	444, 519, 0, 448, 449, 447, 1859, 450, 451, 452,
	453, 454, 280, 455, 0, 456, 520, 521, 522, 523,
	0, 463, 0, 457, 458, 524, 459, 525, 0, 460,
	461, 462, 0, 464, 465, 0, 0, 466, 467, 468,
	470, 471, 469, 473, 0, 474, 0, 472, 475, 476,
	477, 526, 527, 528, 0, 479, 478, 529, 1864, 0,
	212, 0, 480, 481, 530, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 486,
	487, 229, 488, 232, 230, 231, 489, 0, 233, 234,
	235, 236, 237, 238, 239, 0, 0, 240, 490, 491,
	492, 0, 241, 493, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 0, 249, 250, 251, 248, 0, 252,
	0, 253, 254, 255, 0, 256, 0, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 494, 495, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 496, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 497, 498, 0, 215, 0, 0, 0,
	0, 0, 286, 287, 288, 499, 289, 290, 0, 291,
	0, 292, 0, 0, 0, 293, 294, 0, 295, 500,
	0, 501, 296, 0, 297, 298, 299, 300, 1863, 503,
	504, 355, 0, 301, 302, 0, 303, 304, 306, 0,
	0, 216, 305, 307, 314, 0, 0, 308, 505, 310,
	309, 311, 312, 313, 506, 0, 507, 0, 315, 0,
	508, 0, 316, 317, 318, 0, 319, 320, 0, 0,
	321, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	509, 0, 329, 330, 0, 0, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 0, 347, 348, 351, 352,
	350, 0, 349, 0, 217, 0, 353, 0, 510, 354,
	511, 356, 357, 0, 358, 359, 360, 0, 0, 362,
	363, 364, 0, 0, 365, 366, 512, 0, 367, 0,
	513, 368, 361, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 377, 514, 378, 515, 379, 0, 380, 0,
	381, 382, 383, 384, 385, 386, 387, 516, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 517, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 429, 0, 430, 410, 411, 431, 432,
	0, 433, 434, 518, 435, 436, 0, 437, 438, 439,
	440, 412, 441, 445, 446, 442, 443, 444, 519, 0,
	448, 449, 447, 0, 450, 451, 452, 453, 454, 280,
	455, 0, 456, 520, 521, 522, 523, 0, 463, 0,
	457, 458, 524, 459, 525, 0, 460, 461, 462, 0,
	464, 465, 0, 0, 466, 467, 468, 470, 471, 469,
	473, 0, 474, 0, 472, 475, 476, 477, 526, 527,
	528, 0, 479, 478, 529, 1852, 0, 212, 0, 480,
	481, 530, 482, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 486, 487, 229, 488,
	232, 230, 231, 489, 0, 233, 234, 235, 236, 237,
	238, 239, 0, 0, 240, 490, 491, 492, 0, 241,
	493, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	0, 249, 250, 251, 248, 0, 252, 0, 253, 254,
	255, 0, 256, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 494,
	495, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	496, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	497, 498, 0, 215, 0, 0, 0, 0, 0, 286,
	287, 288, 499, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 500, 0, 501, 296,
	0, 297, 298, 299, 300, 1854, 503, 504, 355, 0,
	301, 302, 0, 303, 304, 306, 0, 0, 216, 305,
	307, 314, 0, 0, 308, 505, 310, 309, 311, 312,
	313, 506, 0, 507, 0, 315, 0, 508, 0, 316,
	317, 318, 0, 319, 320, 0, 0, 321, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 509, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 352, 350, 0, 349,
	0, 217, 0, 353, 0, 510, 354, 511, 356, 357,
	0, 358, 359, 360, 0, 0, 362, 363, 364, 0,
	0, 365, 366, 512, 0, 367, 0, 513, 368, 361,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 377,
	514, 378, 515, 379, 0, 380, 0, 381, 382, 383,
	384, 385, 386, 387, 516, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 517,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	429, 0, 430, 410, 411, 431, 432, 0, 433, 434,
	518, 435, 436, 0, 437, 438, 439, 440, 412, 441,
	445, 446, 442, 443, 444, 519, 0, 448, 449, 447,
	0, 450, 451, 452, 453, 454, 280, 455, 0, 456,
	520, 521, 522, 523, 0, 463, 0, 457, 458, 524,
	459, 525, 0, 460, 461, 462, 0, 464, 465, 0,
	0, 466, 467, 468, 470, 471, 469, 473, 0, 474,
	0, 472, 475, 476, 477, 526, 527, 528, 0, 479,
	478, 529, 1324, 0, 212, 0, 480, 481, 530, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 486, 487, 229, 488, 232, 230, 231,
	489, 0, 233, 234, 235, 236, 237, 238, 239, 0,
	0, 240, 490, 491, 492, 0, 241, 493, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 254, 255, 0, 256,
	0, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 494, 495, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 496, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 497, 498, 0,
	215, 0, 0, 0, 0, 0, 286, 287, 288, 499,
	289, 290, 0, 291, 0, 292, 0, 0, 0, 293,
	294, 0, 295, 500, 0, 501, 296, 0, 297, 298,
	299, 300, 1323, 503, 504, 355, 0, 301, 302, 0,
	303, 304, 306, 0, 0, 216, 305, 307, 314, 0,
	0, 308, 505, 310, 309, 311, 312, 313, 506, 0,
	507, 0, 315, 0, 508, 0, 316, 317, 318, 0,
	319, 320, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 509, 0, 329, 330, 0, 0,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 0,
	347, 348, 351, 352, 350, 0, 349, 0, 217, 0,
	353, 0, 510, 354, 511, 356, 357, 0, 358, 359,
	360, 0, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 0, 367, 0, 513, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 514, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 516, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 517, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 429, 0, 430,
	410, 411, 431, 432, 0, 433, 434, 518, 435, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 446, 442,
	443, 444, 519, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 455, 0, 456, 520, 521, 522,
	523, 0, 463, 0, 457, 458, 524, 459, 525, 0,
	460, 461, 462, 0, 464, 465, 0, 0, 466, 467,
	468, 470, 471, 469, 473, 0, 474, 0, 472, 475,
	476, 477, 526, 527, 528, 0, 479, 478, 529, 1321,
	0, 212, 0, 480, 481, 530, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 0, 233,
	234, 235, 236, 237, 238, 239, 0, 0, 240, 490,
	491, 492, 0, 241, 493, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 0,
	252, 0, 253, 254, 255, 0, 256, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 494, 495, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 0, 215, 0, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	500, 0, 501, 296, 0, 297, 298, 299, 300, 1320,
	503, 504, 355, 0, 301, 302, 0, 303, 304, 306,
	0, 0, 216, 305, 307, 314, 0, 0, 308, 505,
	310, 309, 311, 312, 313, 506, 0, 507, 0, 315,
	0, 508, 0, 316, 317, 318, 0, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 509, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	352, 350, 0, 349, 0, 217, 0, 353, 0, 510,
	354, 511, 356, 357, 0, 358, 359, 360, 0, 0,
	362, 363, 364, 0, 0, 365, 366, 512, 0, 367,
	0, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 377, 514, 378, 515, 379, 0, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 0, 430, 410, 411, 431,
	432, 0, 433, 434, 518, 435, 436, 0, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	0, 448, 449, 447, 0, 450, 451, 452, 453, 454,
	280, 455, 0, 456, 520, 521, 522, 523, 0, 463,
	0, 457, 458, 524, 459, 525, 0, 460, 461, 462,
	0, 464, 465, 0, 0, 466, 467, 468, 470, 471,
	469, 473, 0, 474, 0, 472, 475, 476, 477, 526,
	527, 528, 0, 479, 478, 529, 1318, 0, 212, 0,
	480, 481, 530, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 487, 229,
	488, 232, 230, 231, 489, 0, 233, 234, 235, 236,
	237, 238, 239, 0, 0, 240, 490, 491, 492, 0,
	241, 493, 0, 0, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	494, 495, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 496, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 497, 498, 0, 215, 0, 0, 0, 0, 0,
	286, 287, 288, 499, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 500, 0, 501,
	296, 0, 297, 298, 299, 300, 1317, 503, 504, 355,
	0, 301, 302, 0, 303, 304, 306, 0, 0, 216,
	305, 307, 314, 0, 0, 308, 505, 310, 309, 311,
	312, 313, 506, 0, 507, 0, 315, 0, 508, 0,
	316, 317, 318, 0, 319, 320, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 509, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 0, 347, 348, 351, 352, 350, 0,
	349, 0, 217, 0, 353, 0, 510, 354, 511, 356,
	357, 0, 358, 359, 360, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 0, 367, 0, 513, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 514, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 516, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	517, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 429, 0, 430, 410, 411, 431, 432, 0, 433,
	434, 518, 435, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 446, 442, 443, 444, 519, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 455, 0,
	456, 520, 521, 522, 523, 0, 463, 0, 457, 458,
	524, 459, 525, 0, 460, 461, 462, 0, 464, 465,
	0, 0, 466, 467, 468, 470, 471, 469, 473, 0,
	474, 0, 472, 475, 476, 477, 526, 527, 528, 0,
	479, 478, 529, 1314, 0, 212, 0, 480, 481, 530,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 486, 487, 229, 488, 232, 230,
	231, 489, 0, 233, 234, 235, 236, 237, 238, 239,
	0, 0, 240, 490, 491, 492, 0, 241, 493, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 0, 249,
	250, 251, 248, 0, 252, 0, 253, 254, 255, 0,
	256, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 494, 495, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 496, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 497, 498,
	0, 215, 0, 0, 0, 0, 0, 286, 287, 288,
	499, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 500, 0, 501, 296, 0, 297,
	298, 299, 300, 1313, 503, 504, 355, 0, 301, 302,
	0, 303, 304, 306, 0, 0, 216, 305, 307, 314,
	0, 0, 308, 505, 310, 309, 311, 312, 313, 506,
	0, 507, 0, 315, 0, 508, 0, 316, 317, 318,
	0, 319, 320, 0, 0, 321, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 509, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 352, 350, 0, 349, 0, 217,
	0, 353, 0, 510, 354, 511, 356, 357, 0, 358,
	359, 360, 0, 0, 362, 363, 364, 0, 0, 365,
	366, 512, 0, 367, 0, 513, 368, 361, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 377, 514, 378,
	515, 379, 0, 380, 0, 381, 382, 383, 384, 385,
	386, 387, 516, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 517, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 429, 0,
	430, 410, 411, 431, 432, 0, 433, 434, 518, 435,
	436, 0, 437, 438, 439, 440, 412, 441, 445, 446,
	442, 443, 444, 519, 0, 448, 449, 447, 0, 450,
	451, 452, 453, 454, 280, 455, 0, 456, 520, 521,
	522, 523, 0, 463, 0, 457, 458, 524, 459, 525,
	0, 460, 461, 462, 0, 464, 465, 0, 0, 466,
	467, 468, 470, 471, 469, 473, 0, 474, 0, 472,
	475, 476, 477, 526, 527, 528, 0, 479, 478, 529,
	1188, 0, 212, 0, 480, 481, 530, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 0, 240,
	490, 491, 492, 0, 241, 493, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 497, 498, 0, 215, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 500, 0, 501, 296, 0, 297, 298, 299, 300,
	1190, 503, 504, 355, 0, 301, 302, 0, 303, 304,
	306, 0, 0, 216, 305, 307, 314, 0, 0, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 0, 508, 0, 316, 317, 318, 0, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 509, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 352, 350, 0, 349, 0, 217, 0, 353, 0,
	510, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 0,
	367, 0, 513, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 514, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 517, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 0, 430, 410, 411,
	431, 432, 0, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	519, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 524, 459, 525, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 0, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 212, 479, 478, 529, 0, 0, 0,
	0, 480, 481, 530, 482, 483, 484, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 486, 487, 229, 488, 232, 230, 231, 489,
	0, 233, 234, 235, 236, 237, 238, 239, 0, 0,
	240, 490, 491, 492, 0, 241, 493, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 0, 249, 250, 251,
	248, 0, 252, 0, 253, 254, 255, 0, 256, 0,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 494, 495, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 496, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 497, 498, 0, 215,
	0, 0, 0, 0, 0, 286, 287, 288, 499, 289,
	290, 0, 291, 0, 292, 0, 0, 0, 293, 294,
	0, 295, 500, 0, 501, 296, 0, 297, 298, 299,
	300, 502, 503, 504, 355, 0, 301, 302, 0, 303,
	304, 306, 0, 0, 216, 305, 307, 314, 0, 0,
	308, 505, 310, 309, 311, 312, 313, 506, 0, 507,
	0, 315, 0, 508, 0, 316, 317, 318, 0, 319,
	320, 0, 0, 321, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 509, 0, 329, 330, 0, 0, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 0, 347,
	348, 351, 352, 350, 0, 349, 0, 217, 0, 353,
	0, 510, 354, 511, 356, 357, 0, 358, 359, 360,
	0, 0, 362, 363, 364, 0, 0, 365, 366, 512,
	0, 367, 0, 513, 368, 361, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 377, 514, 378, 515, 379,
	0, 380, 0, 381, 382, 383, 384, 385, 386, 387,
	516, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 517, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 429, 0, 430, 410,
	411, 431, 432, 0, 433, 434, 518, 435, 436, 0,
	437, 438, 439, 440, 412, 441, 445, 446, 442, 443,
	444, 519, 0, 448, 449, 447, 0, 450, 451, 452,
	453, 454, 280, 455, 0, 456, 520, 521, 522, 523,
	0, 463, 0, 457, 458, 524, 459, 525, 0, 460,
	461, 462, 0, 464, 465, 0, 0, 466, 467, 468,
	470, 471, 469, 473, 0, 474, 0, 472, 475, 476,
	477, 526, 527, 528, 212, 479, 478, 529, 0, 0,
	0, 0, 480, 481, 530, 482, 483, 484, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 486, 487, 229, 488, 232, 230, 231,
	489, 0, 233, 234, 235, 236, 237, 238, 239, 0,
	0, 240, 490, 491, 492, 0, 241, 493, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 254, 255, 551, 256,
	0, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 494, 495, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 496, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 286, 287, 288, 499,
	289, 290, 0, 291, 0, 292, 0, 0, 0, 293,
	294, 552, 295, 500, 0, 501, 296, 0, 297, 298,
	299, 300, 502, 503, 504, 355, 0, 301, 302, 0,
	303, 304, 306, 0, 0, 0, 305, 307, 314, 0,
	0, 308, 505, 310, 309, 311, 312, 313, 506, 0,
	507, 0, 315, 0, 508, 0, 316, 317, 318, 0,
	319, 320, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 509, 0, 329, 330, 0, 0,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 0,
	347, 348, 351, 352, 350, 0, 349, 0, 0, 0,
	353, 0, 510, 354, 511, 356, 357, 0, 358, 359,
	360, 0, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 0, 367, 0, 513, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 514, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 516, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 517, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 553, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 429, 0, 430,
	410, 411, 431, 432, 0, 433, 434, 518, 435, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 446, 442,
	443, 444, 519, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 455, 0, 456, 520, 521, 522,
	523, 0, 463, 0, 457, 458, 524, 459, 525, 0,
	460, 461, 462, 0, 464, 465, 0, 0, 466, 467,
	468, 470, 471, 469, 473, 0, 474, 0, 472, 475,
	476, 477, 526, 527, 528, 212, 479, 478, 529, 0,
	0, 0, 0, 480, 481, 530, 482, 483, 484, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 486, 487, 229, 488, 232, 230,
	231, 489, 0, 233, 234, 235, 236, 237, 238, 239,
	0, 0, 240, 490, 491, 492, 0, 241, 493, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 0, 249,
	250, 251, 248, 0, 252, 0, 253, 254, 255, 0,
	256, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 1962, 262, 263, 264, 494, 495, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 496, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 497, 498,
	0, 215, 0, 0, 0, 0, 0, 286, 287, 288,
	499, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 500, 0, 501, 296, 0, 297,
	298, 299, 300, 502, 503, 504, 355, 0, 301, 302,
	0, 303, 304, 306, 0, 0, 216, 305, 307, 314,
	0, 0, 308, 505, 310, 309, 311, 312, 313, 506,
	0, 507, 0, 315, 0, 508, 0, 316, 317, 318,
	0, 319, 320, 0, 0, 321, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 509, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 352, 350, 0, 349, 0, 217,
	0, 353, 0, 510, 354, 511, 356, 357, 0, 358,
	359, 360, 0, 0, 362, 363, 364, 0, 0, 365,
	366, 512, 0, 367, 0, 513, 368, 361, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 377, 514, 378,
	515, 379, 0, 380, 0, 381, 382, 383, 384, 385,
	386, 387, 516, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 517, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 429, 0,
	430, 410, 411, 431, 432, 0, 433, 434, 518, 435,
	436, 0, 437, 438, 439, 440, 412, 441, 445, 446,
	442, 443, 444, 519, 0, 448, 449, 447, 0, 450,
	451, 452, 453, 454, 280, 455, 0, 456, 520, 521,
	522, 523, 0, 463, 0, 457, 458, 524, 459, 525,
	0, 460, 461, 462, 0, 464, 465, 0, 0, 466,
	467, 468, 470, 471, 469, 473, 0, 474, 0, 472,
	475, 476, 477, 526, 527, 528, 212, 479, 478, 529,
	0, 0, 0, 0, 480, 481, 530, 482, 483, 484,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 487, 229, 488, 232,
	230, 231, 489, 0, 233, 234, 235, 236, 237, 238,
	239, 0, 0, 240, 490, 491, 492, 0, 241, 493,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 0, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 1960, 262, 263, 264, 494, 495,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 496,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 497,
	498, 0, 215, 0, 0, 0, 0, 0, 286, 287,
	288, 499, 289, 290, 0, 291, 0, 292, 0, 0,
	0, 293, 294, 0, 295, 500, 0, 501, 296, 0,
	297, 298, 299, 300, 502, 503, 504, 355, 0, 301,
	302, 0, 303, 304, 306, 0, 0, 216, 305, 307,
	314, 0, 0, 308, 505, 310, 309, 311, 312, 313,
	506, 0, 507, 0, 315, 0, 508, 0, 316, 317,
	318, 0, 319, 320, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 509, 0, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 352, 350, 0, 349, 0,
	217, 0, 353, 0, 510, 354, 511, 356, 357, 0,
	358, 359, 360, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 0, 367, 0, 513, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 514,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 516, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 517, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 429,
	0, 430, 410, 411, 431, 432, 0, 433, 434, 518,
	435, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	446, 442, 443, 444, 519, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 455, 0, 456, 520,
	521, 522, 523, 0, 463, 0, 457, 458, 524, 459,
	525, 0, 460, 461, 462, 0, 464, 465, 0, 0,
	466, 467, 468, 470, 471, 469, 473, 0, 474, 0,
	472, 475, 476, 477, 526, 527, 528, 212, 479, 478,
	529, 0, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 486, 487, 229, 488,
	232, 230, 231, 489, 0, 233, 234, 235, 236, 237,
	238, 239, 0, 0, 240, 490, 491, 492, 0, 241,
	493, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	0, 249, 250, 251, 248, 0, 252, 0, 253, 254,
	255, 0, 256, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 1958, 262, 263, 264, 494,
	495, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	496, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	497, 498, 0, 215, 0, 0, 0, 0, 0, 286,
	287, 288, 499, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 500, 0, 501, 296,
	0, 297, 298, 299, 300, 502, 503, 504, 355, 0,
	301, 302, 0, 303, 304, 306, 0, 0, 216, 305,
	307, 314, 0, 0, 308, 505, 310, 309, 311, 312,
	313, 506, 0, 507, 0, 315, 0, 508, 0, 316,
	317, 318, 0, 319, 320, 0, 0, 321, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 509, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 352, 350, 0, 349,
	0, 217, 0, 353, 0, 510, 354, 511, 356, 357,
	0, 358, 359, 360, 0, 0, 362, 363, 364, 0,
	0, 365, 366, 512, 0, 367, 0, 513, 368, 361,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 377,
	514, 378, 515, 379, 0, 380, 0, 381, 382, 383,
	384, 385, 386, 387, 516, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 517,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	429, 0, 430, 410, 411, 431, 432, 0, 433, 434,
	518, 435, 436, 0, 437, 438, 439, 440, 412, 441,
	445, 446, 442, 443, 444, 519, 0, 448, 449, 447,
	0, 450, 451, 452, 453, 454, 280, 455, 0, 456,
	520, 521, 522, 523, 0, 463, 0, 457, 458, 524,
	459, 525, 0, 460, 461, 462, 0, 464, 465, 0,
	0, 466, 467, 468, 470, 471, 469, 473, 0, 474,
	0, 472, 475, 476, 477, 526, 527, 528, 0, 479,
	478, 529, 699, 0, 212, 0, 480, 481, 530, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 486, 487, 229, 488, 232, 230, 231,
	489, 0, 233, 234, 235, 236, 237, 238, 239, 0,
	0, 240, 490, 491, 492, 0, 241, 493, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 254, 255, 0, 256,
	0, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 494, 495, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 496, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 286, 287, 288, 499,
	289, 290, 0, 291, 0, 292, 0, 0, 0, 293,
	294, 0, 295, 500, 0, 501, 296, 0, 297, 298,
	299, 300, 502, 503, 504, 355, 0, 301, 302, 0,
	303, 304, 306, 0, 0, 0, 305, 307, 314, 0,
	0, 308, 505, 310, 309, 311, 312, 313, 506, 0,
	507, 698, 315, 0, 508, 0, 316, 317, 318, 0,
	319, 320, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 509, 0, 329, 330, 0, 0,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 0,
	347, 348, 351, 352, 350, 0, 349, 0, 0, 0,
	353, 0, 510, 354, 511, 356, 357, 0, 358, 359,
	360, 0, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 0, 367, 0, 513, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 514, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 516, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 517, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 429, 0, 430,
	410, 411, 431, 432, 0, 433, 434, 518, 435, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 446, 442,
	443, 444, 519, 0, 448, 449, 447, 697, 450, 451,
	452, 453, 454, 280, 455, 0, 456, 520, 521, 522,
	523, 0, 463, 0, 457, 458, 524, 459, 525, 0,
	460, 461, 462, 0, 464, 465, 0, 0, 466, 467,
	468, 470, 471, 469, 473, 0, 474, 0, 472, 475,
	476, 477, 526, 527, 528, 212, 479, 478, 529, 0,
	0, 0, 0, 480, 481, 530, 482, 483, 484, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 486, 487, 229, 488, 232, 230,
	231, 489, 0, 233, 234, 235, 236, 237, 238, 239,
	0, 0, 240, 490, 491, 492, 0, 241, 493, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 0, 249,
	250, 251, 248, 0, 252, 0, 253, 254, 255, 0,
	256, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 494, 495, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 496, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 497, 498,
	0, 2486, 0, 0, 0, 0, 0, 286, 287, 288,
	499, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 500, 0, 501, 296, 0, 297,
	298, 299, 300, 502, 503, 504, 355, 0, 301, 302,
	0, 303, 304, 306, 0, 0, 0, 305, 307, 314,
	0, 0, 308, 505, 310, 309, 311, 312, 313, 506,
	0, 507, 0, 315, 0, 508, 0, 316, 317, 318,
	0, 319, 320, 0, 0, 321, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 509, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 352, 350, 0, 349, 0, 0,
	0, 353, 0, 510, 354, 511, 356, 357, 0, 358,
	359, 360, 0, 0, 362, 363, 364, 0, 0, 365,
	366, 512, 0, 367, 0, 513, 368, 361, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 377, 514, 378,
	515, 379, 3325, 380, 0, 381, 382, 383, 384, 385,
	386, 387, 516, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 517, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 429, 0,
	430, 410, 411, 431, 432, 0, 433, 434, 518, 435,
	436, 0, 437, 438, 439, 440, 412, 441, 445, 446,
	442, 443, 444, 519, 0, 448, 449, 447, 0, 450,
	451, 452, 453, 454, 280, 455, 0, 456, 520, 521,
	522, 523, 0, 463, 0, 457, 458, 524, 459, 525,
	0, 460, 461, 462, 0, 464, 465, 0, 0, 466,
	467, 468, 470, 471, 469, 473, 0, 474, 0, 472,
	475, 476, 477, 526, 527, 528, 0, 479, 478, 529,
	538, 0, 212, 0, 480, 481, 530, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 537, 223, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 0, 240,
	490, 491, 492, 0, 241, 493, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 500, 0, 501, 296, 0, 297, 298, 299, 300,
	502, 503, 504, 355, 0, 301, 302, 0, 303, 304,
	306, 0, 0, 0, 305, 307, 314, 0, 0, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 0, 508, 0, 316, 317, 318, 0, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 509, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 352, 350, 0, 349, 0, 0, 0, 353, 0,
	510, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 0,
	367, 0, 513, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 514, 378, 515, 536, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 517, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 0, 430, 410, 411,
	431, 432, 0, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	519, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 524, 459, 525, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 0, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 0, 479, 478, 529, 212, 3334, 0,
	0, 480, 481, 530, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 486, 487, 229, 488,
	232, 230, 231, 489, 0, 233, 234, 235, 236, 237,
	238, 239, 0, 0, 240, 490, 491, 492, 0, 241,
	493, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	0, 249, 250, 251, 248, 0, 252, 0, 253, 254,
	255, 0, 256, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 494,
	495, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	496, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	497, 498, 0, 0, 0, 0, 0, 0, 0, 286,
	287, 288, 499, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 500, 0, 501, 296,
	0, 297, 298, 299, 300, 502, 503, 504, 355, 0,
	301, 302, 0, 303, 304, 306, 0, 0, 0, 305,
	307, 314, 0, 0, 308, 505, 310, 309, 311, 312,
	313, 506, 0, 507, 0, 315, 0, 508, 0, 316,
	317, 318, 0, 319, 320, 0, 0, 321, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 509, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 352, 350, 0, 349,
	0, 0, 0, 353, 0, 510, 354, 511, 356, 357,
	0, 358, 359, 360, 0, 0, 362, 363, 364, 0,
	0, 365, 366, 512, 0, 367, 0, 513, 368, 361,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 377,
	514, 378, 515, 379, 0, 380, 0, 381, 382, 383,
	384, 385, 386, 387, 516, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 517,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	429, 0, 430, 410, 411, 431, 432, 0, 433, 434,
	518, 435, 436, 0, 437, 438, 439, 440, 412, 441,
	445, 446, 442, 443, 444, 519, 0, 448, 449, 447,
	0, 450, 451, 452, 453, 454, 280, 455, 0, 456,
	520, 521, 522, 523, 0, 463, 0, 457, 458, 524,
	459, 525, 0, 460, 461, 462, 0, 464, 465, 0,
	0, 466, 467, 468, 470, 471, 469, 473, 0, 474,
	0, 472, 475, 476, 477, 526, 527, 528, 0, 479,
	478, 529, 212, 2473, 0, 0, 480, 481, 530, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 0, 240,
	490, 491, 492, 0, 241, 493, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 500, 0, 501, 296, 0, 297, 298, 299, 300,
	502, 503, 504, 355, 0, 301, 302, 0, 303, 304,
	306, 0, 0, 0, 305, 307, 314, 0, 0, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 0, 508, 0, 316, 317, 318, 0, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 509, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 352, 350, 0, 349, 0, 0, 0, 353, 0,
	510, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 0,
	367, 0, 513, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 514, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 517, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 0, 430, 410, 411,
	431, 432, 0, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	519, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 524, 459, 525, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 0, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 212, 479, 478, 529, 0, 0, 0,
	0, 480, 481, 530, 482, 483, 484, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 486, 487, 229, 488, 232, 230, 231, 489,
	0, 233, 234, 235, 236, 237, 238, 239, 0, 0,
	240, 490, 491, 492, 0, 241, 493, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 0, 249, 250, 251,
	248, 0, 252, 0, 253, 254, 255, 0, 256, 0,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 494, 495, 3115, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 496, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 497, 498, 0, 0,
	0, 0, 0, 0, 0, 286, 287, 288, 499, 289,
	290, 0, 291, 0, 292, 0, 0, 0, 293, 294,
	0, 295, 500, 0, 501, 296, 0, 297, 298, 299,
	300, 502, 503, 504, 355, 0, 301, 302, 0, 303,
	304, 306, 0, 0, 0, 305, 307, 314, 0, 0,
	308, 505, 310, 309, 311, 312, 313, 506, 0, 507,
	0, 315, 0, 508, 0, 316, 317, 318, 0, 319,
	320, 0, 0, 321, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 509, 0, 329, 330, 0, 0, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 0, 347,
	348, 351, 352, 350, 0, 349, 0, 0, 0, 353,
	0, 510, 354, 511, 356, 357, 0, 358, 359, 360,
	0, 0, 362, 363, 364, 0, 0, 365, 366, 512,
	0, 367, 0, 513, 368, 361, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 377, 514, 378, 515, 379,
	0, 380, 0, 381, 382, 383, 384, 385, 386, 387,
	516, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 517, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 429, 0, 430, 410,
	411, 431, 432, 0, 433, 434, 518, 435, 436, 0,
	437, 438, 439, 440, 412, 441, 445, 446, 442, 443,
	444, 519, 0, 448, 449, 447, 0, 450, 451, 452,
	453, 454, 280, 455, 0, 456, 520, 521, 522, 523,
	0, 463, 0, 457, 458, 524, 459, 525, 0, 460,
	461, 462, 0, 464, 465, 0, 0, 466, 467, 468,
	470, 471, 469, 473, 0, 474, 0, 472, 475, 476,
	477, 526, 527, 528, 212, 479, 478, 529, 0, 0,
	0, 0, 480, 481, 530, 482, 483, 484, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 485, 0, 2253, 0, 0, 224, 226,
	225, 227, 228, 486, 487, 229, 488, 232, 230, 231,
	489, 0, 233, 234, 235, 236, 237, 238, 239, 0,
	0, 240, 490, 491, 492, 0, 241, 493, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 254, 255, 0, 256,
	0, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 494, 495, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 496, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 286, 287, 288, 499,
	289, 290, 0, 291, 0, 292, 0, 0, 0, 293,
	294, 0, 295, 500, 0, 501, 296, 0, 297, 298,
	299, 300, 502, 503, 504, 355, 0, 301, 302, 0,
	303, 304, 306, 0, 0, 0, 305, 307, 314, 0,
	0, 308, 505, 310, 309, 311, 312, 313, 506, 0,
	507, 0, 315, 0, 508, 0, 316, 317, 318, 0,
	319, 320, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 509, 0, 329, 330, 0, 0,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 0,
	347, 348, 351, 352, 350, 0, 349, 0, 0, 0,
	353, 0, 510, 354, 511, 356, 357, 0, 358, 359,
	360, 0, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 0, 367, 0, 513, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 514, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 516, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 517, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 429, 0, 430,
	410, 411, 431, 432, 0, 433, 434, 518, 435, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 446, 442,
	443, 444, 519, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 455, 0, 456, 520, 521, 522,
	523, 0, 463, 0, 457, 458, 524, 459, 525, 0,
	460, 461, 462, 0, 464, 465, 0, 0, 466, 467,
	468, 470, 471, 469, 473, 0, 474, 0, 472, 475,
	476, 477, 526, 527, 528, 0, 479, 478, 529, 212,
	2473, 0, 0, 480, 481, 530, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 486, 487,
	229, 488, 232, 230, 231, 489, 0, 233, 234, 235,
	236, 237, 238, 239, 0, 0, 240, 490, 491, 492,
	0, 241, 493, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 0, 249, 250, 251, 248, 0, 252, 0,
	253, 254, 255, 0, 256, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 494, 495, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 496, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 286, 287, 288, 499, 289, 290, 0, 291, 0,
	292, 0, 0, 0, 293, 294, 0, 295, 500, 0,
	501, 296, 0, 297, 298, 299, 300, 502, 503, 504,
	355, 0, 301, 302, 0, 303, 304, 306, 0, 0,
	0, 305, 307, 314, 0, 0, 308, 505, 310, 309,
	311, 312, 313, 506, 0, 507, 0, 315, 0, 508,
	0, 316, 317, 318, 0, 319, 320, 0, 0, 321,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 509,
	0, 329, 330, 0, 0, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 0, 347, 348, 351, 352, 350,
	0, 349, 0, 0, 0, 353, 0, 510, 354, 511,
	356, 357, 0, 358, 359, 360, 0, 0, 362, 363,
	2470, 0, 0, 365, 366, 512, 0, 367, 0, 513,
	368, 361, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 377, 514, 378, 515, 379, 0, 380, 0, 381,
	382, 383, 384, 385, 386, 387, 516, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 517, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 429, 0, 430, 410, 411, 431, 432, 0,
	433, 434, 518, 435, 436, 0, 437, 438, 439, 440,
	412, 441, 445, 446, 442, 443, 444, 519, 0, 448,
	449, 447, 0, 450, 451, 452, 453, 454, 280, 455,
	0, 456, 520, 521, 522, 523, 0, 463, 0, 457,
	458, 524, 459, 525, 0, 460, 461, 462, 0, 464,
	465, 0, 0, 466, 467, 468, 470, 471, 469, 473,
	0, 474, 0, 472, 475, 476, 477, 526, 527, 528,
	212, 479, 478, 529, 0, 0, 0, 0, 480, 481,
	530, 482, 483, 484, 0, 0, 0, 218, 219, 220,
	221, 222, 1939, 223, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 486,
	487, 229, 488, 232, 230, 231, 489, 0, 233, 234,
	235, 236, 237, 238, 239, 0, 0, 240, 490, 491,
	492, 0, 241, 493, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 0, 249, 250, 251, 248, 0, 252,
	0, 253, 254, 255, 0, 256, 0, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 494, 495, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 496, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 497, 498, 0, 0, 0, 0, 0,
	0, 0, 286, 287, 288, 499, 289, 290, 0, 291,
	0, 292, 0, 0, 0, 293, 294, 0, 295, 500,
	0, 501, 296, 0, 297, 298, 299, 300, 502, 503,
	504, 355, 0, 301, 302, 0, 303, 304, 306, 0,
	0, 0, 305, 307, 314, 0, 0, 308, 505, 310,
	309, 311, 312, 313, 506, 0, 507, 0, 315, 0,
	508, 0, 316, 317, 318, 0, 319, 320, 0, 0,
	321, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	509, 0, 329, 330, 0, 0, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 0, 347, 348, 351, 352,
	350, 0, 349, 0, 0, 0, 353, 0, 510, 354,
	511, 356, 357, 0, 358, 359, 360, 0, 0, 362,
	363, 364, 0, 0, 365, 366, 512, 0, 367, 0,
	513, 368, 361, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 377, 514, 378, 515, 379, 0, 380, 0,
	381, 382, 383, 384, 385, 386, 387, 516, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 517, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 429, 0, 430, 410, 411, 431, 432,
	0, 433, 434, 518, 435, 436, 0, 437, 438, 439,
	440, 412, 441, 445, 446, 442, 443, 444, 519, 0,
	448, 449, 447, 0, 450, 451, 452, 453, 454, 280,
	455, 0, 456, 520, 521, 522, 523, 0, 463, 0,
	457, 458, 524, 459, 525, 0, 460, 461, 462, 0,
	464, 465, 0, 0, 466, 467, 468, 470, 471, 469,
	473, 0, 474, 0, 472, 475, 476, 477, 526, 527,
	528, 0, 479, 478, 529, 1929, 0, 212, 0, 480,
	481, 530, 482, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 486, 487, 229, 488,
	232, 230, 231, 489, 0, 233, 234, 235, 236, 237,
	238, 239, 0, 0, 240, 490, 491, 492, 0, 241,
	493, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	0, 249, 250, 251, 248, 0, 252, 0, 253, 254,
	255, 0, 256, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 494,
	495, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	496, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	497, 498, 0, 0, 0, 0, 0, 0, 0, 286,
	287, 288, 499, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 500, 0, 501, 296,
	0, 297, 298, 299, 300, 502, 503, 504, 355, 0,
	301, 302, 0, 303, 304, 306, 0, 0, 0, 305,
	307, 314, 0, 0, 308, 505, 310, 309, 311, 312,
	313, 506, 0, 507, 0, 315, 0, 508, 0, 316,
	317, 318, 0, 319, 320, 0, 0, 321, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 509, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 352, 350, 0, 349,
	0, 0, 0, 353, 0, 510, 354, 511, 356, 357,
	0, 358, 359, 360, 0, 0, 362, 363, 364, 0,
	0, 365, 366, 512, 0, 367, 0, 513, 368, 361,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 377,
	514, 378, 515, 379, 0, 380, 0, 381, 382, 383,
	384, 385, 386, 387, 516, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 517,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	429, 0, 430, 410, 411, 431, 432, 0, 433, 434,
	518, 435, 436, 0, 437, 438, 439, 440, 412, 441,
	445, 446, 442, 443, 444, 519, 0, 448, 449, 447,
	0, 450, 451, 452, 453, 454, 280, 455, 0, 456,
	520, 521, 522, 523, 0, 463, 0, 457, 458, 524,
	459, 525, 0, 460, 461, 462, 0, 464, 465, 0,
	0, 466, 467, 468, 470, 471, 469, 473, 0, 474,
	0, 472, 475, 476, 477, 526, 527, 528, 0, 479,
	478, 529, 579, 0, 212, 0, 480, 481, 530, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 224, 1059,
	225, 227, 228, 486, 487, 229, 488, 232, 230, 231,
	489, 0, 233, 234, 235, 236, 237, 238, 239, 0,
	0, 240, 490, 491, 1057, 0, 241, 493, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 254, 255, 0, 256,
	0, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 494, 495, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 496, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 286, 287, 288, 499,
	289, 290, 0, 291, 0, 292, 0, 0, 0, 293,
	294, 0, 295, 500, 0, 501, 296, 0, 297, 298,
	299, 300, 502, 503, 504, 355, 0, 301, 302, 0,
	303, 304, 306, 0, 0, 0, 305, 307, 314, 0,
	0, 308, 505, 310, 309, 311, 312, 313, 506, 0,
	507, 0, 315, 0, 508, 0, 316, 317, 318, 0,
	319, 320, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 509, 0, 329, 330, 0, 0,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 580, 0,
	347, 348, 351, 352, 350, 0, 349, 0, 0, 0,
	353, 0, 510, 354, 511, 356, 357, 0, 358, 359,
	360, 0, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 0, 367, 0, 513, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 514, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 516, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 517, 408, 0, 409,
	413, 414, 576, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 1060, 429, 0, 430,
	410, 411, 431, 432, 0, 433, 434, 518, 435, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 446, 442,
	443, 444, 519, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 455, 0, 456, 575, 521, 522,
	523, 0, 463, 0, 457, 458, 524, 459, 525, 0,
	460, 461, 462, 0, 464, 465, 0, 0, 466, 467,
	468, 470, 471, 469, 473, 0, 474, 0, 472, 475,
	476, 477, 526, 527, 528, 0, 479, 478, 529, 1874,
	0, 212, 0, 480, 481, 530, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 0, 233,
	234, 235, 236, 237, 238, 239, 0, 0, 240, 490,
	491, 492, 0, 241, 493, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 0,
	252, 0, 253, 254, 255, 0, 256, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 494, 495, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 0, 0, 0, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	500, 0, 501, 296, 0, 297, 298, 299, 300, 1873,
	503, 504, 355, 0, 301, 302, 0, 303, 304, 306,
	0, 0, 0, 305, 307, 314, 0, 0, 308, 505,
	310, 309, 311, 312, 313, 506, 0, 507, 0, 315,
	0, 508, 0, 316, 317, 318, 0, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 509, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	352, 350, 0, 349, 0, 0, 0, 353, 0, 510,
	354, 511, 356, 357, 0, 358, 359, 360, 0, 0,
	362, 363, 364, 0, 0, 365, 366, 512, 0, 367,
	0, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 377, 514, 378, 515, 379, 0, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 0, 430, 410, 411, 431,
	432, 0, 433, 434, 518, 435, 436, 0, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	0, 448, 449, 447, 0, 450, 451, 452, 453, 454,
	280, 455, 0, 456, 520, 521, 522, 523, 0, 463,
	0, 457, 458, 524, 459, 525, 0, 460, 461, 462,
	0, 464, 465, 0, 0, 466, 467, 468, 470, 471,
	469, 473, 0, 474, 0, 472, 475, 476, 477, 526,
	527, 528, 0, 479, 478, 529, 579, 0, 212, 0,
	480, 481, 530, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 487, 229,
	488, 232, 230, 231, 489, 0, 233, 234, 235, 236,
	237, 238, 239, 0, 0, 240, 490, 491, 492, 0,
	569, 493, 0, 0, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	494, 495, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 496, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	286, 287, 288, 499, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 500, 0, 501,
	296, 0, 297, 298, 299, 300, 502, 503, 504, 355,
	0, 301, 302, 0, 303, 304, 306, 0, 0, 0,
	305, 307, 314, 0, 0, 308, 505, 310, 309, 311,
	312, 313, 506, 0, 507, 0, 315, 0, 508, 0,
	316, 317, 318, 0, 319, 320, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 509, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 580, 0, 347, 348, 351, 352, 350, 0,
	349, 0, 0, 0, 353, 0, 510, 354, 511, 356,
	357, 0, 358, 359, 360, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 0, 367, 0, 513, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 514, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 516, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	517, 408, 0, 409, 413, 414, 576, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	1343, 429, 0, 430, 410, 411, 431, 432, 0, 433,
	434, 518, 435, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 446, 442, 443, 444, 519, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 455, 0,
	456, 575, 521, 522, 523, 0, 463, 0, 457, 458,
	524, 459, 525, 0, 460, 461, 462, 0, 464, 465,
	0, 0, 466, 467, 468, 470, 471, 469, 473, 0,
	474, 0, 472, 475, 476, 477, 526, 527, 528, 0,
	479, 478, 529, 1328, 0, 212, 0, 480, 481, 530,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 486, 487, 229, 488, 232, 230,
	231, 489, 0, 233, 234, 235, 236, 237, 238, 239,
	0, 0, 240, 490, 491, 492, 0, 241, 493, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 0, 249,
	250, 251, 248, 0, 252, 0, 253, 254, 255, 0,
	256, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 494, 495, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 496, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 286, 287, 288,
	499, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 500, 0, 501, 296, 0, 297,
	298, 299, 300, 1327, 503, 504, 355, 0, 301, 302,
	0, 303, 304, 306, 0, 0, 0, 305, 307, 314,
	0, 0, 308, 505, 310, 309, 311, 312, 313, 506,
	0, 507, 0, 315, 0, 508, 0, 316, 317, 318,
	0, 319, 320, 0, 0, 321, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 509, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 352, 350, 0, 349, 0, 0,
	0, 353, 0, 510, 354, 511, 356, 357, 0, 358,
	359, 360, 0, 0, 362, 363, 364, 0, 0, 365,
	366, 512, 0, 367, 0, 513, 368, 361, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 377, 514, 378,
	515, 379, 0, 380, 0, 381, 382, 383, 384, 385,
	386, 387, 516, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 517, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 429, 0,
	430, 410, 411, 431, 432, 0, 433, 434, 518, 435,
	436, 0, 437, 438, 439, 440, 412, 441, 445, 446,
	442, 443, 444, 519, 0, 448, 449, 447, 0, 450,
	451, 452, 453, 454, 280, 455, 0, 456, 520, 521,
	522, 523, 0, 463, 0, 457, 458, 524, 459, 525,
	0, 460, 461, 462, 0, 464, 465, 0, 0, 466,
	467, 468, 470, 471, 469, 473, 0, 474, 0, 472,
	475, 476, 477, 526, 527, 528, 0, 479, 478, 529,
	1275, 0, 212, 0, 480, 481, 530, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 0, 240,
	490, 491, 492, 0, 241, 493, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 500, 0, 501, 296, 0, 297, 298, 299, 300,
	1274, 503, 504, 355, 0, 301, 302, 0, 303, 304,
	306, 0, 0, 0, 305, 307, 314, 0, 0, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 0, 508, 0, 316, 317, 318, 0, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 509, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 352, 350, 0, 349, 0, 0, 0, 353, 0,
	510, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 0,
	367, 0, 513, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 514, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 517, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 0, 430, 410, 411,
	431, 432, 0, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	519, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 524, 459, 525, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 0, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 0, 479, 478, 529, 1260, 0, 212,
	0, 480, 481, 530, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 486, 487,
	229, 488, 232, 230, 231, 489, 0, 233, 234, 235,
	236, 237, 238, 239, 0, 0, 240, 490, 491, 492,
	0, 241, 493, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 0, 249, 250, 251, 248, 0, 252, 0,
	253, 254, 255, 0, 256, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 494, 495, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 496, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 286, 287, 288, 499, 289, 290, 0, 291, 0,
	292, 0, 0, 0, 293, 294, 0, 295, 500, 0,
	501, 296, 0, 297, 298, 299, 300, 1259, 503, 504,
	355, 0, 301, 302, 0, 303, 304, 306, 0, 0,
	0, 305, 307, 314, 0, 0, 308, 505, 310, 309,
	311, 312, 313, 506, 0, 507, 0, 315, 0, 508,
	0, 316, 317, 318, 0, 319, 320, 0, 0, 321,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 509,
	0, 329, 330, 0, 0, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 0, 347, 348, 351, 352, 350,
	0, 349, 0, 0, 0, 353, 0, 510, 354, 511,
	356, 357, 0, 358, 359, 360, 0, 0, 362, 363,
	364, 0, 0, 365, 366, 512, 0, 367, 0, 513,
	368, 361, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 377, 514, 378, 515, 379, 0, 380, 0, 381,
	382, 383, 384, 385, 386, 387, 516, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 517, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 429, 0, 430, 410, 411, 431, 432, 0,
	433, 434, 518, 435, 436, 0, 437, 438, 439, 440,
	412, 441, 445, 446, 442, 443, 444, 519, 0, 448,
	449, 447, 0, 450, 451, 452, 453, 454, 280, 455,
	0, 456, 520, 521, 522, 523, 0, 463, 0, 457,
	458, 524, 459, 525, 0, 460, 461, 462, 0, 464,
	465, 0, 0, 466, 467, 468, 470, 471, 469, 473,
	0, 474, 0, 472, 475, 476, 477, 526, 527, 528,
	0, 479, 478, 529, 1255, 0, 212, 0, 480, 481,
	530, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 487, 229, 488, 232,
	230, 231, 489, 0, 233, 234, 235, 236, 237, 238,
	239, 0, 0, 240, 490, 491, 492, 0, 241, 493,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 0, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 494, 495,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 496,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 286, 287,
	288, 499, 289, 290, 0, 291, 0, 292, 0, 0,
	0, 293, 294, 0, 295, 500, 0, 501, 296, 0,
	297, 298, 299, 300, 502, 503, 504, 355, 0, 301,
	302, 0, 303, 304, 306, 0, 0, 0, 305, 307,
	314, 0, 0, 308, 505, 310, 309, 311, 312, 313,
	506, 0, 507, 0, 315, 0, 508, 0, 316, 317,
	318, 0, 319, 320, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 509, 0, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 352, 350, 0, 349, 0,
	0, 0, 353, 0, 510, 354, 511, 356, 357, 0,
	358, 359, 360, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 0, 367, 0, 513, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 514,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 516, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 517, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 429,
	0, 430, 410, 411, 431, 432, 0, 433, 434, 518,
	435, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	446, 442, 443, 444, 519, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 455, 0, 456, 520,
	521, 522, 523, 0, 463, 0, 457, 458, 524, 459,
	525, 0, 460, 461, 462, 0, 464, 465, 0, 0,
	466, 467, 468, 470, 471, 469, 473, 0, 474, 0,
	472, 475, 476, 477, 526, 527, 528, 0, 479, 478,
	529, 1182, 0, 212, 0, 480, 481, 530, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 486, 487, 229, 488, 232, 230, 231, 489,
	0, 233, 234, 235, 236, 237, 238, 239, 0, 0,
	240, 490, 491, 492, 0, 241, 493, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 0, 249, 250, 251,
	248, 0, 252, 0, 253, 254, 255, 0, 256, 0,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 494, 495, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 496, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 497, 498, 0, 0,
	0, 0, 0, 0, 0, 286, 287, 288, 499, 289,
	290, 0, 291, 0, 292, 0, 0, 0, 293, 294,
	0, 295, 500, 0, 501, 296, 0, 297, 298, 299,
	300, 502, 503, 504, 355, 0, 301, 302, 0, 303,
	304, 306, 0, 0, 0, 305, 307, 314, 0, 0,
	308, 505, 310, 309, 311, 312, 313, 506, 0, 507,
	0, 315, 0, 508, 0, 316, 317, 318, 0, 319,
	320, 0, 0, 321, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 509, 0, 329, 330, 0, 0, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 0, 347,
	348, 351, 352, 350, 0, 349, 0, 0, 0, 353,
	0, 510, 354, 511, 356, 357, 0, 358, 359, 360,
	0, 0, 362, 363, 364, 0, 0, 365, 366, 512,
	0, 367, 0, 513, 368, 361, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 377, 514, 378, 515, 379,
	0, 380, 0, 381, 382, 383, 384, 385, 386, 387,
	516, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 517, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 429, 0, 430, 410,
	411, 431, 432, 0, 433, 434, 518, 435, 436, 0,
	437, 438, 439, 440, 412, 441, 445, 446, 442, 443,
	444, 519, 0, 448, 449, 447, 0, 450, 451, 452,
	453, 454, 280, 455, 0, 456, 520, 521, 522, 523,
	0, 463, 0, 457, 458, 524, 459, 525, 0, 460,
	461, 462, 0, 464, 465, 0, 0, 466, 467, 468,
	470, 471, 469, 473, 0, 474, 0, 472, 475, 476,
	477, 526, 527, 528, 0, 479, 478, 529, 579, 0,
	212, 0, 480, 481, 530, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 224, 1059, 225, 227, 228, 486,
	487, 229, 488, 232, 230, 231, 489, 0, 233, 234,
	235, 236, 237, 238, 239, 0, 0, 240, 490, 491,
	1057, 0, 241, 493, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 0, 249, 250, 251, 248, 0, 252,
	0, 253, 254, 255, 0, 256, 0, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 494, 495, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 496, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 497, 498, 0, 0, 0, 0, 0,
	0, 0, 286, 287, 288, 499, 289, 290, 0, 291,
	0, 292, 0, 0, 0, 293, 294, 0, 295, 500,
	0, 501, 296, 0, 297, 298, 299, 300, 502, 503,
	504, 355, 0, 301, 302, 0, 303, 304, 306, 0,
	0, 0, 305, 307, 314, 0, 0, 308, 505, 310,
	309, 311, 312, 313, 506, 0, 507, 0, 315, 0,
	508, 0, 316, 317, 318, 0, 319, 320, 0, 0,
	321, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	509, 0, 329, 330, 0, 0, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 580, 0, 347, 348, 351, 352,
	350, 0, 349, 0, 0, 0, 353, 0, 510, 354,
	511, 356, 357, 0, 358, 359, 360, 0, 0, 362,
	363, 364, 0, 0, 365, 366, 512, 0, 367, 0,
	513, 368, 361, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 377, 514, 378, 515, 379, 0, 380, 0,
	381, 382, 383, 384, 385, 386, 387, 516, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 517, 408, 0, 409, 413, 414, 576, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 1060, 429, 0, 430, 410, 411, 431, 432,
	0, 433, 434, 518, 435, 436, 0, 437, 438, 439,
	440, 412, 441, 445, 446, 442, 443, 444, 519, 0,
	448, 449, 447, 0, 450, 451, 452, 453, 454, 280,
	455, 0, 456, 575, 521, 522, 523, 0, 463, 0,
	457, 1058, 524, 459, 525, 0, 460, 461, 462, 0,
	464, 465, 0, 0, 466, 467, 468, 470, 471, 469,
	473, 0, 474, 0, 472, 475, 476, 477, 526, 527,
	528, 212, 479, 478, 529, 0, 0, 0, 0, 480,
	481, 530, 482, 483, 484, 0, 0, 0, 218, 219,
	220, 221, 222, 1041, 223, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 0, 233,
	234, 235, 236, 237, 238, 239, 0, 0, 240, 490,
	491, 492, 0, 241, 493, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 0,
	252, 0, 253, 254, 255, 0, 256, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 494, 495, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 0, 0, 0, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	500, 0, 501, 296, 0, 297, 298, 299, 300, 502,
	503, 504, 355, 0, 301, 302, 0, 303, 304, 306,
	0, 0, 0, 305, 307, 314, 0, 0, 308, 505,
	310, 309, 311, 312, 313, 506, 0, 507, 0, 315,
	0, 508, 0, 316, 317, 318, 0, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 509, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	352, 350, 0, 349, 0, 0, 0, 353, 0, 510,
	354, 511, 356, 357, 0, 358, 359, 360, 0, 0,
	362, 363, 364, 0, 0, 365, 366, 512, 0, 367,
	0, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 377, 514, 378, 515, 379, 0, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 0, 430, 410, 411, 431,
	432, 0, 433, 434, 518, 435, 436, 0, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	0, 448, 449, 447, 0, 450, 451, 452, 453, 454,
	280, 455, 0, 456, 520, 521, 522, 523, 0, 463,
	0, 457, 458, 524, 459, 525, 0, 460, 461, 462,
	0, 464, 465, 0, 0, 466, 467, 468, 470, 471,
	469, 473, 0, 474, 0, 472, 475, 476, 477, 526,
	527, 528, 0, 479, 478, 529, 579, 0, 212, 0,
	480, 481, 530, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 487, 229,
	488, 232, 230, 231, 489, 0, 233, 234, 235, 236,
	237, 238, 239, 0, 0, 240, 490, 491, 492, 0,
	569, 493, 0, 0, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 567, 0, 253,
	254, 255, 0, 256, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	494, 495, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 496, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	286, 287, 288, 499, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 500, 0, 501,
	296, 0, 297, 298, 299, 300, 502, 503, 504, 355,
	0, 301, 302, 0, 303, 304, 306, 0, 0, 0,
	305, 307, 314, 0, 0, 308, 505, 310, 309, 311,
	312, 313, 506, 0, 507, 0, 315, 0, 508, 0,
	316, 317, 318, 0, 319, 320, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 509, 0,
	329, 330, 0, 0, 331, 568, 0, 0, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 580, 0, 347, 348, 351, 352, 350, 0,
	349, 0, 0, 0, 353, 0, 510, 354, 511, 356,
	357, 0, 358, 359, 360, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 0, 367, 0, 513, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 514, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 516, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	570, 408, 0, 409, 413, 414, 576, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	571, 429, 0, 430, 410, 411, 431, 432, 0, 433,
	434, 518, 435, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 446, 442, 443, 444, 519, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 455, 0,
	456, 575, 521, 522, 523, 0, 463, 0, 457, 573,
	524, 459, 525, 0, 460, 461, 462, 0, 464, 465,
	0, 0, 466, 467, 468, 470, 471, 469, 473, 0,
	474, 0, 472, 475, 476, 477, 526, 527, 528, 0,
	479, 478, 529, 563, 0, 212, 0, 480, 481, 530,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 486, 487, 229, 488, 232, 230,
	231, 489, 0, 233, 234, 235, 236, 237, 238, 239,
	0, 0, 240, 490, 491, 492, 0, 241, 493, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 0, 249,
	250, 251, 248, 0, 252, 0, 253, 254, 255, 0,
	256, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 494, 495, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 496, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 286, 287, 288,
	499, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 500, 0, 501, 296, 0, 297,
	298, 299, 300, 502, 503, 504, 355, 0, 301, 302,
	0, 303, 304, 306, 0, 0, 0, 305, 307, 314,
	0, 0, 308, 505, 310, 309, 311, 312, 313, 506,
	0, 507, 0, 315, 0, 508, 0, 316, 317, 318,
	0, 319, 320, 0, 0, 321, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 509, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 352, 350, 0, 349, 0, 0,
	0, 353, 0, 510, 354, 511, 356, 357, 0, 358,
	359, 360, 0, 0, 362, 363, 364, 0, 0, 365,
	366, 512, 0, 367, 0, 513, 368, 361, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 377, 514, 378,
	515, 379, 0, 380, 0, 381, 382, 383, 384, 385,
	386, 387, 516, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 517, 408, 0,
	409, 564, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 429, 0,
	430, 410, 411, 431, 432, 0, 433, 434, 518, 435,
	436, 0, 437, 438, 439, 440, 412, 441, 445, 446,
	442, 443, 444, 519, 0, 448, 449, 447, 0, 450,
	451, 452, 453, 454, 280, 455, 0, 456, 520, 521,
	522, 523, 0, 463, 0, 457, 458, 524, 459, 525,
	0, 460, 461, 462, 0, 464, 465, 0, 0, 466,
	467, 468, 470, 471, 469, 473, 0, 474, 0, 472,
	475, 476, 477, 526, 527, 528, 0, 479, 478, 529,
	561, 0, 212, 0, 480, 481, 530, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 0, 240,
	490, 491, 492, 0, 241, 493, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 500, 0, 501, 296, 0, 297, 298, 299, 300,
	502, 503, 504, 355, 0, 301, 302, 0, 303, 304,
	306, 0, 0, 0, 305, 307, 314, 0, 0, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 0, 508, 0, 316, 317, 318, 0, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 509, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 352, 350, 0, 349, 0, 0, 0, 353, 0,
	510, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 0,
	367, 0, 513, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 514, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 517, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 0, 430, 410, 411,
	431, 432, 0, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	519, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 524, 459, 525, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 0, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 0, 479, 478, 529, 555, 0, 212,
	0, 480, 481, 530, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 486, 487,
	229, 488, 232, 230, 231, 489, 0, 233, 234, 235,
	236, 237, 238, 239, 0, 0, 240, 490, 491, 492,
	0, 241, 493, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 0, 249, 250, 251, 248, 0, 252, 0,
	253, 254, 255, 0, 256, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 494, 495, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 496, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 286, 287, 288, 499, 289, 290, 0, 291, 0,
	292, 0, 0, 0, 293, 294, 0, 295, 500, 0,
	501, 296, 0, 297, 298, 299, 300, 502, 503, 504,
	355, 0, 301, 302, 0, 303, 304, 306, 0, 0,
	0, 305, 307, 314, 0, 0, 308, 505, 310, 309,
	311, 312, 313, 506, 0, 507, 0, 315, 0, 508,
	0, 316, 317, 318, 0, 319, 320, 0, 0, 321,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 509,
	0, 329, 330, 0, 0, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 0, 347, 348, 351, 352, 350,
	0, 349, 0, 0, 0, 353, 0, 510, 354, 511,
	356, 357, 0, 358, 359, 360, 0, 0, 362, 363,
	364, 0, 0, 365, 366, 512, 0, 367, 0, 513,
	368, 361, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 377, 514, 378, 515, 379, 0, 380, 0, 381,
	382, 383, 384, 385, 386, 387, 516, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 517, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 429, 0, 430, 410, 411, 431, 432, 0,
	433, 434, 518, 435, 436, 0, 437, 438, 439, 440,
	412, 441, 445, 446, 442, 443, 444, 519, 0, 448,
	449, 447, 0, 450, 451, 452, 453, 454, 280, 455,
	0, 456, 520, 521, 522, 523, 0, 463, 0, 457,
	458, 524, 459, 525, 0, 460, 461, 462, 0, 464,
	465, 0, 0, 466, 467, 468, 470, 471, 469, 473,
	0, 474, 0, 472, 475, 476, 477, 526, 527, 528,
	0, 479, 478, 529, 533, 0, 212, 0, 480, 481,
	530, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 487, 229, 488, 232,
	230, 231, 489, 0, 233, 234, 235, 236, 237, 238,
	239, 0, 0, 240, 490, 491, 492, 0, 241, 493,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 0, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 494, 495,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 496,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 286, 287,
	288, 499, 289, 290, 0, 291, 0, 292, 0, 0,
	0, 293, 294, 0, 295, 500, 0, 501, 296, 0,
	297, 298, 299, 300, 502, 503, 504, 355, 0, 301,
	302, 0, 303, 304, 306, 0, 0, 0, 305, 307,
	314, 0, 0, 308, 505, 310, 309, 311, 312, 313,
	506, 0, 507, 0, 315, 0, 508, 0, 316, 317,
	318, 0, 319, 320, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 509, 0, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 352, 350, 0, 349, 0,
	0, 0, 353, 0, 510, 354, 511, 356, 357, 0,
	358, 359, 360, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 0, 367, 0, 513, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 514,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 516, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 517, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 429,
	0, 430, 410, 411, 431, 432, 0, 433, 434, 518,
	435, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	446, 442, 443, 444, 519, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 455, 0, 456, 520,
	521, 522, 523, 0, 463, 0, 457, 458, 524, 459,
	525, 0, 460, 461, 462, 0, 464, 465, 0, 0,
	466, 467, 468, 470, 471, 469, 473, 0, 474, 0,
	472, 475, 476, 477, 526, 527, 528, 212, 479, 478,
	529, 0, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 486, 487, 229, 488,
	232, 230, 231, 489, 0, 233, 234, 235, 236, 237,
	238, 239, 0, 0, 240, 490, 491, 492, 0, 241,
	493, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	0, 249, 250, 251, 248, 0, 252, 0, 253, 254,
	255, 0, 256, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 494,
	495, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	496, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	497, 498, 0, 0, 0, 0, 0, 0, 0, 286,
	287, 288, 499, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 500, 0, 501, 296,
	0, 297, 298, 299, 300, 502, 503, 504, 355, 0,
	301, 302, 0, 303, 304, 306, 0, 0, 0, 305,
	307, 314, 0, 0, 308, 505, 310, 309, 311, 312,
	313, 506, 0, 507, 0, 315, 0, 508, 0, 316,
	317, 318, 0, 319, 320, 0, 0, 321, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 509, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 352, 350, 0, 349,
	0, 0, 0, 353, 0, 510, 354, 511, 356, 357,
	0, 358, 359, 360, 0, 0, 362, 363, 364, 0,
	0, 365, 366, 512, 0, 367, 0, 513, 368, 361,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 377,
	514, 378, 515, 379, 0, 380, 0, 381, 382, 383,
	384, 385, 386, 387, 516, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 517,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	429, 0, 430, 410, 411, 431, 432, 0, 433, 434,
	518, 435, 436, 0, 437, 438, 439, 440, 412, 441,
	445, 446, 442, 443, 444, 519, 0, 448, 449, 447,
	0, 450, 451, 452, 453, 454, 280, 455, 0, 456,
	520, 521, 522, 523, 0, 463, 0, 457, 458, 524,
	459, 525, 0, 460, 461, 462, 0, 464, 465, 0,
	0, 466, 467, 468, 470, 471, 469, 473, 0, 474,
	0, 472, 475, 476, 477, 526, 527, 528, 212, 479,
	478, 529, 0, 0, 0, 0, 480, 481, 530, 482,
	483, 484, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 486, 487, 229,
	488, 232, 230, 231, 489, 0, 233, 234, 235, 236,
	237, 238, 239, 0, 0, 240, 490, 491, 492, 0,
	241, 493, 0, 0, 0, 242, 243, 244, 245, 246,
	247, 0, 249, 250, 251, 248, 0, 252, 0, 253,
	254, 255, 0, 256, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	494, 495, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 496, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	286, 287, 288, 499, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 500, 0, 501,
	296, 0, 297, 298, 299, 300, 2790, 503, 504, 355,
	0, 301, 302, 0, 303, 304, 306, 0, 0, 0,
	305, 307, 314, 0, 0, 308, 505, 310, 309, 311,
	312, 313, 506, 0, 507, 0, 315, 0, 508, 0,
	316, 317, 318, 0, 319, 320, 0, 0, 321, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 509, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 0, 347, 348, 351, 352, 350, 0,
	349, 0, 0, 0, 353, 0, 510, 354, 511, 356,
	357, 0, 358, 359, 360, 0, 0, 362, 363, 364,
	0, 0, 365, 366, 512, 0, 367, 0, 513, 368,
	361, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	377, 514, 378, 515, 379, 0, 380, 0, 381, 382,
	383, 384, 385, 386, 387, 516, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	517, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 429, 0, 430, 410, 411, 431, 432, 0, 433,
	434, 518, 435, 436, 0, 437, 438, 439, 440, 412,
	441, 445, 446, 442, 443, 444, 519, 0, 448, 449,
	447, 0, 450, 451, 452, 453, 454, 280, 455, 0,
	456, 520, 521, 522, 523, 0, 463, 0, 457, 458,
	524, 459, 525, 0, 460, 461, 462, 0, 464, 465,
	0, 0, 466, 467, 468, 470, 471, 469, 473, 0,
	474, 0, 472, 475, 476, 477, 526, 527, 528, 212,
	479, 478, 529, 0, 0, 0, 0, 480, 481, 530,
	482, 483, 484, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 486, 487,
	229, 488, 232, 230, 231, 489, 0, 233, 234, 235,
	236, 237, 238, 239, 0, 0, 240, 490, 491, 492,
	0, 241, 493, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 0, 249, 250, 251, 248, 0, 252, 0,
	253, 254, 255, 0, 256, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 494, 495, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 496, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 286, 287, 288, 499, 289, 290, 0, 291, 0,
	292, 0, 0, 0, 293, 294, 0, 295, 500, 0,
	501, 296, 0, 297, 298, 299, 300, 2788, 503, 504,
	355, 0, 301, 302, 0, 303, 304, 306, 0, 0,
	0, 305, 307, 314, 0, 0, 308, 505, 310, 309,
	311, 312, 313, 506, 0, 507, 0, 315, 0, 508,
	0, 316, 317, 318, 0, 319, 320, 0, 0, 321,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 509,
	0, 329, 330, 0, 0, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 0, 347, 348, 351, 352, 350,
	0, 349, 0, 0, 0, 353, 0, 510, 354, 511,
	356, 357, 0, 358, 359, 360, 0, 0, 362, 363,
	364, 0, 0, 365, 366, 512, 0, 367, 0, 513,
	368, 361, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 377, 514, 378, 515, 379, 0, 380, 0, 381,
	382, 383, 384, 385, 386, 387, 516, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 517, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 429, 0, 430, 410, 411, 431, 432, 0,
	433, 434, 518, 435, 436, 0, 437, 438, 439, 440,
	412, 441, 445, 446, 442, 443, 444, 519, 0, 448,
	449, 447, 0, 450, 451, 452, 453, 454, 280, 455,
	0, 456, 520, 521, 522, 523, 0, 463, 0, 457,
	458, 524, 459, 525, 0, 460, 461, 462, 0, 464,
	465, 0, 0, 466, 467, 468, 470, 471, 469, 473,
	0, 474, 0, 472, 475, 476, 477, 526, 527, 528,
	212, 479, 478, 529, 0, 0, 0, 0, 480, 481,
	530, 482, 483, 484, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 486,
	487, 229, 488, 232, 230, 231, 489, 0, 233, 234,
	235, 236, 237, 238, 239, 0, 0, 240, 490, 491,
	492, 0, 241, 493, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 0, 249, 250, 251, 248, 0, 252,
	0, 253, 254, 255, 0, 256, 0, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 494, 495, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 496, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 497, 498, 0, 0, 0, 0, 0,
	0, 0, 286, 287, 288, 499, 289, 290, 0, 291,
	0, 292, 0, 0, 0, 293, 294, 0, 295, 500,
	0, 501, 296, 0, 297, 298, 299, 300, 2775, 503,
	504, 355, 0, 301, 302, 0, 303, 304, 306, 0,
	0, 0, 305, 307, 314, 0, 0, 308, 505, 310,
	309, 311, 312, 313, 506, 0, 507, 0, 315, 0,
	508, 0, 316, 317, 318, 0, 319, 320, 0, 0,
	321, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	509, 0, 329, 330, 0, 0, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 0, 347, 348, 351, 352,
	350, 0, 349, 0, 0, 0, 353, 0, 510, 354,
	511, 356, 357, 0, 358, 359, 360, 0, 0, 362,
	363, 364, 0, 0, 365, 366, 512, 0, 367, 0,
	513, 368, 361, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 377, 514, 378, 515, 379, 0, 380, 0,
	381, 382, 383, 384, 385, 386, 387, 516, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 517, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 429, 0, 430, 410, 411, 431, 432,
	0, 433, 434, 518, 435, 436, 0, 437, 438, 439,
	440, 412, 441, 445, 446, 442, 443, 444, 519, 0,
	448, 449, 447, 0, 450, 451, 452, 453, 454, 280,
	455, 0, 456, 520, 521, 522, 523, 0, 463, 0,
	457, 458, 524, 459, 525, 0, 460, 461, 462, 0,
	464, 465, 0, 0, 466, 467, 468, 470, 471, 469,
	473, 0, 474, 0, 472, 475, 476, 477, 526, 527,
	528, 212, 479, 478, 529, 0, 0, 0, 0, 480,
	481, 530, 482, 483, 484, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	486, 487, 229, 488, 232, 230, 231, 489, 0, 233,
	234, 235, 236, 237, 238, 239, 0, 0, 240, 490,
	491, 492, 0, 241, 493, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 0, 249, 250, 251, 248, 0,
	252, 0, 253, 254, 255, 0, 256, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 494, 495, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 496, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 497, 498, 0, 0, 0, 0,
	0, 0, 0, 286, 287, 288, 499, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	500, 0, 501, 296, 0, 297, 298, 299, 300, 2434,
	503, 504, 355, 0, 301, 302, 0, 303, 304, 306,
	0, 0, 0, 305, 307, 314, 0, 0, 308, 505,
	310, 309, 311, 312, 313, 506, 0, 507, 0, 315,
	0, 508, 0, 316, 317, 318, 0, 319, 320, 0,
	0, 321, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 509, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	352, 350, 0, 349, 0, 0, 0, 353, 0, 510,
	354, 511, 356, 357, 0, 358, 359, 360, 0, 0,
	362, 363, 364, 0, 0, 365, 366, 512, 0, 367,
	0, 513, 368, 361, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 377, 514, 378, 515, 379, 0, 380,
	0, 381, 382, 383, 384, 385, 386, 387, 516, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 517, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 429, 0, 430, 410, 411, 431,
	432, 0, 433, 434, 518, 435, 436, 0, 437, 438,
	439, 440, 412, 441, 445, 446, 442, 443, 444, 519,
	0, 448, 449, 447, 0, 450, 451, 452, 453, 454,
	280, 455, 0, 456, 520, 521, 522, 523, 0, 463,
	0, 457, 458, 524, 459, 525, 0, 460, 461, 462,
	0, 464, 465, 0, 0, 466, 467, 468, 470, 471,
	469, 473, 0, 474, 0, 472, 475, 476, 477, 526,
	527, 528, 212, 479, 478, 529, 0, 0, 0, 0,
	480, 481, 530, 482, 483, 484, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 486, 487, 229, 488, 232, 230, 231, 489, 0,
	233, 234, 235, 236, 237, 238, 239, 0, 0, 240,
	490, 491, 492, 0, 241, 493, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 0, 249, 250, 251, 248,
	0, 252, 0, 253, 254, 255, 0, 256, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 494, 495, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 496, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 286, 287, 288, 499, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 500, 0, 501, 296, 0, 297, 298, 299, 300,
	502, 503, 504, 355, 0, 301, 302, 0, 303, 304,
	306, 0, 0, 0, 305, 307, 314, 0, 0, 308,
	505, 310, 309, 311, 312, 313, 506, 0, 507, 0,
	315, 0, 508, 0, 316, 317, 318, 0, 319, 320,
	0, 0, 321, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 509, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 352, 350, 0, 349, 0, 0, 0, 353, 0,
	510, 354, 511, 356, 357, 0, 358, 359, 360, 0,
	0, 362, 363, 364, 0, 0, 365, 366, 512, 0,
	367, 0, 513, 368, 361, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 377, 514, 378, 515, 379, 0,
	380, 0, 381, 382, 383, 384, 385, 386, 387, 516,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 517, 408, 0, 409, 564, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 429, 0, 430, 410, 411,
	431, 432, 0, 433, 434, 518, 435, 436, 0, 437,
	438, 439, 440, 412, 441, 445, 446, 442, 443, 444,
	519, 0, 448, 449, 447, 0, 450, 451, 452, 453,
	454, 280, 455, 0, 456, 520, 521, 522, 523, 0,
	463, 0, 457, 458, 524, 459, 525, 0, 460, 461,
	462, 0, 464, 465, 0, 0, 466, 467, 468, 470,
	471, 469, 473, 0, 474, 0, 472, 475, 476, 477,
	526, 527, 528, 212, 479, 478, 529, 0, 0, 0,
	0, 480, 481, 530, 482, 483, 484, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 485, 0, 1887, 0, 0, 224, 226, 225,
	227, 228, 486, 487, 229, 488, 232, 230, 231, 489,
	0, 233, 234, 235, 236, 237, 238, 239, 0, 0,
	240, 490, 491, 492, 0, 241, 493, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 0, 249, 250, 251,
	248, 0, 252, 0, 253, 254, 255, 0, 256, 0,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 494, 495, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 496, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 497, 498, 0, 0,
	0, 0, 0, 0, 0, 286, 287, 288, 499, 289,
	290, 0, 291, 0, 292, 0, 0, 0, 293, 294,
	0, 295, 500, 0, 501, 296, 0, 297, 298, 299,
	300, 502, 503, 504, 355, 0, 301, 302, 0, 303,
	304, 306, 0, 0, 0, 305, 307, 314, 0, 0,
	308, 505, 310, 309, 311, 312, 313, 506, 0, 507,
	0, 315, 0, 508, 0, 316, 317, 318, 0, 319,
	320, 0, 0, 321, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 509, 0, 329, 330, 0, 0, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 0, 347,
	348, 351, 352, 350, 0, 349, 0, 0, 0, 353,
	0, 510, 354, 511, 356, 357, 0, 358, 359, 360,
	0, 0, 362, 363, 364, 0, 0, 365, 366, 512,
	0, 367, 0, 513, 368, 361, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 377, 514, 378, 515, 379,
	0, 380, 0, 381, 382, 383, 384, 385, 386, 387,
	516, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 517, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 429, 0, 0, 410,
	411, 431, 432, 0, 433, 434, 518, 435, 436, 0,
	437, 438, 439, 440, 412, 441, 445, 446, 442, 443,
	444, 519, 0, 448, 449, 447, 0, 450, 451, 452,
	453, 454, 280, 455, 0, 456, 520, 521, 522, 523,
	0, 463, 0, 457, 458, 524, 459, 525, 0, 460,
	461, 462, 0, 464, 465, 0, 0, 466, 467, 468,
	470, 471, 469, 473, 0, 474, 0, 472, 475, 476,
	477, 526, 527, 528, 212, 479, 478, 529, 0, 0,
	0, 0, 480, 481, 530, 482, 483, 484, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 486, 487, 229, 488, 232, 230, 231,
	489, 0, 233, 234, 235, 236, 237, 238, 239, 0,
	0, 240, 490, 491, 492, 0, 241, 493, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 0, 249, 250,
	251, 248, 0, 252, 0, 253, 254, 255, 0, 256,
	0, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 494, 495, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 496, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 286, 287, 288, 499,
	289, 290, 0, 291, 0, 292, 0, 0, 0, 293,
	294, 0, 295, 500, 0, 501, 296, 0, 297, 298,
	299, 300, 1297, 503, 504, 355, 0, 301, 302, 0,
	303, 304, 306, 0, 0, 0, 305, 307, 314, 0,
	0, 308, 505, 310, 309, 311, 312, 313, 506, 0,
	507, 0, 315, 0, 508, 0, 316, 317, 318, 0,
	319, 320, 0, 0, 321, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 509, 0, 329, 330, 0, 0,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 0,
	347, 348, 351, 352, 350, 0, 349, 0, 0, 0,
	353, 0, 510, 354, 511, 356, 357, 0, 358, 359,
	360, 0, 0, 362, 363, 364, 0, 0, 365, 366,
	512, 0, 367, 0, 513, 368, 361, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 377, 514, 378, 515,
	379, 0, 380, 0, 381, 382, 383, 384, 385, 386,
	387, 516, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 517, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 429, 0, 430,
	410, 411, 431, 432, 0, 433, 434, 518, 435, 436,
	0, 437, 438, 439, 440, 412, 441, 445, 446, 442,
	443, 444, 519, 0, 448, 449, 447, 0, 450, 451,
	452, 453, 454, 280, 455, 0, 456, 520, 521, 522,
	523, 0, 463, 0, 457, 458, 524, 459, 525, 0,
	460, 461, 462, 0, 464, 465, 0, 0, 466, 467,
	468, 470, 471, 469, 473, 0, 474, 0, 472, 475,
	476, 477, 526, 527, 528, 212, 479, 478, 529, 0,
	0, 0, 0, 480, 481, 530, 482, 483, 484, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 486, 487, 229, 488, 232, 230,
	231, 489, 0, 233, 234, 235, 236, 237, 238, 239,
	0, 0, 240, 490, 491, 492, 0, 241, 493, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 0, 249,
	250, 251, 248, 0, 252, 0, 253, 254, 255, 0,
	256, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 494, 495, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 496, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 286, 287, 288,
	499, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 500, 0, 501, 296, 0, 297,
	298, 299, 300, 1237, 503, 504, 355, 0, 301, 302,
	0, 303, 304, 306, 0, 0, 0, 305, 307, 314,
	0, 0, 308, 505, 310, 309, 311, 312, 313, 506,
	0, 507, 0, 315, 0, 508, 0, 316, 317, 318,
	0, 319, 320, 0, 0, 321, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 509, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 352, 350, 0, 349, 0, 0,
	0, 353, 0, 510, 354, 511, 356, 357, 0, 358,
	359, 360, 0, 0, 362, 363, 364, 0, 0, 365,
	366, 512, 0, 367, 0, 513, 368, 361, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 377, 514, 378,
	515, 379, 0, 380, 0, 381, 382, 383, 384, 385,
	386, 387, 516, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 517, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 429, 0,
	430, 410, 411, 431, 432, 0, 433, 434, 518, 435,
	436, 0, 437, 438, 439, 440, 412, 441, 445, 446,
	442, 443, 444, 519, 0, 448, 449, 447, 0, 450,
	451, 452, 453, 454, 280, 455, 0, 456, 520, 521,
	522, 523, 0, 463, 0, 457, 458, 524, 459, 525,
	0, 460, 461, 462, 0, 464, 465, 0, 0, 466,
	467, 468, 470, 471, 469, 473, 0, 474, 0, 472,
	475, 476, 477, 526, 527, 528, 212, 479, 478, 529,
	0, 0, 0, 0, 480, 481, 530, 482, 483, 484,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 486, 487, 229, 488, 232,
	230, 231, 489, 0, 233, 234, 235, 236, 237, 238,
	239, 0, 0, 240, 490, 491, 492, 0, 241, 493,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 0,
	249, 250, 251, 248, 0, 252, 0, 253, 254, 255,
	0, 256, 0, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 494, 495,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 496,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 286, 287,
	288, 499, 289, 290, 0, 291, 0, 292, 0, 0,
	0, 293, 294, 0, 295, 500, 0, 501, 296, 0,
	297, 298, 299, 300, 502, 503, 504, 355, 0, 301,
	302, 0, 303, 304, 306, 0, 0, 0, 305, 307,
	314, 0, 0, 308, 505, 310, 309, 311, 312, 313,
	506, 0, 507, 0, 315, 0, 508, 0, 316, 317,
	318, 0, 319, 320, 0, 0, 321, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 509, 0, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 352, 350, 0, 349, 0,
	0, 0, 353, 0, 510, 354, 511, 356, 357, 0,
	358, 359, 360, 0, 0, 362, 363, 364, 0, 0,
	365, 366, 512, 0, 367, 0, 513, 368, 361, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 377, 514,
	378, 515, 379, 0, 380, 0, 381, 382, 383, 384,
	385, 386, 387, 516, 995, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 517, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 429,
	0, 430, 410, 411, 431, 432, 0, 433, 434, 518,
	435, 436, 0, 437, 438, 439, 440, 412, 441, 445,
	446, 442, 443, 444, 519, 0, 448, 449, 447, 0,
	450, 451, 452, 453, 454, 280, 455, 0, 456, 520,
	521, 522, 523, 0, 463, 0, 457, 458, 524, 459,
	525, 0, 460, 461, 462, 0, 464, 465, 0, 0,
	466, 467, 468, 470, 471, 469, 473, 0, 474, 0,
	472, 475, 476, 477, 526, 527, 528, 212, 479, 478,
	529, 0, 0, 0, 0, 480, 481, 530, 482, 483,
	484, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 486, 487, 229, 488,
	232, 230, 231, 489, 0, 233, 234, 235, 236, 237,
	238, 239, 0, 0, 240, 490, 491, 492, 0, 241,
	493, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	0, 249, 250, 251, 248, 0, 252, 0, 253, 254,
	255, 0, 256, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 494,
	495, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	496, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	497, 498, 0, 0, 0, 0, 0, 0, 0, 286,
	287, 288, 499, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 500, 0, 501, 0,
	0, 297, 298, 299, 300, 502, 503, 504, 355, 0,
	301, 302, 0, 303, 304, 306, 0, 0, 0, 305,
	307, 314, 0, 0, 308, 505, 310, 309, 311, 312,
	313, 506, 0, 507, 0, 315, 0, 508, 0, 316,
	317, 318, 0, 319, 320, 0, 0, 321, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 509, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 352, 350, 0, 349,
	0, 0, 0, 353, 0, 510, 354, 511, 356, 357,
	0, 358, 359, 360, 0, 0, 362, 363, 364, 0,
	0, 365, 366, 512, 0, 367, 0, 513, 368, 361,
	369, 370, 0, 372, 373, 374, 375, 0, 376, 377,
	514, 378, 515, 379, 0, 380, 0, 381, 382, 383,
	384, 0, 386, 387, 516, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 517,
	0, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	429, 0, 430, 410, 411, 431, 432, 0, 433, 434,
	518, 435, 436, 0, 437, 438, 439, 440, 412, 441,
	445, 446, 442, 443, 444, 519, 0, 448, 449, 447,
	0, 450, 451, 452, 453, 454, 280, 455, 0, 456,
	520, 521, 522, 523, 0, 463, 0, 457, 458, 524,
	459, 525, 0, 460, 461, 462, 0, 464, 465, 0,
	0, 466, 467, 468, 470, 471, 469, 473, 0, 474,
	0, 472, 475, 476, 477, 526, 527, 528, 0, 479,
	478, 529, 0, 0, 0, 0, 480, 481, 530, 482,
	483, 484, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517,
	1518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1509, 1504, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 1522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 1509, 1504, 0, 0, 1495, 0,
	0, 0, 1476, 0, 0, 1492, 0, 1522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1498, 1499, 1500, 1501, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 0,
	1523, 0, 0, 0, 1503, 1505, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 1520, 0, 0, 0,
	0, 0, 0, 1490, 1491, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 1503, 1505, 1511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	1521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1511, 0, 0, 0, 0, 1510, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 0, 0, 0, 1502, 1514, 0, 0, 1509, 1504,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	0, 1522, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 1514, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 2961, 0, 0,
	1498, 1499, 1500, 1501, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 0, 0, 1513, 0, 0, 1523, 0, 0,
	2642, 1503, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 1520, 0, 0, 0, 0, 0, 0,
	1490, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 1509, 1504,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	0, 1522, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 0,
	1498, 1499, 1500, 1501, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1513, 0, 0, 1523, 0, 0,
	0, 1503, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 1520, 0, 0, 0, 0, 0, 0,
	1490, 1491, 0, 0, 0, 0, 0, 1512, 0, 0,
	1487, 1488, 1494, 1515, 1493, 1489, 1511, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 1496, 0, 0, 0,
	0, 0, 0, 0, 2641, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1473, 1474, 0, 1506,
	1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1509, 1504, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 1497, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1514, 1473, 1474, 0, 1506, 1507, 1508, 1516,
	1517, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 1504, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 1522, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 1499, 1500,
	1501, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 1513, 0, 0, 1523, 0, 0, 1512, 1503, 1505,
	1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 1519, 0,
	1520, 0, 0, 0, 2638, 0, 0, 1490, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1511, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 1496, 1481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1521, 0, 0, 0, 1513, 0,
	0, 1523, 0, 0, 0, 1503, 1505, 0, 0, 0,
	0, 1510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1519, 0, 1520, 0, 0,
	0, 0, 0, 0, 1490, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 1521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 1514,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1509,
	1504, 0, 0, 0, 0, 0, 0, 1476, 0, 0,
	0, 0, 1522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	1497, 0, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 1514, 1487, 1488, 1494,
	1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479,
	1480, 1482, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 2637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1498, 1499, 1500, 1501, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 0, 1523, 0,
	0, 1512, 1503, 1505, 1487, 1488, 1494, 1515, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	0, 0, 1519, 0, 1520, 0, 0, 0, 2636, 0,
	0, 1490, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1511, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 1509,
	1504, 0, 0, 0, 0, 0, 0, 1476, 0, 0,
	0, 0, 1522, 0, 0, 1510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	0, 1498, 1499, 1500, 1501, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 0, 1523, 0,
	0, 0, 1503, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 1520, 0, 0, 0, 0, 0,
	0, 1490, 1491, 0, 0, 0, 0, 0, 1512, 0,
	0, 1487, 1488, 1494, 1515, 1493, 1489, 1511, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 1496, 0, 0,
	0, 0, 0, 0, 0, 2117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517,
	1518, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 1509, 1504, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 1522, 0, 0, 1497, 0, 0,
	0, 0, 0, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 1475,
	0, 0, 0, 1514, 1509, 1504, 0, 0, 1495, 0,
	0, 0, 1476, 0, 0, 1492, 0, 1522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1498, 1499, 1500, 1501, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 1512, 0,
	0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 1513, 0, 0,
	1523, 3590, 0, 0, 1503, 1505, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 1520, 0, 0, 0,
	0, 0, 0, 1490, 1491, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 1503, 1505, 1511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	1521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1511, 0, 0, 0, 0, 1510, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 1473, 1474, 0,
	1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 1514, 1509, 1504, 0, 0,
	0, 0, 0, 0, 1476, 0, 0, 0, 0, 1522,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 1514, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0,
	0, 0, 0, 3586, 0, 0, 0, 0, 1498, 1499,
	1500, 1501, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 1513, 0, 0, 1523, 3507, 0, 0, 1503,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 1520, 0, 0, 0, 0, 0, 0, 1490, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1511, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 1473, 1474, 0,
	1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 1509, 1504, 0, 0,
	0, 0, 0, 0, 1476, 0, 0, 0, 0, 1522,
	0, 0, 1510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 0, 0, 0, 0, 0, 0, 1498, 1499,
	1500, 1501, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 0, 1523, 0, 0, 0, 1503,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 1520, 0, 0, 0, 0, 0, 0, 1490, 1491,
	0, 0, 0, 0, 0, 1512, 0, 0, 1487, 1488,
	1494, 1515, 1493, 1489, 1511, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 1496, 0, 0, 0, 3506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 1509, 1504,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	0, 1522, 0, 0, 1497, 0, 0, 0, 0, 0,
	0, 0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517,
	1518, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	1514, 1509, 1504, 0, 0, 1495, 0, 0, 0, 1476,
	0, 0, 1492, 0, 1522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 1499, 1500, 1501, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 1512, 0, 0, 1487, 1488,
	1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 1513, 0, 0, 1523, 3391, 0,
	0, 1503, 1505, 1498, 1499, 1500, 1501, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 1520, 0, 0, 0, 0, 0, 0,
	1490, 1491, 0, 0, 0, 0, 0, 1513, 0, 0,
	1523, 0, 0, 0, 1503, 1505, 1511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 1520, 0, 0, 0,
	0, 0, 0, 1490, 1491, 0, 0, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1511,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 1473, 1474, 0, 1506, 1507, 1508,
	1516, 1517, 1518, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 1514, 1509, 1504, 0, 0, 0, 0, 0,
	0, 1476, 0, 0, 0, 0, 1522, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 1514, 0, 0, 0, 0,
	1495, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 0, 0,
	3288, 0, 0, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 1513,
	0, 0, 1523, 3241, 0, 0, 1503, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 1520, 0,
	0, 0, 0, 0, 0, 1490, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 1473, 1474, 0, 1506, 1507, 1508,
	1516, 1517, 1518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1521, 1509, 1504, 0, 0, 0, 0, 0,
	0, 1476, 0, 0, 0, 0, 1522, 0, 0, 1510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 0, 1523, 0, 0, 0, 1503, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 1520, 0,
	0, 0, 0, 0, 0, 1490, 1491, 0, 0, 0,
	0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493,
	1489, 1511, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 1496, 0, 0, 0, 3240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1521, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 1474, 0, 1506,
	1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 1509, 1504, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 1522, 0,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 1514, 1509, 1504,
	0, 0, 1495, 0, 0, 0, 1476, 0, 0, 1492,
	0, 1522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 1499, 1500,
	1501, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493,
	1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 1513, 0, 0, 1523, 3239, 0, 0, 1503, 1505,
	1498, 1499, 1500, 1501, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	1520, 0, 0, 0, 0, 0, 0, 1490, 1491, 0,
	0, 0, 0, 0, 1513, 0, 0, 1523, 0, 0,
	0, 1503, 1505, 1511, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 1520, 0, 0, 0, 0, 0, 0,
	1490, 1491, 0, 0, 1521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 0, 0,
	0, 1510, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 1514,
	1509, 1504, 0, 0, 0, 0, 0, 0, 1476, 0,
	0, 0, 0, 1522, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 0, 1514, 0, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 1487, 1488, 1494,
	1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479,
	1480, 1482, 1483, 0, 0, 0, 0, 2997, 0, 0,
	0, 0, 1498, 1499, 1500, 1501, 0, 0, 0, 0,
	0, 0, 1481, 0, 0, 0, 0, 1512, 0, 0,
	1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 1513, 0, 0, 1523,
	2634, 0, 0, 1503, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 1520, 0, 0, 0, 0,
	0, 0, 1490, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1511, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	1509, 1504, 0, 0, 0, 0, 0, 0, 1476, 0,
	0, 0, 0, 1522, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 0, 0, 0, 0, 0,
	0, 0, 1498, 1499, 1500, 1501, 0, 0, 0, 0,
	0, 0, 1481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1513, 0, 0, 1523,
	0, 0, 0, 1503, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 1520, 0, 0, 0, 0,
	0, 0, 1490, 1491, 0, 0, 0, 0, 0, 1512,
	0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 1511, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 1496, 0,
	0, 0, 2633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 1474, 0, 1506, 1507, 1508, 1516,
	1517, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	1502, 0, 1509, 1504, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 1522, 0, 0, 1497, 0,
	0, 0, 0, 0, 0, 0, 1473, 1474, 0, 1506,
	1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0, 0,
	1475, 0, 0, 0, 1514, 1509, 1504, 0, 0, 1495,
	0, 0, 0, 1476, 0, 0, 1492, 0, 1522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 1512,
	0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 1513, 0,
	0, 1523, 2632, 0, 0, 1503, 1505, 1498, 1499, 1500,
	1501, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 1519, 0, 1520, 0, 0,
	0, 0, 0, 0, 1490, 1491, 0, 0, 0, 0,
	0, 1513, 0, 0, 1523, 0, 0, 0, 1503, 1505,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	1520, 0, 0, 0, 0, 0, 0, 1490, 1491, 0,
	0, 1521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1511, 0, 0, 0, 0, 1510, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 0, 0, 0, 1473, 1474,
	0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 1514, 1509, 1504, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 0, 0,
	1522, 0, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 1514,
	0, 0, 0, 0, 1495, 0, 0, 0, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	0, 0, 0, 0, 2631, 0, 0, 0, 0, 1498,
	1499, 1500, 1501, 0, 0, 0, 0, 0, 0, 1481,
	3695, 0, 0, 0, 1512, 0, 0, 1487, 1488, 1494,
	1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479,
	1480, 1482, 1483, 1513, 0, 2589, 1523, 0, 0, 0,
	1503, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 1520, 0, 0, 0, 0, 0, 0, 1490,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3694, 0, 0, 0, 0,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 1502, 0, 1509,
	1504, 0, 0, 0, 0, 2560, 0, 1476, 0, 0,
	0, 0, 1522, 0, 0, 1497, 0, 0, 0, 0,
	0, 0, 0, 1473, 1474, 0, 1506, 1507, 1508, 1516,
	1517, 1518, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 1514, 1509, 1504, 0, 0, 1495, 0, 0, 0,
	1476, 0, 0, 1492, 0, 1522, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1475, 0, 2561, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1498, 1499, 1500, 1501, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 1512, 0, 0, 1487,
	1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 1483, 1513, 0, 0, 1523, 0,
	0, 0, 1503, 1505, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1481, 0, 2681, 0, 0, 2680,
	0, 0, 1519, 0, 1520, 0, 0, 0, 0, 0,
	0, 1490, 1491, 0, 0, 0, 0, 0, 1513, 0,
	0, 1523, 0, 0, 0, 1503, 1505, 1511, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 1519, 0, 1520, 0, 0,
	0, 0, 0, 0, 1490, 1491, 0, 0, 1521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 0, 1510, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 2227, 0,
	0, 0, 0, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 1502, 1514, 1509, 1504, 0, 0, 0, 2226,
	0, 0, 1476, 0, 0, 0, 0, 1522, 0, 0,
	1497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 1514, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	1513, 0, 0, 1523, 0, 0, 0, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 1509, 1504, 0, 0, 0, 0,
	0, 0, 1476, 0, 0, 0, 0, 1522, 0, 0,
	1510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 1511, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 1496, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 1509, 1504, 0, 0, 0, 0,
	0, 0, 1476, 0, 0, 0, 0, 1522, 0, 0,
	1510, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 1511, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 1496, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 1509, 1504, 0, 0, 0, 0,
	0, 0, 1476, 0, 0, 0, 0, 1522, 0, 0,
	1510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 2687, 0, 0, 0, 0, 0, 0, 0, 2976,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 1511, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 1496, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 1509, 1504, 0, 0, 0, 2682,
	0, 0, 1476, 0, 0, 0, 0, 1522, 0, 0,
	1510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 1511, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 1496, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 1509, 1504, 0, 0, 0, 0,
	0, 0, 1476, 0, 0, 0, 0, 1522, 0, 0,
	1510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 1511, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 1496, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 1509, 1504, 0, 0, 0, 2635,
	0, 0, 1476, 0, 0, 0, 0, 1522, 0, 0,
	1510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2649, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 1511, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 1496, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 1509, 1504, 0, 0, 0, 0,
	0, 0, 1476, 0, 0, 0, 0, 1522, 0, 0,
	1510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 1511, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 1496, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 0, 1504, 0, 0, 0, 0,
	0, 0, 1476, 0, 0, 0, 0, 1522, 0, 0,
	1510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 1473,
	1474, 1495, 1506, 1507, 1508, 1516, 1517, 1518, 1492, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	0, 1522, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 1514, 0,
	0, 0, 0, 0, 0, 1495, 1498, 1499, 1500, 1501,
	0, 0, 1492, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 0, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	1498, 1499, 1500, 1501, 0, 0, 1490, 1491, 0, 0,
	1481, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 1511, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 1496, 0, 1513, 0, 0, 1523, 0, 0,
	0, 1503, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1490, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 744, 0, 780, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 751, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 763, 749, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 750, 0, 0,
	0, 0, 753, 0, 0, 0, 786, 0, 1502, 0,
	0, 0, 0, 760, 761, 0, 0, 0, 0, 773,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 781, 755, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 779, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 0, 756, 0, 0, 0, 0, 0, 0,
	0, 748, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 757, 758, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 765, 764,
	1487, 1488, 1494, 1515, 1493, 1489, 759, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 0, 0,
	0, 0, 785, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 782,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 754, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 752, 0, 0, 0, 777,
	778, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 775, 0, 0, 0, 0, 0,
	0, 771, 0, 0, 768, 0, 0, 0, 0, 0,
	769, 0, 0, 0, 0, 0, 0, 746, 0, 783,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 770, 0, 0, 0, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 784, 0,
	0, 0, 0, 0, 0, 0, 772, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 774, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 776,
}
var sqlPact = [...]int{

	4452, -1000, -1000, -1000, -1000, -1000, -1000, 320, 318, 316,
	313, 296, 285, 284, 281, -1000, -1000, -1000, 279, -1000,
	-1000, 272, -1000, 271, 260, 252, 250, -1000, 248, 247,
	243, -1000, -1000, -1000, -1000, 238, 236, 235, 59369, 1840,
	71982, 62398, 1585, 53712, 71545, 53275, 71108, 70671, 232, -1000,
	70234, 230, 229, 228, -1000, -1000, 219, 2640, 44507, 215,
	207, 206, 2295, 203, -1000, 200, -1000, 8544, 1368, -1000,
	192, -1000, 6518, 7133, 61530, 2381, 190, 189, 44069, 2352,
	2300, -1000, -1000, 1700, -1000, -1000, 179, 177, 168, 164,
	163, 161, 155, 152, 151, -1000, 148, 144, 143, 141,
	139, 138, 137, -1000, 135, 130, 126, 124, 123, 111,
	107, 106, 105, 104, 103, 102, -1000, 84551, 1592, 1521,
	1509, 1500, 1489, 1477, 969, 101, 100, 99, 97, 95,
	94, 93, -1000, 92, 89, 86, 85, 79, -1000, 76,
	73, 196, 72, 71, 70, 64, 60, 1829, -1000, 1378,
	669, 20950, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 76292, 72413, 58, -115, 57,
	-1000, 2659, 965, 36628, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 521, -1000, -1000, -1000, 365, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1663, 751, -1000, -1000, -1000, 69797, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1839, -13, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 750, -1000, 1837, 178, 1746, -1000,
	-1000, -1000, -1000, -1000, 72413, -1000, -1000, 2944, 2942, 1673,
	748, 69366, -1000, 1293, -1000, 907, 23722, -1000, 1114, -1000,
	23722, 364, -1000, -1000, -1000, -1000, -1000, 52838, 15374, 52401,
	51964, 68929, 14927, 58938, 48051, -1000, -1000, -1000, 39268, 1163,
	-1000, -1000, -1000, -1000, -1000, 29, 48927, 72413, -1000, 363,
	-1000, -1000, -1000, -1000, -1000, -1000, 30294, 621, 29822, 523,
	29350, 506, -1000, -1000, -1000, 2940, 2939, 1056, 2938, 2584,
	75861, 1571, 2937, 1440, 1143, 989, 2936, 2935, 2933, 2932,
	2931, 2928, 1221, 68492, 2353, 68055, 1471, 47604, 59369, 59369,
	2102, 67618, 1190, 1185, -1000, -1000, -1000, -1000, 2464, 2294,
	2293, 41457, -1000, 2926, 2922, 2914, 2911, 2906, 75430, 1530,
	2902, 2023, 2896, 2895, 2894, 2892, 2890, 2888, 2886, 2885,
	2882, -1000, 58501, 58064, 57627, 57190, 67181, 47157, -1000, -1000,
	-1000, 38372, 7267, 5576, 4565, 66744, 39713, 59369, 59369, -1000,
	-1000, 30754, 69, -1000, -1000, -1000, 39268, 2311, -1000, 30754,
	69, -1000, 72413, -1000, 2351, 1627, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2188, 1435, 2776, 46710,
	1757, 1270, 2623, 2454, 2448, 1374, 2073, 2440, 2438, 2419,
	2405, 2401, 1403, 2067, 240, 20478, 1346, 1379, 2400, 2377,
	2800, 1622, 1790, 51527, 2881, 2880, 2602, 2364, 2359, 2306,
	-1000, -1000, -1000, -1000, 1332, -1000, -1000, 54574, -1000, -1000,
	1124, -1000, -1000, 1124, -1000, -1000, -1000, -1000, -1000, 1159,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1378, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2120, -1000, 1656,
	-1000, -1000, 2045, 2624, 2624, 2624, 2648, 499, 494, -1000,
	196, -1000, -1000, 84014, -1000, -1000, 30754, 30754, 30754, 30754,
	30754, 1591, -1000, 742, -1000, -1000, 791, -1000, 728, 618,
	-1000, -1000, -1000, -1000, -1000, -1000, 727, 2809, -1000, -1000,
	-1000, -1000, -1000, 2752, -1000, 17658, -1000, -1000, -1000, 493,
	726, 30754, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 550, -1000, 354, 932,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 656, 1541, 654, 654, 654, -1000,
	-1000, 984, -1000, -1000, -1000, 360, 653, 357, 652, -1000,
	-1000, -1000, -1000, 2342, 725, 724, -1000, 722, 719, 716,
	714, 713, -1000, -1000, -1000, 712, 711, 710, 709, 707,
	706, 705, 704, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 982, -1000, 702, 697, 696, 695, 694, 691, 688,
	686, 676, -1000, -1000, 27, 72413, -1000, 521, 27, -1000,
	-1000, 671, -1000, 24182, 24182, 24182, -1000, -1000, 1836, 30754,
	-1000, 1980, -1000, 41, 41, 883, 37498, -1000, 35754, 883,
	273, 801, 41020, -1000, 2292, -1000, -1000, 668, 353, -1000,
	-1000, 2290, 72413, 15819, 72413, 59369, 59369, 59369, 2539, 30754,
	-1000, -1000, 46263, 72413, 59800, 2693, 8790, 46263, 72413, 2338,
	-1000, -1000, -1000, 72413, -1000, 30754, -1000, 2692, 1286, 49362,
	2667, -35, -1000, -1000, -1000, -1000, -1000, -1000, 2001, 2010,
	1075, 1875, 1220, -1000, 23722, 2576, -1000, -1000, -1000, 347,
	15819, -1000, 1862, 2509, 1302, -1000, 1861, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1457, 2508, -1000, 1329, 2507,
	1455, -1000, -1000, 1763, -1000, -1000, 2596, -1000, -1000, 1850,
	2505, 42, -1000, -1000, 945, 2504, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 880, -1000, 48496, 39268, 48927,
	24, -1000, -1000, -52, -1000, 14480, 84014, -1000, -1000, -1000,
	84014, 847, -1000, -1000, 2503, -1000, 84014, 845, -1000, -1000,
	2500, -1000, -1000, -1000, 2878, -1000, 2877, 1954, 2876, 2875,
	2874, -1000, 1424, 1535, 2873, -1000, 2871, -1000, -1000, -1000,
	-1000, -1000, -1000, 56753, 1832, -1000, -1000, 55879, -1000, 1953,
	-1000, -1000, 56316, 988, -1000, 945, 1950, -1000, 890, -1000,
	2867, 66307, 2137, 945, 1947, -1000, -1000, -1000, -1000, -1000,
	42327, -1000, 42327, -1000, 42327, -1000, 1278, -1000, 74999, 41,
	41, 2752, -1000, -1000, -1000, -1000, -1000, 2499, 2863, 2862,
	2858, -1000, 72413, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 183, 2488, -1000, -1000, 183, 2486, -1000, 183,
	2476, -1000, 182, 2472, -1000, -1000, 1778, 2471, -1000, -73,
	2453, -1000, -1000, 23, -1000, -1000, -1000, 965, -1000, 37935,
	-1000, 37935, -1000, 65870, 48496, 935, 764, 43632, 84014, -1000,
	-103, -1000, 39268, 84014, -1000, 48496, 55879, -1000, 65433, 55448,
	-1000, -1000, 1213, 2052, -1000, -1000, -1000, 935, 48496, 48496,
	48496, -1000, 64996, -1000, -1000, 1654, 1394, 2599, 1634, 59369,
	-1000, 1606, -1000, -1000, -1000, 2614, 2337, -1000, 45828, 61093,
	-1000, 60662, -1000, 60231, -1000, 59369, -1000, 59369, -1000, 2857,
	2855, 2854, -1000, 2853, 2608, 84014, 2603, -1000, 2469, 1520,
	1486, 72413, -1000, -1000, 72413, -1000, 72413, -1000, -1000, -1000,
	-1000, -1000, 1998, -1000, -1000, -1000, -1000, 59369, -1000, -1000,
	-1000, -1000, -1000, -1000, 2335, -1000, 1430, -1000, 1560, -1000,
	1211, -1000, -1000, 185, -1000, -1000, -35, -1000, 74568, -1000,
	2045, -1000, 72413, -1000, 1974, 2323, 2334, 1306, 1847, 2077,
	-1000, 28878, 2064, 33054, 1858, 196, -1000, -1000, 196, 196,
	23262, -1000, -1000, 8790, 8790, 15819, 1172, 30754, 30754, 30754,
	30754, 30754, 30754, 30754, 30754, 30754, 30754, 30754, 30754, 30754,
	30754, 30754, 30754, 30754, 30754, 30754, 30754, 30754, 30754, 30754,
	30754, 30754, 30754, 30754, 30754, 30754, 30754, 30754, 30754, 30754,
	30754, 30754, 1930, 30754, 1154, 30754, 30754, 30754, 30754, 2042,
	-1000, -1000, 1586, 547, 1671, -1000, 2775, 2775, 2775, 84244,
	84244, 634, 2852, 791, -1000, 30754, -1000, 69, 30754, 16266,
	-1000, -1000, -1000, 494, 9054, 1901, -1000, 489, 16738, -1000,
	-1000, -1000, 17658, 618, 28406, 30754, 972, 84014, 1197, 2767,
	14035, 2362, 2184, -1000, 2790, -1000, -1000, 2767, -1000, -1000,
	-1000, -1000, 2767, 1170, 1168, 2767, -1000, 2767, 2767, 666,
	819, 815, 20006, 19534, 19062, 18590, 560, 30754, 30754, 30754,
	30754, 30754, 30754, 30754, 30754, -1000, 27946, 27474, 27002, 33514,
	26530, 30754, 18118, 26058, 25586, 72413, 27, 2691, 30754, 127,
	-1000, 82404, -1000, 127, 127, 664, 21, 84014, 2048, 2048,
	37063, 1903, 1681, 1681, 1681, -1000, 883, 10449, 883, 64130,
	1702, 883, 883, 339, 358, 487, 35319, 1980, 64130, 762,
	663, 55, 52, 50, -1000, -1000, 46, 44, -1000, -1000,
	59369, 662, 16266, 15819, 1234, 18, 324, 2082, 2078, 2075,
	-1000, 2053, 1311, 10, 1152, -127, -1000, 223, 2, -1000,
	1200, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 976, 661, 659, 431, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 656, 1541, 654, 654, 654, -1000, -1000,
	-1000, 360, 653, 357, 652, -1000, -1000, -1000, -1000, -1000,
	-1000, 2282, -52, 59800, 885, 1, 1059, -35, -1000, -1000,
	-1000, 49362, 1124, -1000, 1510, -1000, -1000, -1000, -1000, -1000,
	-1000, 1222, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 550,
	-1000, -1000, -1000, -1000, -1000, -1000, 2783, 2781, 26, -1000,
	-1000, 15819, -1000, -36, 1474, -1000, 51090, 1784, 2601, 2592,
	1276, -1000, 1251, 2647, 54574, 2674, 2685, 361, -1000, 2280,
	-1000, -1000, 903, 1427, 1149, 54574, 1329, -1000, 8790, -1000,
	2153, 2644, 1292, 1290, 1292, 1292, 1254, -1000, 54574, 1147,
	-1000, 1146, -1000, -37, 2669, 2683, 174, -1000, 2278, 1145,
	-1000, -1000, 59369, 15819, -1000, 1397, -1000, 48496, 2144, -1000,
	0, 880, 24, 48927, 72413, 323, -1000, 30754, 69, 30754,
	69, -1000, -1000, 2450, -1000, -1000, -1000, 2851, 1506, 2021,
	-1000, -1000, -1000, 651, 1940, 2276, 72413, 2090, 11, 59369,
	-1000, 2437, 1329, 1938, -1000, -1000, 55011, -1000, 2434, 693,
	2850, -1000, 1831, 1937, -1000, -1000, -1000, 74137, 1180, 2429,
	1029, 641, 2690, -1000, 641, 42762, -1000, 72413, -1000, -1000,
	72413, -1000, -1000, -1000, 2849, -1000, 59369, -1000, -1000, 59369,
	-1000, 59369, -1000, 59369, -1000, 59369, 59369, -1000, 72413, 48496,
	48496, 4565, 50228, -6, -14, 486, -1000, 64565, 72413, 1028,
	50659, 72413, 2566, 935, 39268, -103, 935, 935, 880, -1000,
	880, -1000, 59369, 2328, -1000, 935, 935, 935, -1000, -1000,
	-1000, -1000, 2847, 2846, -1000, -1000, -1000, 944, 59369, 72413,
	59369, -1000, -1000, 72413, -1000, 72413, -1000, 944, 72413, 944,
	72413, 944, 72413, -1000, -1000, -1000, -1000, -1000, -1000, 69,
	30754, 1318, -1000, 2326, -1000, 2325, -1000, 81, -1000, -1000,
	-1000, -1000, 1550, 59369, 59369, 59369, 59369, 72413, 59369, -1000,
	54574, -1000, 1974, 2323, -1000, -1000, -1000, -1000, -1000, -1000,
	1291, 1797, -1000, 2051, -1000, 1264, -1000, -1000, -1000, 84014,
	33974, -1000, -1000, 84014, 1377, -1000, 32594, 32134, -1000, -1000,
	1418, 59369, 2109, -1000, 2109, 22, -1000, 82069, 2047, 59369,
	-1000, -1000, -1000, -1000, -1000, 901, 979, 979, 1132, 1132,
	1132, 1132, 2765, 3474, 1008, 1068, 5733, 5733, 301, 301,
	301, 301, 301, 5733, 689, 811, 811, 689, 689, 689,
	689, 689, 811, 811, 811, 5733, 5733, 5733, 84244, 276,
	7945, 30754, 30754, 1140, 1584, 547, 7591, 30754, 8281, 8281,
	8281, 8281, -1000, 1647, -1000, -1000, -1000, -1000, 2274, 650,
	33514, 33514, -1000, -1000, -1000, -1000, 17198, 30754, -1000, -1000,
	-1000, -1000, 25114, -1000, -1000, 81485, -244, 479, -230, -1,
	-1000, 30754, 30754, 30754, 478, -1000, 322, 30754, 72413, -1000,
	78349, 761, -171, -1000, -15, 1289, -1000, 30754, -1000, -1000,
	1139, -1000, 1137, 1126, 1125, -1000, 646, 465, -1000, 302,
	-1000, 1670, 644, 643, 464, -22, 463, 889, 856, 462,
	461, 460, 30754, -1000, -1000, -1000, -1000, -1000, 81442, -1000,
	-1000, 81150, -1000, -1000, 80920, -1000, -1000, 80628, -1000, -1000,
	-1000, 83784, 78082, 77995, 77728, 5613, 77498, 77204, -25, 459,
	-1000, 2272, -230, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 458, -1000, 456, -1000, 83554, -230, 454, 5263, -1000,
	33514, 33514, 33514, -1000, 452, -1000, 82112, -1000, 83324, 24654,
	24654, 24654, 451, 83094, 30754, -230, -34, -1000, -40, -1000,
	-1000, 642, -41, 962, 24182, 36191, 15819, -1000, 962, 962,
	30754, -1000, 30754, 2062, -1000, -1000, -1000, 2060, 1984, 2048,
	37063, -1000, -1000, -1000, -1000, 64130, -1000, 2752, 2203, -1000,
	64130, -1000, -1000, 72413, 521, -1000, 64130, 64130, 15819, 883,
	-1000, 883, 64130, 534, -1000, -1000, -1000, -1000, -1000, 450,
	40148, -1, 274, 935, -1000, 15819, 2151, 2151, 2151, 2151,
	-1000, -1000, 72413, 2714, -1000, 1549, -1000, 8790, -1000, 790,
	1023, 639, -1000, 2767, 2767, -1000, 2767, 72413, 88, 23722,
	-1000, 1124, -1000, -1000, 1392, -1000, 1519, -1000, 1128, -1000,
	-1000, -1000, -1000, 23722, -1000, 1838, 72413, 72413, 59369, -1000,
	-1000, 1931, 73706, 1921, 8790, 72413, -1000, -1000, 636, 632,
	2046, 2038, 72413, 72413, 2036, 73275, 72844, 72413, 1593, 30754,
	1796, 1490, 69, 69, -1000, -1000, 69, 629, 1165, 59369,
	59369, 59369, 1454, -1000, -1000, -1000, -1000, -1000, 54143, -1000,
	-1000, 2788, 2787, -1000, 1292, -1000, -1000, -1000, 1292, 1329,
	1437, 59369, 72413, 1562, 69, 69, -1000, -1000, 69, 627,
	15819, 1552, -1000, 1397, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 45397, 1012, 945, 935, 2258, -1000, 2144, -1000, -1000,
	13590, 84014, -1000, 84014, -1000, 72413, -1000, 987, 72413, 50659,
	923, 2428, 41892, -52, 935, 48496, 59369, 11, 72413, -1000,
	1329, 2426, 521, 1916, -1000, -1000, 48496, 2843, 626, 2842,
	-1000, 59369, 2422, 1830, 1912, 2517, 851, 72413, 962, 37063,
	1498, -1000, 40585, 999, 72413, 1375, 82, -1000, -1000, -1000,
	68, 72413, -1000, 2841, -1000, -1000, 183, 183, 183, -1000,
	182, 1778, -1000, -73, -1000, -1000, 4565, 4565, 935, -27,
	622, -1000, 873, 872, 38823, 48496, -42, -1000, -1000, -1000,
	-1000, -1000, 59369, 72413, 718, 2136, 72413, -47, -1000, 241,
	619, -1000, -1000, 935, 2257, -1000, -1000, 951, -1000, 1191,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 38,
	-52, -52, -1000, 944, -1000, 944, -1000, 944, -1000, 84014,
	-1000, 1308, 1282, 72413, -1000, 15819, 72413, 59369, 15819, 59369,
	2316, 2315, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1038, -1000, 1377, 1792, -1000, 618, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1986, -1000, -28, 23262, 1878,
	-1000, -1000, 59369, 32, 30754, 30754, 6987, 6324, 30754, 33514,
	33514, -1000, 30754, 6312, -1000, -1000, -1000, -1000, -1000, 2242,
	617, 30754, 8790, 4455, 3964, -1000, 439, 77161, 689, -1000,
	30754, -1000, 437, 22802, -1000, 82634, -39, -49, -1000, 10906,
	-230, -50, -1000, -1000, 781, -1000, 2515, -1000, 30754, 82864,
	1968, 1721, 1476, 1355, 2767, 2802, 13145, -1000, 43197, 964,
	1695, -1000, -1000, 2767, 891, -1000, -1000, -1000, 891, -1000,
	80585, -1000, -1000, -1000, -1000, 8790, 8790, 30754, 30754, -1000,
	30754, 30754, 30754, -1000, -1000, 30754, -1000, -1000, 2240, 30754,
	-1000, 8790, 8790, 33514, 33514, 33514, 33514, 33514, 33514, 33514,
	33514, 33514, 33514, 33514, 33514, 33514, 33514, 33514, 33514, 33514,
	33514, 33514, 2015, 33514, 2732, 2732, 2732, -1000, 2231, 2240,
	30754, 30754, 8790, 436, 432, 428, -1000, 30754, -230, -1000,
	-1000, 4565, -1000, 2181, -1000, 30754, -1000, -207, -1000, 1980,
	-1000, -1000, 2181, 2181, -59, 84014, 37063, 37063, -1000, 614,
	30754, 2058, -1000, -1000, 760, -242, -1000, 869, -1000, -1000,
	-1000, -1000, -1000, 521, -1000, -1000, -1000, 197, 64130, 64130,
	757, -1000, -61, -1000, -1000, -64, -1000, 2689, 427, 15819,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -52, 1744,
	2801, -1000, 2772, 780, 756, 2767, 426, 425, 424, -52,
	72413, -1000, -35, -1000, -1000, -1000, 30754, -1000, -1000, 2600,
	1115, 1111, -1000, 2420, -1000, 1910, -1000, 1003, -1000, 1429,
	-1000, 30754, 30754, 613, 611, 1579, 2840, 1027, 2418, 1778,
	2416, 1778, -1000, -1000, 912, -1000, 84014, 607, 606, -1000,
	-36, 1436, 949, -1000, -1000, 30754, 30754, 63699, -1000, 400,
	2596, 31, -1000, 1109, -1000, -1000, -1000, -1000, 1329, 1107,
	-1000, -1000, -1000, 946, -1000, -1000, 30754, -1000, -37, 1106,
	-1000, -1000, -1000, 44952, -1000, -1000, 48496, 935, -1000, 2839,
	2838, 2837, 423, -66, -43, 8790, 2687, 1817, 625, 59369,
	887, -1000, 2752, -1000, -1000, -1000, -1000, 59369, 2682, 2409,
	945, -1000, 2836, -1000, 1020, 15819, 59369, 2406, 2009, 851,
	49797, -1000, 945, 1695, -150, -1000, 1375, 22330, 2594, -67,
	-1000, -1000, -1000, 962, 42762, 37063, 30754, 2833, -72, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 63268, 63268,
	48496, 48496, 48496, 935, 72413, 72413, 50659, 2829, 604, 72413,
	72413, 599, -1000, 72413, 72413, 2822, 48496, -1000, 69, -1000,
	1737, 59369, 12700, -1000, -1000, -1000, -1000, -1000, 944, -1000,
	-1000, 1563, 1855, 1563, 1411, 1395, -1000, 1791, -1000, -1000,
	-1000, -1000, 2087, 2605, 15819, 2681, 8281, 30754, 30754, 4499,
	3695, 453, 8281, 30754, 30754, 8790, 84308, -74, 30754, 30754,
	-1000, 30754, 753, 84014, 2796, 30754, 419, 418, -1000, -1000,
	-1000, 2754, -1000, -1000, -1000, 84014, 30754, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 417, -1000, 128, -1000, -1000, -1000,
	76723, -1000, 30754, 416, 415, -1000, -1000, -1000, 414, 413,
	9868, 5383, 80293, 80063, 79771, 84014, 2231, 84014, -1000, -1000,
	802, 802, 1244, 1244, 1244, 1244, 2732, 381, 516, 848,
	319, 319, 319, 480, 740, 740, 319, 319, 319, 2236,
	2017, 598, 5980, -1000, -1000, 84014, 84014, 412, -1000, -1000,
	-1000, -230, 410, 2175, 2642, 84014, -1000, 37063, 2175, 2175,
	-1000, -1000, 1984, 72413, 84014, 37063, -1000, 2203, -1000, 11361,
	-1000, 15819, -1000, -1000, -1000, -1000, 2752, -1000, 40148, -1000,
	597, -1000, 83, -1000, -1000, 741, 2821, 775, 409, -1000,
	-1000, -1000, -52, 84014, 72413, 72413, 72413, 2404, -1000, 3919,
	-1000, 79728, -81, -1000, 82069, 30754, 72413, -1000, 1573, 2100,
	1049, -1000, 2616, 72413, -1000, 72413, -1000, -1000, 72413, 72413,
	59369, 2386, -82, 84014, -62, -1000, 866, -1000, 1262, -1000,
	12255, 59369, 59369, 2385, -87, 15819, -1000, -1000, -73, -1000,
	-1000, -1000, -1000, 2132, -1000, 61961, 1709, 69, -1000, 62833,
	2820, 588, -1000, 1703, -1000, 535, 1329, 69, 59369, -1000,
	-1000, 587, 72413, 1828, 584, 15819, 2011, 851, 49797, -1000,
	1180, 2077, -1000, -120, -1000, 603, 69, 1695, -1000, -150,
	84014, -1000, 865, -1000, -89, -1000, -1000, 394, -1000, 2565,
	2564, -1000, -1000, 30754, 581, 579, 72413, 2561, -1000, -1000,
	-90, -1000, 1760, -1000, -1000, -1000, -1000, -1000, 15819, 1412,
	-1000, 571, 570, -1000, -1000, -1000, -1000, 2605, 8281, 8281,
	30754, 30754, 30754, 8281, 84308, -92, -1000, 8281, 8281, -230,
	-1000, -1000, 82634, -1000, -1000, -1000, 84014, -1000, 11810, 1587,
	-1000, 79436, -1000, -1000, -1000, -1000, 30754, 30754, -1000, -1000,
	-1000, -1000, -1000, 33514, 2229, 569, 8790, -1000, -1000, 958,
	30754, 30754, 1980, 958, 958, -1000, -97, -1000, -1000, -1000,
	2752, 83, -1000, -1000, 2819, 15819, 773, -1000, 2818, -1000,
	-1000, -1000, -1000, 72413, -1000, 72413, -1000, 15819, 72413, 2250,
	1893, -1000, -1000, 2035, 559, 33514, 59369, 861, 2191, 1547,
	30754, 1878, -100, -102, 1887, -1000, -1000, 1884, 30754, -1000,
	8790, 555, 1778, 1778, -105, -108, -1000, 30754, 1103, 72413,
	21870, -1000, 2817, 2596, -1000, -1000, 30754, 1096, -1000, 1562,
	2156, -1000, -1000, -1000, -1000, 2034, -1000, -1000, 72413, 2031,
	936, -110, -1000, 863, 853, -1000, 50659, 923, 899, -1000,
	-1000, -1000, 521, 30754, -1000, 59369, 30754, 1826, -1000, 851,
	49797, -1000, 2517, 1375, -1000, 2523, 72413, 2590, -1000, 2077,
	547, -1000, 935, 544, 542, -121, 30754, 30754, -126, 541,
	935, -199, -1000, 854, 850, -1000, -1000, 59369, 59369, 30754,
	30754, -1000, 8281, 8281, 8281, -1000, 385, -1000, -1000, 1695,
	2637, -1000, 79206, 78914, 3892, 33514, 8790, -129, -1000, 72413,
	84014, -230, -1000, -1000, -1000, 517, -1000, 2815, -1000, -1000,
	1815, -1000, -1000, -1000, 72413, 1898, -1000, 1025, 30754, 5980,
	540, 30754, -1000, -1000, 2121, 2228, 2132, 539, -1000, -1000,
	-1000, -1000, 1011, 1479, -1000, -1000, 84014, 2620, 30754, -1000,
	-1000, 538, 536, 84014, 533, 843, 2227, -1000, -1000, -1000,
	84014, 528, 923, -1000, 1648, 1709, 527, -1000, -1000, -1000,
	2114, -1000, 62833, 34419, 34419, 384, 2680, 899, -1000, 2742,
	-1000, 2679, -131, 1020, -136, 59369, 49797, -1000, 2009, -1000,
	1199, -138, 72413, 1375, -1000, -1000, 48496, 48496, 1011, -139,
	-147, -1000, 48496, -1000, 1760, -1000, 72413, -1000, 72413, -1000,
	-1000, -148, -149, -1000, 1690, 30754, -1000, -1000, 3892, -154,
	-1000, -208, -1000, 2678, -1000, -1000, -1000, -1000, 2393, 2173,
	78871, 1978, 72413, 78579, 2221, -1000, -1000, 1562, 72413, 2132,
	2172, 59369, 1013, 15819, -155, 1563, 1563, 30754, 21410, 1640,
	30754, -1000, 59369, 72413, -1000, 2559, -1000, -1000, -1000, 2132,
	69, -1000, -1000, 69, 1011, 526, 1547, 524, -1000, 2011,
	1268, -1000, 962, -1000, -1000, -156, -168, 1547, 1011, -1000,
	-174, -1000, -175, -176, -1000, -1000, 383, 31674, 31674, 31674,
	-230, -1000, 72413, 522, 2371, 942, -1000, 1818, 1599, 379,
	1030, -1000, -1000, 2191, -187, -1000, 941, 521, -1000, 30754,
	-1000, 1011, -190, -1000, 998, -193, -1000, 995, -201, -1000,
	2198, -1000, -206, 518, -209, -1000, -1000, -1000, 1562, 936,
	-1000, 1547, 30754, 2132, 30754, -1000, 42762, -1000, 935, 935,
	2132, 1547, 935, -1000, -1000, -1000, 2439, -1000, 34864, 1694,
	1385, 81777, 2439, 2439, -1000, -1000, 72413, 2657, -1000, 1824,
	1820, 1350, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2655, 1978, 84014, 2132, -1000, 1563, 2150, -1000, 1563, 2192,
	-1000, 1581, -1000, 72413, -1000, 72413, 923, -1000, 2132, -211,
	1562, -214, -203, -1000, -1000, 1562, 2132, -1000, -1000, 1481,
	2703, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 840,
	-1000, 2545, -1000, 1037, 1724, 1724, 838, 1818, -1000, -1000,
	515, -1000, 514, -1000, -217, -1000, -1000, 1562, 1011, 961,
	1547, -1000, -1000, 1562, 1370, -1000, -1000, 1692, 31214, 30754,
	-1000, 2719, -1000, -1000, 2039, -1000, 30754, 2191, 30754, 30754,
	1767, 961, 1547, -1000, 2813, 2132, -1000, -1000, -1000, -1000,
	84014, -1000, -1000, -1000, 84014, -1000, -219, -220, -1000, -1000,
	-1000, -1000, 2132, -1000, 1562, 1562, 1094, 1562, 961, -1000,
	504, 961, -1000, 30754, -1000, -225, 1562, -1000,
}
var sqlPgo = [...]int{

	0, 3471, 3470, 3469, 3468, 3467, 3466, 3465, 3464, 3461,
	3460, 3459, 3458, 3456, 3455, 3453, 3452, 3451, 3449, 3441,
	3440, 3439, 3438, 3437, 3436, 3433, 3432, 3430, 3429, 3427,
	3426, 3425, 3424, 3422, 3421, 3419, 3410, 3404, 3403, 3402,
	3399, 3398, 3396, 3395, 3394, 3393, 3392, 32, 3386, 3385,
	3381, 3380, 3373, 3371, 3369, 3368, 3366, 3362, 3361, 3353,
	3345, 3343, 3341, 3339, 3336, 38, 3335, 227, 3334, 3332,
	3331, 3330, 3328, 3327, 3326, 3322, 3321, 226, 3318, 105,
	3315, 3309, 3306, 3305, 3303, 224, 3302, 3301, 3299, 3298,
	3296, 3295, 3294, 3293, 157, 196, 3291, 249, 3290, 3289,
	3288, 3286, 3285, 3283, 3282, 3280, 3277, 3275, 201, 3273,
	219, 3272, 3271, 3270, 3269, 3268, 3267, 3265, 3262, 3261,
	3260, 3259, 3258, 3254, 3253, 3252, 3251, 3250, 3248, 3247,
	3246, 3244, 3242, 3240, 3238, 3237, 3236, 3230, 3228, 229,
	146, 3227, 3225, 218, 212, 3224, 124, 93, 97, 225,
	3221, 112, 40, 3217, 21, 127, 223, 4589, 221, 3211,
	3209, 3208, 191, 156, 3206, 190, 3205, 3202, 3201, 3200,
	76, 63, 143, 144, 139, 126, 80, 3198, 3197, 78,
	55, 30, 29, 3196, 3195, 3194, 1960, 99, 3193, 216,
	192, 128, 3192, 3191, 3190, 1686, 3186, 137, 77, 90,
	10, 92, 3185, 113, 19, 3184, 133, 37, 3183, 122,
	65, 33, 6683, 6743, 3182, 89, 233, 82, 215, 195,
	169, 121, 208, 198, 134, 1679, 3181, 202, 3180, 49,
	161, 3178, 3177, 3176, 64, 159, 71, 3174, 8, 2,
	132, 11, 87, 16, 3172, 12, 3165, 3164, 3163, 3162,
	31, 138, 3161, 110, 58, 3160, 23, 3158, 125, 167,
	3151, 188, 104, 3148, 3147, 206, 163, 155, 3145, 62,
	186, 3142, 3141, 3138, 3135, 3132, 103, 22, 95, 3131,
	3130, 106, 189, 150, 3128, 35, 3127, 145, 73, 102,
	230, 100, 180, 91, 184, 154, 183, 3125, 3124, 3120,
	152, 3118, 3117, 172, 123, 3116, 3115, 232, 34, 54,
	187, 52, 153, 120, 3113, 162, 3112, 3108, 3107, 231,
	142, 173, 15, 6, 68, 94, 28, 7, 185, 117,
	199, 81, 3105, 3670, 381, 1354, 36, 108, 86, 57,
	84, 115, 217, 50, 3103, 3102, 1433, 3101, 3100, 3099,
	3098, 147, 3094, 3092, 3091, 107, 131, 168, 3090, 118,
	69, 13, 119, 200, 220, 88, 175, 181, 203, 3089,
	151, 3088, 67, 114, 3084, 160, 197, 130, 3083, 210,
	129, 3082, 166, 3080, 3079, 3077, 3075, 3074, 3071, 3070,
	116, 3069, 111, 3068, 3067, 211, 149, 3066, 209, 170,
	135, 83, 53, 3064, 66, 552, 3061, 158, 56, 3059,
	354, 72, 0, 6946, 5331, 6431, 3058, 6749, 3057, 171,
	101, 3034, 3032, 3031, 74, 3030, 60, 3028, 3025, 43,
	3023, 17, 5, 9, 18, 14, 1552, 1179, 3019, 3016,
	85, 98, 140, 3015, 222, 182, 3013, 3012, 3011, 70,
	3002, 27, 2999, 25, 2994, 2987, 26, 3, 20, 2986,
	2985, 193, 2984, 194, 2978, 2975, 2710, 96, 2974, 2973,
	205, 109, 2970, 207, 2969, 2691, 136, 165, 2968, 2967,
	2966, 2964, 204, 2963, 2961, 24, 1, 2960, 2959, 164,
	4, 2649, 2958, 2955, 61, 2950, 2949, 148,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 11, 11, 7, 7, 8, 8, 8, 35,
	35, 9, 9, 9, 10, 10, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 14, 14, 25, 25, 15,
	15, 27, 27, 16, 16, 28, 28, 470, 470, 19,
	30, 20, 31, 13, 471, 471, 471, 471, 24, 21,
	32, 22, 22, 22, 22, 22, 150, 150, 150, 150,
	18, 18, 26, 26, 173, 173, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 469, 469,
	175, 175, 174, 169, 169, 472, 472, 176, 176, 176,
	178, 178, 36, 36, 36, 93, 93, 93, 94, 94,
	95, 95, 151, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 81, 81, 410, 410, 411, 411, 146, 146,
	147, 147, 147, 147, 148, 148, 149, 149, 149, 50,
	38, 38, 38, 38, 38, 38, 38, 39, 39, 39,
	39, 40, 40, 40, 40, 40, 40, 41, 41, 41,
	41, 41, 41, 48, 48, 48, 48, 140, 140, 51,
	51, 51, 51, 51, 51, 51, 479, 479, 479, 479,
	479, 479, 479, 479, 479, 479, 479, 479, 479, 479,
	479, 479, 479, 479, 479, 479, 480, 480, 481, 481,
	482, 482, 483, 483, 483, 483, 483, 483, 483, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
	483, 483, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 62,
	62, 252, 252, 228, 228, 63, 63, 63, 64, 64,
	65, 65, 52, 52, 463, 463, 266, 266, 374, 374,
	67, 67, 286, 286, 68, 68, 68, 68, 68, 68,
	69, 69, 69, 69, 69, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 75, 75, 75, 76, 76,
	76, 74, 74, 74, 72, 72, 72, 71, 71, 71,
	73, 73, 73, 267, 267, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 376,
	376, 78, 78, 78, 344, 344, 82, 82, 82, 301,
	301, 83, 83, 83, 83, 83, 84, 84, 84, 84,
	96, 96, 96, 96, 466, 466, 259, 259, 189, 189,
	189, 189, 89, 89, 89, 89, 90, 90, 90, 91,
	91, 145, 145, 102, 102, 102, 102, 102, 101, 101,
	101, 101, 101, 101, 42, 42, 42, 43, 43, 44,
	44, 45, 45, 46, 46, 47, 47, 47, 47, 47,
	104, 104, 476, 476, 106, 103, 103, 103, 105, 105,
	105, 105, 107, 108, 108, 108, 108, 108, 108, 108,
	108, 109, 109, 404, 404, 275, 275, 402, 402, 418,
	418, 403, 403, 232, 232, 232, 232, 232, 233, 233,
	233, 409, 409, 409, 409, 409, 409, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 129, 129, 129, 139, 139, 139, 139, 139, 139,
	139, 132, 132, 132, 119, 119, 111, 111, 111, 111,
	111, 115, 115, 115, 115, 115, 115, 115, 115, 112,
	112, 121, 121, 121, 121, 121, 116, 116, 118, 118,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 113,
	113, 113, 113, 123, 123, 123, 123, 307, 307, 307,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	135, 135, 135, 135, 135, 135, 358, 358, 130, 130,
	130, 130, 134, 134, 134, 134, 291, 291, 127, 127,
	127, 128, 128, 128, 133, 133, 131, 131, 136, 136,
	136, 136, 114, 114, 114, 484, 484, 484, 137, 137,
	126, 126, 138, 138, 138, 138, 138, 138, 138, 138,
	125, 125, 125, 124, 124, 124, 124, 117, 464, 464,
	461, 461, 461, 461, 461, 461, 461, 462, 462, 465,
	465, 87, 87, 87, 57, 57, 57, 58, 58, 154,
	154, 154, 154, 152, 152, 153, 153, 59, 59, 485,
	485, 485, 473, 473, 473, 474, 474, 474, 474, 474,
	474, 234, 234, 235, 235, 325, 325, 325, 325, 325,
	238, 238, 177, 177, 177, 241, 242, 242, 239, 239,
	240, 240, 240, 244, 244, 243, 246, 246, 245, 324,
	425, 425, 427, 427, 427, 427, 427, 427, 427, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	423, 423, 423, 424, 419, 419, 420, 420, 420, 420,
	236, 236, 237, 237, 237, 237, 421, 422, 257, 257,
	361, 426, 426, 428, 428, 430, 486, 486, 486, 486,
	486, 486, 487, 487, 323, 323, 322, 322, 250, 250,
	431, 431, 431, 431, 432, 432, 432, 432, 432, 435,
	434, 433, 433, 433, 433, 433, 61, 61, 61, 288,
	288, 287, 287, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 142, 142,
	192, 192, 56, 56, 56, 12, 12, 12, 475, 475,
	475, 60, 60, 60, 60, 191, 191, 191, 191, 191,
	191, 468, 468, 467, 467, 193, 193, 489, 489, 66,
	66, 66, 66, 66, 66, 55, 55, 55, 55, 55,
	490, 490, 308, 308, 306, 306, 256, 256, 360, 196,
	196, 170, 170, 170, 23, 17, 17, 33, 33, 34,
	34, 29, 29, 477, 477, 478, 478, 88, 88, 92,
	92, 92, 100, 100, 141, 141, 141, 141, 141, 141,
	141, 37, 37, 37, 37, 49, 49, 49, 49, 98,
	492, 492, 492, 99, 99, 99, 491, 491, 190, 190,
	319, 319, 320, 320, 493, 493, 321, 321, 321, 321,
	184, 183, 185, 185, 54, 54, 54, 179, 179, 180,
	180, 181, 181, 182, 182, 494, 494, 85, 85, 85,
	144, 144, 227, 227, 227, 315, 315, 315, 251, 251,
	201, 201, 318, 318, 316, 316, 316, 316, 285, 285,
	285, 143, 143, 264, 264, 277, 277, 278, 278, 371,
	371, 279, 97, 97, 157, 157, 155, 155, 155, 155,
	155, 155, 155, 155, 162, 162, 163, 163, 164, 164,
	165, 166, 166, 166, 166, 268, 268, 167, 167, 167,
	156, 156, 156, 158, 158, 158, 158, 158, 158, 158,
	161, 161, 161, 161, 168, 168, 168, 160, 160, 442,
	442, 442, 444, 444, 445, 441, 441, 443, 443, 488,
	488, 290, 290, 290, 248, 249, 247, 247, 254, 254,
	253, 255, 255, 359, 359, 359, 171, 171, 171, 282,
	282, 282, 282, 283, 283, 311, 311, 309, 309, 309,
	309, 310, 310, 312, 312, 312, 313, 313, 314, 314,
	281, 281, 340, 340, 159, 159, 159, 261, 261, 261,
	262, 262, 331, 331, 331, 331, 331, 331, 332, 332,
	330, 330, 330, 330, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 363, 364, 364, 263, 263, 365, 317,
	317, 459, 459, 459, 460, 460, 357, 357, 366, 366,
	366, 366, 366, 366, 355, 355, 356, 356, 372, 373,
	373, 294, 294, 294, 294, 292, 292, 295, 295, 295,
	295, 293, 293, 367, 367, 367, 367, 284, 284, 368,
	368, 368, 368, 369, 326, 327, 327, 377, 377, 377,
	377, 392, 260, 260, 260, 260, 260, 495, 495, 378,
	378, 378, 378, 378, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 382, 382, 382, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 391, 391, 391,
	391, 391, 383, 383, 388, 388, 389, 389, 389, 384,
	385, 390, 390, 390, 390, 496, 496, 394, 394, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 380, 380,
	380, 387, 387, 387, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 302, 302, 304,
	304, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 335, 335, 335, 335,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 436, 436, 436, 436, 436,
	436, 436, 436, 439, 439, 440, 440, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	438, 438, 438, 438, 438, 438, 446, 446, 447, 447,
	449, 449, 450, 450, 451, 452, 452, 452, 453, 454,
	454, 448, 448, 455, 455, 455, 455, 456, 456, 457,
	457, 457, 457, 457, 458, 458, 458, 458, 458, 346,
	346, 347, 347, 353, 353, 353, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 194, 194, 194, 194, 194, 273, 273, 271,
	271, 271, 274, 274, 272, 272, 270, 270, 269, 269,
	343, 343, 341, 341, 345, 345, 296, 296, 393, 393,
	393, 393, 393, 393, 393, 393, 297, 297, 297, 305,
	298, 298, 299, 299, 299, 299, 299, 337, 338, 300,
	300, 300, 339, 339, 348, 352, 352, 351, 350, 350,
	349, 349, 328, 328, 329, 329, 280, 280, 497, 497,
	276, 276, 370, 370, 370, 370, 230, 230, 265, 265,
	229, 229, 222, 222, 223, 223, 223, 223, 258, 258,
	354, 354, 395, 395, 396, 396, 397, 397, 398, 398,
	399, 400, 401, 342, 342, 211, 210, 198, 199, 209,
	208, 207, 197, 200, 204, 205, 206, 202, 203, 217,
	216, 215, 221, 213, 214, 375, 224, 224, 225, 225,
	225, 226, 226, 226, 226, 195, 195, 218, 218, 219,
	220, 220, 212, 212, 212, 186, 186, 186, 187, 187,
	188, 188, 408, 408, 406, 406, 406, 407, 407, 407,
	407, 405, 405, 405, 405, 405, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 413,
	413, 413, 413, 413, 413, 413, 413, 413, 413, 413,
	413, 413, 413, 413, 413, 413, 413, 414, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 417, 417,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 6, 4, 6, 6,
	9, 6, 9, 6, 5, 6, 5, 1, 1, 5,
	5, 6, 6, 4, 4, 4, 4, 3, 4, 4,
	4, 7, 7, 9, 8, 9, 5, 3, 5, 7,
	4, 12, 4, 12, 1, 3, 5, 5, 2, 5,
	3, 6, 4, 6, 5, 6, 6, 4, 8, 3,
	4, 10, 3, 6, 4, 3, 1, 3, 2, 1,
	1, 3, 1, 3, 2, 2, 0, 1, 1, 0,
	2, 0, 6, 7, 2, 5, 6, 2, 1, 3,
	1, 3, 1, 6, 4, 9, 7, 12, 12, 12,
	9, 2, 7, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 6,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 6, 6, 6, 6, 1, 1, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 2, 0, 1, 0,
	1, 0, 3, 3, 3, 3, 3, 6, 4, 4,
	4, 3, 5, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 1, 1, 2, 1, 2, 7,
	3, 2, 0, 1, 3, 3, 1, 0, 1, 2,
	2, 1, 6, 5, 1, 2, 1, 3, 2, 0,
	9, 3, 2, 0, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 3,
	6, 6, 3, 3, 1, 1, 2, 1, 1, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	3, 5, 7, 2, 3, 0, 3, 5, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 5, 4, 6,
	4, 3, 0, 1, 3, 2, 4, 2, 4, 1,
	6, 3, 1, 1, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 1, 3, 2, 3, 3, 1, 3,
	1, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 5, 7, 3, 3, 3, 4, 5, 5, 5,
	3, 4, 4, 3, 4, 4, 3, 4, 4, 5,
	3, 5, 5, 5, 7, 3, 3, 3, 4, 3,
	5, 3, 6, 5, 6, 3, 5, 6, 3, 4,
	3, 4, 3, 3, 4, 4, 5, 0, 1, 1,
	3, 2, 4, 3, 3, 5, 4, 3, 5, 3,
	5, 4, 6, 4, 6, 4, 1, 0, 3, 4,
	4, 5, 7, 5, 3, 3, 2, 0, 4, 2,
	3, 4, 2, 3, 3, 3, 3, 3, 4, 3,
	3, 3, 3, 4, 3, 1, 1, 1, 2, 3,
	2, 3, 6, 6, 7, 9, 7, 9, 3, 4,
	10, 10, 3, 5, 5, 5, 3, 5, 2, 0,
	1, 1, 1, 1, 3, 2, 2, 2, 1, 2,
	0, 3, 3, 2, 3, 6, 3, 10, 13, 0,
	2, 4, 3, 3, 3, 1, 3, 9, 12, 0,
	2, 3, 1, 1, 0, 1, 2, 2, 2, 2,
	1, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 8, 4, 2, 5, 5, 5, 2,
	9, 10, 6, 5, 3, 1, 5, 8, 7, 11,
	3, 0, 2, 4, 3, 3, 1, 5, 1, 3,
	1, 2, 0, 1, 2, 2, 0, 1, 3, 3,
	2, 2, 1, 1, 4, 0, 6, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 5, 8, 4, 1,
	0, 1, 2, 2, 1, 2, 3, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 1, 4, 2,
	2, 2, 4, 7, 3, 4, 6, 3, 1, 1,
	1, 8, 11, 7, 5, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 3, 0, 1, 6,
	7, 6, 5, 3, 4, 15, 18, 14, 17, 4,
	0, 2, 2, 0, 1, 0, 1, 3, 3, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 0, 2, 4, 2, 1, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 3, 4, 3, 0, 2, 2,
	0, 10, 3, 2, 0, 1, 3, 1, 1, 3,
	3, 5, 1, 1, 3, 3, 1, 2, 4, 4,
	2, 3, 5, 5, 1, 3, 1, 0, 1, 2,
	3, 2, 4, 2, 3, 0, 2, 0, 2, 1,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	3, 1, 3, 3, 4, 5, 2, 2, 0, 2,
	2, 1, 1, 1, 0, 1, 0, 2, 2, 5,
	4, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 1, 1, 1, 3,
	2, 4, 4, 0, 4, 4, 3, 4, 1, 5,
	3, 4, 5, 5, 1, 5, 1, 3, 2, 0,
	3, 0, 2, 3, 1, 3, 2, 0, 3, 5,
	6, 4, 6, 4, 3, 2, 1, 0, 5, 1,
	0, 2, 2, 2, 1, 1, 0, 1, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 2, 2, 1, 0, 2, 5, 7,
	2, 1, 2, 4, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 4, 1, 2, 1, 4,
	1, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	2, 5, 1, 4, 2, 5, 1, 4, 3, 3,
	0, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 1, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 5, 4, 6, 3,
	5, 4, 6, 4, 6, 5, 7, 3, 3, 3,
	3, 3, 4, 3, 2, 4, 2, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 6, 2, 1, 1, 1,
	1, 1, 2, 1, 5, 5, 6, 3, 1, 1,
	1, 2, 2, 2, 4, 3, 5, 6, 8, 6,
	5, 4, 3, 4, 1, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 8, 8, 6, 4, 6, 6, 6, 4, 1,
	3, 3, 3, 3, 3, 4, 3, 3, 4, 3,
	3, 4, 3, 3, 4, 3, 3, 3, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 3, 3, 3, 0, 1, 4, 2,
	2, 2, 2, 2, 3, 2, 2, 3, 0, 4,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 1,
	2, 3, 2, 3, 2, 3, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 1, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 1, 2, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	3, 1, 1, 1, 1, 5, 3, 1, 1, 3,
	1, 1, 1, 1, 2, 2, 1, 1, 2, 2,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 474, -79, -50, -48, -82, -83, -68,
	-84, -78, -96, -100, -88, -102, -141, -3, -36, -38,
	-51, -67, -69, -77, -86, -85, -87, -89, -93, -92,
	-81, -42, -97, -101, -110, -142, -143, -144, 86, 72,
	128, 109, 114, 161, 300, 330, 340, 324, -105, -106,
	359, -37, -49, -99, -98, -4, -12, 27, 41, -39,
	-40, -41, 57, -56, -53, -62, -479, 88, -443, -70,
	-73, -483, 119, 134, 178, 292, -90, -91, 326, 328,
	135, -44, -43, 129, -155, -157, -103, -104, -145, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -131, -127, -128, -129, -130,
	-132, -133, -134, -135, -136, -137, -138, 363, 410, 42,
	373, 73, 122, 334, 21, -5, -6, -7, -8, -9,
	-10, -11, -52, -54, -55, -57, -58, -59, -66, -60,
	-61, -442, -71, -72, -74, -75, -76, 325, -158, -156,
	471, 424, -14, -19, -20, -15, -16, -18, -21, -17,
	-25, -30, -31, -27, -28, -26, -29, -32, -33, -34,
	-35, -23, -24, -13, -22, 442, 450, -161, -159, -160,
	-168, 347, 432, 387, 474, 474, 474, 474, 474, 474,
	474, 474, 474, 474, 474, 474, 474, 474, 474, 474,
	474, 474, 474, 474, -213, -218, -219, -220, -212, -186,
	-414, -417, 4, -412, -415, 140, 185, 258, 21, 22,
	23, 24, 25, 27, 38, 40, 39, 41, 42, 45,
	48, 49, 47, 52, 53, 54, 55, 56, 57, 58,
	61, 66, 71, 72, 73, 74, 75, 76, 81, 78,
	79, 80, 83, 85, 86, 87, 89, 91, 92, 100,
	101, 102, 103, 104, 105, 109, 112, 111, 114, 117,
	118, 119, 121, 123, 124, 126, 128, 129, 132, 130,
	393, 131, 133, 134, 135, 136, 146, 147, 148, 150,
	151, 153, 155, 159, 160, 162, 166, 168, 169, 170,
	171, 177, 178, 180, 181, 186, 182, 187, 191, 194,
	193, 195, 196, 197, 188, 202, 206, 207, 208, 210,
	211, 214, 215, 216, 217, 218, 221, 220, 223, 226,
	227, 230, 231, 234, 235, 236, 237, 239, 240, 243,
	241, 244, 242, 245, 248, 246, 247, 250, 251, 256,
	254, 252, 253, 260, 263, 175, 265, 266, 268, 269,
	270, 286, 273, 274, 275, 278, 279, 282, 285, 287,
	288, 289, 290, 291, 292, 293, 295, 296, 298, 300,
	302, 304, 305, 306, 307, 308, 309, 310, 312, 313,
	315, 316, 317, 318, 319, 324, 321, 322, 323, 325,
	326, 327, 328, 330, 332, 333, 334, 335, 337, 339,
	360, 361, 375, 340, 341, 342, 343, 344, 345, 346,
	350, 354, 351, 352, 353, 348, 349, 355, 356, 357,
	359, 362, 363, 365, 366, 368, 369, 371, 372, 373,
	374, 376, 379, 380, 381, 377, 378, 386, 384, 385,
	388, 389, 390, 391, 392, 394, 396, 404, 405, 407,
	410, 411, 412, 402, 414, 415, 418, 419, 420, 423,
	421, 422, 428, 424, 426, 429, 430, 431, 437, 436,
	443, 444, 446, 447, 448, 33, 43, 44, 46, 50,
	62, 63, 64, 67, 106, 107, 127, 137, 138, 149,
	163, 165, 172, 173, 174, 192, 198, 200, 204, 224,
	262, 264, 280, 284, 297, 299, 311, 336, 367, 382,
	397, 398, 399, 400, 406, 408, 432, 433, 434, 438,
	445, 271, -206, 2, -186, -186, 300, 26, 2, 26,
	296, 349, 389, 391, 2, -466, -259, 2, 26, -189,
	-186, 88, 161, 347, -206, 2, -466, -259, 24, 2,
	-186, 2, -190, 2, 340, -186, 474, 83, 231, 66,
	336, 356, -108, 405, -107, 397, 342, -109, -404, 2,
	248, -186, 474, 474, 474, 474, 2, 387, 289, 436,
	348, 102, 308, 185, -475, 332, 164, 425, 401, -461,
	2, 4, -415, -412, -223, -222, 387, 102, -220, -212,
	464, -219, 474, 474, 474, 2, 207, 208, 307, 306,
	356, 357, 474, 474, 2, 25, 60, 82, 85, 108,
	136, 156, 159, 276, -480, 240, 286, 305, 355, 386,
	394, 407, -474, 374, 61, 342, -473, -475, 412, 117,
	-306, 102, 231, 160, 419, 391, 389, 417, 112, 191,
	422, 421, 474, 25, 60, 69, 85, 117, 136, 156,
	159, -482, 286, 305, 339, 342, 355, 386, 394, 412,
	407, 2, 436, 348, 387, 185, 102, -475, 303, -79,
	2, 471, 29, 28, 52, 359, -151, 387, 201, 2,
	-186, 207, 208, 2, 474, 474, 157, -461, 2, 207,
	208, 2, 201, 2, 61, 344, 474, 474, 474, 474,
	474, 474, 474, 474, 474, 474, 474, 474, 474, 474,
	474, 474, 474, 474, 474, 474, 474, 474, 474, 474,
	474, 474, 474, 474, 2, -139, 356, 374, 170, 41,
	66, 26, 304, 71, 290, 103, 162, 185, 186, 215,
	82, 83, -307, 40, 208, 207, -358, 388, 343, 349,
	384, 340, 405, 88, 426, 333, 448, 308, 309, 130,
	4, 102, 248, 358, 397, 231, 75, -488, 2, 387,
	-491, 2, 405, 405, 2, -491, 2, -491, 2, -491,
	2, -492, 405, 445, 474, 474, 474, 474, 474, 474,
	474, 474, 474, 474, 474, 474, 474, 474, -156, -158,
	-157, 474, 474, 474, 474, 474, -139, 356, 2, 66,
	26, -253, -254, 416, 199, 125, 277, -155, -157, 2,
	-442, -402, 2, -333, -418, -335, 462, 463, 455, 257,
	449, -346, 108, 417, 271, -417, -336, -348, 127, 336,
	-274, 8, 9, 5, 6, 7, -195, -379, -342, 409,
	139, 261, -226, 475, 10, 471, -439, -157, -347, 34,
	165, 59, -406, -225, -381, -389, -385, -386, -495, 48,
	55, 54, 394, 247, 350, 351, 368, 352, 353, 45,
	428, 182, 268, 270, 193, 4, 200, -224, -212, -436,
	-437, -412, -413, 192, 198, 194, 367, 195, 196, 197,
	44, 311, 150, 151, 149, 118, 107, 106, 264, 50,
	49, 46, 433, -390, 104, 397, 398, 399, 400, 210,
	211, -186, -414, 69, 94, 95, 93, 98, 97, 233,
	232, 99, 96, 358, 425, 60, 33, 172, 173, 204,
	262, 174, 67, -438, 378, 90, 158, 190, 176, 203,
	205, 209, 225, 228, 249, 255, 259, 281, 283, 331,
	364, -496, 434, 137, 138, 284, 297, 382, 406, 408,
	163, 224, 62, 63, -444, 312, -445, -206, -444, 474,
	474, 476, 474, -247, -248, -249, 2, 26, 115, 471,
	2, -362, 2, -363, -367, -157, 219, -366, 471, -364,
	469, -213, 272, -440, 337, -436, -437, -195, -212, -225,
	4, -250, 471, 473, 102, 387, 70, 185, -301, 471,
	-186, 26, 271, 401, 476, -344, 471, 271, 157, 274,
	-186, 2, 2, 360, 2, 471, -108, 64, 405, 39,
	356, -320, 2, -321, -183, -184, -185, -372, 206, 302,
	310, 451, 448, -402, -476, 157, 454, 401, -402, -275,
	473, 2, -367, 172, -213, 2, -210, -405, 4, -412,
	-415, -413, -416, 69, -414, 26, 28, 29, 30, 32,
	34, 35, 36, 37, 51, 59, 60, 65, 68, 70,
	82, 88, 93, 94, 96, 95, 97, 98, 99, 108,
	110, 113, 115, 116, 120, 122, 125, 139, 141, 154,
	156, 157, 161, 164, 167, 179, 189, 199, 201, 219,
	222, 229, 232, 233, 257, 261, 267, 271, 272, 276,
	277, 294, 301, 314, 329, 347, 358, 370, 383, 387,
	395, 401, 403, 409, 416, 417, 425, 427, 435, 439,
	440, 441, 442, -417, 2, -367, 172, 2, -215, 172,
	-367, -218, 2, -197, -186, 2, -209, -405, 2, -229,
	172, -213, -214, -218, -410, 172, 2, -408, 10, -407,
	5, 4, -412, -415, -413, -94, -410, 471, 401, 476,
	-265, -222, -223, -258, -186, 473, -333, 2, -97, 2,
	-333, 172, 2, -97, 172, 2, -333, 172, 2, -97,
	172, 2, 2, 2, 407, 2, 85, 172, -186, 387,
	101, 2, 323, -481, 339, 411, 436, 2, 2, 2,
	2, 2, 2, 387, -202, 2, -186, 154, -221, 172,
	2, -186, 348, -489, 312, -410, 172, 2, -216, -218,
	-216, 185, 202, -197, 172, 2, 391, 389, 391, 389,
	157, 2, 201, 2, 201, 2, -368, 2, -369, -363,
	-213, 469, 2, 2, 2, 2, 2, 172, -186, 387,
	101, 2, 217, 2, 2, 2, 2, 2, 2, 2,
	2, 2, -267, 172, 2, -213, -267, 172, 2, -267,
	172, 2, -230, 172, 2, -229, -197, 172, 2, -411,
	172, 2, -410, -376, 2, -375, -407, 432, -79, 471,
	-79, 471, -79, 356, 471, -410, -213, -213, -333, -97,
	-95, -94, 157, -333, -97, -151, 154, 2, 102, 387,
	-139, 2, 154, 427, 2, 8, 2, -410, 343, 309,
	146, 2, 360, 2, 361, 66, -307, 448, 66, 157,
	2, 157, 2, -291, 2, 442, -464, 2, 271, 157,
	2, 157, 2, 157, 2, 157, 2, 157, 2, 306,
	357, 208, 2, -97, 439, -333, 439, 2, 404, 216,
	131, 157, -291, 2, 157, 2, 157, 2, 5, 2,
	375, 2, 206, 302, 375, 2, -213, -484, 2, 387,
	436, 348, 2, 2, 78, 79, 157, 2, 157, 2,
	157, 448, 2, -284, -367, -319, -320, -319, 401, -253,
	-254, -139, 360, 2, -162, -282, -164, 154, -309, -310,
	-165, 229, 141, 267, -166, -290, 26, 115, -290, -290,
	53, 472, 472, 11, 12, 68, 38, 462, 463, 464,
	465, 152, 466, 467, 460, 461, 459, 452, 453, 457,
	212, 213, 84, 456, 454, 77, 238, 338, 142, 143,
	144, 145, 320, 183, 31, 184, 14, 15, 16, 30,
	276, 228, 449, 176, 364, 455, 17, 18, 19, 203,
	205, 259, 43, 179, -194, -231, -333, -333, -333, -333,
	-333, 283, 471, -280, -328, 469, -157, 471, 471, 471,
	5, -401, 8, -157, -333, -346, 472, -272, 471, -157,
	-346, -341, 471, 336, 469, 471, -349, -333, 5, 471,
	473, -446, 443, -383, 471, 299, -382, 471, -382, -382,
	437, -380, 471, 450, 444, 471, -380, 471, 471, 154,
	471, 471, 471, 471, 471, 471, 471, 471, 471, 471,
	471, 471, 471, 471, 471, 437, 471, 471, 471, 471,
	471, 471, 471, 471, 471, 476, -444, -250, 471, -276,
	-370, -333, 464, -276, -276, 271, -269, -333, 90, -294,
	209, 249, 158, 225, 331, 190, -330, 475, -330, -357,
	450, -157, -364, -212, -157, -366, 471, -362, -357, -80,
	-401, -67, -77, -85, -97, -110, -143, -144, 464, -213,
	471, 157, 471, 473, 157, -258, -405, -197, -213, -224,
	-225, -229, 114, -269, -461, -258, -189, 35, -343, -377,
	-378, -379, -388, -384, -387, -391, 48, 55, 54, 394,
	247, 350, 351, 368, 352, 353, 45, 428, 182, 268,
	270, 193, 4, 46, 433, -390, 200, 316, 317, 315,
	319, 318, 192, 198, 194, 367, 195, 196, 197, 44,
	311, 150, 151, 149, 118, 107, 106, 264, 50, 49,
	104, 397, 398, 399, 400, 210, 211, 434, 378, 62,
	63, -461, -258, 154, -404, -269, 35, -320, 2, 108,
	-408, 39, -493, 476, 227, -233, 237, 256, 169, 272,
	446, 265, -409, 5, 4, -342, -354, 108, 231, 200,
	-395, -397, 8, -396, 9, -398, 462, 463, -403, -402,
	92, 473, -405, -173, 321, -172, 23, 27, 119, 430,
	132, -240, 187, 289, 127, 371, 420, -470, -471, 341,
	392, 393, 80, 265, 321, 127, -287, -289, 35, 100,
	251, 285, 56, 180, 242, 243, 373, 438, 127, 321,
	-471, 321, -471, -175, 371, 420, -470, -471, 341, 321,
	-174, -240, 127, 475, -467, -441, 442, 127, -373, -372,
	-411, -94, -265, 476, 476, -405, 464, 127, 127, 127,
	127, 2, 2, 257, 2, 2, 2, 159, -473, -482,
	2, 2, 2, -213, 172, -252, 271, -463, -266, 387,
	-213, 257, -215, 172, 2, -218, 436, -467, 257, 35,
	471, 2, -199, 172, 2, -187, -186, 185, -441, 257,
	-368, -227, -213, -363, -227, 359, -206, 35, -330, -330,
	127, 2, 2, 2, -186, -176, 476, 58, 327, 127,
	-176, 127, -176, 127, -176, 476, 127, -176, 127, 476,
	127, 472, 476, -376, -376, -410, -149, 442, 157, 88,
	471, 471, -151, -373, 476, -95, -410, -463, -197, 2,
	-213, 2, 387, 210, -149, -410, -410, -410, -404, 26,
	361, 2, 306, 357, 79, 361, 2, -213, 387, 102,
	185, 72, -465, 154, -462, 332, -461, -213, 102, -213,
	102, -213, 102, -213, -213, 2, 2, 2, 2, 76,
	76, 154, 2, 404, 2, 404, 2, -186, -186, -186,
	227, -213, 154, 387, 185, 387, 185, 102, 387, -176,
	476, -190, -162, -282, -404, -283, -282, -163, -162, -165,
	154, 310, 421, 251, 362, 214, -310, -309, 26, -333,
	-314, 148, 250, -333, -312, -335, 462, 463, -396, -398,
	-268, 265, -156, -156, -156, -255, -359, -333, 301, 185,
	-392, -377, -377, -211, -405, 397, -333, -333, -333, -333,
	-333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
	-333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
	-333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
	-333, 228, 176, 364, 43, 179, -333, 401, -333, -333,
	-333, -333, 246, 257, 261, 409, 139, 418, 115, 265,
	-497, 383, 37, -339, -157, -273, 471, -353, 32, 370,
	26, -346, 471, 2, -328, -333, -329, -270, -269, -269,
	472, 435, 26, 115, 464, 2, 472, 476, 35, 472,
	-333, -270, -345, -341, -269, -352, -351, 439, -302, -303,
	447, 245, 105, 171, 244, -304, 346, -399, 8, -405,
	464, -447, 147, 164, 8, -399, -399, 397, 397, -399,
	-399, -399, 471, 472, 2, 472, 2, 472, -333, 2,
	472, -333, 2, 472, -333, 2, 472, -333, 2, 472,
	2, -333, -333, -333, -333, -333, -333, -333, -269, -296,
	2, -393, -269, 4, 447, 245, 105, 171, 244, 346,
	5, -296, 2, -297, 2, -333, -269, -298, -334, -335,
	462, 463, 455, -346, -299, 2, -333, -270, -333, 51,
	222, 403, -300, -333, 157, -269, -269, 2, -269, 2,
	-445, 35, -269, -261, 476, 157, 35, 4, -261, -261,
	471, 472, 476, -295, 168, 241, 236, -295, -362, -294,
	209, -292, 281, -292, -292, -357, -198, 469, 477, -405,
	-357, -356, -355, 35, -206, 278, -357, -357, 473, 472,
	-356, 470, -459, 471, 474, 474, 474, 474, 474, -213,
	471, -269, -405, 376, 472, 473, 203, 203, 203, 203,
	337, 472, 401, 442, -79, 273, 472, 476, -260, 34,
	469, -394, 437, 471, 471, -303, 471, 157, -259, -476,
	472, 405, -321, -232, 310, 369, 322, 354, 385, 8,
	9, 8, 9, 476, -405, 476, -477, 82, 401, 70,
	-324, 172, 70, -419, -200, 82, -420, -186, 65, 417,
	301, 156, -477, 82, 301, -477, 82, 82, 359, 374,
	53, -367, 38, 38, 26, -97, 223, 157, 448, 387,
	185, 401, -367, -289, -377, 100, 242, 243, 53, -400,
	-395, 462, 463, -400, 53, -400, -400, -400, 442, -215,
	-367, 401, 401, 476, 38, 38, 26, -97, 223, 157,
	401, -229, -198, -468, -191, 89, 252, 235, 253, -192,
	-193, 291, 429, -410, -146, 181, 472, -373, -222, -186,
	473, -333, -97, -333, -97, 127, 2, -489, 217, 471,
	-236, 257, 157, -258, -374, 201, 476, -266, 127, -288,
	-287, 257, -217, 172, 2, -213, 127, 471, 123, 308,
	2, 271, 257, -199, 172, -179, 390, 127, -286, 427,
	-315, -97, 471, 108, 35, -315, -277, -278, -371, -279,
	-200, 471, -206, -186, 2, -213, -267, -267, -267, -229,
	-230, -197, -410, -411, -79, -375, 472, 472, 472, -148,
	275, -147, -186, 5, -151, 427, -235, -325, -324, -423,
	-424, -419, 228, 185, 417, 202, 140, -251, -201, -200,
	101, -149, -94, -373, -149, -149, -373, -373, -213, 154,
	-149, -149, -149, 2, 2, -291, -213, -197, -229, -213,
	-258, -258, -291, -197, -291, -197, -291, -197, -97, -333,
	356, 154, 154, 473, -291, 308, 102, 387, 289, 185,
	-213, -229, -213, -229, -197, -213, -367, -283, -163, 272,
	214, 362, -312, -313, -335, 336, 337, -313, 336, 337,
	8, 9, 8, 9, -167, 366, 260, -267, 476, -170,
	36, 113, 214, -213, 448, 124, -333, -333, 401, -497,
	383, -339, 124, -333, 246, 261, 409, 139, 418, 115,
	265, 157, 471, -334, -334, 472, -271, -333, -333, 470,
	479, 472, -254, 476, -253, -333, -269, -269, 472, 473,
	-269, -258, 470, 470, 476, 472, -350, -351, 120, -333,
	401, 401, 401, 401, 471, 472, 473, -452, 282, 471,
	471, 472, 472, 476, 472, 448, 448, 472, 472, 472,
	-333, 472, 472, 472, 472, 35, 476, 476, 476, 472,
	476, 476, 476, 472, 472, 157, 472, 472, -305, 294,
	472, 11, 12, 462, 463, 464, 465, 152, 466, 467,
	460, 461, 459, 452, 453, 454, 77, 238, 338, 14,
	15, 16, 203, 179, -334, -334, -334, 472, -337, -338,
	157, 154, 35, -300, -300, -300, 472, 157, -269, 472,
	472, 471, 472, -327, -326, 440, -370, -262, 2, -362,
	-208, -405, -327, -327, -269, -333, 209, 209, -293, 427,
	271, -295, -362, -356, -401, -332, -331, 155, 36, 113,
	254, 175, -356, -206, -250, -356, -356, -405, -357, -357,
	-355, 472, -460, -401, 472, -263, -365, -440, -254, 473,
	-149, -405, -140, 5, 261, -140, -140, -140, -258, 24,
	295, -377, 469, 470, 8, 471, -399, -399, -399, -258,
	157, -402, -320, 415, 74, 310, 397, -402, -172, 321,
	-200, -200, -213, 257, -324, 172, -178, 257, -377, -207,
	-186, 471, 471, 214, 214, -200, -207, 214, 172, -200,
	172, -207, -207, -469, 310, 266, -333, 230, 308, 258,
	-173, 321, -97, -97, -97, 471, -476, 427, 114, -213,
	-229, -213, -217, 321, 255, -224, -400, -400, -287, 321,
	-215, -197, -174, -97, -97, -97, 471, -198, -175, 321,
	-191, -410, 261, 423, -467, -149, 157, -146, 464, -186,
	436, -186, -234, -237, -235, -200, -154, 444, 442, 127,
	-228, -213, 469, -149, -410, -213, -221, 127, -250, 257,
	-410, 2, 471, 2, -213, 127, 271, 257, -180, 121,
	-494, 454, -197, -327, -262, -285, -318, 329, 271, -251,
	432, -206, -285, -264, 476, 157, 454, 473, -251, 2,
	-176, -176, -176, -176, -176, -79, -79, -149, 476, 471,
	454, 454, 471, -410, -410, 472, 476, -213, -199, 185,
	185, -205, -187, 472, 476, 473, 471, -149, 157, -45,
	442, 387, 475, -291, -291, -291, 356, 356, -186, -209,
	-197, -213, -210, -229, 154, 154, 421, -313, 272, 234,
	-359, -171, 263, -213, 475, -333, -333, 124, 124, -333,
	-334, -334, -333, 124, 157, 471, -333, -343, 30, 30,
	472, 476, -329, -333, 472, 435, -254, -254, 472, 464,
	-405, 475, 472, -341, 122, -333, 395, 245, 171, 244,
	-304, 244, -304, -304, -399, 5, -405, 464, -453, -203,
	471, -186, 440, -253, -399, -380, -380, 472, -392, -377,
	-333, -333, -333, -333, -333, -333, -337, -333, -392, -377,
	-334, -334, -334, -334, -334, -334, -334, -334, -334, -334,
	-334, -334, -334, -334, -334, -334, -334, -334, -334, 115,
	257, 265, -334, -338, -337, -333, -333, -377, 472, 472,
	472, -269, -79, -281, 164, -333, -373, 476, -281, -281,
	472, -362, -362, 471, -333, 209, 470, 476, 478, 454,
	-250, 473, -355, -356, 470, 472, 476, 472, 476, -317,
	35, 472, -405, 274, 5, 8, 469, 470, -399, 472,
	472, 472, -258, -333, 401, 401, 127, 257, 429, -425,
	-420, -333, -256, -360, -333, 471, 471, -169, 119, 359,
	-478, 2, 427, 127, -176, 127, -176, 446, 471, 471,
	401, 442, -269, -333, -150, 108, -404, -471, 475, -471,
	475, 401, 401, 442, -269, 401, -410, 261, -411, -149,
	2, 2, 2, 472, 472, 476, -426, 35, 269, 471,
	269, -213, -63, 442, -372, -401, -215, 35, 127, -467,
	2, -308, 427, -198, -213, 127, -181, 221, -494, -408,
	-441, -254, -285, -276, 258, 81, 472, -327, -278, -262,
	-333, 2, 472, -147, -148, -410, -410, -410, -149, -151,
	-151, -325, 2, 471, -199, -187, 471, -151, -201, 2,
	-411, -97, 275, -213, 464, -291, -242, -241, 289, 265,
	-242, 336, 336, 272, 148, 218, -170, -198, -333, -333,
	124, 30, 30, -333, -333, -343, 472, -333, -333, -269,
	470, 5, -333, 472, 472, 8, -333, 472, 473, -454,
	-186, -333, 472, 472, 472, 472, 476, 476, 472, 472,
	472, 472, -338, 157, 115, 265, 471, 472, 472, -340,
	167, 53, -362, -340, -340, -293, -258, -362, -331, -198,
	469, -405, -401, -365, 471, 473, 470, 2, 469, 472,
	-200, -200, -324, 127, -427, 82, -429, 68, 140, 88,
	257, 261, 417, 301, 65, 108, 314, 35, 472, 472,
	476, -170, -256, -258, 257, 380, 108, 257, 108, 101,
	412, 71, -200, -207, -258, -258, -213, 133, 472, 476,
	454, 2, 464, 464, -217, -215, 133, 472, -198, -238,
	188, -200, -424, -421, -422, 301, -428, -430, 140, 301,
	-97, -153, -152, -186, 5, 2, 471, -236, 275, 470,
	-288, -97, -217, 471, -186, 271, 471, -198, -182, 220,
	-494, -408, -179, -311, -309, -316, 471, 271, -97, -254,
	454, 472, 472, 101, 101, -256, 471, 471, -258, 101,
	472, -46, -47, 185, 82, 293, -210, 387, 185, 471,
	471, -170, -333, -333, -333, 472, -254, -405, 464, -448,
	289, 472, -333, -333, -334, 157, 471, -343, -449, 441,
	-333, -269, -449, -449, 472, -401, 2, 469, 2, -324,
	-207, -211, -204, -186, 140, 172, 261, 214, 471, -334,
	-213, 471, 2, -486, 110, 189, -323, -487, 87, 381,
	-360, -171, 472, 472, 261, 261, -333, -377, 471, -176,
	-176, 472, 472, -333, 401, -404, 86, -402, 2, -471,
	-333, 401, -239, -240, 179, -426, 214, -204, 214, -485,
	442, 472, 476, 454, 454, -234, -154, -64, -65, 402,
	-372, -250, -256, -213, -256, 271, -494, -408, -180, -285,
	116, -258, 82, -311, -339, -149, 471, 471, 472, -256,
	-256, 472, 471, -149, 476, 26, 471, 26, 471, -213,
	-229, -269, -269, 472, -254, 53, 472, 472, -334, -343,
	472, -450, -451, -203, 470, 2, -429, -204, 257, 427,
	-333, -188, 471, -333, 189, 111, 177, -238, 471, -322,
	427, 314, -196, 68, -256, 471, 471, 471, 454, 157,
	471, -154, 287, 471, 101, 251, -152, -336, -336, 472,
	35, -65, 9, 35, 472, -308, 472, -213, -408, -181,
	421, 258, 472, -207, -285, -411, -411, -322, 472, 472,
	-411, -47, -258, -258, 472, 472, -455, 308, 337, 166,
	-269, 472, 476, 35, 127, 168, 472, -431, 239, -186,
	472, 111, 177, -239, -258, -238, 168, -213, -472, 427,
	-211, 472, -244, -243, -241, -246, -245, -241, -269, -402,
	86, 287, -269, -213, -257, -361, -200, 101, -238, -97,
	-97, -322, 471, -323, 471, -182, 359, -326, 472, 472,
	-323, -322, 472, 472, 472, 472, -456, -457, 43, 414,
	92, -333, -456, -456, -451, -453, 140, 442, -432, -435,
	-434, 271, 365, 158, 288, 472, 380, 438, -486, 472,
	442, -250, -333, -322, 472, 476, 432, 472, 476, 432,
	472, 157, 472, 471, 472, 476, -239, -485, -323, -256,
	-238, -256, -277, -149, -149, -238, -323, -149, -458, 126,
	-457, 298, 153, 336, 298, 153, -458, -458, -204, 47,
	-434, 271, -435, 271, 421, 112, 47, -431, -238, -243,
	179, -245, 157, 287, -258, -361, -154, -238, 472, -239,
	472, -327, -239, -238, 92, 164, 396, 251, 30, 454,
	-433, 251, 327, 58, 359, -433, 454, -432, 471, 471,
	472, -239, -322, -490, 440, -323, -239, 336, 279, -457,
	-333, 22, 261, 108, -333, -486, -269, -269, -177, 58,
	327, -490, -323, 2, -238, 472, 472, -238, -239, -239,
	401, -239, -490, 471, -490, -269, 472, -239,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 364, 365, 367,
	368, 369, 371, 372, 374, 376, 378, 380, 381, 383,
	385, 387, 388, 389, 390, 391, 393, 395, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 453, 455,
	0, 954, 956, 958, 960, 25, 26, 0, 0, 190,
	192, 194, 0, 219, 221, 222, 224, -2, 0, 320,
	321, 323, -2, -2, 0, 0, 442, 444, 0, 0,
	0, 464, 465, 0, 1042, -2, 458, 460, 462, 527,
	529, 531, 533, 535, 537, 539, 540, 542, 544, 546,
	548, 550, 552, 554, 555, 557, 559, 561, 563, 565,
	567, 569, 571, 573, 575, 577, 579, -2, -2, -2,
	0, -2, -2, -2, 972, 29, 31, 33, 35, 37,
	39, 41, 272, 273, 275, 277, 279, 281, 284, 285,
	287, 1097, 325, 327, 329, 331, 333, 0, -2, 1109,
	0, 0, 43, 44, 45, 46, 47, 48, 49, 50,
	66, 67, 68, 69, 70, 71, 72, 73, 54, 56,
	57, 61, 62, 64, 52, 0, 0, 1073, 1075, 1077,
	1079, -2, 0, 0, 7, 9, 11, 13, 15, 17,
	19, 21, 366, 370, 373, 375, 377, 379, 382, 384,
	386, 392, 394, 396, 839, 1733, 1747, 1748, 1749, 1752,
	1753, 1754, 1755, 1756, 1757, 2107, 2187, 2188, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
	1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
	1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
	1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
	1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
	1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
	2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
	2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
	2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
	2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
	2088, 0, 420, 418, 1726, 421, 1937, 423, 425, 314,
	315, 316, 317, 318, 319, 0, 435, 429, 434, 436,
	438, 439, 440, 441, 415, 413, 0, 435, 1779, 433,
	952, 953, 947, 948, 1971, 979, 454, -2, -2, -2,
	2075, -2, 486, -2, 493, 2078, 1973, 498, 0, 500,
	-2, 503, 955, 957, 959, 27, 28, 0, 0, 0,
	0, 0, 0, 0, 0, 888, 889, 890, 0, 0,
	154, -2, -2, -2, -2, 0, 0, 1819, 1694, 1749,
	1697, 1692, 191, 193, 195, 196, 0, 0, 0, 0,
	0, 0, 220, 223, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 0, 0, 750, 742, 743, 924, 0, 0,
	0, 0, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 324, 0, 0, 0, 0, 0, 0, 250, 355,
	356, 0, 1098, 1098, 1098, 0, 0, 0, 0, 171,
	162, 0, 0, 723, 443, 445, 0, 0, 157, 0,
	0, 951, 0, 173, 0, 0, 459, 461, 463, 528,
	530, 532, 534, 536, 538, 541, 543, 545, 547, 549,
	551, 553, 556, 558, 560, 562, 564, 566, 568, 570,
	572, 574, 576, 578, 580, 581, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, -2, -2, 0, 0, 0,
	0, 0, 0, 0, -2, 0, 0, -2, -2, -2,
	0, 0, 0, 0, -2, -2, 0, 0, 0, 0,
	584, 586, 587, 588, 0, 639, 656, 0, 879, 1099,
	981, 962, 976, 981, 964, 965, 966, 967, 968, 973,
	975, 969, 970, 971, 30, 32, 34, 36, 38, 40,
	42, 274, 276, 278, 280, 282, 286, 288, -2, 1071,
	1072, 326, 328, 330, 332, 334, 446, 0, 448, 0,
	585, -2, 0, 1103, 1103, 1103, 0, 0, 1072, 1070,
	0, 451, 452, 507, 508, 1341, 0, 0, 0, 0,
	0, 1591, 1425, 0, 509, -2, 1456, 1458, 2054, 2075,
	1590, 1460, 1461, 1462, 1463, 1464, 0, 0, 1467, 1468,
	1469, 1470, 1471, 0, 1473, 0, 1478, 1479, 1480, 0,
	2059, 1671, 1745, -2, 1244, 1245, 1246, 1247, 1248, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 2065, 1741, 0, 1557,
	1494, -2, 1766, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1828, -2, -2, -2, -2,
	-2, -2, -2, 1300, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 2089, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 0, 2043, 2060, 2061, 2066,
	2068, 2062, 2051, 1519, -2, 2090, 2091, 2092, 2093, 2094,
	2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104,
	2105, 1301, -2, 2055, 2056, 2071, 2072, 2077, 2082, 2083,
	2058, 2067, -2, -2, 1089, 1946, 1092, 839, 1090, 1074,
	1076, 0, 1078, 0, 0, 0, 1083, 1106, 1104, 0,
	1145, 1087, 1088, 1163, 1163, 1187, 0, 1168, 0, 1187,
	1098, 1213, 0, 1174, 1966, 1495, 1496, 0, 1749, 1746,
	-2, 0, 0, 0, 0, 0, 0, 0, 416, 0,
	422, 424, 0, 0, 0, 0, 0, 0, 0, 0,
	978, 456, 457, 0, 481, 0, 485, 2050, -2, 1784,
	1986, -2, 489, 982, 986, 987, 988, 989, 0, 0,
	0, 0, 0, 495, 0, 0, 482, 483, 501, 504,
	0, 51, 0, 2060, 1213, 53, 0, 1716, 1771, 1772,
	1773, 1774, 1775, 2089, 2106, 2108, 2109, 2110, 2111, 2112,
	2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,
	2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132,
	2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142,
	2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152,
	2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162,
	2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172,
	2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182,
	2183, 2184, 2185, 2186, 55, 0, 2060, 58, 0, 2060,
	0, -2, 63, 0, 1722, 65, 0, 1719, 74, 0,
	2060, 0, 1691, -2, -2, 2060, 887, 174, 175, 1762,
	1763, 1767, 1768, 1769, 1770, 1200, 158, 0, 0, 0,
	715, 1688, 1693, 716, 1698, 0, 197, 198, 199, 200,
	201, 2060, 203, 204, 0, 206, 207, 2060, 209, 210,
	0, 212, 226, 227, 0, 229, 0, 2060, 0, 0,
	0, 235, -2, 251, 0, 248, 0, 239, 240, 242,
	243, 244, 245, 0, 292, 290, 1727, 0, 724, 2060,
	726, 1732, 0, 0, 908, -2, 2060, 884, 913, 1730,
	0, -2, 0, 1096, 2060, 996, 746, 747, 748, 749,
	0, 311, 0, 1009, 0, 1011, 0, 1032, 1219, 1163,
	1163, 0, 252, 253, 254, 255, 256, 2060, 0, 0,
	0, 261, 0, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 149, 2060, 337, 353, 149, 2060, 340, 149,
	2060, 343, 149, 2060, 346, 1686, 149, 2060, 349, 350,
	2060, 352, 176, 0, -2, 409, 1735, -2, 358, 0,
	359, 0, 362, -2, 0, 188, 0, 0, 721, 722,
	1200, 160, 0, 949, 950, 0, 0, 466, 0, 0,
	582, 583, 0, 0, 593, 594, 595, 188, 1974, 1944,
	1844, 600, 0, 603, 606, -2, 0, 0, 0, 0,
	610, 0, 615, 616, 617, 0, 720, 619, 0, 0,
	621, 0, 625, 0, 628, 0, 630, 0, 632, -2,
	-2, -2, 643, -2, 0, 647, 0, 649, 0, 0,
	0, 0, 664, 665, 0, 670, 0, 673, 674, 675,
	676, 677, 0, 679, 680, 681, 682, 0, 684, 685,
	-2, -2, 689, 691, 0, 698, 0, 702, 0, 706,
	0, 589, 590, 149, 1217, 961, -2, 963, 0, -2,
	0, 447, 0, 450, 1124, 1057, 1054, 0, 1121, 1122,
	1058, 0, 0, 0, 1065, 0, 1101, 1102, 0, 0,
	0, 1044, 1045, 0, 0, 0, 0, 1596, 1597, 1598,
	1599, 1600, 1601, 1604, 1605, 1602, 1603, 1606, 1607, 0,
	0, 0, 0, 0, 1608, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1609, 1610, 1611, 0,
	0, 1613, 0, 1615, 0, 0, 0, 0, 0, 0,
	1404, 1406, 1679, 0, 0, 1612, 1346, 1347, 1348, 1383,
	1384, 0, 0, 1457, 1676, 1675, 1459, 0, 1627, 0,
	1466, 1472, 1712, -2, 0, 1591, 1622, 0, 0, 1481,
	1482, 1483, 0, 0, 1627, 0, 0, 1670, 1338, 0,
	0, 1559, 0, 1280, 0, 1281, 1282, 0, 1283, 1284,
	1297, 1310, 0, 0, 0, 0, 1314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1302, 0, 0, 0, 1651,
	-2, 0, 0, 0, 0, 0, 1091, 0, 0, 1149,
	1680, 1684, 1685, 1149, 1149, 0, 0, 1628, 1210, 1210,
	0, 0, 1206, 1206, 1206, 1204, 1187, 0, 1187, 1197,
	0, 1187, 1187, 0, -2, 1168, 0, 0, 1197, 0,
	1181, 397, 399, 401, 403, 404, 405, 407, 1214, 1215,
	0, 0, 0, 0, 0, 0, 1750, 0, 0, 0,
	1737, 0, 0, 0, 0, 427, 437, 1098, 0, 1630,
	1236, 1239, 1240, 1241, 1242, 1243, 1249, 1250, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, -2, 1298, 1300, 1321, 1287, 1288, 1289,
	1290, 1291, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1278, 1279, 1293, 0, 1268, 1268, 1268, 1285, 1286,
	1309, 1320, 1312, 1320, 1316, 1237, 1238, 1303, 1304, 1305,
	1306, 0, 431, 0, 0, 0, 0, -2, 491, 496,
	497, 0, 0, 984, 0, 990, 518, 519, 520, 992,
	993, 0, 494, 521, 522, 523, 524, 525, 526, 0,
	1700, 1701, 1702, 1703, 1706, 1707, 0, 0, 492, 511,
	499, 0, 505, 75, 944, 114, 0, 944, 944, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 99, 110,
	87, 88, 0, 0, 0, 0, 59, 861, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	98, 0, 93, 77, 0, 0, 0, 100, 112, 0,
	140, 142, 0, 0, 885, 0, 1095, 0, 179, 1199,
	0, 1200, 714, 0, 0, 1750, 1696, 0, 0, 0,
	0, 228, 230, 0, 232, 233, 234, 0, 907, 0,
	241, 238, 283, 811, 2060, 0, 0, 309, 304, 0,
	306, 0, 860, 2060, 858, 1731, 0, 882, 0, 0,
	0, 914, 0, 2060, 919, 1718, 1758, 1759, 998, 0,
	313, 0, 1012, 1014, 0, 0, 1220, 0, 1222, 1223,
	0, 258, 259, 260, 0, 335, 0, 147, 148, 0,
	338, 0, 341, 0, 344, 0, 0, 347, 0, 0,
	0, 1098, 0, 0, 0, 0, 164, 0, 0, 0,
	0, 0, 0, 188, 0, 1200, 188, 188, 1200, 468,
	1200, 470, 0, 0, 596, 188, 188, 188, 601, 602,
	604, 605, -2, -2, 699, 607, 608, 667, 0, 0,
	0, 666, 618, 0, 708, 1962, 718, 667, 1819, 667,
	1819, 667, 1819, 629, 631, 634, 659, 642, 646, 0,
	0, 0, 651, 0, 653, 0, 655, 667, 668, 671,
	678, 683, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 974, 1124, 1057, 449, 1048, 1123, 1049, 1056, 1059,
	0, 0, 1061, 0, 1063, 0, 1119, 1120, 1127, 1128,
	0, 1138, 1139, 1131, 0, -2, 0, 0, 1134, 1135,
	1067, 0, 1084, 1085, 1086, 1110, 1111, 933, 0, 2187,
	1342, 1231, 1343, 1344, 1715, 0, 1349, 1350, 1351, 1352,
	1353, 1354, 1355, 1356, 1357, 1358, -2, -2, -2, -2,
	-2, -2, -2, -2, 1367, 1368, 1369, 1370, 1371, 1372,
	1373, 1374, 1375, 1376, 1377, -2, -2, -2, 1381, 1382,
	-2, 1614, 1616, 0, 1679, 0, -2, 0, -2, -2,
	-2, -2, 1401, 0, 1403, 1408, 1410, 1412, 0, 0,
	0, 0, 1678, 1422, 1662, 1663, 0, 0, 1593, 1594,
	1595, 1407, 0, 1426, 1677, 1674, 0, 0, 1626, 1109,
	1485, 0, 0, 0, 0, 1492, 1477, 1624, 0, 1623,
	0, 0, 0, 1634, 0, 1669, 1665, 0, 1713, 1337,
	1324, 1325, 1326, 1327, 1328, 1329, 1339, 0, 1710, 1738,
	1744, 1567, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1520, 1521, 1522, 1523, 1524, 0, 1526,
	1527, 0, 1529, 1530, 0, 1532, 1533, 0, 1535, 1536,
	1537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1539, 0, 1637, -2, -2, -2, -2, -2, -2, -2,
	-2, 0, 1541, 0, 1543, 1628, 1648, 0, 0, 1427,
	0, 0, 0, 1591, 0, 1546, 1628, 1656, 0, 0,
	0, 0, 0, 1628, 0, 1661, 0, 1553, 0, 1555,
	1093, 0, 0, 1226, 0, 0, 0, 1683, 1226, 1226,
	0, 1144, 0, 0, 1207, 1208, 1209, 0, 0, 1210,
	0, 1201, 1205, 1202, 1203, 1197, 1160, 0, 0, 1717,
	1197, 1166, 1196, 0, 839, 1186, 1197, 1197, 0, -2,
	1170, 1187, 0, 0, 398, 400, 402, 406, 408, 0,
	0, 1109, -2, 188, 838, 0, 0, 0, 0, 0,
	417, 419, 0, 0, 411, 0, 414, 0, 1227, 1230,
	0, 0, -2, 0, 0, 1322, 0, 0, 0, 0,
	484, 0, 983, 991, 0, 515, 0, 517, 0, 1704,
	1708, 1705, 1709, 0, 506, 0, 0, 0, 0, 943,
	118, 2060, 0, 151, 0, 0, 805, 1723, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 89, 0, 0, 0, 0,
	0, 0, 0, 862, 863, 865, 872, 874, 0, 868,
	1711, 0, 0, 869, 0, 871, 873, 875, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 90, 0, 0,
	0, 0, 1690, 903, 901, 895, 896, 897, 898, 899,
	900, 0, 0, -2, 188, 0, 159, 179, 1689, 1699,
	0, 202, 205, 208, 211, 0, 236, 0, 0, 752,
	729, 0, 0, 291, 188, 0, 0, 305, 0, 856,
	859, 0, 839, 2060, 894, 1729, 0, 0, 0, 0,
	912, 0, 0, 0, 2060, 1000, 1006, 0, 1226, 0,
	1030, 1015, 0, 0, 0, 1030, 1034, 1035, 1037, 1038,
	0, 0, 1221, 0, 262, 354, 149, 149, 149, 1687,
	149, 149, 177, 351, 357, 410, 1098, 1098, 188, 186,
	1922, 184, 181, 183, 0, 0, 0, 753, 755, 756,
	757, 758, 0, 1759, 0, 1873, 1759, 0, 1018, 1020,
	0, 155, 161, 188, 0, 303, 467, 472, 591, 0,
	597, 598, 599, 636, 661, 609, 611, 612, 613, 0,
	719, 717, 620, 667, 623, 667, 626, 667, 645, 648,
	650, 0, 0, 0, 663, 0, 0, 0, 0, 0,
	0, 0, 703, 704, 705, 707, 1218, 1052, 1053, 1055,
	0, 1064, 0, 0, 1133, -2, -2, 1132, 1136, 1137,
	-2, -2, -2, -2, 1060, 0, 1069, 1066, 0, 1118,
	931, 932, 0, 0, 0, 0, -2, -2, 0, 0,
	0, 1423, 0, -2, 1402, 1405, 1409, 1411, 1413, 0,
	0, 0, 0, 0, 0, 1617, 0, 1619, 1424, 1672,
	1675, 1589, 0, 0, 1108, 1109, 1109, 0, 1491, 0,
	1625, 0, 1632, 1633, 0, 1484, 0, 1666, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 1292, 1266, 0, 1320, 1318, 1319, 1313, 1320, 1317,
	0, 1525, 1528, 1531, 1534, 0, 0, 0, 0, 1514,
	0, 0, 0, 1518, 1538, 0, 1540, 1542, 0, 0,
	1544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1430, 1431, 1432, 1545, 1654, 1655,
	0, 0, 0, 0, 0, 0, 1551, 0, 1660, 1552,
	1554, 1098, 1146, 1141, 1225, 0, 1681, 1200, 1148, 1150,
	1682, 1720, 1141, 1141, 0, 1629, 0, 0, 1191, 0,
	0, 0, 1193, 1164, 0, 0, 1158, 0, 1154, 1155,
	1156, 1157, 1165, 839, 1195, 1167, 1171, 1738, 0, 1197,
	0, 1182, 0, 1184, 1216, 0, 1176, 1179, 0, 0,
	189, 1751, 213, 217, 218, 214, 215, 216, 426, 0,
	0, 1631, 0, 1232, 0, 0, 0, 0, 0, 430,
	0, 480, -2, 513, 514, 516, 0, 512, 115, 944,
	0, 0, 935, 0, 120, 2060, 129, 0, 781, 0,
	1721, 0, 0, 0, 0, 946, 0, 0, 2060, 149,
	2060, 149, 132, 135, 0, 139, 137, 0, 0, 772,
	76, 944, 79, 83, 91, 0, 0, 0, 97, 0,
	0, 0, 937, 0, 866, 867, 870, 876, 60, 0,
	939, 934, 141, 81, 85, 92, 0, 941, 78, 0,
	902, 880, 881, 0, 886, 152, 0, 188, 1695, 0,
	0, 0, 0, 0, 751, 822, 0, 0, 0, 0,
	297, 293, 0, 302, 308, 307, 725, 0, 0, 0,
	-2, 909, 0, 911, 923, 0, 0, 0, 1002, 1006,
	0, 1005, 1096, 1109, 312, 1007, 1030, 0, 0, 0,
	1017, 1013, 1010, 1226, 0, 0, 0, 0, 0, 257,
	336, 339, 342, 345, 348, 360, 361, 163, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 0, 1759,
	1759, 0, 1725, 0, 0, 0, 0, 156, 0, 469,
	0, 0, 0, 622, 624, 627, 652, 654, 667, 692,
	693, 767, 0, 767, 0, 0, 1062, 0, 1130, 1068,
	1112, 1113, 0, 933, 0, 1345, 1386, 0, 0, -2,
	0, 0, 1390, 0, 0, 0, -2, 0, 0, 0,
	1618, 1620, 0, 1674, 1486, 0, 0, 0, 1490, 1474,
	1475, 0, 1592, 1635, 1664, 1668, 0, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 0, 1714, 1739, 1743, 1565, 1566,
	1570, 1728, 0, 0, 0, 1311, 1315, 1497, 0, 0,
	0, 0, 0, 0, 0, 1636, 1647, 1649, 1428, 1429,
	1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
	-2, -2, -2, 1446, 1447, 1448, -2, -2, -2, 0,
	0, 0, 1650, 1652, 1653, 1657, 1658, 0, 1548, 1549,
	1550, 1659, 0, 1143, 0, 1224, 1147, 0, 1143, 1143,
	1105, 1189, 0, 0, 1212, 0, 1161, 0, 1162, 0,
	1194, 0, 1169, 1172, 1173, 1183, 0, 1175, 0, 1178,
	0, 1486, -2, 428, 412, 0, 0, 1234, 0, 1295,
	1299, 1323, 432, 1198, 0, 0, 0, 0, 150, 779,
	804, 0, 0, 926, 933, 0, 0, 122, 0, 0,
	0, 130, 0, 0, 127, 0, 134, 138, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 101, 0, 102,
	0, 0, 0, 0, 0, 0, 905, 906, 178, 153,
	231, 893, 237, 761, 810, 0, 812, 0, 730, 0,
	0, 811, 289, 0, 296, 0, 860, 0, 0, 883,
	910, 0, 0, 0, 0, 0, 1004, 1006, 0, 997,
	998, 1126, 1008, 1028, -2, 1027, 0, 1109, 1036, 1033,
	1039, 1040, 0, 185, 0, 180, 182, 0, 166, 0,
	0, 754, 759, 0, 0, 0, 0, 0, 1019, 1021,
	0, 172, 0, 592, 614, 662, 694, 766, 0, 0,
	696, 0, 0, 1129, 1116, 1117, 1114, 933, 1388, 1392,
	0, 0, 0, 1394, -2, 0, 1416, -2, -2, 1621,
	1673, 1465, 1109, 1487, 1489, 1476, 1667, 1340, 0, 1572,
	1569, 0, 1556, 1267, 1509, 1510, 0, 0, 1513, 1515,
	1516, 1517, 1646, 0, 0, 0, 0, 1547, 1094, 1561,
	0, 0, 1151, 1561, 1561, 1190, 0, 1192, 1159, 1152,
	0, 1739, 1185, 1177, 0, 0, 1228, 1233, 0, 1294,
	116, 117, 119, 0, 780, 0, 783, 0, 0, 0,
	0, 790, 791, 0, 0, 0, 0, 0, 826, 835,
	0, 1118, 0, 0, 0, 124, 144, 0, 0, 945,
	0, 0, 149, 149, 0, 0, 936, 0, 0, 0,
	0, 104, 0, 0, 938, 940, 0, 0, 942, 769,
	0, 822, 814, 815, 816, 0, 821, 823, 0, 0,
	739, 0, 735, 0, 0, 732, 752, 729, 0, 294,
	857, 891, 839, 0, 922, 0, 0, 0, 994, 1006,
	0, 999, 1000, 1030, 1125, 0, 0, 0, 1016, 1126,
	0, 187, 188, 0, 0, 0, 0, 0, 0, 0,
	188, 471, 473, 0, 0, 479, 765, 0, 0, 0,
	0, 1115, 1396, -2, -2, 1417, 0, 1740, 1742, 1109,
	0, 1558, 0, 0, -2, 0, 0, 0, 1080, 0,
	1142, 1140, 1081, 1082, 1211, 0, 1180, 0, 1235, 121,
	0, 784, 785, 1724, 787, 0, 789, 792, 0, 795,
	1761, 0, 799, 806, 827, 0, 761, 0, 832, 833,
	927, 928, 837, 0, 123, 125, 143, 930, 0, 126,
	133, 0, 0, 80, 0, 0, 1812, 107, 105, 103,
	82, 0, 729, 768, 0, 813, 0, 824, 825, 737,
	0, 731, 0, 0, 0, 0, 0, 295, 298, 0,
	301, 0, 0, 923, 0, 0, 0, 1001, 1002, 310,
	0, 0, 0, 1030, 1041, 165, 0, 0, 837, 0,
	0, 803, 0, 170, 0, 475, 0, 477, 0, 695,
	697, 0, 0, 1488, 1576, 0, 1511, 1512, -2, 0,
	1454, 1560, 1562, 0, 1153, 1229, 782, 786, 0, 0,
	0, 843, 0, 0, 0, 830, 831, 769, 0, 761,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 0, 740, 0, 736, 733, 734, 761,
	0, 299, 300, 0, 837, 0, 835, 0, 1003, 1004,
	0, 1023, 1024, 1026, 1031, 0, 0, 835, 837, 802,
	0, 474, 0, 0, 700, 701, 0, 0, 0, 0,
	1571, 1455, 0, 0, 0, 0, 794, 848, 0, 0,
	0, 828, 829, 826, 0, 808, 0, 839, 128, 0,
	929, 837, 0, 773, 0, 0, 776, 0, 0, 108,
	1812, 106, 0, 0, 0, 818, 820, 741, 769, 739,
	892, 835, 0, 761, 0, 995, 0, 1025, 188, 188,
	761, 835, 188, 476, 478, 1568, 1588, 1577, -2, 2022,
	1816, 0, 1588, 1588, 1563, 1564, 0, 0, 796, 844,
	845, 0, 840, 841, 842, 1760, 797, 798, 807, 834,
	0, 843, 145, 761, 770, 0, 0, 771, 0, 0,
	111, 0, 113, 0, 817, 0, 729, 738, 761, 0,
	769, 0, 1226, 167, 168, 769, 761, 169, 1573, 0,
	0, 1579, 1580, 1581, 1582, 1583, 1574, 1575, 788, 0,
	846, 0, 847, 0, 0, 0, 0, 848, 131, 774,
	0, 777, 0, 109, 0, 819, 728, 769, 837, 920,
	835, 1022, 800, 769, 0, 1585, 1586, 0, 0, 0,
	849, 0, 852, 853, 0, 850, 0, 826, 0, 0,
	764, 920, 835, 917, 0, 761, 801, 1584, 1587, 1578,
	793, 851, 854, 855, 836, 809, 0, 0, 760, 762,
	763, 915, 761, 921, 769, 769, 0, 769, 920, 775,
	0, 920, 918, 0, 916, 0, 769, 778,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 460, 3, 466, 461, 3,
	471, 472, 464, 462, 476, 463, 473, 465, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 479, 3,
	452, 454, 453, 457, 475, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 469, 3, 470, 467, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 477, 459, 478, 455,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 456,
	57795, 458, 57796, 468, 57797, 474, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1116
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1121
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1125
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1126
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1127
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1128
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1129
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1130
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1131
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1132
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1136
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1145
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1146
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1149
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1150
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1151
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1152
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1153
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1155
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1209
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1235
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1246
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1261
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1265
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1269
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1283
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1302
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1334
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1338
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1342
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1348
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1352
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1358
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1367
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1378
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1382
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1388
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1396
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1406
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1410
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1420
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1431
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1438
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1450
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1457
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1465
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1470
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1474
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1479
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1485
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1493
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1504
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1514
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1524
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1533
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1544
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1550
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1558
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1562
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1566
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1570
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1576
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1581
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1592
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1596
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1602
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1606
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1613
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1623
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1628
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1633
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1643
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1653
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1658
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1663
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1672
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1684
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1694
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1701
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1705
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1713
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1720
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1729
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1738
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1743
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1750
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1758
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1759
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1763
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1773
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1781
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1785
		{
			sqlVAL.union.val = nil
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1791
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1795
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1802
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1806
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1810
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1816
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1820
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1846
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1850
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1853
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1876
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1880
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1883
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1887
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1891
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1897
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1907
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1944
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1949
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1953
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1959
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1964
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1969
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1974
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1979
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1983
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1999
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2002
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2006
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2010
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2018
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2028
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2032
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2038
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2042
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2046
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2050
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2056
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2060
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2066
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2070
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2074
		{
			sqlVAL.union.val = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2080
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2094
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2095
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2096
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2097
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2107
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2115
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2117
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2120
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2130
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2139
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2147
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2149
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2153
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2156
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2166
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2175
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2183
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2185
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2189
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2192
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2196
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2200
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2204
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2217
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2223
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2228
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2240
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2242
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2243
		{
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2244
		{
			return helpWith(sqllex, "CREATE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2247
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2248
		{
			return unimplemented(sqllex, "create cast")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2249
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2252
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2253
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2254
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2255
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2256
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2257
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2258
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2259
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2260
		{
			return unimplemented(sqllex, "create operator")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2261
		{
			return unimplemented(sqllex, "create publication")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2262
		{
			return unimplemented(sqllex, "create rule")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplemented(sqllex, "create server")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2264
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2265
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2269
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2270
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2273
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2274
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2277
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2278
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2281
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2282
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2283
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2284
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2285
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2286
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2287
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2288
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2289
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2290
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2291
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2292
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2293
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2295
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2296
		{
			return unimplemented(sqllex, "drop server")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2297
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2298
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2299
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2300
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2304
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2305
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2306
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2307
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2308
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2310
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2311
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2312
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2313
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2323
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2331
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2335
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2339
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2345
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2349
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2358
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2365
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2371
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2377
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2381
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2392
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2404
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2412
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2420
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2430
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2434
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2440
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2444
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2451
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2455
		{

			sqlVAL.union.val = nil
		}
	case 310:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2469
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2479
		{
			return helpWith(sqllex, "DELETE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2482
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2483
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2491
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2494
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2495
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2496
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2497
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2498
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2507
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2508
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2509
		{
			return helpWith(sqllex, "DROP")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2512
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2513
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2514
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2515
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2516
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2528
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2531
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2539
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2543
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2546
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2554
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2558
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2561
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2569
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2577
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2584
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2592
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2600
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2607
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2615
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false, IsRole: sqlDollar[2].union.bool()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2619
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true, IsRole: sqlDollar[2].union.bool()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2622
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2626
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2631
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2654
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2657
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2659
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2663
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2667
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2671
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2675
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2679
		{
			sqlVAL.union.val = &tree.ExplainBundle{Statement: sqlDollar[3].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2690
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2693
		{
			return helpWith(sqllex, "DELETE")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2695
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2696
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2697
		{
			return helpWith(sqllex, "INSERT")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2698
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2700
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2701
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2702
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2705
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2710
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2711
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2712
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2717
		{
			return helpWith(sqllex, "DELETE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2718
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2719
		{
			return helpWith(sqllex, "INSERT")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2721
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2725
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2726
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2730
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2744
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2752
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2760
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2764
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2768
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2778
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2785
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2793
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2797
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2801
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2811
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2815
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2819
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2823
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2826
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2846
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2850
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2854
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2857
		{
			return helpWith(sqllex, "GRANT")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2877
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2881
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2893
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2897
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2907
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2911
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2925
		{
			return helpWith(sqllex, "RESET")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2926
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2934
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2938
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2941
		{
			return helpWith(sqllex, "RESET")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2949
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2952
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2963
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2966
		{
			return helpWith(sqllex, "USE")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2970
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2971
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2972
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2973
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2977
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2978
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2979
		{
			return helpWith(sqllex, "USE")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2995
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3010
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3013
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3031
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3043
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3047
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3053
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3063
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3067
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3071
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3075
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3079
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3090
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3093
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3103
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3119
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3123
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3128
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3145
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3148
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3150
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3153
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3157
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3176
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3183
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3188
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3193
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3198
		{
			return unimplemented(sqllex, "set from current")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3199
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3207
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3212
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3219
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3223
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3229
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3233
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3240
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3261
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3265
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3271
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3275
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3279
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3283
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3287
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3293
		{
			sqlVAL.union.val = tree.Low
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3297
		{
			sqlVAL.union.val = tree.Normal
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3301
		{
			sqlVAL.union.val = tree.High
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3312
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3316
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3320
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3325
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3329
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3342
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3343
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3344
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3346
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3347
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3349
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3350
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3351
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3352
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3353
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3354
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3355
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3357
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3358
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3359
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3360
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3361
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3362
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3363
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3364
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3365
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3366
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3367
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3368
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3370
		{
			return helpWith(sqllex, "SHOW")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3377
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3378
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3379
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3390
		{
			sqlVAL.str = "client_encoding"
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3393
		{
			sqlVAL.str = "timezone"
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3394
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3408
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3412
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3416
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3427
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3435
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3443
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3451
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3460
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3469
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3477
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3487
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3491
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3494
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3496
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3499
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3501
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3505
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3508
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3516
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3519
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3527
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3531
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3535
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3539
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3542
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3550
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3553
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3566
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3574
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3582
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3585
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3587
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3591
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3595
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3598
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3600
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3604
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3607
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3615
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3618
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3620
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3623
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3631
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3634
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3636
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3639
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3643
		{
			sqlVAL.union.val = true
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3645
		{
			sqlVAL.union.val = true
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3647
		{
			sqlVAL.union.val = false
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3657
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3661
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3664
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3665
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3667
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3671
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3674
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3676
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3684
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3692
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3701
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3704
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3706
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3709
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3711
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3715
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3718
		{
			sqlVAL.union.val = true
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3719
		{
			sqlVAL.union.val = false
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3727
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3730
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3732
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3735
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3743
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3753
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3763
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3766
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3769
		{
			sqlVAL.union.val = true
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3770
		{
			sqlVAL.union.val = false
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3777
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3781
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3784
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3791
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3795
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3798
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3805
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3809
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3816
		{
			sqlVAL.union.val = &tree.ShowSavepointStatus{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3819
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3827
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3832
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3837
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3841
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3849
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3853
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3857
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3870
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3873
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3881
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3884
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3888
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3892
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3896
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3904
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3912
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3919
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3926
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3930
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3941
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3949
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3955
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3964
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3969
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3973
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3976
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3980
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3987
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3992
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4112
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4116
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4120
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4159
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4163
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4168
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4181
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4188
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4192
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4204
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4213
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4216
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4224
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema: sqlDollar[3].str,
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4230
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema:      sqlDollar[6].str,
				IfNotExists: true,
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4236
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4272
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4286
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4302
		{
			sqlVAL.union.val = nil
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4306
		{

			sqlVAL.union.val = nil
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4312
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4317
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4323
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4327
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4333
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4343
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4355
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4368
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4369
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4370
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4388
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4389
		{
			sqlVAL.union.val = true
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4390
		{
			sqlVAL.union.val = false
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4394
		{
			sqlVAL.union.val = true
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = true
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4396
		{
			sqlVAL.union.val = true
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4397
		{
			sqlVAL.union.val = true
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4398
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4403
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4409
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4419
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4428
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4432
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4441
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4448
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4453
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4458
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4464
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4471
		{
			sqlVAL.str = ""
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4478
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4491
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4498
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4514
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4524
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4534
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4548
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4559
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4563
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4573
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4577
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4581
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4585
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4589
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4593
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4611
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4615
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4623
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4627
		{
			sqlVAL.union.val = tree.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4634
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4638
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4642
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4652
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4656
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4660
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 800:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4667
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4678
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
				},
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4691
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4701
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4713
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4718
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4724
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4730
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4741
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:    sqlDollar[4].union.idxElems(),
					Sharded:    sqlDollar[6].union.shardedIndexDef(),
					Interleave: sqlDollar[7].union.interleave(),
				},
				PrimaryKey: true,
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4753
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4767
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4771
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4777
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4787
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4798
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4802
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4809
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4815
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4826
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4830
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4836
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4842
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4846
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4852
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4856
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4862
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4867
		{
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4868
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4869
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4870
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4871
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4872
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4889
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4893
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 836:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4899
		{
			sqlVAL.union.val = &tree.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4905
		{
			sqlVAL.union.val = (*tree.ShardedIndexDef)(nil)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4911
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4915
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4935
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4939
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4943
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4947
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4956
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4960
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4964
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4968
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4972
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4978
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4984
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4992
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4996
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5000
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5004
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5008
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 856:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5027
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5036
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5044
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5048
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5051
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5055
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5056
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5058
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5059
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5060
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5070
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5073
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5075
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5077
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5079
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5080
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5082
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5083
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5085
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5087
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5095
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5098
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5102
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[2].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5106
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: tree.DNull}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5116
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5120
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, KVOptions: sqlDollar[7].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5123
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5131
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5135
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[5].union.expr(), IfExists: true, KVOptions: sqlDollar[6].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5138
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5144
		{
			sqlVAL.union.val = true
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5148
		{

			sqlVAL.union.val = true
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5153
		{
			sqlVAL.union.val = false
		}
	case 891:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5163
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5174
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5184
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 894:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5185
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5189
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5197
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5201
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5209
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5213
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[2].union.kvOption())
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5219
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5223
		{
			sqlVAL.union.val = nil
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5229
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5233
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: tree.DNull}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5238
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5239
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 909:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5245
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5247
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5249
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5251
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5253
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 914:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5255
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5271
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Sharded:     sqlDollar[11].union.shardedIndexDef(),
				Storing:     sqlDollar[12].union.nameList(),
				Interleave:  sqlDollar[13].union.interleave(),
				PartitionBy: sqlDollar[14].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5286
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Sharded:     sqlDollar[14].union.shardedIndexDef(),
				Storing:     sqlDollar[15].union.nameList(),
				Interleave:  sqlDollar[16].union.interleave(),
				PartitionBy: sqlDollar[17].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5302
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5316
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5330
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5333
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5334
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5338
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5353
		{
			sqlVAL.union.val = false
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5359
		{
			sqlVAL.union.val = true
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5363
		{
			sqlVAL.union.val = false
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5369
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5382
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5404
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 930:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5405
		{
			sqlVAL.str = ""
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5409
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5413
		{
			sqlVAL.union.val = tree.Descending
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5417
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 934:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5423
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5429
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5435
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5443
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5449
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5457
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5463
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5471
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5475
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5480
		{
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5481
		{
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5484
		{
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5485
		{
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5493
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5496
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5506
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5515
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5518
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5526
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5529
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5533
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5534
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5535
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5551
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5554
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5556
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5559
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5569
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5572
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5574
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5577
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5581
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5586
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5587
		{
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5588
		{
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5598
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5602
		{
			sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[4].str)}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5605
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5608
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5609
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5613
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5617
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5623
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5627
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5633
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5637
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5650
		{
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5652
		{
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5656
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5661
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5665
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5669
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5675
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5681
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5687
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5691
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 994:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5701
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5711
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5721
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5725
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5729
		{
			sqlVAL.str = ""
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5735
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5739
		{
			sqlVAL.str = ""
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5745
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5749
		{
			sqlVAL.str = ""
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5755
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5759
		{
			sqlVAL.str = ""
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5764
		{
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5765
		{
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5777
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5784
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5791
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5809
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5813
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5822
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5827
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5833
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5837
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5841
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5847
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5871
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5875
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5879
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5885
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5888
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5889
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5891
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5897
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5902
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5906
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5923
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5935
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5938
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5941
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5947
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5951
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5964
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5967
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5971
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6014
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6020
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6024
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6039
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6043
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6047
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6051
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6055
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6059
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6063
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6067
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6072
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6073
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6076
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6077
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6081
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6085
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6091
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6100
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6101
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6102
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6103
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6106
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6107
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6110
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6111
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6112
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6117
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6152
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6153
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6154
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6176
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6189
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6203
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6215
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6219
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6228
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6237
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6252
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6259
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6271
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6275
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6280
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6286
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6290
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6296
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6304
		{
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6305
		{
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6309
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6313
		{
			sqlVAL.union.val = nil
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6318
		{
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6319
		{
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6323
		{
			sqlVAL.union.val = true
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6327
		{
			sqlVAL.union.val = false
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6331
		{
			sqlVAL.union.val = false
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6337
		{
			sqlVAL.union.val = true
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6343
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6348
		{
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6349
		{
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6353
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6357
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6363
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6369
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6379
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6400
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6405
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6417
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6421
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6425
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6434
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6443
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6454
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6455
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6459
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6463
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6467
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6481
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6485
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6493
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6500
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6522
		{
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6523
		{
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6526
		{
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6527
		{
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6544
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6548
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6554
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6558
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6577
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6580
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6582
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6594
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6597
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6599
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6605
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6609
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6615
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6619
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6624
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6629
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6635
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6640
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6647
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6652
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6663
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6667
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6671
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6710
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6720
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6730
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6738
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6747
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6751
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6755
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6766
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6790
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6796
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6807
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6811
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6817
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6823
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6829
		{
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6831
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6834
		{
			sqlVAL.union.val = nil
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6835
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6840
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6844
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6850
		{
			sqlVAL.union.val = true
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6854
		{
			sqlVAL.union.val = false
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6874
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6878
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6882
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6886
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6890
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6900
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6904
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6911
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6924
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6930
		{
			sqlVAL.str = tree.AstFull
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6934
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6938
		{
			sqlVAL.str = tree.AstRight
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6942
		{
			sqlVAL.str = tree.AstInner
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6948
		{
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6949
		{
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6970
		{
			sqlVAL.str = tree.AstHash
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6974
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6978
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6982
		{
			sqlVAL.str = ""
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6995
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6999
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7006
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7007
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7011
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7016
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7030
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7034
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7040
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7046
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7056
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7066
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7085
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7098
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7106
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7107
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7117
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7124
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7125
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7127
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7135
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7136
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7164
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7168
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7172
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7176
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7180
		{
			sqlVAL.union.val = types.String
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7184
		{
			sqlVAL.union.val = types.Name
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7188
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7201
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7205
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = types.INet
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = types.Oid
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7237
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7268
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7276
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7284
		{
			sqlVAL.union.val = nil
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7295
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = types.Int2
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7303
		{
			sqlVAL.union.val = types.Int2
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7307
		{
			sqlVAL.union.val = types.Int4
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7311
		{
			sqlVAL.union.val = types.Int
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7315
		{
			sqlVAL.union.val = types.Int
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = types.Int
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = types.Float4
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = types.Float4
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = types.Float
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = types.Float
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7343
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7351
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7359
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = types.Bool
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = types.Bool
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7378
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7382
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7386
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7390
		{
			sqlVAL.union.val = types.RegType
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7394
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7400
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7413
		{
			sqlVAL.union.val = types.Float
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7419
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7425
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7433
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7437
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7441
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7447
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7459
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7465
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7473
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = types.String
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = true
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7487
		{
			sqlVAL.union.val = false
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = types.Date
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7496
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7504
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7516
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7518
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7527
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7535
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7548
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7552
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = true
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7563
		{
			sqlVAL.union.val = false
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = false
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7568
		{
			sqlVAL.union.val = types.Interval
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7572
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7576
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7587
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7595
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7603
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7611
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7619
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7627
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7642
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7651
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7660
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7666
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7675
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7681
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = nil
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7697
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7705
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7746
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7750
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7754
		{

			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7767
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7772
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7776
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7780
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7788
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7792
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7796
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7808
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7812
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7816
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7820
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7824
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7884
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7888
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7892
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7904
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7908
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7920
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7924
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7928
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7932
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7936
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7940
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7944
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7948
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7952
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7956
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7960
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7964
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7968
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7972
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7976
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7980
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7984
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7988
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7992
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7996
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8000
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8004
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8008
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8011
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8025
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8029
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8033
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8041
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8057
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8073
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8077
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8099
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8111
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8115
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8119
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8131
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8135
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8139
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8143
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8147
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8151
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8155
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8159
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8163
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8167
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8171
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8175
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8179
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8191
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8195
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8199
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8233
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8277
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8281
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8289
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8293
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8298
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8316
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8320
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8324
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8333
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8340
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8344
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8348
		{
			idx, err := sqlDollar[6].union.numVal().AsInt32()
			if err != nil || idx <= 0 {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ByIndex: true, ColIndex: int(idx - 1)}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8354
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8359
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8363
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8367
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8371
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8375
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8378
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8389
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8390
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8398
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8402
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8405
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8416
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8432
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8433
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8438
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8442
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8446
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8452
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8456
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8460
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8464
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8468
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8472
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8478
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8482
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8494
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8498
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8502
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8506
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8510
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8514
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8522
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8526
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8533
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8536
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8538
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8541
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8543
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8547
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8550
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8556
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8559
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8561
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8565
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8568
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8570
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8574
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8577
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8579
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8582
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8584
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8587
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8589
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8592
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8597
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8599
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8603
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8606
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8607
		{
			return unimplemented(sqllex, "treat")
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8609
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8613
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8617
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8621
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8625
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8628
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8630
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8633
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8638
		{
			return unimplemented(sqllex, "within group")
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8639
		{
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8643
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8647
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8654
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8658
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8664
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8668
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8674
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8682
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8686
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8690
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8697
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8717
		{
			sqlVAL.str = ""
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8723
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8727
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8733
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8741
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8749
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8757
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8763
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8776
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8804
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8808
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8812
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8816
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8823
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8832
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8836
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8840
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8844
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8849
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8862
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8866
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8873
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8885
		{
			sqlVAL.union.val = tree.Any
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8889
		{
			sqlVAL.union.val = tree.Some
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8893
		{
			sqlVAL.union.val = tree.All
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8898
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8899
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8900
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8901
		{
			sqlVAL.union.val = tree.Div
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8902
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8903
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8904
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8905
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8906
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8907
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8908
		{
			sqlVAL.union.val = tree.LT
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8909
		{
			sqlVAL.union.val = tree.GT
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8910
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8911
		{
			sqlVAL.union.val = tree.LE
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8912
		{
			sqlVAL.union.val = tree.GE
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8913
		{
			sqlVAL.union.val = tree.NE
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8917
		{
			sqlVAL.union.val = tree.Like
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8918
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8919
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8920
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8943
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8947
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8953
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8957
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8961
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8972
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8976
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8982
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8986
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8993
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8999
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9003
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9009
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9013
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9019
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9023
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9029
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9033
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9039
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9043
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9066
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9070
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9074
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9080
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9087
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9091
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9108
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9112
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9116
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9120
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9124
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9130
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9136
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9142
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9146
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9150
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9156
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9168
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9175
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9179
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9185
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9191
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9195
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9202
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9208
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9212
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9219
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9225
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9234
		{
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9235
		{
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9239
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9243
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9249
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9258
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9262
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9266
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9274
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9284
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9288
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9307
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9315
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9338
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9347
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9351
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9355
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9359
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9365
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9384
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9388
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9400
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9404
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9413
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9424
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9433
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9441
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9453
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9552
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9559
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9563
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1740:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9567
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1742:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9581
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9585
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9589
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9602
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9620
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9633
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9640
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9665
		{
			sqlVAL.str = ""
		}
	case 1760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9671
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9675
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
