// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:554
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8241

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	423, 57,
	-2, 891,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	167, 728,
	-2, 0,
	-1, 60,
	101, 891,
	173, 891,
	371, 891,
	372, 891,
	-2, 0,
	-1, 74,
	113, 865,
	127, 865,
	181, 865,
	207, 865,
	236, 865,
	244, 865,
	368, 865,
	-2, 854,
	-1, 110,
	197, 545,
	358, 545,
	-2, 0,
	-1, 115,
	4, 893,
	20, 893,
	21, 893,
	22, 893,
	23, 893,
	25, 893,
	30, 893,
	35, 893,
	36, 893,
	37, 893,
	38, 893,
	39, 893,
	40, 893,
	41, 893,
	42, 893,
	43, 893,
	44, 893,
	46, 893,
	47, 893,
	48, 893,
	49, 893,
	50, 893,
	51, 893,
	54, 893,
	55, 893,
	56, 893,
	58, 893,
	59, 893,
	63, 893,
	64, 893,
	65, 893,
	66, 893,
	67, 893,
	69, 893,
	70, 893,
	71, 893,
	72, 893,
	74, 893,
	76, 893,
	77, 893,
	80, 893,
	81, 893,
	82, 893,
	90, 893,
	91, 893,
	92, 893,
	93, 893,
	94, 893,
	95, 893,
	96, 893,
	97, 893,
	99, 893,
	101, 893,
	103, 893,
	106, 893,
	107, 893,
	109, 893,
	110, 893,
	114, 893,
	115, 893,
	116, 893,
	117, 893,
	118, 893,
	119, 893,
	120, 893,
	121, 893,
	122, 893,
	123, 893,
	124, 893,
	132, 893,
	133, 893,
	134, 893,
	135, 893,
	136, 893,
	138, 893,
	140, 893,
	144, 893,
	146, 893,
	147, 893,
	149, 893,
	151, 893,
	152, 893,
	153, 893,
	154, 893,
	155, 893,
	156, 893,
	157, 893,
	158, 893,
	159, 893,
	162, 893,
	163, 893,
	168, 893,
	169, 893,
	170, 893,
	173, 893,
	174, 893,
	175, 893,
	176, 893,
	177, 893,
	178, 893,
	179, 893,
	180, 893,
	182, 893,
	184, 893,
	187, 893,
	188, 893,
	189, 893,
	191, 893,
	192, 893,
	195, 893,
	196, 893,
	197, 893,
	199, 893,
	200, 893,
	202, 893,
	204, 893,
	205, 893,
	208, 893,
	209, 893,
	212, 893,
	214, 893,
	217, 893,
	218, 893,
	219, 893,
	220, 893,
	221, 893,
	223, 893,
	224, 893,
	225, 893,
	226, 893,
	231, 893,
	232, 893,
	233, 893,
	234, 893,
	235, 893,
	237, 893,
	238, 893,
	240, 893,
	241, 893,
	242, 893,
	245, 893,
	246, 893,
	248, 893,
	250, 893,
	251, 893,
	252, 893,
	253, 893,
	254, 893,
	255, 893,
	256, 893,
	257, 893,
	259, 893,
	260, 893,
	261, 893,
	262, 893,
	263, 893,
	265, 893,
	266, 893,
	267, 893,
	268, 893,
	269, 893,
	270, 893,
	271, 893,
	272, 893,
	274, 893,
	275, 893,
	276, 893,
	277, 893,
	278, 893,
	280, 893,
	281, 893,
	282, 893,
	283, 893,
	284, 893,
	285, 893,
	286, 893,
	288, 893,
	290, 893,
	291, 893,
	292, 893,
	293, 893,
	294, 893,
	295, 893,
	297, 893,
	298, 893,
	299, 893,
	300, 893,
	301, 893,
	302, 893,
	303, 893,
	305, 893,
	306, 893,
	307, 893,
	308, 893,
	309, 893,
	310, 893,
	311, 893,
	312, 893,
	313, 893,
	315, 893,
	316, 893,
	317, 893,
	318, 893,
	320, 893,
	321, 893,
	322, 893,
	323, 893,
	325, 893,
	326, 893,
	327, 893,
	328, 893,
	329, 893,
	330, 893,
	331, 893,
	332, 893,
	333, 893,
	334, 893,
	335, 893,
	336, 893,
	338, 893,
	339, 893,
	341, 893,
	342, 893,
	343, 893,
	344, 893,
	345, 893,
	346, 893,
	347, 893,
	348, 893,
	349, 893,
	350, 893,
	352, 893,
	353, 893,
	354, 893,
	355, 893,
	358, 893,
	359, 893,
	360, 893,
	361, 893,
	363, 893,
	364, 893,
	366, 893,
	367, 893,
	370, 893,
	371, 893,
	372, 893,
	373, 893,
	375, 893,
	377, 893,
	378, 893,
	379, 893,
	380, 893,
	381, 893,
	382, 893,
	385, 893,
	386, 893,
	391, 893,
	392, 893,
	393, 893,
	394, 893,
	395, 893,
	396, 893,
	-2, 0,
	-1, 136,
	113, 864,
	127, 864,
	181, 864,
	207, 864,
	236, 864,
	244, 864,
	368, 864,
	-2, 857,
	-1, 141,
	1, 787,
	187, 787,
	265, 787,
	269, 787,
	422, 787,
	423, 787,
	-2, 0,
	-1, 143,
	1, 787,
	422, 787,
	423, 787,
	-2, 0,
	-1, 144,
	1, 787,
	422, 787,
	423, 787,
	-2, 0,
	-1, 145,
	1, 791,
	422, 791,
	423, 791,
	-2, 0,
	-1, 171,
	4, 900,
	5, 900,
	6, 900,
	7, 900,
	8, 900,
	9, 900,
	20, 900,
	21, 900,
	22, 900,
	23, 900,
	25, 900,
	30, 900,
	31, 900,
	35, 900,
	36, 900,
	37, 900,
	38, 900,
	39, 900,
	40, 900,
	41, 900,
	42, 900,
	43, 900,
	44, 900,
	46, 900,
	47, 900,
	48, 900,
	49, 900,
	50, 900,
	51, 900,
	52, 900,
	53, 900,
	54, 900,
	55, 900,
	56, 900,
	58, 900,
	59, 900,
	61, 900,
	63, 900,
	64, 900,
	65, 900,
	66, 900,
	67, 900,
	69, 900,
	70, 900,
	71, 900,
	72, 900,
	74, 900,
	76, 900,
	77, 900,
	79, 900,
	80, 900,
	81, 900,
	82, 900,
	83, 900,
	84, 900,
	85, 900,
	86, 900,
	87, 900,
	88, 900,
	89, 900,
	90, 900,
	91, 900,
	92, 900,
	93, 900,
	94, 900,
	95, 900,
	96, 900,
	97, 900,
	98, 900,
	99, 900,
	101, 900,
	103, 900,
	106, 900,
	107, 900,
	109, 900,
	110, 900,
	114, 900,
	115, 900,
	116, 900,
	117, 900,
	118, 900,
	119, 900,
	120, 900,
	121, 900,
	122, 900,
	123, 900,
	124, 900,
	125, 900,
	126, 900,
	132, 900,
	133, 900,
	134, 900,
	135, 900,
	136, 900,
	138, 900,
	140, 900,
	143, 900,
	144, 900,
	146, 900,
	147, 900,
	149, 900,
	151, 900,
	152, 900,
	153, 900,
	154, 900,
	155, 900,
	156, 900,
	157, 900,
	158, 900,
	159, 900,
	160, 900,
	162, 900,
	163, 900,
	168, 900,
	169, 900,
	170, 900,
	172, 900,
	173, 900,
	174, 900,
	175, 900,
	176, 900,
	177, 900,
	178, 900,
	179, 900,
	180, 900,
	182, 900,
	184, 900,
	185, 900,
	186, 900,
	187, 900,
	188, 900,
	189, 900,
	190, 900,
	191, 900,
	192, 900,
	195, 900,
	196, 900,
	197, 900,
	199, 900,
	200, 900,
	202, 900,
	203, 900,
	204, 900,
	205, 900,
	206, 900,
	208, 900,
	209, 900,
	212, 900,
	214, 900,
	215, 900,
	216, 900,
	217, 900,
	218, 900,
	219, 900,
	220, 900,
	221, 900,
	222, 900,
	223, 900,
	224, 900,
	225, 900,
	226, 900,
	227, 900,
	229, 900,
	230, 900,
	231, 900,
	232, 900,
	233, 900,
	234, 900,
	235, 900,
	237, 900,
	238, 900,
	241, 900,
	242, 900,
	245, 900,
	246, 900,
	247, 900,
	248, 900,
	249, 900,
	250, 900,
	251, 900,
	252, 900,
	253, 900,
	254, 900,
	255, 900,
	256, 900,
	257, 900,
	259, 900,
	260, 900,
	261, 900,
	262, 900,
	263, 900,
	265, 900,
	266, 900,
	267, 900,
	268, 900,
	269, 900,
	270, 900,
	271, 900,
	272, 900,
	274, 900,
	275, 900,
	276, 900,
	277, 900,
	278, 900,
	280, 900,
	281, 900,
	282, 900,
	283, 900,
	284, 900,
	285, 900,
	286, 900,
	288, 900,
	289, 900,
	290, 900,
	291, 900,
	292, 900,
	293, 900,
	294, 900,
	295, 900,
	297, 900,
	298, 900,
	299, 900,
	300, 900,
	301, 900,
	302, 900,
	303, 900,
	305, 900,
	306, 900,
	307, 900,
	308, 900,
	309, 900,
	310, 900,
	311, 900,
	312, 900,
	313, 900,
	314, 900,
	315, 900,
	316, 900,
	317, 900,
	318, 900,
	319, 900,
	320, 900,
	321, 900,
	322, 900,
	323, 900,
	325, 900,
	326, 900,
	327, 900,
	328, 900,
	329, 900,
	330, 900,
	331, 900,
	332, 900,
	333, 900,
	334, 900,
	335, 900,
	336, 900,
	338, 900,
	339, 900,
	341, 900,
	342, 900,
	343, 900,
	344, 900,
	345, 900,
	346, 900,
	347, 900,
	348, 900,
	349, 900,
	350, 900,
	352, 900,
	353, 900,
	354, 900,
	355, 900,
	358, 900,
	359, 900,
	360, 900,
	361, 900,
	362, 900,
	363, 900,
	364, 900,
	366, 900,
	367, 900,
	370, 900,
	371, 900,
	372, 900,
	373, 900,
	374, 900,
	375, 900,
	377, 900,
	378, 900,
	379, 900,
	380, 900,
	381, 900,
	382, 900,
	385, 900,
	386, 900,
	391, 900,
	392, 900,
	393, 900,
	394, 900,
	395, 900,
	396, 900,
	397, 900,
	405, 900,
	410, 900,
	411, 900,
	412, 900,
	419, 900,
	425, 900,
	-2, 0,
	-1, 174,
	1, 57,
	423, 57,
	-2, 891,
	-1, 207,
	421, 1469,
	424, 1469,
	-2, 588,
	-1, 208,
	421, 1471,
	424, 1471,
	-2, 589,
	-1, 209,
	421, 1470,
	424, 1470,
	-2, 590,
	-1, 210,
	424, 1411,
	-2, 591,
	-1, 615,
	142, 1584,
	356, 1584,
	402, 1584,
	421, 1584,
	-2, 0,
	-1, 616,
	142, 1507,
	356, 1507,
	402, 1507,
	421, 1507,
	-2, 0,
	-1, 618,
	142, 1657,
	356, 1657,
	402, 1657,
	421, 1657,
	-2, 0,
	-1, 620,
	142, 1686,
	356, 1686,
	402, 1686,
	421, 1686,
	-2, 0,
	-1, 627,
	142, 1589,
	356, 1589,
	402, 1589,
	421, 1589,
	-2, 419,
	-1, 662,
	1, 517,
	418, 517,
	420, 517,
	422, 517,
	423, 517,
	-2, 0,
	-1, 663,
	1, 587,
	139, 587,
	418, 587,
	420, 587,
	422, 587,
	423, 587,
	-2, 0,
	-1, 669,
	1, 531,
	418, 531,
	420, 531,
	422, 531,
	423, 531,
	-2, 0,
	-1, 671,
	1, 535,
	418, 535,
	420, 535,
	422, 535,
	423, 535,
	-2, 0,
	-1, 674,
	1, 546,
	418, 546,
	420, 546,
	422, 546,
	423, 546,
	-2, 0,
	-1, 675,
	1, 552,
	418, 552,
	420, 552,
	422, 552,
	423, 552,
	-2, 0,
	-1, 676,
	1, 555,
	418, 555,
	420, 555,
	422, 555,
	423, 555,
	-2, 0,
	-1, 680,
	1, 569,
	418, 569,
	420, 569,
	422, 569,
	423, 569,
	-2, 0,
	-1, 681,
	1, 571,
	418, 571,
	420, 571,
	422, 571,
	423, 571,
	-2, 0,
	-1, 709,
	127, 904,
	207, 904,
	236, 904,
	-2, 860,
	-1, 717,
	127, 903,
	207, 903,
	236, 903,
	-2, 858,
	-1, 744,
	419, 1761,
	-2, 1183,
	-1, 745,
	419, 1762,
	-2, 1184,
	-1, 774,
	419, 1463,
	-2, 1454,
	-1, 775,
	5, 1039,
	419, 1478,
	-2, 1469,
	-1, 776,
	419, 1479,
	-2, 1470,
	-1, 783,
	5, 1023,
	-2, 1499,
	-1, 784,
	5, 1024,
	-2, 1503,
	-1, 785,
	5, 1025,
	-2, 1502,
	-1, 786,
	5, 1026,
	-2, 1682,
	-1, 787,
	5, 1027,
	-2, 1591,
	-1, 788,
	5, 1028,
	-2, 1650,
	-1, 789,
	5, 1029,
	-2, 1652,
	-1, 790,
	5, 1030,
	-2, 1653,
	-1, 791,
	5, 1031,
	-2, 1654,
	-1, 792,
	5, 1032,
	-2, 1662,
	-1, 793,
	5, 1033,
	-2, 1694,
	-1, 794,
	5, 1034,
	-2, 1561,
	-1, 795,
	5, 1035,
	-2, 1498,
	-1, 796,
	5, 1036,
	-2, 1599,
	-1, 797,
	5, 1037,
	-2, 1600,
	-1, 798,
	5, 1038,
	-2, 1565,
	-1, 799,
	5, 1087,
	419, 1087,
	-2, 1728,
	-1, 819,
	5, 1060,
	-2, 1500,
	-1, 820,
	5, 1078,
	-2, 1527,
	-1, 822,
	5, 1052,
	-2, 1548,
	-1, 823,
	5, 1053,
	-2, 1549,
	-1, 824,
	5, 1044,
	-2, 1564,
	-1, 825,
	5, 1045,
	-2, 1566,
	-1, 826,
	5, 1046,
	-2, 1567,
	-1, 827,
	5, 1047,
	-2, 1568,
	-1, 828,
	5, 1011,
	-2, 1574,
	-1, 829,
	5, 1012,
	-2, 1575,
	-1, 830,
	5, 1075,
	-2, 1672,
	-1, 831,
	5, 1085,
	-2, 1684,
	-1, 832,
	5, 1050,
	-2, 1708,
	-1, 833,
	5, 1077,
	-2, 1709,
	-1, 834,
	5, 1059,
	-2, 1710,
	-1, 835,
	5, 1077,
	-2, 1711,
	-1, 836,
	5, 1077,
	-2, 1712,
	-1, 837,
	5, 1042,
	-2, 1715,
	-1, 838,
	5, 1042,
	-2, 1716,
	-1, 841,
	5, 1067,
	-2, 1720,
	-1, 843,
	5, 1043,
	-2, 1726,
	-1, 844,
	5, 1048,
	-2, 1727,
	-1, 846,
	5, 1042,
	-2, 1732,
	-1, 849,
	5, 1051,
	-2, 1737,
	-1, 850,
	5, 1049,
	-2, 1739,
	-1, 852,
	5, 1079,
	-2, 1741,
	-1, 853,
	5, 1081,
	-2, 1742,
	-1, 854,
	5, 1083,
	-2, 1743,
	-1, 857,
	5, 1074,
	-2, 1747,
	-1, 927,
	419, 1478,
	-2, 1469,
	-1, 944,
	280, 1451,
	412, 1451,
	-2, 1450,
	-1, 1093,
	255, 889,
	-2, 714,
	-1, 1102,
	239, 1473,
	-2, 0,
	-1, 1145,
	1, 286,
	418, 286,
	420, 286,
	422, 286,
	423, 286,
	-2, 863,
	-1, 1148,
	4, 1746,
	10, 1746,
	11, 1746,
	13, 1746,
	14, 1746,
	15, 1746,
	16, 1746,
	17, 1746,
	18, 1746,
	20, 1746,
	21, 1746,
	22, 1746,
	23, 1746,
	25, 1746,
	28, 1746,
	30, 1746,
	32, 1746,
	35, 1746,
	36, 1746,
	37, 1746,
	38, 1746,
	39, 1746,
	40, 1746,
	41, 1746,
	42, 1746,
	43, 1746,
	44, 1746,
	46, 1746,
	47, 1746,
	48, 1746,
	49, 1746,
	50, 1746,
	51, 1746,
	54, 1746,
	55, 1746,
	56, 1746,
	58, 1746,
	59, 1746,
	60, 1746,
	63, 1746,
	64, 1746,
	65, 1746,
	66, 1746,
	67, 1746,
	68, 1746,
	69, 1746,
	70, 1746,
	71, 1746,
	72, 1746,
	74, 1746,
	75, 1746,
	76, 1746,
	77, 1746,
	79, 1746,
	80, 1746,
	81, 1746,
	82, 1746,
	90, 1746,
	91, 1746,
	92, 1746,
	93, 1746,
	94, 1746,
	95, 1746,
	96, 1746,
	97, 1746,
	99, 1746,
	101, 1746,
	103, 1746,
	106, 1746,
	107, 1746,
	109, 1746,
	110, 1746,
	114, 1746,
	115, 1746,
	116, 1746,
	117, 1746,
	118, 1746,
	119, 1746,
	120, 1746,
	121, 1746,
	122, 1746,
	123, 1746,
	124, 1746,
	128, 1746,
	129, 1746,
	130, 1746,
	131, 1746,
	132, 1746,
	133, 1746,
	134, 1746,
	135, 1746,
	136, 1746,
	137, 1746,
	138, 1746,
	140, 1746,
	143, 1746,
	144, 1746,
	146, 1746,
	147, 1746,
	149, 1746,
	151, 1746,
	152, 1746,
	153, 1746,
	154, 1746,
	155, 1746,
	156, 1746,
	157, 1746,
	158, 1746,
	159, 1746,
	160, 1746,
	161, 1746,
	162, 1746,
	163, 1746,
	164, 1746,
	165, 1746,
	166, 1746,
	168, 1746,
	169, 1746,
	170, 1746,
	172, 1746,
	173, 1746,
	174, 1746,
	175, 1746,
	176, 1746,
	177, 1746,
	178, 1746,
	179, 1746,
	180, 1746,
	182, 1746,
	184, 1746,
	185, 1746,
	186, 1746,
	187, 1746,
	188, 1746,
	189, 1746,
	190, 1746,
	191, 1746,
	192, 1746,
	193, 1746,
	194, 1746,
	195, 1746,
	196, 1746,
	197, 1746,
	199, 1746,
	200, 1746,
	202, 1746,
	203, 1746,
	204, 1746,
	205, 1746,
	206, 1746,
	208, 1746,
	209, 1746,
	212, 1746,
	213, 1746,
	214, 1746,
	217, 1746,
	218, 1746,
	219, 1746,
	220, 1746,
	221, 1746,
	222, 1746,
	223, 1746,
	224, 1746,
	225, 1746,
	226, 1746,
	229, 1746,
	231, 1746,
	232, 1746,
	233, 1746,
	234, 1746,
	235, 1746,
	237, 1746,
	238, 1746,
	241, 1746,
	242, 1746,
	243, 1746,
	245, 1746,
	246, 1746,
	248, 1746,
	250, 1746,
	251, 1746,
	252, 1746,
	253, 1746,
	254, 1746,
	255, 1746,
	256, 1746,
	257, 1746,
	259, 1746,
	260, 1746,
	261, 1746,
	262, 1746,
	263, 1746,
	265, 1746,
	266, 1746,
	267, 1746,
	268, 1746,
	269, 1746,
	270, 1746,
	271, 1746,
	272, 1746,
	274, 1746,
	275, 1746,
	276, 1746,
	277, 1746,
	278, 1746,
	279, 1746,
	280, 1746,
	281, 1746,
	282, 1746,
	283, 1746,
	284, 1746,
	285, 1746,
	286, 1746,
	288, 1746,
	289, 1746,
	290, 1746,
	291, 1746,
	292, 1746,
	293, 1746,
	294, 1746,
	295, 1746,
	296, 1746,
	297, 1746,
	298, 1746,
	299, 1746,
	300, 1746,
	301, 1746,
	302, 1746,
	303, 1746,
	305, 1746,
	306, 1746,
	307, 1746,
	308, 1746,
	309, 1746,
	310, 1746,
	311, 1746,
	312, 1746,
	313, 1746,
	315, 1746,
	316, 1746,
	317, 1746,
	318, 1746,
	319, 1746,
	320, 1746,
	321, 1746,
	322, 1746,
	323, 1746,
	325, 1746,
	326, 1746,
	327, 1746,
	328, 1746,
	329, 1746,
	330, 1746,
	331, 1746,
	332, 1746,
	333, 1746,
	334, 1746,
	335, 1746,
	336, 1746,
	338, 1746,
	339, 1746,
	341, 1746,
	342, 1746,
	343, 1746,
	344, 1746,
	345, 1746,
	346, 1746,
	347, 1746,
	348, 1746,
	349, 1746,
	350, 1746,
	352, 1746,
	353, 1746,
	354, 1746,
	355, 1746,
	358, 1746,
	359, 1746,
	360, 1746,
	361, 1746,
	363, 1746,
	364, 1746,
	366, 1746,
	367, 1746,
	370, 1746,
	371, 1746,
	372, 1746,
	373, 1746,
	375, 1746,
	377, 1746,
	378, 1746,
	379, 1746,
	380, 1746,
	381, 1746,
	382, 1746,
	385, 1746,
	386, 1746,
	391, 1746,
	392, 1746,
	393, 1746,
	394, 1746,
	395, 1746,
	396, 1746,
	397, 1746,
	398, 1746,
	400, 1746,
	401, 1746,
	402, 1746,
	403, 1746,
	404, 1746,
	405, 1746,
	407, 1746,
	408, 1746,
	409, 1746,
	410, 1746,
	411, 1746,
	412, 1746,
	413, 1746,
	414, 1746,
	415, 1746,
	417, 1746,
	420, 1746,
	421, 1746,
	424, 1746,
	425, 1746,
	-2, 0,
	-1, 1166,
	142, 1657,
	356, 1657,
	402, 1657,
	421, 1657,
	-2, 0,
	-1, 1195,
	142, 1686,
	356, 1686,
	402, 1686,
	421, 1686,
	-2, 0,
	-1, 1196,
	187, 799,
	265, 799,
	269, 799,
	-2, 406,
	-1, 1273,
	127, 903,
	207, 903,
	236, 903,
	-2, 861,
	-1, 1357,
	113, 865,
	127, 865,
	181, 865,
	207, 865,
	236, 865,
	244, 865,
	368, 865,
	-2, 1226,
	-1, 1407,
	420, 1346,
	-2, 0,
	-1, 1415,
	187, 799,
	265, 799,
	269, 799,
	-2, 794,
	-1, 1444,
	420, 1346,
	-2, 0,
	-1, 1452,
	113, 865,
	127, 865,
	181, 865,
	207, 865,
	236, 865,
	244, 865,
	368, 865,
	-2, 970,
	-1, 1653,
	187, 799,
	265, 799,
	269, 799,
	-2, 408,
	-1, 1761,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	400, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1122,
	-1, 1762,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	400, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1123,
	-1, 1763,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	400, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1124,
	-1, 1764,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	400, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1125,
	-1, 1765,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	400, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1126,
	-1, 1766,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	400, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1127,
	-1, 1767,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	400, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1128,
	-1, 1768,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	400, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1129,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	400, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1141,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	400, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1142,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	400, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1143,
	-1, 1785,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1148,
	-1, 1791,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1150,
	-1, 1793,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1154,
	-1, 1794,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1155,
	-1, 1795,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1156,
	-1, 1796,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1157,
	-1, 1877,
	5, 1039,
	142, 1357,
	419, 1478,
	-2, 1469,
	-1, 1878,
	142, 1358,
	-2, 1704,
	-1, 1879,
	142, 1359,
	-2, 1588,
	-1, 1880,
	142, 1360,
	-2, 1528,
	-1, 1881,
	142, 1361,
	-2, 1556,
	-1, 1882,
	142, 1362,
	-2, 1587,
	-1, 1883,
	142, 1363,
	-2, 1649,
	-1, 1951,
	420, 1346,
	-2, 0,
	-1, 1961,
	1, 971,
	79, 971,
	113, 971,
	127, 971,
	143, 971,
	148, 971,
	150, 971,
	172, 971,
	181, 971,
	190, 971,
	203, 971,
	207, 971,
	222, 971,
	236, 971,
	239, 971,
	244, 971,
	287, 971,
	289, 971,
	368, 971,
	376, 971,
	388, 971,
	389, 971,
	399, 971,
	418, 971,
	420, 971,
	422, 971,
	423, 971,
	424, 971,
	-2, 970,
	-1, 1963,
	419, 1455,
	-2, 1467,
	-1, 2045,
	420, 1416,
	424, 1416,
	-2, 1443,
	-1, 2167,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1149,
	-1, 2168,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1151,
	-1, 2173,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1152,
	-1, 2402,
	255, 889,
	-2, 714,
	-1, 2467,
	187, 799,
	265, 799,
	269, 799,
	-2, 405,
	-1, 2482,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1153,
	-1, 2487,
	185, 0,
	186, 0,
	229, 0,
	-2, 1171,
	-1, 2548,
	13, 0,
	14, 0,
	15, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1201,
	-1, 2549,
	13, 0,
	14, 0,
	15, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1202,
	-1, 2550,
	13, 0,
	14, 0,
	15, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1203,
	-1, 2554,
	13, 0,
	14, 0,
	15, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1207,
	-1, 2555,
	13, 0,
	14, 0,
	15, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1208,
	-1, 2556,
	13, 0,
	14, 0,
	15, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1209,
	-1, 2595,
	419, 1456,
	-2, 1468,
	-1, 2709,
	185, 0,
	186, 0,
	229, 0,
	-2, 1172,
	-1, 2712,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1175,
	-1, 2713,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1177,
	-1, 2857,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1176,
	-1, 2858,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1178,
	-1, 2868,
	185, 0,
	-2, 1210,
	-1, 2957,
	185, 0,
	-2, 1211,
	-1, 3055,
	38, 0,
	160, 0,
	206, 0,
	319, 0,
	397, 0,
	405, 0,
	-2, 1707,
}

const sqlPrivate = 57344

const sqlLast = 59551

var sqlAct = [...]int{

	776, 2644, 1822, 2810, 3063, 3054, 2896, 3117, 2071, 3030,
	3017, 3031, 3033, 3064, 2885, 3065, 2518, 2079, 773, 3053,
	2961, 2099, 2825, 948, 1748, 2662, 2848, 2657, 2780, 1077,
	2161, 752, 2765, 2203, 1051, 2201, 1583, 2417, 1135, 718,
	2604, 209, 1808, 768, 1276, 2667, 493, 2409, 2441, 2605,
	2439, 2872, 859, 493, 1451, 766, 2422, 2411, 1955, 2268,
	493, 2047, 2043, 493, 1099, 488, 493, 209, 2310, 493,
	493, 2068, 1442, 2286, 1423, 1131, 493, 1520, 1167, 2080,
	772, 1534, 1535, 1138, 493, 2743, 963, 1531, 1543, 2028,
	1975, 2297, 2571, 941, 2046, 1956, 2962, 2327, 1540, 1365,
	726, 130, 1481, 542, 2157, 1734, 1678, 73, 2421, 2267,
	1820, 957, 563, 28, 1966, 1455, 1739, 1415, 1503, 2385,
	1460, 1362, 1497, 539, 759, 1945, 1424, 1830, 1532, 1958,
	1462, 1914, 1848, 1805, 2003, 2029, 1198, 577, 1393, 1842,
	1395, 2044, 1118, 1128, 950, 1146, 912, 1821, 2811, 2073,
	917, 2050, 2606, 1433, 1584, 894, 605, 1937, 1277, 774,
	210, 130, 211, 1352, 1873, 625, 493, 493, 1275, 1922,
	1677, 717, 136, 1550, 767, 580, 619, 1473, 1115, 2002,
	1055, 205, 892, 1414, 490, 654, 1281, 2587, 489, 536,
	2588, 137, 2188, 3144, 1558, 590, 2072, 1931, 493, 493,
	493, 953, 493, 493, 966, 966, 598, 1558, 2100, 1558,
	722, 3138, 3137, 493, 493, 1931, 1931, 2030, 3114, 3111,
	3089, 1443, 2779, 1512, 2779, 473, 3083, 1292, 1293, 476,
	1931, 3082, 2428, 3079, 3076, 1931, 3073, 3080, 3077, 3051,
	1512, 3050, 1570, 1512, 722, 1512, 723, 732, 592, 3049,
	3048, 473, 1295, 1570, 1570, 476, 3012, 2999, 2992, 2990,
	2110, 1512, 2779, 2779, 2988, 944, 2959, 2942, 2779, 2932,
	2110, 2683, 2927, 2779, 2030, 130, 1512, 1294, 960, 2925,
	2480, 2915, 2914, 2779, 946, 1512, 1512, 28, 2907, 909,
	2906, 1058, 1512, 2878, 2779, 895, 895, 1512, 2859, 2574,
	2805, 2801, 2110, 710, 1931, 1931, 2778, 1506, 2711, 2681,
	2779, 742, 2110, 2674, 2673, 2583, 2577, 2496, 2674, 2584,
	1931, 1512, 709, 2491, 2102, 727, 2447, 1931, 2457, 2429,
	2390, 2283, 2235, 921, 2398, 1931, 1931, 2234, 2228, 2227,
	1170, 1931, 2229, 1931, 934, 938, 943, 2194, 898, 896,
	899, 2128, 1556, 2195, 1300, 1931, 2109, 2096, 1512, 2039,
	2110, 1931, 1930, 1512, 1931, 3013, 1931, 818, 1292, 1293,
	1924, 1181, 1574, 1057, 2945, 1056, 1575, 1570, 1512, 2574,
	1923, 1322, 1323, 1324, 1656, 1292, 1293, 2683, 2018, 570,
	1931, 1964, 765, 1295, 2390, 2160, 2139, 473, 1511, 1419,
	40, 476, 2240, 2241, 1825, 2258, 2259, 2260, 1171, 1948,
	1295, 1054, 174, 171, 44, 2430, 1675, 1165, 1294, 1164,
	2708, 1163, 2758, 171, 2202, 1162, 1314, 1161, 1559, 1160,
	1315, 1159, 2240, 2241, 2431, 1294, 1158, 1157, 1156, 1155,
	1154, 1559, 569, 1559, 1153, 1152, 1151, 1150, 1149, 173,
	900, 897, 716, 715, 714, 713, 712, 708, 707, 173,
	2255, 706, 705, 704, 703, 702, 701, 700, 699, 2240,
	2241, 571, 2258, 2259, 2260, 698, 694, 693, 692, 652,
	59, 573, 651, 650, 649, 60, 1317, 1318, 1319, 1320,
	172, 648, 647, 646, 645, 1300, 644, 643, 642, 641,
	172, 640, 493, 493, 639, 493, 953, 953, 493, 165,
	638, 493, 1300, 1316, 493, 637, 636, 166, 63, 635,
	493, 634, 1322, 1323, 1324, 633, 632, 2255, 138, 2246,
	493, 493, 493, 493, 493, 953, 953, 631, 138, 630,
	629, 915, 953, 614, 1292, 1293, 613, 1325, 1326, 1327,
	1335, 1336, 1337, 612, 611, 610, 609, 527, 526, 2246,
	499, 498, 1328, 497, 479, 1954, 913, 1566, 478, 1295,
	1092, 1315, 1341, 493, 1139, 477, 195, 2261, 1363, 194,
	1557, 193, 1718, 192, 191, 190, 493, 189, 1845, 1093,
	1096, 188, 187, 186, 1294, 1063, 2246, 1068, 1089, 1074,
	185, 184, 1314, 183, 182, 2256, 2240, 2241, 493, 1311,
	1171, 2428, 181, 964, 1052, 180, 1512, 179, 178, 493,
	64, 177, 1104, 176, 1305, 1303, 1304, 1296, 1297, 1298,
	1299, 1301, 1302, 175, 2716, 2256, 2675, 1321, 2833, 2592,
	2076, 2323, 2200, 2190, 2261, 1132, 1846, 139, 66, 723,
	67, 2149, 1923, 1171, 1316, 1076, 2040, 2033, 1450, 953,
	1070, 1681, 1317, 1318, 1319, 1320, 1117, 1459, 171, 1863,
	1369, 1300, 2256, 1122, 1125, 1212, 2473, 1079, 1861, 572,
	1288, 1859, 110, 1857, 1855, 1060, 1147, 3070, 2257, 3052,
	2240, 2241, 3035, 3024, 1332, 1342, 493, 2952, 1322, 1323,
	1324, 1174, 2948, 2928, 173, 2846, 2742, 2741, 1179, 2735,
	1847, 1844, 2946, 2895, 2728, 2727, 2726, 2722, 2257, 1338,
	1339, 2721, 2240, 2241, 2720, 2719, 2694, 1309, 1310, 2692,
	1206, 2591, 2568, 2246, 1210, 2567, 2566, 2504, 1196, 2389,
	1330, 2322, 1220, 1273, 2393, 172, 2313, 1315, 2279, 1274,
	2266, 2239, 2236, 1360, 165, 2257, 2240, 2241, 2233, 2232,
	2230, 2208, 166, 1340, 2207, 1305, 1303, 1304, 1296, 1297,
	1298, 1299, 1301, 1302, 2189, 1961, 1288, 1329, 1816, 908,
	1373, 1287, 1366, 138, 1355, 1296, 1297, 1298, 1299, 1301,
	1302, 1580, 2252, 2253, 2254, 1193, 1849, 3142, 3125, 2251,
	2249, 2250, 2242, 2243, 2244, 2245, 2247, 2248, 3124, 2256,
	1075, 1517, 1078, 1321, 2255, 1069, 2520, 2246, 2832, 1676,
	2004, 3043, 3038, 1515, 2994, 2985, 2984, 2106, 2156, 2980,
	1316, 2250, 2242, 2243, 2244, 2245, 2247, 2248, 40, 2979,
	2973, 1213, 1272, 2970, 2944, 2943, 171, 1810, 2891, 2246,
	2870, 2820, 44, 1333, 2815, 2813, 2800, 2784, 723, 2252,
	2253, 2254, 2740, 2684, 2660, 2651, 2251, 2249, 2250, 2242,
	2243, 2244, 2245, 2247, 2248, 2650, 2648, 2625, 2451, 2624,
	2107, 2614, 173, 2246, 2613, 2579, 2486, 1064, 1843, 493,
	2453, 2374, 2257, 2256, 493, 2358, 2337, 2336, 2282, 710,
	2217, 2216, 2213, 1817, 1356, 2182, 725, 1284, 1285, 2108,
	1430, 1396, 2115, 1401, 1289, 2117, 1951, 1942, 709, 573,
	1929, 493, 1853, 172, 1526, 1421, 1381, 1380, 1379, 1378,
	1377, 1331, 165, 1444, 1306, 1307, 1313, 1312, 1308, 1334,
	166, 1305, 1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302,
	1422, 1413, 1412, 2964, 2731, 1407, 63, 171, 2730, 2256,
	1406, 2075, 171, 1292, 1293, 1405, 1403, 1402, 1399, 1398,
	1449, 1389, 1391, 2240, 2241, 1394, 2257, 1427, 1428, 1397,
	1388, 1387, 1386, 1385, 1384, 1383, 1382, 1404, 1295, 1370,
	2845, 2303, 1355, 173, 1292, 1293, 2337, 1192, 173, 1176,
	1143, 2714, 2691, 2251, 2249, 2250, 2242, 2243, 2244, 2245,
	2247, 2248, 130, 1294, 2112, 2586, 2582, 2193, 1943, 1295,
	1366, 2449, 1353, 895, 2240, 2241, 723, 1675, 1456, 1675,
	2412, 2838, 2686, 1440, 172, 1441, 1675, 2685, 1474, 172,
	2589, 1209, 2257, 165, 1294, 1418, 2030, 1450, 165, 1662,
	1187, 166, 2127, 1845, 953, 493, 166, 1270, 64, 2921,
	1410, 966, 1359, 1416, 2623, 1408, 1411, 2378, 2006, 1453,
	1480, 1409, 138, 2373, 921, 1375, 1420, 138, 921, 493,
	966, 493, 493, 1468, 2100, 139, 66, 1862, 67, 209,
	2242, 2243, 2244, 2245, 2247, 2248, 1860, 2949, 2126, 1858,
	2246, 1856, 1854, 493, 493, 1536, 171, 2947, 2459, 1504,
	493, 1846, 493, 1527, 493, 2369, 1384, 572, 493, 2357,
	110, 1300, 2242, 2243, 2244, 2245, 2247, 2248, 1384, 1539,
	2894, 2274, 1581, 2273, 2272, 2271, 2166, 1509, 1499, 1649,
	1292, 1293, 173, 1205, 2368, 890, 1573, 1493, 1322, 1323,
	1324, 2873, 2072, 2251, 2249, 2250, 2242, 2243, 2244, 2245,
	2247, 2248, 2522, 1831, 1392, 1295, 2198, 493, 953, 3081,
	209, 493, 493, 3078, 3071, 1847, 1844, 2424, 953, 891,
	3027, 209, 493, 172, 2600, 493, 493, 1547, 2658, 171,
	1294, 493, 165, 2103, 1372, 1651, 907, 1315, 200, 2998,
	166, 3105, 1545, 1663, 3104, 2792, 1523, 2129, 171, 535,
	2469, 1249, 516, 966, 506, 1057, 1639, 1056, 1263, 1475,
	1589, 138, 1248, 493, 3141, 173, 3072, 884, 493, 1608,
	1217, 882, 1586, 209, 493, 1510, 493, 1703, 493, 473,
	493, 1525, 493, 476, 173, 886, 1472, 1554, 1578, 1671,
	2920, 1576, 493, 1261, 493, 1207, 1117, 2919, 2917, 1641,
	880, 1849, 493, 493, 493, 2916, 172, 1300, 1476, 1477,
	1530, 2638, 2633, 473, 2632, 165, 721, 476, 2597, 877,
	1316, 2596, 1446, 166, 517, 172, 915, 1552, 1549, 2450,
	2212, 493, 2211, 534, 165, 966, 1643, 1262, 505, 2210,
	2209, 1208, 166, 2169, 138, 2101, 1968, 1445, 2058, 2809,
	2023, 913, 2017, 1653, 1968, 2013, 1994, 2628, 1792, 1909,
	1417, 1053, 1721, 138, 1908, 1967, 1907, 1710, 1906, 1092,
	1750, 2069, 2951, 1456, 2472, 2027, 1589, 1589, 1716, 696,
	1674, 1683, 2997, 1193, 720, 1608, 1608, 1579, 1586, 1586,
	1715, 1577, 1977, 1843, 473, 1081, 1650, 1712, 476, 1183,
	2643, 586, 1640, 2038, 1360, 473, 1987, 1215, 1302, 476,
	966, 2461, 603, 1835, 3067, 2244, 2245, 2247, 2248, 1679,
	1667, 2898, 604, 1247, 1807, 1807, 1688, 3046, 1685, 604,
	1986, 1553, 1871, 1304, 1296, 1297, 1298, 1299, 1301, 1302,
	2113, 1876, 1876, 2511, 1849, 1887, 1889, 722, 1894, 3096,
	2010, 1291, 1191, 2514, 1694, 3009, 1917, 473, 493, 2419,
	493, 476, 1186, 1666, 1665, 1921, 1675, 1672, 1896, 2248,
	1676, 2004, 1676, 2004, 2365, 1720, 1980, 2158, 2159, 1676,
	2004, 2616, 3010, 1719, 966, 1831, 2464, 1740, 1747, 1184,
	493, 1269, 493, 1244, 710, 2420, 1738, 710, 710, 493,
	966, 1260, 2132, 723, 493, 201, 1828, 2512, 2360, 723,
	1513, 3104, 493, 1730, 2134, 1561, 1731, 1732, 1563, 196,
	493, 1565, 519, 518, 3068, 1568, 2240, 2241, 1495, 1521,
	1492, 1478, 493, 1814, 3127, 953, 1223, 1944, 1812, 1849,
	1245, 1952, 1953, 2419, 2135, 1463, 493, 966, 1464, 2976,
	1960, 2468, 493, 493, 1826, 1818, 2133, 1669, 1872, 1558,
	1470, 1390, 3120, 1714, 2470, 1969, 1589, 493, 2634, 510,
	493, 719, 2349, 2463, 3095, 1608, 2060, 2014, 1586, 1470,
	202, 2854, 1298, 1299, 1301, 1302, 2377, 2460, 2864, 895,
	1934, 3069, 503, 1849, 493, 1905, 493, 944, 493, 1979,
	2923, 493, 723, 493, 1884, 493, 2348, 493, 493, 201,
	493, 953, 953, 953, 1918, 1919, 953, 1350, 2015, 1981,
	1983, 2024, 493, 1996, 878, 2011, 1991, 1789, 878, 1935,
	1465, 533, 1949, 1702, 921, 1939, 1940, 1927, 1928, 888,
	2626, 1609, 887, 1467, 1216, 1453, 2215, 2057, 1965, 1654,
	2094, 2095, 2020, 2246, 921, 1972, 1973, 879, 1989, 2462,
	2351, 509, 1682, 525, 1717, 1824, 1995, 204, 1670, 2035,
	1938, 2037, 2025, 1080, 1197, 1996, 878, 1997, 2012, 2899,
	2353, 203, 2090, 493, 202, 520, 1257, 2850, 1959, 2617,
	722, 1496, 1469, 528, 2093, 1803, 2696, 3094, 2687, 1182,
	2703, 2118, 1815, 2074, 1978, 2074, 532, 2005, 2007, 2008,
	2009, 3066, 1057, 1359, 2031, 130, 1801, 697, 199, 1973,
	2352, 2092, 966, 130, 493, 2085, 2105, 2171, 1806, 2256,
	3103, 1231, 493, 3101, 493, 3118, 473, 1185, 2097, 585,
	476, 1687, 2078, 2087, 1749, 2088, 2083, 2089, 1280, 1787,
	1790, 2091, 2824, 197, 2822, 493, 493, 493, 1901, 493,
	1147, 2098, 2738, 2104, 1258, 1290, 1190, 506, 3128, 2114,
	1500, 204, 2066, 2122, 1973, 2123, 2064, 1470, 493, 1432,
	1529, 2849, 504, 533, 1429, 203, 2116, 200, 736, 1180,
	1169, 1482, 496, 1559, 2855, 1786, 3119, 198, 1463, 2382,
	1224, 1464, 1508, 2355, 1397, 502, 1404, 1202, 1486, 2143,
	1797, 2144, 2257, 1463, 1394, 2119, 1464, 501, 1798, 1832,
	2121, 1799, 199, 2386, 2909, 1804, 3121, 2557, 1259, 535,
	3133, 2151, 2130, 1813, 1202, 1279, 2908, 2889, 2776, 2967,
	2788, 130, 915, 1436, 530, 130, 511, 1225, 2791, 1483,
	1222, 505, 2599, 2185, 2333, 2790, 2329, 197, 532, 1202,
	1360, 507, 915, 2773, 2146, 493, 2067, 913, 2148, 1676,
	1673, 2851, 1439, 2172, 1726, 2065, 1548, 1538, 1537, 531,
	2205, 2206, 1350, 1465, 1533, 1203, 1528, 913, 1436, 1204,
	1434, 200, 2739, 2510, 2311, 1998, 1467, 3018, 1465, 1707,
	2155, 198, 1466, 1437, 2774, 2153, 1279, 1470, 1788, 1963,
	1657, 1467, 1203, 534, 1487, 1278, 1204, 1439, 2663, 2826,
	521, 2890, 1435, 529, 2249, 2250, 2242, 2243, 2244, 2245,
	2247, 2248, 2339, 1502, 2338, 1936, 2300, 1203, 1661, 2299,
	1684, 1204, 2191, 2164, 1280, 1469, 1933, 2042, 1437, 2041,
	2558, 1501, 2179, 1800, 1917, 1917, 1917, 2559, 723, 2281,
	1469, 1802, 3132, 2170, 1727, 1932, 966, 522, 1232, 2787,
	720, 2284, 2293, 2177, 1488, 1489, 2291, 2292, 1498, 2312,
	2645, 535, 493, 1484, 2789, 493, 1278, 568, 36, 1438,
	1114, 2391, 1112, 493, 493, 966, 530, 2197, 493, 1659,
	1476, 1477, 1103, 523, 1102, 524, 493, 493, 493, 596,
	1485, 589, 493, 1660, 3108, 493, 2812, 3, 575, 2381,
	1999, 2000, 493, 493, 493, 493, 493, 2744, 2320, 2572,
	1470, 531, 2887, 2769, 1438, 493, 2770, 1852, 2306, 2821,
	684, 3110, 493, 2307, 2869, 1470, 567, 35, 2387, 566,
	32, 2316, 2317, 2737, 493, 953, 2321, 1589, 493, 2642,
	731, 565, 79, 2888, 966, 534, 1608, 2174, 493, 1586,
	2772, 1461, 2269, 2330, 966, 529, 2298, 2302, 2175, 2775,
	2288, 966, 2180, 2276, 2277, 2278, 1490, 2485, 2295, 2296,
	2285, 2438, 2301, 493, 2231, 493, 2181, 493, 2120, 2359,
	493, 953, 953, 953, 2305, 493, 2022, 493, 2308, 480,
	1993, 493, 2335, 1267, 564, 78, 493, 876, 493, 1092,
	2341, 1519, 2345, 2346, 921, 493, 1268, 2319, 685, 1177,
	1701, 2140, 921, 921, 2270, 2324, 921, 2147, 2367, 2314,
	2142, 493, 493, 2356, 953, 2415, 1851, 2366, 3062, 2124,
	2354, 2414, 1254, 1468, 1704, 1466, 2426, 1901, 1901, 2326,
	1252, 493, 36, 1691, 1973, 1092, 2361, 1242, 2334, 2370,
	1466, 1113, 2372, 1111, 2340, 2771, 2343, 2371, 1468, 760,
	2364, 2455, 1642, 2395, 2401, 2402, 2403, 2376, 1240, 2375,
	493, 2392, 932, 2400, 1589, 594, 595, 587, 588, 574,
	1376, 1525, 2388, 1608, 2640, 493, 1586, 1504, 2396, 1238,
	2176, 561, 23, 1504, 1236, 1507, 2404, 3015, 2178, 2444,
	474, 35, 2413, 723, 32, 491, 2362, 2446, 562, 24,
	2363, 966, 512, 2432, 560, 30, 79, 2762, 2456, 538,
	1234, 966, 581, 2621, 2619, 538, 474, 2425, 581, 601,
	1901, 1901, 1901, 1266, 1228, 608, 493, 686, 1110, 2488,
	2598, 881, 883, 628, 2499, 2408, 1589, 1700, 2423, 559,
	21, 557, 20, 2465, 2466, 1608, 2406, 2423, 1586, 2454,
	2506, 2507, 2508, 2070, 558, 19, 2471, 2467, 130, 78,
	2062, 2523, 1253, 547, 15, 481, 482, 548, 16, 2476,
	1251, 2061, 2059, 1589, 1589, 2448, 2478, 1241, 2056, 1572,
	1571, 2474, 1608, 1608, 1569, 1586, 1586, 556, 57, 1567,
	1214, 2410, 684, 2569, 1589, 1589, 2937, 1564, 1239, 1562,
	1560, 1518, 915, 1608, 1608, 2498, 1586, 1586, 1516, 2492,
	915, 915, 731, 1505, 915, 538, 538, 493, 1494, 1237,
	687, 1491, 2519, 928, 1235, 555, 56, 913, 1479, 1589,
	546, 55, 493, 1471, 966, 913, 913, 2561, 1608, 913,
	1088, 1586, 3105, 484, 483, 2290, 2525, 491, 491, 491,
	1233, 958, 491, 2513, 2515, 2516, 23, 2534, 688, 2593,
	2844, 2532, 474, 1059, 1227, 2162, 2611, 2536, 1109, 1282,
	2843, 2631, 1680, 24, 2318, 2585, 554, 12, 2590, 30,
	685, 545, 50, 1168, 1740, 2526, 2573, 2637, 2562, 485,
	486, 2939, 1968, 130, 2575, 2576, 2570, 1968, 2578, 2629,
	1985, 493, 493, 1984, 493, 1740, 2537, 2807, 1982, 493,
	904, 2635, 2641, 2672, 21, 2636, 20, 966, 2026, 966,
	2639, 2021, 953, 552, 47, 2016, 2581, 2594, 2610, 19,
	553, 48, 905, 1992, 2163, 2125, 2602, 2652, 15, 493,
	2565, 576, 16, 544, 49, 2665, 2676, 551, 7, 1283,
	2433, 2434, 2435, 2384, 2436, 2437, 550, 6, 549, 38,
	2384, 2978, 57, 1647, 1648, 2781, 2669, 1226, 493, 2668,
	921, 966, 493, 493, 966, 493, 2954, 1996, 2664, 2745,
	2627, 2001, 1988, 493, 1292, 1293, 1286, 2019, 1990, 3014,
	2647, 966, 1901, 1901, 2656, 2646, 1292, 1293, 2655, 2654,
	56, 2818, 2649, 2077, 2670, 55, 2666, 921, 2700, 686,
	597, 2063, 906, 2678, 2055, 543, 37, 1920, 2677, 1652,
	2705, 1295, 1582, 3116, 2445, 3131, 1363, 921, 2240, 2241,
	2690, 493, 2517, 2710, 1294, 2688, 2689, 1292, 1293, 921,
	1589, 2452, 2659, 921, 2661, 2695, 1294, 2137, 921, 1608,
	2701, 12, 1586, 1973, 2138, 2288, 50, 2697, 2137, 2136,
	1886, 2682, 1841, 2717, 1901, 1901, 1901, 1901, 1901, 1901,
	1901, 1901, 1901, 1901, 1901, 1901, 1901, 1901, 1901, 1901,
	1901, 1901, 1901, 2698, 1901, 2693, 1256, 1219, 2509, 1255,
	493, 2083, 1218, 1373, 1371, 2399, 2836, 2680, 47, 921,
	966, 493, 687, 966, 2736, 48, 1265, 493, 493, 493,
	2495, 1264, 1250, 1246, 1243, 1229, 2706, 1189, 49, 1655,
	2502, 889, 7, 695, 2897, 493, 3026, 2977, 682, 2347,
	493, 6, 493, 38, 1690, 493, 493, 493, 493, 493,
	688, 1230, 2611, 493, 493, 953, 2782, 1692, 2304, 966,
	1941, 491, 1087, 953, 491, 3008, 2756, 491, 2723, 2755,
	958, 493, 493, 1107, 2785, 2750, 2752, 2749, 2214, 491,
	2761, 2747, 2748, 2960, 2863, 953, 1850, 2611, 915, 491,
	491, 491, 491, 958, 1374, 493, 2819, 53, 2607, 2611,
	37, 2808, 755, 2763, 493, 493, 953, 953, 2828, 2814,
	2746, 2601, 2786, 913, 2610, 2760, 2620, 2802, 2622, 1092,
	2049, 2823, 2795, 2796, 2048, 2830, 2751, 969, 1664, 777,
	2415, 2853, 628, 1875, 2817, 2753, 2837, 966, 2804, 2794,
	1741, 2827, 779, 1587, 782, 491, 2799, 2803, 2816, 2610,
	2612, 2835, 2839, 2595, 921, 2840, 781, 2856, 2829, 780,
	1588, 2610, 1400, 778, 1585, 1144, 2081, 1188, 2875, 2759,
	2630, 1973, 672, 1668, 2862, 1811, 1829, 493, 628, 966,
	2196, 1367, 2630, 493, 2806, 493, 2630, 966, 493, 2841,
	2842, 2630, 2793, 921, 747, 1827, 493, 2871, 1175, 746,
	2798, 2309, 966, 2418, 1589, 2831, 2834, 2905, 729, 1725,
	684, 2884, 2154, 1608, 1722, 2618, 1586, 915, 2611, 2876,
	2877, 508, 2237, 2918, 1973, 2879, 2902, 1142, 921, 1902,
	731, 2901, 1895, 2903, 1891, 2881, 1271, 1351, 2082, 1211,
	921, 2427, 913, 493, 2882, 493, 2111, 2423, 953, 2900,
	1733, 903, 2611, 493, 2611, 491, 1589, 902, 901, 2611,
	3032, 2922, 3029, 2852, 730, 1608, 1658, 2131, 1586, 1344,
	751, 2935, 2289, 2394, 2924, 966, 2926, 1085, 1343, 885,
	2610, 2930, 2883, 2969, 1201, 1200, 1199, 2332, 3126, 2615,
	964, 170, 167, 1052, 493, 169, 2880, 2936, 685, 168,
	493, 2941, 2668, 2940, 2934, 2380, 82, 34, 493, 2950,
	33, 109, 108, 107, 2610, 106, 2610, 2415, 2972, 105,
	104, 2610, 2966, 2953, 103, 102, 101, 2958, 100, 99,
	2938, 98, 97, 96, 1589, 1973, 2965, 493, 493, 95,
	94, 93, 92, 1608, 493, 91, 1586, 90, 89, 88,
	2991, 2929, 2989, 2974, 87, 953, 86, 85, 2963, 921,
	493, 2975, 915, 84, 953, 953, 624, 2911, 493, 621,
	493, 81, 493, 2986, 2983, 80, 31, 3011, 2995, 2993,
	26, 113, 2996, 114, 25, 77, 76, 913, 29, 921,
	18, 493, 3004, 921, 493, 921, 3021, 493, 3001, 966,
	921, 11, 3002, 3003, 756, 74, 17, 3036, 3037, 22,
	135, 3039, 3034, 134, 133, 3041, 132, 3040, 131, 3042,
	14, 1432, 2757, 3028, 13, 3023, 2612, 686, 3047, 128,
	129, 127, 126, 2611, 493, 2982, 125, 124, 123, 3045,
	10, 8, 112, 9, 2847, 3005, 2458, 3006, 608, 1729,
	3059, 3061, 70, 538, 3060, 3044, 71, 3000, 27, 493,
	43, 2612, 3086, 3085, 3087, 74, 42, 493, 41, 1901,
	111, 3022, 161, 2612, 1448, 3074, 160, 159, 928, 158,
	491, 3093, 2611, 493, 3090, 1436, 1431, 154, 157, 2981,
	3091, 3092, 155, 156, 153, 2610, 122, 3099, 163, 3102,
	3100, 921, 1292, 1293, 3088, 3106, 1901, 3107, 162, 151,
	3112, 3113, 3034, 3109, 1439, 148, 150, 152, 728, 3115,
	687, 149, 147, 164, 121, 120, 119, 1295, 118, 117,
	116, 3123, 1434, 3122, 5, 711, 3084, 2, 1, 0,
	0, 3129, 3130, 724, 2610, 1437, 2860, 3134, 3135, 0,
	0, 3136, 1294, 0, 0, 0, 0, 0, 688, 0,
	3139, 3140, 0, 0, 1435, 3143, 2912, 2913, 3145, 0,
	0, 0, 0, 0, 921, 1897, 0, 0, 916, 74,
	0, 0, 1292, 1293, 570, 0, 0, 0, 2860, 0,
	0, 500, 2612, 0, 0, 40, 1749, 0, 0, 0,
	0, 1901, 0, 0, 0, 0, 0, 1295, 0, 44,
	0, 1749, 0, 0, 474, 0, 0, 0, 0, 2083,
	0, 0, 2630, 921, 0, 0, 2612, 734, 2612, 1300,
	0, 1438, 1294, 2612, 0, 0, 0, 569, 1059, 0,
	491, 1524, 0, 0, 0, 0, 0, 0, 474, 0,
	0, 0, 0, 0, 2183, 2184, 1322, 1323, 1324, 0,
	0, 0, 1544, 1544, 0, 0, 571, 0, 0, 491,
	0, 491, 0, 491, 0, 59, 573, 538, 0, 0,
	60, 510, 0, 0, 1052, 0, 0, 2776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 503, 1315, 0, 0, 0, 1300,
	0, 0, 2773, 63, 0, 2766, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 2764, 474,
	1059, 581, 0, 2768, 2630, 0, 1322, 1323, 1324, 0,
	474, 1059, 0, 0, 958, 491, 0, 2263, 2264, 2265,
	628, 0, 0, 2774, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2240, 2241, 0, 2258,
	2259, 2260, 0, 509, 0, 0, 0, 0, 0, 0,
	0, 2767, 628, 0, 2707, 1315, 0, 491, 1316, 0,
	0, 0, 474, 491, 0, 491, 0, 491, 0, 491,
	0, 491, 0, 0, 0, 0, 0, 2612, 1749, 0,
	0, 1705, 0, 1706, 0, 64, 0, 0, 0, 0,
	0, 491, 491, 491, 2255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 66, 0, 67, 0, 0, 0, 0,
	628, 0, 0, 0, 0, 0, 2612, 0, 0, 494,
	0, 0, 0, 171, 0, 0, 0, 0, 1316, 0,
	0, 2145, 0, 0, 572, 0, 0, 110, 0, 506,
	0, 0, 2769, 0, 0, 2770, 0, 74, 0, 74,
	0, 74, 0, 2246, 504, 0, 1363, 0, 0, 173,
	208, 0, 1296, 1297, 1298, 1299, 1301, 1302, 0, 0,
	0, 0, 0, 0, 570, 0, 0, 502, 0, 2772,
	0, 0, 0, 0, 0, 40, 208, 0, 2775, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	172, 2261, 0, 0, 0, 0, 724, 0, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 166, 511, 0,
	0, 0, 0, 505, 0, 0, 0, 569, 1061, 2256,
	1065, 0, 1071, 507, 1897, 1897, 0, 608, 138, 538,
	1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302, 0, 0,
	0, 0, 0, 74, 928, 0, 571, 0, 0, 0,
	74, 0, 0, 0, 0, 59, 573, 0, 0, 538,
	60, 538, 0, 0, 928, 0, 0, 0, 491, 2483,
	2484, 0, 0, 1976, 2771, 0, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 491, 2257, 0, 0, 0, 0, 0, 858, 0,
	954, 0, 0, 967, 967, 491, 0, 1897, 1897, 1897,
	0, 474, 2032, 0, 1173, 0, 0, 0, 0, 0,
	0, 1178, 0, 0, 0, 0, 2045, 0, 0, 1059,
	0, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546,
	2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556,
	734, 2560, 0, 1976, 734, 538, 0, 491, 0, 0,
	491, 0, 491, 0, 491, 0, 491, 491, 0, 958,
	0, 711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1976, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 1354, 0, 1357, 2252, 2253, 2254, 0,
	0, 0, 1364, 2251, 2249, 2250, 2242, 2243, 2244, 2245,
	2247, 2248, 139, 66, 0, 67, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 572, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1345, 1346, 1347, 1348, 1349, 173,
	0, 0, 0, 0, 0, 0, 0, 1358, 0, 0,
	0, 0, 0, 491, 0, 1368, 0, 0, 0, 0,
	0, 1059, 0, 1059, 540, 0, 0, 0, 0, 955,
	0, 0, 968, 968, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 491, 491, 491, 570, 491, 165,
	0, 0, 0, 0, 0, 0, 0, 166, 40, 0,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 1447,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	569, 0, 0, 0, 0, 0, 0, 0, 0, 1897,
	1897, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 40, 0, 0, 0, 954, 954, 0, 59, 573,
	0, 0, 0, 60, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 0, 1425, 1425,
	1425, 0, 0, 0, 954, 954, 0, 0, 0, 0,
	0, 954, 0, 569, 0, 0, 63, 0, 0, 0,
	0, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897,
	1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897,
	0, 1897, 571, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 573, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 2240, 2241, 0, 2258, 2259, 2260, 0,
	0, 0, 0, 0, 919, 0, 0, 0, 0, 0,
	0, 2490, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 0,
	0, 0, 928, 928, 0, 0, 928, 0, 0, 0,
	0, 538, 0, 0, 538, 0, 0, 0, 64, 0,
	487, 2255, 538, 538, 0, 0, 0, 538, 954, 0,
	0, 0, 0, 0, 0, 491, 1976, 2328, 0, 0,
	0, 1976, 0, 0, 2328, 139, 66, 0, 67, 0,
	0, 1976, 2328, 1976, 2328, 2328, 0, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 171, 0, 0, 0,
	0, 1524, 0, 0, 955, 955, 0, 572, 0, 0,
	110, 0, 0, 491, 0, 0, 0, 958, 0, 0,
	2246, 64, 0, 0, 0, 0, 2868, 491, 0, 0,
	0, 0, 173, 955, 955, 0, 0, 0, 0, 0,
	955, 0, 0, 0, 0, 0, 0, 0, 139, 66,
	0, 67, 1544, 0, 1544, 0, 491, 0, 0, 491,
	0, 0, 0, 2892, 491, 0, 491, 0, 2261, 171,
	958, 0, 0, 172, 0, 1976, 0, 538, 0, 0,
	572, 0, 165, 110, 1976, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 2256, 0, 0, 0,
	2442, 1059, 936, 0, 0, 173, 0, 962, 0, 0,
	0, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 0, 0, 711, 0, 0, 711,
	711, 0, 0, 0, 734, 734, 0, 0, 2240, 2241,
	0, 2258, 2259, 2260, 0, 0, 172, 0, 0, 2475,
	0, 0, 0, 0, 0, 165, 0, 955, 2957, 0,
	0, 0, 0, 166, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2257,
	0, 0, 0, 0, 138, 0, 0, 1809, 0, 0,
	0, 0, 0, 0, 0, 0, 2255, 0, 0, 0,
	724, 0, 0, 0, 0, 1723, 1357, 1728, 0, 0,
	0, 0, 0, 1735, 0, 2521, 0, 0, 0, 0,
	0, 0, 0, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 0, 1791,
	0, 1793, 1794, 1795, 1796, 2246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 916,
	1819, 0, 0, 2252, 2253, 2254, 0, 0, 1358, 0,
	2251, 2249, 2250, 2242, 2243, 2244, 2245, 2247, 2248, 1452,
	928, 0, 0, 0, 0, 0, 538, 0, 0, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 0, 0, 74, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1893, 0, 1904, 0, 0, 2609, 0, 1910,
	1915, 2256, 0, 0, 74, 0, 1897, 0, 0, 0,
	0, 0, 0, 954, 0, 0, 0, 1448, 0, 0,
	967, 74, 0, 74, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 1448, 0, 0, 0, 0, 1448, 967,
	0, 0, 0, 1897, 0, 0, 0, 0, 208, 0,
	1976, 1544, 0, 1544, 0, 74, 0, 74, 491, 0,
	2240, 2241, 0, 2258, 2259, 2260, 1083, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 2489, 74,
	0, 0, 0, 0, 2257, 0, 0, 74, 1976, 928,
	0, 0, 0, 0, 1121, 1121, 1121, 962, 0, 0,
	0, 0, 2034, 0, 2036, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 2255, 0,
	0, 958, 491, 0, 491, 0, 0, 954, 0, 208,
	0, 0, 491, 0, 0, 0, 0, 954, 1897, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	2724, 0, 0, 0, 0, 0, 0, 2246, 2252, 2253,
	2254, 0, 208, 0, 0, 2251, 2249, 2250, 2242, 2243,
	2244, 2245, 2247, 2248, 0, 74, 0, 0, 0, 74,
	0, 0, 955, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 2261, 0, 0, 968, 1059,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	538, 0, 0, 0, 967, 0, 1976, 2328, 1976, 0,
	0, 0, 0, 2256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2609, 1059, 0, 0, 0, 0, 1976,
	0, 2328, 0, 0, 1059, 1059, 491, 1976, 2328, 0,
	0, 0, 491, 491, 0, 1809, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2609, 0,
	1059, 2045, 0, 0, 0, 1357, 0, 0, 0, 0,
	2609, 0, 0, 0, 0, 0, 955, 0, 0, 967,
	0, 0, 0, 0, 1976, 0, 955, 0, 0, 0,
	0, 0, 0, 2442, 2442, 0, 2257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 2167, 2168, 0, 0, 0, 0, 2173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2186, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 2192, 0, 0, 0, 538, 0, 2199, 967,
	0, 0, 1976, 2204, 2328, 0, 0, 2886, 0, 916,
	0, 0, 0, 0, 0, 491, 0, 916, 916, 2609,
	2218, 916, 0, 0, 0, 0, 0, 0, 0, 0,
	2252, 2253, 2254, 968, 954, 0, 0, 2251, 2249, 2250,
	2242, 2243, 2244, 2245, 2247, 2248, 967, 0, 0, 1448,
	0, 0, 0, 2609, 0, 2609, 0, 0, 0, 0,
	2609, 0, 491, 0, 491, 1457, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 74, 0, 0, 1915, 1915,
	1915, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 2294, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 968, 0,
	954, 954, 954, 2521, 0, 954, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 2886, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 2350, 0, 1976, 2328, 0, 0,
	724, 1448, 0, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2328,
	0, 0, 968, 0, 0, 0, 0, 1059, 0, 1059,
	0, 491, 0, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3019, 0, 0, 1059, 0, 0, 491, 0, 0, 2240,
	2241, 967, 2258, 2259, 2260, 1522, 0, 0, 0, 0,
	0, 0, 74, 955, 2609, 0, 0, 0, 0, 2416,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 0, 0, 2521, 0, 0, 1551, 0, 1551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2255, 1059, 0,
	0, 0, 0, 2609, 0, 0, 1976, 0, 0, 0,
	0, 0, 0, 734, 734, 0, 0, 0, 0, 0,
	0, 0, 2886, 0, 0, 0, 734, 0, 0, 955,
	955, 955, 0, 0, 955, 0, 0, 0, 0, 0,
	0, 0, 0, 2477, 0, 0, 0, 1735, 0, 0,
	1645, 0, 0, 2481, 0, 0, 2482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2246, 0, 2487, 0,
	0, 0, 0, 0, 0, 2493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2500, 0, 74, 0, 2294,
	2262, 0, 1689, 0, 0, 0, 0, 0, 1695, 0,
	1696, 0, 1697, 0, 1698, 916, 1699, 0, 2527, 2528,
	0, 2529, 2530, 2531, 2261, 0, 0, 0, 2533, 0,
	0, 0, 0, 0, 0, 2535, 1708, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 2256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2563, 2564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 0, 39,
	0, 0, 0, 0, 0, 967, 2580, 0, 0, 0,
	40, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 46, 143,
	0, 0, 0, 2603, 0, 2257, 0, 0, 0, 0,
	45, 0, 51, 0, 916, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 0, 54, 0, 0,
	0, 58, 0, 0, 0, 144, 0, 0, 0, 0,
	59, 72, 0, 0, 954, 60, 61, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 62,
	967, 0, 0, 0, 0, 0, 1425, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 2679, 0, 0,
	954, 954, 954, 1962, 0, 0, 0, 0, 0, 2252,
	2253, 2254, 0, 0, 0, 0, 2251, 2249, 2250, 2242,
	2243, 2244, 2245, 2247, 2248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 954, 0, 0, 0, 0, 0, 0,
	962, 0, 2709, 0, 0, 0, 2712, 2713, 0, 916,
	0, 0, 0, 0, 968, 0, 0, 0, 2715, 0,
	0, 0, 2718, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2725,
	64, 0, 0, 968, 0, 0, 0, 65, 0, 0,
	0, 0, 2086, 0, 0, 1121, 0, 1121, 0, 1121,
	0, 962, 962, 0, 0, 0, 75, 139, 66, 0,
	67, 0, 68, 0, 0, 0, 145, 0, 0, 0,
	967, 69, 0, 0, 0, 0, 0, 0, 171, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 0, 110, 955, 0, 0, 0, 0, 74, 1292,
	1293, 142, 968, 0, 0, 1335, 1336, 1337, 0, 0,
	0, 0, 968, 0, 173, 2783, 0, 0, 0, 968,
	0, 0, 0, 0, 1295, 0, 0, 1341, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 955,
	955, 955, 0, 0, 0, 0, 0, 140, 0, 1294,
	0, 0, 0, 0, 0, 172, 0, 1314, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 0, 2141, 0,
	0, 0, 166, 0, 0, 0, 0, 0, 0, 0,
	1292, 1293, 955, 1325, 1326, 1327, 1335, 1336, 1337, 0,
	0, 0, 0, 138, 0, 0, 4, 0, 1328, 2150,
	962, 2152, 0, 967, 0, 1295, 0, 0, 1341, 0,
	0, 0, 0, 0, 2857, 2858, 0, 1317, 1318, 1319,
	1320, 0, 2165, 0, 0, 0, 1300, 0, 0, 0,
	1294, 0, 0, 0, 0, 0, 2866, 2867, 1314, 0,
	0, 0, 0, 74, 0, 1311, 0, 0, 0, 1332,
	1342, 2874, 0, 1322, 1323, 1324, 0, 0, 0, 0,
	0, 0, 0, 1809, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 0, 967, 0, 967, 0,
	0, 954, 0, 0, 0, 1330, 0, 2910, 1317, 1318,
	1319, 1320, 1315, 0, 0, 0, 0, 1300, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 1342, 0, 0, 1322, 1323, 1324, 0, 0, 0,
	967, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 1339, 0, 0, 0,
	967, 0, 0, 1309, 1310, 0, 0, 0, 1321, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 1315, 0, 1316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2968, 1340,
	0, 2971, 968, 0, 0, 0, 0, 0, 1333, 0,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	2325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 0, 0, 967,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 968, 1331, 968, 0, 1333,
	955, 0, 0, 0, 1334, 0, 1305, 1303, 1304, 1296,
	1297, 1298, 1299, 1301, 1302, 0, 0, 0, 0, 0,
	0, 0, 2379, 0, 954, 0, 3058, 3058, 967, 0,
	0, 0, 954, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3075, 0, 0, 0, 0, 968,
	0, 2397, 968, 0, 954, 0, 0, 0, 0, 2405,
	0, 2407, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 3058, 0, 0, 954, 954, 1331, 0, 0,
	1306, 1307, 1313, 1312, 1308, 1334, 0, 1305, 1303, 1304,
	1296, 1297, 1298, 1299, 1301, 1302, 0, 0, 0, 0,
	2223, 0, 0, 0, 2224, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3058, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 2479,
	0, 1292, 1293, 0, 1325, 1326, 1327, 1335, 1336, 1337,
	0, 967, 0, 0, 0, 0, 0, 0, 968, 1328,
	0, 968, 0, 0, 0, 0, 1295, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 954, 0, 1314,
	0, 0, 0, 955, 0, 0, 1311, 968, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 955, 955, 0, 0, 0, 1317,
	1318, 1319, 1320, 0, 0, 0, 0, 0, 1300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 1332, 1342, 0, 0, 1322, 1323, 1324, 0, 0,
	0, 0, 0, 0, 954, 0, 0, 0, 0, 0,
	0, 0, 0, 954, 954, 0, 1338, 1339, 0, 0,
	0, 0, 0, 0, 1309, 1310, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 1330, 0, 0,
	0, 0, 0, 0, 1315, 0, 0, 0, 967, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2653, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2699, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 2702, 0, 0,
	1333, 0, 0, 0, 0, 0, 0, 0, 1292, 1293,
	0, 1325, 1326, 1327, 1335, 1336, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 955, 0, 0, 0, 0, 1294, 0,
	0, 0, 955, 955, 0, 0, 1314, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 1331, 0,
	0, 1306, 1307, 1313, 1312, 1308, 1334, 0, 1305, 1303,
	1304, 1296, 1297, 1298, 1299, 1301, 1302, 968, 0, 0,
	0, 0, 0, 0, 0, 2729, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1317, 1318, 1319, 1320,
	0, 0, 0, 0, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2797, 0, 0, 0, 0, 0, 1101, 1332, 1342,
	0, 0, 1322, 1323, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 1339, 0, 0, 0, 0, 0,
	0, 1309, 1310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 1315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	2893, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2931, 0, 2933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 1306, 1307,
	1313, 1312, 1308, 1334, 0, 1305, 1303, 1304, 1296, 1297,
	1298, 1299, 1301, 1302, 0, 0, 0, 0, 0, 0,
	0, 0, 2226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3007, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3025, 258, 259, 260, 261, 970, 262, 971, 972,
	973, 974, 214, 975, 976, 977, 978, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 979, 269, 270,
	271, 272, 273, 274, 980, 981, 219, 220, 221, 982,
	275, 222, 983, 929, 984, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 985, 285, 0, 286, 287,
	986, 860, 288, 289, 290, 987, 988, 990, 989, 991,
	992, 993, 291, 292, 495, 293, 294, 295, 223, 224,
	994, 296, 995, 297, 996, 298, 997, 998, 299, 300,
	999, 301, 302, 1000, 0, 1001, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 1002, 861, 1003,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 1004, 318, 1005, 1006, 862, 319, 1007, 320, 229,
	1008, 230, 1009, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 864, 1010, 237, 328, 0, 0, 0, 1011,
	327, 329, 336, 1012, 863, 330, 234, 332, 331, 333,
	334, 335, 235, 1013, 236, 1014, 337, 865, 866, 338,
	339, 340, 867, 341, 342, 0, 0, 343, 344, 345,
	1015, 347, 346, 1016, 238, 868, 348, 349, 869, 1017,
	350, 351, 1018, 1019, 352, 0, 353, 931, 930, 354,
	355, 357, 358, 356, 870, 359, 360, 362, 361, 1020,
	1021, 871, 1022, 239, 363, 240, 364, 365, 1023, 366,
	367, 1024, 1025, 368, 369, 1026, 1027, 370, 241, 872,
	371, 873, 242, 372, 373, 374, 375, 376, 377, 378,
	1028, 379, 243, 380, 244, 381, 1029, 382, 383, 384,
	385, 386, 245, 387, 388, 1030, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 1031,
	401, 874, 402, 403, 404, 405, 246, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 1032, 422, 423, 417,
	419, 420, 421, 418, 424, 425, 1033, 426, 407, 408,
	427, 875, 428, 247, 429, 430, 1034, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 1035,
	441, 442, 1036, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 1037, 249, 250, 251, 451, 1038, 1039,
	452, 453, 252, 253, 1040, 454, 455, 0, 456, 457,
	1041, 1042, 458, 459, 460, 462, 1043, 463, 1044, 461,
	464, 465, 466, 254, 255, 1045, 1046, 467, 256, 1047,
	1048, 1049, 1050, 468, 469, 257, 470, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 0, 0, 1946,
	0, 0, 0, 0, 0, 0, 0, 0, 1947, 258,
	259, 260, 261, 970, 262, 971, 972, 973, 974, 214,
	975, 976, 977, 978, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 979, 269, 270, 271, 272, 273,
	274, 980, 981, 219, 220, 221, 982, 275, 222, 983,
	929, 984, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 985, 285, 0, 286, 287, 986, 860, 288,
	289, 290, 987, 988, 990, 989, 991, 992, 993, 291,
	292, 495, 293, 294, 295, 223, 224, 994, 296, 995,
	297, 996, 298, 997, 998, 299, 300, 999, 301, 302,
	1000, 0, 1001, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 1002, 861, 1003, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 1004, 318,
	1005, 1006, 862, 319, 1007, 320, 229, 1008, 230, 1009,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 864,
	1010, 237, 328, 0, 0, 0, 1011, 327, 329, 336,
	1012, 863, 330, 234, 332, 331, 333, 334, 335, 235,
	1013, 236, 1014, 337, 865, 866, 338, 339, 340, 867,
	341, 342, 0, 0, 343, 344, 345, 1015, 347, 346,
	1016, 238, 868, 348, 349, 869, 1017, 350, 351, 1018,
	1019, 352, 0, 353, 931, 930, 354, 355, 357, 358,
	356, 870, 359, 360, 362, 361, 1020, 1021, 871, 1022,
	239, 363, 240, 364, 365, 1023, 366, 367, 1024, 1025,
	368, 369, 1026, 1027, 370, 241, 872, 371, 873, 242,
	372, 373, 374, 375, 376, 377, 378, 1028, 379, 243,
	380, 244, 381, 1029, 382, 383, 384, 385, 386, 245,
	387, 388, 1030, 389, 390, 391, 392, 393, 0, 395,
	396, 394, 397, 398, 399, 400, 1031, 401, 874, 402,
	403, 404, 405, 246, 406, 0, 410, 411, 412, 413,
	414, 415, 416, 1032, 422, 423, 417, 419, 420, 421,
	418, 424, 425, 1033, 426, 407, 408, 427, 875, 428,
	247, 429, 430, 1034, 440, 431, 432, 433, 409, 434,
	438, 439, 435, 436, 437, 248, 1035, 441, 442, 1036,
	443, 444, 445, 446, 447, 308, 448, 309, 449, 450,
	1037, 249, 250, 251, 451, 1038, 1039, 452, 453, 252,
	253, 1040, 454, 455, 0, 456, 457, 1041, 1042, 458,
	459, 460, 462, 1043, 463, 1044, 461, 464, 465, 466,
	254, 255, 1045, 1046, 467, 256, 1047, 1048, 1049, 1050,
	468, 469, 257, 470, 471, 472, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2754, 258, 259, 260,
	261, 970, 262, 971, 972, 973, 974, 214, 975, 976,
	977, 978, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 979, 269, 270, 271, 272, 273, 274, 980,
	981, 219, 220, 221, 982, 275, 222, 983, 929, 984,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	985, 285, 0, 286, 287, 986, 860, 288, 289, 290,
	987, 988, 990, 989, 991, 992, 993, 291, 292, 495,
	293, 294, 295, 223, 224, 994, 296, 995, 297, 996,
	298, 997, 998, 299, 300, 999, 301, 302, 1000, 0,
	1001, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 1002, 861, 1003, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 1004, 318, 1005, 1006,
	862, 319, 1007, 320, 229, 1008, 230, 1009, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 864, 1010, 237,
	328, 0, 0, 0, 1011, 327, 329, 336, 1012, 863,
	330, 234, 332, 331, 333, 334, 335, 235, 1013, 236,
	1014, 337, 865, 866, 338, 339, 340, 867, 341, 342,
	0, 0, 343, 344, 345, 1015, 347, 346, 1016, 238,
	868, 348, 349, 869, 1017, 350, 351, 1018, 1019, 352,
	0, 353, 931, 930, 354, 355, 357, 358, 356, 870,
	359, 360, 362, 361, 1020, 1021, 871, 1022, 239, 363,
	240, 364, 365, 1023, 366, 367, 1024, 1025, 368, 369,
	1026, 1027, 370, 241, 872, 371, 873, 242, 372, 373,
	374, 375, 376, 377, 378, 1028, 379, 243, 380, 244,
	381, 1029, 382, 383, 384, 385, 386, 245, 387, 388,
	1030, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 1031, 401, 874, 402, 403, 404,
	405, 246, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 1032, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 1033, 426, 407, 408, 427, 875, 428, 247, 429,
	430, 1034, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 1035, 441, 442, 1036, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 1037, 249,
	250, 251, 451, 1038, 1039, 452, 453, 252, 253, 1040,
	454, 455, 0, 456, 457, 1041, 1042, 458, 459, 460,
	462, 1043, 463, 1044, 461, 464, 465, 466, 254, 255,
	1045, 1046, 467, 256, 1047, 1048, 1049, 1050, 468, 469,
	257, 470, 471, 472, 965, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2861,
	258, 259, 260, 261, 970, 262, 971, 972, 973, 974,
	214, 975, 976, 977, 978, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 979, 269, 270, 271, 272,
	273, 274, 980, 981, 219, 220, 221, 982, 275, 222,
	983, 929, 984, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 985, 285, 0, 286, 287, 986, 860,
	288, 289, 290, 987, 988, 990, 989, 991, 992, 993,
	291, 292, 495, 293, 294, 295, 223, 224, 994, 296,
	995, 297, 996, 298, 997, 998, 299, 300, 999, 301,
	302, 1000, 0, 1001, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 1002, 861, 1003, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 1004,
	318, 1005, 1006, 862, 319, 1007, 320, 229, 1008, 230,
	1009, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	864, 1010, 237, 328, 0, 0, 0, 1011, 327, 329,
	336, 1012, 863, 330, 234, 332, 331, 333, 334, 335,
	235, 1013, 236, 1014, 337, 865, 866, 338, 339, 340,
	867, 341, 342, 0, 0, 343, 344, 345, 1015, 347,
	346, 1016, 238, 868, 348, 349, 869, 1017, 350, 351,
	1018, 1019, 352, 0, 353, 931, 930, 354, 355, 357,
	358, 356, 870, 359, 360, 362, 361, 1020, 1021, 871,
	1022, 239, 363, 240, 364, 365, 1023, 366, 367, 1024,
	1025, 368, 369, 1026, 1027, 370, 241, 872, 371, 873,
	242, 372, 373, 374, 375, 376, 377, 378, 1028, 379,
	243, 380, 244, 381, 1029, 382, 383, 384, 385, 386,
	245, 387, 388, 1030, 389, 390, 391, 392, 393, 0,
	395, 396, 394, 397, 398, 399, 400, 1031, 401, 874,
	402, 403, 404, 405, 246, 406, 0, 410, 411, 412,
	413, 414, 415, 416, 1032, 422, 423, 417, 419, 420,
	421, 418, 424, 425, 1033, 426, 407, 408, 427, 875,
	428, 247, 429, 430, 1034, 440, 431, 432, 433, 409,
	434, 438, 439, 435, 436, 437, 248, 1035, 441, 442,
	1036, 443, 444, 445, 446, 447, 308, 448, 309, 449,
	450, 1037, 249, 250, 251, 451, 1038, 1039, 452, 453,
	252, 253, 1040, 454, 455, 0, 456, 457, 1041, 1042,
	458, 459, 460, 462, 1043, 463, 1044, 461, 464, 465,
	466, 254, 255, 1045, 1046, 467, 256, 1047, 1048, 1049,
	1050, 468, 469, 257, 470, 471, 472, 965, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2503, 258, 259, 260, 261, 970, 262, 971,
	972, 973, 974, 214, 975, 976, 977, 978, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 979, 269,
	270, 271, 272, 273, 274, 980, 981, 219, 220, 221,
	982, 275, 222, 983, 929, 984, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 985, 285, 0, 286,
	287, 986, 860, 288, 289, 290, 987, 988, 990, 989,
	991, 992, 993, 291, 292, 495, 293, 294, 295, 223,
	224, 994, 296, 995, 297, 996, 298, 997, 998, 299,
	300, 999, 301, 302, 1000, 0, 1001, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 1002, 861,
	1003, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 1004, 318, 1005, 1006, 862, 319, 1007, 320,
	229, 1008, 230, 1009, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 864, 1010, 237, 328, 0, 0, 0,
	1011, 327, 329, 336, 1012, 863, 330, 234, 332, 331,
	333, 334, 335, 235, 1013, 236, 1014, 337, 865, 866,
	338, 339, 340, 867, 341, 342, 0, 0, 343, 344,
	345, 1015, 347, 346, 1016, 238, 868, 348, 349, 869,
	1017, 350, 351, 1018, 1019, 352, 0, 353, 931, 930,
	354, 355, 357, 358, 356, 870, 359, 360, 362, 361,
	1020, 1021, 871, 1022, 239, 363, 240, 364, 365, 1023,
	366, 367, 1024, 1025, 368, 369, 1026, 1027, 370, 241,
	872, 371, 873, 242, 372, 373, 374, 375, 376, 377,
	378, 1028, 379, 243, 380, 244, 381, 1029, 382, 383,
	384, 385, 386, 245, 387, 388, 1030, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	1031, 401, 874, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 1032, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 1033, 426, 407,
	408, 427, 875, 428, 247, 429, 430, 1034, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 248,
	1035, 441, 442, 1036, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 1037, 249, 250, 251, 451, 1038,
	1039, 452, 453, 252, 253, 1040, 454, 455, 0, 456,
	457, 1041, 1042, 458, 459, 460, 462, 1043, 463, 1044,
	461, 464, 465, 466, 254, 255, 1045, 1046, 467, 256,
	1047, 1048, 1049, 1050, 468, 469, 257, 470, 471, 472,
	965, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2494, 258, 259, 260, 261,
	970, 262, 971, 972, 973, 974, 214, 975, 976, 977,
	978, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 979, 269, 270, 271, 272, 273, 274, 980, 981,
	219, 220, 221, 982, 275, 222, 983, 929, 984, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 985,
	285, 0, 286, 287, 986, 860, 288, 289, 290, 987,
	988, 990, 989, 991, 992, 993, 291, 292, 495, 293,
	294, 295, 223, 224, 994, 296, 995, 297, 996, 298,
	997, 998, 299, 300, 999, 301, 302, 1000, 0, 1001,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 1002, 861, 1003, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 1004, 318, 1005, 1006, 862,
	319, 1007, 320, 229, 1008, 230, 1009, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 864, 1010, 237, 328,
	0, 0, 0, 1011, 327, 329, 336, 1012, 863, 330,
	234, 332, 331, 333, 334, 335, 235, 1013, 236, 1014,
	337, 865, 866, 338, 339, 340, 867, 341, 342, 0,
	0, 343, 344, 345, 1015, 347, 346, 1016, 238, 868,
	348, 349, 869, 1017, 350, 351, 1018, 1019, 352, 0,
	353, 931, 930, 354, 355, 357, 358, 356, 870, 359,
	360, 362, 361, 1020, 1021, 871, 1022, 239, 363, 240,
	364, 365, 1023, 366, 367, 1024, 1025, 368, 369, 1026,
	1027, 370, 241, 872, 371, 873, 242, 372, 373, 374,
	375, 376, 377, 378, 1028, 379, 243, 380, 244, 381,
	1029, 382, 383, 384, 385, 386, 245, 387, 388, 1030,
	389, 390, 391, 392, 393, 0, 395, 396, 394, 397,
	398, 399, 400, 1031, 401, 874, 402, 403, 404, 405,
	246, 406, 0, 410, 411, 412, 413, 414, 415, 416,
	1032, 422, 423, 417, 419, 420, 421, 418, 424, 425,
	1033, 426, 407, 408, 427, 875, 428, 247, 429, 430,
	1034, 440, 431, 432, 433, 409, 434, 438, 439, 435,
	436, 437, 248, 1035, 441, 442, 1036, 443, 444, 445,
	446, 447, 308, 448, 309, 449, 450, 1037, 249, 250,
	251, 451, 1038, 1039, 452, 453, 252, 253, 1040, 454,
	455, 0, 456, 457, 1041, 1042, 458, 459, 460, 462,
	1043, 463, 1044, 461, 464, 465, 466, 254, 255, 1045,
	1046, 467, 256, 1047, 1048, 1049, 1050, 468, 469, 257,
	470, 471, 472, 965, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2383, 258,
	259, 260, 261, 970, 262, 971, 972, 973, 974, 214,
	975, 976, 977, 978, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 979, 269, 270, 271, 272, 273,
	274, 980, 981, 219, 220, 221, 982, 275, 222, 983,
	929, 984, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 985, 285, 0, 286, 287, 986, 860, 288,
	289, 290, 987, 988, 990, 989, 991, 992, 993, 291,
	292, 495, 293, 294, 295, 223, 224, 994, 296, 995,
	297, 996, 298, 997, 998, 299, 300, 999, 301, 302,
	1000, 0, 1001, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 1002, 861, 1003, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 1004, 318,
	1005, 1006, 862, 319, 1007, 320, 229, 1008, 230, 1009,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 864,
	1010, 237, 328, 0, 0, 0, 1011, 327, 329, 336,
	1012, 863, 330, 234, 332, 331, 333, 334, 335, 235,
	1013, 236, 1014, 337, 865, 866, 338, 339, 340, 867,
	341, 342, 0, 0, 343, 344, 345, 1015, 347, 346,
	1016, 238, 868, 348, 349, 869, 1017, 350, 351, 1018,
	1019, 352, 0, 353, 931, 930, 354, 355, 357, 358,
	356, 870, 359, 360, 362, 361, 1020, 1021, 871, 1022,
	239, 363, 240, 364, 365, 1023, 366, 367, 1024, 1025,
	368, 369, 1026, 1027, 370, 241, 872, 371, 873, 242,
	372, 373, 374, 375, 376, 377, 378, 1028, 379, 243,
	380, 244, 381, 1029, 382, 383, 384, 385, 386, 245,
	387, 388, 1030, 389, 390, 391, 392, 393, 0, 395,
	396, 394, 397, 398, 399, 400, 1031, 401, 874, 402,
	403, 404, 405, 246, 406, 0, 410, 411, 412, 413,
	414, 415, 416, 1032, 422, 423, 417, 419, 420, 421,
	418, 424, 425, 1033, 426, 407, 408, 427, 875, 428,
	247, 429, 430, 1034, 440, 431, 432, 433, 409, 434,
	438, 439, 435, 436, 437, 248, 1035, 441, 442, 1036,
	443, 444, 445, 446, 447, 308, 448, 309, 449, 450,
	1037, 249, 250, 251, 451, 1038, 1039, 452, 453, 252,
	253, 1040, 454, 455, 0, 456, 457, 1041, 1042, 458,
	459, 460, 462, 1043, 463, 1044, 461, 464, 465, 466,
	254, 255, 1045, 1046, 467, 256, 1047, 1048, 1049, 1050,
	468, 469, 257, 470, 471, 472, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1833, 258, 259, 260, 261, 970, 262, 971, 972,
	973, 974, 214, 975, 976, 977, 978, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 979, 269, 270,
	271, 272, 273, 274, 980, 981, 219, 220, 221, 982,
	275, 222, 983, 929, 984, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 985, 285, 0, 286, 287,
	986, 860, 288, 289, 290, 987, 988, 990, 989, 991,
	992, 993, 291, 292, 495, 293, 294, 295, 223, 224,
	994, 296, 995, 297, 996, 298, 997, 998, 299, 300,
	999, 301, 302, 1000, 0, 1001, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 1002, 861, 1003,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 1004, 318, 1005, 1006, 862, 319, 1007, 320, 229,
	1008, 230, 1009, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 864, 1010, 237, 328, 0, 0, 0, 1011,
	327, 329, 336, 1012, 863, 330, 234, 332, 331, 333,
	334, 335, 235, 1013, 236, 1014, 337, 865, 866, 338,
	339, 340, 867, 341, 342, 0, 0, 343, 344, 345,
	1015, 347, 346, 1016, 238, 868, 348, 349, 869, 1017,
	350, 351, 1018, 1019, 352, 0, 353, 931, 930, 354,
	355, 357, 358, 356, 870, 359, 360, 362, 361, 1020,
	1021, 871, 1022, 239, 363, 240, 364, 365, 1023, 366,
	367, 1024, 1025, 368, 369, 1026, 1027, 370, 241, 872,
	371, 873, 242, 372, 373, 374, 375, 376, 377, 378,
	1028, 379, 243, 380, 244, 381, 1029, 382, 383, 384,
	385, 386, 245, 387, 388, 1030, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 1031,
	401, 874, 402, 403, 404, 405, 246, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 1032, 422, 423, 417,
	419, 420, 421, 418, 424, 425, 1033, 426, 407, 408,
	427, 875, 428, 247, 429, 430, 1034, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 1035,
	441, 442, 1036, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 1037, 249, 250, 251, 451, 1038, 1039,
	452, 453, 252, 253, 1040, 454, 455, 0, 456, 457,
	1041, 1042, 458, 459, 460, 462, 1043, 463, 1044, 461,
	464, 465, 466, 254, 255, 1045, 1046, 467, 256, 1047,
	1048, 1049, 1050, 468, 469, 257, 470, 471, 472, 965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 258, 259, 260, 261, 970,
	262, 971, 972, 973, 974, 214, 975, 976, 977, 978,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	979, 269, 270, 271, 272, 273, 274, 980, 981, 219,
	220, 221, 982, 275, 222, 983, 929, 984, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 985, 285,
	0, 286, 287, 986, 860, 288, 289, 290, 987, 988,
	990, 989, 991, 992, 993, 291, 292, 495, 293, 294,
	295, 223, 224, 994, 296, 995, 297, 996, 298, 997,
	998, 299, 300, 999, 301, 302, 1000, 0, 1001, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	1002, 861, 1003, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 1004, 318, 1005, 1006, 862, 319,
	1007, 320, 229, 1008, 230, 1009, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 864, 1010, 237, 328, 0,
	0, 0, 1011, 327, 329, 336, 1012, 863, 330, 234,
	332, 331, 333, 334, 335, 235, 1013, 236, 1014, 337,
	865, 866, 338, 339, 340, 867, 341, 342, 0, 0,
	343, 344, 345, 1015, 347, 346, 1016, 238, 868, 348,
	349, 869, 1017, 350, 351, 1018, 1019, 352, 0, 353,
	931, 930, 354, 355, 357, 358, 356, 870, 359, 360,
	362, 361, 1020, 1021, 871, 1022, 239, 363, 240, 364,
	365, 1023, 366, 367, 1024, 1025, 368, 369, 1026, 1027,
	370, 241, 872, 371, 873, 242, 372, 373, 374, 375,
	376, 377, 378, 1028, 379, 243, 380, 244, 381, 1029,
	382, 383, 384, 385, 386, 245, 387, 388, 1030, 389,
	390, 391, 392, 393, 0, 395, 396, 394, 397, 398,
	399, 400, 1031, 401, 874, 402, 403, 404, 405, 246,
	406, 0, 410, 411, 412, 413, 414, 415, 416, 1032,
	422, 423, 417, 419, 420, 421, 418, 424, 425, 1033,
	426, 407, 408, 427, 875, 428, 247, 429, 430, 1034,
	440, 431, 432, 433, 409, 434, 438, 439, 435, 436,
	437, 248, 1035, 441, 442, 1036, 443, 444, 445, 446,
	447, 308, 448, 309, 449, 450, 1037, 249, 250, 251,
	451, 1038, 1039, 452, 453, 252, 253, 1040, 454, 455,
	0, 456, 457, 1041, 1042, 458, 459, 460, 462, 1043,
	463, 1044, 461, 464, 465, 466, 254, 255, 1045, 1046,
	467, 256, 1047, 1048, 1049, 1050, 468, 469, 257, 470,
	471, 472, 1840, 0, 775, 763, 764, 761, 762, 754,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 1837, 262, 0, 0, 0, 0,
	811, 757, 0, 0, 0, 263, 264, 265, 215, 832,
	795, 833, 783, 819, 834, 0, 269, 785, 784, 272,
	273, 274, 758, 810, 835, 836, 221, 0, 275, 817,
	0, 800, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 860,
	288, 289, 290, 803, 801, 802, 807, 805, 804, 806,
	291, 292, 495, 293, 820, 295, 837, 838, 743, 296,
	0, 297, 0, 298, 1838, 0, 821, 300, 0, 301,
	302, 0, 0, 0, 748, 306, 303, 304, 307, 310,
	305, 311, 312, 839, 840, 770, 861, 0, 0, 0,
	0, 0, 313, 314, 841, 822, 823, 0, 317, 0,
	318, 0, 0, 862, 319, 0, 320, 842, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 812, 813, 816,
	864, 0, 814, 794, 0, 0, 0, 0, 327, 329,
	336, 0, 863, 330, 843, 798, 824, 825, 826, 827,
	844, 0, 799, 0, 337, 865, 866, 338, 339, 340,
	867, 828, 829, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 845, 868, 348, 349, 869, 0, 350, 351,
	0, 0, 352, 0, 353, 745, 744, 354, 355, 357,
	787, 356, 870, 359, 360, 362, 361, 740, 0, 871,
	771, 815, 363, 846, 364, 365, 0, 796, 797, 0,
	0, 368, 369, 0, 0, 370, 241, 872, 371, 873,
	847, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	848, 380, 244, 381, 0, 382, 383, 384, 385, 386,
	849, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 394, 397, 398, 399, 400, 0, 401, 874,
	402, 403, 404, 405, 749, 406, 0, 410, 411, 412,
	413, 414, 415, 416, 0, 422, 423, 788, 789, 790,
	791, 418, 424, 425, 808, 426, 407, 408, 427, 875,
	428, 850, 792, 430, 0, 440, 431, 432, 433, 409,
	434, 438, 830, 435, 436, 437, 851, 0, 441, 442,
	0, 443, 444, 445, 446, 447, 308, 448, 309, 786,
	450, 0, 852, 853, 854, 831, 0, 0, 452, 453,
	855, 856, 769, 454, 455, 0, 456, 457, 0, 0,
	458, 459, 460, 462, 809, 463, 0, 793, 464, 465,
	466, 254, 857, 1836, 0, 467, 256, 0, 0, 0,
	0, 468, 469, 257, 470, 471, 472, 741, 0, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	737, 738, 1839, 0, 0, 0, 0, 0, 0, 750,
	1834, 0, 0, 0, 725, 753, 775, 763, 764, 761,
	762, 754, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 811, 757, 0, 0, 0, 263, 264, 265,
	215, 832, 795, 833, 783, 819, 834, 0, 269, 785,
	784, 272, 273, 274, 758, 810, 835, 836, 221, 0,
	275, 817, 0, 800, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 860, 288, 289, 290, 803, 801, 802, 807, 805,
	804, 806, 291, 292, 495, 293, 820, 295, 837, 838,
	743, 296, 0, 297, 0, 298, 0, 0, 821, 300,
	0, 301, 302, 0, 0, 0, 748, 306, 303, 304,
	307, 310, 305, 311, 312, 839, 840, 770, 861, 0,
	0, 0, 0, 0, 313, 314, 841, 822, 823, 0,
	317, 0, 318, 0, 0, 862, 319, 0, 320, 842,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 812,
	813, 816, 864, 0, 814, 794, 0, 0, 0, 0,
	327, 329, 336, 0, 863, 330, 843, 798, 824, 825,
	826, 827, 844, 0, 799, 0, 337, 865, 866, 338,
	339, 340, 867, 828, 829, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 845, 868, 348, 349, 869, 0,
	350, 351, 0, 0, 352, 0, 353, 745, 744, 354,
	355, 357, 787, 356, 870, 359, 360, 362, 361, 740,
	0, 871, 771, 815, 363, 846, 364, 365, 0, 796,
	797, 0, 0, 368, 369, 0, 0, 370, 241, 872,
	371, 873, 847, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 848, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 849, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 874, 402, 403, 404, 405, 749, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 171, 422, 423, 788,
	789, 790, 791, 418, 424, 425, 808, 426, 407, 408,
	427, 875, 428, 850, 792, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 830, 435, 436, 437, 851, 0,
	441, 442, 173, 443, 444, 445, 446, 447, 308, 448,
	309, 786, 450, 0, 852, 853, 854, 831, 0, 0,
	452, 453, 855, 856, 769, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 809, 463, 0, 793,
	464, 465, 466, 1148, 857, 0, 0, 467, 256, 0,
	0, 0, 165, 468, 469, 257, 470, 471, 472, 741,
	166, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 0, 737, 738, 775, 763, 764, 761, 762, 754,
	0, 1361, 0, 0, 0, 0, 0, 753, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	811, 757, 0, 0, 0, 263, 264, 265, 215, 832,
	795, 833, 783, 819, 834, 0, 269, 785, 784, 272,
	273, 274, 758, 810, 835, 836, 221, 0, 275, 817,
	0, 800, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 860,
	288, 289, 290, 803, 801, 802, 807, 805, 804, 806,
	291, 292, 495, 293, 820, 295, 837, 838, 743, 296,
	0, 297, 0, 298, 0, 0, 821, 300, 0, 301,
	302, 0, 0, 0, 748, 306, 303, 304, 307, 310,
	305, 311, 312, 839, 840, 770, 861, 0, 0, 0,
	0, 0, 313, 314, 841, 822, 823, 0, 317, 0,
	318, 0, 0, 862, 319, 0, 320, 842, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 812, 813, 816,
	864, 0, 814, 794, 0, 0, 0, 0, 327, 329,
	336, 0, 863, 330, 843, 798, 824, 825, 826, 827,
	844, 0, 799, 0, 337, 865, 866, 338, 339, 340,
	867, 828, 829, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 845, 868, 348, 349, 869, 0, 350, 351,
	0, 0, 352, 0, 353, 745, 744, 354, 355, 357,
	787, 356, 870, 359, 360, 362, 361, 740, 0, 871,
	771, 815, 363, 846, 364, 365, 0, 796, 797, 0,
	0, 368, 369, 0, 0, 370, 241, 872, 371, 873,
	847, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	848, 380, 244, 381, 0, 382, 383, 384, 385, 386,
	849, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 394, 397, 398, 399, 400, 0, 401, 874,
	402, 403, 404, 405, 749, 406, 0, 410, 411, 412,
	413, 414, 415, 416, 171, 422, 423, 788, 789, 790,
	791, 418, 424, 425, 808, 426, 407, 408, 427, 875,
	428, 850, 792, 430, 0, 440, 431, 432, 433, 409,
	434, 438, 830, 435, 436, 437, 851, 0, 441, 442,
	173, 443, 444, 445, 446, 447, 308, 448, 309, 786,
	450, 0, 852, 853, 854, 831, 0, 0, 452, 453,
	855, 856, 769, 454, 455, 0, 456, 457, 0, 0,
	458, 459, 460, 462, 809, 463, 0, 793, 464, 465,
	466, 1148, 857, 0, 0, 467, 256, 0, 0, 0,
	165, 468, 469, 257, 470, 471, 472, 741, 166, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	737, 738, 775, 763, 764, 761, 762, 754, 0, 1361,
	0, 0, 0, 0, 0, 753, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 811, 757,
	0, 0, 0, 263, 264, 265, 215, 832, 795, 833,
	783, 819, 834, 1911, 269, 785, 784, 272, 273, 274,
	758, 810, 835, 836, 221, 0, 275, 817, 0, 800,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 860, 288, 289,
	290, 803, 801, 802, 807, 805, 804, 806, 291, 292,
	495, 293, 820, 295, 837, 838, 743, 296, 0, 297,
	0, 298, 0, 0, 821, 300, 0, 301, 302, 0,
	0, 0, 748, 306, 303, 304, 307, 310, 305, 311,
	312, 839, 840, 770, 861, 0, 0, 0, 0, 0,
	313, 314, 841, 822, 823, 0, 317, 0, 318, 0,
	1916, 862, 319, 0, 320, 842, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 812, 813, 816, 864, 0,
	814, 794, 0, 0, 0, 0, 327, 329, 336, 0,
	863, 330, 843, 798, 824, 825, 826, 827, 844, 0,
	799, 0, 337, 865, 866, 338, 339, 340, 867, 828,
	829, 0, 0, 343, 344, 345, 0, 347, 346, 1912,
	845, 868, 348, 349, 869, 0, 350, 351, 0, 0,
	352, 0, 353, 745, 744, 354, 355, 357, 787, 356,
	870, 359, 360, 362, 361, 740, 0, 871, 771, 815,
	363, 846, 364, 365, 0, 796, 797, 0, 0, 368,
	369, 0, 0, 370, 241, 872, 371, 873, 847, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 848, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 849, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 874, 402, 403,
	404, 405, 749, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 788, 789, 790, 791, 418,
	424, 425, 808, 426, 407, 408, 427, 875, 428, 850,
	792, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	830, 435, 436, 437, 851, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 786, 450, 0,
	852, 853, 854, 831, 0, 1913, 452, 453, 855, 856,
	769, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 809, 463, 0, 793, 464, 465, 466, 254,
	857, 0, 0, 467, 256, 0, 0, 0, 0, 468,
	469, 257, 470, 471, 472, 741, 0, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 737, 738,
	775, 763, 764, 761, 762, 754, 0, 750, 0, 0,
	0, 0, 0, 753, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 811, 757, 0, 0,
	0, 263, 264, 265, 215, 832, 795, 833, 783, 819,
	834, 0, 269, 785, 784, 272, 273, 274, 758, 810,
	835, 836, 221, 0, 275, 817, 0, 800, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 860, 288, 289, 290, 803,
	801, 802, 807, 805, 804, 806, 291, 292, 495, 293,
	820, 295, 837, 838, 743, 296, 0, 297, 0, 298,
	0, 0, 821, 300, 0, 301, 302, 0, 0, 0,
	748, 306, 303, 304, 307, 310, 305, 311, 312, 839,
	840, 770, 861, 0, 0, 0, 0, 0, 313, 314,
	841, 822, 823, 0, 317, 0, 318, 0, 0, 862,
	319, 0, 320, 842, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 812, 813, 816, 864, 0, 814, 794,
	0, 0, 0, 0, 327, 329, 336, 0, 863, 330,
	843, 798, 824, 825, 826, 827, 844, 0, 799, 0,
	337, 865, 866, 338, 339, 340, 867, 828, 829, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 845, 868,
	348, 349, 869, 0, 350, 351, 0, 0, 352, 0,
	353, 745, 744, 354, 355, 357, 787, 356, 870, 359,
	360, 362, 361, 740, 2671, 871, 771, 815, 363, 846,
	364, 365, 0, 796, 797, 0, 0, 368, 369, 0,
	0, 370, 241, 872, 371, 873, 847, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 848, 380, 244, 381,
	0, 382, 383, 384, 385, 386, 849, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 394, 397,
	398, 399, 400, 0, 401, 874, 402, 403, 404, 405,
	749, 406, 0, 410, 411, 412, 413, 414, 415, 416,
	0, 422, 423, 788, 789, 790, 791, 418, 424, 425,
	808, 426, 407, 408, 427, 875, 428, 850, 792, 430,
	0, 440, 431, 432, 433, 409, 434, 438, 830, 435,
	436, 437, 851, 0, 441, 442, 0, 443, 444, 445,
	446, 447, 308, 448, 309, 786, 450, 0, 852, 853,
	854, 831, 0, 0, 452, 453, 855, 856, 769, 454,
	455, 0, 456, 457, 0, 0, 458, 459, 460, 462,
	809, 463, 0, 793, 464, 465, 466, 254, 857, 0,
	0, 467, 256, 0, 0, 0, 0, 468, 469, 257,
	470, 471, 472, 741, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 737, 738, 1426, 775,
	763, 764, 761, 762, 754, 750, 0, 0, 0, 0,
	0, 753, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 811, 757, 0, 0, 0,
	263, 264, 265, 215, 832, 795, 833, 783, 819, 834,
	0, 269, 785, 784, 272, 273, 274, 758, 810, 835,
	836, 221, 0, 275, 817, 0, 800, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 860, 288, 289, 290, 803, 801,
	802, 807, 805, 804, 806, 291, 292, 495, 293, 820,
	295, 837, 838, 743, 296, 0, 297, 0, 298, 0,
	0, 821, 300, 0, 301, 302, 0, 0, 0, 748,
	306, 303, 304, 307, 310, 305, 311, 312, 839, 840,
	770, 861, 0, 0, 0, 0, 0, 313, 314, 841,
	822, 823, 0, 317, 0, 318, 0, 0, 862, 319,
	0, 320, 842, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 812, 813, 816, 864, 0, 814, 794, 0,
	0, 0, 1737, 327, 329, 336, 0, 863, 330, 843,
	798, 824, 825, 826, 827, 844, 0, 799, 0, 337,
	865, 866, 338, 339, 340, 867, 828, 829, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 845, 868, 348,
	349, 869, 0, 350, 351, 0, 0, 352, 0, 353,
	745, 744, 354, 355, 357, 787, 356, 870, 359, 360,
	362, 361, 740, 0, 871, 771, 815, 363, 846, 364,
	365, 0, 796, 797, 0, 0, 368, 369, 0, 0,
	370, 241, 872, 371, 873, 847, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 848, 380, 244, 381, 1736,
	382, 383, 384, 385, 386, 849, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 394, 397, 398,
	399, 400, 0, 401, 874, 402, 403, 404, 405, 749,
	406, 0, 410, 411, 412, 413, 414, 415, 416, 0,
	422, 423, 788, 789, 790, 791, 418, 424, 425, 808,
	426, 407, 408, 427, 875, 428, 850, 792, 430, 0,
	440, 431, 432, 433, 409, 434, 438, 830, 435, 436,
	437, 851, 0, 441, 442, 0, 443, 444, 445, 446,
	447, 308, 448, 309, 786, 450, 0, 852, 853, 854,
	831, 0, 0, 452, 453, 855, 856, 769, 454, 455,
	0, 456, 457, 0, 0, 458, 459, 460, 462, 809,
	463, 0, 793, 464, 465, 466, 254, 857, 0, 0,
	467, 256, 0, 0, 0, 0, 468, 469, 257, 470,
	471, 472, 741, 0, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 0, 737, 738, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 0, 733,
	753, 775, 763, 764, 761, 762, 754, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 811, 757, 0,
	0, 0, 263, 264, 265, 215, 832, 795, 833, 783,
	819, 834, 0, 269, 785, 784, 272, 273, 274, 758,
	810, 835, 836, 221, 0, 275, 817, 0, 800, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 860, 288, 289, 290,
	803, 801, 802, 807, 805, 804, 806, 291, 292, 495,
	293, 820, 295, 837, 838, 743, 296, 0, 297, 0,
	298, 0, 0, 821, 300, 0, 301, 302, 0, 0,
	0, 748, 306, 303, 304, 307, 310, 305, 311, 312,
	839, 840, 770, 861, 0, 0, 0, 0, 0, 313,
	314, 841, 822, 823, 0, 317, 0, 318, 0, 0,
	862, 319, 0, 320, 842, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 812, 813, 816, 864, 0, 814,
	794, 0, 0, 0, 0, 327, 329, 336, 0, 863,
	330, 843, 798, 824, 825, 826, 827, 844, 0, 799,
	0, 337, 865, 866, 338, 339, 340, 867, 828, 829,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 845,
	868, 348, 349, 869, 0, 350, 351, 0, 0, 352,
	0, 353, 745, 744, 354, 355, 357, 787, 356, 870,
	359, 360, 362, 361, 740, 0, 871, 771, 815, 363,
	846, 364, 365, 0, 796, 797, 735, 0, 368, 369,
	0, 0, 370, 241, 872, 371, 873, 847, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 848, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 849, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 874, 402, 403, 404,
	405, 749, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 788, 789, 790, 791, 418, 424,
	425, 808, 426, 407, 408, 427, 875, 428, 850, 792,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 830,
	435, 436, 437, 851, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 786, 450, 0, 852,
	853, 854, 831, 0, 0, 452, 453, 855, 856, 769,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 809, 463, 0, 793, 464, 465, 466, 254, 857,
	0, 0, 467, 256, 0, 0, 0, 0, 468, 469,
	257, 470, 471, 472, 741, 0, 0, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 0, 737, 738, 775,
	763, 764, 761, 762, 754, 0, 750, 0, 0, 0,
	0, 0, 753, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 811, 757, 0, 0, 0,
	263, 264, 265, 215, 832, 795, 833, 783, 819, 834,
	0, 269, 785, 784, 272, 273, 274, 758, 810, 835,
	836, 221, 0, 275, 817, 0, 800, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 860, 288, 289, 290, 803, 801,
	802, 807, 805, 804, 806, 291, 292, 495, 293, 820,
	295, 837, 838, 743, 296, 0, 297, 0, 298, 0,
	0, 821, 300, 0, 301, 302, 0, 0, 0, 748,
	306, 303, 304, 307, 310, 305, 311, 312, 839, 840,
	770, 861, 0, 0, 0, 0, 0, 313, 314, 841,
	822, 823, 0, 317, 0, 318, 0, 0, 862, 319,
	0, 320, 842, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 812, 813, 816, 864, 0, 814, 794, 0,
	0, 0, 0, 327, 329, 336, 0, 863, 330, 843,
	798, 824, 825, 826, 827, 844, 0, 799, 0, 337,
	865, 866, 338, 339, 340, 867, 828, 829, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 845, 868, 348,
	349, 869, 0, 350, 351, 0, 0, 352, 0, 353,
	745, 744, 354, 355, 357, 787, 356, 870, 359, 360,
	362, 361, 740, 0, 871, 771, 815, 363, 846, 364,
	365, 0, 796, 797, 0, 0, 368, 369, 0, 0,
	370, 241, 872, 371, 873, 847, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 848, 380, 244, 381, 0,
	382, 383, 384, 385, 386, 849, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 394, 397, 398,
	399, 400, 0, 401, 874, 402, 403, 404, 405, 749,
	406, 0, 410, 411, 412, 413, 414, 415, 416, 0,
	422, 423, 788, 789, 790, 791, 418, 424, 425, 808,
	426, 407, 408, 427, 875, 428, 850, 792, 430, 0,
	440, 431, 432, 433, 409, 434, 438, 830, 435, 436,
	437, 851, 0, 441, 442, 0, 443, 444, 445, 446,
	447, 308, 448, 309, 786, 450, 0, 852, 853, 854,
	831, 0, 0, 452, 453, 855, 856, 769, 454, 455,
	0, 456, 457, 0, 0, 458, 459, 460, 462, 809,
	463, 0, 793, 464, 465, 466, 254, 857, 2505, 0,
	467, 256, 0, 0, 0, 0, 468, 469, 257, 470,
	471, 472, 741, 0, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 0, 737, 738, 775, 763, 764,
	761, 762, 754, 0, 750, 0, 0, 0, 0, 0,
	753, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 811, 757, 0, 0, 0, 263, 264,
	265, 215, 832, 795, 833, 783, 819, 834, 0, 269,
	785, 784, 272, 273, 274, 758, 810, 835, 836, 221,
	0, 275, 817, 0, 800, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 860, 288, 289, 290, 803, 801, 802, 807,
	805, 804, 806, 291, 292, 495, 293, 820, 295, 837,
	838, 743, 296, 0, 297, 0, 298, 0, 0, 821,
	300, 0, 301, 302, 0, 0, 0, 748, 306, 303,
	304, 307, 310, 305, 311, 312, 839, 840, 770, 861,
	0, 0, 0, 0, 0, 313, 314, 841, 822, 823,
	0, 317, 0, 318, 0, 0, 862, 319, 0, 320,
	842, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	812, 813, 816, 864, 0, 814, 794, 0, 0, 0,
	0, 327, 329, 336, 0, 863, 330, 843, 798, 824,
	825, 826, 827, 844, 0, 799, 0, 337, 865, 866,
	338, 339, 340, 867, 828, 829, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 845, 868, 348, 349, 869,
	0, 350, 351, 0, 0, 352, 0, 353, 745, 744,
	354, 355, 357, 787, 356, 870, 359, 360, 362, 361,
	740, 0, 871, 771, 815, 363, 846, 364, 365, 0,
	796, 797, 735, 0, 368, 369, 0, 0, 370, 241,
	872, 371, 873, 847, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 848, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 849, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 874, 402, 403, 404, 405, 749, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 0, 422, 423,
	788, 789, 790, 791, 418, 424, 425, 808, 426, 407,
	408, 427, 875, 428, 850, 792, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 830, 435, 436, 437, 851,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 786, 450, 0, 852, 853, 854, 831, 0,
	0, 452, 453, 855, 856, 769, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 809, 463, 0,
	793, 464, 465, 466, 254, 857, 0, 0, 467, 256,
	0, 0, 0, 0, 468, 469, 257, 470, 471, 472,
	741, 0, 0, 0, 0, 0, 0, 0, 739, 0,
	0, 0, 0, 737, 738, 0, 0, 0, 0, 0,
	0, 0, 750, 0, 0, 0, 0, 2315, 753, 775,
	763, 764, 761, 762, 754, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 811, 757, 0, 0, 0,
	263, 264, 265, 215, 832, 795, 833, 783, 819, 834,
	0, 269, 785, 784, 272, 273, 274, 758, 810, 835,
	836, 221, 0, 275, 817, 0, 800, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 860, 288, 289, 290, 803, 801,
	802, 807, 805, 804, 806, 291, 292, 495, 293, 820,
	295, 837, 838, 743, 296, 0, 297, 0, 298, 0,
	0, 821, 300, 0, 301, 302, 0, 0, 0, 748,
	306, 303, 304, 307, 310, 305, 311, 312, 839, 840,
	770, 861, 0, 0, 0, 0, 0, 313, 314, 841,
	822, 823, 0, 317, 0, 318, 0, 0, 862, 319,
	0, 320, 842, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 812, 813, 816, 864, 0, 814, 794, 0,
	0, 0, 0, 327, 329, 336, 0, 863, 330, 843,
	798, 824, 825, 826, 827, 844, 0, 799, 0, 337,
	865, 866, 338, 339, 340, 867, 828, 829, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 845, 868, 348,
	349, 869, 0, 350, 351, 0, 0, 352, 0, 353,
	745, 744, 354, 355, 357, 787, 356, 870, 359, 360,
	362, 361, 740, 0, 871, 771, 815, 363, 846, 364,
	365, 0, 796, 797, 0, 0, 368, 369, 0, 0,
	370, 241, 872, 371, 873, 847, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 848, 380, 244, 381, 0,
	382, 383, 384, 385, 386, 849, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 394, 397, 398,
	399, 400, 0, 401, 874, 402, 403, 404, 405, 749,
	406, 0, 410, 411, 412, 413, 414, 415, 416, 0,
	422, 423, 788, 789, 790, 791, 418, 424, 425, 808,
	426, 407, 408, 427, 875, 428, 850, 792, 430, 0,
	440, 431, 432, 433, 409, 434, 438, 830, 435, 436,
	437, 851, 0, 441, 442, 0, 443, 444, 445, 446,
	447, 308, 448, 309, 786, 450, 0, 852, 853, 854,
	831, 0, 0, 452, 453, 855, 856, 769, 454, 455,
	0, 456, 457, 0, 0, 458, 459, 460, 462, 809,
	463, 0, 793, 464, 465, 466, 254, 857, 0, 0,
	467, 256, 0, 0, 0, 0, 468, 469, 257, 470,
	471, 472, 741, 0, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 0, 737, 738, 775, 763, 764,
	761, 762, 754, 0, 750, 0, 0, 0, 0, 0,
	753, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 811, 757, 0, 0, 0, 263, 264,
	265, 215, 832, 795, 833, 783, 819, 834, 0, 269,
	785, 784, 272, 273, 274, 758, 810, 835, 836, 221,
	0, 275, 817, 0, 800, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 860, 288, 289, 290, 803, 801, 802, 807,
	805, 804, 806, 291, 292, 495, 293, 820, 295, 837,
	838, 743, 296, 0, 297, 0, 298, 0, 0, 821,
	300, 0, 301, 302, 0, 0, 0, 748, 306, 303,
	304, 307, 310, 305, 311, 312, 839, 840, 770, 861,
	0, 0, 0, 0, 0, 313, 314, 841, 822, 823,
	0, 317, 0, 318, 0, 0, 862, 319, 0, 320,
	842, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	812, 813, 816, 864, 0, 814, 794, 0, 0, 0,
	0, 327, 329, 336, 0, 863, 330, 843, 798, 824,
	825, 826, 827, 844, 0, 799, 0, 337, 865, 866,
	338, 339, 340, 867, 828, 829, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 845, 868, 348, 349, 869,
	0, 350, 351, 0, 0, 352, 0, 353, 745, 744,
	354, 355, 357, 787, 356, 870, 359, 360, 362, 361,
	740, 0, 871, 771, 815, 363, 846, 364, 365, 0,
	796, 797, 0, 0, 368, 369, 0, 0, 370, 241,
	872, 371, 873, 847, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 848, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 849, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 874, 402, 403, 404, 405, 749, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 0, 422, 423,
	788, 789, 790, 791, 418, 424, 425, 808, 426, 407,
	408, 427, 875, 428, 850, 792, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 830, 435, 436, 437, 851,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 786, 450, 0, 852, 853, 854, 831, 0,
	0, 452, 453, 855, 856, 769, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 809, 463, 0,
	793, 464, 465, 466, 254, 857, 0, 0, 467, 256,
	0, 0, 0, 0, 468, 469, 257, 470, 471, 472,
	741, 0, 0, 0, 0, 0, 0, 0, 739, 0,
	0, 0, 0, 737, 738, 1426, 775, 763, 764, 761,
	762, 754, 750, 0, 0, 0, 0, 0, 753, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 811, 757, 0, 0, 0, 263, 264, 265,
	215, 832, 795, 833, 783, 819, 834, 0, 269, 785,
	784, 272, 273, 274, 758, 810, 835, 836, 221, 0,
	275, 817, 0, 800, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 860, 288, 289, 290, 803, 801, 802, 807, 805,
	804, 806, 291, 292, 495, 293, 820, 295, 837, 838,
	743, 296, 0, 297, 0, 298, 0, 0, 821, 300,
	0, 301, 302, 0, 0, 0, 748, 306, 303, 304,
	307, 310, 305, 311, 312, 839, 840, 770, 861, 0,
	0, 0, 0, 0, 313, 314, 841, 822, 823, 0,
	317, 0, 318, 0, 1916, 862, 319, 0, 320, 842,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 812,
	813, 816, 864, 0, 814, 794, 0, 0, 0, 0,
	327, 329, 336, 0, 863, 330, 843, 798, 824, 825,
	826, 827, 844, 0, 799, 0, 337, 865, 866, 338,
	339, 340, 867, 828, 829, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 845, 868, 348, 349, 869, 0,
	350, 351, 0, 0, 352, 0, 353, 745, 744, 354,
	355, 357, 787, 356, 870, 359, 360, 362, 361, 740,
	0, 871, 771, 815, 363, 846, 364, 365, 0, 796,
	797, 0, 0, 368, 369, 0, 0, 370, 241, 872,
	371, 873, 847, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 848, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 849, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 874, 402, 403, 404, 405, 749, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 788,
	789, 790, 791, 418, 424, 425, 808, 426, 407, 408,
	427, 875, 428, 850, 792, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 830, 435, 436, 437, 851, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 786, 450, 0, 852, 853, 854, 831, 0, 0,
	452, 453, 855, 856, 769, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 809, 463, 0, 793,
	464, 465, 466, 254, 857, 0, 0, 467, 256, 0,
	0, 0, 0, 468, 469, 257, 470, 471, 472, 741,
	0, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 0, 737, 738, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 0, 0, 0, 1950, 753, 775, 763,
	764, 761, 762, 754, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 811, 757, 0, 0, 0, 263,
	264, 265, 215, 832, 795, 833, 783, 819, 834, 0,
	269, 785, 784, 272, 273, 274, 758, 810, 835, 836,
	221, 0, 275, 817, 0, 800, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 860, 288, 289, 290, 803, 801, 802,
	807, 805, 804, 806, 291, 292, 495, 293, 820, 295,
	837, 838, 743, 296, 0, 297, 0, 298, 0, 0,
	821, 300, 0, 301, 302, 0, 0, 0, 748, 306,
	303, 304, 307, 310, 305, 311, 312, 839, 840, 770,
	861, 0, 0, 0, 0, 0, 313, 314, 841, 822,
	823, 0, 317, 0, 318, 0, 0, 862, 319, 0,
	320, 842, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 812, 813, 816, 864, 0, 814, 794, 0, 0,
	0, 0, 327, 329, 336, 0, 863, 330, 843, 798,
	824, 825, 826, 827, 844, 0, 799, 0, 337, 865,
	866, 338, 339, 340, 867, 828, 829, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 845, 868, 348, 349,
	869, 0, 350, 351, 0, 0, 352, 0, 353, 745,
	744, 354, 355, 357, 787, 356, 870, 359, 360, 362,
	361, 740, 0, 871, 771, 815, 363, 846, 364, 365,
	0, 796, 797, 0, 0, 368, 369, 0, 0, 370,
	241, 872, 371, 873, 847, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 848, 380, 244, 381, 0, 382,
	383, 384, 385, 386, 849, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 394, 397, 398, 399,
	400, 0, 401, 874, 402, 403, 404, 405, 749, 406,
	0, 410, 411, 412, 413, 414, 415, 416, 0, 422,
	423, 788, 789, 790, 791, 418, 424, 425, 808, 426,
	407, 408, 427, 875, 428, 850, 792, 430, 0, 440,
	431, 432, 433, 409, 434, 438, 830, 435, 436, 437,
	851, 0, 441, 442, 0, 443, 444, 445, 446, 447,
	308, 448, 309, 786, 450, 0, 852, 853, 854, 831,
	0, 0, 452, 453, 855, 856, 769, 454, 455, 0,
	456, 457, 0, 0, 458, 459, 460, 462, 809, 463,
	0, 793, 464, 465, 466, 254, 857, 0, 0, 467,
	256, 0, 0, 0, 0, 468, 469, 257, 470, 471,
	472, 741, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 737, 738, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 1903, 753,
	775, 763, 764, 761, 762, 754, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 811, 757, 0, 0,
	0, 263, 264, 265, 215, 832, 795, 833, 783, 819,
	834, 0, 269, 785, 784, 272, 273, 274, 758, 810,
	835, 836, 221, 0, 275, 817, 0, 800, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 860, 288, 289, 290, 803,
	801, 802, 807, 805, 804, 806, 291, 292, 495, 293,
	820, 295, 837, 838, 743, 296, 0, 297, 0, 298,
	0, 0, 821, 300, 0, 301, 302, 0, 0, 0,
	748, 306, 303, 304, 307, 310, 305, 311, 312, 839,
	840, 770, 861, 0, 0, 0, 0, 0, 313, 314,
	841, 822, 823, 0, 317, 0, 318, 0, 0, 862,
	319, 0, 320, 842, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 812, 813, 816, 864, 0, 814, 794,
	0, 0, 0, 0, 327, 329, 336, 0, 863, 330,
	843, 798, 824, 825, 826, 827, 844, 0, 799, 0,
	337, 865, 866, 338, 339, 340, 867, 828, 829, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 845, 868,
	348, 349, 869, 0, 350, 351, 0, 0, 352, 0,
	353, 745, 744, 354, 355, 357, 787, 356, 870, 359,
	360, 362, 361, 740, 0, 871, 771, 815, 363, 846,
	364, 365, 0, 796, 797, 0, 0, 368, 369, 0,
	0, 370, 241, 872, 371, 873, 847, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 848, 380, 244, 381,
	0, 382, 383, 384, 385, 386, 849, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 394, 397,
	398, 399, 400, 0, 401, 874, 402, 403, 404, 405,
	749, 406, 0, 410, 411, 412, 413, 414, 415, 416,
	0, 422, 423, 788, 789, 790, 791, 418, 424, 425,
	808, 426, 407, 408, 427, 875, 428, 850, 792, 430,
	0, 440, 431, 432, 433, 409, 434, 438, 830, 435,
	436, 437, 851, 0, 441, 442, 0, 443, 444, 445,
	446, 447, 308, 448, 309, 786, 450, 0, 852, 853,
	854, 831, 0, 0, 452, 453, 855, 856, 769, 454,
	455, 0, 456, 457, 0, 0, 458, 459, 460, 462,
	809, 463, 0, 793, 464, 465, 466, 254, 857, 0,
	0, 467, 256, 0, 0, 0, 0, 468, 469, 257,
	470, 471, 472, 741, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 737, 738, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	1892, 753, 775, 763, 764, 761, 762, 754, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 811, 757,
	0, 0, 0, 263, 264, 265, 215, 832, 795, 833,
	783, 819, 834, 0, 269, 785, 784, 272, 273, 274,
	758, 810, 835, 836, 221, 0, 275, 817, 0, 800,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 860, 288, 289,
	290, 803, 801, 802, 807, 805, 804, 806, 291, 292,
	495, 293, 820, 295, 837, 838, 743, 296, 0, 297,
	0, 298, 0, 0, 821, 300, 0, 301, 302, 0,
	0, 0, 748, 306, 303, 304, 307, 310, 305, 311,
	312, 839, 840, 770, 861, 0, 0, 0, 0, 0,
	313, 314, 841, 822, 823, 0, 317, 0, 318, 0,
	0, 862, 319, 0, 320, 842, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 812, 813, 816, 864, 0,
	814, 794, 0, 0, 0, 0, 327, 329, 336, 0,
	863, 330, 843, 798, 824, 825, 826, 827, 844, 0,
	799, 0, 337, 865, 866, 338, 339, 340, 867, 828,
	829, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	845, 868, 348, 349, 869, 0, 350, 351, 0, 0,
	352, 0, 353, 745, 744, 354, 355, 357, 787, 356,
	870, 359, 360, 362, 361, 740, 0, 871, 771, 815,
	363, 846, 364, 365, 0, 796, 797, 0, 0, 368,
	369, 0, 0, 370, 241, 872, 371, 873, 847, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 848, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 849, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 874, 402, 403,
	404, 405, 749, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 788, 789, 790, 791, 418,
	424, 425, 808, 426, 407, 408, 427, 875, 428, 850,
	792, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	830, 435, 436, 437, 851, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 786, 450, 0,
	852, 853, 854, 831, 0, 0, 452, 453, 855, 856,
	769, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 809, 463, 0, 793, 464, 465, 466, 254,
	857, 0, 0, 467, 256, 0, 0, 0, 0, 468,
	469, 257, 470, 471, 472, 741, 0, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 737, 738,
	0, 0, 0, 0, 0, 0, 0, 750, 0, 0,
	0, 0, 1890, 753, 775, 763, 764, 761, 762, 754,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	811, 757, 0, 0, 0, 263, 264, 265, 215, 832,
	795, 833, 783, 819, 834, 0, 269, 785, 784, 272,
	273, 274, 758, 810, 835, 836, 221, 0, 275, 817,
	0, 800, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 860,
	288, 289, 290, 803, 801, 802, 807, 805, 804, 806,
	291, 292, 495, 293, 820, 295, 837, 838, 743, 296,
	0, 297, 0, 298, 0, 0, 821, 300, 0, 301,
	302, 0, 0, 0, 748, 306, 303, 304, 307, 310,
	305, 311, 312, 839, 840, 770, 861, 0, 0, 0,
	0, 0, 313, 314, 841, 822, 823, 0, 317, 0,
	318, 0, 0, 862, 319, 0, 320, 842, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 812, 813, 816,
	864, 0, 814, 794, 0, 0, 0, 0, 327, 329,
	336, 0, 863, 330, 843, 798, 824, 825, 826, 827,
	844, 0, 799, 0, 337, 865, 866, 338, 339, 340,
	867, 828, 829, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 845, 868, 348, 349, 869, 0, 350, 351,
	0, 0, 352, 0, 353, 745, 744, 354, 355, 357,
	787, 356, 870, 359, 360, 362, 361, 740, 0, 871,
	771, 815, 363, 846, 364, 365, 0, 796, 797, 0,
	0, 368, 369, 0, 0, 370, 241, 872, 371, 873,
	847, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	848, 380, 244, 381, 0, 382, 383, 384, 385, 386,
	849, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 394, 397, 398, 399, 400, 0, 401, 874,
	402, 403, 404, 405, 749, 406, 0, 410, 411, 412,
	413, 414, 415, 416, 0, 422, 423, 788, 789, 790,
	791, 418, 424, 425, 808, 426, 407, 408, 427, 875,
	428, 850, 792, 430, 0, 440, 431, 432, 433, 409,
	434, 438, 830, 435, 436, 437, 851, 0, 441, 442,
	0, 443, 444, 445, 446, 447, 308, 448, 309, 786,
	450, 0, 852, 853, 854, 831, 0, 0, 452, 453,
	855, 856, 769, 454, 455, 0, 456, 457, 0, 0,
	458, 459, 460, 462, 809, 463, 0, 793, 464, 465,
	466, 254, 857, 0, 0, 467, 256, 0, 0, 0,
	0, 468, 469, 257, 470, 471, 472, 741, 0, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	737, 738, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 1888, 753, 775, 763, 764, 761,
	762, 754, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 811, 757, 0, 0, 0, 263, 264, 265,
	215, 832, 795, 833, 783, 819, 834, 0, 269, 785,
	784, 272, 273, 274, 758, 810, 835, 836, 221, 0,
	275, 817, 0, 800, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 860, 288, 289, 290, 803, 801, 802, 807, 805,
	804, 806, 291, 292, 495, 293, 820, 295, 837, 838,
	743, 296, 0, 297, 0, 298, 0, 0, 821, 300,
	0, 301, 302, 0, 0, 0, 748, 306, 303, 304,
	307, 310, 305, 311, 312, 839, 840, 770, 861, 0,
	0, 0, 0, 0, 313, 314, 841, 822, 823, 0,
	317, 0, 318, 0, 0, 862, 319, 0, 320, 842,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 812,
	813, 816, 864, 0, 814, 794, 0, 0, 0, 0,
	327, 329, 336, 0, 863, 330, 843, 798, 824, 825,
	826, 827, 844, 0, 799, 0, 337, 865, 866, 338,
	339, 340, 867, 828, 829, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 845, 868, 348, 349, 869, 0,
	350, 351, 0, 0, 352, 0, 353, 745, 744, 354,
	355, 357, 787, 356, 870, 359, 360, 362, 361, 740,
	0, 871, 771, 815, 363, 846, 364, 365, 0, 796,
	797, 0, 0, 368, 369, 0, 0, 370, 241, 872,
	371, 873, 847, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 848, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 849, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 874, 402, 403, 404, 405, 749, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 788,
	789, 790, 791, 418, 424, 425, 808, 426, 407, 408,
	427, 875, 428, 850, 792, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 830, 435, 436, 437, 851, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 786, 450, 0, 852, 853, 854, 831, 0, 0,
	452, 453, 855, 856, 769, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 809, 463, 0, 793,
	464, 465, 466, 254, 857, 0, 0, 467, 256, 0,
	0, 0, 0, 468, 469, 257, 470, 471, 472, 741,
	0, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 0, 737, 738, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 0, 0, 0, 1885, 753, 1877, 763,
	764, 761, 762, 754, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 811, 757, 0, 0, 0, 263,
	264, 265, 215, 832, 795, 833, 783, 819, 834, 0,
	269, 785, 784, 272, 273, 274, 758, 810, 835, 836,
	221, 0, 275, 817, 0, 800, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 860, 288, 289, 290, 803, 801, 802,
	807, 805, 804, 806, 291, 292, 495, 293, 820, 1880,
	837, 838, 743, 296, 0, 297, 0, 298, 0, 0,
	821, 300, 0, 301, 302, 0, 0, 0, 748, 306,
	303, 304, 307, 310, 305, 311, 312, 839, 840, 770,
	861, 0, 0, 0, 0, 0, 313, 314, 841, 822,
	823, 0, 317, 0, 318, 0, 0, 862, 319, 0,
	320, 842, 0, 230, 0, 321, 322, 1881, 324, 325,
	326, 812, 813, 816, 864, 0, 814, 794, 0, 0,
	0, 0, 327, 329, 336, 0, 863, 330, 843, 798,
	824, 825, 826, 827, 844, 0, 799, 0, 337, 865,
	866, 338, 339, 340, 867, 828, 829, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 845, 868, 348, 349,
	869, 0, 350, 351, 0, 0, 352, 0, 353, 745,
	744, 1882, 1879, 357, 787, 356, 870, 359, 360, 362,
	361, 740, 0, 871, 771, 815, 363, 846, 364, 365,
	0, 796, 797, 0, 0, 368, 369, 0, 0, 370,
	241, 872, 371, 873, 847, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 848, 380, 244, 381, 0, 382,
	383, 384, 385, 386, 849, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 394, 397, 398, 399,
	400, 0, 401, 874, 402, 403, 404, 405, 749, 406,
	0, 410, 411, 412, 413, 414, 415, 1883, 0, 422,
	423, 788, 789, 790, 791, 418, 424, 425, 808, 426,
	407, 408, 427, 875, 428, 850, 792, 430, 0, 440,
	431, 432, 433, 409, 434, 438, 830, 435, 436, 437,
	851, 0, 441, 442, 0, 443, 444, 445, 446, 447,
	308, 448, 309, 786, 450, 0, 852, 853, 854, 831,
	0, 0, 452, 453, 855, 856, 769, 454, 455, 0,
	456, 457, 0, 0, 458, 459, 460, 462, 809, 463,
	0, 793, 464, 465, 466, 254, 857, 0, 0, 467,
	256, 0, 0, 0, 0, 468, 469, 257, 470, 1878,
	472, 741, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 737, 738, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 1874, 753,
	1877, 763, 764, 761, 762, 754, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 811, 757, 0, 0,
	0, 263, 264, 265, 215, 832, 795, 833, 783, 819,
	834, 0, 269, 785, 784, 272, 273, 274, 758, 810,
	835, 836, 221, 0, 275, 817, 0, 800, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 860, 288, 289, 290, 803,
	801, 802, 807, 805, 804, 806, 291, 292, 495, 293,
	820, 1880, 837, 838, 743, 296, 0, 297, 0, 298,
	0, 0, 821, 300, 0, 301, 302, 0, 0, 0,
	748, 306, 303, 304, 307, 310, 305, 311, 312, 839,
	840, 770, 861, 0, 0, 0, 0, 0, 313, 314,
	841, 822, 823, 0, 317, 0, 318, 0, 0, 862,
	319, 0, 320, 842, 0, 230, 0, 321, 322, 1881,
	324, 325, 326, 812, 813, 816, 864, 0, 814, 794,
	0, 0, 0, 0, 327, 329, 336, 0, 863, 330,
	843, 798, 824, 825, 826, 827, 844, 0, 799, 0,
	337, 865, 866, 338, 339, 340, 867, 828, 829, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 845, 868,
	348, 349, 869, 0, 350, 351, 0, 0, 352, 0,
	353, 745, 744, 1882, 1879, 357, 787, 356, 870, 359,
	360, 362, 361, 740, 0, 871, 771, 815, 363, 846,
	364, 365, 0, 796, 797, 0, 0, 368, 369, 0,
	0, 370, 241, 872, 371, 873, 847, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 848, 380, 244, 381,
	0, 382, 383, 384, 385, 386, 849, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 394, 397,
	398, 399, 400, 0, 401, 874, 402, 403, 404, 405,
	749, 406, 0, 410, 411, 412, 413, 414, 415, 1883,
	0, 422, 423, 788, 789, 790, 791, 418, 424, 425,
	808, 426, 407, 408, 427, 875, 428, 850, 792, 430,
	0, 440, 431, 432, 433, 409, 434, 438, 830, 435,
	436, 437, 851, 0, 441, 442, 0, 443, 444, 445,
	446, 447, 308, 448, 309, 786, 450, 0, 852, 853,
	854, 831, 0, 0, 452, 453, 855, 856, 769, 454,
	455, 0, 456, 457, 0, 0, 458, 459, 460, 462,
	809, 463, 0, 793, 464, 465, 466, 254, 857, 0,
	0, 467, 256, 0, 0, 0, 0, 468, 469, 257,
	470, 1878, 472, 741, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 737, 738, 775, 763,
	764, 761, 762, 754, 0, 750, 0, 0, 0, 0,
	0, 753, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 811, 757, 0, 0, 0, 263,
	264, 265, 215, 832, 795, 833, 783, 819, 834, 0,
	269, 785, 784, 272, 273, 274, 758, 810, 835, 836,
	221, 0, 275, 817, 0, 800, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 860, 288, 289, 290, 803, 801, 802,
	807, 805, 804, 806, 291, 292, 495, 293, 820, 295,
	837, 838, 743, 296, 0, 297, 0, 298, 0, 0,
	821, 300, 0, 301, 302, 0, 0, 0, 748, 306,
	303, 304, 307, 310, 305, 311, 312, 839, 840, 770,
	861, 0, 0, 0, 0, 0, 313, 314, 841, 822,
	823, 0, 317, 0, 318, 0, 0, 862, 319, 0,
	320, 842, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 812, 813, 816, 864, 0, 814, 794, 0, 0,
	0, 0, 327, 329, 336, 0, 863, 330, 843, 798,
	824, 825, 826, 827, 844, 0, 799, 0, 337, 865,
	866, 338, 339, 340, 867, 828, 829, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 845, 868, 348, 349,
	869, 0, 350, 351, 0, 0, 352, 0, 353, 745,
	744, 354, 355, 357, 787, 356, 870, 359, 360, 362,
	361, 740, 0, 871, 771, 815, 363, 846, 364, 365,
	0, 796, 797, 0, 0, 368, 369, 0, 0, 370,
	241, 872, 371, 873, 847, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 848, 380, 244, 381, 0, 382,
	383, 384, 385, 386, 849, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 394, 397, 398, 399,
	400, 0, 401, 874, 402, 403, 404, 405, 749, 406,
	0, 410, 411, 412, 413, 414, 415, 416, 0, 422,
	423, 788, 789, 790, 791, 418, 424, 425, 808, 426,
	407, 408, 427, 875, 428, 850, 792, 430, 0, 440,
	431, 432, 433, 409, 434, 438, 830, 435, 436, 437,
	851, 0, 441, 442, 0, 443, 444, 445, 446, 447,
	308, 448, 309, 786, 450, 0, 852, 853, 854, 831,
	0, 0, 452, 453, 855, 856, 769, 454, 455, 0,
	456, 457, 0, 0, 458, 459, 460, 462, 809, 463,
	0, 793, 464, 465, 466, 254, 857, 0, 0, 467,
	256, 0, 0, 0, 0, 468, 469, 257, 470, 471,
	472, 741, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 737, 738, 0, 0, 0, 0,
	0, 1366, 0, 750, 0, 0, 0, 0, 0, 753,
	775, 763, 764, 761, 762, 754, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	1724, 262, 0, 0, 0, 0, 811, 757, 0, 0,
	0, 263, 264, 265, 215, 832, 795, 833, 783, 819,
	834, 0, 269, 785, 784, 272, 273, 274, 758, 810,
	835, 836, 221, 0, 275, 817, 0, 800, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 860, 288, 289, 290, 803,
	801, 802, 807, 805, 804, 806, 291, 292, 495, 293,
	820, 295, 837, 838, 743, 296, 0, 297, 0, 298,
	0, 0, 821, 300, 0, 301, 302, 0, 0, 0,
	748, 306, 303, 304, 307, 310, 305, 311, 312, 839,
	840, 770, 861, 0, 0, 0, 0, 0, 313, 314,
	841, 822, 823, 0, 317, 0, 318, 0, 0, 862,
	319, 0, 320, 842, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 812, 813, 816, 864, 0, 814, 794,
	0, 0, 0, 0, 327, 329, 336, 0, 863, 330,
	843, 798, 824, 825, 826, 827, 844, 0, 799, 0,
	337, 865, 866, 338, 339, 340, 867, 828, 829, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 845, 868,
	348, 349, 869, 0, 350, 351, 0, 0, 352, 0,
	353, 745, 744, 354, 355, 357, 787, 356, 870, 359,
	360, 362, 361, 740, 0, 871, 771, 815, 363, 846,
	364, 365, 0, 796, 797, 0, 0, 368, 369, 0,
	0, 370, 241, 872, 371, 873, 847, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 848, 380, 244, 381,
	0, 382, 383, 384, 385, 386, 849, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 394, 397,
	398, 399, 400, 0, 401, 874, 402, 403, 404, 405,
	749, 406, 0, 410, 411, 412, 413, 414, 415, 416,
	0, 422, 423, 788, 789, 790, 791, 418, 424, 425,
	808, 426, 407, 408, 427, 875, 428, 850, 792, 430,
	0, 440, 431, 432, 433, 409, 434, 438, 830, 435,
	436, 437, 851, 0, 441, 442, 0, 443, 444, 445,
	446, 447, 308, 448, 309, 786, 450, 0, 852, 853,
	854, 831, 0, 0, 452, 453, 855, 856, 769, 454,
	455, 0, 456, 457, 0, 0, 458, 459, 460, 462,
	809, 463, 0, 793, 464, 465, 466, 254, 857, 0,
	0, 467, 256, 0, 0, 0, 0, 468, 469, 257,
	470, 471, 472, 741, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 737, 738, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	1073, 753, 775, 763, 764, 761, 762, 754, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 811, 757,
	0, 0, 0, 263, 264, 265, 215, 832, 795, 833,
	783, 819, 834, 0, 269, 785, 784, 272, 273, 274,
	758, 810, 835, 836, 221, 0, 275, 817, 0, 800,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 860, 288, 289,
	290, 803, 801, 802, 807, 805, 804, 806, 291, 292,
	495, 293, 820, 295, 837, 838, 743, 296, 0, 297,
	0, 298, 0, 0, 821, 300, 0, 301, 302, 0,
	0, 0, 748, 306, 303, 304, 307, 310, 305, 311,
	312, 839, 840, 770, 861, 0, 0, 0, 0, 0,
	313, 314, 841, 822, 823, 0, 317, 0, 318, 0,
	0, 862, 319, 0, 320, 842, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 1072, 813, 816, 864, 0,
	814, 794, 0, 0, 0, 0, 327, 329, 336, 0,
	863, 330, 843, 798, 824, 825, 826, 827, 844, 0,
	799, 0, 337, 865, 866, 338, 339, 340, 867, 828,
	829, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	845, 868, 348, 349, 869, 0, 350, 351, 0, 0,
	352, 0, 353, 745, 744, 354, 355, 357, 787, 356,
	870, 359, 360, 362, 361, 740, 0, 871, 771, 815,
	363, 846, 364, 365, 0, 796, 797, 0, 0, 368,
	369, 0, 0, 370, 241, 872, 371, 873, 847, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 848, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 849, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 874, 402, 403,
	404, 405, 749, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 788, 789, 790, 791, 418,
	424, 425, 808, 426, 407, 408, 427, 875, 428, 850,
	792, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	830, 435, 436, 437, 851, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 786, 450, 0,
	852, 853, 854, 831, 0, 0, 452, 453, 855, 856,
	769, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 809, 463, 0, 793, 464, 465, 466, 254,
	857, 0, 0, 467, 256, 0, 0, 0, 0, 468,
	469, 257, 470, 471, 472, 741, 0, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 737, 738,
	0, 0, 0, 0, 0, 0, 0, 750, 0, 0,
	0, 0, 1067, 753, 775, 763, 764, 761, 762, 754,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	811, 757, 0, 0, 0, 263, 264, 265, 215, 832,
	795, 833, 783, 819, 834, 0, 269, 785, 784, 272,
	273, 274, 758, 810, 835, 836, 221, 0, 275, 817,
	0, 800, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 860,
	288, 289, 290, 803, 801, 802, 807, 805, 804, 806,
	291, 292, 495, 293, 820, 295, 837, 838, 743, 296,
	0, 297, 0, 298, 0, 0, 821, 300, 0, 301,
	302, 0, 0, 0, 748, 306, 303, 304, 307, 310,
	305, 311, 312, 839, 840, 770, 861, 0, 0, 0,
	0, 0, 313, 314, 841, 822, 823, 0, 317, 0,
	318, 0, 0, 862, 319, 0, 320, 842, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 1066, 813, 816,
	864, 0, 814, 794, 0, 0, 0, 0, 327, 329,
	336, 0, 863, 330, 843, 798, 824, 825, 826, 827,
	844, 0, 799, 0, 337, 865, 866, 338, 339, 340,
	867, 828, 829, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 845, 868, 348, 349, 869, 0, 350, 351,
	0, 0, 352, 0, 353, 745, 744, 354, 355, 357,
	787, 356, 870, 359, 360, 362, 361, 740, 0, 871,
	771, 815, 363, 846, 364, 365, 0, 796, 797, 0,
	0, 368, 369, 0, 0, 370, 241, 872, 371, 873,
	847, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	848, 380, 244, 381, 0, 382, 383, 384, 385, 386,
	849, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 394, 397, 398, 399, 400, 0, 401, 874,
	402, 403, 404, 405, 749, 406, 0, 410, 411, 412,
	413, 414, 415, 416, 0, 422, 423, 788, 789, 790,
	791, 418, 424, 425, 808, 426, 407, 408, 427, 875,
	428, 850, 792, 430, 0, 440, 431, 432, 433, 409,
	434, 438, 830, 435, 436, 437, 851, 0, 441, 442,
	0, 443, 444, 445, 446, 447, 308, 448, 309, 786,
	450, 0, 852, 853, 854, 831, 0, 0, 452, 453,
	855, 856, 769, 454, 455, 0, 456, 457, 0, 0,
	458, 459, 460, 462, 809, 463, 0, 793, 464, 465,
	466, 254, 857, 0, 0, 467, 256, 0, 0, 0,
	0, 468, 469, 257, 470, 471, 472, 741, 0, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	737, 738, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 1062, 753, 775, 763, 764, 761,
	762, 754, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 811, 757, 0, 0, 0, 263, 264, 265,
	215, 832, 795, 833, 783, 819, 834, 0, 269, 785,
	784, 272, 273, 274, 758, 810, 835, 836, 221, 0,
	275, 817, 0, 800, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 860, 288, 289, 290, 803, 801, 802, 807, 805,
	804, 806, 291, 292, 495, 293, 820, 295, 837, 838,
	743, 296, 0, 297, 0, 298, 0, 0, 821, 300,
	0, 301, 302, 0, 0, 0, 748, 306, 303, 304,
	307, 310, 305, 311, 312, 839, 840, 770, 861, 0,
	0, 0, 0, 0, 313, 314, 841, 822, 823, 0,
	317, 0, 318, 0, 0, 862, 319, 0, 320, 842,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 812,
	813, 816, 864, 0, 814, 794, 0, 0, 0, 0,
	327, 329, 336, 0, 863, 330, 843, 798, 824, 825,
	826, 827, 844, 0, 799, 0, 337, 865, 866, 338,
	339, 340, 867, 828, 829, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 845, 868, 348, 349, 869, 0,
	350, 351, 0, 0, 352, 0, 353, 745, 744, 354,
	355, 357, 787, 356, 870, 359, 360, 362, 361, 740,
	0, 871, 771, 815, 363, 846, 364, 365, 0, 796,
	797, 0, 0, 368, 369, 0, 0, 370, 241, 872,
	371, 873, 847, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 848, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 849, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 874, 402, 403, 404, 405, 749, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 788,
	789, 790, 791, 418, 424, 425, 808, 426, 407, 408,
	427, 875, 428, 850, 792, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 830, 435, 436, 437, 851, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 786, 450, 0, 852, 853, 854, 831, 0, 0,
	452, 453, 855, 856, 769, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 809, 463, 0, 793,
	464, 465, 466, 254, 857, 0, 0, 467, 256, 0,
	0, 0, 0, 468, 469, 257, 470, 471, 472, 741,
	0, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 0, 737, 738, 775, 763, 764, 761, 762, 754,
	0, 750, 0, 0, 0, 0, 0, 753, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	811, 757, 0, 0, 0, 263, 264, 265, 215, 832,
	795, 833, 783, 819, 834, 0, 269, 785, 784, 272,
	273, 274, 758, 810, 835, 836, 221, 0, 275, 817,
	0, 800, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 860,
	288, 289, 290, 803, 801, 802, 807, 805, 804, 806,
	291, 292, 495, 293, 820, 295, 837, 838, 743, 296,
	0, 297, 0, 298, 0, 0, 821, 300, 0, 301,
	302, 0, 0, 0, 748, 306, 303, 304, 307, 310,
	305, 311, 312, 839, 840, 770, 861, 0, 0, 0,
	0, 0, 313, 314, 841, 822, 823, 0, 317, 0,
	318, 0, 0, 862, 319, 0, 320, 842, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 812, 813, 816,
	864, 0, 814, 794, 0, 0, 0, 0, 327, 329,
	336, 0, 863, 330, 843, 798, 824, 825, 826, 827,
	844, 0, 799, 0, 337, 865, 866, 338, 339, 340,
	867, 828, 829, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 845, 868, 348, 349, 869, 0, 350, 351,
	0, 0, 352, 0, 353, 745, 744, 354, 355, 357,
	787, 356, 870, 359, 360, 362, 361, 740, 0, 871,
	771, 815, 363, 846, 364, 365, 0, 796, 797, 0,
	0, 368, 369, 0, 0, 370, 241, 872, 371, 873,
	847, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	848, 380, 244, 381, 0, 382, 383, 384, 385, 386,
	849, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 394, 397, 398, 399, 400, 0, 401, 874,
	402, 403, 404, 405, 749, 406, 0, 410, 411, 412,
	413, 414, 415, 416, 0, 422, 423, 788, 789, 790,
	791, 418, 424, 425, 808, 426, 407, 408, 427, 875,
	428, 850, 792, 430, 0, 440, 431, 432, 433, 409,
	434, 438, 830, 435, 436, 437, 851, 0, 441, 442,
	0, 443, 444, 445, 446, 447, 308, 448, 309, 786,
	450, 0, 852, 853, 854, 831, 0, 0, 452, 453,
	855, 856, 769, 454, 455, 0, 456, 457, 0, 0,
	458, 459, 460, 462, 809, 463, 0, 793, 464, 465,
	466, 254, 857, 0, 0, 467, 256, 0, 0, 0,
	0, 468, 469, 257, 470, 471, 472, 741, 0, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	737, 738, 775, 763, 764, 761, 762, 754, 0, 750,
	0, 0, 0, 0, 0, 753, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 811, 757,
	0, 0, 0, 263, 264, 265, 215, 832, 795, 833,
	783, 819, 834, 0, 269, 785, 784, 272, 273, 274,
	758, 810, 835, 836, 221, 0, 275, 817, 0, 800,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 860, 288, 289,
	3057, 803, 801, 802, 807, 805, 804, 806, 291, 292,
	495, 293, 820, 295, 837, 838, 743, 296, 0, 297,
	0, 298, 0, 0, 821, 300, 0, 301, 302, 0,
	0, 0, 748, 306, 303, 304, 307, 310, 305, 311,
	312, 839, 840, 770, 861, 0, 0, 0, 0, 0,
	313, 314, 841, 822, 823, 0, 317, 0, 318, 0,
	0, 862, 319, 0, 320, 842, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 812, 813, 816, 864, 0,
	814, 794, 0, 0, 0, 0, 327, 329, 336, 0,
	863, 330, 843, 798, 824, 825, 826, 827, 844, 0,
	799, 0, 337, 865, 866, 338, 339, 340, 867, 828,
	829, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	845, 868, 348, 349, 869, 0, 350, 351, 0, 0,
	352, 0, 353, 745, 744, 354, 355, 357, 787, 356,
	870, 359, 360, 362, 361, 740, 0, 871, 771, 815,
	363, 846, 364, 365, 0, 796, 797, 0, 0, 368,
	369, 0, 0, 370, 241, 872, 371, 873, 847, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 848, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 849, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 874, 402, 403,
	404, 405, 749, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 788, 789, 790, 791, 418,
	424, 425, 808, 426, 407, 408, 427, 875, 428, 850,
	792, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	830, 435, 436, 437, 851, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 786, 450, 0,
	852, 853, 854, 831, 0, 0, 452, 453, 855, 856,
	769, 454, 455, 0, 3056, 457, 0, 0, 458, 459,
	460, 462, 809, 463, 0, 793, 464, 465, 466, 254,
	857, 0, 0, 467, 256, 0, 0, 0, 0, 468,
	469, 257, 470, 471, 472, 741, 0, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 737, 738,
	775, 763, 764, 761, 762, 754, 0, 750, 0, 0,
	0, 0, 0, 753, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 811, 757, 0, 0,
	0, 263, 264, 265, 3055, 832, 795, 833, 783, 819,
	834, 0, 269, 785, 784, 272, 273, 274, 758, 810,
	835, 836, 221, 0, 275, 817, 0, 800, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 860, 288, 289, 3057, 803,
	801, 802, 807, 805, 804, 806, 291, 292, 495, 293,
	820, 295, 837, 838, 743, 296, 0, 297, 0, 298,
	0, 0, 821, 300, 0, 301, 302, 0, 0, 0,
	748, 306, 303, 304, 307, 310, 305, 311, 312, 839,
	840, 770, 861, 0, 0, 0, 0, 0, 313, 314,
	841, 822, 823, 0, 317, 0, 318, 0, 0, 862,
	319, 0, 320, 842, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 812, 813, 816, 864, 0, 814, 794,
	0, 0, 0, 0, 327, 329, 336, 0, 863, 330,
	843, 798, 824, 825, 826, 827, 844, 0, 799, 0,
	337, 865, 866, 338, 339, 340, 867, 828, 829, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 845, 868,
	348, 349, 869, 0, 350, 351, 0, 0, 352, 0,
	353, 745, 744, 354, 355, 357, 787, 356, 870, 359,
	360, 362, 361, 740, 0, 871, 771, 815, 363, 846,
	364, 365, 0, 796, 797, 0, 0, 368, 369, 0,
	0, 370, 241, 872, 371, 873, 847, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 848, 380, 244, 381,
	0, 382, 383, 384, 385, 386, 849, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 394, 397,
	398, 399, 400, 0, 401, 874, 402, 403, 404, 405,
	749, 406, 0, 410, 411, 412, 413, 414, 415, 416,
	0, 422, 423, 788, 789, 790, 791, 418, 424, 425,
	808, 426, 407, 408, 427, 875, 428, 850, 792, 430,
	0, 440, 431, 432, 433, 409, 434, 438, 830, 435,
	436, 437, 851, 0, 441, 442, 0, 443, 444, 445,
	446, 447, 308, 448, 309, 786, 450, 0, 852, 853,
	854, 831, 0, 0, 452, 453, 855, 856, 769, 454,
	455, 0, 3056, 457, 0, 0, 458, 459, 460, 462,
	809, 463, 0, 793, 464, 465, 466, 254, 857, 0,
	0, 467, 256, 0, 0, 0, 0, 468, 469, 257,
	470, 471, 472, 741, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 737, 738, 775, 763,
	764, 761, 762, 754, 0, 750, 0, 0, 0, 0,
	0, 753, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 811, 757, 0, 0, 0, 263,
	264, 265, 215, 832, 795, 833, 783, 819, 834, 0,
	269, 785, 784, 272, 273, 274, 758, 810, 835, 836,
	221, 0, 275, 817, 0, 800, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 860, 288, 289, 290, 803, 801, 802,
	807, 805, 804, 806, 291, 292, 495, 293, 820, 295,
	837, 838, 0, 296, 0, 297, 0, 298, 0, 0,
	821, 300, 0, 301, 302, 0, 0, 0, 748, 306,
	303, 304, 307, 310, 305, 311, 312, 839, 840, 770,
	861, 0, 0, 0, 0, 0, 313, 314, 841, 822,
	823, 0, 317, 0, 318, 0, 0, 862, 319, 0,
	320, 842, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 812, 813, 816, 864, 0, 814, 794, 0, 0,
	0, 0, 327, 329, 336, 0, 863, 330, 843, 798,
	824, 825, 826, 827, 844, 0, 799, 0, 337, 865,
	866, 338, 339, 340, 867, 828, 829, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 845, 868, 348, 349,
	869, 0, 350, 351, 0, 0, 352, 0, 353, 931,
	930, 354, 355, 357, 787, 356, 870, 359, 360, 362,
	361, 0, 0, 871, 771, 815, 363, 846, 364, 365,
	0, 796, 797, 0, 0, 368, 369, 0, 0, 370,
	241, 872, 371, 873, 847, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 848, 380, 244, 381, 0, 382,
	383, 384, 385, 386, 849, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 394, 397, 398, 399,
	400, 0, 401, 874, 402, 403, 404, 405, 749, 406,
	0, 410, 411, 412, 413, 414, 415, 416, 0, 422,
	423, 788, 789, 790, 791, 418, 424, 425, 808, 426,
	407, 408, 427, 875, 428, 850, 792, 430, 0, 440,
	431, 432, 433, 409, 434, 438, 830, 435, 436, 437,
	851, 0, 441, 442, 0, 443, 444, 445, 446, 447,
	308, 448, 309, 786, 450, 0, 852, 853, 854, 831,
	0, 0, 452, 453, 855, 856, 769, 454, 455, 0,
	456, 457, 0, 0, 458, 459, 460, 462, 809, 463,
	0, 793, 464, 465, 466, 254, 857, 0, 0, 467,
	256, 0, 0, 0, 0, 468, 469, 257, 470, 471,
	472, 775, 763, 764, 761, 762, 754, 0, 0, 1900,
	0, 0, 0, 0, 1898, 1899, 0, 258, 259, 260,
	261, 0, 262, 750, 0, 0, 0, 811, 757, 753,
	0, 0, 263, 264, 265, 0, 832, 795, 833, 783,
	819, 834, 0, 269, 785, 784, 272, 273, 274, 758,
	810, 835, 836, 221, 0, 275, 817, 0, 800, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 860, 288, 289, 3057,
	803, 801, 802, 807, 805, 804, 806, 291, 292, 495,
	293, 820, 295, 837, 838, 743, 296, 0, 297, 0,
	298, 0, 0, 821, 300, 0, 301, 302, 0, 0,
	0, 748, 306, 303, 304, 307, 310, 305, 311, 312,
	839, 840, 770, 861, 0, 0, 0, 0, 0, 313,
	314, 841, 822, 823, 0, 317, 0, 318, 0, 0,
	862, 319, 0, 320, 842, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 812, 813, 816, 0, 0, 814,
	794, 0, 0, 0, 0, 327, 329, 336, 0, 863,
	330, 843, 798, 824, 825, 826, 827, 844, 0, 799,
	0, 337, 0, 0, 338, 339, 340, 867, 828, 829,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 845,
	868, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 745, 744, 354, 355, 357, 787, 356, 870,
	359, 360, 362, 361, 740, 0, 0, 771, 815, 363,
	846, 364, 365, 0, 796, 797, 0, 0, 368, 369,
	0, 0, 370, 241, 872, 371, 873, 847, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 848, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 849, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 874, 402, 403, 404,
	405, 749, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 788, 789, 790, 791, 418, 424,
	425, 808, 426, 407, 408, 427, 0, 428, 850, 792,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 830,
	435, 436, 437, 851, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 786, 450, 0, 852,
	853, 854, 831, 0, 0, 452, 453, 855, 856, 769,
	454, 455, 0, 3056, 457, 0, 0, 458, 459, 460,
	462, 809, 463, 0, 793, 464, 465, 466, 254, 857,
	0, 0, 467, 256, 0, 0, 0, 0, 468, 469,
	257, 470, 471, 472, 0, 0, 0, 0, 0, 0,
	725, 0, 927, 0, 0, 0, 0, 737, 738, 0,
	0, 0, 0, 0, 0, 0, 750, 0, 258, 259,
	260, 261, 753, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 929,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 860, 288, 289,
	290, 0, 922, 923, 0, 925, 924, 926, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 839, 840, 0, 861, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 862, 319, 0, 320, 842, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 864, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	863, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 865, 866, 338, 339, 340, 867, 341,
	342, 0, 0, 343, 344, 345, 914, 347, 346, 0,
	845, 868, 348, 349, 869, 0, 350, 351, 0, 0,
	352, 0, 353, 931, 930, 354, 355, 357, 358, 356,
	870, 359, 360, 362, 361, 0, 0, 871, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 920, 368,
	369, 0, 0, 370, 241, 872, 371, 873, 847, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 848, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 874, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 171, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 875, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 851, 0, 441, 442, 173, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 855, 856,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 1148,
	255, 0, 0, 467, 256, 0, 0, 927, 165, 468,
	469, 257, 470, 471, 472, 0, 166, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 911, 0, 1454, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 929, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 860, 288, 289, 290, 0, 922, 923, 0,
	925, 924, 926, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 839, 840, 0, 861,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 862, 319, 0, 320,
	842, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 864, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 863, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 865, 866,
	338, 339, 340, 867, 341, 342, 0, 0, 343, 344,
	345, 914, 347, 346, 0, 845, 868, 348, 349, 869,
	0, 350, 351, 0, 0, 352, 0, 353, 931, 930,
	354, 355, 357, 358, 356, 870, 359, 360, 362, 361,
	0, 0, 871, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 920, 368, 369, 0, 0, 370, 241,
	872, 371, 873, 847, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 848, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 874, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 171, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 875, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 851,
	0, 441, 442, 173, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 249, 250, 251, 451, 0,
	0, 452, 453, 855, 856, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 1148, 255, 0, 0, 467, 256,
	0, 0, 927, 165, 468, 469, 257, 470, 471, 472,
	0, 166, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 811, 0,
	911, 0, 1454, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 810, 219, 220, 221, 0, 275, 817, 0, 800,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 860, 288, 289,
	290, 803, 801, 802, 807, 805, 804, 806, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 839, 840, 0, 861, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 862, 319, 0, 320, 842, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 812, 813, 816, 864, 0,
	814, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	863, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 865, 866, 338, 339, 340, 867, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	845, 868, 348, 349, 869, 0, 350, 351, 0, 0,
	352, 0, 353, 931, 930, 354, 355, 357, 358, 356,
	870, 359, 360, 362, 361, 0, 0, 871, 0, 815,
	363, 240, 364, 365, 0, 366, 367, 0, 0, 368,
	369, 0, 0, 370, 241, 872, 371, 873, 847, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 848, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 874, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 808, 426, 407, 408, 427, 875, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 851, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 855, 856,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 809, 463, 0, 461, 464, 465, 466, 254,
	255, 0, 0, 467, 256, 2287, 0, 927, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 2608, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 929, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 860, 288, 289, 290, 0, 922, 923, 0,
	925, 924, 926, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 839, 840, 0, 861,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 862, 319, 0, 320,
	842, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 864, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 863, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 865, 866,
	338, 339, 340, 867, 341, 342, 0, 0, 343, 344,
	345, 914, 347, 346, 0, 845, 868, 348, 349, 869,
	0, 350, 351, 0, 0, 352, 0, 353, 931, 930,
	354, 355, 357, 358, 356, 870, 359, 360, 362, 361,
	0, 0, 871, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 920, 368, 369, 0, 0, 370, 241,
	872, 371, 873, 847, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 848, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 874, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 0, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 875, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 851,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 249, 250, 251, 451, 0,
	0, 452, 453, 855, 856, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 254, 255, 0, 0, 467, 256,
	910, 0, 927, 0, 468, 469, 257, 470, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	911, 0, 918, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 929,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 860, 288, 289,
	290, 0, 922, 923, 0, 925, 924, 926, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 839, 840, 0, 861, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 862, 319, 0, 320, 842, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 864, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	863, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 865, 866, 338, 339, 340, 867, 341,
	342, 0, 0, 343, 344, 345, 914, 347, 346, 0,
	845, 868, 348, 349, 869, 0, 350, 351, 0, 0,
	352, 0, 353, 931, 930, 354, 355, 357, 358, 356,
	870, 359, 360, 362, 361, 0, 0, 871, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 920, 368,
	369, 0, 0, 370, 241, 872, 371, 873, 847, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 848, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 874, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 875, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 851, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 855, 856,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 254,
	255, 0, 0, 467, 256, 0, 0, 927, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 911, 0, 918, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 929, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 860, 288, 289, 290, 0, 922, 923, 0,
	925, 924, 926, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 839, 840, 0, 861,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 862, 319, 0, 320,
	842, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 864, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 863, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 865, 866,
	338, 339, 340, 867, 341, 342, 0, 0, 343, 344,
	345, 914, 347, 346, 0, 845, 868, 348, 349, 869,
	0, 350, 351, 0, 0, 352, 0, 353, 931, 930,
	354, 355, 357, 358, 356, 870, 359, 360, 362, 361,
	0, 0, 871, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 920, 368, 369, 0, 0, 370, 241,
	872, 371, 873, 847, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 848, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 874, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 0, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 875, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 851,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 249, 250, 251, 451, 0,
	0, 452, 453, 855, 856, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 254, 255, 0, 0, 467, 256,
	0, 0, 927, 0, 468, 469, 257, 470, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	911, 0, 918, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 929,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 860, 288, 289,
	290, 0, 922, 923, 0, 925, 924, 926, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 839, 840, 0, 861, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 862, 319, 0, 320, 842, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 864, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	863, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 865, 866, 338, 339, 340, 867, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	845, 868, 348, 349, 869, 0, 350, 351, 0, 0,
	352, 0, 353, 931, 930, 354, 355, 357, 358, 356,
	870, 359, 360, 362, 361, 0, 0, 871, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 0, 368,
	369, 0, 0, 370, 241, 872, 371, 873, 847, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 848, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 874, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 875, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 851, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 855, 856,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 254,
	255, 0, 0, 467, 256, 1145, 0, 952, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 1355, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 929, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 860, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 861,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 862, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 864, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 863, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 865, 866,
	338, 339, 340, 867, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 868, 348, 349, 869,
	0, 350, 351, 0, 0, 352, 0, 353, 931, 930,
	354, 355, 357, 358, 356, 870, 359, 360, 362, 361,
	0, 0, 871, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 0, 368, 369, 0, 0, 370, 241,
	872, 371, 873, 242, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 243, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 874, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 171, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 875, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 248,
	0, 441, 442, 173, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 249, 250, 251, 451, 0,
	0, 452, 453, 252, 253, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 1148, 255, 0, 0, 467, 256,
	725, 0, 492, 165, 468, 469, 257, 470, 471, 472,
	0, 166, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 138, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 357, 358, 356,
	0, 359, 360, 362, 361, 0, 0, 0, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 0, 368,
	369, 0, 0, 370, 241, 0, 371, 0, 242, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 243, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 0, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 171, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 0, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 248, 0, 441, 442, 173, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 252, 253,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 1148,
	255, 0, 0, 467, 256, 0, 0, 0, 165, 468,
	469, 257, 470, 471, 472, 0, 166, 775, 763, 764,
	761, 762, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 138, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 832, 795, 833, 783, 819, 834, 0, 269,
	785, 784, 272, 273, 274, 0, 0, 835, 836, 221,
	0, 275, 222, 0, 929, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 860, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 495, 293, 820, 295, 837,
	838, 0, 296, 0, 297, 0, 298, 0, 0, 821,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 770, 861,
	0, 0, 0, 0, 0, 313, 314, 841, 822, 823,
	0, 317, 0, 318, 0, 0, 862, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 864, 0, 237, 794, 0, 0, 0,
	0, 327, 329, 336, 0, 863, 330, 843, 798, 824,
	825, 826, 827, 844, 0, 799, 0, 337, 865, 866,
	338, 339, 340, 867, 828, 829, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 868, 348, 349, 869,
	0, 350, 351, 0, 0, 352, 0, 353, 931, 930,
	354, 355, 357, 787, 356, 870, 359, 360, 362, 361,
	0, 0, 871, 771, 239, 363, 846, 364, 365, 0,
	796, 797, 0, 0, 368, 369, 0, 0, 370, 241,
	872, 371, 873, 242, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 243, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 849, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 874, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 0, 422, 423,
	788, 789, 790, 791, 418, 424, 425, 0, 426, 407,
	408, 427, 875, 428, 850, 792, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 830, 435, 436, 437, 248,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 786, 450, 0, 852, 853, 854, 831, 0,
	0, 452, 453, 252, 253, 769, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	793, 464, 465, 466, 254, 857, 492, 0, 467, 256,
	0, 0, 0, 0, 468, 469, 257, 470, 471, 472,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 495, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 357, 358, 356, 0, 359, 360, 362, 361, 0,
	0, 0, 0, 239, 363, 240, 364, 365, 0, 366,
	367, 0, 0, 368, 369, 0, 0, 370, 241, 0,
	371, 0, 242, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 243, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 245, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 0, 402, 403, 404, 405, 246, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 417,
	419, 420, 421, 418, 424, 425, 0, 426, 407, 408,
	427, 0, 428, 247, 429, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 0, 249, 250, 251, 451, 0, 0,
	452, 453, 252, 253, 0, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 0, 463, 0, 461,
	464, 465, 466, 254, 255, 0, 0, 467, 256, 0,
	0, 492, 0, 468, 469, 257, 470, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 2084, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 495,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 357, 358, 356, 0,
	359, 360, 362, 361, 0, 0, 0, 0, 239, 363,
	240, 364, 365, 0, 366, 367, 0, 0, 368, 369,
	0, 0, 370, 241, 0, 371, 0, 242, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 243, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 245, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 0, 402, 403, 404,
	405, 246, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 0, 426, 407, 408, 427, 0, 428, 247, 429,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 0, 249,
	250, 251, 451, 0, 0, 452, 453, 252, 253, 0,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 0, 463, 0, 461, 464, 465, 466, 254, 255,
	0, 0, 467, 256, 0, 0, 492, 0, 468, 469,
	257, 470, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 2520, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 495, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 357, 358, 356, 0, 359, 360, 362, 361, 0,
	0, 0, 0, 239, 363, 240, 364, 365, 0, 366,
	367, 0, 0, 368, 369, 0, 0, 370, 241, 0,
	371, 0, 242, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 243, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 245, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 0, 402, 403, 404, 405, 246, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 417,
	419, 420, 421, 418, 424, 425, 0, 426, 407, 408,
	427, 0, 428, 247, 429, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 0, 249, 250, 251, 451, 0, 0,
	452, 453, 252, 253, 0, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 0, 463, 0, 461,
	464, 465, 466, 254, 255, 0, 0, 467, 256, 0,
	0, 0, 0, 468, 469, 257, 470, 471, 472, 1221,
	0, 952, 951, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 1458, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 929, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 860, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 495,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 861, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	862, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 864, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 863,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 865, 866, 338, 339, 340, 867, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	868, 348, 349, 869, 0, 350, 351, 0, 0, 352,
	0, 353, 931, 930, 354, 355, 357, 358, 356, 870,
	359, 360, 362, 361, 0, 0, 871, 0, 239, 363,
	240, 364, 365, 0, 366, 367, 0, 0, 368, 369,
	0, 0, 370, 241, 872, 371, 873, 242, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 243, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 245, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 874, 402, 403, 404,
	405, 246, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 0, 426, 407, 408, 427, 875, 428, 247, 429,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 0, 249,
	250, 251, 451, 0, 0, 452, 453, 252, 253, 0,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 0, 463, 0, 461, 464, 465, 466, 254, 255,
	0, 0, 467, 256, 0, 0, 0, 0, 468, 469,
	257, 470, 471, 472, 1141, 0, 952, 951, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 929, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 860, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 495, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 861, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 862, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 1140,
	232, 233, 864, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 863, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 865, 866, 338,
	339, 340, 867, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 868, 348, 349, 869, 0,
	350, 351, 0, 0, 352, 0, 353, 931, 930, 354,
	355, 357, 358, 356, 870, 359, 360, 362, 361, 0,
	0, 871, 0, 239, 363, 240, 364, 365, 0, 366,
	367, 0, 0, 368, 369, 0, 0, 370, 241, 872,
	371, 873, 242, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 243, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 245, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 874, 402, 403, 404, 405, 246, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 417,
	419, 420, 421, 418, 424, 425, 0, 426, 407, 408,
	427, 875, 428, 247, 429, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 0, 249, 250, 251, 451, 0, 0,
	452, 453, 252, 253, 0, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 0, 463, 0, 461,
	464, 465, 466, 254, 255, 0, 0, 467, 256, 0,
	0, 0, 0, 468, 469, 257, 470, 471, 472, 1137,
	0, 952, 951, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 929, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 860, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 495,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 861, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	862, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1136, 232, 233, 864, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 863,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 865, 866, 338, 339, 340, 867, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	868, 348, 349, 869, 0, 350, 351, 0, 0, 352,
	0, 353, 931, 930, 354, 355, 357, 358, 356, 870,
	359, 360, 362, 361, 0, 0, 871, 0, 239, 363,
	240, 364, 365, 0, 366, 367, 0, 0, 368, 369,
	0, 0, 370, 241, 872, 371, 873, 242, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 243, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 245, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 874, 402, 403, 404,
	405, 246, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 0, 426, 407, 408, 427, 875, 428, 247, 429,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 0, 249,
	250, 251, 451, 0, 0, 452, 453, 252, 253, 0,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 0, 463, 0, 461, 464, 465, 466, 254, 255,
	0, 0, 467, 256, 0, 0, 0, 0, 468, 469,
	257, 470, 471, 472, 1098, 0, 952, 951, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 929, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 860, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 495, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 861, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 862, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 1097,
	232, 233, 864, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 863, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 865, 866, 338,
	339, 340, 867, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 868, 348, 349, 869, 0,
	350, 351, 0, 0, 352, 0, 353, 931, 930, 354,
	355, 357, 358, 356, 870, 359, 360, 362, 361, 0,
	0, 871, 0, 239, 363, 240, 364, 365, 0, 366,
	367, 0, 0, 368, 369, 0, 0, 370, 241, 872,
	371, 873, 242, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 243, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 245, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 874, 402, 403, 404, 405, 246, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 417,
	419, 420, 421, 418, 424, 425, 0, 426, 407, 408,
	427, 875, 428, 247, 429, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 0, 249, 250, 251, 451, 0, 0,
	452, 453, 252, 253, 0, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 0, 463, 0, 461,
	464, 465, 466, 254, 255, 0, 0, 467, 256, 0,
	0, 0, 0, 468, 469, 257, 470, 471, 472, 1095,
	0, 952, 951, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 929, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 860, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 495,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 861, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	862, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1094, 232, 233, 864, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 863,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 865, 866, 338, 339, 340, 867, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	868, 348, 349, 869, 0, 350, 351, 0, 0, 352,
	0, 353, 931, 930, 354, 355, 357, 358, 356, 870,
	359, 360, 362, 361, 0, 0, 871, 0, 239, 363,
	240, 364, 365, 0, 366, 367, 0, 0, 368, 369,
	0, 0, 370, 241, 872, 371, 873, 242, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 243, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 245, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 874, 402, 403, 404,
	405, 246, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 0, 426, 407, 408, 427, 875, 428, 247, 429,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 0, 249,
	250, 251, 451, 0, 0, 452, 453, 252, 253, 0,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 0, 463, 0, 461, 464, 465, 466, 254, 255,
	0, 0, 467, 256, 0, 0, 0, 0, 468, 469,
	257, 470, 471, 472, 945, 0, 952, 951, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 929, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 860, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 495, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 861, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 862, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 947,
	232, 233, 864, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 863, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 865, 866, 338,
	339, 340, 867, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 868, 348, 349, 869, 0,
	350, 351, 0, 0, 352, 0, 353, 931, 930, 354,
	355, 357, 358, 356, 870, 359, 360, 362, 361, 0,
	0, 871, 0, 239, 363, 240, 364, 365, 0, 366,
	367, 0, 0, 368, 369, 0, 0, 370, 241, 872,
	371, 873, 242, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 243, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 245, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 874, 402, 403, 404, 405, 246, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 417,
	419, 420, 421, 418, 424, 425, 0, 426, 407, 408,
	427, 875, 428, 247, 429, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 0, 249, 250, 251, 451, 0, 0,
	452, 453, 252, 253, 0, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 0, 463, 0, 461,
	464, 465, 466, 254, 255, 952, 951, 467, 256, 0,
	949, 0, 0, 468, 469, 257, 470, 471, 472, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 929, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	860, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 495, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 861, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 862, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 864, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 863, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 865, 866, 338, 339,
	340, 867, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 868, 348, 349, 869, 0, 350,
	351, 0, 0, 352, 0, 353, 931, 930, 354, 355,
	357, 358, 356, 870, 359, 360, 362, 361, 0, 0,
	871, 0, 239, 363, 240, 364, 365, 0, 366, 367,
	0, 0, 368, 369, 0, 0, 370, 241, 872, 371,
	873, 242, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 243, 380, 244, 381, 0, 382, 383, 384, 385,
	386, 245, 387, 388, 0, 389, 390, 391, 392, 393,
	0, 395, 396, 394, 397, 398, 399, 400, 0, 401,
	874, 402, 403, 404, 405, 246, 406, 0, 410, 411,
	412, 413, 414, 415, 416, 0, 422, 423, 417, 419,
	420, 421, 418, 424, 425, 0, 426, 407, 408, 427,
	875, 428, 247, 429, 430, 0, 440, 431, 432, 433,
	409, 434, 438, 439, 435, 436, 437, 248, 0, 441,
	442, 0, 443, 444, 445, 446, 447, 308, 448, 309,
	449, 450, 0, 249, 250, 251, 451, 0, 0, 452,
	453, 252, 253, 0, 454, 455, 0, 456, 457, 0,
	0, 458, 459, 460, 462, 0, 463, 0, 461, 464,
	465, 466, 254, 255, 952, 951, 467, 256, 0, 0,
	0, 0, 468, 469, 257, 470, 471, 472, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 929, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 860,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 495, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 861, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 862, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	864, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 863, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 865, 866, 338, 339, 340,
	867, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 868, 348, 349, 869, 0, 350, 351,
	0, 0, 352, 0, 353, 931, 930, 354, 355, 357,
	358, 356, 870, 359, 360, 362, 361, 0, 0, 871,
	0, 239, 363, 240, 364, 365, 0, 366, 367, 0,
	0, 368, 369, 0, 0, 370, 241, 872, 371, 873,
	242, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	243, 380, 244, 381, 0, 382, 383, 384, 385, 386,
	245, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 394, 397, 398, 399, 400, 0, 401, 874,
	402, 403, 404, 405, 246, 406, 0, 410, 411, 412,
	413, 414, 415, 416, 0, 422, 423, 417, 419, 420,
	421, 418, 424, 425, 0, 426, 407, 408, 427, 875,
	428, 247, 429, 430, 0, 440, 431, 432, 433, 409,
	434, 438, 439, 435, 436, 437, 248, 0, 441, 442,
	0, 443, 444, 445, 446, 447, 308, 448, 309, 449,
	450, 0, 249, 250, 251, 451, 0, 0, 452, 453,
	252, 253, 0, 454, 455, 0, 456, 457, 0, 0,
	458, 459, 460, 462, 0, 463, 0, 461, 464, 465,
	466, 254, 255, 952, 0, 467, 256, 0, 0, 0,
	0, 468, 469, 257, 470, 471, 472, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	929, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 860, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 495, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 861, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 862, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 864,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 863, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 865, 866, 338, 339, 340, 867,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 868, 348, 349, 869, 0, 350, 351, 0,
	0, 352, 0, 353, 931, 930, 354, 355, 357, 358,
	356, 870, 359, 360, 362, 361, 0, 0, 871, 0,
	239, 363, 240, 364, 365, 0, 366, 367, 0, 0,
	368, 369, 0, 0, 370, 241, 872, 371, 873, 242,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 243,
	380, 244, 381, 0, 382, 383, 384, 385, 386, 245,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 394, 397, 398, 399, 400, 0, 401, 874, 402,
	403, 404, 405, 246, 406, 0, 410, 411, 412, 413,
	414, 415, 416, 0, 422, 423, 417, 419, 420, 421,
	418, 424, 425, 0, 426, 407, 408, 427, 875, 428,
	247, 429, 430, 0, 440, 431, 432, 433, 409, 434,
	438, 439, 435, 436, 437, 248, 0, 441, 442, 0,
	443, 444, 445, 446, 447, 308, 448, 309, 449, 450,
	0, 249, 250, 251, 451, 0, 0, 452, 453, 252,
	253, 0, 454, 455, 0, 456, 457, 0, 0, 458,
	459, 460, 462, 0, 463, 0, 461, 464, 465, 466,
	254, 255, 0, 0, 467, 256, 593, 0, 207, 0,
	468, 469, 257, 470, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 213, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 357, 358, 356, 0, 359, 360, 362,
	361, 0, 0, 0, 0, 239, 363, 240, 364, 365,
	0, 366, 367, 0, 0, 368, 369, 0, 0, 370,
	241, 0, 371, 0, 242, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 243, 380, 244, 381, 0, 382,
	383, 384, 385, 386, 245, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 394, 397, 398, 399,
	400, 0, 401, 0, 402, 403, 404, 405, 246, 406,
	0, 410, 411, 412, 413, 414, 415, 416, 0, 422,
	423, 417, 419, 420, 421, 418, 424, 425, 0, 426,
	407, 408, 427, 0, 428, 247, 429, 430, 0, 440,
	431, 432, 433, 409, 434, 438, 439, 435, 436, 437,
	248, 0, 441, 442, 212, 443, 444, 445, 446, 447,
	308, 448, 309, 449, 450, 0, 249, 250, 251, 451,
	0, 0, 452, 453, 252, 253, 0, 454, 455, 0,
	456, 457, 0, 0, 458, 459, 460, 462, 0, 463,
	0, 461, 464, 465, 466, 254, 255, 0, 0, 467,
	256, 206, 0, 207, 0, 468, 469, 257, 470, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 475, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 213, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 357, 358,
	356, 0, 359, 360, 362, 361, 0, 0, 0, 0,
	239, 363, 240, 364, 365, 0, 366, 367, 0, 0,
	368, 369, 0, 0, 370, 241, 0, 371, 0, 242,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 243,
	380, 244, 381, 0, 382, 383, 384, 385, 386, 245,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 394, 397, 398, 399, 400, 0, 401, 0, 402,
	403, 404, 405, 246, 406, 0, 410, 411, 412, 413,
	414, 415, 416, 0, 422, 423, 417, 419, 420, 421,
	418, 424, 425, 0, 426, 407, 408, 427, 0, 428,
	247, 429, 430, 0, 440, 431, 432, 433, 409, 434,
	438, 439, 435, 436, 437, 248, 0, 441, 442, 212,
	443, 444, 445, 446, 447, 308, 448, 309, 449, 450,
	0, 249, 250, 251, 451, 0, 0, 452, 453, 252,
	253, 0, 454, 455, 0, 456, 457, 0, 0, 458,
	459, 460, 462, 0, 463, 0, 461, 464, 465, 466,
	254, 255, 207, 0, 467, 256, 0, 0, 0, 0,
	468, 469, 257, 470, 471, 472, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 475, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	213, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 357, 358, 356,
	0, 359, 360, 362, 361, 0, 0, 0, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 0, 368,
	369, 0, 0, 370, 241, 0, 371, 0, 242, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 243, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 0, 1693, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 0, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 248, 0, 441, 442, 212, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 252, 253,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 254,
	255, 207, 0, 467, 256, 0, 0, 0, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	475, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 213,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 357, 358, 356, 0,
	359, 360, 362, 361, 0, 0, 0, 0, 239, 363,
	240, 364, 365, 0, 366, 367, 0, 0, 368, 369,
	0, 0, 370, 241, 0, 371, 0, 242, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 243, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 245, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 0, 402, 403, 404,
	405, 246, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 0, 426, 407, 408, 427, 0, 428, 247, 429,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 0, 441, 442, 212, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 0, 249,
	250, 251, 451, 0, 0, 452, 453, 252, 253, 0,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 0, 463, 0, 461, 464, 465, 466, 254, 255,
	492, 0, 467, 256, 0, 0, 0, 0, 468, 469,
	257, 470, 471, 472, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 475,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 495, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 357, 358, 356, 0, 359,
	360, 362, 361, 0, 0, 0, 0, 239, 363, 240,
	364, 365, 0, 366, 367, 0, 0, 368, 369, 0,
	0, 370, 241, 0, 371, 0, 242, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 243, 380, 244, 381,
	0, 382, 383, 384, 385, 386, 245, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 394, 397,
	398, 399, 400, 0, 401, 0, 402, 403, 404, 405,
	246, 406, 0, 410, 411, 412, 413, 414, 415, 416,
	0, 422, 423, 417, 419, 420, 421, 418, 424, 425,
	0, 426, 407, 408, 427, 0, 428, 247, 429, 430,
	0, 440, 431, 432, 433, 409, 434, 438, 439, 435,
	436, 437, 248, 0, 441, 442, 0, 443, 444, 445,
	446, 447, 308, 448, 309, 449, 450, 0, 249, 250,
	251, 451, 0, 0, 452, 453, 252, 253, 0, 454,
	455, 0, 456, 457, 0, 0, 458, 459, 460, 462,
	0, 463, 0, 461, 464, 465, 466, 254, 255, 492,
	0, 467, 256, 0, 0, 0, 0, 468, 469, 257,
	470, 471, 472, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 475, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 1977, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 1974, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 495, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 2054, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 1980, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 2052, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 2051,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 357, 358, 356, 0, 359, 360,
	362, 361, 0, 0, 0, 0, 239, 363, 240, 364,
	365, 0, 366, 367, 0, 0, 368, 369, 0, 0,
	370, 241, 0, 371, 0, 242, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 243, 380, 244, 381, 1979,
	382, 383, 384, 385, 386, 245, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 394, 397, 398,
	399, 400, 0, 401, 0, 402, 403, 404, 405, 246,
	406, 0, 410, 411, 412, 413, 414, 415, 416, 0,
	422, 423, 417, 419, 420, 421, 418, 424, 425, 0,
	426, 407, 408, 427, 0, 428, 247, 429, 430, 0,
	440, 431, 432, 433, 409, 434, 438, 439, 435, 436,
	437, 248, 0, 441, 442, 0, 443, 444, 445, 446,
	447, 308, 448, 309, 449, 450, 0, 249, 250, 251,
	451, 0, 0, 452, 453, 252, 253, 0, 454, 455,
	0, 456, 457, 0, 2053, 458, 459, 460, 462, 0,
	463, 0, 461, 464, 465, 466, 254, 255, 492, 0,
	467, 256, 0, 0, 0, 0, 468, 469, 257, 470,
	471, 472, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 1977, 275, 222, 0, 0, 1971, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 1974, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 495, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 1980, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 1970, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 357, 358, 356, 0, 359, 360, 362,
	361, 0, 0, 0, 0, 239, 363, 240, 364, 365,
	0, 366, 367, 0, 0, 368, 369, 0, 0, 370,
	241, 0, 371, 0, 242, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 243, 380, 244, 381, 1979, 382,
	383, 384, 385, 386, 245, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 394, 397, 398, 399,
	400, 0, 401, 0, 402, 403, 404, 405, 246, 406,
	0, 410, 411, 412, 413, 414, 415, 416, 0, 422,
	423, 417, 419, 420, 421, 418, 424, 425, 0, 426,
	407, 408, 427, 0, 428, 247, 429, 430, 0, 440,
	431, 432, 433, 409, 434, 438, 439, 435, 436, 437,
	248, 0, 441, 442, 0, 443, 444, 445, 446, 447,
	308, 448, 309, 449, 450, 0, 249, 250, 251, 451,
	0, 0, 452, 453, 252, 253, 0, 454, 455, 0,
	456, 457, 0, 1978, 458, 459, 460, 462, 0, 463,
	0, 461, 464, 465, 466, 254, 255, 0, 0, 467,
	256, 600, 0, 492, 0, 468, 469, 257, 470, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 599, 579, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 582, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 495, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 583, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 357, 358,
	356, 0, 359, 360, 362, 361, 0, 0, 0, 0,
	239, 363, 240, 364, 365, 0, 366, 367, 0, 0,
	368, 369, 0, 0, 370, 241, 0, 371, 0, 242,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 243,
	380, 244, 381, 0, 382, 383, 384, 385, 386, 245,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 394, 397, 398, 399, 400, 0, 401, 0, 402,
	403, 404, 405, 246, 406, 0, 410, 411, 412, 413,
	414, 415, 416, 584, 422, 423, 417, 419, 420, 421,
	418, 424, 425, 0, 426, 407, 408, 427, 0, 428,
	247, 429, 430, 0, 440, 431, 432, 433, 409, 434,
	438, 439, 435, 436, 437, 248, 0, 441, 442, 0,
	443, 444, 445, 446, 447, 308, 448, 309, 449, 450,
	0, 249, 250, 251, 451, 0, 0, 452, 453, 252,
	253, 0, 454, 455, 0, 456, 457, 0, 0, 458,
	459, 460, 462, 0, 463, 0, 461, 464, 465, 466,
	254, 255, 0, 0, 467, 256, 578, 0, 492, 0,
	468, 469, 257, 470, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 579, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 582, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 495, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 583,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 357, 358, 356, 0, 359, 360, 362,
	361, 0, 0, 0, 0, 239, 363, 240, 364, 365,
	0, 366, 367, 0, 0, 368, 369, 0, 0, 370,
	241, 0, 371, 0, 242, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 243, 380, 244, 381, 0, 382,
	383, 384, 385, 386, 245, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 394, 397, 398, 399,
	400, 0, 401, 0, 402, 403, 404, 405, 246, 406,
	0, 410, 411, 412, 413, 414, 415, 416, 584, 422,
	423, 417, 419, 420, 421, 418, 424, 425, 0, 426,
	407, 408, 427, 0, 428, 247, 429, 430, 0, 440,
	431, 432, 433, 409, 434, 438, 439, 435, 436, 437,
	248, 0, 441, 442, 0, 443, 444, 445, 446, 447,
	308, 448, 309, 449, 450, 0, 249, 250, 251, 451,
	0, 0, 452, 453, 252, 253, 0, 454, 455, 0,
	456, 457, 0, 0, 458, 459, 460, 462, 0, 463,
	0, 461, 464, 465, 466, 254, 255, 492, 0, 467,
	256, 0, 0, 0, 0, 468, 469, 257, 470, 471,
	472, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 582, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 583, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 357, 358, 356, 0, 359, 360, 362, 361,
	0, 0, 0, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 0, 368, 369, 0, 0, 370, 241,
	0, 371, 0, 242, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 243, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 0, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 584, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 0, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 248,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 249, 250, 251, 451, 0,
	0, 452, 453, 252, 253, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 254, 255, 0, 0, 467, 256,
	1116, 0, 492, 0, 468, 469, 257, 470, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 357, 358, 356,
	0, 359, 360, 362, 361, 0, 0, 0, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 920, 368,
	369, 0, 0, 370, 241, 0, 371, 0, 242, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 243, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 0, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 0, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 248, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 252, 253,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 254,
	255, 0, 0, 467, 256, 940, 0, 492, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	942, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 357, 358, 356, 0, 359, 360, 362, 361,
	0, 0, 0, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 920, 368, 369, 0, 0, 370, 241,
	0, 371, 0, 242, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 243, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 0, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 0, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 0, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 248,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 249, 250, 251, 451, 0,
	0, 452, 453, 252, 253, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 254, 255, 0, 0, 467, 256,
	937, 0, 492, 0, 468, 469, 257, 470, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 939, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 357, 358, 356,
	0, 359, 360, 362, 361, 0, 0, 0, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 920, 368,
	369, 0, 0, 370, 241, 0, 371, 0, 242, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 243, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 0, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 0, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 248, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 252, 253,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 254,
	255, 0, 0, 467, 256, 933, 0, 492, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	935, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 357, 358, 356, 0, 359, 360, 362, 361,
	0, 0, 0, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 920, 368, 369, 0, 0, 370, 241,
	0, 371, 0, 242, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 243, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 0, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 0, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 0, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 248,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 249, 250, 251, 451, 0,
	0, 452, 453, 252, 253, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 254, 255, 0, 0, 467, 256,
	515, 0, 492, 0, 468, 469, 257, 470, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 514, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 357, 358, 356,
	0, 359, 360, 362, 361, 0, 0, 0, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 0, 368,
	369, 0, 0, 370, 241, 0, 371, 0, 242, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 243, 380,
	244, 513, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 0, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 0, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 248, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 252, 253,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 254,
	255, 492, 0, 467, 256, 0, 0, 0, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 1957,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 495,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 357, 358, 356, 0,
	359, 360, 362, 361, 0, 0, 0, 0, 239, 363,
	240, 364, 365, 0, 366, 367, 0, 0, 368, 369,
	0, 0, 370, 241, 0, 371, 0, 242, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 243, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 245, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 0, 402, 403, 404,
	405, 246, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 0, 426, 407, 408, 427, 0, 428, 247, 429,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 0, 249,
	250, 251, 451, 0, 0, 452, 453, 252, 253, 0,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 0, 463, 0, 461, 464, 465, 466, 254, 255,
	492, 2443, 467, 256, 0, 0, 0, 0, 468, 469,
	257, 470, 471, 472, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 495, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 357, 358, 356, 0, 359,
	360, 362, 361, 0, 0, 0, 0, 239, 363, 240,
	364, 365, 0, 366, 367, 0, 0, 368, 369, 0,
	0, 370, 241, 0, 371, 0, 242, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 243, 380, 244, 381,
	0, 382, 383, 384, 385, 386, 245, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 394, 397,
	398, 399, 400, 0, 401, 0, 402, 403, 404, 405,
	246, 406, 0, 410, 411, 412, 413, 414, 415, 416,
	0, 422, 423, 417, 419, 420, 421, 418, 424, 425,
	0, 426, 407, 408, 427, 0, 428, 247, 429, 430,
	0, 440, 431, 432, 433, 409, 434, 438, 439, 435,
	436, 437, 248, 0, 441, 442, 0, 443, 444, 445,
	446, 447, 308, 448, 309, 449, 450, 0, 249, 250,
	251, 451, 0, 0, 452, 453, 252, 253, 0, 454,
	455, 0, 456, 457, 0, 0, 458, 459, 460, 462,
	0, 463, 0, 461, 464, 465, 466, 254, 255, 492,
	2443, 467, 256, 0, 0, 0, 0, 468, 469, 257,
	470, 471, 472, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 495, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 357, 358, 356, 0, 359, 360,
	362, 361, 0, 0, 0, 0, 239, 363, 240, 364,
	365, 0, 366, 367, 0, 0, 368, 2440, 0, 0,
	370, 241, 0, 371, 0, 242, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 243, 380, 244, 381, 0,
	382, 383, 384, 385, 386, 245, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 394, 397, 398,
	399, 400, 0, 401, 0, 402, 403, 404, 405, 246,
	406, 0, 410, 411, 412, 413, 414, 415, 416, 0,
	422, 423, 417, 419, 420, 421, 418, 424, 425, 0,
	426, 407, 408, 427, 0, 428, 247, 429, 430, 0,
	440, 431, 432, 433, 409, 434, 438, 439, 435, 436,
	437, 248, 0, 441, 442, 0, 443, 444, 445, 446,
	447, 308, 448, 309, 449, 450, 0, 249, 250, 251,
	451, 0, 0, 452, 453, 252, 253, 0, 454, 455,
	0, 456, 457, 0, 0, 458, 459, 460, 462, 0,
	463, 0, 461, 464, 465, 466, 254, 255, 492, 0,
	467, 256, 0, 0, 0, 0, 468, 469, 257, 470,
	471, 472, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 495, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 357, 358, 356, 0, 359, 360, 362,
	361, 0, 0, 0, 0, 239, 363, 240, 364, 365,
	0, 366, 367, 0, 920, 368, 369, 0, 0, 370,
	241, 0, 371, 0, 242, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 243, 380, 244, 381, 0, 382,
	383, 384, 385, 386, 245, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 394, 397, 398, 399,
	400, 0, 401, 0, 402, 403, 404, 405, 246, 406,
	0, 410, 411, 412, 413, 414, 415, 416, 0, 422,
	423, 417, 419, 420, 421, 418, 424, 425, 0, 426,
	407, 408, 427, 0, 428, 247, 429, 430, 0, 440,
	431, 432, 433, 409, 434, 438, 439, 435, 436, 437,
	248, 0, 441, 442, 0, 443, 444, 445, 446, 447,
	308, 448, 309, 449, 450, 0, 249, 250, 251, 451,
	0, 0, 452, 453, 252, 253, 0, 454, 455, 0,
	456, 457, 0, 0, 458, 459, 460, 462, 0, 463,
	0, 461, 464, 465, 466, 254, 255, 0, 0, 467,
	256, 1713, 0, 492, 0, 468, 469, 257, 470, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 495, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 357, 358,
	356, 0, 359, 360, 362, 361, 0, 0, 0, 0,
	239, 363, 240, 364, 365, 0, 366, 367, 0, 0,
	368, 369, 0, 0, 370, 241, 0, 371, 0, 242,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 243,
	380, 244, 381, 0, 382, 383, 384, 385, 386, 245,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 394, 397, 398, 399, 400, 0, 401, 0, 402,
	403, 404, 405, 246, 406, 0, 410, 411, 412, 413,
	414, 415, 416, 0, 422, 423, 417, 419, 420, 421,
	418, 424, 425, 0, 426, 407, 408, 427, 0, 428,
	247, 429, 430, 0, 440, 431, 432, 433, 409, 434,
	438, 439, 435, 436, 437, 248, 0, 441, 442, 0,
	443, 444, 445, 446, 447, 308, 448, 309, 449, 450,
	0, 249, 250, 251, 451, 0, 0, 452, 453, 252,
	253, 0, 454, 455, 0, 456, 457, 0, 0, 458,
	459, 460, 462, 0, 463, 0, 461, 464, 465, 466,
	254, 255, 0, 0, 467, 256, 1711, 0, 492, 0,
	468, 469, 257, 470, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 495, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 357, 358, 356, 0, 359, 360, 362,
	361, 0, 0, 0, 0, 239, 363, 240, 364, 365,
	0, 366, 367, 0, 0, 368, 369, 0, 0, 370,
	241, 0, 371, 0, 242, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 243, 380, 244, 381, 0, 382,
	383, 384, 385, 386, 245, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 394, 397, 398, 399,
	400, 0, 401, 0, 402, 403, 404, 405, 246, 406,
	0, 410, 411, 412, 413, 414, 415, 416, 0, 422,
	423, 417, 419, 420, 421, 418, 424, 425, 0, 426,
	407, 408, 427, 0, 428, 247, 429, 430, 0, 440,
	431, 432, 433, 409, 434, 438, 439, 435, 436, 437,
	248, 0, 441, 442, 0, 443, 444, 445, 446, 447,
	308, 448, 309, 449, 450, 0, 249, 250, 251, 451,
	0, 0, 452, 453, 252, 253, 0, 454, 455, 0,
	456, 457, 0, 0, 458, 459, 460, 462, 0, 463,
	0, 461, 464, 465, 466, 254, 255, 0, 0, 467,
	256, 1709, 0, 492, 0, 468, 469, 257, 470, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 495, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 357, 358,
	356, 0, 359, 360, 362, 361, 0, 0, 0, 0,
	239, 363, 240, 364, 365, 0, 366, 367, 0, 0,
	368, 369, 0, 0, 370, 241, 0, 371, 0, 242,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 243,
	380, 244, 381, 0, 382, 383, 384, 385, 386, 245,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 394, 397, 398, 399, 400, 0, 401, 0, 402,
	403, 404, 405, 246, 406, 0, 410, 411, 412, 413,
	414, 415, 416, 0, 422, 423, 417, 419, 420, 421,
	418, 424, 425, 0, 426, 407, 408, 427, 0, 428,
	247, 429, 430, 0, 440, 431, 432, 433, 409, 434,
	438, 439, 435, 436, 437, 248, 0, 441, 442, 0,
	443, 444, 445, 446, 447, 308, 448, 309, 449, 450,
	0, 249, 250, 251, 451, 0, 0, 452, 453, 252,
	253, 0, 454, 455, 0, 456, 457, 0, 0, 458,
	459, 460, 462, 0, 463, 0, 461, 464, 465, 466,
	254, 255, 492, 0, 467, 256, 0, 0, 0, 0,
	468, 469, 257, 470, 471, 472, 0, 0, 258, 259,
	260, 261, 1686, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 357, 358, 356,
	0, 359, 360, 362, 361, 0, 0, 0, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 0, 368,
	369, 0, 0, 370, 241, 0, 371, 0, 242, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 243, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 0, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 0, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 248, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 252, 253,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 254,
	255, 0, 0, 467, 256, 1646, 0, 492, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 357, 358, 356, 0, 359, 360, 362, 361,
	0, 0, 0, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 0, 368, 369, 0, 0, 370, 241,
	0, 371, 0, 242, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 243, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 0, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 0, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 0, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 248,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 249, 250, 251, 451, 0,
	0, 452, 453, 252, 253, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 254, 255, 0, 0, 467, 256,
	1644, 0, 492, 0, 468, 469, 257, 470, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 357, 358, 356,
	0, 359, 360, 362, 361, 0, 0, 0, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 0, 368,
	369, 0, 0, 370, 241, 0, 371, 0, 242, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 243, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 0, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 0, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 248, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 252, 253,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 254,
	255, 0, 0, 467, 256, 626, 0, 492, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 1194,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 357, 358, 627, 0, 359, 360, 362, 361,
	0, 0, 0, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 0, 368, 369, 0, 0, 370, 241,
	0, 371, 0, 242, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 243, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 0, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 623, 413, 414, 415, 416, 0, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 0, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 248,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 622, 250, 251, 451, 0,
	0, 452, 453, 252, 253, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 254, 255, 0, 0, 467, 256,
	1542, 0, 492, 0, 468, 469, 257, 470, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 1541, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 357, 358, 356,
	0, 359, 360, 362, 361, 0, 0, 0, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 0, 368,
	369, 0, 0, 370, 241, 0, 371, 0, 242, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 243, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 0, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 0, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 248, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 252, 253,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 254,
	255, 0, 0, 467, 256, 626, 0, 492, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 1194,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 357, 358, 627, 0, 359, 360, 362, 361,
	0, 0, 0, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 0, 368, 369, 0, 0, 370, 241,
	0, 371, 0, 242, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 243, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 0, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 623, 413, 414, 415, 416, 0, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 0, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 248,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 622, 250, 251, 451, 0,
	0, 452, 1195, 252, 253, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 254, 255, 0, 0, 467, 256,
	626, 0, 492, 0, 468, 469, 257, 470, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 616, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 357, 358, 627,
	0, 359, 360, 362, 361, 0, 0, 0, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 0, 368,
	369, 0, 0, 370, 241, 0, 371, 0, 242, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 243, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 0, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 623, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	1166, 425, 0, 426, 407, 408, 427, 0, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 248, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	622, 250, 251, 451, 0, 0, 452, 453, 252, 253,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 254,
	255, 0, 0, 467, 256, 1134, 0, 492, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1133, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 357, 358, 356, 0, 359, 360, 362, 361,
	0, 0, 0, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 0, 368, 369, 0, 0, 370, 241,
	0, 371, 0, 242, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 243, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 0, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 0, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 0, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 248,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 249, 250, 251, 451, 0,
	0, 452, 453, 252, 253, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 254, 255, 0, 0, 467, 256,
	1130, 0, 492, 0, 468, 469, 257, 470, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 1129, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 357, 358, 356,
	0, 359, 360, 362, 361, 0, 0, 0, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 0, 368,
	369, 0, 0, 370, 241, 0, 371, 0, 242, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 243, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 0, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 0, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 248, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 252, 253,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 254,
	255, 0, 0, 467, 256, 1127, 0, 492, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1126, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 357, 358, 356, 0, 359, 360, 362, 361,
	0, 0, 0, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 0, 368, 369, 0, 0, 370, 241,
	0, 371, 0, 242, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 243, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 0, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 0, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 0, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 248,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 249, 250, 251, 451, 0,
	0, 452, 453, 252, 253, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 254, 255, 0, 0, 467, 256,
	1124, 0, 492, 0, 468, 469, 257, 470, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 1123, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 357, 358, 356,
	0, 359, 360, 362, 361, 0, 0, 0, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 0, 368,
	369, 0, 0, 370, 241, 0, 371, 0, 242, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 243, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 0, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 0, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 248, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 252, 253,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 254,
	255, 0, 0, 467, 256, 1120, 0, 492, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1119, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 357, 358, 356, 0, 359, 360, 362, 361,
	0, 0, 0, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 0, 368, 369, 0, 0, 370, 241,
	0, 371, 0, 242, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 243, 380, 244, 381, 0, 382, 383,
	384, 385, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 0, 402, 403, 404, 405, 246, 406, 0,
	410, 411, 412, 413, 414, 415, 416, 0, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 0, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 248,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 249, 250, 251, 451, 0,
	0, 452, 453, 252, 253, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 254, 255, 492, 0, 467, 256,
	0, 0, 0, 0, 468, 469, 257, 470, 471, 472,
	0, 0, 258, 259, 260, 261, 1108, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 495, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 357, 358, 356, 0, 359, 360, 362, 361, 0,
	0, 0, 0, 239, 363, 240, 364, 365, 0, 366,
	367, 0, 0, 368, 369, 0, 0, 370, 241, 0,
	371, 0, 242, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 243, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 245, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 0, 402, 403, 404, 405, 246, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 417,
	419, 420, 421, 418, 424, 425, 0, 426, 407, 408,
	427, 0, 428, 247, 429, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 0, 249, 250, 251, 451, 0, 0,
	452, 453, 252, 253, 0, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 0, 463, 0, 461,
	464, 465, 466, 254, 255, 0, 0, 467, 256, 1106,
	0, 492, 0, 468, 469, 257, 470, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 495,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1105, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 357, 358, 356, 0,
	359, 360, 362, 361, 0, 0, 0, 0, 239, 363,
	240, 364, 365, 0, 366, 367, 0, 0, 368, 369,
	0, 0, 370, 241, 0, 371, 0, 242, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 243, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 245, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 0, 402, 403, 404,
	405, 246, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 0, 426, 407, 408, 427, 0, 428, 247, 429,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 0, 249,
	250, 251, 451, 0, 0, 452, 453, 252, 253, 0,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 0, 463, 0, 461, 464, 465, 466, 254, 255,
	0, 0, 467, 256, 1100, 0, 492, 0, 468, 469,
	257, 470, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 495, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 357, 358, 356, 0, 359, 360, 362, 361, 0,
	0, 0, 0, 239, 363, 240, 364, 365, 0, 366,
	367, 0, 0, 368, 369, 0, 0, 370, 241, 0,
	371, 0, 242, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 243, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 245, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 0, 402, 403, 404, 405, 246, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 417,
	419, 420, 421, 418, 424, 425, 0, 426, 407, 408,
	427, 0, 428, 247, 429, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 0, 249, 250, 251, 451, 0, 0,
	452, 453, 252, 253, 0, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 0, 463, 0, 461,
	464, 465, 466, 254, 255, 0, 0, 467, 256, 1091,
	0, 492, 0, 468, 469, 257, 470, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 495,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1090, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 357, 358, 356, 0,
	359, 360, 362, 361, 0, 0, 0, 0, 239, 363,
	240, 364, 365, 0, 366, 367, 0, 0, 368, 369,
	0, 0, 370, 241, 0, 371, 0, 242, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 243, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 245, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 0, 402, 403, 404,
	405, 246, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 0, 426, 407, 408, 427, 0, 428, 247, 429,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 0, 249,
	250, 251, 451, 0, 0, 452, 453, 252, 253, 0,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 0, 463, 0, 461, 464, 465, 466, 254, 255,
	0, 0, 467, 256, 1086, 0, 492, 0, 468, 469,
	257, 470, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 495, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 357, 358, 356, 0, 359, 360, 362, 361, 0,
	0, 0, 0, 239, 363, 240, 364, 365, 0, 366,
	367, 0, 0, 368, 369, 0, 0, 370, 241, 0,
	371, 0, 242, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 243, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 245, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 0, 402, 403, 404, 405, 246, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 417,
	419, 420, 421, 418, 424, 425, 0, 426, 407, 408,
	427, 0, 428, 247, 429, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 0, 249, 250, 251, 451, 0, 0,
	452, 453, 252, 253, 0, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 0, 463, 0, 461,
	464, 465, 466, 254, 255, 0, 0, 467, 256, 1082,
	0, 492, 0, 468, 469, 257, 470, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 495,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1084, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 357, 358, 356, 0,
	359, 360, 362, 361, 0, 0, 0, 0, 239, 363,
	240, 364, 365, 0, 366, 367, 0, 0, 368, 369,
	0, 0, 370, 241, 0, 371, 0, 242, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 243, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 245, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 0, 402, 403, 404,
	405, 246, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 0, 426, 407, 408, 427, 0, 428, 247, 429,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 0, 249,
	250, 251, 451, 0, 0, 452, 453, 252, 253, 0,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 0, 463, 0, 461, 464, 465, 466, 254, 255,
	0, 0, 467, 256, 959, 0, 492, 0, 468, 469,
	257, 470, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 495, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 961,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 357, 358, 356, 0, 359, 360, 362, 361, 0,
	0, 0, 0, 239, 363, 240, 364, 365, 0, 366,
	367, 0, 0, 368, 369, 0, 0, 370, 241, 0,
	371, 0, 242, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 243, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 245, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 0, 402, 403, 404, 405, 246, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 417,
	419, 420, 421, 418, 424, 425, 0, 426, 407, 408,
	427, 0, 428, 247, 429, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 0, 249, 250, 251, 451, 0, 0,
	452, 453, 252, 253, 0, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 0, 463, 0, 461,
	464, 465, 466, 254, 255, 0, 0, 467, 256, 956,
	0, 492, 0, 468, 469, 257, 470, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 495,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 357, 358, 356, 0,
	359, 360, 362, 361, 0, 0, 0, 0, 239, 363,
	240, 364, 365, 0, 366, 367, 0, 0, 368, 369,
	0, 0, 370, 241, 0, 371, 0, 242, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 243, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 245, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 0, 402, 403, 404,
	405, 246, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 0, 426, 407, 408, 427, 0, 428, 247, 429,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 0, 249,
	250, 251, 451, 0, 0, 452, 453, 252, 253, 0,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 0, 463, 0, 461, 464, 465, 466, 254, 255,
	0, 0, 467, 256, 626, 0, 492, 0, 468, 469,
	257, 470, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	616, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 495, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 615, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 357, 358, 627, 0, 359, 360, 362, 361, 0,
	0, 0, 0, 239, 363, 240, 364, 365, 0, 366,
	367, 0, 0, 368, 369, 0, 0, 370, 241, 0,
	371, 0, 242, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 243, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 245, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 0, 402, 403, 404, 405, 617, 406, 0, 410,
	411, 623, 413, 414, 415, 416, 0, 422, 423, 417,
	419, 420, 421, 418, 618, 425, 0, 426, 407, 408,
	427, 0, 428, 247, 429, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 0, 622, 250, 251, 451, 0, 0,
	452, 620, 252, 253, 0, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 0, 463, 0, 461,
	464, 465, 466, 254, 255, 0, 0, 467, 256, 606,
	0, 492, 0, 468, 469, 257, 470, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 495,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 357, 358, 356, 0,
	359, 360, 362, 361, 0, 0, 0, 0, 239, 363,
	240, 364, 365, 0, 366, 367, 0, 0, 368, 369,
	0, 0, 370, 241, 0, 371, 0, 242, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 243, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 245, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 0, 402, 403, 404,
	405, 246, 406, 0, 607, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 0, 426, 407, 408, 427, 0, 428, 247, 429,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 0, 249,
	250, 251, 451, 0, 0, 452, 453, 252, 253, 0,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 0, 463, 0, 461, 464, 465, 466, 254, 255,
	0, 0, 467, 256, 602, 0, 492, 0, 468, 469,
	257, 470, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 495, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 357, 358, 356, 0, 359, 360, 362, 361, 0,
	0, 0, 0, 239, 363, 240, 364, 365, 0, 366,
	367, 0, 0, 368, 369, 0, 0, 370, 241, 0,
	371, 0, 242, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 243, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 245, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 0, 402, 403, 404, 405, 246, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 417,
	419, 420, 421, 418, 424, 425, 0, 426, 407, 408,
	427, 0, 428, 247, 429, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 0, 249, 250, 251, 451, 0, 0,
	452, 453, 252, 253, 0, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 0, 463, 0, 461,
	464, 465, 466, 254, 255, 0, 0, 467, 256, 591,
	0, 492, 0, 468, 469, 257, 470, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 495,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 357, 358, 356, 0,
	359, 360, 362, 361, 0, 0, 0, 0, 239, 363,
	240, 364, 365, 0, 366, 367, 0, 0, 368, 369,
	0, 0, 370, 241, 0, 371, 0, 242, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 243, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 245, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 0, 402, 403, 404,
	405, 246, 406, 0, 410, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 0, 426, 407, 408, 427, 0, 428, 247, 429,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 0, 249,
	250, 251, 451, 0, 0, 452, 453, 252, 253, 0,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 0, 463, 0, 461, 464, 465, 466, 254, 255,
	0, 0, 467, 256, 537, 0, 492, 0, 468, 469,
	257, 470, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 495, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 357, 358, 356, 0, 359, 360, 362, 361, 0,
	0, 0, 0, 239, 363, 240, 364, 365, 0, 366,
	367, 0, 0, 368, 369, 0, 0, 370, 241, 0,
	371, 0, 242, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 243, 380, 244, 381, 0, 382, 383, 384,
	385, 386, 245, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 394, 397, 398, 399, 400, 0,
	401, 0, 402, 403, 404, 405, 246, 406, 0, 410,
	411, 412, 413, 414, 415, 416, 0, 422, 423, 417,
	419, 420, 421, 418, 424, 425, 0, 426, 407, 408,
	427, 0, 428, 247, 429, 430, 0, 440, 431, 432,
	433, 409, 434, 438, 439, 435, 436, 437, 248, 0,
	441, 442, 0, 443, 444, 445, 446, 447, 308, 448,
	309, 449, 450, 0, 249, 250, 251, 451, 0, 0,
	452, 453, 252, 253, 0, 454, 455, 0, 456, 457,
	0, 0, 458, 459, 460, 462, 0, 463, 0, 461,
	464, 465, 466, 254, 255, 492, 0, 467, 256, 0,
	0, 0, 0, 468, 469, 257, 470, 471, 472, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 495, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	357, 358, 356, 0, 359, 360, 362, 361, 0, 0,
	0, 0, 239, 363, 240, 364, 365, 0, 366, 367,
	0, 0, 368, 369, 0, 0, 370, 241, 0, 371,
	0, 242, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 243, 380, 244, 381, 0, 382, 383, 384, 385,
	386, 245, 387, 388, 0, 389, 390, 391, 392, 393,
	0, 395, 396, 394, 397, 398, 399, 400, 0, 401,
	0, 402, 403, 404, 405, 246, 406, 0, 410, 411,
	412, 413, 414, 415, 416, 0, 422, 423, 417, 419,
	420, 421, 418, 424, 425, 0, 426, 407, 408, 427,
	0, 428, 247, 429, 430, 0, 440, 431, 432, 433,
	409, 434, 438, 439, 435, 436, 437, 248, 0, 441,
	442, 0, 443, 444, 445, 446, 447, 308, 448, 309,
	449, 450, 0, 249, 250, 251, 451, 0, 0, 452,
	453, 252, 253, 0, 454, 455, 0, 456, 457, 0,
	0, 458, 459, 460, 462, 0, 463, 0, 461, 464,
	465, 466, 254, 255, 492, 0, 467, 256, 0, 0,
	0, 0, 468, 469, 257, 470, 471, 472, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 495, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 2344, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 357,
	358, 356, 0, 359, 360, 362, 361, 0, 0, 0,
	0, 239, 363, 240, 364, 365, 0, 366, 367, 0,
	0, 368, 369, 0, 0, 370, 241, 0, 371, 0,
	242, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	243, 380, 244, 381, 0, 382, 383, 384, 385, 386,
	245, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 394, 397, 398, 399, 400, 0, 401, 0,
	402, 403, 404, 405, 246, 406, 0, 410, 411, 412,
	413, 414, 415, 416, 0, 422, 423, 417, 419, 420,
	421, 418, 424, 425, 0, 426, 407, 408, 427, 0,
	428, 247, 429, 430, 0, 440, 431, 432, 433, 409,
	434, 438, 439, 435, 436, 437, 248, 0, 441, 442,
	0, 443, 444, 445, 446, 447, 308, 448, 309, 449,
	450, 0, 249, 250, 251, 451, 0, 0, 452, 453,
	252, 253, 0, 454, 455, 0, 456, 457, 0, 0,
	458, 459, 460, 462, 0, 463, 0, 461, 464, 465,
	466, 254, 255, 492, 0, 467, 256, 0, 0, 0,
	0, 468, 469, 257, 470, 471, 472, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 495, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 2342, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 357, 358,
	356, 0, 359, 360, 362, 361, 0, 0, 0, 0,
	239, 363, 240, 364, 365, 0, 366, 367, 0, 0,
	368, 369, 0, 0, 370, 241, 0, 371, 0, 242,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 243,
	380, 244, 381, 0, 382, 383, 384, 385, 386, 245,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 394, 397, 398, 399, 400, 0, 401, 0, 402,
	403, 404, 405, 246, 406, 0, 410, 411, 412, 413,
	414, 415, 416, 0, 422, 423, 417, 419, 420, 421,
	418, 424, 425, 0, 426, 407, 408, 427, 0, 428,
	247, 429, 430, 0, 440, 431, 432, 433, 409, 434,
	438, 439, 435, 436, 437, 248, 0, 441, 442, 0,
	443, 444, 445, 446, 447, 308, 448, 309, 449, 450,
	0, 249, 250, 251, 451, 0, 0, 452, 453, 252,
	253, 0, 454, 455, 0, 456, 457, 0, 0, 458,
	459, 460, 462, 0, 463, 0, 461, 464, 465, 466,
	254, 255, 492, 0, 467, 256, 0, 0, 0, 0,
	468, 469, 257, 470, 471, 472, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	495, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 2331, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 357, 358, 356,
	0, 359, 360, 362, 361, 0, 0, 0, 0, 239,
	363, 240, 364, 365, 0, 366, 367, 0, 0, 368,
	369, 0, 0, 370, 241, 0, 371, 0, 242, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 243, 380,
	244, 381, 0, 382, 383, 384, 385, 386, 245, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	394, 397, 398, 399, 400, 0, 401, 0, 402, 403,
	404, 405, 246, 406, 0, 410, 411, 412, 413, 414,
	415, 416, 0, 422, 423, 417, 419, 420, 421, 418,
	424, 425, 0, 426, 407, 408, 427, 0, 428, 247,
	429, 430, 0, 440, 431, 432, 433, 409, 434, 438,
	439, 435, 436, 437, 248, 0, 441, 442, 0, 443,
	444, 445, 446, 447, 308, 448, 309, 449, 450, 0,
	249, 250, 251, 451, 0, 0, 452, 453, 252, 253,
	0, 454, 455, 0, 456, 457, 0, 0, 458, 459,
	460, 462, 0, 463, 0, 461, 464, 465, 466, 254,
	255, 492, 0, 467, 256, 0, 0, 0, 0, 468,
	469, 257, 470, 471, 472, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 495,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 357, 358, 356, 0,
	359, 360, 362, 361, 0, 0, 0, 0, 239, 363,
	240, 364, 365, 0, 366, 367, 0, 0, 368, 369,
	0, 0, 370, 241, 0, 371, 0, 242, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 243, 380, 244,
	381, 0, 382, 383, 384, 385, 386, 245, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 394,
	397, 398, 399, 400, 0, 401, 0, 402, 403, 404,
	405, 246, 406, 0, 607, 411, 412, 413, 414, 415,
	416, 0, 422, 423, 417, 419, 420, 421, 418, 424,
	425, 0, 426, 407, 408, 427, 0, 428, 247, 429,
	430, 0, 440, 431, 432, 433, 409, 434, 438, 439,
	435, 436, 437, 248, 0, 441, 442, 0, 443, 444,
	445, 446, 447, 308, 448, 309, 449, 450, 0, 249,
	250, 251, 451, 0, 0, 452, 453, 252, 253, 0,
	454, 455, 0, 456, 457, 0, 0, 458, 459, 460,
	462, 0, 463, 0, 461, 464, 465, 466, 254, 255,
	492, 0, 467, 256, 0, 0, 0, 0, 468, 469,
	257, 470, 471, 472, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 1555, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 495, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 357, 358, 356, 0, 359,
	360, 362, 361, 0, 0, 0, 0, 239, 363, 240,
	364, 365, 0, 366, 367, 0, 0, 368, 369, 0,
	0, 370, 241, 0, 371, 0, 242, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 243, 380, 244, 381,
	0, 382, 383, 384, 385, 386, 245, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 394, 397,
	398, 399, 400, 0, 401, 0, 402, 403, 404, 405,
	246, 406, 0, 410, 411, 412, 413, 414, 415, 416,
	0, 422, 423, 417, 419, 420, 421, 418, 424, 425,
	0, 0, 407, 408, 427, 0, 428, 247, 429, 430,
	0, 440, 431, 432, 433, 409, 434, 438, 439, 435,
	436, 437, 248, 0, 441, 442, 0, 443, 444, 445,
	446, 447, 308, 448, 309, 449, 450, 0, 249, 250,
	251, 451, 0, 0, 452, 453, 252, 253, 0, 454,
	455, 0, 456, 457, 0, 0, 458, 459, 460, 462,
	0, 463, 0, 461, 464, 465, 466, 254, 255, 492,
	0, 467, 256, 0, 0, 0, 0, 468, 469, 257,
	470, 471, 472, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 495, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1546, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 357, 358, 356, 0, 359, 360,
	362, 361, 0, 0, 0, 0, 239, 363, 240, 364,
	365, 0, 366, 367, 0, 0, 368, 369, 0, 0,
	370, 241, 0, 371, 0, 242, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 243, 380, 244, 381, 0,
	382, 383, 384, 385, 386, 245, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 394, 397, 398,
	399, 400, 0, 401, 0, 402, 403, 404, 405, 246,
	406, 0, 410, 411, 412, 413, 414, 415, 416, 0,
	422, 423, 417, 419, 420, 421, 418, 424, 425, 0,
	426, 407, 408, 427, 0, 428, 247, 429, 430, 0,
	440, 431, 432, 433, 409, 434, 438, 439, 435, 436,
	437, 248, 0, 441, 442, 0, 443, 444, 445, 446,
	447, 308, 448, 309, 449, 450, 0, 249, 250, 251,
	451, 0, 0, 452, 453, 252, 253, 0, 454, 455,
	0, 456, 457, 0, 0, 458, 459, 460, 462, 0,
	463, 0, 461, 464, 465, 466, 254, 255, 492, 0,
	467, 256, 0, 0, 0, 0, 468, 469, 257, 470,
	471, 472, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 495, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 357, 358, 356, 0, 359, 360, 362,
	361, 0, 0, 0, 0, 239, 363, 240, 364, 365,
	0, 366, 367, 0, 0, 368, 369, 0, 0, 370,
	241, 0, 371, 0, 242, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 243, 380, 244, 381, 0, 382,
	383, 384, 385, 386, 245, 893, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 394, 397, 398, 399,
	400, 0, 401, 0, 402, 403, 404, 405, 246, 406,
	0, 410, 411, 412, 413, 414, 415, 416, 0, 422,
	423, 417, 419, 420, 421, 418, 424, 425, 0, 426,
	407, 408, 427, 0, 428, 247, 429, 430, 0, 440,
	431, 432, 433, 409, 434, 438, 439, 435, 436, 437,
	248, 0, 441, 442, 0, 443, 444, 445, 446, 447,
	308, 448, 309, 449, 450, 0, 249, 250, 251, 451,
	0, 0, 452, 453, 252, 253, 0, 454, 455, 0,
	456, 457, 0, 0, 458, 459, 460, 462, 0, 463,
	0, 461, 464, 465, 466, 254, 255, 492, 0, 467,
	256, 0, 0, 0, 0, 468, 469, 257, 470, 471,
	472, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 495, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 357, 358, 356, 0, 359, 360, 362, 361,
	0, 0, 0, 0, 239, 363, 240, 364, 365, 0,
	366, 367, 0, 0, 368, 369, 0, 0, 370, 241,
	0, 371, 0, 242, 372, 373, 374, 0, 376, 377,
	378, 0, 379, 243, 380, 244, 381, 0, 382, 383,
	384, 0, 386, 245, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 394, 397, 398, 399, 400,
	0, 401, 0, 402, 403, 404, 405, 246, 0, 0,
	410, 411, 412, 413, 414, 415, 416, 0, 422, 423,
	417, 419, 420, 421, 418, 424, 425, 0, 426, 407,
	408, 427, 0, 428, 247, 429, 430, 0, 440, 431,
	432, 433, 409, 434, 438, 439, 435, 436, 437, 248,
	0, 441, 442, 0, 443, 444, 445, 446, 447, 308,
	448, 309, 449, 450, 0, 249, 250, 251, 451, 0,
	0, 452, 453, 252, 253, 0, 454, 455, 0, 456,
	457, 0, 0, 458, 459, 460, 462, 0, 463, 0,
	461, 464, 465, 466, 254, 255, 0, 0, 467, 256,
	0, 0, 0, 0, 468, 469, 257, 470, 471, 472,
	1292, 1293, 0, 1325, 1326, 1327, 1335, 1336, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 1295, 0, 0, 1341, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 1325, 1326, 1327, 1335, 1336, 1337, 0, 0,
	1294, 0, 0, 0, 0, 0, 0, 1328, 1314, 0,
	0, 0, 0, 0, 1295, 1311, 0, 1341, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 0, 1314, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1317, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 1300, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 1342, 0, 0, 1322, 1323, 1324, 1317, 1318, 1319,
	1320, 0, 0, 0, 0, 0, 1300, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 1339, 0, 0, 0,
	0, 0, 0, 1309, 1310, 0, 0, 0, 0, 1332,
	1342, 0, 0, 1322, 1323, 1324, 1330, 0, 0, 0,
	0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 1339, 0, 0, 0, 1340,
	0, 0, 1309, 1310, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 0, 1330, 0, 0, 0, 0,
	0, 0, 1315, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	0, 0, 1329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1321, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 0, 0, 0, 0,
	0, 1292, 1293, 0, 1325, 1326, 1327, 1335, 1336, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 1333, 1328,
	0, 0, 0, 0, 0, 0, 1295, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 1331, 0, 1314,
	1306, 1307, 1313, 1312, 1308, 1334, 1311, 1305, 1303, 1304,
	1296, 1297, 1298, 1299, 1301, 1302, 0, 0, 0, 0,
	0, 0, 0, 0, 2225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 1306,
	1307, 1313, 1312, 1308, 1334, 0, 1305, 1303, 1304, 1296,
	1297, 1298, 1299, 1301, 1302, 0, 0, 0, 0, 1317,
	1318, 1319, 1320, 2222, 0, 0, 0, 0, 1300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 1325, 1326, 1327, 1335, 1336, 1337, 0,
	0, 1332, 1342, 0, 0, 1322, 1323, 1324, 1328, 0,
	0, 0, 0, 0, 0, 1295, 0, 0, 1341, 0,
	0, 0, 0, 0, 0, 0, 1338, 1339, 0, 0,
	0, 0, 0, 0, 1309, 1310, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 0, 0, 1330, 1314, 0,
	0, 0, 0, 0, 1315, 1311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1317, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 1300, 0, 0,
	1321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 0, 0,
	1332, 1342, 0, 0, 1322, 1323, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 0, 0, 0, 0, 1338, 1339, 0, 0, 0,
	0, 0, 0, 1309, 1310, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 1306, 1307, 1313, 1312, 1308, 1334, 0, 1305, 1303,
	1304, 1296, 1297, 1298, 1299, 1301, 1302, 0, 0, 1321,
	0, 0, 0, 0, 0, 2221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 0, 1292, 1293,
	0, 1325, 1326, 1327, 1335, 1336, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1328, 0, 0, 1333,
	0, 0, 0, 1295, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 0, 1314, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 1325, 1326, 1327, 1335, 1336, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 1295, 0, 1331, 1341, 0,
	1306, 1307, 1313, 1312, 1308, 1334, 0, 1305, 1303, 1304,
	1296, 1297, 1298, 1299, 1301, 1302, 1317, 1318, 1319, 1320,
	1294, 0, 0, 0, 2220, 1300, 0, 0, 1314, 0,
	0, 0, 0, 0, 0, 1311, 0, 1292, 1293, 0,
	1325, 1326, 1327, 1335, 1336, 1337, 0, 0, 1332, 1342,
	0, 0, 1322, 1323, 1324, 0, 0, 0, 0, 0,
	0, 0, 1295, 0, 0, 1341, 0, 0, 0, 0,
	0, 0, 0, 1338, 1339, 0, 0, 0, 0, 0,
	0, 1309, 1310, 0, 0, 0, 0, 1294, 1317, 1318,
	1319, 1320, 0, 0, 1330, 1314, 0, 1300, 0, 0,
	0, 1315, 1311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	1332, 1342, 0, 0, 1322, 1323, 1324, 0, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 1339, 0, 0, 0,
	0, 0, 0, 1309, 1310, 1317, 1318, 1319, 1320, 0,
	0, 0, 0, 0, 1300, 0, 1330, 1321, 0, 0,
	0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 1332, 1342, 1340,
	0, 1322, 1323, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 0, 0, 0, 1333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1309, 1310, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 1321,
	1315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1333,
	0, 0, 0, 0, 0, 1331, 0, 0, 1306, 1307,
	1313, 1312, 1308, 1334, 0, 1305, 1303, 1304, 1296, 1297,
	1298, 1299, 1301, 1302, 0, 0, 1321, 0, 3020, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1316, 0, 0, 1292, 1293, 0, 1325,
	1326, 1327, 1335, 1336, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 1333, 0, 0, 0,
	0, 1295, 0, 0, 1341, 0, 0, 1331, 0, 0,
	1306, 1307, 1313, 1312, 1308, 1334, 0, 1305, 1303, 1304,
	1296, 1297, 1298, 1299, 1301, 1302, 1294, 0, 0, 0,
	3016, 0, 0, 0, 1314, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 1292, 1293,
	0, 1325, 1326, 1327, 1335, 1336, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 1295, 1331, 0, 1341, 1306, 1307, 1313,
	1312, 1308, 1334, 0, 1305, 1303, 1304, 1296, 1297, 1298,
	1299, 1301, 1302, 0, 1317, 1318, 1319, 1320, 1294, 0,
	0, 0, 0, 1300, 0, 0, 1314, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 1342, 0, 0,
	1322, 1323, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 1339, 0, 0, 0, 0, 0, 0, 1309,
	1310, 0, 0, 0, 0, 0, 1317, 1318, 1319, 1320,
	0, 0, 1330, 0, 0, 1300, 0, 0, 0, 1315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 1332, 1342,
	0, 0, 1322, 1323, 1324, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 1339, 0, 0, 0, 0, 0,
	0, 1309, 1310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 1321, 0, 0, 0, 0,
	0, 1315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1329, 0, 0, 0, 1333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 0, 0,
	0, 0, 0, 1331, 0, 0, 1306, 1307, 1313, 1312,
	1308, 1334, 0, 1305, 1303, 1304, 1296, 1297, 1298, 1299,
	1301, 1302, 0, 0, 0, 0, 2956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1292, 1293, 0, 1325, 1326, 1327,
	1335, 1336, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 1295,
	0, 0, 1341, 0, 0, 1331, 0, 0, 1306, 1307,
	1313, 1312, 1308, 1334, 0, 1305, 1303, 1304, 1296, 1297,
	1298, 1299, 1301, 1302, 1294, 0, 0, 0, 2955, 0,
	0, 0, 1314, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 1292, 1293, 0, 1325,
	1326, 1327, 1335, 1336, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 1318, 1319, 1320, 1294, 0, 0, 0,
	0, 1300, 0, 0, 1314, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 1342, 0, 0, 1322, 1323,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	1339, 0, 0, 0, 0, 0, 0, 1309, 1310, 0,
	0, 0, 0, 0, 1317, 1318, 1319, 1320, 0, 0,
	1330, 0, 0, 1300, 0, 0, 0, 1315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 1332, 1342, 0, 0,
	1322, 1323, 1324, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 1339, 0, 0, 0, 0, 0, 0, 1309,
	1310, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 1321, 0, 0, 0, 0, 0, 1315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1333, 0, 0, 0, 0,
	0, 1331, 0, 0, 1306, 1307, 1313, 1312, 1308, 1334,
	0, 1305, 1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302,
	0, 0, 0, 0, 2904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1292, 1293, 0, 1325, 1326, 1327, 1335, 1336,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 1295, 0, 0,
	1341, 0, 0, 1331, 0, 0, 1306, 1307, 1313, 1312,
	1308, 1334, 0, 1305, 1303, 1304, 1296, 1297, 1298, 1299,
	1301, 1302, 1294, 0, 0, 0, 2865, 0, 0, 0,
	1314, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 0, 0, 0, 1292, 1293, 0, 1325, 1326, 1327,
	1335, 1336, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 1295,
	0, 0, 1341, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1317, 1318, 1319, 1320, 1294, 0, 0, 0, 0, 1300,
	0, 0, 1314, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 1342, 0, 0, 1322, 1323, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 1339, 0,
	0, 0, 0, 0, 0, 1309, 1310, 0, 0, 0,
	0, 0, 1317, 1318, 1319, 1320, 0, 0, 1330, 0,
	0, 1300, 0, 0, 0, 1315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 0, 0, 1332, 1342, 0, 0, 1322, 1323,
	1324, 0, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	1339, 0, 0, 0, 0, 0, 0, 1309, 1310, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 1321, 0, 0, 0, 0, 0, 1315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	0, 1333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1333, 0, 0, 0, 0, 0, 1331,
	0, 0, 1306, 1307, 1313, 1312, 1308, 1334, 0, 1305,
	1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302, 0, 0,
	0, 0, 2777, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 1325, 1326, 1327, 1335, 1336, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 1295, 0, 0, 1341, 0,
	0, 1331, 0, 0, 1306, 1307, 1313, 1312, 1308, 1334,
	0, 1305, 1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302,
	1294, 0, 0, 0, 2734, 0, 0, 0, 1314, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 1292, 1293, 0, 1325, 1326, 1327, 1335, 1336,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 1295, 0, 0,
	1341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1317, 1318,
	1319, 1320, 1294, 0, 0, 0, 0, 1300, 0, 0,
	1314, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 1342, 0, 0, 1322, 1323, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 1339, 0, 0, 0,
	0, 0, 0, 1309, 1310, 0, 0, 0, 0, 0,
	1317, 1318, 1319, 1320, 0, 0, 1330, 0, 0, 1300,
	0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1340,
	0, 0, 1332, 1342, 0, 0, 1322, 1323, 1324, 0,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 1339, 0,
	0, 0, 0, 0, 0, 1309, 1310, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 1321,
	0, 0, 0, 0, 0, 1315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 1340, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 0, 0, 0, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 0, 0, 0, 0, 0, 1331, 0, 0,
	1306, 1307, 1313, 1312, 1308, 1334, 0, 1305, 1303, 1304,
	1296, 1297, 1298, 1299, 1301, 1302, 0, 0, 0, 0,
	2733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1292, 1293,
	0, 1325, 1326, 1327, 1335, 1336, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 1341, 0, 0, 1331,
	0, 0, 1306, 1307, 1313, 1312, 1308, 1334, 0, 1305,
	1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302, 1294, 0,
	0, 0, 2732, 0, 0, 0, 1314, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 1325, 1326, 1327, 1335, 1336, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 1295, 0, 0, 1341, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1317, 1318, 1319, 1320,
	1294, 0, 0, 0, 0, 1300, 0, 0, 1314, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 1342,
	0, 0, 1322, 1323, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 1339, 0, 0, 0, 0, 0,
	0, 1309, 1310, 0, 0, 0, 0, 0, 1317, 1318,
	1319, 1320, 0, 0, 1330, 0, 0, 1300, 0, 0,
	0, 1315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	1332, 1342, 0, 0, 1322, 1323, 1324, 0, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 1339, 0, 0, 0,
	0, 0, 0, 1309, 1310, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 1321, 0, 0,
	0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 0, 0, 1340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 0, 0, 0, 1333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1333,
	0, 0, 0, 0, 0, 1331, 0, 0, 1306, 1307,
	1313, 1312, 1308, 1334, 0, 1305, 1303, 1304, 1296, 1297,
	1298, 1299, 1301, 1302, 0, 0, 0, 0, 2704, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1292, 1293, 0, 1325,
	1326, 1327, 1335, 1336, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 1341, 0, 0, 1331, 0, 0,
	1306, 1307, 1313, 1312, 1308, 1334, 0, 1305, 1303, 1304,
	1296, 1297, 1298, 1299, 1301, 1302, 1294, 0, 0, 0,
	2524, 0, 0, 0, 1314, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 1292, 1293,
	0, 1325, 1326, 1327, 1335, 1336, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1317, 1318, 1319, 1320, 1294, 0,
	0, 0, 0, 1300, 0, 0, 1314, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 1342, 0, 0,
	1322, 1323, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 1339, 0, 0, 0, 0, 0, 0, 1309,
	1310, 0, 0, 0, 0, 0, 1317, 1318, 1319, 1320,
	0, 0, 1330, 0, 0, 1300, 0, 0, 0, 1315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 1332, 1342,
	0, 0, 1322, 1323, 1324, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 1339, 0, 0, 0, 0, 0,
	0, 1309, 1310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 1321, 0, 0, 0, 0,
	0, 1315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1329, 0, 0, 0, 1333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 0, 0,
	0, 0, 0, 1331, 0, 0, 1306, 1307, 1313, 1312,
	1308, 1334, 0, 1305, 1303, 1304, 1296, 1297, 1298, 1299,
	1301, 1302, 0, 0, 0, 0, 2497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1292, 1293, 0, 1325, 1326, 1327,
	1335, 1336, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 1295,
	0, 0, 1341, 0, 0, 1331, 0, 0, 1306, 1307,
	1313, 1312, 1308, 1334, 0, 1305, 1303, 1304, 1296, 1297,
	1298, 1299, 1301, 1302, 1294, 0, 0, 0, 1823, 0,
	0, 0, 1314, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 1292, 1293, 0, 1325,
	1326, 1327, 1335, 1336, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 1318, 1319, 1320, 1294, 0, 0, 0,
	0, 1300, 0, 0, 1314, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 1342, 0, 0, 1322, 1323,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	1339, 0, 0, 0, 0, 0, 0, 1309, 1310, 0,
	0, 0, 0, 0, 1317, 1318, 1319, 1320, 0, 0,
	1330, 0, 0, 1300, 3098, 0, 0, 1315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 1332, 1342, 0, 0,
	1322, 1323, 1324, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 1339, 0, 0, 0, 0, 0, 0, 1309,
	1310, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 1321, 0, 0, 0, 0, 0, 1315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 0, 1292, 1293, 0, 1325, 1326, 1327,
	1335, 1336, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 1333, 0, 0, 0, 1295,
	0, 1331, 1341, 0, 1306, 1307, 1313, 1312, 1308, 1334,
	0, 1305, 1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302,
	0, 0, 2187, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 1314, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 1292, 1293, 0, 1325,
	1326, 1327, 1335, 1336, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 2162,
	0, 1295, 0, 1331, 1341, 0, 1306, 1307, 1313, 1312,
	1308, 1334, 0, 1305, 1303, 1304, 1296, 1297, 1298, 1299,
	1301, 1302, 1317, 1318, 1319, 1320, 1294, 0, 0, 0,
	0, 1300, 0, 2270, 1314, 0, 2269, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 1342, 0, 0, 1322, 1323,
	1324, 0, 0, 0, 0, 0, 0, 0, 2163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	1339, 0, 0, 0, 0, 0, 0, 1309, 1310, 0,
	0, 0, 0, 0, 1317, 1318, 1319, 1320, 0, 0,
	1330, 0, 0, 1300, 0, 0, 0, 1315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 1332, 1342, 0, 0,
	1322, 1323, 1324, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 1339, 0, 0, 0, 0, 0, 0, 1309,
	1310, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 1321, 0, 0, 0, 0, 0, 1315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1926, 0,
	0, 0, 1316, 0, 1292, 1293, 0, 1325, 1326, 1327,
	1335, 1336, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 1333, 1925, 0, 0, 1295,
	0, 1331, 1341, 0, 1306, 1307, 1313, 1312, 1308, 1334,
	0, 1305, 1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 1314, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 1292, 1293, 0, 1325,
	1326, 1327, 1335, 1336, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 1295, 0, 1331, 1341, 0, 1306, 1307, 1313, 1312,
	1308, 1334, 0, 1305, 1303, 1304, 1296, 1297, 1298, 1299,
	1301, 1302, 1317, 1318, 1319, 1320, 1294, 0, 0, 0,
	0, 1300, 0, 0, 1314, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 1342, 0, 0, 1322, 1323,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	1339, 0, 0, 0, 0, 0, 0, 1309, 1310, 0,
	0, 0, 0, 0, 1317, 1318, 1319, 1320, 0, 0,
	1330, 0, 0, 1300, 0, 0, 0, 1315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 1332, 1342, 0, 0,
	1322, 1323, 1324, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 1339, 0, 0, 0, 0, 0, 0, 1309,
	1310, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 1321, 0, 0, 0, 0, 0, 1315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	722, 0, 0, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 0, 1292, 1293, 0, 1325, 1326, 1327,
	1335, 1336, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 1333, 0, 0, 0, 1295,
	0, 1331, 1341, 0, 1306, 1307, 1313, 1312, 1308, 1334,
	0, 1305, 1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 1314, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 1306, 1307, 1313, 1312,
	1308, 1334, 0, 1305, 1303, 1304, 1296, 1297, 1298, 1299,
	1301, 1302, 1317, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 1300, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 1325, 1326, 1327, 1335,
	1336, 1337, 0, 0, 1332, 1342, 0, 0, 1322, 1323,
	1324, 1328, 0, 0, 0, 0, 0, 0, 1295, 0,
	0, 1341, 0, 0, 0, 0, 0, 0, 0, 1338,
	1339, 0, 0, 0, 0, 0, 0, 1309, 1310, 0,
	0, 0, 0, 1294, 0, 0, 0, 0, 0, 0,
	1330, 1314, 0, 0, 0, 0, 0, 1315, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1317, 1318, 1319, 1320, 0, 0, 0, 0, 0,
	1300, 0, 0, 1321, 0, 2280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 1332, 1342, 0, 0, 1322, 1323, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1333, 0, 0, 0, 0, 1338, 1339,
	0, 0, 0, 0, 0, 0, 1309, 1310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 2501, 1315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 1306, 1307, 1313, 1312, 1308, 1334,
	0, 1305, 1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1316,
	0, 1292, 1293, 0, 1325, 1326, 1327, 1335, 1336, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 1333, 2275, 0, 0, 1295, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 0, 0, 1314,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 1325, 1326, 1327, 1335,
	1336, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 1295, 0,
	1331, 1341, 0, 1306, 1307, 1313, 1312, 1308, 1334, 0,
	1305, 1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302, 1317,
	1318, 1319, 1320, 1294, 0, 0, 0, 0, 1300, 0,
	0, 1314, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 1342, 0, 0, 1322, 1323, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 1339, 0, 0,
	0, 0, 0, 0, 1309, 1310, 0, 0, 0, 0,
	0, 1317, 1318, 1319, 1320, 0, 0, 1330, 0, 0,
	1300, 0, 0, 0, 1315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 1332, 1342, 0, 0, 1322, 1323, 1324,
	0, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 1339,
	0, 0, 0, 0, 0, 0, 1309, 1310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1330,
	1321, 0, 0, 0, 0, 0, 1315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	1333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2238, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1316,
	0, 1292, 1293, 0, 1325, 1326, 1327, 1335, 1336, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 1333, 2219, 0, 0, 1295, 0, 1331, 1341,
	0, 1306, 1307, 1313, 1312, 1308, 1334, 0, 1305, 1303,
	1304, 1296, 1297, 1298, 1299, 1301, 1302, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 0, 0, 1314,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 1325, 1326, 1327, 1335,
	1336, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 1295, 0,
	1331, 1341, 0, 1306, 1307, 1313, 1312, 1308, 1334, 0,
	1305, 1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302, 1317,
	1318, 1319, 1320, 1294, 0, 0, 0, 0, 1300, 0,
	0, 1314, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 1342, 0, 0, 1322, 1323, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 1339, 0, 0,
	0, 0, 0, 0, 1309, 1310, 0, 0, 0, 0,
	0, 1317, 1318, 1319, 1320, 0, 0, 1330, 0, 0,
	1300, 0, 0, 0, 1315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 1332, 1342, 0, 0, 1322, 1323, 1324,
	0, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 1339,
	0, 0, 0, 0, 0, 0, 1309, 1310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1330,
	1321, 0, 0, 0, 0, 0, 1315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	1333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1316,
	0, 1292, 1293, 0, 1325, 1326, 1327, 1335, 1336, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 1333, 0, 0, 0, 1295, 0, 1331, 1341,
	0, 1306, 1307, 1313, 1312, 1308, 1334, 0, 1305, 1303,
	1304, 1296, 1297, 1298, 1299, 1301, 1302, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 0, 0, 1314,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 1325, 1326, 1327, 1335,
	1336, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 0,
	1331, 1341, 0, 1306, 1307, 1313, 1312, 1308, 1334, 0,
	1305, 1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302, 1317,
	1318, 1319, 1320, 1294, 0, 0, 0, 0, 1300, 0,
	0, 1314, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 1342, 0, 0, 1322, 1323, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 1339, 0, 0,
	0, 0, 0, 0, 1309, 1310, 0, 0, 0, 0,
	0, 1317, 1318, 1319, 1320, 0, 0, 1330, 0, 0,
	1300, 0, 0, 0, 1315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 1332, 1342, 0, 0, 1322, 1323, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 1339,
	0, 0, 0, 0, 0, 0, 1309, 1310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1330,
	1321, 0, 0, 0, 0, 0, 1315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1316,
	1617, 1602, 1607, 1590, 1627, 1626, 0, 0, 1592, 1591,
	0, 0, 0, 0, 0, 1636, 1635, 0, 0, 0,
	0, 0, 1333, 0, 0, 0, 0, 0, 1331, 0,
	0, 1306, 1307, 1313, 1312, 1308, 1334, 0, 1305, 1303,
	1304, 1296, 1297, 1298, 1299, 1301, 1302, 0, 0, 0,
	0, 0, 0, 0, 0, 1628, 0, 1624, 1623, 0,
	0, 0, 0, 0, 0, 0, 0, 1622, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1621, 1619, 1620, 0, 0,
	1331, 0, 0, 1306, 1307, 1313, 1312, 1308, 1334, 0,
	1305, 1303, 1304, 1296, 1297, 1298, 1299, 1301, 1302, 0,
	0, 0, 0, 0, 1601, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1610, 1605, 1611, 1612, 1613,
	1614, 1615, 0, 1609, 0, 0, 0, 0, 0, 0,
	0, 0, 1633, 1634, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1606, 0, 0, 0, 0, 0,
	0, 1594, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1625, 0, 0, 0, 1603, 1604,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1617,
	1602, 1607, 1590, 1627, 1626, 0, 0, 1592, 1591, 0,
	0, 0, 0, 0, 1636, 1635, 0, 0, 0, 0,
	0, 1618, 0, 0, 0, 1744, 1742, 1743, 1746, 1745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1628, 0, 1624, 1623, 1595, 1596,
	1597, 1598, 0, 0, 0, 0, 1622, 0, 0, 0,
	0, 0, 1616, 1599, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1621, 1619, 1620, 653, 0, 684,
	1593, 0, 0, 1629, 1630, 1631, 1632, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	0, 0, 0, 1601, 0, 0, 0, 0, 1600, 0,
	0, 658, 0, 1637, 1610, 1605, 1611, 1612, 1613, 1614,
	1615, 0, 1609, 0, 0, 0, 0, 0, 0, 0,
	0, 1633, 1634, 659, 0, 0, 0, 0, 661, 0,
	0, 0, 689, 0, 0, 0, 0, 0, 667, 668,
	0, 0, 0, 679, 0, 0, 0, 0, 0, 0,
	1594, 0, 0, 0, 0, 0, 0, 685, 662, 0,
	0, 0, 0, 1625, 0, 0, 0, 1603, 1604, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 673, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1618, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 0, 657, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 664, 665, 0, 0, 0, 1595, 1596, 1597,
	1598, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1616, 1599, 0, 671, 0, 0, 0, 0, 0,
	0, 666, 1638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 670, 0, 0, 0, 0, 1593,
	0, 0, 1629, 1630, 1631, 1632, 686, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1600, 0, 0,
	0, 0, 1637, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 681, 0, 0, 0,
	0, 0, 0, 0, 0, 676, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 655, 674, 687,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 656, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 677, 0, 0, 675, 0, 0, 0,
	690, 691, 0, 0, 0, 0, 0, 688, 0, 0,
	0, 0, 0, 0, 678, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	680,
}
var sqlPact = [...]int{

	5334, -1000, -11, -1000, -1000, -1000, 211, -1000, -1000, -1000,
	-1000, 201, 199, 196, -1000, 195, 193, 190, 182, 181,
	179, 178, 171, 170, 169, 165, 163, -1000, -1000, 162,
	-1000, -1000, -1000, -1000, 161, 159, 157, -1000, 154, 1477,
	31469, 153, 146, 142, 2067, 49101, 1513, 141, 139, -1000,
	138, 3169, 36438, 1111, 1621, -1000, 136, 135, 1651, 48722,
	3832, 1976, 34134, 1359, 1969, 48337, 31084, 1967, 33749, 47952,
	-1000, -1000, 1071, -1000, -1000, 47567, 134, 133, 132, 131,
	124, -1000, 121, 47182, 118, 117, 115, 104, 103, 99,
	97, 94, -1000, 93, 88, 82, 79, 77, 76, 75,
	74, 72, 71, 70, 69, 62, 61, 60, 57, -1000,
	59175, 56, 55, 54, -1000, 1337, 53, 46, 45, 44,
	43, -1000, -1000, 42, 41, 40, 39, 36, 35, -1000,
	109, 34, 33, 32, 31, 30, -1000, 1163, 904, 2786,
	13037, 1277, 1258, 1229, 1225, 1243, 786, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51754, 49101, 29, -74, 28,
	-1000, 2398, 777, 24108, 5334, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36053, 35668, 35283,
	29562, 46797, 46412, 10165, 10165, 965, -1000, -1000, -1000, -1000,
	-1000, -13, 32606, 49101, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 264, -1000, -1000, -1000, -1000, -1000,
	-1000, 20142, 885, 19720, 658, 19298, 653, 393, -1000, -1000,
	-1000, 256, -1000, -1000, -1000, -1000, 1293, -1000, -1000, -1000,
	-1000, 46027, 45642, 2221, 45257, 29167, 28772, 44872, 1797, 1795,
	44487, -1000, -1000, 44102, -1000, -1000, 2216, 1950, 1948, 34898,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43723,
	43338, 42953, 42568, 42183, 28377, 27982, 581, -1000, -1000, -1000,
	-1000, 25263, -1000, -1000, -1000, -1000, -1000, 26, -1000, 25,
	24, -1000, 23, 22, 18, 17, 16, 15, 14, 9,
	-1000, 7, 5, -1000, 3, -1, -1000, -3, -5, 1437,
	1373, 1499, 41798, 1064, 2293, -1000, 1511, -16, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49101, -1000, 20550, 119, -1000,
	580, -1000, 1947, -1000, 20550, 119, -1000, 1510, 229, 1418,
	-1000, -1000, -1000, 1357, 1026, -1000, -1000, 49101, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2605, 1410, 578, 41413, -1000,
	1632, -1000, 747, 13853, -1000, 899, -1000, 13853, 254, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2278, 1228, 2575, 27587, 1494,
	2399, 2212, 2603, 1689, 2198, 2172, 2167, 2146, 2125, 2602,
	1187, 2601, 1025, 853, 2600, 2118, 2110, 2574, 1459, 913,
	2599, 2594, 2071, 1944, -1000, -1000, -1000, -1000, 1055, -1000,
	-1000, -1000, -1000, -1000, -1000, 37954, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1163,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1668, 2335,
	2335, 2335, 2430, 361, 356, -1000, 109, -1000, 1996, -1000,
	1409, -1000, -1000, -1000, 58213, -1000, -1000, 20550, 20550, 20550,
	20550, 20550, 1328, -1000, -1000, -1000, 605, -1000, 573, 485,
	11390, -1000, -1000, 2509, -1000, -1000, -1000, 365, 20550, -1000,
	249, -1000, -1000, -1000, -1000, 570, 2579, -1000, 775, -1000,
	-1000, -1000, 684, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2021, 511, 510, -1000, 509, 508, 507, -1000, -1000, -1000,
	567, 566, 565, 564, 563, 562, 561, 552, -1000, -1000,
	-1000, 1259, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 779, -1000, 779, 779, 492, 492, 550,
	549, 494, 548, -1000, -1000, 547, 492, 546, 541, -1000,
	-1000, 536, 673, -1000, 668, 533, 532, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1580, -1000, -1000, 1580,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 964, 50617, -1000,
	-1000, -1000, -25, 49101, -1000, 393, -25, -1000, -1000, 531,
	-1000, 14683, 14683, 14683, -1000, -1000, 1505, 20550, -1000, 2922,
	-1000, 3469, -204, 514, 24878, 649, 649, -1000, 22953, 616,
	27192, -1000, 511, 510, 509, 508, 507, -1000, 246, -1000,
	-1000, -1000, -1000, -1000, 1751, 2209, 921, -1000, 1211, 2204,
	-1000, 1719, 2197, 1210, -1000, -1000, 757, 2194, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1371, -1000, -1000,
	1613, 2189, -118, 2058, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1528, -1000, 29941, 32606, -26, -1000, -1000, -46, -1000,
	9772, 58213, -1000, -1000, -1000, 58213, 709, -1000, -1000, 2184,
	-1000, 58213, 697, -1000, -1000, 2177, -1000, 1939, 49101, 10165,
	49101, 49101, -1000, 505, 1619, 1501, -1000, -1000, 32227, 1719,
	1617, -1000, -1000, 715, 1611, -1000, -1000, 1610, -1000, 393,
	-1000, -1000, 41028, 51375, 715, 1609, -1000, -1000, -1000, 37954,
	-1000, 49101, -1000, 49101, -1000, 1076, -1000, 50996, 156, 2176,
	-1000, -1000, 156, 2175, -1000, 156, 2173, -1000, 143, 2165,
	-1000, -1000, 1468, 2160, -1000, -47, 2156, -1000, -1000, -47,
	2155, -1000, -1000, 20550, -48, -1000, -1000, -1000, 777, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 40643, 29941, -1000, 32227,
	49101, 34513, 713, 58213, -1000, 2480, 59040, 29941, 58213, -1000,
	32227, 49101, 2003, -1000, 40258, 39873, 2384, 743, -1000, -1000,
	49101, -1000, 20550, -1000, 2477, 1607, -40, -1000, -1000, -1000,
	-1000, -1000, 1665, 1747, 809, 1419, -1000, 13853, 13853, 2280,
	-1000, 240, 10165, -1000, -1000, 1001, 1709, -1000, -1000, -1000,
	-1000, -1000, 39488, -1000, -1000, -1000, 1384, 49101, -1000, -1000,
	1984, -1000, 31848, 49101, -1000, 49101, -1000, 49101, -1000, 49101,
	-1000, 49101, -1000, -1000, -1000, -1000, -1000, 2088, 1235, 1975,
	-1000, 49101, -1000, 49101, -1000, -1000, -1000, 1654, -1000, -1000,
	-1000, 39109, 38724, 38339, -1000, -1000, 1183, -1000, 998, -1000,
	-1000, 158, -1000, -1000, 1668, -1000, 1472, 1739, 18876, 1701,
	20550, 109, -1000, -1000, 109, 109, 12615, -1000, -1000, -1000,
	49101, -1000, 58831, 59040, 10165, 978, 20550, 20550, 20550, 20550,
	20550, 20550, 20550, 20550, 20550, 20550, 20550, 20550, 20550, 20550,
	20550, 20550, 20550, 20550, 20550, 20550, 20550, 20550, 20550, 20550,
	20550, 20550, 20550, 20550, 20550, 20550, 20550, 20550, 20550, 20550,
	20550, 1549, 20550, 962, 20550, 20550, 20550, 20550, 1551, -1000,
	-1000, 1351, 428, 1469, -1000, 2517, 2517, 2517, 58573, 58573,
	484, 605, -1000, 20550, -1000, 119, 20550, 356, 55918, 1593,
	-20, 10982, -1000, -1000, -1000, -1000, 18454, 776, 58213, 9379,
	10560, -1000, 2545, 958, 1974, 1849, 503, 682, 681, 679,
	676, 667, 20550, 20550, 20550, 20550, 20550, 20550, 20550, 20550,
	-1000, -1000, -1000, -1000, -1000, -1000, 2509, -1000, 18046, 17624,
	-1000, 2543, 17202, 16780, -1000, 16358, 21774, 15936, 976, 974,
	972, 967, 20550, 11798, -1000, -40, -1000, 50617, -1000, 49101,
	-25, 2475, 20550, 228, -1000, 56994, -1000, 228, 228, 501,
	-58, 58213, 1735, 1716, 24493, 1705, 1383, 1383, 1383, -1000,
	498, 600, 649, 7002, 15514, 497, 649, 649, 144, 36817,
	1403, 36817, 260, 355, 22568, 2922, -1000, -1000, 49101, 10165,
	-33, 1252, -1000, 33364, 2325, 2320, 2317, 1075, -1000, 1038,
	2426, 37954, 2443, 119, 2352, 1928, -1000, -1000, 960, 37954,
	1719, -1000, 59040, -1000, 1765, 2425, 1029, 1022, 1029, 1029,
	1020, 37954, 959, 1282, 29941, 2344, 956, -36, 2442, 119,
	2340, 1924, 954, -1000, -1000, 49101, 10165, 2337, 995, 647,
	-26, 32606, 49101, 236, -1000, 20550, 119, 20550, 119, 1033,
	-61, 235, 1724, 1722, 144, -1000, 32985, 2472, 2154, 49101,
	952, -1000, 1719, 2148, -1000, 1281, -1000, 2147, 2136, 2469,
	1497, 1608, -1000, -1000, -1000, 1493, 1599, 988, 2129, 764,
	542, 2461, 542, 26422, -1000, 49101, -1000, 49101, -1000, -1000,
	49101, -1000, 49101, -1000, 49101, -1000, 49101, 49101, -1000, 49101,
	29941, 29941, 29941, -63, 3905, 30699, 694, 949, -66, -1000,
	817, 32985, 802, -64, -1000, 983, -1000, -1000, -1000, 493,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 779, 496, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 494, 1259, 492, 492, 492, -1000, -1000, -1000, 673,
	-1000, 668, -1000, -1000, -1000, 779, 779, -1000, -1000, -182,
	1916, -46, 34513, 647, -1000, 647, -1000, 1970, -1000, 2355,
	696, -69, 848, -40, -1000, 1580, -1000, 1193, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2578, -1000, 2541, -1000, -1000, 2537, -28, -1000, -28,
	-1000, 10165, -1000, 49101, 1961, -1000, -1000, -1000, -1000, -1000,
	-1000, 49101, -1000, 49101, -1000, -1000, -1000, -1000, -1000, -1000,
	3139, -1000, 1958, -1000, 3905, 230, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 49101, 49101, 49101, -1000, 37954, -1000,
	-1000, -1000, -1000, 58213, -1000, 409, -1000, -1000, 58213, 1143,
	1749, -1000, 1749, -29, -1000, 56706, 1708, 49101, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	740, 1130, 1130, 953, 953, 953, 953, 2476, 984, 3072,
	3152, 5649, 5649, 5649, 5649, 5649, 5649, 5649, 5649, 217,
	375, 375, 217, 217, 217, 217, 217, 375, 375, 375,
	5649, 5649, 5649, 58573, 58501, 358, 20550, 20550, 947, 1350,
	428, 358, 20550, 358, 358, 358, 358, -1000, 1808, -1000,
	-1000, -1000, -1000, 1914, 486, 21774, 21774, -1000, -1000, -1000,
	11390, 20550, -1000, -1000, -1000, -1000, 485, 20550, -1000, 56274,
	-236, 354, -60, 222, 49101, 20550, 599, -71, -1000, 1058,
	-1000, 20550, 221, -1000, -1000, 0, 20550, 20550, 20550, 344,
	-1000, 341, -1000, 944, -1000, 943, 936, 934, -1000, 483,
	1358, 482, 481, 20550, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 58141, 52990, 52851, 52559, 5730, 52520,
	6518, -81, -82, 340, -1000, 1912, -60, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 339, -1000, 338, -83, -1000, -88,
	-1000, 332, -1000, 57853, -60, 331, 5109, -1000, 21774, 21774,
	21774, -1000, 330, -1000, 56634, -1000, 739, 738, 737, 735,
	57781, 15092, 15092, 15092, 328, 57493, 20550, -60, -1000, -1000,
	479, -89, 764, 14683, 23723, 10165, -1000, 764, 764, 20550,
	-1000, 20550, 24493, 24493, 1660, 1706, 24493, -1000, -1000, -1000,
	-1000, 36817, 571, 649, 36817, -1000, 2509, 1714, -1000, 326,
	-1000, 14275, 36817, 36817, 10165, -1000, -1000, 49101, 393, -1000,
	-1000, 649, 321, 220, 1736, 49101, 49101, 49101, -1000, -1000,
	1589, 50238, 1587, 59040, 49101, -1000, -1000, 478, 477, 1699,
	1697, 49101, 49101, 49859, 49480, 49101, 1297, 20550, 1412, 1483,
	119, -1000, 723, 476, 49101, 1188, -1000, -1000, -1000, -1000,
	-1000, 49101, -1000, -1000, 2530, -1000, 1029, -1000, -1000, -1000,
	1029, 1719, 1154, 49101, 29941, 754, 719, 49101, 1285, 119,
	-1000, 677, 472, 10165, 1266, -1000, 671, 49101, 1823, -1000,
	1525, -1000, -1000, 8986, 58213, -1000, 58213, -1000, -1000, -1000,
	10165, 1778, 1778, 319, -30, -1000, -1000, -1000, -1000, -1000,
	-1000, 1784, 49101, 577, 49101, 119, 49101, 192, 2581, 49101,
	29941, 29941, 29941, 119, 49101, 2122, 49101, 2111, 2171, 628,
	49101, 1406, 20550, 1216, -1000, 25648, 796, 49101, 1132, 187,
	-1000, -1000, -1000, 13, 49101, -1000, -1000, 156, 156, 156,
	-1000, 143, 1468, -1000, -47, -47, -1000, -1000, -1000, 1909,
	37575, 49101, 2491, 29941, -94, -1000, 824, 924, 919, -1000,
	59040, -1000, 604, 871, -1000, 2524, 471, 2509, -1000, 694,
	49101, 186, -1000, 718, 1279, -1000, 13853, 13853, -1000, 1580,
	-1000, -1000, 1144, -1000, 1255, -1000, -1000, -1000, -1000, 13853,
	-1000, -1000, 994, -46, -46, -1000, -1000, 364, -1000, 49101,
	-1000, -1000, -1000, -1000, 1143, -1000, 20550, -1000, -1000, -1000,
	12615, -1000, -1000, -1000, 49101, -145, 20550, 358, 358, 20550,
	21774, 21774, -1000, 358, -1000, -1000, -1000, -1000, -1000, 1905,
	467, 20550, 59040, 4530, 4023, -97, 217, -1000, 20550, -1000,
	8593, -103, 55846, -1000, -1000, 603, 2113, -1000, 20550, 57354,
	8200, 317, 13445, -1000, 57066, -34, -34, -1000, 2573, 1635,
	1250, 1196, 1101, 2515, -1000, 26807, 774, 1406, 55490, 58831,
	59040, 20550, 20550, -1000, 20550, 20550, 20550, -1000, -1000, 2509,
	-1000, 20550, -1000, -1000, -1000, -1000, -1000, 1890, 20550, -1000,
	58831, 59040, 21774, 21774, 21774, 21774, 21774, 21774, 21774, 21774,
	21774, 21774, 21774, 21774, 21774, 21774, 21774, 21774, 21774, 21774,
	21774, 1683, 21774, 2508, 2508, 2508, -1000, 1955, 1890, 20550,
	20550, -1000, -1000, -1000, -1000, 59040, 316, 315, 312, -1000,
	20550, -60, 802, -1000, 1841, -1000, -125, -1000, 2922, -1000,
	-1000, 1841, 1841, -104, 58213, -1000, 1660, -1000, 466, 20550,
	24493, -1000, 598, -1000, -105, -1000, 36817, -1000, 597, -237,
	-1000, 638, -1000, 649, 311, -1000, -1000, -1000, 218, 393,
	-1000, 36817, -1000, 10165, -1000, -1000, 925, 922, -1000, 2106,
	-1000, 1585, -1000, 806, -1000, 1295, 20550, 23338, 465, 462,
	1334, -1000, 2090, 1468, 2089, 1468, -1000, -1000, 670, -1000,
	58213, 460, 458, -1000, -33, 1244, -1000, 26043, 20550, -1000,
	918, -1000, -1000, -1000, 1719, 916, -1000, -1000, 1273, 26043,
	-1000, -1000, -1000, 26043, 20550, -1000, -36, 915, 26043, 2047,
	694, 1877, 1021, -1000, -1000, -1000, -1000, -1000, -1000, 1770,
	32985, 49101, 457, 49101, 456, -1000, -1000, 446, 49101, 647,
	1719, -1000, 715, -1000, -1000, 812, 10165, 445, 10165, 1678,
	628, 30320, -1000, 715, 1739, -1000, 58213, -1000, 1132, 12206,
	2331, -106, -1000, 215, -1000, -1000, -1000, 764, 26422, 24493,
	20550, 2585, -111, -1000, -1000, -1000, -1000, -1000, 119, -37,
	444, -1000, 635, 630, -46, 1417, 2293, 2293, -1000, 2513,
	-1000, 584, 309, 2509, 306, -1000, -46, 49101, -1000, 1414,
	10165, 49101, 49101, 10165, 49101, -1000, -1000, -40, -1000, -1000,
	-1000, -1000, 49101, -1000, -1000, -1000, 1420, 55418, -1000, 2322,
	10165, 2464, 358, 3336, 392, 20550, 59040, 53417, -112, 20550,
	20550, -1000, 583, 58213, -1000, -1000, -1000, -1000, -1000, -1000,
	58213, 20550, 213, -1000, 2548, 20550, 305, 304, 301, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 297, -1000, -1000,
	52133, -1000, 20550, 296, -1000, 295, 294, 6201, 534, 55062,
	54990, 54634, 289, 58213, 1955, 58213, -1000, -1000, 963, 963,
	1014, 1014, 1014, 1014, 2508, 422, 680, 1476, 746, 746,
	746, 596, 712, 712, 746, 746, 746, 1871, 1618, 443,
	459, -1000, -1000, 58213, 58213, 287, -1000, -1000, -1000, -60,
	286, 1837, 2423, -1000, 24493, 1837, 1837, -1000, -1000, 49101,
	58213, -1000, -204, -1000, 2509, -1000, -1000, 1714, -1000, 7409,
	36817, 649, 10165, -1000, -1000, 1, 49101, 49101, 49101, 2083,
	-1000, 3235, -1000, 54562, -114, -1000, 2395, 2395, 20550, 144,
	-1000, -1000, 438, 23338, 49101, -1000, 1702, 1717, 841, 49101,
	-1000, 49101, -1000, -1000, 49101, 49101, 49101, 49101, 49101, -1000,
	437, -119, 49101, 49101, 29941, -1000, -1000, -120, 10165, -1000,
	2326, -1000, 29941, 957, 1285, 1815, -1000, 436, 23338, 435,
	49101, 32985, 2459, -1000, 694, -1000, -1000, 432, 1855, 1475,
	23338, 1473, 1680, 628, 30320, -1000, 988, 1132, -1000, -1000,
	-44, -1000, 399, 119, 49101, 2584, 1406, -1000, -45, 58213,
	-1000, 629, -1000, 37196, 37196, 29941, 29941, -1000, 2269, 2259,
	572, -1000, -1000, 285, -1000, -46, 1574, -1000, -1000, 1287,
	1520, -1000, -1000, -1000, -1000, -1000, 2322, 20550, 20550, 53417,
	-122, -1000, 358, 358, -1000, 58213, 7807, -1000, 57066, -1000,
	-1000, -1000, -1000, 1294, -1000, 54206, -1000, -1000, -1000, 20550,
	20550, -1000, -1000, -1000, -1000, -1000, -1000, 21774, 1862, 431,
	59040, -1000, -1000, 762, 20550, 20550, 2922, 762, 762, -127,
	649, -1000, -1000, -1000, 2509, -1000, 36817, 1, 10165, -1000,
	-1000, -1000, 49101, -1000, 49101, -1000, 10165, 49101, 1866, 1567,
	-1000, -1000, 1686, 429, 21774, 49101, 711, -1000, 1304, 23338,
	2322, 10165, 2322, 54134, 10560, -130, -132, 1566, -1000, 1554,
	20550, -1000, 59040, 1468, 1468, -138, -139, -1000, 909, 902,
	20550, 901, -1000, -1000, -1000, 894, -1000, 663, -47, 26043,
	-1000, -1000, 1308, 23338, -141, 23338, -148, 283, 119, -1000,
	23338, -1000, 49101, -151, 49101, -1000, 628, 30320, -1000, 2171,
	-1000, 2181, 49101, 2308, -1000, -1000, -1000, 1739, 428, -1000,
	-153, -1000, -1000, 426, 425, -1000, -1000, -50, -1000, 688,
	678, -1000, -1000, -1000, 10165, 992, -1000, 358, 358, -1000,
	-1000, -1000, 277, 1406, 2420, -1000, 53778, 53706, 4268, 21774,
	59040, -154, -1000, 49101, 58213, -60, -1000, -1000, -1000, 36817,
	535, -1000, -1000, 1766, -1000, -1000, -1000, 49101, 1572, -1000,
	-1000, 20550, 459, 424, 20550, -1000, 1770, 421, -1000, -1000,
	-1000, -1000, -1000, -1000, 2395, 0, -1000, 1236, -1000, -1000,
	58213, 2391, -1000, -1000, 420, 410, 49101, 49101, -34, 407,
	406, 26043, -1000, 49101, -156, 1304, -161, -1000, 1770, -1000,
	-162, 812, -1000, 405, 30320, -1000, 1678, 971, -163, 49101,
	1132, -1000, -1000, 29941, 29941, 1574, -1000, 49101, -1000, 49101,
	-1000, 49101, -1000, 1147, 20550, -1000, -1000, 4268, -164, -1000,
	-59, -1000, 2447, -1000, -1000, -1000, -1000, 2063, 53350, 1643,
	49101, 53278, 1285, 49101, 2322, 273, 49101, 804, 10165, 1287,
	1287, -1000, -1000, 272, 20550, 20550, -1000, 403, -1000, 1770,
	1304, 1285, 1304, 402, 23338, -1000, 1680, 1072, -1000, 764,
	-1000, -1000, -170, -171, -1000, -179, -181, -1000, 269, 21366,
	21366, -60, -1000, 49101, 397, 1982, -1000, 1432, 1231, 267,
	840, -1000, -184, -1000, -1000, 393, -1000, 20550, -1000, -186,
	-1000, 792, -187, -1000, 788, 2548, -189, -194, 49101, 1285,
	1770, -1000, 1770, 23338, -200, -1000, 26422, -1000, 694, 694,
	-1000, -1000, -1000, -1000, -1000, 22167, 1396, 1115, 56346, -1000,
	-1000, -1000, 49101, -1000, 1454, 1451, 1100, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1643, 58213, -1000, 1287, 1813, -1000,
	1287, 1859, -1000, -1000, -201, -1000, 1285, 1285, -202, -1000,
	-192, -1000, -1000, 2485, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2231, -1000, 833, 1471, 1471, 1432, -1000, 389, -1000,
	379, 1443, -1000, -1000, 1304, -1000, 20958, -1000, 2494, -1000,
	-1000, 1692, -1000, -1000, 20550, 20550, -1000, -1000, -1000, 1770,
	-1000, -1000, -1000, -1000, -208, -209, 1285, 1285, 868, -1000,
	-1000, 378, 20550, -227, 1285, -1000,
}
var sqlPgo = [...]int{

	0, 3118, 3117, 1977, 3114, 2505, 3110, 3109, 3108, 3106,
	3105, 2448, 3104, 3103, 3102, 3101, 3097, 3096, 3095, 3089,
	3088, 3078, 3076, 3074, 3073, 3072, 3068, 3067, 3059, 3057,
	3056, 3052, 2446, 3050, 2437, 3048, 3046, 3040, 3038, 3036,
	3032, 3026, 3024, 26, 3023, 3022, 3021, 3020, 2433, 3018,
	3017, 2420, 3016, 3012, 2413, 3011, 3010, 3009, 2371, 2366,
	3004, 3000, 2320, 2998, 2996, 2315, 2994, 2277, 2993, 2990,
	2257, 2989, 103, 123, 2986, 2253, 2981, 2970, 2244, 2231,
	2229, 2968, 2194, 2966, 2965, 2188, 2171, 2964, 112, 2963,
	2961, 2960, 2956, 2074, 2021, 2955, 2951, 2949, 176, 2946,
	2009, 2943, 2937, 2936, 2934, 2929, 2928, 2927, 2925, 2922,
	2921, 2920, 2919, 2913, 2912, 2911, 2909, 2908, 2906, 2905,
	2904, 2900, 2899, 2895, 2893, 2892, 2891, 185, 119, 2890,
	2887, 2006, 1947, 2886, 2885, 48, 50, 21, 78, 107,
	191, 2984, 172, 2879, 2875, 2872, 2871, 2869, 30, 130,
	120, 118, 122, 2869, 352, 2868, 2867, 71, 47, 25,
	22, 81, 2866, 2865, 2864, 2139, 88, 2863, 2859, 175,
	156, 2858, 392, 28, 111, 125, 98, 152, 56, 2857,
	96, 14, 2853, 129, 97, 2852, 86, 34, 24, 4044,
	93, 64, 65, 188, 184, 162, 160, 124, 159, 2850,
	173, 75, 143, 2849, 2847, 2846, 62, 141, 1, 3,
	148, 11, 2843, 9, 2842, 12, 2840, 2838, 2837, 2831,
	29, 108, 33, 39, 2830, 40, 77, 137, 2826, 169,
	2821, 73, 180, 142, 2, 147, 2819, 74, 17, 79,
	2818, 2817, 92, 168, 2816, 37, 128, 87, 102, 186,
	157, 91, 153, 164, 2814, 2812, 2809, 131, 2807, 139,
	132, 2802, 2801, 114, 27, 2795, 44, 158, 45, 2794,
	2792, 104, 2789, 149, 2785, 2783, 183, 117, 136, 6,
	61, 94, 8, 163, 110, 72, 68, 2781, 3066, 1428,
	1748, 31, 2779, 109, 59, 42, 85, 99, 174, 36,
	2778, 2775, 311, 2774, 2761, 2760, 127, 2756, 2755, 2753,
	95, 58, 54, 2752, 105, 49, 115, 150, 146, 178,
	126, 2746, 135, 89, 145, 2745, 154, 2744, 55, 2743,
	140, 2742, 2740, 2739, 2736, 43, 2724, 2723, 2722, 52,
	2720, 116, 2713, 138, 134, 179, 121, 106, 170, 165,
	409, 2709, 144, 23, 2708, 83, 38, 0, 3638, 3439,
	2707, 151, 90, 2704, 2700, 2691, 2683, 32, 10, 4,
	7, 15, 13, 80, 18, 367, 2682, 2678, 82, 100,
	2677, 182, 155, 2674, 2666, 2664, 51, 2663, 20, 2658,
	16, 2648, 2645, 19, 5, 2640, 2638, 181, 2637, 2631,
	2624, 2431, 2619, 177, 2618, 2617, 2616, 2614, 2613, 2077,
	2611, 2609, 57, 35, 133,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 403, 403, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 150,
	150, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 402,
	402, 152, 152, 151, 147, 147, 405, 405, 406, 406,
	154, 154, 154, 156, 156, 153, 153, 32, 32, 86,
	86, 86, 138, 79, 79, 79, 74, 74, 355, 355,
	356, 356, 134, 134, 135, 135, 135, 135, 136, 136,
	137, 137, 137, 46, 34, 34, 34, 34, 34, 34,
	34, 35, 35, 35, 35, 36, 36, 36, 36, 36,
	36, 37, 37, 37, 37, 37, 37, 44, 44, 128,
	128, 47, 47, 47, 47, 47, 47, 47, 47, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 58, 58, 56, 59, 59, 60, 60,
	60, 60, 60, 60, 61, 61, 61, 61, 61, 61,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	68, 68, 68, 69, 69, 69, 66, 66, 66, 64,
	64, 64, 63, 63, 63, 67, 67, 67, 65, 65,
	65, 233, 233, 70, 70, 70, 70, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 73, 73, 73, 73, 73, 73, 73,
	73, 325, 325, 71, 71, 300, 300, 75, 75, 258,
	258, 76, 76, 76, 76, 76, 77, 77, 77, 77,
	87, 87, 87, 87, 401, 401, 227, 227, 169, 169,
	169, 169, 82, 82, 82, 82, 83, 83, 83, 84,
	84, 133, 133, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 38, 38, 38, 39, 39, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 43, 43, 94,
	94, 94, 96, 93, 93, 93, 95, 95, 95, 95,
	97, 97, 98, 98, 98, 98, 98, 98, 99, 99,
	349, 349, 236, 236, 347, 347, 348, 348, 204, 204,
	204, 204, 204, 205, 205, 205, 354, 354, 354, 354,
	354, 354, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 118, 118, 118, 127, 127, 127, 127,
	127, 127, 127, 120, 120, 120, 111, 111, 101, 101,
	107, 107, 107, 107, 107, 102, 102, 108, 108, 110,
	110, 112, 112, 112, 112, 112, 112, 103, 103, 103,
	103, 114, 114, 114, 114, 113, 113, 123, 123, 123,
	123, 123, 123, 123, 313, 313, 119, 119, 119, 119,
	122, 122, 122, 122, 117, 117, 117, 121, 121, 124,
	124, 124, 124, 104, 104, 105, 105, 106, 106, 125,
	125, 116, 116, 126, 126, 126, 126, 126, 126, 126,
	115, 115, 115, 404, 404, 109, 399, 399, 397, 397,
	397, 397, 397, 397, 397, 398, 398, 400, 400, 80,
	80, 80, 52, 52, 53, 53, 206, 206, 207, 207,
	281, 281, 281, 281, 208, 208, 155, 155, 155, 211,
	212, 212, 209, 209, 210, 210, 210, 214, 214, 213,
	216, 216, 215, 280, 365, 365, 366, 366, 366, 366,
	366, 366, 366, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 363, 363, 363, 364, 361, 361, 362,
	362, 362, 362, 407, 407, 279, 279, 220, 220, 368,
	368, 368, 368, 369, 369, 369, 369, 369, 372, 371,
	370, 370, 370, 370, 370, 309, 309, 309, 57, 57,
	57, 247, 247, 246, 246, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 130, 130,
	54, 54, 54, 161, 161, 51, 51, 51, 55, 55,
	50, 50, 50, 50, 50, 264, 264, 262, 262, 225,
	225, 315, 315, 315, 173, 173, 148, 148, 148, 20,
	22, 22, 16, 16, 16, 16, 16, 16, 29, 29,
	30, 30, 26, 26, 263, 263, 265, 265, 81, 81,
	85, 85, 85, 91, 91, 129, 129, 129, 129, 129,
	129, 129, 33, 33, 33, 33, 45, 45, 45, 45,
	89, 410, 410, 410, 90, 90, 409, 409, 168, 168,
	168, 168, 170, 170, 276, 276, 277, 277, 411, 411,
	278, 278, 278, 163, 162, 164, 164, 49, 49, 49,
	157, 157, 158, 158, 159, 159, 160, 160, 412, 412,
	78, 78, 78, 132, 132, 200, 200, 273, 273, 273,
	221, 221, 178, 178, 275, 275, 274, 274, 274, 245,
	245, 245, 131, 131, 230, 230, 238, 238, 239, 239,
	321, 321, 240, 88, 88, 141, 141, 139, 139, 139,
	139, 139, 139, 140, 140, 140, 142, 142, 142, 142,
	142, 142, 142, 145, 145, 145, 145, 146, 146, 146,
	144, 144, 379, 379, 379, 381, 381, 382, 378, 378,
	380, 380, 408, 408, 249, 249, 249, 218, 219, 217,
	217, 413, 413, 223, 223, 222, 224, 224, 314, 314,
	314, 243, 243, 243, 243, 268, 268, 266, 266, 267,
	267, 269, 269, 270, 270, 270, 271, 271, 272, 272,
	242, 242, 296, 296, 143, 143, 143, 229, 229, 229,
	231, 231, 286, 286, 286, 287, 287, 285, 285, 285,
	285, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 395, 395, 395, 396, 396, 312,
	312, 317, 317, 317, 317, 317, 317, 310, 310, 311,
	311, 322, 323, 323, 252, 252, 252, 252, 250, 250,
	251, 251, 318, 318, 318, 318, 244, 244, 319, 319,
	319, 282, 282, 326, 326, 326, 341, 341, 228, 228,
	228, 336, 336, 327, 327, 327, 327, 327, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	330, 330, 330, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 340, 340, 340, 340, 340, 331, 331, 337, 338,
	332, 333, 339, 339, 339, 339, 343, 343, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 335, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 260, 260, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 290, 290, 290, 290, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 373, 373, 373, 373, 373, 373, 373, 373, 376,
	376, 377, 377, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 383, 383, 384, 384, 386, 386, 387, 387,
	388, 389, 389, 389, 390, 391, 391, 385, 385, 392,
	392, 392, 393, 393, 394, 394, 394, 394, 394, 302,
	302, 308, 308, 308, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	171, 171, 171, 171, 171, 235, 235, 234, 234, 299,
	299, 297, 297, 301, 301, 253, 253, 342, 342, 342,
	342, 342, 342, 342, 254, 254, 254, 261, 255, 255,
	256, 256, 256, 256, 256, 293, 294, 257, 257, 257,
	295, 295, 303, 307, 307, 306, 305, 305, 304, 304,
	283, 283, 284, 284, 241, 241, 414, 414, 237, 237,
	320, 320, 320, 320, 202, 202, 232, 232, 201, 201,
	195, 195, 196, 196, 196, 196, 226, 226, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 344,
	344, 344, 345, 346, 298, 188, 187, 175, 176, 186,
	185, 184, 174, 177, 181, 182, 183, 179, 180, 191,
	190, 189, 324, 197, 197, 198, 198, 198, 199, 199,
	199, 199, 172, 172, 192, 192, 193, 194, 194, 165,
	165, 165, 166, 166, 167, 167, 353, 353, 351, 351,
	351, 352, 352, 352, 352, 350, 350, 350, 350, 350,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 2, 0, 2, 0,
	1, 1, 0, 2, 0, 2, 0, 7, 2, 5,
	6, 2, 1, 12, 12, 2, 7, 2, 1, 1,
	1, 3, 3, 0, 3, 1, 3, 1, 1, 3,
	2, 5, 0, 5, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 3, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 6, 6, 1,
	1, 1, 2, 1, 2, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 1, 7, 3, 8, 8, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 2, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 3, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 3, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 2, 1, 3, 1, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 5, 7, 3, 3, 3, 3, 3,
	4, 4, 3, 4, 4, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 2, 3, 3, 3, 2, 3, 5, 4, 6,
	4, 5, 6, 5, 1, 0, 2, 3, 3, 3,
	6, 4, 2, 3, 4, 2, 3, 3, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 4, 4, 2,
	3, 2, 3, 7, 7, 8, 10, 7, 4, 5,
	5, 5, 3, 1, 1, 5, 2, 0, 1, 1,
	1, 1, 3, 2, 2, 2, 1, 2, 0, 3,
	3, 2, 8, 11, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 2,
	1, 0, 1, 0, 9, 9, 3, 1, 3, 7,
	1, 3, 11, 3, 2, 0, 3, 1, 2, 2,
	3, 2, 6, 2, 1, 1, 2, 4, 2, 5,
	5, 5, 2, 8, 9, 6, 5, 3, 1, 4,
	7, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 7,
	3, 1, 0, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 2, 2, 2, 2, 2, 3, 4, 2,
	4, 7, 3, 3, 0, 3, 6, 3, 6, 3,
	13, 16, 9, 12, 4, 2, 0, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 4, 3, 0, 2,
	2, 0, 10, 3, 2, 0, 1, 3, 1, 1,
	3, 3, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 5, 1,
	0, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 7, 3, 4, 3, 4, 3,
	4, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 2,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 5, 5, 3, 1, 1, 2, 2, 1,
	5, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 8, 8, 6, 4, 6,
	6, 6, 4, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 1, 2, 1, 0, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 3, 1,
	1, 1, 1, 5, 3, 1, 1, 3, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 7, 1, 7,
	5, 3, 1, 1, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 422, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 76, 64, -54, -51, -48,
	-58, 78, 99, -380, 103, -62, -65, -67, 107, 116,
	121, 122, 145, 154, 256, 263, 284, 286, 288, 297,
	-40, -39, 117, -139, -141, 282, -83, -84, -93, -94,
	-95, -96, -133, 315, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	318, -33, -45, -90, -89, 363, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-379, -63, -64, -66, -68, -69, -142, -140, 419, 283,
	373, 37, 327, 65, 111, 292, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 390, 398, -145, -143, -144,
	-146, 304, 381, 340, 423, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 2, 340, 384, 305,
	374, 92, 167, 268, 254, -397, 2, 4, -359, -357,
	-196, -195, 340, 92, 30, 38, 39, 41, 44, 54,
	55, 56, 59, 96, 97, 114, 123, 124, 134, 147,
	149, 157, 158, 159, 174, 180, 182, 162, 202, 231,
	233, 246, 250, 260, 262, 270, 294, 321, 336, 352,
	353, 354, 360, 361, 381, 382, 386, 393, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 58, 63, 64, 65, 66,
	67, 72, 69, 70, 71, 74, 76, 77, 80, 81,
	82, 90, 91, 93, 94, 95, 99, 101, 103, 106,
	107, 109, 110, 116, 117, 120, 115, 118, 346, 348,
	119, 121, 122, 132, 133, 135, 136, 138, 140, 144,
	146, 151, 152, 153, 154, 155, 156, 168, 163, 169,
	173, 176, 175, 177, 178, 179, 170, 184, 187, 188,
	189, 191, 192, 195, 196, 197, 200, 199, 204, 205,
	208, 209, 212, 214, 217, 218, 221, 219, 220, 223,
	224, 226, 225, 232, 234, 235, 237, 238, 241, 242,
	245, 248, 251, 252, 253, 254, 255, 256, 257, 259,
	261, 263, 265, 266, 267, 268, 269, 271, 272, 274,
	275, 276, 277, 278, 282, 280, 281, 283, 284, 285,
	286, 288, 290, 291, 292, 293, 295, 316, 317, 329,
	297, 298, 299, 300, 301, 302, 303, 307, 311, 308,
	309, 310, 305, 306, 312, 313, 315, 318, 320, 322,
	323, 326, 327, 328, 330, 333, 334, 335, 331, 332,
	325, 338, 339, 341, 342, 343, 344, 345, 347, 349,
	350, 355, 358, 359, 363, 364, 366, 367, 370, 371,
	372, 377, 373, 375, 378, 379, 380, 385, 391, 392,
	394, 395, 396, -194, -165, 412, -193, 422, 422, 422,
	2, 188, 189, 267, 266, 312, 313, -189, -192, -193,
	-194, -165, 4, -357, -359, 92, 239, 422, 422, 422,
	2, 340, 328, 115, 305, 374, 290, 384, -262, 184,
	92, 369, -165, 263, 24, 2, 101, 173, 372, 371,
	24, 259, 306, 342, 344, 2, 422, 422, 2, 384,
	305, 340, 167, 92, 374, 290, -183, 2, -165, -73,
	2, 419, -72, -5, -48, -58, -62, -75, -70, -11,
	-32, -34, -54, -51, -59, -65, -67, -79, -78, -80,
	-82, -86, -85, -88, -93, -94, -100, -131, -132, 78,
	25, 107, 315, 117, 183, 2, -401, -227, 2, 24,
	-169, -165, 78, 145, 304, 340, 2, 188, 189, 2,
	-183, 2, -397, 2, 188, 189, 2, -401, -227, 23,
	2, -165, 2, 301, 318, -170, 2, 297, -165, 422,
	422, 422, 422, 422, 422, 209, 58, 294, 312, -98,
	359, -97, 352, 299, -99, -349, 2, 221, -165, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	422, 422, 422, 2, -127, 312, 328, 152, 36, 58,
	24, 63, 93, 146, 167, 168, 196, 73, 74, 266,
	209, 189, -313, 119, 313, 341, 300, 338, 359, 78,
	375, 291, -404, 118, 4, 92, 221, 314, 352, 67,
	345, 346, 422, 422, 422, -408, 2, 340, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, -140,
	-142, -141, 422, 422, 422, 422, 422, -222, -223, 368,
	181, 113, 244, -139, -141, 2, -379, -127, 312, 2,
	58, 24, -347, 2, -288, 239, -290, 410, 411, 405,
	227, 397, -302, 98, 216, 215, -292, -303, 114, 294,
	419, -199, -291, 425, 9, -376, -141, 31, 52, -197,
	-165, 7, 8, 5, 6, -172, -328, -298, -335, 362,
	125, 230, -373, -374, -198, 4, -357, -351, -329, -338,
	-333, -334, -336, 42, 48, 47, 349, 220, 307, 308,
	309, 310, 322, 377, 163, 40, 237, 238, 175, 182,
	61, 84, 85, 83, 88, 87, 89, 86, 314, 374,
	53, 30, 157, 158, 162, 231, 159, 59, -375, 43,
	94, 106, 135, 136, 176, 177, 178, 179, 191, 192,
	332, 355, 39, 41, 44, 54, 55, 96, 97, 123,
	124, 134, 147, 174, 180, 202, 233, 250, 260, 270,
	321, 336, 352, 353, 354, 360, 361, 382, -358, -339,
	79, 126, 143, 172, 160, 185, 186, 190, 203, 206,
	222, 229, 247, 249, 289, 319, -409, 2, 359, 359,
	2, -409, 2, -409, 2, -168, 2, 359, 356, -410,
	359, 393, -381, 271, -382, -183, -381, 422, 422, 424,
	422, -217, -218, -219, 2, 24, 104, 419, 2, -316,
	2, 417, -318, -172, 198, -375, -141, -317, 419, -189,
	240, -198, 84, 85, 88, 87, 89, 4, -165, 61,
	216, 215, -3, 2, -318, 157, -189, 2, -318, 157,
	2, -190, 157, -318, -192, 2, -355, 157, -353, 9,
	-352, 5, 4, -357, -359, -358, 2, -174, -165, 2,
	-201, 157, -189, -186, -350, 4, -357, -359, -358, -360,
	24, 26, 27, 28, 29, 31, 32, 33, 34, 45,
	52, 53, 57, 60, 62, 73, 78, 83, 84, 86,
	85, 87, 88, 89, 98, 100, 102, 104, 105, 108,
	111, 113, 125, 127, 139, 141, 142, 145, 148, 150,
	161, 167, 171, 181, 183, 198, 201, 207, 210, 211,
	227, 228, 230, 236, 239, 240, 243, 244, 258, 264,
	273, 287, 304, 314, 324, 337, 340, 351, 356, 357,
	362, 368, 369, 374, 376, 383, 384, 387, 388, 389,
	390, -187, -350, 356, 424, -232, -195, -196, -226, -165,
	421, -288, 2, -88, 2, -288, 157, 2, -88, 157,
	2, -288, 157, 2, -88, 157, 2, -220, 419, 421,
	340, 62, 2, -189, 157, -179, 2, -165, 109, -190,
	157, 2, -192, -355, 157, 2, -355, 157, 2, -191,
	2, -189, 167, 167, -174, 157, 2, -165, 24, 142,
	2, 183, 2, 183, 2, -319, 2, -318, -233, 157,
	2, -189, -233, 157, 2, -233, 157, 2, -202, 157,
	2, -201, -174, 157, 2, -356, 157, 2, -355, -356,
	157, 2, -258, 419, -325, 2, -324, -352, 381, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 312, -138, 80, 239,
	356, 424, -189, -288, -88, -300, 419, 142, -288, -88,
	239, 142, 241, 2, 92, 340, 396, 24, -165, 2,
	316, 2, 419, -98, 56, 359, -277, 2, -278, -162,
	-163, -164, 187, 265, 269, 396, -347, 356, 402, 142,
	-347, -236, 421, -127, 2, 139, 376, 2, 7, 2,
	-355, 2, 316, 2, 266, 313, 58, 142, 2, 2,
	-399, 2, 239, 142, 2, 142, 2, 142, 2, 142,
	2, 142, 2, 2, 266, 313, 2, 358, 197, 358,
	2, 142, 2, 142, 2, 5, 2, 187, 265, 329,
	2, 340, 384, 305, 2, 2, 142, 2, 142, 396,
	2, -244, -318, -222, -223, -243, -266, -267, 207, 127,
	236, -249, 24, 104, -249, -249, 46, 420, 420, -127,
	316, 2, 10, 11, 60, 35, 410, 411, 412, 413,
	137, 414, 415, 408, 409, 407, 400, 401, 404, 193,
	194, 75, 403, 402, 68, 213, 296, 128, 129, 130,
	131, 279, 164, 165, 166, 13, 14, 15, 28, 243,
	206, 397, 160, 319, 405, 16, 17, 18, 185, 186,
	229, 38, 161, -171, -203, -288, -288, -288, -288, -288,
	249, -241, -283, 417, -141, 419, 419, -141, -288, -302,
	-234, 419, -346, 7, -141, -297, 417, -304, -288, 421,
	419, 5, 419, 5, -383, 391, 139, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	262, -343, 385, -343, -343, -330, 419, -330, 419, 419,
	-331, 419, 419, 419, -330, 419, 419, 419, 392, 398,
	392, 398, 419, 419, -276, -277, -276, 356, -170, 424,
	-381, -220, 419, -237, -320, -288, 412, -237, -237, 239,
	-234, -288, 79, -252, 190, 222, 143, 203, 289, 172,
	-346, -73, -285, 425, 419, -172, -375, -141, -165, -312,
	398, -312, -141, -317, 419, -316, 412, -189, 419, 421,
	-150, 280, -149, 22, 25, 107, 379, 120, -210, 169,
	254, 114, 325, -403, 117, 298, 347, 348, 280, 114,
	-246, -248, 32, 90, 224, 251, 49, 155, 215, 216,
	327, 114, 280, 390, 114, 117, 280, -152, 325, -403,
	117, 298, 280, -151, -210, 114, 425, 117, 234, -355,
	-232, 424, 424, -350, 412, 114, 114, 114, 114, 142,
	-226, -350, -189, -197, -165, -198, 419, -220, 227, 239,
	-397, -247, -246, 227, -161, -378, 390, 227, 227, -220,
	-176, 157, 2, -166, -165, -176, 157, -378, 227, -319,
	-200, -189, -200, 315, -183, 32, -154, 424, 51, 285,
	114, -154, 114, -154, 114, -154, 424, 114, -154, 114,
	424, 114, 114, -234, 420, 424, -355, -397, -226, -169,
	78, 419, 32, -299, -326, -327, -328, -337, -332, -335,
	42, 48, 47, 349, 220, 307, 308, 309, 310, 322,
	377, 163, 40, 237, 238, 175, 4, 41, -339, 182,
	174, 176, 177, 178, 179, 180, 321, 39, 270, 135,
	136, 134, 106, 97, 96, 233, 44, 43, 94, 352,
	353, 354, 355, 191, 192, 55, 54, 382, 332, -356,
	-397, -226, 139, -174, 2, -189, 2, 69, 70, 396,
	-349, -234, 32, -277, 2, -411, 424, 205, -205, 212,
	226, 151, 240, 394, -354, 5, 4, -298, -309, 98,
	209, -335, 8, 411, -344, 7, 410, -348, -347, -348,
	82, 421, -350, 340, 191, -349, 24, 317, 2, -189,
	-400, 139, -398, 290, -397, -189, -189, -189, -189, -189,
	139, 2, 358, 2, 139, -165, -165, 205, -189, 2,
	-191, 2, -190, 2, 340, 167, 340, -154, 424, -243,
	-267, -266, -269, -288, 24, -272, 133, 223, -288, -290,
	-140, -140, -140, -224, -314, -288, 264, 167, -349, -341,
	-326, -340, 275, 276, 274, 278, 277, -326, -188, -350,
	352, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, 206, 160, 319, 38,
	161, -288, 356, -288, -288, -288, -288, 219, 227, 230,
	362, 125, 370, 104, 234, -414, 337, 34, -295, -141,
	419, -308, 29, 324, 24, -302, 294, 419, -283, -288,
	-284, -235, -234, 420, 32, 424, -235, -301, -297, -307,
	-306, 387, -350, 412, 420, -234, 383, 24, 104, 412,
	2, 7, -259, 395, 218, 95, 153, 217, -260, 303,
	-384, 132, 148, 419, 420, 2, 420, 2, 420, 2,
	420, 2, 420, 2, -288, -288, -288, -288, -288, -288,
	-288, -234, -346, -253, 2, -342, -234, 4, 395, 218,
	95, 153, 217, 303, -253, 2, 7, -234, 2, -234,
	2, -254, 2, -288, -234, -255, -289, -290, 410, 411,
	405, -302, -256, 2, -288, -235, 352, 352, 352, 352,
	-288, 45, 201, 357, -257, -288, 142, -234, -170, -382,
	32, -234, -229, 424, 142, 32, 4, -229, -229, 419,
	420, 424, 190, 190, -316, -252, 190, -250, 247, -250,
	-250, -395, 419, 418, -312, -175, 417, 426, -350, -235,
	2, 419, -312, -312, 421, -311, -310, 32, -183, 245,
	-311, 420, -189, -350, 424, 356, -263, 73, 62, -280,
	157, 62, -361, -177, 73, -362, -165, 57, 369, 264,
	141, -263, 73, -263, 73, 73, 315, 328, 46, -318,
	35, -88, 71, 142, 356, -318, -248, -326, 90, 215,
	216, 46, -345, -344, 411, -345, 46, -345, -345, -345,
	390, -190, -318, 356, 255, -355, 71, 356, 424, 35,
	-88, 71, 142, 356, -201, -175, 71, 340, -323, -322,
	399, -195, -165, 421, -288, -88, -288, -88, 330, 420,
	421, 185, 185, -206, -207, -165, -281, -280, -363, -364,
	-361, 184, 167, 369, 126, 32, 114, -226, 356, 114,
	255, 114, 114, 32, 239, 227, 239, 227, -157, 343,
	114, -282, 388, -273, -88, 419, 98, 32, -273, -238,
	-239, -321, -240, -177, 419, -183, -189, -233, -233, -233,
	-201, -202, -174, -355, -356, -356, 420, -73, -324, -137,
	390, 356, 390, 376, -207, -72, 25, 78, 107, 420,
	424, -228, 31, 417, -259, 419, -343, 419, -137, -322,
	142, -227, -323, -323, 139, 70, 402, 356, 420, 359,
	-278, -204, 269, 323, 281, 311, 8, 7, 7, 424,
	-350, -189, 139, -226, -226, 312, -73, 139, -73, 421,
	-189, -201, -189, -318, -270, -344, 419, -271, 294, 295,
	424, -148, 33, 102, 195, -189, 396, -288, -288, 356,
	-414, 337, -295, -288, 219, 230, 362, 125, 370, 104,
	234, 142, 419, -289, -289, -234, -288, 418, 428, 420,
	421, -226, -288, 418, 418, 424, -305, -306, 108, -288,
	421, -413, 424, -222, -288, -234, -234, 420, 420, 356,
	356, 356, 356, 419, -389, 248, 419, 419, -288, 32,
	424, 424, 424, 420, 424, 424, 424, 420, 420, 424,
	420, 142, 420, 420, 420, 420, 420, -261, 258, 420,
	10, 11, 410, 411, 412, 413, 137, 414, 415, 408,
	409, 407, 400, 401, 402, 68, 213, 296, 13, 14,
	15, 185, 161, -289, -289, -289, 420, -293, -294, 142,
	139, 396, 396, 396, 396, 32, -257, -257, -257, 420,
	142, -234, 419, 420, -282, -320, -231, 2, -316, -185,
	-350, -282, -282, -234, -288, -316, -316, -251, 376, 239,
	190, -316, -310, 420, -396, -346, -312, -311, -346, -287,
	-286, 140, 225, 420, -235, 2, -311, -311, -350, -183,
	-220, -312, 420, 421, -149, -189, -177, -184, -165, 227,
	-280, 157, -156, 227, -326, -184, 419, 419, 195, 195,
	-177, -184, 157, -177, 157, -184, -184, -402, 269, 235,
	-288, 208, 268, 228, -150, 280, -88, 396, 419, -191,
	280, -197, -345, -345, -246, 280, -190, -355, 390, 396,
	-174, -151, -88, 396, 419, -175, -152, 280, 396, -189,
	-134, 156, 234, 412, -350, -128, 5, 230, -128, 420,
	424, 167, -176, 167, -182, -166, -88, -189, 142, 4,
	-190, -355, -355, -355, -88, -189, 114, -189, 114, -158,
	110, -412, 402, -174, -223, -222, -288, -245, -275, 287,
	239, -221, -178, -177, 381, -183, -245, -230, 424, 142,
	402, 421, -221, -154, -154, -154, -154, -154, 142, -136,
	242, -135, -165, 5, -226, 23, -355, 420, -326, 417,
	418, 7, 7, 419, -346, -137, -226, 142, -41, 390,
	268, 92, 340, 254, 167, -347, -347, -277, 367, 66,
	269, -347, 340, 312, -73, -165, -271, -288, -314, -189,
	425, -288, -288, -289, -289, 142, 419, -288, -299, 28,
	28, 420, -284, -288, 412, -350, 420, 420, -297, 111,
	-288, 351, -350, 412, 420, 383, -413, -413, -413, 5,
	218, 153, 217, -260, 217, -260, -260, 7, -390, -180,
	419, -165, 388, -222, 420, -341, -326, -288, -288, -288,
	-288, -288, -346, -288, -293, -288, -341, -326, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, 104, 227, 234,
	-289, -294, -293, -288, -288, -326, 420, 420, 420, -234,
	-72, -242, 148, -323, 424, -242, -242, 420, -251, 419,
	-288, -316, 418, 420, 424, -311, 418, 424, 427, 402,
	-312, 420, 421, -220, -310, -350, 356, 356, 114, 227,
	378, -365, -362, -288, -225, -315, -177, -377, 419, -165,
	-373, -374, -172, 419, 419, -147, 107, 315, -265, 114,
	-154, 114, -154, 394, 419, 419, 356, -263, 73, -291,
	-172, -234, 356, 356, 255, -291, -291, -234, 356, -291,
	117, -137, 142, 339, -208, 170, -281, -166, 419, -176,
	419, 419, -220, -189, -323, -247, -161, -264, 376, -175,
	419, -175, -159, 200, -412, -353, -378, -268, -266, -245,
	-237, 228, 72, 420, 424, 421, -282, -239, -231, -288,
	2, 420, -88, 424, 419, 402, 402, 241, -138, -138,
	7, 418, 420, -346, 420, -226, 242, -186, -174, -189,
	-187, -201, -189, 240, 420, -148, -175, 28, 28, -288,
	-299, 420, -288, -288, 418, -288, 421, 5, -288, 420,
	420, 420, 420, -391, -165, -288, 420, 420, 420, 424,
	424, 420, 420, 420, 420, 420, -294, 142, 104, 234,
	419, 420, 420, -296, 150, 46, -316, -296, -296, -226,
	-285, -346, -286, -175, 417, -311, -312, -350, 421, -177,
	-184, -280, 114, -366, 73, -367, 60, 126, 78, 227,
	230, 369, 264, 57, 98, 273, 32, 420, 420, 424,
	-173, 60, -173, -288, 419, -225, -226, 227, 98, 227,
	98, 91, 364, -177, -184, -226, -226, -189, -177, -184,
	419, 420, -191, -190, -355, 420, -175, 71, -356, 352,
	-209, -210, 161, 419, -225, 419, -226, -206, 32, -137,
	419, 144, 239, -225, 239, -160, 199, -412, -353, -157,
	-245, -274, 419, 239, -88, -178, 2, -223, 402, -135,
	-136, -355, -355, 91, 91, 418, 420, -42, -43, 167,
	73, 257, -212, -211, 254, 234, -148, -288, -288, 420,
	-350, 412, -413, -385, 254, 420, -288, -288, -289, 142,
	419, -299, -386, 389, -288, -234, -386, -386, 420, -312,
	-346, -311, -280, -184, -188, -181, -165, 126, 157, 230,
	195, 419, -289, -189, 419, 2, -279, -407, 77, 335,
	-315, -148, -188, -148, 420, -234, 420, 420, 230, 230,
	-288, -326, -154, -154, 420, 420, 356, 356, -234, 356,
	356, 396, -291, 252, -225, 420, -225, 420, 420, -88,
	-225, -189, 420, -189, -412, -353, -158, 105, -226, 73,
	-268, -295, 420, 419, 419, 424, 24, 419, 24, 419,
	-187, 340, 420, -223, 46, 420, 420, -289, -299, 420,
	-387, -388, -180, -311, 418, -367, -181, 227, -288, -167,
	419, -288, -208, 419, -173, -413, 273, -405, 60, 419,
	419, -177, -184, -413, 419, 419, -291, -189, 420, -279,
	420, -208, 420, -264, 419, -353, -159, 371, 228, 420,
	-184, -245, -356, -356, -43, -226, -226, -189, -392, 268,
	295, -234, 420, 424, 32, 114, 420, -368, 214, -165,
	420, -209, -226, -148, 420, -189, -406, 376, -188, -214,
	-213, -211, -216, -215, -211, 420, -234, -234, 419, -208,
	-279, -209, -279, 419, -225, -160, 315, -282, 420, 420,
	420, 420, 420, -393, -394, 38, 366, 82, -288, -393,
	-388, -390, 126, -369, -372, -371, 239, 143, 253, 320,
	420, 334, 386, 420, -220, -288, 420, 424, 381, 420,
	424, 381, 420, 420, -226, -209, -208, -208, -225, 420,
	-238, -137, -137, -394, 261, 138, 294, 261, 138, -181,
	-371, 239, -372, 239, 371, 101, -368, -213, 161, -215,
	142, 420, -209, -209, 420, -282, 28, -370, 224, 285,
	51, 315, -370, -369, 419, 419, -155, 51, 285, -279,
	-394, 21, 230, 98, -234, -234, -208, 420, 420, -209,
	-209, 356, 419, -234, 420, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 184, 186, 188, 0, 0, 0, 211, 213, 215,
	216, -2, 0, 0, 0, 244, 245, 247, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	383, 384, 0, 853, -2, 0, 362, 364, 373, 375,
	377, 379, 380, 0, 442, 444, 446, 448, 450, 452,
	454, 456, 458, 459, 461, 463, 465, 467, 469, 471,
	473, 475, 477, 479, 481, 483, 485, 487, 489, 491,
	-2, 765, 767, 769, 771, -2, 62, 64, 66, 68,
	70, 72, 87, 219, 221, 223, 225, 228, 230, 232,
	890, 250, 252, 254, 256, 258, -2, 904, 0, 0,
	0, -2, 0, -2, -2, -2, 783, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 866, 868, 870,
	872, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 158, -2, -2, -2,
	-2, 0, 0, 1525, 1706, 1707, 1708, 1709, 1710, 1711,
	1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721,
	1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731,
	1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1490, 1491,
	1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,
	1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
	1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521,
	1522, 1523, 1524, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
	1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
	1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
	1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
	1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632,
	1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
	1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
	1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662,
	1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672,
	1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,
	1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692,
	1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702,
	1703, 1704, 1705, 1412, 1466, 1415, 1410, 185, 187, 189,
	190, 0, 0, 0, 0, 0, 0, 668, 1451, 1464,
	1465, 1466, 1469, 1470, 1471, 1525, 0, 212, 214, 217,
	218, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 727, 341, 1614, 343, 345, 0, 0, 0, 0,
	238, 239, 240, 241, 242, 243, 246, 248, 249, 0,
	0, 0, 0, 0, 0, 0, 340, 338, 1446, 283,
	284, 0, 323, 324, 325, 326, 327, 328, 330, 287,
	289, 291, 292, 294, 296, 298, 300, 302, 304, 306,
	308, 309, 311, 313, 314, 316, 318, 319, 321, 728,
	0, 0, 0, 0, 0, 167, 0, 355, 349, 354,
	356, 358, 359, 360, 361, 0, 165, 0, 0, 601,
	336, 334, 0, 161, 0, 0, 762, 0, 355, 1493,
	353, 763, 764, 0, 0, 758, 759, 1643, 793, 363,
	365, 374, 376, 378, 381, -2, -2, 1738, -2, 404,
	-2, 412, 1741, 1645, 415, 0, 417, -2, 420, 443,
	445, 447, 449, 451, 453, 455, 457, 460, 462, 464,
	466, 468, 470, 472, 474, 476, 478, 480, 482, 484,
	486, 488, 490, 492, 493, 0, 0, 0, 0, 0,
	497, 0, -2, -2, 0, 0, 0, 0, 0, -2,
	0, -2, 0, 0, -2, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 496, 498, 499, 500, 0, 544,
	583, 584, 766, 768, 770, 0, 709, 892, 63, 65,
	67, 69, 71, 220, 222, 224, 226, 229, 231, -2,
	864, 865, 251, 253, 255, 257, 259, -2, 0, 896,
	896, 896, 0, 0, 865, 863, 0, 366, 0, 368,
	0, 497, 371, 372, 424, 425, 1104, 0, 0, 0,
	0, 0, 1229, 1182, -2, -2, 1214, 1216, 1717, 1738,
	0, 1218, 1219, 0, 1221, 1225, 1226, 0, 1389, 1458,
	1453, 1418, 1419, 1420, 1421, 0, 0, 1424, 0, 1426,
	1427, 1428, 1293, 1240, -2, -2, -2, 1462, 1018, 1019,
	1020, 1021, 1022, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1750, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	0, 1706, 1723, 1724, 1729, 1731, 1725, 1714, 1263, -2,
	-2, 1532, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1718,
	1719, -2, 1721, -2, -2, 1730, -2, 1734, 1735, -2,
	-2, 1740, -2, -2, -2, 1744, 1745, -2, 1480, 1071,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1763, 1764, 1765, 1766, 1767, 1768, 795, 773, 786, 795,
	775, 776, 777, 778, 779, 784, 785, 788, 0, 780,
	781, 782, 882, 1620, 885, 668, 883, 867, 869, 0,
	871, 0, 0, 0, 876, 899, 897, 0, 935, 880,
	881, 891, 950, 0, 0, 970, 970, 961, 0, 992,
	0, 1463, 0, 0, 0, 0, 0, -2, 1466, 1750,
	1761, 1762, 2, 79, 0, 1723, 992, 81, 0, 1723,
	84, 0, 1723, 0, -2, 88, 0, 1723, 168, 169,
	1476, 1477, 1481, 1482, 1483, 1484, 91, 0, 1442, 99,
	0, 1723, 1409, 0, 1439, 1485, 1486, 1487, 1488, 1489,
	1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778,
	1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788,
	1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798,
	1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808,
	1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818,
	1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
	1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
	1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
	1849, 0, 1436, 0, 0, 593, 1406, 1411, 594, 1416,
	0, 191, 192, 193, 194, 195, 1723, 197, 198, 0,
	200, 201, 1723, 203, 204, 0, 206, 0, 0, 0,
	0, 0, 227, 668, 1723, 0, 234, 1447, 0, 692,
	1723, 690, 1450, -2, 1723, 712, 715, 1723, 717, 668,
	719, 1449, -2, 1473, 889, 1723, 809, 342, 344, 0,
	237, 0, 822, 0, 824, 0, 843, 998, 152, 1723,
	262, 281, 152, 1723, 265, 152, 1723, 268, 152, 1723,
	271, 1404, 152, 1723, 274, 275, 1723, 277, 170, 278,
	1723, 280, 337, 0, 0, -2, 331, 1452, -2, 329,
	288, 290, 293, 295, 297, 299, 301, 303, 305, 307,
	310, 312, 315, 317, 320, 322, -2, 0, 162, 0,
	0, 0, 0, 599, 600, 0, 0, 0, 760, 761,
	0, 0, 0, 385, 0, 0, 0, 0, 792, 382,
	0, 401, 0, 403, 1713, -2, -2, 407, 796, 800,
	801, 802, 0, 0, 0, 0, 414, 0, 0, 0,
	418, 421, 0, 494, 495, 0, 0, 505, 506, 507,
	508, 509, 0, 512, 533, 548, 0, 0, 516, 518,
	598, 520, 0, 0, 522, 0, 524, 0, 526, 0,
	528, 0, 530, 532, 534, 549, 536, 0, 0, 0,
	547, 0, 553, 0, 556, 557, 558, 0, 560, 561,
	562, 0, 0, 0, 570, 572, 0, 582, 0, 501,
	502, 152, 996, -2, 0, 859, 913, 914, 0, 0,
	0, 0, 894, 895, 0, 0, 0, 855, 856, 367,
	0, 370, 0, 0, 0, 0, 1324, 1325, 1326, 1327,
	1328, 1329, 1332, 1333, 1330, 1331, 1334, 1335, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 1338, 1339, 0, 0,
	1341, 0, 1343, 0, 0, 0, 0, 0, 0, 1161,
	1163, 1397, 0, 0, 1340, 1109, 1110, 1111, 1146, 1147,
	0, 1215, 1394, 1393, 1217, 0, 1346, -2, 1347, 1229,
	0, 0, 1220, 1433, 1227, 1228, 1346, 0, 1388, 0,
	0, 1423, 0, 1101, 1295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1055, 1069, 1076, 1073, 1072, 1057, 0, 1056, 0, 0,
	1054, 0, 0, 0, 1058, 0, 1369, -2, 0, 0,
	0, 0, 0, 0, 772, -2, 774, 0, 790, 0,
	884, 0, 0, 939, 1398, 1402, 1403, 939, 939, 0,
	0, 1347, 0, 0, 0, 0, 989, 989, 989, 987,
	964, 0, 970, 0, -2, 0, 970, 970, 0, 980,
	0, 980, -2, 961, 0, 0, 993, 994, 0, 0,
	100, 755, 119, 0, 755, 755, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 115, 107, 108, 0, 0,
	85, 693, 0, 696, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	0, 117, 0, 141, 143, 0, 0, 0, 0, 983,
	592, 0, 0, 1467, 1414, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 1453, 1454, 607, 0, 0, 0,
	0, 688, 691, 0, 710, 0, 888, 0, 0, 0,
	0, 1723, 724, 1438, 1472, 0, 1723, 811, 0, 1002,
	0, 825, 0, 0, 999, 0, 260, 0, 150, 151,
	0, 263, 0, 266, 0, 269, 0, 0, 272, 0,
	0, 0, 0, 0, 891, 0, 182, 0, 347, 357,
	0, 0, 891, 0, 1349, 1010, 1013, 1014, 1015, 1101,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1077, 1071, 1087,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1067, 0, 1042, 1042, 1042, 1059, 1060, 1078, 1079,
	1081, 1083, 1085, 1011, 1012, 1077, 1077, 1074, 1075, 182,
	0, 351, 0, 983, 387, 983, 389, 0, 578, 0,
	0, 0, 0, -2, 409, 0, 798, 0, 803, 433,
	434, 435, 805, 806, 413, 436, 437, 438, 439, 440,
	441, 0, 685, 0, 687, 1429, 0, 410, 426, 411,
	416, 0, 422, 0, 0, 510, 511, 513, 514, 515,
	519, 0, 586, 1635, 596, 521, 523, 525, 527, 529,
	891, 538, 0, 540, 891, 551, 554, 559, 563, 564,
	565, 566, 567, 568, 0, 0, 0, 708, 0, 862,
	911, 912, 917, 921, 922, 925, 928, 929, 919, 1104,
	877, 878, 879, 905, 906, 738, 0, 0, 369, 1105,
	1006, 1007, 1061, 1062, 1063, 1064, 1065, 1106, 1107, 1435,
	0, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, -2, -2, -2, -2, -2, -2, -2, -2, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	-2, -2, -2, 1144, 1145, -2, 1342, 1344, 0, 1397,
	0, -2, 0, -2, -2, -2, -2, 1158, 0, 1160,
	1165, 1167, 1169, 0, 0, 0, 0, 1396, 1179, 1380,
	0, 0, 1321, 1322, 1323, 1164, 0, 0, 1395, 1392,
	0, 0, 1345, 1224, 0, 0, 0, 0, 1353, 1387,
	1383, 0, 1455, 1461, 1231, 902, 0, 0, 0, 0,
	1238, 0, 1434, 1088, 1089, 1090, 1091, 1092, 1093, 1102,
	1303, 0, 0, 0, 1264, 1265, 1266, 1267, 1268, 1269,
	1270, 1271, 1272, 1273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1275, 0, 1356, -2, -2, -2,
	-2, -2, -2, -2, 0, 1277, 0, 0, 1289, 0,
	1291, 0, 1279, 1347, 1366, 0, 0, 1185, 0, 0,
	0, 1229, 0, 1282, 1347, 1374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 0, 1379, 789, 886,
	0, 0, 1002, 0, 0, 0, 1401, 1002, 1002, 0,
	934, 0, 0, 0, 0, 0, 0, 984, 988, 985,
	986, 0, 0, 970, 980, 947, 0, 0, 1437, 0,
	955, -2, 980, 980, 0, 957, 979, 0, 668, 969,
	959, -2, 0, -2, 0, 0, 0, 0, 754, 121,
	1723, 0, 154, 0, 0, 658, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 694, 695, 697, 703,
	705, 0, 699, 1432, 0, 700, 0, 702, 704, 706,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 1408, 0, 0, 173, 982,
	0, 1407, 1417, 0, 196, 199, 202, 205, 183, 667,
	0, 0, 0, 0, 606, -2, 608, 610, 611, 612,
	613, 1570, 1473, 0, 1473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 813, 819,
	0, 904, 0, 841, 827, 0, 0, 0, 841, 845,
	846, 848, 849, 0, 0, 1000, 282, 152, 152, 152,
	1405, 152, 152, 171, 276, 279, 339, 285, 332, 0,
	0, 0, 0, 0, 0, 333, 0, 0, 0, 335,
	0, 1003, 1005, 0, 1016, 0, 1069, 0, 159, 182,
	0, 0, 386, 391, 0, 579, 0, 0, 402, 0,
	797, 804, 0, 430, 0, 432, 686, 1431, 1430, 0,
	423, 503, 0, 597, 595, 537, 541, 891, 543, 0,
	580, 581, 585, 997, 0, 923, 0, 920, 926, 927,
	0, 908, 736, 737, 0, 0, 0, -2, -2, 0,
	0, 0, 1180, -2, 1159, 1162, 1166, 1168, 1170, 0,
	0, 0, 0, 0, 0, 0, 1181, 1390, 1393, 1319,
	0, 0, 1348, 1351, 1352, 0, 0, 1384, 0, 0,
	0, 0, 0, 901, 902, 902, 902, 1237, 0, 0,
	0, 0, 0, 0, 1239, 0, 0, 0, 0, 0,
	0, 0, 0, 1258, 0, 0, 0, 1262, 1040, 0,
	1274, 0, 1276, 1066, 1288, 1290, 1278, 0, 0, 1280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1188, 1189, 1190, 1281, 1372, 1373, 0,
	0, 1080, 1082, 1084, 1086, 0, 0, 0, 0, 1287,
	0, 1378, 891, 936, 931, 1399, 983, 938, 940, 1400,
	1440, 931, 931, 0, 1348, 972, 0, 974, 0, 0,
	0, 976, 0, 965, 0, 967, 980, 952, 0, 0,
	945, 0, 944, 970, 0, 956, 958, 960, 1455, 668,
	978, 0, 995, 0, 120, 742, 0, 0, 1441, 0,
	123, 1723, 131, 0, 635, 0, 0, 0, 0, 0,
	757, 132, 1723, 152, 1723, 152, 133, 136, 0, 140,
	138, 0, 0, 626, 101, 755, 104, 0, 0, 748,
	0, 698, 701, 707, 86, 0, 750, 740, 0, 0,
	739, 142, 105, 0, 0, 752, 103, 0, 0, 0,
	182, 0, 0, 1413, 1468, 207, 209, 210, 208, 615,
	0, 1473, 0, 1473, 0, 1445, 604, 668, 0, 983,
	692, 713, -2, 716, 718, 726, 0, 0, 0, 815,
	819, 0, 818, 889, 916, 903, 1001, 820, 841, 0,
	0, 0, 830, 832, 829, 826, 823, 1002, 0, 0,
	0, 0, 0, 261, 264, 267, 270, 273, 0, 180,
	1602, 178, 175, 177, 346, 0, 0, 0, 1350, 0,
	1008, 0, 0, 0, 0, 160, 350, 0, 388, 0,
	0, 0, 0, 0, 0, 399, 400, -2, 428, 429,
	431, 427, 0, 539, 542, 550, 0, 0, 907, 738,
	0, 1108, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 1381, 0, 1392, 1222, 1223, 1230, 1320, 1354, 1382,
	1386, 0, 1456, 1460, 1232, 0, 0, 0, 0, 1425,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 0, 1301, 1302,
	1306, 1448, 0, 0, 1243, 0, 0, 0, 0, 0,
	0, 0, 0, 1355, 1365, 1367, 1186, 1187, 1191, 1192,
	1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, -2, -2,
	-2, 1204, 1205, 1206, -2, -2, -2, 0, 0, 0,
	1368, 1370, 1371, 1375, 1376, 0, 1284, 1285, 1286, 1377,
	0, 933, 0, 937, 0, 933, 933, 898, 973, 0,
	991, 975, 950, 966, 0, 963, 948, 0, 949, 0,
	980, 970, 0, 977, 962, -2, 0, 0, 0, 0,
	153, 633, 657, 0, 0, 729, 735, 735, 0, 1443,
	1241, 1242, 0, 0, 0, 125, 0, 0, 0, 0,
	129, 0, 135, 139, 0, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 111, 114, 0, 0, 110,
	0, 157, 0, 0, 623, 0, 609, 0, 0, 0,
	0, 607, 0, 233, 182, 689, 711, 0, 0, 0,
	0, 0, 817, 819, 0, 810, 811, 841, 915, 821,
	839, 840, 838, 0, 0, 0, 904, 847, 844, 850,
	851, 0, 166, 0, 0, 0, 0, 348, 0, 0,
	0, 1009, 1017, 0, 1070, 352, 0, 573, 574, 621,
	0, 577, 504, 918, 924, 909, 738, 0, 0, -2,
	0, 1173, -2, -2, 1391, 1385, 0, 1422, 902, 1233,
	1235, 1236, 1103, 1308, 1305, 0, 1292, 1253, 1254, 0,
	0, 1257, 1259, 1260, 1261, 1041, 1364, 0, 0, 0,
	0, 1283, 887, 1297, 0, 0, 941, 1297, 1297, 0,
	970, 968, 946, 942, 0, 953, 980, 1456, 0, 744,
	746, 122, 0, 634, 0, 637, 0, 0, 0, 0,
	644, 645, 0, 0, 0, 0, 0, 659, 666, 0,
	738, 0, 738, 0, 0, 0, 0, 0, 145, 0,
	0, 756, 0, 152, 152, 0, 0, 743, 0, 0,
	0, 0, 749, 751, 741, 0, 753, 0, 172, 0,
	602, 622, 0, 0, 0, 0, 0, 0, 0, 235,
	0, 725, 0, 0, 0, 807, 819, 0, 812, 813,
	236, 0, 0, 0, 828, 831, 833, 916, 0, 179,
	0, 174, 176, 0, 0, 1004, 1068, 390, 392, 0,
	0, 398, 575, 620, 0, 0, 910, -2, -2, 1174,
	1457, 1459, 0, 904, 0, 1294, 0, 0, -2, 0,
	0, 0, 873, 0, 932, 930, 874, 875, 990, 980,
	0, 954, 124, 0, 638, 639, 1444, 641, 0, 643,
	646, 0, 648, 1475, 0, 652, 615, 0, 663, 664,
	730, 731, 734, 732, 735, 902, 661, 0, 126, 127,
	144, 147, 128, 134, 0, 0, 0, 0, 902, 0,
	0, 0, 981, 0, 0, 666, 0, 656, 615, 605,
	0, 726, 722, 0, 0, 814, 815, 0, 0, 0,
	841, 852, 181, 0, 0, 0, 394, 0, 396, 0,
	619, 0, 1234, 1311, 0, 1255, 1256, -2, 0, 1212,
	1296, 1298, 0, 951, 943, 636, 640, 0, 0, 672,
	0, 0, 623, 0, 738, 0, 0, 149, 0, 0,
	0, 745, 747, 0, 0, 0, 113, 0, 655, 615,
	666, 623, 666, 0, 0, 816, 817, 0, 835, 1002,
	837, 842, 0, 0, 393, 0, 0, 576, 0, 0,
	0, 1307, 1213, 0, 0, 0, 647, 677, 0, 0,
	0, 660, 0, 733, 1232, 668, 130, 0, 146, 0,
	627, 0, 0, 630, 0, 0, 0, 0, 0, 623,
	615, 603, 615, 0, 0, 808, 0, 836, 182, 182,
	395, 397, 1304, 1309, 1312, -2, 1689, 1522, 0, 1310,
	1299, 1300, 0, 649, 673, 674, 0, 669, 670, 671,
	1474, 650, 651, 665, 672, 148, 624, 0, 0, 625,
	0, 0, 116, 118, 0, 653, 623, 623, 0, 723,
	1002, 163, 164, 0, 1314, 1315, 1316, 1317, 1318, 642,
	675, 0, 676, 0, 0, 0, 677, 628, 0, 631,
	0, 618, 654, 720, 666, 834, 0, 678, 0, 681,
	682, 0, 679, 662, 0, 0, 614, 616, 617, 615,
	1313, 680, 683, 684, 0, 0, 623, 623, 0, 721,
	629, 0, 0, 0, 623, 632,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 408, 3, 414, 409, 3,
	419, 420, 412, 410, 424, 411, 421, 413, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 428, 423,
	400, 402, 401, 404, 425, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 417, 3, 418, 415, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 426, 407, 427, 405,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 403, 57743, 406, 57744, 416,
	57745, 422, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1012
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1018
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1024
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1033
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1035
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1040
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1041
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1042
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1044
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1047
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1048
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1058
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1070
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1125
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1136
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1151
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1155
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1159
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1170
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1182
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1207
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1211
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1215
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1221
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1225
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1231
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1237
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1243
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1254
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1261
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1271
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1281
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1291
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1304
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1316
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1320
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1326
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1330
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1336
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1340
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1347
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1352
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1357
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1362
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1367
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1372
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1376
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1379
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1389
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1402
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1414
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1421
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1424
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1431
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1440
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1449
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1454
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1461
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1468
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1469
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1473
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1491
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1495
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1503
		{
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1506
		{
			sqlVAL.union = sqlDollar[2].union
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1507
		{
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1512
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1516
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1520
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1526
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1530
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1535
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1536
		{
		}
	case 157:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1563
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1586
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1593
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1597
		{
			sqlVAL.str = "CSV"
		}
	case 163:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1624
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1628
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1631
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1651
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1655
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1659
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1665
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1669
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1675
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1679
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1685
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1689
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1693
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1697
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1703
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1713
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1717
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1720
		{
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1724
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1736
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1737
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1738
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1739
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1749
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1757
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1759
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1762
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1772
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1781
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1789
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1791
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1795
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1798
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1808
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1817
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1825
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1827
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1831
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1834
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1838
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1843
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1849
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1850
		{
			sqlVAL.str = ""
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1859
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1860
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1862
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1863
		{
			return helpWith(sqllex, "CREATE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1866
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1867
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1868
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1869
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1871
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1872
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1873
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1884
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1891
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1895
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets:  sqlDollar[4].union.targetList(),
				SinkType: sqlDollar[6].str,
				AsOf:     sqlDollar[7].union.asOfClause(),
				Options:  sqlDollar[8].union.kvOptions(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1917
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1927
		{
			return helpWith(sqllex, "DELETE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1934
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1937
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1938
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1939
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1940
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1941
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1950
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1951
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1952
		{
			return helpWith(sqllex, "DROP")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1955
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1956
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1957
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1958
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1959
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1967
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1971
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1982
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1986
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1989
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1997
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2001
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2004
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2012
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2020
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2027
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2035
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2043
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2050
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2058
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2062
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2065
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2073
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2077
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2080
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2084
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2109
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2112
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2114
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2121
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2124
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2125
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2127
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2128
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2129
		{
			return helpWith(sqllex, "DELETE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2130
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2131
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2132
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2133
		{
			return helpWith(sqllex, "INSERT")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2134
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2136
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2137
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2139
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2142
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2143
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2145
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2146
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2154
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2155
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2159
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2173
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2180
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2184
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2188
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2198
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2204
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2210
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2214
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2224
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2228
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2232
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2236
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2239
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2259
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2263
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2267
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2270
		{
			return helpWith(sqllex, "GRANT")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2290
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2294
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2298
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2301
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2306
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2310
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2321
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2339
		{
			return helpWith(sqllex, "RESET")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2340
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2348
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2352
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2355
		{
			return helpWith(sqllex, "RESET")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2363
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2366
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2377
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2380
		{
			return helpWith(sqllex, "USE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2384
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2385
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2386
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2387
		{
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2388
		{
			return helpWith(sqllex, "USE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2389
		{
			return unimplemented(sqllex, "set local")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2405
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2420
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2423
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2441
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2449
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2453
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2457
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2463
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2473
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2477
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2481
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2485
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2489
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2500
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2504
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2507
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2513
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2529
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2533
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2555
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2558
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2560
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2563
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2567
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2577
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2593
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2600
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2606
		{
			return unimplemented(sqllex, "set from current")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2607
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2615
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2620
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2627
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2631
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2637
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2648
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2654
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2664
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2668
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2672
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2676
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2680
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2686
		{
			sqlVAL.union.val = tree.Low
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2690
		{
			sqlVAL.union.val = tree.Normal
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2694
		{
			sqlVAL.union.val = tree.High
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2705
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2709
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2713
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2718
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2722
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2734
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2735
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2736
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2737
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2738
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2739
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2740
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2741
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2743
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2744
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2745
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2746
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2747
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2748
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2749
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2750
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2751
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2752
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2753
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2754
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2755
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2756
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2757
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2758
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2760
		{
			return helpWith(sqllex, "SHOW")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2767
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2768
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2769
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2780
		{
			sqlVAL.str = "client_encoding"
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2783
		{
			sqlVAL.str = "timezone"
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2784
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2798
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2802
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2805
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2816
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2824
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2832
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2835
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2845
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2849
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2852
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2854
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2857
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2865
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2868
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2876
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2879
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2892
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2900
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2908
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2911
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2913
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2916
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2921
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2929
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2932
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2934
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2937
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2945
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2948
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2950
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2954
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2964
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2967
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2977
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2980
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2982
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2985
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2987
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2991
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2995
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3001
		{
			sqlVAL.union.val = true
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3002
		{
			sqlVAL.union.val = false
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3010
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3013
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3015
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3019
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3029
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3038
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3047
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3057
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3061
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3064
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3071
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3075
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3083
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3088
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3093
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3097
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3105
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3108
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3116
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3119
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3126
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3129
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3137
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3140
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3148
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3151
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3155
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3160
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3165
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3172
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3180
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3187
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3192
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3204
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3208
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3211
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3219
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3226
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3231
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3351
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3355
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3359
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3398
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3402
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3407
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3411
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3420
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3427
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3431
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3443
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3452
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3455
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3491
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3503
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3517
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3528
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3542
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3548
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3558
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3564
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3570
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3578
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3585
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3590
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3595
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3601
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3608
		{
			sqlVAL.str = ""
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3615
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 624:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3628
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3635
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3641
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3645
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 629:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3651
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3661
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3665
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 632:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3671
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3682
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3693
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3697
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3703
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3707
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3711
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3715
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3719
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3723
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3727
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3745
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3749
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3753
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3757
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3761
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3765
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3769
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3777
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3781
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3785
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 653:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3792
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3802
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3814
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3824
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3836
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3841
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3847
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3853
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3864
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3874
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3898
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3902
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3908
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3912
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3917
		{
			return unimplemented(sqllex, "match full")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3918
		{
			return unimplemented(sqllex, "match partial")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3919
		{
			return unimplemented(sqllex, "match simple")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3920
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3927
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3931
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3935
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3939
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3943
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3949
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3955
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3963
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3967
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3971
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3975
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3979
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3985
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3989
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3993
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4011
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 689:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4019
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4027
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4031
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4034
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4035
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4038
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4039
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4041
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4042
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4043
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4046
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4048
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4050
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4052
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4053
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4055
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4056
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4058
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4067
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4070
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4078
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4082
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4085
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4089
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4093
		{
			sqlVAL.union.val = nil
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4103
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4107
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4110
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4118
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4125
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4143
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4156
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4170
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4179
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4188
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4193
		{
			sqlVAL.union.val = true
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4197
		{
			sqlVAL.union.val = false
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4203
		{
			sqlVAL.union.val = true
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4207
		{
			sqlVAL.union.val = false
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4213
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4226
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4229
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4230
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4233
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4234
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4238
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4242
		{
			sqlVAL.union.val = tree.Descending
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4246
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4252
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4259
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4263
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4269
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4273
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4277
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4281
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4285
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 747:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4287
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4291
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4295
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4301
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4305
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4311
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4315
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4321
		{
			sqlVAL.union.val = true
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4325
		{
			sqlVAL.union.val = false
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4330
		{
			sqlVAL.union.val = true
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4331
		{
			sqlVAL.union.val = false
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4339
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4342
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4352
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4361
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4364
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4372
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4375
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4379
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4380
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4381
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4397
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4400
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4402
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4405
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4415
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4418
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4420
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4423
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4427
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4432
		{
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4433
		{
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4434
		{
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4442
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4449
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4452
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4453
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4457
		{
			sqlVAL.str = ""
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4461
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4465
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4469
		{
			sqlVAL.str = ""
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4475
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4479
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4485
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4489
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4495
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4499
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4512
		{
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4514
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4518
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4522
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4526
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4532
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4538
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4544
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4548
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 807:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4558
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4568
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4578
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4582
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4586
		{
			sqlVAL.str = ""
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4592
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4596
		{
			sqlVAL.str = ""
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4602
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4606
		{
			sqlVAL.str = ""
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4612
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4616
		{
			sqlVAL.str = ""
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4621
		{
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4622
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4634
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4641
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4648
		{
			return helpWith(sqllex, "INSERT")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4659
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4666
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4670
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4678
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4684
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4688
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4692
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4698
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4702
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4722
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4726
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4730
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4736
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4740
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4742
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4748
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4753
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4757
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 842:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4774
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4785
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4789
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4790
		{
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4794
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4798
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4811
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4814
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4818
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4861
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4867
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4871
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4886
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4890
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4894
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4898
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4902
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4906
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4913
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4948
		{
			return helpWith(sqllex, "SELECT")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4949
		{
			return helpWith(sqllex, "VALUES")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4950
		{
			return helpWith(sqllex, "TABLE")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4972
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4985
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4999
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5011
		{
			return helpWith(sqllex, "SELECT")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5015
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5024
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5033
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5048
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5055
		{
			return helpWith(sqllex, "TABLE")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5067
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5070
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5071
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5075
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5079
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 887:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5085
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5093
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5094
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5098
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5101
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5104
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5105
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5109
		{
			sqlVAL.union.val = true
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5113
		{
			sqlVAL.union.val = false
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5117
		{
			sqlVAL.union.val = false
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5123
		{
			sqlVAL.union.val = true
		}
	case 898:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5129
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5134
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5135
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5138
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5139
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5143
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5147
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5153
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5159
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5169
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5173
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5177
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5186
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5195
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5206
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5210
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5219
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5225
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5232
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5239
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5248
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5252
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5256
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5262
		{
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5263
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5266
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5267
		{
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5284
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5288
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5294
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5298
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5317
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5320
		{
			return helpWith(sqllex, "VALUES")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5322
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5334
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5337
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5339
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5345
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5355
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5359
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5365
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5371
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5376
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5399
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5403
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5407
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5411
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5438
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5452
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5456
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:5459
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5460
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5461
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5463
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5466
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5468
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5471
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5473
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5477
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5497
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5502
		{
			sqlVAL.union.val = nil
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5503
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5504
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5508
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5518
		{
			sqlVAL.union.val = true
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5522
		{
			sqlVAL.union.val = false
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5542
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5546
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5550
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5554
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5558
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5562
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5568
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5572
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5579
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5585
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5592
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5598
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5602
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5606
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5610
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5616
		{
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5617
		{
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5628
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5632
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5637
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5638
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5639
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5640
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5644
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5648
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5661
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5665
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5669
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5675
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5679
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5691
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5705
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5714
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5725
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5729
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5736
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5738
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5747
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5751
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5755
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5764
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5782
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5786
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5790
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5794
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5798
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5802
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5806
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5810
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5814
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5818
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5822
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5826
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5830
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5834
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5838
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5842
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5846
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5866
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5870
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5874
		{
			sqlVAL.union.val = nil
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5881
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5885
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5889
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5893
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5897
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5901
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5905
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5909
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5913
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5917
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5921
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5925
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5935
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5939
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5948
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5957
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5966
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5970
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5977
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5981
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5985
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5989
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5993
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5999
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6003
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6009
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6020
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6026
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6038
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6044
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6048
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6052
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6056
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6061
		{
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6062
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6067
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6071
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6075
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6079
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6083
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6087
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6091
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6095
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6099
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6104
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6110
		{
			sqlVAL.union.val = tree.Year
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6114
		{
			sqlVAL.union.val = tree.Month
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6118
		{
			sqlVAL.union.val = tree.Day
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6122
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6126
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6130
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6136
		{
			sqlVAL.union.val = tree.Month
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6140
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6144
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6148
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6152
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6156
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6160
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6164
		{
			sqlVAL.union.val = nil
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6170
		{
			sqlVAL.union.val = tree.Second
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6173
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6197
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6201
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6205
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6208
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6217
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6221
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6225
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6229
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6233
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6237
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6241
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6245
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6249
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6253
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6257
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6261
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6265
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6269
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6273
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6277
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6281
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6285
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6289
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6293
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6297
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6301
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6305
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6309
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6313
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6317
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6321
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6325
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6329
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6333
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6337
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6341
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6345
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6349
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6353
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6357
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6361
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6365
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6369
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6373
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6377
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6381
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6385
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6389
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6393
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6397
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6401
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6405
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6409
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6413
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6417
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6425
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6429
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6433
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6436
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6438
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6442
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6446
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6450
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6454
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6458
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6462
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6466
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6470
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6474
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6478
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6482
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6486
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6490
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6494
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6498
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6502
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6519
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6523
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6527
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6542
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6546
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6550
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6554
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6558
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6562
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6566
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6570
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6574
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6578
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6582
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6586
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6590
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6594
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6598
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6602
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6606
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6610
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6614
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6618
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6622
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6626
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6630
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6634
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6638
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6642
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6646
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6650
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6664
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6672
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6708
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6713
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6722
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6727
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), Star: true}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6731
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6735
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6740
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6744
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6748
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6752
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6757
		{
			t := sqlDollar[2].union.tuple()
			t.Labels = sqlDollar[4].union.nameList()
			sqlVAL.union.val = &t
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6768
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6772
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6775
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6776
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6778
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6782
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6786
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6789
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6800
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6807
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6816
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6817
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6821
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6823
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6827
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6833
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6837
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6841
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6845
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6851
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6855
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6859
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6863
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6867
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6871
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6875
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6879
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6883
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6887
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6891
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6895
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6899
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6906
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6909
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6911
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6914
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6916
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6919
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6921
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6924
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6926
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6929
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6931
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6934
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6936
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6939
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6941
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6944
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6946
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6950
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6953
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6954
		{
			return unimplemented(sqllex, "treat")
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6956
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6960
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6964
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6968
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6972
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6975
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6980
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6985
		{
			return unimplemented(sqllex, "within group")
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6986
		{
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6990
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6994
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7001
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7005
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7011
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7021
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7029
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7033
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7037
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7063
		{
			sqlVAL.str = ""
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7069
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7073
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7083
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7084
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7085
		{
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7088
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7089
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7095
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7096
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7097
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7098
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7099
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7110
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7114
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7120
		{
			sqlVAL.union.val = tree.Any
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7124
		{
			sqlVAL.union.val = tree.Some
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7128
		{
			sqlVAL.union.val = tree.All
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7133
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7134
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7135
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7136
		{
			sqlVAL.union.val = tree.Div
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7137
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7138
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7139
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7140
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7141
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7142
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7143
		{
			sqlVAL.union.val = tree.LT
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7144
		{
			sqlVAL.union.val = tree.GT
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7145
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7146
		{
			sqlVAL.union.val = tree.LE
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7147
		{
			sqlVAL.union.val = tree.GE
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7148
		{
			sqlVAL.union.val = tree.NE
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7152
		{
			sqlVAL.union.val = tree.Like
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7153
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7154
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7155
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7167
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7173
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7177
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7183
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7193
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7197
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7203
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7207
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7213
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7217
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7239
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7243
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7247
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7253
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7260
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7264
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7281
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7285
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7289
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7293
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7297
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7303
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7309
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7315
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7319
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7323
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7329
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7333
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7344
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7351
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7355
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7361
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7367
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7371
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7378
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7384
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7395
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7401
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7405
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7410
		{
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7411
		{
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7415
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7419
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7425
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7434
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7438
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7442
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7450
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7454
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7460
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7464
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7470
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7477
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7505
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7513
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7519
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7523
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7530
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7534
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7538
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7542
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7545
		{
			return unimplemented(sqllex, "func const")
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7547
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7551
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7554
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7556
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7560
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7564
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7571
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7575
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7584
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7595
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7605
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7701
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7708
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7716
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7769
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7779
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7783
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7797
		{
			sqlVAL.str = ""
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7803
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7807
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
