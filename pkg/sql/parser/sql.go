// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:565
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8513

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	425, 57,
	-2, 904,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	169, 739,
	-2, 0,
	-1, 60,
	102, 904,
	175, 904,
	373, 904,
	374, 904,
	-2, 0,
	-1, 74,
	115, 878,
	128, 878,
	183, 878,
	210, 878,
	238, 878,
	246, 878,
	370, 878,
	-2, 867,
	-1, 108,
	120, 549,
	199, 549,
	360, 549,
	-2, 0,
	-1, 113,
	4, 906,
	20, 906,
	21, 906,
	22, 906,
	23, 906,
	25, 906,
	30, 906,
	35, 906,
	36, 906,
	37, 906,
	38, 906,
	39, 906,
	40, 906,
	41, 906,
	42, 906,
	43, 906,
	44, 906,
	46, 906,
	47, 906,
	48, 906,
	49, 906,
	50, 906,
	51, 906,
	52, 906,
	55, 906,
	56, 906,
	57, 906,
	58, 906,
	60, 906,
	61, 906,
	65, 906,
	66, 906,
	67, 906,
	68, 906,
	69, 906,
	71, 906,
	72, 906,
	73, 906,
	74, 906,
	76, 906,
	78, 906,
	79, 906,
	82, 906,
	83, 906,
	91, 906,
	92, 906,
	93, 906,
	94, 906,
	95, 906,
	96, 906,
	97, 906,
	98, 906,
	100, 906,
	102, 906,
	104, 906,
	107, 906,
	108, 906,
	109, 906,
	111, 906,
	113, 906,
	114, 906,
	116, 906,
	117, 906,
	118, 906,
	119, 906,
	120, 906,
	121, 906,
	122, 906,
	123, 906,
	124, 906,
	125, 906,
	133, 906,
	134, 906,
	135, 906,
	136, 906,
	137, 906,
	138, 906,
	140, 906,
	142, 906,
	146, 906,
	148, 906,
	149, 906,
	151, 906,
	153, 906,
	154, 906,
	155, 906,
	156, 906,
	157, 906,
	158, 906,
	159, 906,
	160, 906,
	161, 906,
	164, 906,
	165, 906,
	170, 906,
	171, 906,
	172, 906,
	175, 906,
	176, 906,
	177, 906,
	178, 906,
	179, 906,
	180, 906,
	181, 906,
	182, 906,
	184, 906,
	186, 906,
	189, 906,
	190, 906,
	191, 906,
	193, 906,
	194, 906,
	197, 906,
	198, 906,
	199, 906,
	201, 906,
	202, 906,
	204, 906,
	205, 906,
	207, 906,
	208, 906,
	211, 906,
	212, 906,
	215, 906,
	217, 906,
	220, 906,
	221, 906,
	222, 906,
	223, 906,
	224, 906,
	226, 906,
	227, 906,
	228, 906,
	229, 906,
	234, 906,
	235, 906,
	236, 906,
	237, 906,
	239, 906,
	240, 906,
	242, 906,
	243, 906,
	244, 906,
	247, 906,
	248, 906,
	250, 906,
	252, 906,
	253, 906,
	254, 906,
	255, 906,
	256, 906,
	257, 906,
	258, 906,
	259, 906,
	261, 906,
	262, 906,
	263, 906,
	264, 906,
	265, 906,
	267, 906,
	268, 906,
	269, 906,
	270, 906,
	271, 906,
	272, 906,
	273, 906,
	274, 906,
	275, 906,
	277, 906,
	278, 906,
	279, 906,
	280, 906,
	281, 906,
	283, 906,
	284, 906,
	285, 906,
	286, 906,
	287, 906,
	288, 906,
	289, 906,
	291, 906,
	293, 906,
	294, 906,
	295, 906,
	296, 906,
	297, 906,
	298, 906,
	300, 906,
	301, 906,
	302, 906,
	303, 906,
	304, 906,
	305, 906,
	306, 906,
	308, 906,
	309, 906,
	310, 906,
	311, 906,
	312, 906,
	313, 906,
	314, 906,
	315, 906,
	316, 906,
	318, 906,
	319, 906,
	320, 906,
	321, 906,
	323, 906,
	324, 906,
	325, 906,
	326, 906,
	328, 906,
	329, 906,
	330, 906,
	331, 906,
	332, 906,
	333, 906,
	334, 906,
	335, 906,
	336, 906,
	337, 906,
	338, 906,
	339, 906,
	341, 906,
	342, 906,
	344, 906,
	345, 906,
	346, 906,
	347, 906,
	348, 906,
	349, 906,
	350, 906,
	351, 906,
	352, 906,
	354, 906,
	355, 906,
	356, 906,
	357, 906,
	360, 906,
	361, 906,
	362, 906,
	363, 906,
	365, 906,
	366, 906,
	368, 906,
	369, 906,
	372, 906,
	373, 906,
	374, 906,
	375, 906,
	377, 906,
	379, 906,
	380, 906,
	381, 906,
	382, 906,
	383, 906,
	384, 906,
	386, 906,
	387, 906,
	388, 906,
	393, 906,
	394, 906,
	395, 906,
	396, 906,
	397, 906,
	398, 906,
	-2, 0,
	-1, 135,
	115, 877,
	128, 877,
	183, 877,
	210, 877,
	238, 877,
	246, 877,
	370, 877,
	-2, 870,
	-1, 140,
	1, 800,
	189, 800,
	267, 800,
	272, 800,
	424, 800,
	425, 800,
	-2, 0,
	-1, 142,
	1, 800,
	424, 800,
	425, 800,
	-2, 0,
	-1, 143,
	1, 800,
	424, 800,
	425, 800,
	-2, 0,
	-1, 144,
	1, 804,
	424, 804,
	425, 804,
	-2, 0,
	-1, 172,
	4, 913,
	5, 913,
	6, 913,
	7, 913,
	8, 913,
	9, 913,
	20, 913,
	21, 913,
	22, 913,
	23, 913,
	25, 913,
	30, 913,
	31, 913,
	35, 913,
	36, 913,
	37, 913,
	38, 913,
	39, 913,
	40, 913,
	41, 913,
	42, 913,
	43, 913,
	44, 913,
	46, 913,
	47, 913,
	48, 913,
	49, 913,
	50, 913,
	51, 913,
	52, 913,
	53, 913,
	54, 913,
	55, 913,
	56, 913,
	57, 913,
	58, 913,
	60, 913,
	61, 913,
	63, 913,
	65, 913,
	66, 913,
	67, 913,
	68, 913,
	69, 913,
	71, 913,
	72, 913,
	73, 913,
	74, 913,
	76, 913,
	78, 913,
	79, 913,
	81, 913,
	82, 913,
	83, 913,
	84, 913,
	85, 913,
	86, 913,
	87, 913,
	88, 913,
	89, 913,
	90, 913,
	91, 913,
	92, 913,
	93, 913,
	94, 913,
	95, 913,
	96, 913,
	97, 913,
	98, 913,
	99, 913,
	100, 913,
	102, 913,
	104, 913,
	107, 913,
	108, 913,
	109, 913,
	111, 913,
	113, 913,
	114, 913,
	116, 913,
	117, 913,
	118, 913,
	119, 913,
	120, 913,
	121, 913,
	122, 913,
	123, 913,
	124, 913,
	125, 913,
	126, 913,
	127, 913,
	133, 913,
	134, 913,
	135, 913,
	136, 913,
	137, 913,
	138, 913,
	140, 913,
	142, 913,
	145, 913,
	146, 913,
	148, 913,
	149, 913,
	151, 913,
	153, 913,
	154, 913,
	155, 913,
	156, 913,
	157, 913,
	158, 913,
	159, 913,
	160, 913,
	161, 913,
	162, 913,
	164, 913,
	165, 913,
	170, 913,
	171, 913,
	172, 913,
	174, 913,
	175, 913,
	176, 913,
	177, 913,
	178, 913,
	179, 913,
	180, 913,
	181, 913,
	182, 913,
	184, 913,
	186, 913,
	187, 913,
	188, 913,
	189, 913,
	190, 913,
	191, 913,
	192, 913,
	193, 913,
	194, 913,
	197, 913,
	198, 913,
	199, 913,
	201, 913,
	202, 913,
	204, 913,
	205, 913,
	206, 913,
	207, 913,
	208, 913,
	209, 913,
	211, 913,
	212, 913,
	215, 913,
	217, 913,
	218, 913,
	219, 913,
	220, 913,
	221, 913,
	222, 913,
	223, 913,
	224, 913,
	225, 913,
	226, 913,
	227, 913,
	228, 913,
	229, 913,
	230, 913,
	232, 913,
	233, 913,
	234, 913,
	235, 913,
	236, 913,
	237, 913,
	239, 913,
	240, 913,
	243, 913,
	244, 913,
	247, 913,
	248, 913,
	249, 913,
	250, 913,
	251, 913,
	252, 913,
	253, 913,
	254, 913,
	255, 913,
	256, 913,
	257, 913,
	258, 913,
	259, 913,
	261, 913,
	262, 913,
	263, 913,
	264, 913,
	265, 913,
	267, 913,
	268, 913,
	269, 913,
	270, 913,
	271, 913,
	272, 913,
	273, 913,
	274, 913,
	275, 913,
	277, 913,
	278, 913,
	279, 913,
	280, 913,
	281, 913,
	283, 913,
	284, 913,
	285, 913,
	286, 913,
	287, 913,
	288, 913,
	289, 913,
	291, 913,
	292, 913,
	293, 913,
	294, 913,
	295, 913,
	296, 913,
	297, 913,
	298, 913,
	300, 913,
	301, 913,
	302, 913,
	303, 913,
	304, 913,
	305, 913,
	306, 913,
	308, 913,
	309, 913,
	310, 913,
	311, 913,
	312, 913,
	313, 913,
	314, 913,
	315, 913,
	316, 913,
	317, 913,
	318, 913,
	319, 913,
	320, 913,
	321, 913,
	322, 913,
	323, 913,
	324, 913,
	325, 913,
	326, 913,
	328, 913,
	329, 913,
	330, 913,
	331, 913,
	332, 913,
	333, 913,
	334, 913,
	335, 913,
	336, 913,
	337, 913,
	338, 913,
	339, 913,
	341, 913,
	342, 913,
	344, 913,
	345, 913,
	346, 913,
	347, 913,
	348, 913,
	349, 913,
	350, 913,
	351, 913,
	352, 913,
	354, 913,
	355, 913,
	356, 913,
	357, 913,
	360, 913,
	361, 913,
	362, 913,
	363, 913,
	364, 913,
	365, 913,
	366, 913,
	368, 913,
	369, 913,
	372, 913,
	373, 913,
	374, 913,
	375, 913,
	376, 913,
	377, 913,
	379, 913,
	380, 913,
	381, 913,
	382, 913,
	383, 913,
	384, 913,
	386, 913,
	387, 913,
	388, 913,
	393, 913,
	394, 913,
	395, 913,
	396, 913,
	397, 913,
	398, 913,
	399, 913,
	407, 913,
	412, 913,
	413, 913,
	414, 913,
	421, 913,
	427, 913,
	-2, 0,
	-1, 175,
	1, 57,
	425, 57,
	-2, 904,
	-1, 208,
	423, 1502,
	426, 1502,
	-2, 592,
	-1, 209,
	423, 1504,
	426, 1504,
	-2, 593,
	-1, 210,
	423, 1503,
	426, 1503,
	-2, 594,
	-1, 211,
	426, 1454,
	-2, 595,
	-1, 625,
	144, 1621,
	358, 1621,
	404, 1621,
	423, 1621,
	-2, 0,
	-1, 626,
	144, 1542,
	358, 1542,
	404, 1542,
	423, 1542,
	-2, 0,
	-1, 628,
	144, 1694,
	358, 1694,
	404, 1694,
	423, 1694,
	-2, 0,
	-1, 630,
	144, 1722,
	358, 1722,
	404, 1722,
	423, 1722,
	-2, 0,
	-1, 637,
	144, 1626,
	358, 1626,
	404, 1626,
	423, 1626,
	-2, 426,
	-1, 670,
	1, 522,
	420, 522,
	422, 522,
	424, 522,
	425, 522,
	-2, 0,
	-1, 671,
	1, 591,
	141, 591,
	420, 591,
	422, 591,
	424, 591,
	425, 591,
	-2, 0,
	-1, 677,
	1, 536,
	420, 536,
	422, 536,
	424, 536,
	425, 536,
	-2, 0,
	-1, 679,
	1, 540,
	420, 540,
	422, 540,
	424, 540,
	425, 540,
	-2, 0,
	-1, 681,
	1, 550,
	420, 550,
	422, 550,
	424, 550,
	425, 550,
	-2, 0,
	-1, 682,
	1, 556,
	420, 556,
	422, 556,
	424, 556,
	425, 556,
	-2, 0,
	-1, 683,
	1, 559,
	420, 559,
	422, 559,
	424, 559,
	425, 559,
	-2, 0,
	-1, 687,
	1, 573,
	420, 573,
	422, 573,
	424, 573,
	425, 573,
	-2, 0,
	-1, 688,
	1, 575,
	420, 575,
	422, 575,
	424, 575,
	425, 575,
	-2, 0,
	-1, 716,
	128, 917,
	210, 917,
	238, 917,
	-2, 873,
	-1, 724,
	128, 916,
	210, 916,
	238, 916,
	-2, 871,
	-1, 751,
	421, 1798,
	-2, 1205,
	-1, 752,
	421, 1799,
	-2, 1206,
	-1, 779,
	421, 1496,
	-2, 1487,
	-1, 785,
	5, 1039,
	-2, 1532,
	-1, 786,
	5, 1040,
	-2, 1537,
	-1, 787,
	5, 1041,
	-2, 1536,
	-1, 788,
	5, 1042,
	-2, 1719,
	-1, 789,
	5, 1043,
	-2, 1628,
	-1, 790,
	5, 1044,
	-2, 1687,
	-1, 791,
	5, 1045,
	-2, 1689,
	-1, 792,
	5, 1046,
	-2, 1690,
	-1, 793,
	5, 1047,
	-2, 1691,
	-1, 794,
	5, 1048,
	-2, 1699,
	-1, 795,
	5, 1049,
	-2, 1730,
	-1, 796,
	5, 1050,
	-2, 1597,
	-1, 797,
	5, 1051,
	-2, 1531,
	-1, 798,
	5, 1052,
	-2, 1635,
	-1, 799,
	5, 1053,
	-2, 1636,
	-1, 800,
	5, 1054,
	-2, 1601,
	-1, 801,
	5, 1055,
	421, 1511,
	-2, 1502,
	-1, 802,
	5, 1103,
	421, 1103,
	-2, 1765,
	-1, 807,
	421, 1512,
	-2, 1503,
	-1, 809,
	5, 1059,
	-2, 1763,
	-1, 810,
	5, 1060,
	-2, 1600,
	-1, 811,
	5, 1061,
	-2, 1602,
	-1, 812,
	5, 1062,
	-2, 1603,
	-1, 813,
	5, 1063,
	-2, 1604,
	-1, 814,
	5, 1064,
	-2, 1764,
	-1, 815,
	5, 1065,
	-2, 1776,
	-1, 816,
	5, 1066,
	-2, 1745,
	-1, 817,
	5, 1067,
	-2, 1774,
	-1, 818,
	5, 1068,
	-2, 1584,
	-1, 819,
	5, 1069,
	-2, 1585,
	-1, 820,
	5, 1083,
	-2, 1757,
	-1, 822,
	5, 1058,
	-2, 1753,
	-1, 823,
	5, 1058,
	-2, 1752,
	-1, 824,
	5, 1058,
	-2, 1769,
	-1, 825,
	5, 1075,
	-2, 1747,
	-1, 826,
	5, 1076,
	-2, 1533,
	-1, 827,
	5, 1093,
	-2, 1746,
	-1, 829,
	5, 1094,
	-2, 1561,
	-1, 830,
	5, 1095,
	-2, 1778,
	-1, 831,
	5, 1097,
	-2, 1779,
	-1, 832,
	5, 1099,
	-2, 1780,
	-1, 833,
	5, 1101,
	-2, 1720,
	-1, 834,
	5, 1027,
	-2, 1610,
	-1, 835,
	5, 1028,
	-2, 1611,
	-1, 855,
	5, 1091,
	-2, 1709,
	-1, 872,
	5, 1093,
	-2, 1749,
	-1, 873,
	5, 1093,
	-2, 1748,
	-1, 874,
	5, 1090,
	-2, 1784,
	-1, 935,
	421, 1511,
	-2, 1502,
	-1, 950,
	283, 1484,
	414, 1484,
	-2, 1483,
	-1, 1099,
	257, 902,
	-2, 718,
	-1, 1111,
	241, 1506,
	-2, 0,
	-1, 1154,
	1, 293,
	420, 293,
	424, 293,
	425, 293,
	-2, 876,
	-1, 1157,
	4, 1783,
	10, 1783,
	11, 1783,
	13, 1783,
	14, 1783,
	15, 1783,
	16, 1783,
	17, 1783,
	18, 1783,
	20, 1783,
	21, 1783,
	22, 1783,
	23, 1783,
	25, 1783,
	28, 1783,
	30, 1783,
	32, 1783,
	35, 1783,
	36, 1783,
	37, 1783,
	38, 1783,
	39, 1783,
	40, 1783,
	41, 1783,
	42, 1783,
	43, 1783,
	44, 1783,
	46, 1783,
	47, 1783,
	48, 1783,
	49, 1783,
	50, 1783,
	51, 1783,
	52, 1783,
	55, 1783,
	56, 1783,
	57, 1783,
	58, 1783,
	60, 1783,
	61, 1783,
	62, 1783,
	65, 1783,
	66, 1783,
	67, 1783,
	68, 1783,
	69, 1783,
	70, 1783,
	71, 1783,
	72, 1783,
	73, 1783,
	74, 1783,
	76, 1783,
	77, 1783,
	78, 1783,
	79, 1783,
	81, 1783,
	82, 1783,
	83, 1783,
	91, 1783,
	92, 1783,
	93, 1783,
	94, 1783,
	95, 1783,
	96, 1783,
	97, 1783,
	98, 1783,
	100, 1783,
	102, 1783,
	104, 1783,
	107, 1783,
	108, 1783,
	109, 1783,
	111, 1783,
	113, 1783,
	114, 1783,
	116, 1783,
	117, 1783,
	118, 1783,
	119, 1783,
	120, 1783,
	121, 1783,
	122, 1783,
	123, 1783,
	124, 1783,
	125, 1783,
	129, 1783,
	130, 1783,
	131, 1783,
	132, 1783,
	133, 1783,
	134, 1783,
	135, 1783,
	136, 1783,
	137, 1783,
	138, 1783,
	139, 1783,
	140, 1783,
	142, 1783,
	145, 1783,
	146, 1783,
	148, 1783,
	149, 1783,
	151, 1783,
	153, 1783,
	154, 1783,
	155, 1783,
	156, 1783,
	157, 1783,
	158, 1783,
	159, 1783,
	160, 1783,
	161, 1783,
	162, 1783,
	163, 1783,
	164, 1783,
	165, 1783,
	166, 1783,
	167, 1783,
	168, 1783,
	170, 1783,
	171, 1783,
	172, 1783,
	174, 1783,
	175, 1783,
	176, 1783,
	177, 1783,
	178, 1783,
	179, 1783,
	180, 1783,
	181, 1783,
	182, 1783,
	184, 1783,
	186, 1783,
	187, 1783,
	188, 1783,
	189, 1783,
	190, 1783,
	191, 1783,
	192, 1783,
	193, 1783,
	194, 1783,
	195, 1783,
	196, 1783,
	197, 1783,
	198, 1783,
	199, 1783,
	201, 1783,
	202, 1783,
	204, 1783,
	205, 1783,
	206, 1783,
	207, 1783,
	208, 1783,
	209, 1783,
	211, 1783,
	212, 1783,
	215, 1783,
	216, 1783,
	217, 1783,
	220, 1783,
	221, 1783,
	222, 1783,
	223, 1783,
	224, 1783,
	225, 1783,
	226, 1783,
	227, 1783,
	228, 1783,
	229, 1783,
	232, 1783,
	234, 1783,
	235, 1783,
	236, 1783,
	237, 1783,
	239, 1783,
	240, 1783,
	243, 1783,
	244, 1783,
	245, 1783,
	247, 1783,
	248, 1783,
	250, 1783,
	252, 1783,
	253, 1783,
	254, 1783,
	255, 1783,
	256, 1783,
	257, 1783,
	258, 1783,
	259, 1783,
	261, 1783,
	262, 1783,
	263, 1783,
	264, 1783,
	265, 1783,
	267, 1783,
	268, 1783,
	269, 1783,
	270, 1783,
	271, 1783,
	272, 1783,
	273, 1783,
	274, 1783,
	275, 1783,
	277, 1783,
	278, 1783,
	279, 1783,
	280, 1783,
	281, 1783,
	282, 1783,
	283, 1783,
	284, 1783,
	285, 1783,
	286, 1783,
	287, 1783,
	288, 1783,
	289, 1783,
	291, 1783,
	292, 1783,
	293, 1783,
	294, 1783,
	295, 1783,
	296, 1783,
	297, 1783,
	298, 1783,
	299, 1783,
	300, 1783,
	301, 1783,
	302, 1783,
	303, 1783,
	304, 1783,
	305, 1783,
	306, 1783,
	308, 1783,
	309, 1783,
	310, 1783,
	311, 1783,
	312, 1783,
	313, 1783,
	314, 1783,
	315, 1783,
	316, 1783,
	318, 1783,
	319, 1783,
	320, 1783,
	321, 1783,
	322, 1783,
	323, 1783,
	324, 1783,
	325, 1783,
	326, 1783,
	328, 1783,
	329, 1783,
	330, 1783,
	331, 1783,
	332, 1783,
	333, 1783,
	334, 1783,
	335, 1783,
	336, 1783,
	337, 1783,
	338, 1783,
	339, 1783,
	341, 1783,
	342, 1783,
	344, 1783,
	345, 1783,
	346, 1783,
	347, 1783,
	348, 1783,
	349, 1783,
	350, 1783,
	351, 1783,
	352, 1783,
	354, 1783,
	355, 1783,
	356, 1783,
	357, 1783,
	360, 1783,
	361, 1783,
	362, 1783,
	363, 1783,
	365, 1783,
	366, 1783,
	368, 1783,
	369, 1783,
	372, 1783,
	373, 1783,
	374, 1783,
	375, 1783,
	377, 1783,
	379, 1783,
	380, 1783,
	381, 1783,
	382, 1783,
	383, 1783,
	384, 1783,
	386, 1783,
	387, 1783,
	388, 1783,
	393, 1783,
	394, 1783,
	395, 1783,
	396, 1783,
	397, 1783,
	398, 1783,
	399, 1783,
	400, 1783,
	402, 1783,
	403, 1783,
	404, 1783,
	405, 1783,
	406, 1783,
	407, 1783,
	409, 1783,
	410, 1783,
	411, 1783,
	412, 1783,
	413, 1783,
	414, 1783,
	415, 1783,
	416, 1783,
	417, 1783,
	419, 1783,
	422, 1783,
	423, 1783,
	426, 1783,
	427, 1783,
	-2, 0,
	-1, 1176,
	144, 1694,
	358, 1694,
	404, 1694,
	423, 1694,
	-2, 0,
	-1, 1205,
	144, 1722,
	358, 1722,
	404, 1722,
	423, 1722,
	-2, 0,
	-1, 1206,
	189, 812,
	267, 812,
	272, 812,
	-2, 413,
	-1, 1277,
	1, 1737,
	420, 1737,
	422, 1737,
	423, 1737,
	424, 1737,
	425, 1737,
	-2, 571,
	-1, 1278,
	1, 1692,
	420, 1692,
	422, 1692,
	423, 1692,
	424, 1692,
	425, 1692,
	-2, 572,
	-1, 1288,
	128, 916,
	210, 916,
	238, 916,
	-2, 874,
	-1, 1378,
	115, 878,
	128, 878,
	183, 878,
	210, 878,
	238, 878,
	246, 878,
	370, 878,
	-2, 1258,
	-1, 1430,
	422, 1389,
	-2, 0,
	-1, 1434,
	189, 812,
	267, 812,
	272, 812,
	-2, 807,
	-1, 1468,
	115, 878,
	128, 878,
	183, 878,
	210, 878,
	238, 878,
	246, 878,
	370, 878,
	-2, 986,
	-1, 1684,
	189, 812,
	267, 812,
	272, 812,
	-2, 415,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1138,
	-1, 1785,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1139,
	-1, 1786,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1140,
	-1, 1787,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1141,
	-1, 1788,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1142,
	-1, 1789,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1143,
	-1, 1790,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1144,
	-1, 1791,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1145,
	-1, 1803,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1157,
	-1, 1804,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1158,
	-1, 1805,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1159,
	-1, 1808,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1164,
	-1, 1814,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1168,
	-1, 1816,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1176,
	-1, 1817,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1177,
	-1, 1818,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1178,
	-1, 1819,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1179,
	-1, 1907,
	5, 1055,
	144, 1400,
	421, 1511,
	-2, 1502,
	-1, 1908,
	144, 1401,
	-2, 1741,
	-1, 1909,
	144, 1402,
	-2, 1625,
	-1, 1910,
	144, 1403,
	-2, 1562,
	-1, 1911,
	144, 1404,
	-2, 1592,
	-1, 1912,
	144, 1405,
	-2, 1624,
	-1, 1913,
	144, 1406,
	-2, 1686,
	-1, 1982,
	1, 987,
	81, 987,
	115, 987,
	128, 987,
	145, 987,
	150, 987,
	152, 987,
	174, 987,
	183, 987,
	192, 987,
	206, 987,
	210, 987,
	225, 987,
	238, 987,
	241, 987,
	246, 987,
	290, 987,
	292, 987,
	370, 987,
	378, 987,
	390, 987,
	391, 987,
	401, 987,
	420, 987,
	422, 987,
	424, 987,
	425, 987,
	426, 987,
	-2, 986,
	-1, 1987,
	421, 1488,
	-2, 1500,
	-1, 2071,
	422, 1459,
	426, 1459,
	-2, 1475,
	-1, 2201,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1166,
	-1, 2202,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1170,
	-1, 2208,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1172,
	-1, 2443,
	257, 902,
	-2, 718,
	-1, 2514,
	189, 812,
	267, 812,
	272, 812,
	-2, 412,
	-1, 2532,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1174,
	-1, 2539,
	187, 0,
	188, 0,
	232, 0,
	-2, 1193,
	-1, 2600,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1223,
	-1, 2601,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1224,
	-1, 2602,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1225,
	-1, 2606,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1229,
	-1, 2607,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1230,
	-1, 2608,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1231,
	-1, 2650,
	421, 1489,
	-2, 1501,
	-1, 2765,
	187, 0,
	188, 0,
	232, 0,
	-2, 1194,
	-1, 2768,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1197,
	-1, 2769,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1199,
	-1, 2915,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1198,
	-1, 2916,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1200,
	-1, 2926,
	187, 0,
	-2, 1232,
	-1, 3014,
	187, 0,
	-2, 1233,
	-1, 3108,
	38, 0,
	162, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1744,
}

const sqlPrivate = 57344

const sqlLast = 59278

var sqlAct = [...]int{

	807, 3116, 1942, 3107, 2866, 2695, 3170, 2954, 2102, 3084,
	3072, 3118, 3087, 3117, 2110, 2943, 1083, 3085, 2570, 3106,
	2881, 2131, 2713, 1771, 3018, 954, 2461, 2822, 1144, 2194,
	2708, 2659, 2837, 2905, 1974, 1831, 1608, 725, 2073, 1057,
	1291, 210, 2229, 2718, 2486, 2930, 498, 2347, 2466, 2660,
	2453, 970, 2069, 498, 2484, 1105, 1461, 2227, 2358, 2099,
	498, 1376, 1463, 498, 498, 2323, 498, 210, 2309, 498,
	498, 2800, 964, 593, 1442, 1609, 498, 571, 28, 2111,
	2455, 1140, 1553, 2072, 498, 1550, 493, 2054, 1500, 1999,
	1554, 1970, 1975, 947, 2334, 2623, 2308, 1562, 550, 733,
	129, 1768, 3019, 1386, 1565, 1843, 1763, 2190, 546, 1516,
	2465, 1434, 1709, 2425, 1479, 1860, 1977, 1522, 1939, 803,
	1443, 1481, 1871, 1828, 2028, 1990, 1551, 1208, 2055, 585,
	920, 73, 1422, 1398, 1854, 2070, 956, 1155, 1137, 1127,
	902, 211, 2867, 2104, 2076, 212, 1452, 923, 135, 928,
	1844, 1367, 635, 1290, 615, 1292, 2661, 1708, 1903, 1578,
	129, 764, 1962, 206, 629, 136, 495, 498, 498, 588,
	494, 1124, 1492, 1153, 2027, 1572, 543, 1947, 1061, 724,
	925, 1433, 600, 662, 1296, 1108, 2639, 2225, 900, 2640,
	1580, 3197, 1471, 3191, 1462, 1956, 2103, 1956, 608, 498,
	498, 498, 959, 498, 498, 973, 973, 478, 779, 2132,
	1580, 481, 1580, 3190, 498, 498, 3167, 1956, 2056, 806,
	2836, 3164, 3142, 3136, 3135, 1531, 2836, 1956, 1956, 729,
	602, 3132, 2472, 478, 3129, 3133, 3126, 481, 3130, 1956,
	1531, 2504, 2527, 1592, 3104, 805, 1539, 3103, 1531, 2473,
	762, 1531, 739, 28, 3102, 3101, 3067, 729, 1592, 1592,
	2144, 2365, 3054, 3047, 3045, 2438, 1531, 2836, 2836, 730,
	3043, 1525, 3016, 2998, 2836, 129, 2144, 2734, 717, 906,
	1949, 907, 2988, 903, 903, 967, 2836, 950, 2983, 2981,
	2972, 3068, 1531, 2836, 1531, 716, 2971, 2964, 2963, 2936,
	1531, 1531, 2836, 1531, 2917, 2861, 2857, 2835, 2144, 1956,
	1956, 2836, 2767, 2732, 2724, 2645, 2144, 2725, 2725, 2646,
	2056, 2635, 734, 1307, 1308, 2636, 3002, 1592, 2629, 940,
	944, 949, 1956, 2563, 2494, 2320, 2276, 1531, 2430, 1956,
	1956, 1531, 2275, 2271, 2244, 2626, 1956, 1956, 1310, 2256,
	2245, 2134, 1191, 2257, 2162, 1063, 904, 2626, 1956, 1062,
	2143, 145, 1179, 1948, 2144, 1687, 39, 917, 2130, 2281,
	2282, 2734, 1597, 2043, 1988, 1309, 2430, 40, 140, 2193,
	478, 172, 2127, 934, 481, 1531, 1956, 2065, 2173, 1955,
	1530, 1531, 44, 1956, 931, 1596, 1438, 1060, 1175, 1597,
	175, 1174, 172, 1307, 1308, 2474, 1173, 46, 142, 1956,
	1172, 1171, 1170, 1169, 2046, 2281, 2282, 174, 1168, 45,
	930, 51, 1167, 1166, 2475, 932, 1581, 1165, 1310, 2296,
	1180, 1164, 1163, 1162, 2281, 2282, 1161, 2228, 174, 1160,
	1706, 52, 1159, 908, 905, 54, 1581, 723, 1581, 722,
	58, 721, 1315, 143, 720, 1309, 719, 173, 59, 72,
	715, 1064, 714, 60, 61, 713, 166, 712, 2281, 2282,
	711, 710, 709, 708, 167, 707, 706, 705, 173, 1337,
	1338, 1339, 701, 700, 699, 660, 659, 1082, 62, 658,
	657, 656, 655, 765, 654, 137, 653, 63, 2287, 652,
	651, 650, 649, 648, 647, 646, 645, 498, 498, 644,
	498, 959, 959, 498, 498, 498, 137, 172, 498, 1377,
	643, 498, 642, 1180, 641, 640, 639, 498, 624, 1330,
	623, 2472, 1315, 622, 621, 620, 619, 498, 498, 498,
	498, 498, 959, 959, 2287, 547, 534, 1531, 533, 959,
	1076, 1147, 504, 174, 503, 502, 484, 483, 482, 1337,
	1338, 1339, 1948, 2287, 1588, 1069, 196, 1074, 578, 1080,
	549, 1148, 195, 2281, 2282, 2297, 2299, 2300, 2301, 40,
	194, 498, 2815, 498, 1579, 193, 1747, 192, 191, 190,
	1113, 1307, 1308, 173, 44, 498, 1098, 2287, 189, 64,
	1109, 1109, 166, 1095, 188, 187, 65, 2281, 2282, 1330,
	167, 186, 1331, 1141, 1857, 185, 1310, 184, 498, 183,
	182, 2297, 181, 577, 180, 179, 75, 138, 66, 498,
	67, 137, 68, 2296, 1180, 178, 144, 177, 1307, 1308,
	2297, 69, 176, 1309, 1081, 1981, 2779, 2726, 172, 2107,
	2643, 1329, 579, 2361, 2250, 2240, 1177, 1126, 2298, 83,
	59, 581, 108, 1310, 2182, 60, 2066, 959, 2059, 1894,
	1712, 141, 1464, 1858, 2297, 1478, 1184, 1131, 1134, 1605,
	730, 1892, 1890, 1189, 174, 1156, 1392, 498, 2016, 1888,
	1309, 2092, 1331, 1222, 1303, 2761, 1085, 1886, 1066, 63,
	1110, 1388, 2287, 498, 2298, 3123, 113, 1075, 3105, 3009,
	1332, 1333, 1334, 1335, 3005, 2984, 139, 1070, 732, 2953,
	1315, 3003, 2903, 2298, 173, 1311, 1312, 1313, 1314, 1316,
	1317, 2899, 2799, 166, 2889, 2433, 2287, 2798, 1859, 1856,
	2786, 167, 1206, 1604, 2785, 2784, 1216, 1337, 1338, 1339,
	1220, 2783, 2777, 952, 1289, 2776, 2775, 2298, 2774, 1288,
	2746, 2744, 137, 1388, 2649, 4, 2620, 1315, 2292, 2290,
	2291, 2283, 2284, 2285, 2286, 2288, 2289, 2619, 2618, 2297,
	2281, 2282, 2547, 2543, 2429, 2356, 2316, 2307, 2280, 2277,
	2274, 172, 172, 1203, 1337, 1338, 1339, 1330, 2272, 2255,
	2234, 64, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316,
	1317, 2233, 2226, 2297, 2292, 2290, 2291, 2283, 2284, 2285,
	2286, 2288, 2289, 1389, 1861, 1387, 1559, 174, 174, 138,
	66, 2135, 67, 1287, 2290, 2291, 2283, 2284, 2285, 2286,
	2288, 2289, 1982, 1865, 1330, 1707, 2029, 1223, 2093, 1303,
	172, 916, 1536, 1534, 2189, 172, 1375, 172, 1302, 3195,
	3178, 580, 2298, 1336, 108, 3177, 1084, 173, 173, 2291,
	2283, 2284, 2285, 2286, 2288, 2289, 166, 166, 1307, 1308,
	1331, 2572, 717, 3096, 167, 167, 174, 1840, 3091, 3049,
	3040, 174, 3039, 174, 3036, 3035, 2298, 498, 3030, 716,
	3027, 3001, 498, 1310, 730, 137, 137, 3000, 1834, 2287,
	2949, 2928, 1299, 1300, 2888, 1855, 2875, 2871, 1449, 1304,
	1440, 2281, 2282, 2869, 2814, 2797, 173, 1331, 498, 2735,
	1309, 173, 2711, 173, 2340, 166, 2702, 2701, 2699, 2149,
	166, 2677, 166, 167, 2676, 2666, 2665, 2631, 167, 2538,
	167, 2500, 2498, 2492, 2447, 2414, 2397, 1400, 1401, 2375,
	1402, 2374, 2319, 2254, 548, 2293, 2294, 2295, 2253, 137,
	2239, 2106, 2292, 2290, 2291, 2283, 2284, 2285, 2286, 2288,
	2289, 1459, 2217, 1399, 3021, 1446, 1447, 2375, 1472, 1396,
	1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 2091,
	1307, 1308, 1307, 1308, 2151, 1985, 1423, 1315, 1967, 2283,
	2284, 2285, 2286, 2288, 2289, 1954, 1884, 1371, 903, 129,
	1606, 1545, 172, 172, 1477, 1310, 1441, 1310, 1460, 1432,
	1431, 1430, 1429, 1428, 1337, 1338, 1339, 1427, 1318, 1319,
	1311, 1312, 1313, 1314, 1316, 1317, 1426, 1425, 1424, 2902,
	2287, 1437, 1309, 1421, 1309, 1420, 730, 1419, 174, 174,
	959, 498, 1099, 1102, 1418, 1417, 1416, 973, 1415, 1435,
	1414, 1413, 1469, 1412, 1499, 1411, 1410, 1409, 1372, 1370,
	1307, 1308, 1202, 1487, 1330, 498, 973, 498, 498, 1893,
	1439, 1186, 1181, 1158, 1152, 210, 2771, 2743, 173, 173,
	2146, 1891, 1889, 1466, 2638, 1310, 1546, 166, 166, 1887,
	1523, 3006, 498, 498, 2634, 167, 167, 1885, 3004, 498,
	2243, 498, 1558, 498, 1968, 1973, 1389, 498, 2496, 1315,
	1368, 934, 1309, 934, 2281, 2282, 137, 137, 2952, 1473,
	1518, 1219, 931, 2161, 931, 1706, 1493, 1706, 2456, 2894,
	2737, 2736, 2641, 1706, 2056, 1595, 1406, 1416, 1416, 959,
	1404, 1464, 1407, 1197, 1285, 2977, 1405, 1331, 930, 2418,
	930, 2413, 2408, 932, 2396, 932, 2261, 498, 959, 210,
	498, 498, 959, 2675, 2285, 2286, 2288, 2289, 959, 2160,
	2260, 210, 498, 2031, 2259, 498, 498, 2258, 2199, 1680,
	1215, 498, 1063, 898, 1569, 1682, 1062, 1542, 1693, 1315,
	1567, 1394, 1857, 2132, 1555, 1560, 1670, 2506, 1230, 2407,
	1512, 2931, 2103, 973, 2574, 828, 3124, 478, 1872, 2248,
	1403, 481, 959, 959, 2655, 498, 3134, 899, 3131, 1529,
	498, 2468, 1826, 1576, 3081, 210, 498, 2709, 498, 1126,
	498, 508, 498, 2137, 498, 1227, 542, 201, 1549, 3157,
	511, 478, 523, 1824, 498, 481, 498, 1674, 2516, 2849,
	915, 1858, 1374, 2163, 3053, 498, 3158, 3125, 892, 1319,
	1311, 1312, 1313, 1314, 1316, 1317, 3194, 1738, 2001, 517,
	1571, 1583, 890, 2976, 1585, 1156, 1544, 1587, 1574, 1736,
	888, 1590, 1261, 514, 2975, 2974, 498, 894, 885, 2973,
	973, 2689, 2684, 2683, 2652, 763, 2651, 1684, 2238, 2237,
	743, 2100, 2236, 2283, 2284, 2285, 2286, 2288, 2289, 1494,
	971, 1058, 1598, 1750, 2235, 524, 1859, 1856, 2203, 541,
	1705, 1203, 1600, 510, 2133, 478, 2049, 2042, 1744, 481,
	1602, 2038, 2019, 1681, 1671, 1217, 1491, 478, 1815, 1820,
	1436, 481, 1694, 1059, 2865, 2497, 1883, 1821, 1882, 535,
	1822, 1881, 2004, 1827, 1845, 1846, 1710, 1698, 1495, 1496,
	1880, 1260, 516, 1769, 1770, 1773, 1087, 1718, 3008, 2214,
	2519, 2053, 1845, 973, 1225, 703, 1745, 1714, 2694, 1193,
	2064, 1218, 1311, 1312, 1313, 1314, 1316, 1317, 1727, 1317,
	2212, 478, 2956, 2011, 614, 481, 3052, 2845, 613, 3099,
	2010, 1272, 1861, 1992, 1902, 1992, 1601, 1906, 1906, 1916,
	1918, 1923, 1830, 1845, 2680, 614, 1991, 498, 1672, 498,
	1306, 1721, 1473, 1748, 1946, 717, 1746, 1749, 717, 717,
	1697, 1696, 1838, 1706, 1703, 1830, 2166, 1836, 1767, 1201,
	540, 1879, 1759, 973, 498, 1760, 1761, 1575, 2168, 2521,
	2520, 1235, 532, 498, 2179, 1256, 498, 1861, 2668, 973,
	1986, 2463, 2557, 498, 1313, 1314, 1316, 1317, 2147, 511,
	1194, 498, 2554, 1869, 527, 2003, 2191, 2192, 2169, 498,
	3149, 1823, 730, 728, 509, 2464, 2209, 1983, 1872, 1825,
	2167, 498, 1514, 1855, 959, 730, 1489, 2210, 1841, 730,
	2215, 1993, 1743, 1257, 1969, 498, 973, 507, 1979, 1980,
	2035, 498, 498, 526, 525, 2404, 539, 1196, 3064, 506,
	1867, 2289, 1259, 2417, 197, 1700, 498, 3157, 2843, 498,
	1707, 2029, 1707, 2029, 2463, 903, 3180, 2555, 1707, 2029,
	1284, 1580, 513, 505, 2399, 1511, 3065, 518, 1861, 2515,
	2015, 727, 510, 2517, 749, 1497, 498, 2022, 498, 1944,
	498, 1934, 512, 498, 1914, 498, 3032, 498, 2021, 498,
	498, 1943, 498, 959, 959, 959, 2045, 950, 959, 1925,
	2002, 1960, 730, 2387, 2036, 498, 2050, 498, 1269, 2005,
	2007, 1528, 1397, 2061, 2685, 2063, 508, 2051, 1469, 1964,
	1965, 2013, 2125, 2126, 1952, 1953, 1685, 1996, 1519, 2020,
	1640, 1226, 540, 3148, 729, 202, 1207, 886, 2386, 1997,
	2021, 2037, 2087, 1861, 2508, 1737, 1959, 202, 2211, 1812,
	2105, 886, 2105, 3173, 517, 2844, 2213, 1735, 1701, 887,
	542, 2039, 934, 896, 2123, 1086, 895, 886, 514, 1489,
	2121, 2957, 1063, 931, 498, 537, 2057, 1515, 2136, 934,
	1615, 2030, 2032, 2033, 2034, 2911, 1270, 2669, 1482, 2922,
	931, 1483, 2152, 1864, 2116, 3120, 129, 478, 2979, 930,
	2907, 481, 1997, 1212, 932, 2128, 2139, 129, 539, 1702,
	538, 203, 1365, 973, 2252, 498, 930, 2678, 2109, 1989,
	2511, 932, 2118, 203, 2119, 498, 2120, 498, 2122, 1599,
	1963, 528, 2114, 1603, 1156, 2129, 704, 1236, 2205, 1978,
	1195, 2833, 2138, 541, 498, 498, 498, 516, 498, 1482,
	2148, 1271, 1483, 536, 729, 1837, 3147, 1305, 726, 1720,
	2389, 1829, 2156, 1997, 2157, 2748, 1489, 498, 2830, 2738,
	1192, 2150, 2755, 1810, 1813, 1484, 1200, 1451, 1243, 529,
	2391, 1213, 3119, 1716, 1717, 1237, 1214, 1486, 1234, 1400,
	1401, 1295, 3181, 1521, 2906, 2083, 1455, 1581, 205, 2153,
	1423, 1615, 1615, 2155, 3156, 3121, 3154, 2510, 2831, 2880,
	205, 1520, 204, 1212, 2164, 530, 1501, 531, 2878, 2390,
	1809, 2507, 2097, 1212, 204, 1458, 2184, 2095, 3171, 1548,
	1482, 1448, 542, 1483, 1505, 1190, 1484, 1488, 1517, 1178,
	501, 1455, 2912, 1961, 1294, 2795, 2422, 537, 1486, 2206,
	200, 1527, 2231, 2232, 511, 3186, 2426, 1456, 1707, 1704,
	1495, 1496, 200, 2966, 2965, 498, 2241, 2848, 2947, 509,
	1458, 3024, 1692, 3122, 2847, 1502, 2654, 2371, 2186, 2188,
	2367, 3073, 538, 2098, 2908, 198, 2096, 2609, 1453, 3172,
	1570, 1213, 507, 1557, 2509, 1556, 1214, 198, 1488, 1552,
	1547, 1213, 1456, 2553, 506, 1294, 1214, 1755, 2023, 1741,
	1688, 2348, 1365, 2714, 2882, 541, 2337, 1484, 201, 3174,
	2948, 1454, 1489, 2377, 1715, 536, 1293, 513, 199, 1486,
	201, 2376, 518, 1811, 1690, 2197, 2204, 510, 606, 2826,
	199, 1506, 2827, 1457, 2318, 1958, 1957, 512, 1691, 2393,
	1224, 973, 691, 2068, 1295, 2067, 2321, 2330, 2085, 2696,
	1451, 2328, 2329, 727, 2431, 1123, 730, 498, 1112, 1111,
	498, 2177, 738, 2178, 3161, 2829, 2796, 498, 2868, 1488,
	498, 498, 973, 1489, 2945, 2832, 2421, 1293, 1457, 3185,
	498, 498, 498, 2247, 2351, 1615, 498, 2349, 1756, 498,
	2801, 1121, 1507, 1508, 2344, 2846, 498, 498, 498, 498,
	498, 1503, 2610, 583, 2352, 2353, 2946, 1244, 2611, 2624,
	498, 576, 36, 3, 1455, 1877, 599, 498, 3163, 2342,
	2927, 2343, 691, 2345, 2368, 2024, 2025, 1504, 2794, 498,
	959, 692, 2693, 498, 2360, 2355, 2310, 1485, 575, 35,
	973, 2537, 738, 1458, 498, 2313, 2314, 2315, 2483, 2339,
	973, 574, 32, 2273, 1489, 2040, 2216, 973, 2154, 2322,
	2048, 1453, 2018, 2372, 1538, 2398, 1476, 1283, 1187, 498,
	2828, 498, 2311, 498, 2427, 1456, 959, 498, 959, 959,
	959, 1480, 2394, 2350, 2395, 2181, 498, 2180, 498, 2176,
	573, 79, 498, 2158, 1454, 884, 2439, 498, 1485, 498,
	2362, 2242, 1724, 1282, 1509, 2409, 498, 572, 78, 1734,
	2336, 692, 2411, 2877, 2412, 1098, 604, 605, 2392, 569,
	23, 1487, 2405, 498, 498, 2359, 2470, 1673, 959, 1266,
	2458, 2415, 2325, 1264, 2124, 2459, 2400, 2364, 1122, 1254,
	2332, 2333, 1997, 1408, 2338, 498, 1487, 2491, 934, 2436,
	2416, 2410, 2378, 2403, 2381, 1876, 934, 934, 2445, 931,
	934, 1457, 693, 1098, 2457, 2502, 2432, 931, 931, 1252,
	2441, 931, 2428, 498, 1120, 2435, 1523, 570, 24, 1485,
	568, 30, 1532, 1523, 934, 930, 582, 36, 498, 938,
	932, 1250, 485, 930, 930, 931, 2401, 930, 932, 932,
	2402, 1540, 932, 2501, 597, 598, 567, 21, 565, 20,
	2495, 566, 19, 2876, 35, 2469, 2476, 555, 15, 1248,
	129, 930, 556, 16, 1246, 1544, 932, 32, 730, 2482,
	1094, 973, 1240, 1119, 2691, 736, 804, 691, 889, 891,
	3115, 973, 693, 498, 2540, 1281, 1526, 2335, 1733, 3070,
	2373, 564, 57, 2467, 2819, 694, 2673, 738, 2379, 2671,
	2383, 2384, 2467, 2512, 2513, 2514, 79, 2653, 2477, 2478,
	2479, 1265, 2480, 2481, 2452, 1263, 2518, 479, 2549, 2550,
	2551, 1253, 496, 78, 2450, 2523, 2101, 2575, 2089, 519,
	2525, 2088, 695, 737, 2086, 23, 545, 563, 56, 589,
	596, 2082, 545, 479, 1594, 589, 611, 1593, 1591, 2576,
	2621, 1251, 618, 1589, 554, 55, 1586, 562, 12, 1584,
	638, 2545, 1582, 1537, 1535, 1524, 692, 553, 50, 1769,
	2579, 560, 47, 1249, 498, 694, 1513, 1380, 1713, 2564,
	1510, 1385, 2556, 2558, 2559, 2571, 498, 1769, 2589, 2565,
	1498, 1490, 973, 24, 2454, 2578, 30, 2642, 2993, 561,
	48, 1247, 3158, 552, 49, 2586, 1245, 2613, 2637, 2901,
	2489, 1297, 695, 2588, 1239, 1118, 2900, 2195, 2617, 1711,
	486, 487, 21, 912, 20, 559, 7, 19, 558, 6,
	2682, 2503, 2995, 15, 557, 38, 2614, 2009, 16, 551,
	37, 2625, 1639, 545, 545, 913, 1992, 2688, 2622, 129,
	2723, 933, 1992, 2863, 2627, 2628, 2052, 2008, 2630, 2047,
	3034, 498, 498, 2006, 498, 1772, 2041, 57, 2017, 498,
	1678, 1679, 2692, 2159, 2838, 496, 496, 496, 2644, 965,
	496, 973, 584, 973, 2703, 1238, 959, 2196, 3011, 2802,
	479, 1065, 1298, 2657, 2026, 2012, 1301, 693, 489, 488,
	1307, 1308, 2044, 498, 2014, 3069, 2874, 2648, 2108, 2090,
	2727, 2716, 2081, 56, 1945, 1683, 1607, 3169, 2490, 2720,
	3184, 1615, 2021, 959, 498, 498, 914, 2281, 2282, 2719,
	55, 1377, 1612, 12, 2742, 498, 1307, 1308, 973, 498,
	498, 973, 498, 50, 2697, 490, 491, 47, 1873, 2679,
	498, 607, 1309, 2171, 2170, 2662, 2706, 2705, 973, 2560,
	2633, 2700, 1229, 1639, 1639, 2715, 2698, 1228, 2721, 2729,
	2499, 2672, 2710, 2674, 2712, 48, 934, 2770, 2717, 49,
	2752, 2171, 2728, 1307, 1308, 2172, 2757, 931, 735, 2749,
	694, 2733, 2745, 1878, 1853, 2772, 1268, 2740, 2741, 1267,
	2552, 7, 1375, 498, 6, 2766, 1373, 2939, 1310, 2892,
	38, 2750, 2731, 930, 934, 37, 2707, 1997, 932, 2448,
	2446, 2406, 2094, 2753, 1561, 931, 1280, 695, 1279, 1262,
	1258, 1255, 1241, 1199, 1987, 1309, 1686, 897, 702, 2955,
	1274, 2670, 3080, 689, 2385, 1723, 1758, 1242, 1725, 2758,
	2341, 930, 1966, 1612, 1612, 3063, 932, 2780, 2251, 2114,
	3017, 2921, 498, 1875, 1393, 53, 773, 2440, 1615, 2442,
	2443, 2444, 973, 854, 973, 2820, 2656, 2075, 2074, 976,
	1695, 778, 498, 498, 498, 2793, 1905, 1611, 781, 1613,
	784, 783, 782, 1614, 1395, 780, 2325, 498, 1610, 2084,
	2112, 680, 498, 1699, 498, 1835, 1870, 498, 498, 498,
	498, 498, 934, 2246, 498, 498, 959, 2809, 1390, 2493,
	973, 2807, 2818, 931, 959, 2839, 754, 2841, 2808, 2804,
	2805, 775, 498, 498, 1868, 2813, 1185, 753, 2346, 2462,
	2647, 1615, 2887, 1754, 2187, 1751, 959, 515, 2278, 930,
	1151, 1931, 2864, 1924, 932, 1920, 498, 1639, 1286, 1366,
	2113, 2870, 1221, 2810, 757, 498, 498, 959, 959, 2858,
	1833, 2884, 1382, 2879, 2221, 2886, 2357, 2471, 2145, 1762,
	1926, 2747, 911, 496, 1093, 2873, 496, 1615, 1615, 496,
	496, 496, 910, 909, 965, 2893, 3086, 1116, 3083, 2910,
	2459, 1098, 2909, 496, 2891, 1615, 1615, 2885, 2859, 2895,
	973, 2862, 1689, 496, 496, 496, 496, 965, 2913, 2165,
	2896, 1359, 769, 2326, 2434, 2883, 2359, 1091, 3033, 1358,
	893, 3026, 2890, 1211, 1210, 2933, 1615, 1209, 2816, 2370,
	1997, 3179, 2667, 171, 168, 2662, 973, 1612, 170, 2803,
	498, 169, 498, 2420, 973, 498, 82, 638, 2850, 596,
	34, 2918, 33, 498, 2929, 934, 2855, 107, 2174, 973,
	106, 496, 105, 104, 103, 102, 931, 2942, 101, 2662,
	2934, 2935, 100, 99, 98, 934, 97, 96, 2940, 1997,
	95, 2662, 2960, 94, 1198, 93, 931, 2959, 92, 2961,
	2937, 91, 930, 2938, 934, 638, 90, 932, 2806, 498,
	89, 498, 2467, 88, 959, 931, 2958, 87, 86, 498,
	85, 84, 930, 634, 631, 81, 80, 932, 31, 26,
	111, 2980, 112, 2982, 25, 77, 76, 2986, 934, 2991,
	29, 930, 973, 2842, 2817, 18, 932, 11, 17, 931,
	934, 2999, 22, 2852, 2853, 2968, 134, 133, 132, 131,
	2997, 931, 498, 496, 2719, 2851, 2992, 2996, 498, 130,
	1839, 14, 2856, 13, 126, 930, 498, 128, 2872, 496,
	932, 3007, 2985, 127, 125, 124, 123, 930, 1380, 3010,
	3029, 3023, 932, 2990, 2459, 3015, 122, 121, 10, 3022,
	8, 110, 3020, 9, 498, 498, 1997, 2904, 2505, 70,
	498, 71, 27, 43, 42, 41, 2662, 109, 162, 3044,
	3046, 959, 161, 160, 159, 3031, 498, 155, 154, 158,
	156, 959, 959, 157, 1930, 498, 153, 498, 120, 498,
	2969, 2970, 164, 163, 3066, 3051, 3050, 151, 3048, 2662,
	148, 2662, 147, 3056, 150, 2662, 152, 149, 498, 3057,
	3058, 498, 1615, 498, 3076, 973, 3059, 146, 165, 119,
	118, 117, 3089, 3090, 2739, 934, 116, 115, 114, 5,
	3092, 3094, 2, 3093, 3088, 3095, 931, 1, 3082, 0,
	0, 3078, 0, 3100, 0, 0, 0, 0, 0, 498,
	0, 0, 3098, 0, 0, 0, 2327, 0, 934, 0,
	934, 3097, 930, 2941, 934, 3112, 0, 932, 3114, 931,
	0, 931, 498, 3113, 0, 931, 3127, 3138, 0, 3139,
	498, 3140, 0, 0, 0, 0, 0, 2354, 0, 0,
	0, 0, 3146, 0, 3143, 930, 498, 930, 0, 0,
	932, 930, 932, 3144, 3145, 0, 932, 0, 3141, 3153,
	3037, 3152, 3155, 0, 0, 2994, 0, 0, 3159, 0,
	3160, 926, 0, 618, 3165, 3166, 3162, 0, 545, 1926,
	1926, 3088, 3168, 0, 0, 0, 0, 0, 0, 0,
	0, 3176, 0, 0, 0, 3175, 0, 0, 0, 1467,
	0, 933, 0, 3183, 496, 3182, 2833, 0, 0, 0,
	3187, 3188, 0, 0, 0, 2424, 0, 492, 3189, 0,
	0, 0, 2424, 0, 3192, 3193, 0, 0, 3196, 2662,
	0, 0, 3198, 2830, 0, 0, 2823, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2821,
	0, 0, 0, 1639, 2825, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3038, 2860, 0, 0,
	0, 0, 0, 2831, 0, 0, 2662, 0, 1926, 1926,
	1926, 3060, 0, 3061, 0, 0, 2114, 3055, 934, 1307,
	1308, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 2824, 0, 0, 0, 0, 0, 3077, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 0, 2897, 2898,
	0, 1615, 0, 0, 0, 930, 0, 0, 0, 0,
	932, 0, 0, 0, 0, 934, 0, 479, 0, 0,
	0, 1309, 0, 1612, 0, 0, 931, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 496, 1543, 0, 0, 0, 3137, 0,
	942, 479, 930, 1615, 0, 969, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1566, 1566,
	0, 0, 0, 2536, 0, 496, 2562, 496, 0, 496,
	1639, 0, 0, 545, 2826, 0, 2568, 2827, 1332, 1333,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1930, 1930, 0, 0, 0, 0, 0,
	2829, 0, 0, 0, 0, 1337, 1338, 1339, 0, 0,
	2832, 0, 1615, 638, 0, 479, 1065, 589, 2218, 2219,
	0, 0, 0, 0, 0, 0, 0, 479, 1065, 0,
	0, 965, 496, 1639, 0, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1612, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 638, 0, 0, 0, 0, 496, 2650, 0, 1639,
	1639, 479, 496, 0, 496, 0, 496, 0, 496, 0,
	496, 0, 1930, 1930, 1930, 0, 0, 1639, 1639, 0,
	1739, 0, 1740, 0, 0, 2828, 0, 0, 0, 0,
	0, 496, 0, 0, 0, 1926, 1926, 2304, 2305, 2306,
	0, 1336, 0, 1612, 0, 0, 0, 0, 1639, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1612,
	1612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1612, 1612, 0,
	0, 0, 0, 0, 1926, 1926, 1926, 1926, 1926, 1926,
	1926, 1926, 1926, 1926, 1926, 1926, 1926, 1926, 1926, 1926,
	1926, 1926, 1926, 0, 1926, 0, 0, 0, 1612, 0,
	0, 0, 0, 971, 0, 0, 1058, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 1107, 0, 0, 0, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0,
	0, 0, 0, 0, 1377, 0, 0, 1450, 1130, 1130,
	1130, 969, 0, 618, 0, 545, 0, 0, 0, 0,
	0, 0, 578, 0, 0, 0, 0, 0, 0, 0,
	933, 0, 0, 40, 0, 0, 0, 0, 0, 0,
	545, 0, 0, 0, 0, 0, 0, 933, 44, 545,
	0, 0, 496, 1307, 1308, 0, 0, 0, 0, 2000,
	0, 0, 0, 0, 0, 0, 1182, 496, 0, 0,
	0, 0, 0, 0, 0, 496, 0, 577, 1310, 0,
	0, 0, 0, 0, 0, 0, 0, 496, 0, 0,
	0, 0, 0, 0, 1639, 0, 0, 0, 0, 2812,
	0, 496, 0, 0, 0, 1309, 579, 479, 2058, 1930,
	1930, 0, 0, 1329, 59, 581, 0, 0, 0, 60,
	0, 0, 2071, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 2533, 2534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 0, 2000, 63, 545, 0, 496, 2531, 1273, 496,
	0, 496, 0, 496, 0, 496, 496, 0, 965, 0,
	0, 0, 1332, 1333, 1334, 1335, 0, 0, 0, 0,
	0, 596, 1315, 2000, 1612, 0, 0, 0, 1930, 1930,
	1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
	1930, 1930, 1930, 1930, 1930, 1930, 1930, 0, 1930, 1337,
	1338, 1339, 0, 2590, 2591, 2592, 2593, 2594, 2595, 2596,
	2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606,
	2607, 2608, 0, 2612, 0, 2919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	589, 0, 0, 0, 0, 64, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2919, 0, 0, 0, 0, 0, 0, 0, 1772,
	0, 0, 0, 138, 66, 0, 67, 0, 0, 0,
	0, 496, 0, 0, 1772, 0, 0, 0, 0, 0,
	0, 1065, 0, 1065, 172, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 580, 0, 0, 108, 0,
	496, 496, 496, 0, 496, 1336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 578, 0,
	174, 0, 1331, 496, 0, 0, 0, 0, 209, 40,
	0, 0, 0, 1639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 1058, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 577, 0, 0, 0, 167, 0, 1474,
	0, 0, 0, 0, 0, 1639, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 579, 0, 0, 0, 0, 0, 0, 0,
	59, 581, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 1065, 0, 1612, 0, 1926, 0, 0, 0, 0,
	0, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1926, 0, 1639, 0, 0, 0, 0, 0,
	1772, 0, 0, 0, 1067, 1612, 1071, 0, 1077, 0,
	2281, 2282, 0, 2299, 2300, 2301, 0, 0, 0, 960,
	0, 0, 974, 974, 0, 0, 0, 0, 2763, 0,
	0, 0, 0, 0, 808, 0, 933, 0, 0, 0,
	0, 0, 0, 0, 933, 933, 0, 0, 933, 0,
	0, 0, 0, 545, 0, 0, 545, 0, 0, 0,
	0, 0, 0, 545, 0, 0, 545, 545, 1541, 0,
	2296, 0, 1467, 0, 0, 0, 496, 2000, 2366, 0,
	0, 64, 2000, 0, 1612, 2366, 0, 0, 1926, 0,
	0, 0, 2000, 2366, 2000, 2366, 2366, 0, 0, 0,
	0, 0, 1573, 0, 1573, 0, 496, 0, 0, 138,
	66, 0, 67, 1543, 0, 1183, 0, 0, 0, 0,
	0, 0, 1188, 0, 0, 496, 0, 0, 0, 965,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 2287,
	496, 580, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 741, 0, 0, 0, 741, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1566, 174, 1566, 0, 496,
	0, 0, 0, 496, 0, 0, 0, 1676, 0, 0,
	0, 0, 496, 0, 496, 0, 0, 2302, 965, 0,
	0, 0, 0, 2000, 0, 545, 0, 0, 0, 0,
	0, 0, 2000, 0, 0, 0, 173, 0, 0, 1930,
	0, 0, 0, 0, 0, 166, 2297, 0, 0, 2487,
	1065, 1722, 0, 167, 0, 0, 0, 1728, 0, 1729,
	0, 1730, 0, 1731, 2926, 1732, 961, 0, 0, 975,
	975, 1065, 1307, 1308, 137, 0, 1930, 0, 1350, 1351,
	1352, 0, 0, 0, 0, 0, 1742, 0, 0, 0,
	0, 0, 1360, 1361, 1362, 1363, 1364, 1310, 0, 2522,
	1356, 2950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	1379, 0, 0, 0, 1309, 1391, 0, 0, 0, 2298,
	0, 0, 1329, 0, 0, 2281, 2282, 0, 2299, 2300,
	2301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2762, 0, 0, 0, 0, 960, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2573,
	0, 0, 1930, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 960,
	960, 1332, 1333, 1334, 1335, 2296, 960, 3014, 0, 0,
	0, 1315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1347, 1357, 0, 0, 1337, 1338,
	1339, 0, 2293, 2294, 2295, 0, 0, 0, 0, 2292,
	2290, 2291, 2283, 2284, 2285, 2286, 2288, 2289, 0, 0,
	0, 0, 0, 0, 933, 0, 0, 1444, 1444, 1444,
	545, 0, 0, 0, 2287, 0, 0, 0, 0, 0,
	0, 1345, 545, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 1984, 0, 0,
	0, 0, 2664, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2302, 0, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 2297, 0, 0, 1336, 0, 0, 2000, 1566, 0,
	1566, 0, 0, 0, 0, 496, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 961, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 2000,
	933, 2117, 0, 0, 1130, 0, 1130, 0, 1130, 0,
	969, 969, 0, 0, 0, 0, 961, 961, 0, 0,
	596, 596, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 2298, 965, 496, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 0, 1349,
	0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2781,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2175, 2293, 2294, 2295,
	0, 961, 0, 0, 2292, 2290, 2291, 2283, 2284, 2285,
	2286, 2288, 2289, 933, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 2183, 969, 2185, 0, 0,
	0, 0, 0, 1467, 0, 741, 741, 0, 2000, 2366,
	2000, 0, 0, 0, 0, 0, 0, 0, 2198, 0,
	0, 0, 2664, 1065, 0, 0, 0, 0, 2000, 0,
	2366, 0, 0, 1065, 1065, 496, 2000, 2366, 0, 0,
	496, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2664, 0, 1065, 2071,
	0, 0, 0, 0, 0, 0, 0, 0, 2664, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1752, 2000, 1757, 0, 0, 0, 0, 0, 1764,
	0, 2487, 2487, 0, 0, 0, 0, 0, 0, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 0, 1814, 0, 1816, 1817, 1818,
	1819, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 974, 0, 1842, 0, 0, 2140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 1379, 0, 974, 0, 1866, 2000, 0, 2366, 0,
	0, 2944, 209, 774, 74, 44, 0, 1307, 1308, 496,
	0, 0, 0, 2664, 0, 0, 0, 0, 0, 0,
	0, 0, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 0,
	0, 0, 1310, 0, 2141, 0, 1922, 0, 1933, 1935,
	1940, 0, 0, 0, 0, 0, 2664, 0, 2664, 0,
	0, 0, 2664, 0, 0, 496, 0, 496, 0, 1309,
	0, 2363, 0, 2142, 74, 1065, 960, 1329, 0, 0,
	0, 0, 581, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 960, 209, 0, 0, 960,
	0, 1107, 0, 0, 0, 960, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2573, 0,
	63, 2530, 0, 0, 545, 0, 0, 0, 0, 0,
	0, 0, 2944, 0, 0, 2419, 1332, 1333, 1334, 1335,
	974, 0, 0, 718, 0, 0, 1315, 0, 0, 960,
	960, 731, 2060, 0, 2062, 0, 0, 0, 0, 0,
	2000, 2366, 209, 0, 2437, 0, 496, 0, 0, 0,
	0, 0, 0, 1337, 1338, 1339, 0, 2449, 0, 2451,
	0, 0, 2366, 0, 0, 0, 0, 0, 921, 74,
	0, 1065, 0, 1065, 961, 496, 0, 0, 0, 0,
	0, 975, 0, 0, 1307, 1308, 0, 0, 0, 0,
	0, 0, 0, 0, 3074, 0, 0, 1065, 0, 496,
	975, 0, 64, 1330, 0, 0, 0, 974, 0, 1310,
	0, 0, 0, 0, 0, 0, 2664, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 66, 0, 67, 0, 2573, 1309, 0, 0, 0,
	0, 0, 0, 0, 1329, 0, 0, 0, 0, 2281,
	2282, 172, 2299, 2300, 2301, 0, 0, 0, 1065, 2526,
	1307, 1308, 580, 2664, 0, 108, 2000, 2542, 0, 1336,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 2944, 0, 0, 1310, 1331, 174, 2207, 0,
	974, 0, 961, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 961, 1332, 1333, 1334, 1335, 0, 0, 2296,
	0, 0, 1309, 1315, 0, 0, 0, 0, 0, 0,
	1329, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 1307, 1308, 0, 0, 0, 166, 975, 0, 0,
	1337, 1338, 1339, 0, 167, 0, 961, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 1310, 0, 0, 0,
	974, 0, 0, 0, 2200, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 974, 0, 2287, 1332,
	1333, 1334, 1335, 1309, 0, 0, 0, 0, 0, 1315,
	1330, 1329, 0, 0, 0, 0, 1320, 1318, 1319, 1311,
	1312, 1313, 1314, 1316, 1317, 0, 0, 2201, 2202, 0,
	0, 960, 0, 2208, 0, 0, 1337, 1338, 1339, 0,
	0, 0, 0, 974, 975, 0, 2302, 0, 0, 0,
	0, 0, 2222, 2223, 0, 0, 0, 0, 1866, 0,
	0, 0, 0, 0, 0, 0, 2230, 0, 0, 0,
	1332, 1333, 1334, 1335, 0, 2297, 1336, 0, 0, 0,
	1315, 0, 0, 0, 0, 0, 1330, 0, 0, 0,
	2249, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 74, 2262, 74, 0, 74, 0, 1337, 1338, 1339,
	960, 960, 960, 0, 0, 960, 0, 0, 0, 0,
	2704, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 1940, 1940, 1940, 1330, 2298, 0,
	0, 0, 731, 0, 0, 0, 1444, 0, 0, 1331,
	0, 0, 0, 0, 2331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2751, 0, 969, 0, 0, 0, 975, 0, 0,
	0, 2754, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314,
	1316, 1317, 74, 975, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 2388,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 2281, 2282, 961, 2299,
	2300, 2301, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 2293, 2294, 2295, 2541, 0, 0, 0, 2292, 2290,
	2291, 2283, 2284, 2285, 2286, 2288, 2289, 0, 0, 1320,
	1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2460, 0, 0, 0, 0, 0, 961, 961, 961,
	0, 0, 961, 2281, 2282, 0, 2299, 2300, 2301, 0,
	0, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 0,
	2854, 0, 0, 0, 0, 1107, 0, 0, 0, 1369,
	0, 0, 0, 0, 0, 2287, 0, 0, 741, 741,
	0, 0, 0, 0, 0, 0, 1378, 0, 0, 0,
	1384, 741, 0, 2296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2524, 0, 0,
	0, 1764, 0, 0, 0, 0, 0, 2528, 2529, 0,
	0, 2532, 0, 2302, 0, 2535, 0, 0, 0, 0,
	0, 0, 0, 0, 2539, 2281, 2282, 0, 2299, 2300,
	2301, 0, 0, 2546, 0, 0, 2331, 975, 0, 0,
	0, 0, 2297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2287, 0, 0, 0, 2566, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2580, 2581, 0, 2582, 2583, 2584, 0,
	0, 2585, 0, 0, 0, 2296, 0, 2587, 0, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2302, 0, 0, 0, 2951, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2615, 2616,
	0, 0, 0, 74, 0, 2298, 1465, 0, 1468, 2297,
	0, 0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342,
	1350, 1351, 1352, 0, 2632, 0, 0, 960, 0, 0,
	2987, 0, 2989, 0, 2287, 0, 0, 974, 0, 1310,
	0, 0, 1356, 0, 0, 0, 0, 974, 0, 0,
	0, 0, 0, 0, 974, 0, 0, 0, 2303, 0,
	0, 0, 2658, 0, 0, 0, 1309, 0, 0, 0,
	0, 0, 0, 960, 1329, 960, 960, 960, 0, 0,
	0, 1326, 2302, 0, 2681, 0, 0, 0, 0, 0,
	0, 0, 2298, 0, 0, 0, 2686, 0, 0, 0,
	0, 2687, 0, 0, 0, 0, 2690, 0, 2293, 2294,
	2295, 2297, 0, 0, 0, 2292, 2290, 2291, 2283, 2284,
	2285, 2286, 2288, 2289, 0, 960, 0, 0, 0, 0,
	0, 3042, 0, 1332, 1333, 1334, 1335, 0, 0, 0,
	0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 975, 0, 0, 0, 0,
	3062, 0, 2730, 0, 0, 0, 1347, 1357, 0, 0,
	1337, 1338, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3079, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 2298, 2293, 2294, 2295, 0, 1324,
	1325, 0, 2292, 2290, 2291, 2283, 2284, 2285, 2286, 2288,
	2289, 0, 0, 1345, 0, 0, 0, 0, 2759, 2760,
	1330, 0, 0, 0, 2764, 2765, 0, 0, 974, 2768,
	2769, 0, 0, 0, 0, 0, 2773, 0, 974, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 2778, 0, 0, 0, 0,
	0, 0, 2782, 0, 975, 0, 0, 0, 0, 0,
	0, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	961, 0, 961, 961, 961, 0, 0, 2293, 2294, 2295,
	0, 0, 0, 1331, 2292, 2290, 2291, 2283, 2284, 2285,
	2286, 2288, 2289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 0, 0, 974,
	0, 2840, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	718, 0, 0, 718, 718, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 0, 0, 1321, 1322, 1328, 1327,
	1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314,
	1316, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 974, 0,
	974, 1832, 0, 960, 0, 975, 0, 0, 0, 2914,
	2915, 2916, 0, 0, 731, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1378, 0, 0,
	0, 1378, 0, 0, 0, 2924, 2925, 0, 0, 0,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 2932,
	0, 0, 0, 0, 0, 974, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 974, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2967, 0, 921, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2978, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 1307, 1308, 0,
	1340, 1341, 1342, 1350, 1351, 1352, 0, 0, 0, 74,
	0, 74, 0, 0, 0, 1343, 0, 0, 0, 974,
	0, 974, 1310, 0, 0, 1356, 0, 3025, 0, 0,
	3028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 74, 975, 74, 1309,
	961, 0, 0, 0, 0, 3041, 0, 1329, 0, 0,
	0, 0, 0, 960, 1326, 0, 0, 974, 0, 0,
	74, 960, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 960, 960, 1332, 1333, 1334, 1335,
	0, 0, 975, 0, 0, 0, 1315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3111, 3111, 0, 0, 0, 0, 0, 1347,
	1357, 0, 0, 1337, 1338, 1339, 0, 974, 0, 3128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1353, 1354, 0, 0, 0, 0,
	0, 0, 1324, 1325, 0, 0, 3111, 0, 0, 0,
	0, 0, 0, 974, 0, 0, 1345, 0, 0, 0,
	0, 974, 0, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 1355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 975, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 3111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 975, 0, 1331, 1832, 961, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1378, 1348,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 960, 960,
	0, 0, 0, 0, 0, 0, 1346, 0, 0, 1321,
	1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311,
	1312, 1313, 1314, 1316, 1317, 0, 0, 0, 0, 2789,
	975, 0, 974, 2788, 0, 0, 0, 0, 975, 0,
	0, 0, 0, 921, 0, 0, 0, 0, 0, 0,
	0, 921, 921, 975, 0, 921, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 961, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1852, 0, 801, 760, 761, 758, 759,
	771, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 1849, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 797, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 500, 295, 829, 297, 823, 822,
	750, 298, 0, 299, 0, 300, 1850, 0, 301, 821,
	303, 0, 304, 74, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 921, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 752,
	751, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 747, 0, 867, 768, 851, 824, 368, 369, 0,
	798, 799, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 879, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 880, 384, 245, 385, 921, 386, 387,
	388, 389, 390, 391, 817, 392, 393, 74, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 756, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 790, 791, 792, 793, 423, 429, 430, 844, 431,
	412, 413, 432, 871, 433, 815, 794, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 855, 440, 441, 442,
	881, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 456, 457, 882, 883, 766, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 845, 467, 0,
	795, 468, 469, 470, 255, 874, 1848, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 1851, 0, 0, 0, 0,
	921, 0, 772, 1847, 0, 0, 0, 0, 770, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1832, 259,
	260, 261, 262, 977, 263, 978, 979, 980, 981, 215,
	982, 983, 984, 985, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 986, 270, 271, 272, 273, 274,
	275, 276, 987, 988, 277, 220, 221, 222, 989, 278,
	223, 990, 962, 991, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 992, 288, 0, 289, 290, 993,
	856, 291, 292, 994, 995, 997, 996, 998, 999, 1000,
	293, 294, 500, 295, 296, 297, 224, 225, 1001, 298,
	1002, 299, 1003, 300, 1004, 1005, 301, 302, 303, 1006,
	304, 1007, 305, 306, 1008, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 1009, 857, 1010, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	1011, 322, 1012, 1013, 858, 323, 1014, 324, 230, 1015,
	231, 1016, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 860, 1017, 238, 332, 0, 0, 0, 1018, 331,
	333, 340, 1019, 859, 334, 235, 336, 335, 337, 338,
	339, 236, 1020, 237, 1021, 341, 861, 862, 342, 343,
	344, 863, 345, 346, 0, 0, 347, 348, 349, 1022,
	351, 350, 1023, 352, 239, 864, 353, 354, 865, 1024,
	355, 356, 1025, 1026, 357, 0, 358, 937, 936, 359,
	360, 362, 363, 361, 866, 364, 365, 367, 366, 1027,
	1028, 867, 1029, 240, 241, 368, 369, 1030, 370, 371,
	1031, 1032, 372, 373, 1033, 1034, 374, 242, 868, 375,
	869, 243, 376, 377, 378, 379, 380, 381, 382, 1035,
	383, 244, 384, 245, 385, 1036, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 1037, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 1038,
	406, 870, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 1039, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 1040, 431, 412, 413,
	432, 871, 433, 248, 434, 435, 1041, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 1042,
	446, 447, 1043, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 1044, 250, 251, 252, 455, 1045, 1046, 456,
	457, 253, 254, 1047, 458, 459, 0, 460, 461, 1048,
	1049, 462, 463, 464, 466, 1050, 467, 1051, 465, 468,
	469, 470, 255, 256, 1052, 472, 471, 257, 1053, 1054,
	1055, 1056, 473, 474, 258, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 1971, 0,
	0, 0, 0, 0, 0, 0, 0, 1972, 259, 260,
	261, 262, 977, 263, 978, 979, 980, 981, 215, 982,
	983, 984, 985, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 986, 270, 271, 272, 273, 274, 275,
	276, 987, 988, 277, 220, 221, 222, 989, 278, 223,
	990, 962, 991, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 992, 288, 0, 289, 290, 993, 856,
	291, 292, 994, 995, 997, 996, 998, 999, 1000, 293,
	294, 500, 295, 296, 297, 224, 225, 1001, 298, 1002,
	299, 1003, 300, 1004, 1005, 301, 302, 303, 1006, 304,
	1007, 305, 306, 1008, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 1009, 857, 1010, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 1011,
	322, 1012, 1013, 858, 323, 1014, 324, 230, 1015, 231,
	1016, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	860, 1017, 238, 332, 0, 0, 0, 1018, 331, 333,
	340, 1019, 859, 334, 235, 336, 335, 337, 338, 339,
	236, 1020, 237, 1021, 341, 861, 862, 342, 343, 344,
	863, 345, 346, 0, 0, 347, 348, 349, 1022, 351,
	350, 1023, 352, 239, 864, 353, 354, 865, 1024, 355,
	356, 1025, 1026, 357, 0, 358, 937, 936, 359, 360,
	362, 363, 361, 866, 364, 365, 367, 366, 1027, 1028,
	867, 1029, 240, 241, 368, 369, 1030, 370, 371, 1031,
	1032, 372, 373, 1033, 1034, 374, 242, 868, 375, 869,
	243, 376, 377, 378, 379, 380, 381, 382, 1035, 383,
	244, 384, 245, 385, 1036, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 1037, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 1038, 406,
	870, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 1039, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 1040, 431, 412, 413, 432,
	871, 433, 248, 434, 435, 1041, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 1042, 446,
	447, 1043, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 1044, 250, 251, 252, 455, 1045, 1046, 456, 457,
	253, 254, 1047, 458, 459, 0, 460, 461, 1048, 1049,
	462, 463, 464, 466, 1050, 467, 1051, 465, 468, 469,
	470, 255, 256, 1052, 472, 471, 257, 1053, 1054, 1055,
	1056, 473, 474, 258, 475, 476, 477, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2811, 259, 260,
	261, 262, 977, 263, 978, 979, 980, 981, 215, 982,
	983, 984, 985, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 986, 270, 271, 272, 273, 274, 275,
	276, 987, 988, 277, 220, 221, 222, 989, 278, 223,
	990, 962, 991, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 992, 288, 0, 289, 290, 993, 856,
	291, 292, 994, 995, 997, 996, 998, 999, 1000, 293,
	294, 500, 295, 296, 297, 224, 225, 1001, 298, 1002,
	299, 1003, 300, 1004, 1005, 301, 302, 303, 1006, 304,
	1007, 305, 306, 1008, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 1009, 857, 1010, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 1011,
	322, 1012, 1013, 858, 323, 1014, 324, 230, 1015, 231,
	1016, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	860, 1017, 238, 332, 0, 0, 0, 1018, 331, 333,
	340, 1019, 859, 334, 235, 336, 335, 337, 338, 339,
	236, 1020, 237, 1021, 341, 861, 862, 342, 343, 344,
	863, 345, 346, 0, 0, 347, 348, 349, 1022, 351,
	350, 1023, 352, 239, 864, 353, 354, 865, 1024, 355,
	356, 1025, 1026, 357, 0, 358, 937, 936, 359, 360,
	362, 363, 361, 866, 364, 365, 367, 366, 1027, 1028,
	867, 1029, 240, 241, 368, 369, 1030, 370, 371, 1031,
	1032, 372, 373, 1033, 1034, 374, 242, 868, 375, 869,
	243, 376, 377, 378, 379, 380, 381, 382, 1035, 383,
	244, 384, 245, 385, 1036, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 1037, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 1038, 406,
	870, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 1039, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 1040, 431, 412, 413, 432,
	871, 433, 248, 434, 435, 1041, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 1042, 446,
	447, 1043, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 1044, 250, 251, 252, 455, 1045, 1046, 456, 457,
	253, 254, 1047, 458, 459, 0, 460, 461, 1048, 1049,
	462, 463, 464, 466, 1050, 467, 1051, 465, 468, 469,
	470, 255, 256, 1052, 472, 471, 257, 1053, 1054, 1055,
	1056, 473, 474, 258, 475, 476, 477, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2920, 259, 260, 261, 262, 977, 263, 978,
	979, 980, 981, 215, 982, 983, 984, 985, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 986, 270,
	271, 272, 273, 274, 275, 276, 987, 988, 277, 220,
	221, 222, 989, 278, 223, 990, 962, 991, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 992, 288,
	0, 289, 290, 993, 856, 291, 292, 994, 995, 997,
	996, 998, 999, 1000, 293, 294, 500, 295, 296, 297,
	224, 225, 1001, 298, 1002, 299, 1003, 300, 1004, 1005,
	301, 302, 303, 1006, 304, 1007, 305, 306, 1008, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 1009,
	857, 1010, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 1011, 322, 1012, 1013, 858, 323,
	1014, 324, 230, 1015, 231, 1016, 325, 326, 327, 328,
	329, 330, 232, 233, 234, 860, 1017, 238, 332, 0,
	0, 0, 1018, 331, 333, 340, 1019, 859, 334, 235,
	336, 335, 337, 338, 339, 236, 1020, 237, 1021, 341,
	861, 862, 342, 343, 344, 863, 345, 346, 0, 0,
	347, 348, 349, 1022, 351, 350, 1023, 352, 239, 864,
	353, 354, 865, 1024, 355, 356, 1025, 1026, 357, 0,
	358, 937, 936, 359, 360, 362, 363, 361, 866, 364,
	365, 367, 366, 1027, 1028, 867, 1029, 240, 241, 368,
	369, 1030, 370, 371, 1031, 1032, 372, 373, 1033, 1034,
	374, 242, 868, 375, 869, 243, 376, 377, 378, 379,
	380, 381, 382, 1035, 383, 244, 384, 245, 385, 1036,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 1037,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 1038, 406, 870, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	1039, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	1040, 431, 412, 413, 432, 871, 433, 248, 434, 435,
	1041, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 1042, 446, 447, 1043, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 1044, 250, 251, 252,
	455, 1045, 1046, 456, 457, 253, 254, 1047, 458, 459,
	0, 460, 461, 1048, 1049, 462, 463, 464, 466, 1050,
	467, 1051, 465, 468, 469, 470, 255, 256, 1052, 472,
	471, 257, 1053, 1054, 1055, 1056, 473, 474, 258, 475,
	476, 477, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2569, 259, 260,
	261, 262, 977, 263, 978, 979, 980, 981, 215, 982,
	983, 984, 985, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 986, 270, 271, 272, 273, 274, 275,
	276, 987, 988, 277, 220, 221, 222, 989, 278, 223,
	990, 962, 991, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 992, 288, 0, 289, 290, 993, 856,
	291, 292, 994, 995, 997, 996, 998, 999, 1000, 293,
	294, 500, 295, 296, 297, 224, 225, 1001, 298, 1002,
	299, 1003, 300, 1004, 1005, 301, 302, 303, 1006, 304,
	1007, 305, 306, 1008, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 1009, 857, 1010, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 1011,
	322, 1012, 1013, 858, 323, 1014, 324, 230, 1015, 231,
	1016, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	860, 1017, 238, 332, 0, 0, 0, 1018, 331, 333,
	340, 1019, 859, 334, 235, 336, 335, 337, 338, 339,
	236, 1020, 237, 1021, 341, 861, 862, 342, 343, 344,
	863, 345, 346, 0, 0, 347, 348, 349, 1022, 351,
	350, 1023, 352, 239, 864, 353, 354, 865, 1024, 355,
	356, 1025, 1026, 357, 0, 358, 937, 936, 359, 360,
	362, 363, 361, 866, 364, 365, 367, 366, 1027, 1028,
	867, 1029, 240, 241, 368, 369, 1030, 370, 371, 1031,
	1032, 372, 373, 1033, 1034, 374, 242, 868, 375, 869,
	243, 376, 377, 378, 379, 380, 381, 382, 1035, 383,
	244, 384, 245, 385, 1036, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 1037, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 1038, 406,
	870, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 1039, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 1040, 431, 412, 413, 432,
	871, 433, 248, 434, 435, 1041, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 1042, 446,
	447, 1043, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 1044, 250, 251, 252, 455, 1045, 1046, 456, 457,
	253, 254, 1047, 458, 459, 0, 460, 461, 1048, 1049,
	462, 463, 464, 466, 1050, 467, 1051, 465, 468, 469,
	470, 255, 256, 1052, 472, 471, 257, 1053, 1054, 1055,
	1056, 473, 474, 258, 475, 476, 477, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2561, 259, 260, 261, 262, 977, 263, 978,
	979, 980, 981, 215, 982, 983, 984, 985, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 986, 270,
	271, 272, 273, 274, 275, 276, 987, 988, 277, 220,
	221, 222, 989, 278, 223, 990, 962, 991, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 992, 288,
	0, 289, 290, 993, 856, 291, 292, 994, 995, 997,
	996, 998, 999, 1000, 293, 294, 500, 295, 296, 297,
	224, 225, 1001, 298, 1002, 299, 1003, 300, 1004, 1005,
	301, 302, 303, 1006, 304, 1007, 305, 306, 1008, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 1009,
	857, 1010, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 1011, 322, 1012, 1013, 858, 323,
	1014, 324, 230, 1015, 231, 1016, 325, 326, 327, 328,
	329, 330, 232, 233, 234, 860, 1017, 238, 332, 0,
	0, 0, 1018, 331, 333, 340, 1019, 859, 334, 235,
	336, 335, 337, 338, 339, 236, 1020, 237, 1021, 341,
	861, 862, 342, 343, 344, 863, 345, 346, 0, 0,
	347, 348, 349, 1022, 351, 350, 1023, 352, 239, 864,
	353, 354, 865, 1024, 355, 356, 1025, 1026, 357, 0,
	358, 937, 936, 359, 360, 362, 363, 361, 866, 364,
	365, 367, 366, 1027, 1028, 867, 1029, 240, 241, 368,
	369, 1030, 370, 371, 1031, 1032, 372, 373, 1033, 1034,
	374, 242, 868, 375, 869, 243, 376, 377, 378, 379,
	380, 381, 382, 1035, 383, 244, 384, 245, 385, 1036,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 1037,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 1038, 406, 870, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	1039, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	1040, 431, 412, 413, 432, 871, 433, 248, 434, 435,
	1041, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 1042, 446, 447, 1043, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 1044, 250, 251, 252,
	455, 1045, 1046, 456, 457, 253, 254, 1047, 458, 459,
	0, 460, 461, 1048, 1049, 462, 463, 464, 466, 1050,
	467, 1051, 465, 468, 469, 470, 255, 256, 1052, 472,
	471, 257, 1053, 1054, 1055, 1056, 473, 474, 258, 475,
	476, 477, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2423, 259, 260,
	261, 262, 977, 263, 978, 979, 980, 981, 215, 982,
	983, 984, 985, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 986, 270, 271, 272, 273, 274, 275,
	276, 987, 988, 277, 220, 221, 222, 989, 278, 223,
	990, 962, 991, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 992, 288, 0, 289, 290, 993, 856,
	291, 292, 994, 995, 997, 996, 998, 999, 1000, 293,
	294, 500, 295, 296, 297, 224, 225, 1001, 298, 1002,
	299, 1003, 300, 1004, 1005, 301, 302, 303, 1006, 304,
	1007, 305, 306, 1008, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 1009, 857, 1010, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 1011,
	322, 1012, 1013, 858, 323, 1014, 324, 230, 1015, 231,
	1016, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	860, 1017, 238, 332, 0, 0, 0, 1018, 331, 333,
	340, 1019, 859, 334, 235, 336, 335, 337, 338, 339,
	236, 1020, 237, 1021, 341, 861, 862, 342, 343, 344,
	863, 345, 346, 0, 0, 347, 348, 349, 1022, 351,
	350, 1023, 352, 239, 864, 353, 354, 865, 1024, 355,
	356, 1025, 1026, 357, 0, 358, 937, 936, 359, 360,
	362, 363, 361, 866, 364, 365, 367, 366, 1027, 1028,
	867, 1029, 240, 241, 368, 369, 1030, 370, 371, 1031,
	1032, 372, 373, 1033, 1034, 374, 242, 868, 375, 869,
	243, 376, 377, 378, 379, 380, 381, 382, 1035, 383,
	244, 384, 245, 385, 1036, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 1037, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 1038, 406,
	870, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 1039, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 1040, 431, 412, 413, 432,
	871, 433, 248, 434, 435, 1041, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 1042, 446,
	447, 1043, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 1044, 250, 251, 252, 455, 1045, 1046, 456, 457,
	253, 254, 1047, 458, 459, 0, 460, 461, 1048, 1049,
	462, 463, 464, 466, 1050, 467, 1051, 465, 468, 469,
	470, 255, 256, 1052, 472, 471, 257, 1053, 1054, 1055,
	1056, 473, 474, 258, 475, 476, 477, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1874, 259, 260, 261, 262, 977, 263, 978,
	979, 980, 981, 215, 982, 983, 984, 985, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 986, 270,
	271, 272, 273, 274, 275, 276, 987, 988, 277, 220,
	221, 222, 989, 278, 223, 990, 962, 991, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 992, 288,
	0, 289, 290, 993, 856, 291, 292, 994, 995, 997,
	996, 998, 999, 1000, 293, 294, 500, 295, 296, 297,
	224, 225, 1001, 298, 1002, 299, 1003, 300, 1004, 1005,
	301, 302, 303, 1006, 304, 1007, 305, 306, 1008, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 1009,
	857, 1010, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 1011, 322, 1012, 1013, 858, 323,
	1014, 324, 230, 1015, 231, 1016, 325, 326, 327, 328,
	329, 330, 232, 233, 234, 860, 1017, 238, 332, 0,
	0, 0, 1018, 331, 333, 340, 1019, 859, 334, 235,
	336, 335, 337, 338, 339, 236, 1020, 237, 1021, 341,
	861, 862, 342, 343, 344, 863, 345, 346, 0, 0,
	347, 348, 349, 1022, 351, 350, 1023, 352, 239, 864,
	353, 354, 865, 1024, 355, 356, 1025, 1026, 357, 0,
	358, 937, 936, 359, 360, 362, 363, 361, 866, 364,
	365, 367, 366, 1027, 1028, 867, 1029, 240, 241, 368,
	369, 1030, 370, 371, 1031, 1032, 372, 373, 1033, 1034,
	374, 242, 868, 375, 869, 243, 376, 377, 378, 379,
	380, 381, 382, 1035, 383, 244, 384, 245, 385, 1036,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 1037,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 1038, 406, 870, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	1039, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	1040, 431, 412, 413, 432, 871, 433, 248, 434, 435,
	1041, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 1042, 446, 447, 1043, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 1044, 250, 251, 252,
	455, 1045, 1046, 456, 457, 253, 254, 1047, 458, 459,
	0, 460, 461, 1048, 1049, 462, 463, 464, 466, 1050,
	467, 1051, 465, 468, 469, 470, 255, 256, 1052, 472,
	471, 257, 1053, 1054, 1055, 1056, 473, 474, 258, 475,
	476, 477, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1533, 259, 260,
	261, 262, 977, 263, 978, 979, 980, 981, 215, 982,
	983, 984, 985, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 986, 270, 271, 272, 273, 274, 275,
	276, 987, 988, 277, 220, 221, 222, 989, 278, 223,
	990, 962, 991, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 992, 288, 0, 289, 290, 993, 856,
	291, 292, 994, 995, 997, 996, 998, 999, 1000, 293,
	294, 500, 295, 296, 297, 224, 225, 1001, 298, 1002,
	299, 1003, 300, 1004, 1005, 301, 302, 303, 1006, 304,
	1007, 305, 306, 1008, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 1009, 857, 1010, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 1011,
	322, 1012, 1013, 858, 323, 1014, 324, 230, 1015, 231,
	1016, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	860, 1017, 238, 332, 0, 0, 0, 1018, 331, 333,
	340, 1019, 859, 334, 235, 336, 335, 337, 338, 339,
	236, 1020, 237, 1021, 341, 861, 862, 342, 343, 344,
	863, 345, 346, 0, 0, 347, 348, 349, 1022, 351,
	350, 1023, 352, 239, 864, 353, 354, 865, 1024, 355,
	356, 1025, 1026, 357, 0, 358, 937, 936, 359, 360,
	362, 363, 361, 866, 364, 365, 367, 366, 1027, 1028,
	867, 1029, 240, 241, 368, 369, 1030, 370, 371, 1031,
	1032, 372, 373, 1033, 1034, 374, 242, 868, 375, 869,
	243, 376, 377, 378, 379, 380, 381, 382, 1035, 383,
	244, 384, 245, 385, 1036, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 1037, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 1038, 406,
	870, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 1039, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 1040, 431, 412, 413, 432,
	871, 433, 248, 434, 435, 1041, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 1042, 446,
	447, 1043, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 1044, 250, 251, 252, 455, 1045, 1046, 456, 457,
	253, 254, 1047, 458, 459, 0, 460, 461, 1048, 1049,
	462, 463, 464, 466, 1050, 467, 1051, 465, 468, 469,
	470, 255, 256, 1052, 472, 471, 257, 1053, 1054, 1055,
	1056, 473, 474, 258, 475, 476, 477, 732, 0, 801,
	760, 761, 758, 759, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 797, 827, 785, 826, 825,
	0, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 500, 295,
	829, 297, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 747, 0, 867, 768, 851,
	824, 368, 369, 0, 798, 799, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 879, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 880, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 817, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 172, 427, 428, 790, 791, 792, 793, 423,
	429, 430, 844, 431, 412, 413, 432, 871, 433, 815,
	794, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	855, 440, 441, 442, 881, 0, 446, 447, 174, 448,
	449, 450, 451, 452, 311, 453, 312, 788, 0, 830,
	831, 832, 833, 0, 0, 456, 457, 882, 883, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 845, 467, 0, 795, 468, 469, 470, 1157, 874,
	0, 472, 471, 257, 0, 0, 0, 166, 473, 474,
	258, 475, 476, 477, 748, 167, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 801,
	760, 761, 758, 759, 771, 0, 1383, 1381, 0, 0,
	0, 0, 770, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 797, 827, 785, 826, 825,
	0, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 500, 295,
	829, 297, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 747, 0, 867, 768, 851,
	824, 368, 369, 0, 798, 799, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 879, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 880, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 817, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 172, 427, 428, 790, 791, 792, 793, 423,
	429, 430, 844, 431, 412, 413, 432, 871, 433, 815,
	794, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	855, 440, 441, 442, 881, 0, 446, 447, 174, 448,
	449, 450, 451, 452, 311, 453, 312, 788, 0, 830,
	831, 832, 833, 0, 0, 456, 457, 882, 883, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 845, 467, 0, 795, 468, 469, 470, 1157, 874,
	0, 472, 471, 257, 0, 0, 0, 166, 473, 474,
	258, 475, 476, 477, 748, 167, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 801,
	760, 761, 758, 759, 771, 0, 1383, 2220, 0, 0,
	0, 0, 770, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 797, 827, 785, 826, 825,
	0, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 500, 295,
	829, 297, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 747, 0, 867, 768, 851,
	824, 368, 369, 0, 798, 799, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 879, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 880, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 817, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 172, 427, 428, 790, 791, 792, 793, 423,
	429, 430, 844, 431, 412, 413, 432, 871, 433, 815,
	794, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	855, 440, 441, 442, 881, 0, 446, 447, 174, 448,
	449, 450, 451, 452, 311, 453, 312, 788, 0, 830,
	831, 832, 833, 0, 0, 456, 457, 882, 883, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 845, 467, 0, 795, 468, 469, 470, 1157, 874,
	0, 472, 471, 257, 0, 0, 0, 166, 473, 474,
	258, 475, 476, 477, 748, 167, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 801,
	760, 761, 758, 759, 771, 0, 1383, 1381, 0, 0,
	0, 0, 770, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 797, 827, 785, 826, 825,
	1936, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 500, 295,
	829, 297, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 1941,
	858, 323, 0, 324, 877, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 1937, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 747, 0, 867, 768, 851,
	824, 368, 369, 0, 798, 799, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 879, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 880, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 817, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 790, 791, 792, 793, 423,
	429, 430, 844, 431, 412, 413, 432, 871, 433, 815,
	794, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	855, 440, 441, 442, 881, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 788, 0, 830,
	831, 832, 833, 0, 1938, 456, 457, 882, 883, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 845, 467, 0, 795, 468, 469, 470, 255, 874,
	0, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 801,
	760, 761, 758, 759, 771, 0, 772, 0, 0, 0,
	0, 0, 770, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 797, 827, 785, 826, 825,
	0, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 500, 295,
	829, 297, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 747, 2722, 867, 768, 851,
	824, 368, 369, 0, 798, 799, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 879, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 880, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 817, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 790, 791, 792, 793, 423,
	429, 430, 844, 431, 412, 413, 432, 871, 433, 815,
	794, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	855, 440, 441, 442, 881, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 788, 0, 830,
	831, 832, 833, 0, 0, 456, 457, 882, 883, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 845, 467, 0, 795, 468, 469, 470, 255, 874,
	0, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 1445,
	801, 760, 761, 758, 759, 771, 772, 0, 0, 0,
	0, 0, 770, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 847, 776, 0, 0,
	0, 264, 265, 266, 216, 816, 797, 827, 785, 826,
	825, 0, 270, 271, 787, 786, 274, 275, 276, 777,
	846, 277, 873, 872, 222, 0, 278, 853, 0, 836,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 292,
	839, 837, 838, 843, 841, 840, 842, 293, 294, 500,
	295, 829, 297, 823, 822, 750, 298, 0, 299, 0,
	300, 0, 0, 301, 821, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	875, 876, 767, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 820, 818, 819, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 877, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 848, 849, 852, 860, 0,
	850, 796, 0, 0, 0, 1766, 331, 333, 340, 0,
	859, 334, 809, 800, 810, 811, 812, 813, 814, 0,
	802, 0, 341, 861, 862, 342, 343, 344, 863, 834,
	835, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 878, 864, 353, 354, 865, 0, 355, 356, 0,
	0, 357, 0, 358, 752, 751, 359, 360, 362, 789,
	361, 866, 364, 365, 367, 366, 747, 0, 867, 768,
	851, 824, 368, 369, 0, 798, 799, 0, 0, 372,
	373, 0, 0, 374, 242, 868, 375, 869, 879, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 880, 384,
	245, 385, 1765, 386, 387, 388, 389, 390, 391, 817,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 870, 407,
	408, 409, 410, 756, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 790, 791, 792, 793,
	423, 429, 430, 844, 431, 412, 413, 432, 871, 433,
	815, 794, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 855, 440, 441, 442, 881, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 788, 0,
	830, 831, 832, 833, 0, 0, 456, 457, 882, 883,
	766, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 845, 467, 0, 795, 468, 469, 470, 255,
	874, 0, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 748, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 744, 745,
	0, 0, 0, 0, 0, 0, 0, 772, 0, 0,
	0, 0, 740, 770, 801, 760, 761, 758, 759, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	847, 776, 0, 0, 0, 264, 265, 266, 216, 816,
	797, 827, 785, 826, 825, 0, 270, 271, 787, 786,
	274, 275, 276, 777, 846, 277, 873, 872, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 500, 295, 829, 297, 823, 822, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 821, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 767, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 848,
	849, 852, 860, 0, 850, 796, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 809, 800, 810, 811,
	812, 813, 814, 0, 802, 0, 341, 861, 862, 342,
	343, 344, 863, 834, 835, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 878, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 752, 751,
	359, 360, 362, 789, 361, 866, 364, 365, 367, 366,
	747, 0, 867, 768, 851, 824, 368, 369, 0, 798,
	799, 742, 0, 372, 373, 0, 0, 374, 242, 868,
	375, 869, 879, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 880, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 817, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 870, 407, 408, 409, 410, 756, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	790, 791, 792, 793, 423, 429, 430, 844, 431, 412,
	413, 432, 871, 433, 815, 794, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 855, 440, 441, 442, 881,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 788, 0, 830, 831, 832, 833, 0, 0,
	456, 457, 882, 883, 766, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 845, 467, 0, 795,
	468, 469, 470, 255, 874, 0, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 748,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 801, 760, 761, 758, 759, 771,
	0, 772, 0, 0, 0, 0, 0, 770, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	847, 776, 0, 0, 0, 264, 265, 266, 216, 816,
	797, 827, 785, 826, 825, 0, 270, 271, 787, 786,
	274, 275, 276, 777, 846, 277, 873, 872, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 500, 295, 829, 297, 823, 822, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 821, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 767, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 848,
	849, 852, 860, 0, 850, 796, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 809, 800, 810, 811,
	812, 813, 814, 0, 802, 0, 341, 861, 862, 342,
	343, 344, 863, 834, 835, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 878, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 752, 751,
	359, 360, 362, 789, 361, 866, 364, 365, 367, 366,
	747, 0, 867, 768, 851, 824, 368, 369, 0, 798,
	799, 0, 0, 372, 373, 0, 0, 374, 242, 868,
	375, 869, 879, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 880, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 817, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 870, 407, 408, 409, 410, 756, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	790, 791, 792, 793, 423, 429, 430, 844, 431, 412,
	413, 432, 871, 433, 815, 794, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 855, 440, 441, 442, 881,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 788, 0, 830, 831, 832, 833, 0, 0,
	456, 457, 882, 883, 766, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 845, 467, 0, 795,
	468, 469, 470, 255, 874, 2548, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 748,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 801, 760, 761, 758, 759, 771,
	0, 772, 0, 0, 0, 0, 0, 770, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	847, 776, 0, 0, 0, 264, 265, 266, 216, 816,
	797, 827, 785, 826, 825, 0, 270, 271, 787, 786,
	274, 275, 276, 777, 846, 277, 873, 872, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 500, 295, 829, 297, 823, 822, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 821, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 767, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 848,
	849, 852, 860, 0, 850, 796, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 809, 800, 810, 811,
	812, 813, 814, 0, 802, 0, 341, 861, 862, 342,
	343, 344, 863, 834, 835, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 878, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 752, 751,
	359, 360, 362, 789, 361, 866, 364, 365, 367, 366,
	747, 0, 867, 768, 851, 824, 368, 369, 0, 798,
	799, 742, 0, 372, 373, 0, 0, 374, 242, 868,
	375, 869, 879, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 880, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 817, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 870, 407, 408, 409, 410, 756, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	790, 791, 792, 793, 423, 429, 430, 844, 431, 412,
	413, 432, 871, 433, 815, 794, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 855, 440, 441, 442, 881,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 788, 0, 830, 831, 832, 833, 0, 0,
	456, 457, 882, 883, 766, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 845, 467, 0, 795,
	468, 469, 470, 255, 874, 0, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 748,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 801, 760, 761, 758, 759, 771,
	0, 772, 0, 0, 0, 0, 0, 770, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	847, 776, 0, 0, 0, 264, 265, 266, 216, 816,
	797, 827, 785, 826, 825, 0, 270, 271, 787, 786,
	274, 275, 276, 777, 846, 277, 873, 872, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 500, 295, 829, 297, 823, 822, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 821, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 767, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 848,
	849, 852, 860, 0, 850, 796, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 809, 800, 810, 811,
	812, 813, 814, 0, 802, 0, 341, 861, 862, 342,
	343, 344, 863, 834, 835, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 878, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 752, 751,
	359, 360, 362, 789, 361, 866, 364, 365, 367, 366,
	747, 0, 867, 768, 851, 824, 368, 369, 0, 798,
	799, 0, 0, 372, 373, 0, 0, 374, 242, 868,
	375, 869, 879, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 880, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 817, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 870, 407, 408, 409, 410, 756, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	790, 791, 792, 793, 423, 429, 430, 844, 431, 412,
	413, 432, 871, 433, 815, 794, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 855, 440, 441, 442, 881,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 788, 0, 830, 831, 832, 833, 0, 0,
	456, 457, 882, 883, 766, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 845, 467, 0, 795,
	468, 469, 470, 255, 874, 0, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 748,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 1445, 801, 760, 761, 758, 759,
	771, 772, 0, 0, 0, 0, 0, 770, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 797, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 500, 295, 829, 297, 823, 822,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 1941, 858, 323, 0, 324,
	877, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 752,
	751, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 747, 0, 867, 768, 851, 824, 368, 369, 0,
	798, 799, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 879, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 880, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 817, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 756, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 790, 791, 792, 793, 423, 429, 430, 844, 431,
	412, 413, 432, 871, 433, 815, 794, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 855, 440, 441, 442,
	881, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 456, 457, 882, 883, 766, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 845, 467, 0,
	795, 468, 469, 470, 255, 874, 0, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 801, 760, 761, 758, 759,
	771, 0, 772, 0, 0, 0, 0, 0, 770, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 797, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 500, 295, 829, 297, 823, 822,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 752,
	751, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 747, 0, 867, 768, 851, 824, 368, 369, 0,
	798, 799, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 879, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 880, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 817, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 756, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 790, 791, 792, 793, 423, 429, 430, 844, 431,
	412, 413, 432, 871, 433, 815, 794, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 855, 440, 441, 442,
	881, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 456, 457, 882, 883, 766, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 845, 467, 0,
	795, 468, 469, 470, 255, 874, 0, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 0, 0, 0, 0, 0,
	0, 0, 772, 1381, 0, 0, 0, 1932, 770, 801,
	760, 761, 758, 759, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 797, 827, 785, 826, 825,
	0, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 500, 295,
	829, 297, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 747, 0, 867, 768, 851,
	824, 368, 369, 0, 798, 799, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 879, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 880, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 817, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 790, 791, 792, 793, 423,
	429, 430, 844, 431, 412, 413, 432, 871, 433, 815,
	794, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	855, 440, 441, 442, 881, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 788, 0, 830,
	831, 832, 833, 0, 0, 456, 457, 882, 883, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 845, 467, 0, 795, 468, 469, 470, 255, 874,
	0, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 0,
	0, 0, 0, 0, 0, 0, 772, 0, 0, 0,
	0, 1921, 770, 801, 760, 761, 758, 759, 771, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 847,
	776, 0, 0, 0, 264, 265, 266, 216, 816, 797,
	827, 785, 826, 825, 0, 270, 271, 787, 786, 274,
	275, 276, 777, 846, 277, 873, 872, 222, 0, 278,
	853, 0, 836, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	856, 291, 292, 839, 837, 838, 843, 841, 840, 842,
	293, 294, 500, 295, 829, 297, 823, 822, 750, 298,
	0, 299, 0, 300, 0, 0, 301, 821, 303, 0,
	304, 0, 305, 306, 0, 755, 307, 308, 310, 313,
	309, 314, 315, 875, 876, 767, 857, 0, 0, 0,
	0, 0, 316, 317, 318, 820, 818, 819, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 877, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 848, 849,
	852, 860, 0, 850, 796, 0, 0, 0, 0, 331,
	333, 340, 0, 859, 334, 809, 800, 810, 811, 812,
	813, 814, 0, 802, 0, 341, 861, 862, 342, 343,
	344, 863, 834, 835, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 878, 864, 353, 354, 865, 0,
	355, 356, 0, 0, 357, 0, 358, 752, 751, 359,
	360, 362, 789, 361, 866, 364, 365, 367, 366, 747,
	0, 867, 768, 851, 824, 368, 369, 0, 798, 799,
	0, 0, 372, 373, 0, 0, 374, 242, 868, 375,
	869, 879, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 880, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 817, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 870, 407, 408, 409, 410, 756, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 790,
	791, 792, 793, 423, 429, 430, 844, 431, 412, 413,
	432, 871, 433, 815, 794, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 855, 440, 441, 442, 881, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 788, 0, 830, 831, 832, 833, 0, 0, 456,
	457, 882, 883, 766, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 845, 467, 0, 795, 468,
	469, 470, 255, 874, 0, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 748, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 744, 745, 0, 0, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 0, 1919, 770, 801, 760, 761,
	758, 759, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 847, 776, 0, 0, 0, 264, 265,
	266, 216, 816, 797, 827, 785, 826, 825, 0, 270,
	271, 787, 786, 274, 275, 276, 777, 846, 277, 873,
	872, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 292, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 500, 295, 829, 297,
	823, 822, 750, 298, 0, 299, 0, 300, 0, 0,
	301, 821, 303, 0, 304, 0, 305, 306, 0, 755,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 767,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 820,
	818, 819, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 796, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 341,
	861, 862, 342, 343, 344, 863, 834, 835, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 752, 751, 359, 360, 362, 789, 361, 866, 364,
	365, 367, 366, 747, 0, 867, 768, 851, 824, 368,
	369, 0, 798, 799, 0, 0, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 879, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 880, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 817, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	756, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 790, 791, 792, 793, 423, 429, 430,
	844, 431, 412, 413, 432, 871, 433, 815, 794, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 855, 440,
	441, 442, 881, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 788, 0, 830, 831, 832,
	833, 0, 0, 456, 457, 882, 883, 766, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 845,
	467, 0, 795, 468, 469, 470, 255, 874, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 748, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 744, 745, 0, 0, 0,
	0, 0, 0, 0, 772, 0, 0, 0, 0, 1917,
	770, 801, 760, 761, 758, 759, 771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 264, 265, 266, 216, 816, 797, 827, 785,
	826, 825, 0, 270, 271, 787, 786, 274, 275, 276,
	777, 846, 277, 873, 872, 222, 0, 278, 853, 0,
	836, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 856, 291,
	292, 839, 837, 838, 843, 841, 840, 842, 293, 294,
	500, 295, 829, 297, 823, 822, 750, 298, 0, 299,
	0, 300, 0, 0, 301, 821, 303, 0, 304, 0,
	305, 306, 0, 755, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 767, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 820, 818, 819, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 877, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 848, 849, 852, 860,
	0, 850, 796, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 341, 861, 862, 342, 343, 344, 863,
	834, 835, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 752, 751, 359, 360, 362,
	789, 361, 866, 364, 365, 367, 366, 747, 0, 867,
	768, 851, 824, 368, 369, 0, 798, 799, 0, 0,
	372, 373, 0, 0, 374, 242, 868, 375, 869, 879,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 880,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	817, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 870,
	407, 408, 409, 410, 756, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 790, 791, 792,
	793, 423, 429, 430, 844, 431, 412, 413, 432, 871,
	433, 815, 794, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 855, 440, 441, 442, 881, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 788,
	0, 830, 831, 832, 833, 0, 0, 456, 457, 882,
	883, 766, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 845, 467, 0, 795, 468, 469, 470,
	255, 874, 0, 472, 471, 257, 0, 0, 0, 0,
	473, 474, 258, 475, 476, 477, 748, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 744,
	745, 0, 0, 0, 0, 0, 0, 0, 772, 0,
	0, 0, 0, 1915, 770, 1907, 760, 761, 758, 759,
	771, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 797, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 500, 295, 829, 1910, 823, 822,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 0, 325, 326, 1911, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 752,
	751, 1912, 1909, 362, 789, 361, 866, 364, 365, 367,
	366, 747, 0, 867, 768, 851, 824, 368, 369, 0,
	798, 799, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 879, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 880, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 817, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 756, 411,
	0, 415, 416, 417, 418, 419, 420, 1913, 0, 427,
	428, 790, 791, 792, 793, 423, 429, 430, 844, 431,
	412, 413, 432, 871, 433, 815, 794, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 855, 440, 441, 442,
	881, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 456, 457, 882, 883, 766, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 845, 467, 0,
	795, 468, 469, 470, 255, 874, 0, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 1908, 477,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 0, 0, 0, 0, 0,
	0, 0, 772, 0, 0, 0, 0, 1904, 770, 1907,
	760, 761, 758, 759, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 797, 827, 785, 826, 825,
	0, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 500, 295,
	829, 1910, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 0, 325, 326,
	1911, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 1912, 1909, 362, 789, 361,
	866, 364, 365, 367, 366, 747, 0, 867, 768, 851,
	824, 368, 369, 0, 798, 799, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 879, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 880, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 817, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 1913, 0, 427, 428, 790, 791, 792, 793, 423,
	429, 430, 844, 431, 412, 413, 432, 871, 433, 815,
	794, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	855, 440, 441, 442, 881, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 788, 0, 830,
	831, 832, 833, 0, 0, 456, 457, 882, 883, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 845, 467, 0, 795, 468, 469, 470, 255, 874,
	0, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 1908, 477, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 801,
	760, 761, 758, 759, 771, 0, 772, 0, 0, 0,
	0, 0, 770, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 797, 827, 785, 826, 825,
	0, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 500, 295,
	829, 297, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 747, 0, 867, 768, 851,
	824, 368, 369, 0, 798, 799, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 879, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 880, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 817, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 790, 791, 792, 793, 423,
	429, 430, 844, 431, 412, 413, 432, 871, 433, 815,
	794, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	855, 440, 441, 442, 881, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 788, 0, 830,
	831, 832, 833, 0, 0, 456, 457, 882, 883, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 845, 467, 0, 795, 468, 469, 470, 255, 874,
	0, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 0,
	0, 0, 0, 0, 1389, 0, 772, 0, 0, 0,
	0, 0, 770, 801, 760, 761, 758, 759, 771, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 1753, 263, 0, 0, 0, 0, 847,
	776, 0, 0, 0, 264, 265, 266, 216, 816, 797,
	827, 785, 826, 825, 0, 270, 271, 787, 786, 274,
	275, 276, 777, 846, 277, 873, 872, 222, 0, 278,
	853, 0, 836, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	856, 291, 292, 839, 837, 838, 843, 841, 840, 842,
	293, 294, 500, 295, 829, 297, 823, 822, 750, 298,
	0, 299, 0, 300, 0, 0, 301, 821, 303, 0,
	304, 0, 305, 306, 0, 755, 307, 308, 310, 313,
	309, 314, 315, 875, 876, 767, 857, 0, 0, 0,
	0, 0, 316, 317, 318, 820, 818, 819, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 877, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 848, 849,
	852, 860, 0, 850, 796, 0, 0, 0, 0, 331,
	333, 340, 0, 859, 334, 809, 800, 810, 811, 812,
	813, 814, 0, 802, 0, 341, 861, 862, 342, 343,
	344, 863, 834, 835, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 878, 864, 353, 354, 865, 0,
	355, 356, 0, 0, 357, 0, 358, 752, 751, 359,
	360, 362, 789, 361, 866, 364, 365, 367, 366, 747,
	0, 867, 768, 851, 824, 368, 369, 0, 798, 799,
	0, 0, 372, 373, 0, 0, 374, 242, 868, 375,
	869, 879, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 880, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 817, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 870, 407, 408, 409, 410, 756, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 790,
	791, 792, 793, 423, 429, 430, 844, 431, 412, 413,
	432, 871, 433, 815, 794, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 855, 440, 441, 442, 881, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 788, 0, 830, 831, 832, 833, 0, 0, 456,
	457, 882, 883, 766, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 845, 467, 0, 795, 468,
	469, 470, 255, 874, 0, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 748, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 744, 745, 0, 0, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 0, 1079, 770, 801, 760, 761,
	758, 759, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 847, 776, 0, 0, 0, 264, 265,
	266, 216, 816, 797, 827, 785, 826, 825, 0, 270,
	271, 787, 786, 274, 275, 276, 777, 846, 277, 873,
	872, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 292, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 500, 295, 829, 297,
	823, 822, 750, 298, 0, 299, 0, 300, 0, 0,
	301, 821, 303, 0, 304, 0, 305, 306, 0, 755,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 767,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 820,
	818, 819, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 1078, 849, 852, 860, 0, 850, 796, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 341,
	861, 862, 342, 343, 344, 863, 834, 835, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 752, 751, 359, 360, 362, 789, 361, 866, 364,
	365, 367, 366, 747, 0, 867, 768, 851, 824, 368,
	369, 0, 798, 799, 0, 0, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 879, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 880, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 817, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	756, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 790, 791, 792, 793, 423, 429, 430,
	844, 431, 412, 413, 432, 871, 433, 815, 794, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 855, 440,
	441, 442, 881, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 788, 0, 830, 831, 832,
	833, 0, 0, 456, 457, 882, 883, 766, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 845,
	467, 0, 795, 468, 469, 470, 255, 874, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 748, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 744, 745, 0, 0, 0,
	0, 0, 0, 0, 772, 0, 0, 0, 0, 1073,
	770, 801, 760, 761, 758, 759, 771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 264, 265, 266, 216, 816, 797, 827, 785,
	826, 825, 0, 270, 271, 787, 786, 274, 275, 276,
	777, 846, 277, 873, 872, 222, 0, 278, 853, 0,
	836, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 856, 291,
	292, 839, 837, 838, 843, 841, 840, 842, 293, 294,
	500, 295, 829, 297, 823, 822, 750, 298, 0, 299,
	0, 300, 0, 0, 301, 821, 303, 0, 304, 0,
	305, 306, 0, 755, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 767, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 820, 818, 819, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 877, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 1072, 849, 852, 860,
	0, 850, 796, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 341, 861, 862, 342, 343, 344, 863,
	834, 835, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 752, 751, 359, 360, 362,
	789, 361, 866, 364, 365, 367, 366, 747, 0, 867,
	768, 851, 824, 368, 369, 0, 798, 799, 0, 0,
	372, 373, 0, 0, 374, 242, 868, 375, 869, 879,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 880,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	817, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 870,
	407, 408, 409, 410, 756, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 790, 791, 792,
	793, 423, 429, 430, 844, 431, 412, 413, 432, 871,
	433, 815, 794, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 855, 440, 441, 442, 881, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 788,
	0, 830, 831, 832, 833, 0, 0, 456, 457, 882,
	883, 766, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 845, 467, 0, 795, 468, 469, 470,
	255, 874, 0, 472, 471, 257, 0, 0, 0, 0,
	473, 474, 258, 475, 476, 477, 748, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 744,
	745, 0, 0, 0, 0, 0, 0, 0, 772, 0,
	0, 0, 0, 1068, 770, 801, 760, 761, 758, 759,
	771, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 797, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 500, 295, 829, 297, 823, 822,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 752,
	751, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 747, 0, 867, 768, 851, 824, 368, 369, 0,
	798, 799, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 879, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 880, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 817, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 756, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 790, 791, 792, 793, 423, 429, 430, 844, 431,
	412, 413, 432, 871, 433, 815, 794, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 855, 440, 441, 442,
	881, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 456, 457, 882, 883, 766, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 845, 467, 0,
	795, 468, 469, 470, 255, 874, 0, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 801, 760, 761, 758, 759,
	771, 0, 772, 0, 0, 0, 0, 0, 770, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 797, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 500, 295, 829, 297, 823, 822,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 752,
	751, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 747, 0, 867, 768, 851, 824, 368, 369, 0,
	798, 799, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 879, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 880, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 817, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 756, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 790, 791, 792, 793, 423, 429, 430, 844, 431,
	412, 413, 432, 871, 433, 815, 794, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 855, 440, 441, 442,
	881, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 456, 457, 882, 883, 766, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 845, 467, 0,
	795, 468, 469, 470, 255, 874, 0, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 801, 760, 761, 758, 759,
	771, 0, 772, 0, 0, 0, 0, 0, 770, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 797, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 3110, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 500, 295, 829, 297, 823, 822,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 752,
	751, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 747, 0, 867, 768, 851, 824, 368, 369, 0,
	798, 799, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 879, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 880, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 817, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 756, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 790, 791, 792, 793, 423, 429, 430, 844, 431,
	412, 413, 432, 871, 433, 815, 794, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 855, 440, 441, 442,
	881, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 456, 457, 882, 883, 766, 458, 459, 0, 3109,
	461, 0, 0, 462, 463, 464, 466, 845, 467, 0,
	795, 468, 469, 470, 255, 874, 0, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 801, 760, 761, 758, 759,
	771, 0, 772, 0, 0, 0, 0, 0, 770, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 3108,
	816, 797, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 3110, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 500, 295, 829, 297, 823, 822,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 752,
	751, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 747, 0, 867, 768, 851, 824, 368, 369, 0,
	798, 799, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 879, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 880, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 817, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 756, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 790, 791, 792, 793, 423, 429, 430, 844, 431,
	412, 413, 432, 871, 433, 815, 794, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 855, 440, 441, 442,
	881, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 456, 457, 882, 883, 766, 458, 459, 0, 3109,
	461, 0, 0, 462, 463, 464, 466, 845, 467, 0,
	795, 468, 469, 470, 255, 874, 0, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 801, 760, 761, 758, 759,
	771, 0, 772, 0, 0, 0, 0, 0, 770, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 797, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 500, 295, 829, 297, 823, 822,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 937,
	936, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 0, 0, 867, 768, 851, 824, 368, 369, 0,
	798, 799, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 879, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 880, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 817, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 756, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 790, 791, 792, 793, 423, 429, 430, 844, 431,
	412, 413, 432, 871, 433, 815, 794, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 855, 440, 441, 442,
	881, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 456, 457, 882, 883, 766, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 845, 467, 0,
	795, 468, 469, 470, 255, 874, 0, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	801, 760, 761, 758, 759, 771, 0, 0, 1929, 0,
	0, 0, 0, 1927, 1928, 0, 259, 260, 261, 262,
	0, 263, 772, 0, 0, 0, 847, 776, 770, 0,
	0, 264, 265, 266, 0, 816, 797, 827, 785, 826,
	825, 0, 270, 271, 787, 786, 274, 275, 276, 777,
	846, 277, 873, 872, 222, 0, 278, 853, 0, 836,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 3110,
	839, 837, 838, 843, 841, 840, 842, 293, 294, 500,
	295, 829, 297, 823, 822, 750, 298, 0, 299, 0,
	300, 0, 0, 301, 821, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	875, 876, 767, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 820, 818, 819, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 877, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 848, 849, 852, 0, 0,
	850, 796, 0, 0, 0, 0, 331, 333, 340, 0,
	859, 334, 809, 800, 810, 811, 812, 813, 814, 0,
	802, 0, 341, 0, 0, 342, 343, 344, 863, 834,
	835, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 878, 864, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 752, 751, 359, 360, 362, 789,
	361, 866, 364, 365, 367, 366, 747, 0, 0, 768,
	851, 824, 368, 369, 0, 798, 799, 0, 0, 372,
	373, 0, 0, 374, 242, 868, 375, 869, 879, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 880, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 817,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 870, 407,
	408, 409, 410, 756, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 790, 791, 792, 793,
	423, 429, 430, 844, 431, 412, 413, 432, 0, 433,
	815, 794, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 855, 440, 441, 442, 881, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 788, 0,
	830, 831, 832, 833, 0, 0, 456, 457, 882, 883,
	766, 458, 459, 0, 3109, 461, 0, 0, 462, 463,
	464, 466, 845, 467, 0, 795, 468, 469, 470, 255,
	874, 0, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 732, 0, 935, 0, 0, 0, 0, 744, 745,
	0, 0, 0, 0, 0, 0, 0, 772, 0, 259,
	260, 261, 262, 770, 263, 0, 0, 0, 0, 847,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 846, 277, 220, 221, 222, 0, 278,
	853, 0, 836, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	856, 291, 292, 839, 837, 838, 843, 841, 840, 842,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 875, 876, 0, 857, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 877, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 848, 849,
	852, 860, 0, 850, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 859, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 861, 862, 342, 343,
	344, 863, 345, 346, 0, 0, 347, 348, 349, 922,
	351, 350, 0, 352, 878, 864, 353, 354, 865, 0,
	355, 356, 0, 0, 357, 0, 358, 937, 936, 359,
	360, 362, 363, 361, 866, 364, 365, 367, 366, 0,
	0, 867, 0, 851, 241, 368, 369, 0, 370, 371,
	0, 927, 372, 373, 0, 0, 374, 242, 868, 375,
	869, 879, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 880, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 870, 407, 408, 409, 410, 247, 929, 0, 415,
	416, 417, 418, 419, 420, 421, 172, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 844, 431, 412, 413,
	432, 871, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 881, 0,
	446, 447, 174, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 882, 883, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 845, 467, 0, 465, 468,
	469, 470, 1157, 256, 0, 472, 471, 257, 0, 0,
	935, 166, 473, 474, 258, 475, 476, 477, 0, 167,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 847, 0, 919, 0,
	1470, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	846, 277, 220, 221, 222, 0, 278, 853, 0, 836,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 292,
	839, 837, 838, 843, 841, 840, 842, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	875, 876, 0, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 877, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 848, 849, 852, 860, 0,
	850, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	859, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 861, 862, 342, 343, 344, 863, 345,
	346, 0, 0, 347, 348, 349, 922, 351, 350, 0,
	352, 878, 864, 353, 354, 865, 0, 355, 356, 0,
	0, 357, 0, 358, 937, 936, 359, 360, 362, 363,
	361, 866, 364, 365, 367, 366, 0, 0, 867, 0,
	851, 241, 368, 369, 0, 370, 371, 0, 927, 372,
	373, 0, 0, 374, 242, 868, 375, 869, 879, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 880, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 870, 407,
	408, 409, 410, 247, 929, 0, 415, 416, 417, 418,
	419, 420, 421, 172, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 844, 431, 412, 413, 432, 871, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 881, 0, 446, 447, 174,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 882, 883,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 845, 467, 0, 465, 468, 469, 470, 1157,
	256, 0, 472, 471, 257, 2324, 0, 935, 166, 473,
	474, 258, 475, 476, 477, 0, 167, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 847, 0, 919, 0, 1470, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 846, 277, 220,
	221, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 292, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 0,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	861, 862, 342, 343, 344, 863, 345, 346, 0, 0,
	347, 348, 349, 922, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 937, 936, 359, 360, 362, 363, 361, 866, 364,
	365, 367, 366, 0, 0, 867, 0, 851, 241, 368,
	369, 0, 370, 371, 0, 927, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 879, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 880, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	247, 929, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	844, 431, 412, 413, 432, 871, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 881, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 882, 883, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 845,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 918, 0, 935, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	847, 0, 919, 0, 924, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 846, 277, 220, 221, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 0, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 848,
	849, 852, 860, 0, 850, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 861, 862, 342,
	343, 344, 863, 345, 346, 0, 0, 347, 348, 349,
	922, 351, 350, 0, 352, 878, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 937, 936,
	359, 360, 362, 363, 361, 866, 364, 365, 367, 366,
	0, 0, 867, 0, 851, 241, 368, 369, 0, 370,
	371, 0, 927, 372, 373, 0, 0, 374, 242, 868,
	375, 869, 879, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 880, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 870, 407, 408, 409, 410, 247, 929, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 844, 431, 412,
	413, 432, 871, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 881,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 882, 883, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 845, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 0,
	0, 935, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 847, 0, 919,
	0, 924, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 846, 277, 220, 221, 222, 0, 278, 853, 0,
	836, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 856, 291,
	292, 839, 837, 838, 843, 841, 840, 842, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 0, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 877, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 848, 849, 852, 860,
	0, 850, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 861, 862, 342, 343, 344, 863,
	345, 346, 0, 0, 347, 348, 349, 922, 351, 350,
	0, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 937, 936, 359, 360, 362,
	363, 361, 866, 364, 365, 367, 366, 0, 0, 867,
	0, 851, 241, 368, 369, 0, 370, 371, 0, 927,
	372, 373, 0, 0, 374, 242, 868, 375, 869, 879,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 880,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 870,
	407, 408, 409, 410, 247, 929, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 844, 431, 412, 413, 432, 871,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 881, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 882,
	883, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 845, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 0, 0, 935, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 847, 0, 919, 0, 924, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 846, 277,
	220, 221, 222, 0, 278, 853, 0, 836, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 856, 291, 292, 839, 837,
	838, 843, 841, 840, 842, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 875, 876,
	0, 857, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 858,
	323, 0, 324, 877, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 848, 849, 852, 860, 0, 850, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 859, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 861, 862, 342, 343, 344, 863, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 878,
	864, 353, 354, 865, 0, 355, 356, 0, 0, 357,
	0, 358, 937, 936, 359, 360, 362, 363, 361, 866,
	364, 365, 367, 366, 0, 0, 867, 0, 851, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 868, 375, 869, 879, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 880, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 870, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 844, 431, 412, 413, 432, 871, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 881, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 882, 883, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	845, 467, 0, 465, 468, 469, 470, 255, 256, 0,
	472, 471, 257, 0, 0, 935, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 847, 0, 0, 0, 2663, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 846, 277, 220, 221, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 0, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 861, 862,
	342, 343, 344, 863, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 937,
	936, 359, 360, 362, 363, 361, 866, 364, 365, 367,
	366, 0, 0, 867, 0, 851, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 879, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 880, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 247, 929,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 844, 431,
	412, 413, 432, 871, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	881, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 882, 883, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 845, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	1154, 0, 958, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 1370, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 962, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 856,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 857, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	860, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 859, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 861, 862, 342, 343, 344,
	863, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 864, 353, 354, 865, 0, 355,
	356, 0, 0, 357, 0, 358, 937, 936, 359, 360,
	362, 363, 361, 866, 364, 365, 367, 366, 0, 0,
	867, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 868, 375, 869,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	870, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 172, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	871, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 174, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 1157, 256, 0, 472, 471, 257, 0, 0, 935,
	166, 473, 474, 258, 475, 476, 477, 0, 167, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 0, 0, 0, 137,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 846,
	277, 220, 221, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 0, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 861, 862, 342, 343, 344, 863, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 937, 936, 359, 360, 362, 363, 361,
	866, 364, 365, 367, 366, 0, 0, 867, 0, 851,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 879, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 880, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 844, 431, 412, 413, 432, 871, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 881, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 882, 883, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 845, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 732, 0, 497, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 232, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 172,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 174, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 1157, 256, 0, 472, 471,
	257, 0, 0, 497, 166, 473, 474, 258, 475, 476,
	477, 0, 167, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 137, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 0, 472, 471, 257, 0, 0,
	497, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	2115, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 0, 0, 497, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 2572, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 232, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 1233, 0, 958, 957, 0, 0, 0, 955,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 1475, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 962, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 857, 0, 0,
	0, 0, 0, 1232, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 860, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 861, 862, 342,
	343, 344, 863, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 937, 936,
	359, 360, 362, 363, 361, 866, 364, 365, 367, 366,
	0, 0, 867, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 868,
	375, 869, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 1231, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 870, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 871, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 1150,
	0, 958, 957, 0, 0, 0, 955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	962, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 856, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 1149, 233, 234, 860,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 861, 862, 342, 343, 344, 863,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 937, 936, 359, 360, 362,
	363, 361, 866, 364, 365, 367, 366, 0, 0, 867,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 868, 375, 869, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 870,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 871,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 0, 0, 0, 0,
	473, 474, 258, 475, 476, 477, 1146, 0, 958, 957,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 962, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 856, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 857, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 858,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 1145, 233, 234, 860, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 859, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 861, 862, 342, 343, 344, 863, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	864, 353, 354, 865, 0, 355, 356, 0, 0, 357,
	0, 358, 937, 936, 359, 360, 362, 363, 361, 866,
	364, 365, 367, 366, 0, 0, 867, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 868, 375, 869, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 870, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 871, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 0,
	472, 471, 257, 0, 0, 0, 0, 473, 474, 258,
	475, 476, 477, 1104, 0, 958, 957, 0, 0, 0,
	955, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 962, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	1103, 233, 234, 860, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 861, 862,
	342, 343, 344, 863, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 937,
	936, 359, 360, 362, 363, 361, 866, 364, 365, 367,
	366, 0, 0, 867, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 871, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	1101, 0, 958, 957, 0, 0, 0, 955, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 962, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 856,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 857, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 1100, 233, 234,
	860, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 859, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 861, 862, 342, 343, 344,
	863, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 864, 353, 354, 865, 0, 355,
	356, 0, 0, 357, 0, 358, 937, 936, 359, 360,
	362, 363, 361, 866, 364, 365, 367, 366, 0, 0,
	867, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 868, 375, 869,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	870, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	871, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 0, 0, 0,
	0, 473, 474, 258, 475, 476, 477, 951, 0, 958,
	957, 0, 0, 0, 955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 962, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 953, 233, 234, 860, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 861, 862, 342, 343, 344, 863, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 937, 936, 359, 360, 362, 363, 361,
	866, 364, 365, 367, 366, 0, 0, 867, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 871, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 958, 957, 0, 0, 0, 955,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 962, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 860, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 861, 862, 342,
	343, 344, 863, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 937, 936,
	359, 360, 362, 363, 361, 866, 364, 365, 367, 366,
	0, 0, 867, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 868,
	375, 869, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 870, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 871, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 958,
	957, 0, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 962, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 860, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 861, 862, 342, 343, 344, 863, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 937, 936, 359, 360, 362, 363, 361,
	866, 364, 365, 367, 366, 0, 0, 867, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 871, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	958, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 962,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 860, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	859, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 861, 862, 342, 343, 344, 863, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 864, 353, 354, 865, 0, 355, 356, 0,
	0, 357, 0, 358, 937, 936, 359, 360, 362, 363,
	361, 866, 364, 365, 367, 366, 0, 0, 867, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 868, 375, 869, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 870, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 871, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 603, 0, 208, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 214, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 232, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 213, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 207, 0, 208, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 480, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 214, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 213, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 208, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 480, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 214, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	232, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 1726, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 213, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 208, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 480, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 214, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 232, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 213, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 497, 472, 471,
	257, 0, 0, 0, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 480, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 232, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 497, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 480, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 2001, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 1998,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 2080, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 2004, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 2078, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	2077, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	2003, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 2079, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 497,
	472, 471, 257, 0, 0, 0, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 2001, 278, 223, 0, 0, 1995,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	1998, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 2004, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 1994, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 2003, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 2002, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 610, 0, 497, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 609, 587, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 590, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 591,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 232, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 592,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 472, 471,
	257, 586, 0, 497, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 587, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 590,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 591, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 592, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 497, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	590, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 591, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 592, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 1275,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 1278, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	1276, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 1277, 471, 257, 1125, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 927, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 0,
	472, 471, 257, 946, 0, 497, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	948, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 927, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	943, 0, 497, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 945, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	927, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 939, 0, 497,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 941, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 927, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 595, 0, 497, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 232, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 594, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 472, 471,
	257, 522, 0, 497, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 521, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 520, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 497, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 1976, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 497,
	2488, 0, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 497, 2488, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 2485, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 497, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	232, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 927, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 497, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 259, 260, 261, 262, 1719, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 232, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 472, 471,
	257, 1677, 0, 497, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 0, 472, 471, 257, 1675, 0,
	497, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 636, 0, 497, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 1204, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 232, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 637, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 633, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 632, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 1564, 0, 497, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 1563,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 636,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 1204, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 637, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 633,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 632, 251, 252, 455, 0, 0, 456, 1205, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 636, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 626, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 637, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 633, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 1176,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 632, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 0,
	472, 471, 257, 1143, 0, 497, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	1142, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	1139, 0, 497, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 1138, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 1136, 0, 497,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 1135, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 1133, 0, 497, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 1132, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 472, 471,
	257, 1129, 0, 497, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 1128, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 497, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	259, 260, 261, 262, 1117, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 1115,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 1114, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 1106, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 0,
	472, 471, 257, 1097, 0, 497, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	1096, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	1092, 0, 497, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 1088, 0, 497,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 1090, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 966, 0, 497, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 968, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 472, 471,
	257, 963, 0, 497, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 0, 472, 471, 257, 636, 0,
	497, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 626, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 625, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	637, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 627, 411, 0, 415, 416, 633, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 628, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	632, 251, 252, 455, 0, 0, 456, 630, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 616, 0, 497, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 232, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 617, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 612, 0, 497, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 601,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 544, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 497,
	472, 471, 257, 0, 0, 0, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	497, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 2382, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 497, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 2380, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 497, 472, 471, 257, 0, 0, 0, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 2369, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 497, 472, 471, 257, 0, 0, 0,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 617,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 497, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 1577, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 0, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 497, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	1568, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 497, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 232, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 901, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 497, 472, 471,
	257, 0, 0, 0, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 232, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 0,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 0, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 0, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 1307, 1308, 0, 1340, 1341, 1342, 1350, 1351,
	1352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 1310, 0, 0,
	1356, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1309, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350,
	1351, 1352, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 1356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 1333, 1334, 1335, 1309, 0, 0, 0, 0,
	0, 1315, 0, 1329, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342,
	1350, 1351, 1352, 0, 1347, 1357, 0, 0, 1337, 1338,
	1339, 0, 1343, 0, 0, 0, 0, 0, 0, 1310,
	0, 0, 1356, 0, 0, 0, 0, 0, 0, 1353,
	1354, 0, 0, 0, 0, 0, 0, 1324, 1325, 0,
	0, 0, 1332, 1333, 1334, 1335, 1309, 0, 0, 0,
	0, 1345, 1315, 0, 1329, 0, 0, 0, 1330, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1355, 1347, 1357, 0, 0, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1353, 1354, 0, 0, 0, 0, 0, 0, 1324, 1325,
	0, 0, 0, 1332, 1333, 1334, 1335, 0, 0, 0,
	0, 0, 1345, 1315, 1336, 0, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 1355, 1347, 1357, 0, 0,
	1337, 1338, 1339, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 1353, 1354, 0, 0, 0, 0, 0, 0, 1324,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 0, 1336, 0, 0, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 1355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 1348, 0, 0, 0, 0,
	0, 1346, 0, 0, 1321, 1322, 1328, 1327, 1323, 1349,
	0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317,
	0, 0, 0, 0, 2267, 0, 1336, 0, 2268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1331, 0, 1307, 1308, 0, 1340, 1341,
	1342, 1350, 1351, 1352, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 0, 1348, 0, 0, 0,
	1310, 0, 1346, 1356, 0, 1321, 1322, 1328, 1327, 1323,
	1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316,
	1317, 0, 0, 0, 0, 1862, 0, 1309, 0, 1863,
	0, 0, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 1326, 0, 0, 0, 1307, 1308, 0, 1340,
	1341, 1342, 1350, 1351, 1352, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1343, 0, 0, 0, 0, 0,
	0, 1310, 0, 1346, 1356, 0, 1321, 1322, 1328, 1327,
	1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314,
	1316, 1317, 0, 0, 1332, 1333, 1334, 1335, 1309, 0,
	2787, 0, 0, 0, 1315, 0, 1329, 0, 0, 0,
	0, 0, 0, 1326, 0, 0, 0, 1307, 1308, 0,
	1340, 1341, 1342, 1350, 1351, 1352, 0, 1347, 1357, 0,
	0, 1337, 1338, 1339, 0, 1343, 0, 0, 0, 0,
	0, 0, 1310, 0, 0, 1356, 0, 0, 0, 0,
	0, 0, 1353, 1354, 0, 0, 0, 0, 0, 0,
	1324, 1325, 0, 0, 0, 1332, 1333, 1334, 1335, 1309,
	0, 0, 0, 0, 1345, 1315, 0, 1329, 0, 0,
	0, 1330, 0, 0, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1355, 1347, 1357,
	0, 0, 1337, 1338, 1339, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 1354, 0, 0, 0, 0, 0,
	0, 1324, 1325, 0, 0, 0, 1332, 1333, 1334, 1335,
	0, 0, 0, 0, 0, 1345, 1315, 1336, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 1355, 1347,
	1357, 0, 0, 1337, 1338, 1339, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 1348, 0, 0,
	0, 0, 0, 0, 1353, 1354, 0, 0, 0, 0,
	0, 0, 1324, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 1336, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 1355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 1348, 0,
	0, 0, 0, 0, 1346, 0, 0, 1321, 1322, 1328,
	1327, 1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313,
	1314, 1316, 1317, 0, 0, 0, 0, 0, 0, 1336,
	0, 2544, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 1307, 1308,
	0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 1348,
	0, 0, 0, 1310, 0, 1346, 1356, 0, 1321, 1322,
	1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311, 1312,
	1313, 1314, 1316, 1317, 0, 0, 0, 0, 0, 0,
	1309, 0, 2270, 0, 0, 0, 0, 0, 1329, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 0, 1307,
	1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 1310, 0, 1346, 1356, 0, 1321,
	1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311,
	1312, 1313, 1314, 1316, 1317, 0, 0, 1332, 1333, 1334,
	1335, 1309, 0, 2269, 0, 0, 0, 1315, 0, 1329,
	0, 0, 0, 0, 0, 0, 1326, 0, 0, 0,
	1307, 1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0,
	1347, 1357, 0, 0, 1337, 1338, 1339, 0, 1343, 0,
	0, 0, 0, 0, 0, 1310, 0, 0, 1356, 0,
	0, 0, 0, 0, 0, 1353, 1354, 0, 0, 0,
	0, 0, 0, 1324, 1325, 0, 0, 0, 1332, 1333,
	1334, 1335, 1309, 0, 0, 0, 0, 1345, 1315, 0,
	1329, 0, 0, 0, 1330, 0, 0, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1355, 1347, 1357, 0, 0, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1353, 1354, 0, 0,
	0, 0, 0, 0, 1324, 1325, 0, 0, 0, 1332,
	1333, 1334, 1335, 0, 0, 0, 0, 0, 1345, 1315,
	1336, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 1355, 1347, 1357, 0, 0, 1337, 1338, 1339, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 1353, 1354, 0,
	0, 0, 0, 0, 0, 1324, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	0, 1336, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 1355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 0, 0, 1346, 0, 0,
	1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319,
	1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0, 0,
	0, 0, 1336, 0, 2266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1331,
	0, 1307, 1308, 0, 1340, 1341, 1342, 1350, 1351, 1352,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1343,
	0, 0, 1348, 0, 0, 0, 1310, 0, 1346, 1356,
	0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0,
	0, 0, 0, 1309, 0, 2265, 0, 0, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 1326, 0,
	0, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350, 1351,
	1352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 1310, 0, 1346,
	1356, 0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320,
	1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0,
	1332, 1333, 1334, 1335, 1309, 0, 2264, 0, 0, 0,
	1315, 0, 1329, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350,
	1351, 1352, 0, 1347, 1357, 0, 0, 1337, 1338, 1339,
	0, 1343, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 1356, 0, 0, 0, 0, 0, 0, 1353, 1354,
	0, 0, 0, 0, 0, 0, 1324, 1325, 0, 0,
	0, 1332, 1333, 1334, 1335, 1309, 0, 0, 0, 0,
	1345, 1315, 0, 1329, 0, 0, 0, 1330, 0, 0,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1355, 1347, 1357, 0, 0, 1337, 1338,
	1339, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	1354, 0, 0, 0, 0, 0, 0, 1324, 1325, 0,
	0, 0, 1332, 1333, 1334, 1335, 0, 0, 0, 0,
	0, 1345, 1315, 1336, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 1355, 1347, 1357, 0, 0, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	1353, 1354, 0, 0, 0, 0, 0, 0, 1324, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 0, 1336, 0, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 1355, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	1346, 0, 0, 1321, 1322, 1328, 1327, 1323, 1349, 0,
	1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 0,
	0, 0, 0, 0, 0, 1336, 0, 1863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 0, 0, 0, 0,
	0, 1346, 0, 0, 1321, 1322, 1328, 1327, 1323, 1349,
	0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317,
	0, 0, 0, 0, 3075, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1307,
	1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 1356, 0, 0,
	0, 0, 1346, 0, 0, 1321, 1322, 1328, 1327, 1323,
	1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316,
	1317, 1309, 0, 0, 0, 3071, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 1326, 0, 0, 0,
	1307, 1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 0, 1310, 0, 0, 1356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 1333,
	1334, 1335, 1309, 0, 0, 0, 0, 0, 1315, 0,
	1329, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	0, 1307, 1308, 0, 1340, 1341, 1342, 1350, 1351, 1352,
	0, 1347, 1357, 0, 0, 1337, 1338, 1339, 0, 1343,
	0, 0, 0, 0, 0, 0, 1310, 0, 0, 1356,
	0, 0, 0, 0, 0, 0, 1353, 1354, 0, 0,
	0, 0, 0, 0, 1324, 1325, 0, 0, 0, 1332,
	1333, 1334, 1335, 1309, 0, 0, 0, 0, 1345, 1315,
	0, 1329, 0, 0, 0, 1330, 0, 0, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1355, 1347, 1357, 0, 0, 1337, 1338, 1339, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1353, 1354, 0,
	0, 0, 0, 0, 0, 1324, 1325, 0, 0, 0,
	1332, 1333, 1334, 1335, 0, 0, 0, 0, 0, 1345,
	1315, 1336, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 1355, 1347, 1357, 0, 0, 1337, 1338, 1339,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 1353, 1354,
	0, 0, 0, 0, 0, 0, 1324, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 1336, 0, 0, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 1355, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 1346, 0,
	0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0,
	0, 3013, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 0, 0, 0, 0, 0, 1346,
	0, 0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320,
	1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0,
	0, 0, 3012, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1307, 1308, 0,
	1340, 1341, 1342, 1350, 1351, 1352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 1310, 0, 0, 1356, 0, 0, 0, 0,
	1346, 0, 0, 1321, 1322, 1328, 1327, 1323, 1349, 0,
	1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 1309,
	0, 0, 0, 2962, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 1326, 0, 0, 0, 1307, 1308,
	0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 0, 1310, 0, 0, 1356, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 1333, 1334, 1335,
	1309, 0, 0, 0, 0, 0, 1315, 0, 1329, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 0, 1307,
	1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 1347,
	1357, 0, 0, 1337, 1338, 1339, 0, 1343, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 1356, 0, 0,
	0, 0, 0, 0, 1353, 1354, 0, 0, 0, 0,
	0, 0, 1324, 1325, 0, 0, 0, 1332, 1333, 1334,
	1335, 1309, 0, 0, 0, 0, 1345, 1315, 0, 1329,
	0, 0, 0, 1330, 0, 0, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1355,
	1347, 1357, 0, 0, 1337, 1338, 1339, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1353, 1354, 0, 0, 0,
	0, 0, 0, 1324, 1325, 0, 0, 0, 1332, 1333,
	1334, 1335, 0, 0, 0, 0, 0, 1345, 1315, 1336,
	0, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	1355, 1347, 1357, 0, 0, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 1348,
	0, 0, 0, 0, 0, 0, 1353, 1354, 0, 0,
	0, 0, 0, 0, 1324, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 0,
	1336, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 1355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	1348, 0, 0, 0, 0, 0, 1346, 0, 0, 1321,
	1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311,
	1312, 1313, 1314, 1316, 1317, 0, 0, 0, 0, 2923,
	0, 1336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 0, 0, 1346, 0, 0,
	1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319,
	1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0, 0,
	2834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1307, 1308, 0, 1340, 1341,
	1342, 1350, 1351, 1352, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 0, 0, 0, 0, 0,
	1310, 0, 0, 1356, 0, 0, 0, 0, 1346, 0,
	0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 1309, 0, 0,
	0, 2792, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 1326, 0, 0, 0, 1307, 1308, 0, 1340,
	1341, 1342, 1350, 1351, 1352, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1343, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 1356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 1333, 1334, 1335, 1309, 0,
	0, 0, 0, 0, 1315, 0, 1329, 0, 0, 0,
	0, 0, 0, 1326, 0, 0, 0, 1307, 1308, 0,
	1340, 1341, 1342, 1350, 1351, 1352, 0, 1347, 1357, 0,
	0, 1337, 1338, 1339, 0, 1343, 0, 0, 0, 0,
	0, 0, 1310, 0, 0, 1356, 0, 0, 0, 0,
	0, 0, 1353, 1354, 0, 0, 0, 0, 0, 0,
	1324, 1325, 0, 0, 0, 1332, 1333, 1334, 1335, 1309,
	0, 0, 0, 0, 1345, 1315, 0, 1329, 0, 0,
	0, 1330, 0, 0, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1355, 1347, 1357,
	0, 0, 1337, 1338, 1339, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 1354, 0, 0, 0, 0, 0,
	0, 1324, 1325, 0, 0, 0, 1332, 1333, 1334, 1335,
	0, 0, 0, 0, 0, 1345, 1315, 1336, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 1355, 1347,
	1357, 0, 0, 1337, 1338, 1339, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 1348, 0, 0,
	0, 0, 0, 0, 1353, 1354, 0, 0, 0, 0,
	0, 0, 1324, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 1336, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 1355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 1348, 0,
	0, 0, 0, 0, 1346, 0, 0, 1321, 1322, 1328,
	1327, 1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313,
	1314, 1316, 1317, 0, 0, 0, 0, 2791, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	0, 0, 0, 0, 0, 1346, 0, 0, 1321, 1322,
	1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311, 1312,
	1313, 1314, 1316, 1317, 0, 0, 0, 0, 2790, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350,
	1351, 1352, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 1356, 0, 0, 0, 0, 1346, 0, 0, 1321,
	1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311,
	1312, 1313, 1314, 1316, 1317, 1309, 0, 0, 0, 2756,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342,
	1350, 1351, 1352, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 0, 1310,
	0, 0, 1356, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 1333, 1334, 1335, 1309, 0, 0, 0,
	0, 0, 1315, 0, 1329, 0, 0, 0, 0, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 1357, 0, 0, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1353, 1354, 0, 0, 0, 0, 0, 0, 1324, 1325,
	0, 0, 0, 1332, 1333, 1334, 1335, 0, 0, 0,
	0, 0, 1345, 1315, 0, 0, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1355, 1347, 1357, 0, 0,
	1337, 1338, 1339, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1353, 1354, 0, 0, 0, 0, 0, 0, 1324,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 0, 1336, 0, 0, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 1355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 1307, 1308, 0, 1340,
	1341, 1342, 1350, 1351, 1352, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1343, 0, 1348, 0, 0, 0,
	0, 1310, 1346, 0, 1356, 1321, 1322, 1328, 1327, 1323,
	1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316,
	1317, 0, 0, 0, 0, 2577, 0, 0, 1309, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	0, 0, 0, 1326, 0, 0, 0, 1307, 1308, 0,
	1340, 1341, 1342, 1350, 1351, 1352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 1310, 1346, 0, 1356, 1321, 1322, 1328, 1327,
	1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314,
	1316, 1317, 0, 0, 2224, 1332, 1333, 1334, 1335, 1309,
	0, 0, 0, 0, 0, 1315, 3151, 1329, 0, 0,
	0, 0, 0, 0, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1347, 1357,
	0, 0, 1337, 1338, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 1354, 0, 0, 0, 0, 0,
	0, 1324, 1325, 0, 0, 0, 1332, 1333, 1334, 1335,
	0, 0, 0, 0, 0, 1345, 1315, 0, 2311, 0,
	0, 2310, 1330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1355, 1347,
	1357, 0, 0, 1337, 1338, 1339, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1353, 1354, 0, 0, 0, 3150,
	0, 0, 1324, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 1336, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 1355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 1348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 1307, 1308,
	0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 1348,
	0, 2195, 0, 1310, 0, 1346, 1356, 0, 1321, 1322,
	1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311, 1312,
	1313, 1314, 1316, 1317, 0, 0, 0, 0, 0, 0,
	1309, 0, 0, 0, 0, 0, 0, 0, 1329, 0,
	0, 0, 0, 0, 1951, 1326, 0, 0, 0, 0,
	1307, 1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	0, 2196, 1950, 0, 0, 1310, 1346, 0, 1356, 1321,
	1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311,
	1312, 1313, 1314, 1316, 1317, 0, 0, 1332, 1333, 1334,
	1335, 0, 1309, 0, 0, 0, 0, 1315, 0, 0,
	1329, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1347, 1357, 0, 0, 1337, 1338, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1353, 1354, 0, 0, 0,
	0, 0, 0, 1324, 1325, 0, 0, 0, 0, 1332,
	1333, 1334, 1335, 0, 0, 0, 0, 1345, 0, 1315,
	0, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1355, 0, 1347, 1357, 0, 0, 1337, 1338, 1339, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1353, 1354, 0,
	0, 0, 0, 0, 0, 1324, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	1336, 0, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 1355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1307,
	1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 1356, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1309, 1348, 0, 0, 0, 0, 1346, 0, 1329,
	1321, 1322, 1328, 1327, 1323, 1349, 1326, 1320, 1318, 1319,
	1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1307, 1308,
	0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 0, 1332, 1333,
	1334, 1335, 0, 1310, 0, 0, 1356, 0, 1315, 1346,
	0, 0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320,
	1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0,
	1309, 1347, 1357, 0, 0, 1337, 1338, 1339, 1329, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1353, 1354, 0, 0,
	0, 0, 0, 0, 1324, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 1333, 1334,
	1335, 1355, 0, 0, 0, 0, 0, 1315, 0, 0,
	0, 0, 0, 0, 1344, 729, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1347, 1357, 0, 0, 1337, 1338, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 1353, 1354, 0, 0, 0,
	0, 0, 0, 1324, 1325, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	1355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1307, 1308, 0, 1340, 1341,
	1342, 1350, 1351, 1352, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 1343, 0, 0, 0, 0, 0, 0,
	1310, 0, 0, 1356, 0, 0, 0, 1331, 1346, 0,
	0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 1309, 0, 0,
	1348, 0, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 1326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2567, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 1333, 1334, 1335, 0, 0,
	0, 0, 0, 0, 1315, 0, 0, 1346, 0, 2317,
	1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319,
	1311, 1312, 1313, 1314, 1316, 1317, 0, 1347, 1357, 0,
	0, 1337, 1338, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1353, 1354, 0, 0, 0, 0, 0, 0,
	1324, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1307, 1308, 0, 1340, 1341, 1342, 1350, 1351, 1352,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 1343,
	0, 0, 0, 2312, 0, 0, 1310, 0, 0, 1356,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1309, 0, 0, 0, 1348, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 1326, 0,
	0, 0, 0, 0, 0, 0, 1307, 1308, 0, 1340,
	1341, 1342, 1350, 1351, 1352, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1343, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 1356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 1333, 1334, 1335, 0, 0, 0, 0, 1309, 0,
	1315, 0, 0, 0, 1346, 0, 1329, 1321, 1322, 1328,
	1327, 1323, 1349, 1326, 1320, 1318, 1319, 1311, 1312, 1313,
	1314, 1316, 1317, 1347, 1357, 0, 0, 1337, 1338, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1353, 1354,
	0, 0, 0, 0, 0, 0, 1324, 1325, 0, 0,
	0, 0, 0, 0, 0, 1332, 1333, 1334, 1335, 0,
	1345, 0, 0, 0, 0, 1315, 0, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1355, 0, 0, 0, 0, 1347, 1357,
	0, 0, 1337, 1338, 1339, 0, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 1354, 0, 0, 0, 0, 0,
	0, 1324, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 1345, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 1355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2279, 0, 0, 0,
	0, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350, 1351,
	1352, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	1343, 0, 0, 0, 2263, 0, 0, 1310, 0, 0,
	1356, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1309, 0, 0, 0, 1348, 0,
	1346, 0, 1329, 1321, 1322, 1328, 1327, 1323, 1349, 1326,
	1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 1333, 1334, 1335, 0, 0, 0, 0, 0,
	0, 1315, 0, 0, 0, 1346, 0, 0, 1321, 1322,
	1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311, 1312,
	1313, 1314, 1316, 1317, 1347, 1357, 0, 0, 1337, 1338,
	1339, 0, 0, 0, 0, 1307, 1308, 0, 1340, 1341,
	1342, 1350, 1351, 1352, 0, 0, 0, 0, 0, 1353,
	1354, 0, 0, 1343, 0, 0, 0, 1324, 1325, 0,
	1310, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	0, 1345, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 1309, 0, 0,
	0, 0, 0, 0, 1355, 1329, 0, 0, 0, 0,
	0, 0, 1326, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342,
	1350, 1351, 1352, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 1343, 0, 1332, 1333, 1334, 1335, 0, 1310,
	0, 1331, 1356, 0, 1315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 1309, 1347, 1357, 0,
	0, 1337, 1338, 1339, 1329, 0, 0, 0, 0, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1353, 1354, 0, 0, 0, 0, 0, 0,
	1324, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 1333, 1334, 1335, 1355, 0, 0,
	0, 1346, 0, 1315, 1321, 1322, 1328, 1327, 1323, 1349,
	1344, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317,
	0, 0, 0, 0, 0, 0, 1347, 1357, 0, 0,
	1337, 1338, 1339, 0, 0, 0, 0, 1307, 1308, 0,
	1340, 1341, 1342, 1350, 1351, 1352, 0, 1336, 0, 0,
	0, 1353, 1354, 0, 0, 0, 0, 0, 0, 1324,
	1325, 0, 1310, 0, 1331, 1356, 0, 0, 0, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 1348, 0, 1309,
	0, 0, 0, 0, 0, 0, 1355, 1329, 0, 0,
	0, 0, 0, 0, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 1333, 1334, 1335,
	0, 0, 0, 1331, 1346, 0, 1315, 1321, 1322, 1328,
	1327, 1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313,
	1314, 1316, 1317, 0, 0, 0, 1348, 0, 0, 1347,
	1357, 0, 0, 1337, 1338, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1353, 1354, 0, 0, 0, 0,
	0, 0, 1324, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1355,
	0, 0, 0, 1346, 0, 0, 1321, 1322, 1328, 1327,
	1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314,
	1316, 1317, 0, 0, 1637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1648,
	1633, 1638, 1621, 1658, 1657, 0, 1331, 0, 1623, 1622,
	0, 0, 661, 0, 691, 0, 1667, 1666, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	0, 0, 0, 0, 668, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 666, 0, 0, 0,
	0, 0, 0, 0, 0, 1659, 0, 1655, 1654, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1653, 0,
	667, 0, 0, 0, 0, 669, 0, 0, 0, 696,
	0, 0, 0, 0, 0, 675, 676, 0, 0, 0,
	686, 0, 0, 0, 0, 0, 1652, 1650, 1651, 0,
	0, 0, 0, 692, 670, 0, 1346, 0, 0, 1321,
	1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311,
	1312, 1313, 1314, 1316, 1317, 1632, 0, 0, 0, 690,
	0, 0, 0, 0, 0, 0, 1641, 1636, 1642, 1643,
	1644, 1645, 1646, 0, 1640, 0, 0, 0, 0, 0,
	0, 0, 0, 1664, 1665, 0, 0, 0, 671, 0,
	0, 0, 0, 0, 665, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 672,
	673, 0, 0, 1625, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1656, 0, 0, 0, 1634,
	1635, 679, 0, 0, 0, 0, 0, 0, 674, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 678, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1649, 693, 0, 0, 1618, 1616, 1617,
	1620, 1619, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1626, 1627, 1628, 1629, 0, 0, 0, 0, 677, 0,
	0, 0, 0, 0, 1647, 1630, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1669, 0, 0, 0, 0,
	0, 0, 0, 0, 688, 0, 0, 0, 0, 0,
	0, 0, 1624, 683, 1660, 1661, 1662, 1663, 0, 0,
	0, 0, 0, 0, 0, 663, 681, 694, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1631,
	0, 664, 0, 0, 1668, 0, 0, 0, 0, 0,
	0, 684, 0, 0, 682, 0, 0, 0, 697, 698,
	0, 0, 0, 0, 695, 0, 0, 0, 0, 0,
	0, 685, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 687,
}
var sqlPact = [...]int{

	341, -1000, -25, -1000, -1000, -1000, 218, -1000, -1000, -1000,
	-1000, 213, 211, 201, -1000, 200, 198, 196, 195, 193,
	191, 187, 181, 180, 174, 165, 164, -1000, -1000, 163,
	-1000, -1000, -1000, -1000, 161, 156, 148, -1000, 142, 1542,
	32100, 134, 133, 132, 2200, 49445, 1599, 131, 130, -1000,
	128, 1561, 37869, 1160, 1470, -1000, 124, 122, 1367, 49064,
	543, 2011, 34779, 37482, 2024, 48677, 31713, 1936, 34392, 48290,
	-1000, -1000, 1114, -1000, -1000, 47903, 112, 111, 110, 109,
	106, -1000, 104, 47516, 102, 101, 100, 98, 96, 85,
	-1000, 82, 81, 80, 79, 78, 77, 76, 75, 72,
	70, 68, 67, 66, 65, 62, 61, -1000, 58900, 60,
	59, 58, -1000, 1393, 53, 52, 51, 49, 48, -1000,
	-1000, -1000, 47, 46, 43, 41, -1000, 38, 36, 95,
	32, 30, 27, 25, 23, -1000, 1388, 716, 2243, 14000,
	1306, 1298, 1290, 1276, 1305, 842, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 52112, 49445, 20, -145,
	19, -1000, 2391, 849, 24300, 341, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 37095, 36708,
	36321, 30165, 47129, 46742, 11128, 11128, 1005, -1000, -1000, -1000,
	-1000, -1000, -29, 33243, 49445, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 275,
	-1000, -1000, -1000, -1000, -1000, -1000, 20701, 715, 20277, 548,
	19853, 485, 445, -1000, -1000, -1000, 273, -1000, -1000, -1000,
	-1000, 1322, -1000, -1000, -1000, -1000, 46355, 45968, 2099, 45581,
	29768, 29371, 45194, 49445, 49445, 1800, 1799, 44807, -1000, -1000,
	44420, -1000, -1000, 2241, 1999, 1963, 35934, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 44039, 43652, 43265, 42878,
	42491, 28974, 28577, 673, -1000, -1000, -1000, -1000, 25848, 672,
	-1000, -1000, -1000, -1000, -1000, 18, -1000, 15, 12, -1000,
	9, 8, 7, 3, -1, -2, -6, -11, -1000, -12,
	-13, -1000, -14, -18, -1000, -23, -26, 1196, 1554, 1539,
	42104, 1093, 49445, -1000, 1598, 4, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 671, 49445, -1000, -1000, 21111, 74, -1000,
	670, -1000, 1934, -1000, 21111, 74, -1000, 1594, 208, 1527,
	-1000, -1000, -1000, 1397, 1139, -1000, -1000, 49445, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2601, 1457, 661, 41717, -1000,
	1634, -1000, 802, 14820, -1000, 997, -1000, 14820, 270, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1948, 1253, 2530, 28180, 1469, 2395, 2240,
	2600, 1776, 2232, 2227, 2199, 2177, 2147, 2599, 1207, 2598,
	1182, 2597, 2141, 2137, 2564, 1419, 35547, 2596, 2594, 2111,
	1933, -1000, -1000, -1000, -1000, 1162, -1000, -1000, -1000, -1000,
	-1000, -1000, 39401, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1388, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1716, 2357, 2357, 2357, 2419,
	436, 427, -1000, 95, -1000, 2028, -1000, 1438, -1000, -1000,
	-1000, 58335, -1000, -1000, 21111, 21111, 21111, 21111, 21111, 1461,
	-1000, -1000, -1000, 711, -1000, 658, 596, -1000, -1000, -1000,
	-1000, -1000, 657, 2571, -1000, 851, -1000, -1000, -1000, -1000,
	2494, -1000, 12345, -1000, -1000, -1000, 404, 21111, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 263, 818, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	568, 1348, 562, 562, 562, -1000, -1000, 843, -1000, -1000,
	766, -1000, 762, -1000, -1000, -1000, 2012, 656, 655, -1000,
	654, 652, 650, -1000, -1000, -1000, 649, 647, 645, 644,
	643, 636, 634, 632, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 843, 843, -1000, 627, 626, 625, 616, 612,
	611, 610, 609, 608, 1514, -1000, -1000, 1514, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1002, 50969, -1000, -1000, -1000,
	-30, 49445, -1000, 445, -30, -1000, -1000, 605, -1000, 15230,
	15230, 15230, -1000, -1000, 1590, 21111, -1000, 1696, -1000, 3667,
	-233, 761, 25461, -1000, 23526, 761, 725, 27783, -1000, 1932,
	-1000, -1000, 603, 252, -1000, -1000, -1000, -1000, -1000, -1000,
	1808, 2245, 1028, -1000, 1292, 2244, -1000, 1784, 2234, 1282,
	-1000, -1000, 828, 2230, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1394, -1000, -1000, 1510, 2219, -156,
	2138, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1615, -1000, 30560,
	33243, -36, -1000, -1000, -85, -1000, 10733, 58335, -1000, -1000,
	-1000, 58335, 737, -1000, -1000, 2218, -1000, 58335, 736, -1000,
	-1000, 2217, -1000, 1930, 49445, 11128, 49445, 49445, -1000, 600,
	1670, 1588, -1000, -1000, 32862, 1784, 1669, -1000, -1000, 822,
	1665, -1000, -1000, 1663, -1000, 445, -1000, -1000, 794, -1000,
	2592, 41330, 51731, 822, 1660, -1000, -1000, -1000, 39401, -1000,
	49445, -1000, 49445, -1000, 1149, -1000, 51350, 158, 2216, -1000,
	-1000, 158, 2213, -1000, 158, 2210, -1000, 138, 2207, -1000,
	-1000, 1509, 2202, -1000, -99, 2201, -1000, -1000, -99, 2198,
	-1000, -1000, 21111, -27, -1000, -1000, -1000, 849, 31326, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 40943, 30560, 32862, 49445,
	35160, 30560, 599, 58335, -1000, 2454, 58850, 30560, 58335, -1000,
	32862, 49445, 1996, -1000, 40556, 40169, 2369, 801, -1000, -1000,
	49445, -1000, 21111, -1000, 2453, 1624, -61, -1000, -1000, -1000,
	-1000, -1000, 1702, 1719, 966, 1446, -1000, 14820, 14820, 2306,
	-1000, 247, 11128, -1000, -1000, 1054, 1731, -1000, -1000, -1000,
	-1000, 30560, 30560, -1000, 39782, -1000, -1000, -1000, 1439, 49445,
	-1000, -1000, 1971, -1000, 32481, 49445, -1000, 49445, -1000, 49445,
	-1000, 49445, -1000, 49445, -1000, -1000, -1000, -1000, -1000, 2117,
	1297, 1285, -1000, 49445, -1000, 49445, -1000, -1000, -1000, 1701,
	-1000, -1000, -1000, -1000, 49445, -1000, -1000, -1000, -1000, -1000,
	-1000, 1179, -1000, 1053, -1000, -1000, 160, -1000, -1000, 1716,
	-1000, 1553, 1777, 19429, 1772, 21111, 95, -1000, -1000, 95,
	95, 13576, -1000, -1000, -1000, 49445, -1000, 58850, 58850, 11128,
	1031, 21111, 21111, 21111, 21111, 21111, 21111, 21111, 21111, 21111,
	21111, 21111, 21111, 21111, 21111, 21111, 21111, 21111, 21111, 21111,
	21111, 21111, 21111, 21111, 21111, 21111, 21111, 21111, 21111, 21111,
	21111, 21111, 21111, 21111, 21111, 21111, 1611, 21111, 1000, 21111,
	21111, 21111, 21111, 1137, -1000, -1000, 1421, 487, 1428, -1000,
	2496, 2496, 2496, 58597, 58597, 466, 711, -1000, 21111, -1000,
	74, 21111, 7281, -1000, 2557, 1116, -1000, -1000, 427, 52953,
	1661, -1000, 421, 11525, -1000, -1000, -1000, 12345, 596, 19005,
	839, 58335, 10338, 2031, 1875, -1000, 2556, -1000, -1000, 2494,
	-1000, -1000, -1000, -1000, 1026, 1017, 1014, 1012, 595, 695,
	687, 680, 679, 667, 21111, 21111, 21111, 21111, 21111, 21111,
	21111, 21111, -1000, -1000, 18595, 18171, 17747, 17323, 16899, 22341,
	16475, 21111, 12755, -1000, -61, -1000, 50969, -1000, 49445, -30,
	2452, 21111, 136, -1000, 56970, -1000, 136, 136, 594, -33,
	58335, 1754, 1753, 24687, 1651, 1481, 1481, 1481, -1000, 587,
	704, 761, 7949, 38250, 1492, 761, 761, 222, 272, 420,
	23139, 1696, 38250, -1000, -1000, 49445, 584, 7281, 11128, -52,
	1361, -1000, 34005, 2358, 2352, 2332, 1102, -1000, 1082, 2418,
	39401, 2439, 484, 2365, 1928, -1000, -1000, 994, 39401, 1784,
	-1000, 58850, -1000, 1817, 2417, 1140, 1146, 1140, 1140, 1138,
	39401, 993, 1404, 30560, 2363, 989, -53, 2437, 210, 2356,
	1926, 988, -1000, -1000, 49445, 11128, 2353, 1048, 753, -36,
	33243, 49445, 245, -1000, 21111, 74, 21111, 74, 1067, -35,
	243, 1768, 1766, 222, -1000, 33624, 2450, 2195, 49445, 1773,
	-1000, 1784, 2188, -1000, 1385, -1000, 2185, 2182, 2447, 578,
	2590, -1000, 1586, 1656, -1000, -1000, -1000, 1581, 1653, 975,
	2180, 832, 550, 2446, 550, 27009, -1000, 49445, -1000, 49445,
	-1000, -1000, 49445, -1000, 49445, -1000, 49445, -1000, 49445, 49445,
	-1000, 49445, 30560, 30560, 30560, -40, 3983, 31326, -54, 821,
	986, -41, -1000, 409, 49445, 875, 33624, 5024, -62, -1000,
	1069, -1000, -1000, -1000, -1000, 518, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 843, 583,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 568, 1348, 562, 562, 562, -1000, -1000, -1000,
	766, -1000, 762, -1000, -1000, -1000, 843, 843, -1000, -1000,
	-183, 1924, -85, 35160, 753, -1000, 753, -1000, 1962, -1000,
	2371, 785, -68, 912, -61, -1000, 1514, -1000, 1184, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2567, -1000, 2516, -1000, -1000, 2548, -38, -1000,
	-38, -1000, 11128, -1000, 49445, 1958, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 49445, -1000, 49445, -1000, -1000, -1000,
	-1000, -1000, -1000, 1159, -1000, 1956, -1000, 1954, -1000, 241,
	-1000, -1000, -1000, 49445, 49445, 49445, -1000, 39401, -1000, -1000,
	-1000, -1000, 58335, -1000, 433, -1000, -1000, 58335, 1199, 1780,
	-1000, 1780, -47, -1000, 56898, 1738, 49445, -1000, -1000, -1000,
	-1000, -1000, -1000, 800, 1070, 1070, 992, 992, 992, 992,
	2543, 868, 313, 628, 4392, 4392, 4392, 4392, 4392, 4392,
	4392, 4392, 393, 990, 990, 393, 393, 393, 393, 393,
	990, 990, 990, 4392, 4392, 4392, 58597, 58434, 5330, 21111,
	21111, 980, 1398, 487, 5254, 21111, 5401, 5401, 5401, 5401,
	-1000, 1284, -1000, -1000, -1000, -1000, 1922, 561, 22341, 22341,
	-1000, -1000, -1000, -1000, 11935, 21111, -1000, -1000, -1000, -1000,
	16051, -1000, 56244, -243, 390, -187, 11, -1000, 21111, 21111,
	21111, 389, -1000, 378, -1000, 976, -1000, 964, 961, 960,
	-1000, 549, 232, 21111, 49445, -1000, 54181, 700, -76, -1000,
	1119, -1000, 21111, 231, -1000, 1464, 547, 542, 377, -73,
	799, 796, 792, 778, 21111, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 58172, 53890, 53819, 53748, 52882,
	53457, 53386, -79, 376, -1000, 1919, -187, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 368, -1000, -80, -1000, -86, -1000,
	367, -1000, 57916, -187, 366, 5885, -1000, 22341, 22341, 22341,
	-1000, 365, -1000, 56607, -1000, 57841, 15641, 15641, 15641, 364,
	57585, 21111, -187, -1000, -1000, 541, -87, 832, 15230, 23913,
	11128, -1000, 832, 832, 21111, -1000, 21111, 24687, 24687, 1879,
	1724, 24687, -1000, -1000, -1000, -1000, 38250, 512, 761, 38250,
	-1000, 2494, 1769, -1000, -1000, -1000, 49445, 445, -1000, 38250,
	38250, 11128, 761, -1000, 363, 26235, 11, 230, 1727, 49445,
	49445, 49445, -1000, -1000, 1650, 50588, 1647, 58850, 49445, -1000,
	-1000, 540, 538, 1734, 1726, 49445, 49445, 50207, 49826, 49445,
	1366, 21111, 1549, 1666, 74, -1000, 74, 776, 535, 49445,
	1281, -1000, -1000, -1000, -1000, -1000, 49445, -1000, -1000, 2544,
	-1000, 1140, -1000, -1000, -1000, 1140, 1784, 1252, 49445, 30560,
	827, 774, 49445, 1413, 74, -1000, 74, 773, 534, 11128,
	1260, -1000, 771, 49445, 1828, -1000, 1610, -1000, -1000, 9943,
	58335, -1000, 58335, -1000, -1000, -1000, 11128, 1851, 1851, 362,
	-50, -1000, -1000, -1000, -1000, -1000, -1000, 1795, 49445, 566,
	49445, 74, 49445, 121, 821, 30560, 49445, 30560, 30560, 30560,
	74, 2588, 533, 2587, -1000, 49445, 2178, 49445, 2168, 2253,
	744, 49445, 1508, 21111, 1264, -1000, 26622, 858, 49445, 1191,
	105, -1000, -1000, -1000, 1, 49445, -1000, -1000, 158, 158,
	158, -1000, 138, 1509, -1000, -99, -99, -1000, -1000, -1000,
	3983, 1914, 39020, 49445, 2465, 821, 532, 30560, -88, -1000,
	881, 967, 963, -1000, 58850, -1000, 709, 945, -1000, 2533,
	530, 2494, -1000, 821, 49445, 97, -1000, 825, 1551, -1000,
	14820, 14820, -1000, 1514, -1000, -1000, 1200, -1000, 1301, -1000,
	-1000, -1000, -1000, 14820, -1000, -1000, 1047, -85, -85, -1000,
	1155, 1154, 49445, -1000, -1000, -1000, -1000, 1199, -1000, 21111,
	-1000, -1000, -1000, 13576, -1000, -1000, -1000, 49445, -185, 21111,
	21111, 5067, 3713, 21111, 22341, 22341, -1000, 21111, 3249, -1000,
	-1000, -1000, -1000, -1000, 1907, 528, 21111, 58850, 5696, 5319,
	-1000, 361, 53315, 393, -1000, 21111, -1000, 360, 14410, -1000,
	57229, -17, -17, -1000, 2565, 1682, 1337, 1262, 1171, 2522,
	9548, -187, -89, -1000, -1000, 707, 2247, -1000, 21111, 57328,
	9153, -1000, 27396, 834, 1508, -1000, -1000, 2494, -1000, -1000,
	-1000, -1000, 56173, 58850, 58850, 21111, 21111, -1000, 21111, 21111,
	21111, -1000, -1000, 21111, -1000, -1000, -1000, -1000, 1902, 21111,
	-1000, 58850, 58850, 22341, 22341, 22341, 22341, 22341, 22341, 22341,
	22341, 22341, 22341, 22341, 22341, 22341, 22341, 22341, 22341, 22341,
	22341, 22341, 1782, 22341, 2487, 2487, 2487, -1000, 1941, 1902,
	21111, 21111, 58850, 356, 355, 344, -1000, 21111, -187, 5024,
	-1000, 1869, -1000, -81, -1000, 1696, -1000, -1000, 1869, 1869,
	-94, 58335, -1000, 1879, -1000, 526, 21111, 24687, -1000, 694,
	-1000, -101, -1000, 38250, -1000, 684, -240, -1000, 748, -1000,
	445, -1000, -1000, -1000, 227, 38250, -1000, -107, -1000, 2445,
	342, 11128, -1000, -1000, 958, 956, -1000, 2161, -1000, 1646,
	-1000, 854, -1000, 1229, 21111, 25074, 525, 524, 1369, -1000,
	2153, 1509, 2150, 1509, -1000, -1000, 787, -1000, 58335, 523,
	520, -1000, -52, 1359, -1000, -1000, 21111, 21111, -1000, 955,
	-1000, -1000, -1000, 1784, 954, -1000, -1000, 1357, 21111, -1000,
	-1000, -1000, -1000, 21111, 21111, -1000, -53, 953, 21111, 2126,
	821, 1898, 1056, -1000, -1000, -1000, -1000, -1000, -1000, 1787,
	33624, 49445, 517, 49445, 516, -1000, -1000, 515, 49445, -1000,
	-1000, 1784, -1000, 822, -1000, -1000, -1000, 2584, -1000, 869,
	11128, 511, 11128, 1711, 744, 30945, -1000, 822, 1777, -1000,
	58335, -1000, 1191, 13165, 2346, -108, -1000, 224, -1000, -1000,
	-1000, 832, 27009, 24687, 21111, 2580, -109, -1000, -1000, -1000,
	-1000, -1000, -1000, 74, -55, 508, -1000, 747, 746, -85,
	1526, -1000, 30560, 49445, 49445, -1000, 2497, -1000, 677, 339,
	2494, 338, -1000, -85, 49445, -1000, 1521, 11128, 49445, 49445,
	11128, 49445, -1000, -1000, -61, -1000, -1000, -1000, -1000, 49445,
	-1000, -1000, -1000, 1530, 55817, -1000, 2354, 11128, 2460, 5401,
	21111, 21111, 581, 4455, 4160, 5401, 21111, 21111, 58850, 5994,
	-110, 21111, 21111, -1000, 21111, 676, 58335, 2560, 21111, 336,
	334, 333, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	330, -1000, -1000, -1000, -1000, -1000, 58335, 21111, 223, -1000,
	-1000, -1000, 52493, -1000, 21111, 329, 323, -1000, 322, 318,
	53024, 6587, 55746, 55675, 55319, 58335, 1941, 58335, -1000, -1000,
	770, 770, 1124, 1124, 1124, 1124, 2487, 458, 597, 424,
	359, 359, 359, 405, 911, 911, 359, 359, 359, 1894,
	1740, 504, 5783, -1000, -1000, 58335, 58335, 315, -1000, -1000,
	-1000, -187, 310, 1848, 2412, -1000, 24687, 1848, 1848, -1000,
	-1000, 49445, 58335, -1000, -233, -1000, 2494, -1000, -1000, 1769,
	-1000, 8358, -1000, 11128, -1000, -1000, 26235, -1000, 503, -1000,
	159, 49445, 49445, 49445, 2148, -1000, 3144, -1000, 55248, -115,
	-1000, 2382, 2382, 21111, 222, 25074, 49445, -1000, 1318, 1775,
	903, 49445, -1000, 49445, -1000, -1000, 49445, 49445, 49445, 49445,
	49445, 58335, -116, 49445, 49445, 30560, 58335, 58335, -117, 11128,
	58335, 2350, -1000, 30560, 1010, 1413, 1815, -1000, 502, 25074,
	496, 49445, 33624, 2444, -1000, -1000, -1000, -1000, 495, 2077,
	1577, 25074, 1568, 1713, 744, 30945, -1000, 975, 1191, -1000,
	-1000, -63, -1000, 493, 74, 49445, 2577, 1508, -1000, -69,
	58335, -1000, 745, -1000, 38635, 38635, 30560, 30560, -1000, 309,
	2294, 2287, 629, -1000, -1000, 300, -1000, -85, 1625, -1000,
	-1000, 1429, 1606, -1000, -1000, -1000, -1000, -1000, 2354, 5401,
	5401, 21111, 21111, 21111, 5401, 5994, -118, -1000, 5401, 5401,
	-187, -1000, -1000, 57229, -1000, -1000, -1000, -1000, 58335, 8758,
	1433, -1000, 55177, -1000, -1000, -1000, -1000, 21111, 21111, -1000,
	-1000, -1000, -1000, -1000, 22341, 1886, 490, 58850, -1000, -1000,
	830, 21111, 21111, 1696, 830, 830, -123, 761, -1000, -1000,
	-1000, 2494, 159, -1000, 2575, 11128, -1000, -1000, -1000, 49445,
	-1000, 49445, -1000, 11128, 49445, 1857, 1635, -1000, -1000, 1723,
	489, 22341, 49445, 717, -1000, 1333, 25074, 2354, 11128, 2354,
	54821, -124, -125, 1631, -1000, -1000, 1630, 21111, -1000, 58850,
	1509, 1509, -126, -132, -1000, 951, 947, 946, -1000, -1000,
	-1000, 935, -1000, 767, -99, 21111, -1000, -1000, 1444, 25074,
	-133, 25074, -134, 293, 74, 25074, -1000, -1000, 49445, -140,
	49445, -1000, 744, 30945, -1000, 2253, -1000, 2262, 49445, 2327,
	-1000, -1000, -1000, 1777, 487, -1000, -149, -1000, -1000, 821,
	486, 480, -1000, -1000, -100, -1000, 697, 690, -1000, -1000,
	-1000, 11128, 1045, -1000, 5401, 5401, 5401, -1000, 287, -1000,
	-1000, 1508, 2411, -1000, 54750, 54679, 563, 22341, 58850, -150,
	-1000, 49445, 58335, -187, -1000, -1000, -1000, 38250, 564, -1000,
	-1000, 1709, -1000, -1000, -1000, 49445, 1641, -1000, -1000, 21111,
	5783, 479, 21111, -1000, 1787, 477, -1000, -1000, -1000, -1000,
	-1000, -1000, 2382, -1000, 1310, -1000, -1000, 58335, 2368, -1000,
	-1000, 474, 473, 49445, 49445, 471, 469, 21111, 58335, 49445,
	-152, 1333, -158, -1000, 1787, -1000, -159, 869, -1000, 468,
	30945, -1000, 1711, 1043, -160, 49445, 1191, -1000, -1000, -1000,
	30560, 30560, 1625, -1000, 49445, -1000, 49445, -1000, 49445, -1000,
	1268, 21111, -1000, -1000, 563, -166, -1000, -135, -1000, 2443,
	-1000, -1000, -1000, -1000, 2143, 54323, 1664, 49445, 54252, 1413,
	49445, 2354, 49445, 866, 11128, 1429, 1429, -1000, -1000, 21111,
	21111, 58335, 467, -1000, 1787, 1333, 1413, 1333, 462, 25074,
	-1000, 1713, 1101, -1000, 832, -1000, -1000, -167, -168, -1000,
	-175, -178, -1000, 286, 21931, 21931, -187, -1000, 49445, 460,
	2123, -1000, 1541, 1550, 283, 889, -1000, -186, -1000, 445,
	-1000, 21111, -1000, -188, -1000, 855, -191, -1000, 853, -198,
	-199, 49445, 1413, 1787, -1000, 1787, 25074, -200, -1000, 27009,
	-1000, 821, 821, -1000, -1000, -1000, -1000, -1000, 22736, 1493,
	1203, 56536, -1000, -1000, -1000, 49445, -1000, 1565, 1563, 1174,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1664, 58335, -1000,
	1429, 1811, -1000, 1429, 1884, -1000, -1000, -201, -1000, 1413,
	1413, -206, -1000, -194, -1000, -1000, 2459, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2270, -1000, 886, 1601, 1601, 1541,
	-1000, 444, -1000, 439, 1504, -1000, -1000, 1333, -1000, 21521,
	-1000, 2469, -1000, -1000, 1756, -1000, -1000, 21111, 21111, -1000,
	-1000, -1000, 1787, -1000, -1000, -1000, -1000, -209, -229, 1413,
	1413, 928, -1000, -1000, 438, 21111, -231, 1413, -1000,
}
var sqlPgo = [...]int{

	0, 3057, 3052, 2023, 3049, 2409, 3048, 3047, 3046, 3041,
	3040, 2404, 3039, 3038, 3037, 3027, 3026, 3024, 3022, 3020,
	3017, 3013, 3012, 3008, 3006, 3003, 3000, 2999, 2998, 2997,
	2994, 2993, 2992, 2988, 2398, 2987, 2395, 2985, 2984, 2983,
	2982, 2981, 2979, 2978, 2977, 33, 2973, 2971, 2970, 2968,
	2967, 2373, 2966, 2956, 2369, 2955, 2954, 2341, 2953, 2947,
	2337, 2944, 2327, 2943, 2941, 2324, 2939, 2929, 2307, 2928,
	2261, 2927, 2926, 2232, 2922, 98, 108, 2918, 2227, 2917,
	2915, 2221, 2218, 2216, 2910, 2190, 2906, 2905, 2187, 2129,
	2904, 77, 2902, 2900, 2899, 2898, 2117, 2100, 2896, 2895,
	2894, 164, 2893, 2061, 2891, 2890, 2888, 2887, 2883, 2880,
	2876, 2871, 2868, 2865, 2863, 2860, 2857, 2856, 2854, 2853,
	2852, 2848, 2845, 2844, 2843, 2842, 2840, 2837, 183, 113,
	2832, 2830, 2048, 2021, 2826, 2823, 44, 54, 21, 73,
	131, 165, 5073, 148, 2821, 2818, 2814, 2813, 2812, 29,
	121, 114, 117, 109, 159, 2811, 2809, 59, 50, 22,
	20, 82, 2807, 2804, 2803, 2246, 104, 2801, 2800, 169,
	154, 2799, 250, 2798, 32, 72, 91, 97, 156, 48,
	2797, 102, 15, 2794, 116, 261, 2793, 51, 39, 23,
	3141, 93, 185, 55, 86, 170, 166, 145, 141, 119,
	208, 2792, 175, 81, 138, 2791, 2789, 2782, 52, 135,
	5, 4, 142, 17, 2772, 9, 2768, 12, 2766, 2763,
	2762, 2752, 16, 110, 42, 37, 2749, 31, 246, 129,
	2748, 177, 2747, 65, 2746, 178, 139, 2, 150, 2744,
	2742, 2740, 2734, 2732, 74, 14, 79, 2730, 2729, 95,
	153, 2728, 26, 126, 85, 88, 184, 162, 94, 146,
	158, 2725, 2723, 2721, 118, 2720, 134, 115, 2718, 2717,
	30, 40, 155, 43, 2715, 2714, 107, 2713, 143, 2712,
	2710, 2709, 181, 111, 127, 7, 38, 83, 8, 151,
	105, 56, 47, 2708, 3677, 1599, 1320, 2707, 96, 68,
	35, 71, 103, 161, 36, 2706, 2704, 1574, 2701, 2696,
	2688, 2683, 122, 2676, 2675, 2673, 92, 34, 62, 2671,
	106, 49, 192, 180, 58, 147, 130, 171, 120, 2670,
	128, 87, 2669, 137, 173, 75, 2668, 1315, 2665, 133,
	2664, 2663, 2662, 2661, 493, 2660, 2659, 2658, 1225, 2657,
	101, 2656, 132, 124, 174, 61, 112, 157, 152, 1125,
	2651, 136, 25, 2650, 551, 28, 0, 4194, 3977, 2649,
	144, 89, 2648, 2647, 2646, 2645, 27, 10, 1, 6,
	11, 13, 245, 219, 2643, 2636, 149, 90, 99, 2635,
	188, 140, 2634, 2633, 2631, 45, 2630, 24, 2628, 18,
	2627, 2625, 19, 3, 2622, 2620, 163, 2618, 2617, 2615,
	2452, 2614, 172, 2613, 2612, 125, 2611, 2610, 2609, 2608,
	2105, 2607, 2606, 80, 57, 123,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 8, 8, 9, 9, 9, 33, 33, 11, 11,
	10, 10, 10, 12, 7, 7, 7, 7, 7, 7,
	7, 7, 14, 14, 24, 24, 15, 26, 412, 412,
	18, 28, 19, 29, 13, 22, 20, 20, 30, 17,
	17, 25, 25, 151, 151, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 411, 411, 153, 153, 152, 148,
	148, 414, 414, 154, 154, 154, 156, 156, 34, 34,
	89, 89, 89, 139, 82, 82, 82, 82, 82, 77,
	77, 364, 364, 365, 365, 135, 135, 136, 136, 136,
	136, 137, 137, 138, 138, 138, 48, 36, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 39, 39, 39, 39, 39, 39,
	46, 46, 129, 129, 49, 49, 49, 49, 49, 49,
	49, 49, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 60, 60, 50,
	332, 332, 62, 62, 63, 63, 63, 63, 63, 63,
	64, 64, 64, 64, 64, 64, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 71, 71, 71, 72,
	72, 72, 69, 69, 69, 67, 67, 67, 66, 66,
	66, 70, 70, 70, 68, 68, 68, 236, 236, 73,
	73, 73, 73, 73, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	76, 76, 76, 76, 76, 76, 76, 76, 334, 334,
	74, 74, 305, 305, 78, 78, 265, 265, 79, 79,
	79, 79, 79, 80, 80, 80, 80, 90, 90, 90,
	90, 410, 410, 229, 229, 169, 169, 169, 169, 85,
	85, 85, 85, 86, 86, 86, 87, 87, 134, 134,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	40, 40, 40, 41, 41, 42, 42, 43, 43, 44,
	44, 45, 45, 45, 45, 45, 97, 97, 97, 99,
	96, 96, 96, 98, 98, 98, 98, 100, 100, 101,
	101, 101, 101, 101, 101, 102, 102, 358, 358, 243,
	243, 356, 356, 357, 357, 206, 206, 206, 206, 206,
	207, 207, 207, 363, 363, 363, 363, 363, 363, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 119, 119, 119, 128,
	128, 128, 128, 128, 128, 128, 121, 121, 121, 112,
	112, 104, 104, 104, 104, 108, 108, 108, 108, 108,
	105, 105, 109, 109, 111, 111, 113, 113, 113, 113,
	113, 113, 106, 106, 106, 106, 115, 115, 115, 115,
	114, 114, 124, 124, 124, 124, 124, 124, 319, 319,
	120, 120, 120, 120, 123, 123, 123, 123, 118, 118,
	118, 122, 122, 125, 125, 125, 125, 107, 107, 107,
	417, 417, 417, 126, 126, 117, 117, 127, 127, 127,
	127, 127, 127, 127, 116, 116, 116, 413, 413, 110,
	408, 408, 406, 406, 406, 406, 406, 406, 406, 407,
	407, 409, 409, 83, 83, 83, 55, 55, 56, 56,
	208, 208, 209, 209, 287, 287, 287, 287, 210, 210,
	155, 155, 155, 213, 214, 214, 211, 211, 212, 212,
	212, 216, 216, 215, 218, 218, 217, 286, 374, 374,
	375, 375, 375, 375, 375, 375, 375, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 372, 372, 372,
	373, 370, 370, 371, 371, 371, 371, 418, 418, 285,
	285, 222, 222, 377, 377, 377, 377, 378, 378, 378,
	378, 378, 381, 380, 379, 379, 379, 379, 379, 315,
	315, 315, 59, 59, 59, 254, 254, 253, 253, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 131, 131, 57, 57, 57, 161, 161, 54,
	54, 54, 58, 58, 61, 61, 61, 61, 61, 61,
	53, 53, 53, 53, 53, 270, 270, 270, 269, 269,
	227, 227, 321, 321, 321, 173, 173, 174, 174, 149,
	149, 149, 21, 23, 23, 16, 16, 16, 16, 16,
	16, 31, 31, 32, 32, 27, 27, 415, 415, 416,
	416, 84, 84, 88, 88, 88, 94, 94, 130, 130,
	130, 130, 130, 130, 130, 35, 35, 35, 35, 47,
	47, 47, 47, 92, 421, 421, 421, 93, 93, 420,
	420, 168, 168, 168, 168, 170, 170, 282, 282, 283,
	283, 422, 422, 284, 284, 284, 163, 162, 164, 164,
	52, 52, 52, 157, 157, 158, 158, 159, 159, 160,
	160, 423, 423, 81, 81, 81, 133, 133, 202, 202,
	278, 278, 278, 223, 223, 179, 179, 281, 281, 279,
	279, 279, 252, 252, 252, 132, 132, 232, 232, 245,
	245, 246, 246, 329, 329, 247, 91, 91, 142, 142,
	140, 140, 140, 140, 140, 140, 141, 141, 141, 143,
	143, 143, 143, 143, 143, 143, 146, 146, 146, 146,
	147, 147, 147, 145, 145, 388, 388, 388, 390, 390,
	391, 387, 387, 389, 389, 419, 419, 256, 256, 256,
	220, 221, 219, 219, 424, 424, 225, 225, 224, 226,
	226, 320, 320, 320, 250, 250, 250, 250, 273, 273,
	271, 271, 272, 272, 274, 274, 275, 275, 275, 276,
	276, 277, 277, 249, 249, 301, 301, 144, 144, 144,
	231, 231, 231, 233, 233, 292, 292, 292, 293, 293,
	291, 291, 291, 291, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 323, 323, 234, 234, 324, 280, 280,
	404, 404, 404, 405, 405, 318, 318, 325, 325, 325,
	325, 325, 325, 316, 316, 317, 317, 330, 331, 331,
	259, 259, 259, 259, 257, 257, 258, 258, 326, 326,
	326, 326, 251, 251, 327, 327, 327, 288, 288, 335,
	335, 335, 335, 350, 230, 230, 230, 345, 345, 336,
	336, 336, 336, 336, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 339, 339, 339, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 349, 349, 349,
	349, 349, 340, 340, 346, 347, 341, 342, 348, 348,
	348, 348, 352, 352, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 344, 266, 266, 266, 266, 266, 266,
	266, 266, 266, 266, 266, 266, 266, 266, 267, 267,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 296, 296, 296, 296,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 382, 382, 382, 382, 382, 382, 382,
	382, 385, 385, 386, 386, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 392, 392, 393, 393, 395, 395,
	396, 396, 397, 398, 398, 398, 399, 400, 400, 394,
	394, 401, 401, 401, 402, 402, 403, 403, 403, 403,
	403, 307, 307, 308, 308, 314, 314, 314, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 171, 171, 171, 171, 171, 241,
	241, 239, 239, 239, 242, 242, 240, 240, 238, 238,
	237, 237, 304, 304, 302, 302, 306, 306, 260, 260,
	351, 351, 351, 351, 351, 351, 351, 261, 261, 261,
	268, 262, 262, 263, 263, 263, 263, 263, 298, 299,
	264, 264, 264, 300, 300, 309, 313, 313, 312, 311,
	311, 310, 310, 289, 289, 290, 290, 248, 248, 425,
	425, 244, 244, 328, 328, 328, 328, 204, 204, 235,
	235, 203, 203, 197, 197, 198, 198, 198, 198, 228,
	228, 353, 353, 353, 354, 355, 303, 189, 188, 176,
	177, 187, 186, 185, 175, 178, 182, 183, 184, 180,
	181, 193, 192, 191, 190, 333, 199, 199, 200, 200,
	200, 201, 201, 201, 201, 172, 172, 194, 194, 195,
	196, 196, 165, 165, 165, 166, 166, 167, 167, 362,
	362, 360, 360, 360, 361, 361, 361, 361, 359, 359,
	359, 359, 359, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 6, 4, 6, 6, 6, 1, 1,
	5, 5, 6, 6, 7, 7, 7, 10, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 9, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 1, 2, 1, 2, 7, 3, 6,
	2, 0, 8, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 3, 5, 3, 1, 3, 2,
	2, 5, 6, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 3,
	5, 2, 3, 0, 3, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 4, 7, 2, 6, 4, 7,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 3,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 6, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 1,
	3, 2, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 5, 7, 3, 3,
	3, 3, 4, 4, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 5, 4, 6, 4, 6, 4, 1, 0,
	2, 3, 3, 3, 6, 4, 2, 3, 4, 2,
	3, 3, 3, 4, 3, 3, 3, 3, 4, 3,
	1, 1, 1, 2, 3, 2, 3, 7, 7, 8,
	10, 7, 4, 5, 5, 5, 3, 1, 1, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 8, 11, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 4, 7, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 7, 3, 1, 0, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 6, 3, 6, 7, 6, 5, 3, 4,
	13, 16, 9, 12, 4, 2, 2, 0, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 0, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 1, 3, 1, 3, 8, 5, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 5, 1, 0, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 4, 2, 5,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 3, 4, 1, 5,
	3, 4, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 2, 3, 0, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 2, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 1, 1, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 1, 5, 5, 3, 1, 1, 1,
	2, 2, 2, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 1, 2, 3, 2, 3, 2, 3, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 1, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 2, 2, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 424, -4, -34, -36, -48, -46,
	-49, -79, -62, -63, -64, -78, -73, -77, -80, -81,
	-82, -83, -74, -89, -88, -90, -94, -40, -91, -84,
	-85, -95, -103, -130, -131, -132, -133, -5, -11, 25,
	36, -37, -38, -39, 51, 78, 66, -57, -54, -51,
	-60, 80, 100, -389, 104, -65, -68, -70, 109, 117,
	122, 123, 147, 156, 258, 265, 287, 289, 291, 300,
	-42, -41, 118, -140, -142, 285, -86, -87, -96, -97,
	-98, -99, -134, 318, -104, -105, -106, -107, -108, -109,
	-110, -111, -112, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, 321, -35,
	-47, -93, -92, 365, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -388,
	-66, -67, -69, -71, -72, -143, -141, 421, 286, 375,
	37, 330, 67, 112, 295, 20, -14, -18, -19, -15,
	-17, -20, -16, -24, -28, -29, -26, -25, -27, -30,
	-31, -32, -33, -21, -22, -13, 392, 400, -146, -144,
	-145, -147, 307, 383, 343, 425, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 2, 343, 386,
	308, 376, 93, 169, 270, 256, -406, 2, 4, -368,
	-366, -198, -197, 343, 93, 30, 38, 39, 41, 44,
	56, 57, 58, 61, 97, 98, 116, 124, 125, 136,
	149, 151, 159, 160, 161, 176, 182, 184, 164, 205,
	234, 235, 248, 252, 262, 264, 273, 297, 324, 339,
	354, 355, 356, 362, 363, 383, 384, 388, 395, 20,
	21, 22, 23, 25, 35, 36, 37, 40, 42, 43,
	46, 47, 48, 49, 50, 51, 52, 55, 60, 65,
	66, 67, 68, 69, 74, 71, 72, 73, 76, 78,
	79, 82, 83, 91, 92, 94, 95, 96, 100, 102,
	104, 107, 108, 109, 111, 113, 114, 117, 118, 121,
	119, 349, 351, 120, 122, 123, 133, 134, 135, 137,
	138, 140, 142, 146, 148, 153, 154, 155, 156, 157,
	158, 170, 165, 171, 175, 178, 177, 179, 180, 181,
	172, 186, 189, 190, 191, 193, 194, 197, 198, 199,
	202, 201, 204, 207, 208, 211, 212, 215, 217, 220,
	221, 224, 222, 223, 226, 227, 229, 228, 236, 237,
	239, 240, 243, 244, 247, 250, 253, 254, 255, 256,
	257, 258, 259, 261, 263, 265, 267, 268, 269, 270,
	271, 272, 274, 275, 277, 278, 279, 280, 281, 285,
	283, 284, 286, 287, 288, 289, 291, 293, 294, 295,
	296, 298, 319, 320, 332, 300, 301, 302, 303, 304,
	305, 306, 310, 314, 311, 312, 313, 308, 309, 315,
	316, 318, 321, 323, 325, 326, 329, 330, 331, 333,
	336, 337, 338, 334, 335, 328, 341, 342, 344, 345,
	346, 347, 348, 350, 352, 357, 360, 361, 365, 366,
	368, 369, 372, 373, 374, 379, 375, 377, 380, 381,
	382, 387, 386, 393, 394, 396, 397, 398, -196, -165,
	414, -195, 424, 424, 424, 2, 190, 191, 269, 268,
	315, 316, -190, -194, -195, -196, -165, 4, -366, -368,
	93, 241, 424, 424, 424, 2, 343, 331, 55, 308,
	376, 293, 386, 366, 107, -269, 186, 93, 371, -165,
	265, 24, 2, 102, 175, 374, 373, 24, 261, 309,
	345, 347, 2, 424, 424, 2, 386, 308, 343, 169,
	93, 376, 293, -184, 2, -165, -76, 2, 421, 27,
	-75, -5, -51, -60, -65, -78, -73, -11, -34, -36,
	-57, -54, -62, -68, -70, -82, -81, -83, -85, -89,
	-88, -91, -96, -97, -103, -132, -133, 80, 25, 109,
	318, 118, 185, 2, -410, -229, 2, 24, -169, -165,
	80, 147, 307, -139, 343, 2, -165, 190, 191, 2,
	-184, 2, -406, 2, 190, 191, 2, -410, -229, 23,
	2, -165, 2, 304, 321, -170, 2, 300, -165, 424,
	424, 424, 424, 424, 424, 212, 60, 297, 315, -101,
	361, -100, 354, 302, -102, -358, 2, 224, -165, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 2, -128, 315, 331, 154, 36, 60, 24, 65,
	94, 148, 169, 170, 198, 75, 76, 268, 212, 191,
	-319, 316, 344, 303, 341, 361, 80, 377, 294, -413,
	119, 4, 93, 224, 317, 354, 69, 348, 349, 424,
	424, 424, -419, 2, 343, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, -141, -143, -142, 424,
	424, 424, 424, 424, -224, -225, 370, 183, 115, 246,
	-140, -142, 2, -388, -128, 315, 2, 60, 24, -356,
	2, -294, 241, -296, 412, 413, 407, 230, 399, -307,
	99, 219, 218, -297, -309, 116, 297, -242, 7, 8,
	5, 6, -172, -337, -303, -344, 364, 126, 233, -201,
	427, 9, 421, -385, -142, -308, 31, 53, -360, -200,
	-338, -347, -342, -343, -345, 42, 49, 48, 352, 223,
	310, 311, 312, 313, 325, 379, 165, 40, 239, 240,
	177, 4, 184, -199, -165, -382, -383, -366, -367, 176,
	178, 179, 180, 181, 182, 324, 39, 273, 137, 138,
	136, 108, 98, 97, 235, 44, 43, 41, -348, 95,
	354, 355, 356, 357, 193, 194, 63, 85, 86, 84,
	89, 88, 90, 87, 317, 376, 54, 30, 159, 160,
	164, 234, 161, 61, -384, 335, 81, 127, 145, 174,
	162, 187, 188, 192, 206, 209, 225, 232, 249, 251,
	292, 322, 57, 56, 384, 124, 125, 149, 205, 252,
	262, 339, 362, 363, -420, 2, 361, 361, 2, -420,
	2, -420, 2, -168, 2, 361, 358, -421, 361, 395,
	-390, 274, -391, -184, -390, 424, 424, 426, 424, -219,
	-220, -221, 2, 24, 105, 421, 2, -322, 2, 419,
	-326, -142, 200, -325, 421, -323, -190, 242, -386, 298,
	-382, -383, -172, -165, -200, 4, 219, 218, -3, 2,
	-326, 159, -190, 2, -326, 159, 2, -191, 159, -326,
	-194, 2, -364, 159, -362, 9, -361, 5, 4, -366,
	-368, -367, 63, 2, -175, -165, 2, -203, 159, -190,
	-187, -359, 4, -366, -368, -367, -369, 24, 26, 27,
	28, 29, 31, 32, 33, 34, 45, 53, 54, 59,
	62, 64, 75, 80, 84, 85, 87, 86, 88, 89,
	90, 99, 101, 103, 105, 106, 110, 112, 115, 126,
	128, 141, 143, 144, 147, 150, 152, 163, 169, 173,
	183, 185, 200, 203, 210, 213, 214, 230, 231, 233,
	238, 241, 242, 245, 246, 260, 266, 276, 290, 307,
	317, 327, 340, 343, 353, 358, 359, 364, 370, 371,
	376, 378, 385, 389, 390, 391, 392, -188, -359, 358,
	426, -235, -197, -198, -228, -165, 423, -294, 2, -91,
	2, -294, 159, 2, -91, 159, 2, -294, 159, 2,
	-91, 159, 2, -222, 421, 423, 343, 64, 2, -190,
	159, -180, 2, -165, 141, -191, 159, 2, -194, -364,
	159, 2, -364, 159, 2, -193, 2, -190, -192, -194,
	-192, 169, 169, -175, 159, 2, -165, 24, 144, 2,
	185, 2, 185, 2, -327, 2, -326, -236, 159, 2,
	-190, -236, 159, 2, -236, 159, 2, -204, 159, 2,
	-203, -175, 159, 2, -365, 159, 2, -364, -365, 159,
	2, -265, 421, -334, 2, -333, -361, 383, 421, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 315, -139, 241, 358,
	426, 421, -190, -294, -91, -305, 421, 144, -294, -91,
	241, 144, 243, 2, 93, 343, 398, 24, -165, 2,
	319, 2, 421, -101, 58, 361, -283, 2, -284, -162,
	-163, -164, 189, 267, 272, 398, -356, 358, 404, 144,
	-356, -243, 423, -128, 2, 141, 378, 2, 7, 2,
	-364, 271, 133, 2, 319, 2, 268, 316, 60, 144,
	2, 2, -408, 2, 241, 144, 2, 144, 2, 144,
	2, 144, 2, 144, 2, 2, 268, 316, 2, 360,
	199, 120, 2, 144, 2, 144, 2, 5, 2, 189,
	267, 332, 2, -190, -417, 2, 343, 386, 308, 2,
	2, 144, 2, 144, 398, 2, -251, -326, -224, -225,
	-250, -271, -272, 210, 128, 238, -256, 24, 105, -256,
	-256, 47, 422, 422, -128, 319, 2, 10, 11, 62,
	35, 412, 413, 414, 415, 139, 416, 417, 410, 411,
	409, 402, 403, 406, 195, 196, 77, 405, 404, 70,
	216, 299, 129, 130, 131, 132, 282, 166, 167, 168,
	13, 14, 15, 28, 245, 209, 399, 162, 322, 407,
	16, 17, 18, 187, 188, 232, 38, 163, -171, -205,
	-294, -294, -294, -294, -294, 251, -248, -289, 419, -142,
	421, 421, 421, 5, 421, 5, -355, 7, -142, -294,
	-307, 422, -240, 421, -142, -307, -302, 421, 297, 419,
	-310, -294, 423, -392, 393, -340, 421, 264, -339, 421,
	-339, -339, -352, 387, 394, 400, 394, 400, 141, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 421, -352, -352, 421, 421, 421, 421, 421, 421,
	421, 421, 421, -282, -283, -282, 358, -170, 426, -390,
	-222, 421, -244, -328, -294, 414, -244, -244, 241, -237,
	-294, 81, -259, 192, 225, 145, 206, 292, 174, -355,
	-76, -291, 427, -318, 400, -142, -323, -165, -142, -325,
	421, -322, -318, 414, -190, 421, 144, 421, 423, -151,
	283, -150, 22, 25, 109, 381, 121, -212, 171, 256,
	116, 328, -412, 118, 301, 350, 351, 283, 116, -253,
	-255, 32, 91, 227, 253, 50, 157, 218, 219, 330,
	116, 283, 392, 116, 118, 283, -153, 328, -412, 118,
	301, 283, -152, -212, 116, 427, 118, 236, -364, -235,
	426, 426, -359, 414, 116, 116, 116, 116, 144, -228,
	-359, -190, -199, -165, -200, 421, -222, 230, 241, -406,
	-254, -253, 230, -161, -387, 392, 230, 230, -222, 32,
	421, 2, -177, 159, 2, -166, -165, -177, 159, -387,
	230, -327, -202, -190, -202, 318, -184, 32, -154, 426,
	52, 288, 116, -154, 116, -154, 116, -154, 426, 116,
	-154, 116, 426, 116, 116, -237, 422, 426, -334, -364,
	-406, -228, -169, -364, 144, 80, 421, 32, -304, -335,
	-336, -349, -337, -346, -341, -344, 278, 279, 277, 281,
	280, 42, 49, 48, 352, 223, 310, 311, 312, 313,
	325, 379, 165, 40, 239, 240, 177, 4, 41, -348,
	184, 176, 178, 179, 180, 181, 182, 324, 39, 273,
	137, 138, 136, 108, 98, 97, 235, 44, 43, 95,
	354, 355, 356, 357, 193, 194, 57, 56, 384, 335,
	-365, -406, -228, 141, -175, 2, -190, 2, 71, 72,
	398, -358, -237, 32, -283, 2, -422, 426, 208, -207,
	215, 229, 153, 242, 396, -363, 5, 4, -303, -315,
	99, 212, -344, 8, 413, -353, 7, 412, -357, -356,
	-357, 83, 423, -359, 343, 193, -364, -364, -358, 24,
	320, 2, -190, -409, 141, -407, 293, -406, -190, -190,
	-190, -190, -190, 141, 2, 360, 2, 360, 2, -165,
	-165, 208, -190, 343, 169, 343, -154, 426, -250, -272,
	-271, -274, -294, 24, -277, 135, 226, -294, -296, -141,
	-141, -141, -226, -320, -294, 266, 169, -358, -350, -335,
	-335, -189, -359, 354, -294, -294, -294, -294, -294, -294,
	-294, -294, -294, -294, -294, -294, -294, -294, -294, -294,
	-294, -294, -294, -294, -294, -294, -294, -294, -294, -294,
	-294, -294, -294, -294, -294, -294, -294, -294, -294, 209,
	162, 322, 38, 163, -294, 358, -294, -294, -294, -294,
	222, 230, 233, 364, 126, 372, 105, 236, -425, 340,
	34, -300, -142, -241, 421, -314, 29, 327, 24, -307,
	421, -289, -294, -290, -238, -237, -237, 422, 385, 24,
	105, 414, 2, 7, -266, 397, 221, 96, 155, 220,
	-267, 306, 422, 426, 32, 422, -294, -238, -306, -302,
	-313, -312, 389, -359, 414, -393, 134, 150, 7, -355,
	354, 354, 354, 354, 421, 422, 2, 422, 2, 422,
	2, 422, 2, 422, 2, -294, -294, -294, -294, -294,
	-294, -294, -237, -260, 2, -351, -237, 4, 397, 221,
	96, 155, 220, 306, -260, 2, -237, 2, -237, 2,
	-261, 2, -294, -237, -262, -295, -296, 412, 413, 407,
	-307, -263, 2, -294, -238, -294, 45, 203, 359, -264,
	-294, 144, -237, -170, -391, 32, -237, -231, 426, 144,
	32, 4, -231, -231, 421, 422, 426, 192, 192, -322,
	-259, 192, -257, 249, -257, -257, -404, 421, 420, -318,
	-176, 419, 428, -359, -317, -316, 32, -184, 247, -318,
	-318, 423, 422, -317, -190, 421, -237, -359, 426, 358,
	-415, 75, 64, -286, 159, 64, -370, -178, 75, -371,
	-165, 59, 371, 266, 143, -415, 75, -415, 75, 75,
	318, 331, 47, -326, 35, -91, 204, 73, 144, 358,
	-326, -255, -335, 91, 218, 219, 47, -354, -353, 413,
	-354, 47, -354, -354, -354, 392, -191, -326, 358, 257,
	-364, 73, 358, 426, 35, -91, 204, 73, 144, 358,
	-203, -176, 73, 343, -331, -330, 401, -197, -165, 423,
	-294, -91, -294, -91, 333, 422, 423, 187, 187, -208,
	-209, -165, -287, -286, -372, -373, -370, 186, 169, 371,
	127, 32, 116, -228, -332, 185, 116, 257, 116, 116,
	32, 421, 113, 270, 2, 241, 230, 241, 230, -157,
	346, 116, -288, 390, -278, -91, 421, 99, 32, -278,
	-245, -246, -329, -247, -178, 421, -184, -190, -236, -236,
	-236, -203, -204, -175, -364, -365, -365, 422, -76, -333,
	422, -138, 392, 358, 392, 422, -139, 378, -209, -75,
	25, 80, 109, 422, 426, -230, 31, 419, -266, 421,
	-352, 421, -138, -330, 144, -229, -331, -331, 141, 72,
	404, 358, 422, 361, -284, -206, 272, 326, 284, 314,
	8, 7, 7, 426, -359, -190, 141, -228, -228, 315,
	141, 141, 423, -190, -203, -190, -326, -275, -353, 421,
	-276, 297, 298, 426, -149, 33, 103, 197, -190, 398,
	114, -294, -294, 358, -425, 340, -300, 114, -294, 222,
	233, 364, 126, 372, 105, 236, 144, 421, -295, -295,
	422, -239, -294, -294, 420, 430, 422, -424, 426, -224,
	-294, -237, -237, 422, 422, 358, 358, 358, 358, 421,
	423, -237, -228, 420, 420, 426, -311, -312, 110, -294,
	423, -398, 250, 421, 421, 422, 422, 426, 398, 398,
	398, 398, -294, 32, 426, 426, 426, 422, 426, 426,
	426, 422, 422, 144, 422, 422, 422, 422, -268, 260,
	422, 10, 11, 412, 413, 414, 415, 139, 416, 417,
	410, 411, 409, 402, 403, 404, 70, 216, 299, 13,
	14, 15, 187, 163, -295, -295, -295, 422, -298, -299,
	144, 141, 32, -264, -264, -264, 422, 144, -237, 421,
	422, -288, -328, -233, 2, -322, -186, -359, -288, -288,
	-237, -294, -322, -322, -258, 378, 241, 192, -322, -316,
	422, -405, -355, -318, -317, -355, -293, -292, 142, 228,
	-184, -222, -317, -317, -359, -318, 422, -234, -324, -386,
	-424, 423, -150, -190, -178, -185, -165, 230, -286, 159,
	-156, 230, -335, -185, 421, 421, 197, 197, -178, -185,
	159, -178, 159, -185, -185, -411, 272, 237, -294, 211,
	270, 231, -151, 283, -91, -91, 398, 421, -193, 283,
	-199, -354, -354, -253, 283, -191, -364, 392, 398, -175,
	-152, -91, -91, 398, 421, -176, -153, 283, 398, -190,
	-135, 158, 236, 414, -359, -129, 5, 233, -129, 422,
	426, 169, -177, 169, -183, -166, -91, -190, 144, -138,
	-364, -191, -364, -364, -364, -91, 2, 421, 2, -190,
	116, -190, 116, -158, 111, -423, 404, -175, -225, -224,
	-294, -252, -281, 290, 241, -223, -179, -178, 383, -184,
	-252, -232, 426, 144, 404, 423, -223, -154, -154, -154,
	-154, -154, -76, 144, -137, 244, -136, -165, 5, -228,
	23, -138, 421, -364, 422, -335, 419, 420, 7, 7,
	421, -355, -138, -228, 144, -43, 392, 270, 93, 343,
	256, 169, -356, -356, -283, 369, 68, 272, -356, 343,
	315, 315, -165, -276, -294, -320, -190, 427, -294, -294,
	114, 114, -294, -295, -295, -294, 114, 144, 421, -294,
	-304, 28, 28, 422, 426, -290, -294, 422, 385, -424,
	-424, -424, 5, 221, 155, 220, -267, 220, -267, -267,
	7, 414, -359, 422, -302, 112, -294, 353, -359, 414,
	-399, -181, 421, -165, 390, -224, -355, 422, -350, -335,
	-294, -294, -294, -294, -294, -294, -298, -294, -350, -335,
	-295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, -295, -295, -295, -295, -295, -295, 105,
	230, 236, -295, -299, -298, -294, -294, -335, 422, 422,
	422, -237, -75, -249, 150, -331, 426, -249, -249, 422,
	-258, 421, -294, -322, 420, 422, 426, -317, 420, 426,
	429, 404, -222, 423, -316, 422, 426, -280, 32, 422,
	-359, 358, 358, 116, 230, 380, -374, -371, -294, -227,
	-321, -178, -386, 421, -165, 421, 421, -148, 109, 318,
	-416, 116, -154, 116, -154, 396, 421, 421, 358, -415,
	75, -294, -237, 358, 358, 257, -294, -294, -237, 358,
	-294, 118, -138, 144, 342, -210, 172, -287, -166, 421,
	-177, 421, 421, -222, -190, -254, -161, 2, -270, 378,
	-176, 421, -176, -159, 202, -423, -362, -387, -273, -271,
	-252, -244, 231, 74, 422, 426, 423, -288, -246, -233,
	-294, 2, 422, -91, 426, 421, 404, 404, 243, -364,
	-139, -139, 7, 420, 422, -355, 422, -228, 244, -187,
	-175, -190, -188, -203, -190, 242, 422, -149, -176, -294,
	-294, 114, 28, 28, -294, -294, -304, 422, -294, -294,
	-237, 420, 5, -294, 422, 422, 422, 422, -294, 423,
	-400, -165, -294, 422, 422, 422, 422, 426, 426, 422,
	422, 422, 422, -299, 144, 105, 236, 421, 422, 422,
	-301, 152, 47, -322, -301, -301, -228, -291, -355, -292,
	-176, 419, -359, -324, 421, 423, -178, -185, -286, 116,
	-375, 75, -376, 62, 127, 80, 230, 233, 371, 266,
	59, 99, 276, 32, 422, 422, 426, -174, 62, -174,
	-294, -227, -228, 230, 337, 99, 230, 99, 92, 366,
	-178, -185, -228, -228, -190, -178, -185, 422, -193, -191,
	-364, 422, -176, 73, -365, 354, -211, -212, 163, 421,
	-227, 421, -228, -208, 32, 421, 146, 46, 241, -227,
	241, -160, 201, -423, -362, -157, -252, -279, 421, 241,
	-91, -179, 2, -225, 404, -136, -137, -364, -364, 422,
	92, 92, 420, 422, -44, -45, 169, 75, 259, -214,
	-213, 256, 236, -149, -294, -294, -294, 422, -424, -359,
	414, -394, 256, 422, -294, -294, -295, 144, 421, -304,
	-395, 391, -294, -237, -395, -395, 422, -318, -355, 2,
	-286, -185, -189, -182, -165, 127, 159, 233, 197, 421,
	-295, -190, 421, 2, -285, -418, 79, 338, -321, -149,
	-189, -149, 422, 422, 422, 233, 233, -294, -335, -154,
	-154, 422, 422, 358, 358, 358, 358, 398, -294, 254,
	-227, 422, -227, 422, 422, -91, -227, -190, 422, -190,
	-423, -362, -158, 106, -228, 75, -273, -300, 422, -138,
	421, 421, 426, 24, 421, 24, 421, -188, 343, 422,
	-225, 47, 422, 422, -295, -304, 422, -396, -397, -181,
	-317, 420, -376, -182, 230, -294, -167, 421, -294, -210,
	421, -174, 276, -173, 62, 421, 421, -178, -185, 421,
	421, -294, -190, 422, -285, 422, -210, 422, -270, 421,
	-362, -159, 373, 231, 422, -185, -252, -365, -365, -45,
	-228, -228, -190, -401, 270, 298, -237, 422, 426, 32,
	116, 422, -377, 217, -165, 422, -211, -228, -149, -190,
	-414, 378, -189, -216, -215, -213, -218, -217, -213, -237,
	-237, 421, -210, -285, -211, -285, 421, -227, -160, 318,
	-288, 422, 422, 422, 422, 422, -402, -403, 38, 368,
	83, -294, -402, -397, -399, 127, -378, -381, -380, 241,
	145, 255, 323, 422, 337, 388, 422, -222, -294, 422,
	426, 383, 422, 426, 383, 422, 422, -228, -211, -210,
	-210, -227, 422, -245, -138, -138, -403, 263, 140, 297,
	263, 140, -182, -380, 241, -381, 241, 373, 102, -377,
	-215, 163, -217, 144, 422, -211, -211, 422, -288, 28,
	-379, 227, 288, 52, 318, -379, -378, 421, 421, -155,
	52, 288, -285, -403, 21, 233, 99, -237, -237, -210,
	422, 422, -211, -211, 358, 421, -237, 422, -211,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 187, 189, 191, 0, 0, 0, 214, 216, 218,
	219, -2, 0, 0, 0, 250, 251, 253, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	390, 391, 0, 866, -2, 0, 369, 371, 380, 382,
	384, 386, 387, 0, 449, 451, 453, 455, 457, 459,
	461, 462, 464, 466, 468, 470, 472, 474, 476, 478,
	480, 482, 484, 486, 488, 490, 492, 494, -2, 778,
	780, 782, 784, -2, 62, 64, 66, 68, 70, 72,
	88, 222, 223, 225, 227, 229, 232, 233, 235, 903,
	256, 258, 260, 262, 264, -2, 917, 0, 0, 0,
	-2, 0, -2, -2, -2, 796, 73, 74, 75, 76,
	77, 78, 79, 94, 95, 96, 97, 98, 99, 100,
	81, 83, 84, 90, 91, 93, 0, 0, 879, 881,
	883, 885, -2, 0, 0, -2, 7, 13, 15, 17,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
	40, 42, 46, 52, 54, 56, 60, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, -2, -2,
	-2, -2, 0, 0, 1559, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1523,
	1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
	1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
	1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 1558, 1560, 1561, 1562, 1563, 1564,
	1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
	1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
	1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
	1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
	1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664,
	1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674,
	1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684,
	1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
	1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704,
	1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1455, 1499,
	1458, 1453, 188, 190, 192, 193, 0, 0, 0, 0,
	0, 0, 672, 1484, 1497, 1498, 1499, 1502, 1503, 1504,
	1559, 0, 215, 217, 220, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 738, 348,
	1650, 350, 352, 0, 0, 0, 0, 244, 245, 246,
	247, 248, 249, 252, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 347, 345, 1478, 289, 290, 0, 0,
	330, 331, 332, 333, 334, 335, 337, 294, 296, 298,
	299, 301, 303, 305, 307, 309, 311, 313, 315, 316,
	318, 320, 321, 323, 325, 326, 328, 739, 0, 0,
	0, 0, 0, 170, 0, 362, 356, 361, 363, 365,
	366, 367, 368, 0, 0, 168, 163, 0, 0, 605,
	343, 341, 0, 162, 0, 0, 775, 0, 362, 1526,
	360, 776, 777, 0, 0, 771, 772, 1680, 806, 370,
	372, 381, 383, 385, 388, -2, -2, 1775, -2, 411,
	-2, 419, 1778, 1682, 422, 0, 424, -2, 427, 450,
	452, 454, 456, 458, 460, 463, 465, 467, 469, 471,
	473, 475, 477, 479, 481, 483, 485, 487, 489, 491,
	493, 495, 496, 0, 0, 0, 0, 0, 500, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, -2, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 499, 501, 502, 503, 0, 548, 587, 588, 779,
	781, 783, 0, 713, 905, 63, 65, 67, 69, 71,
	224, 226, 228, 230, 234, 236, -2, 877, 878, 257,
	259, 261, 263, 265, -2, 0, 909, 909, 909, 0,
	0, 878, 876, 0, 373, 0, 375, 0, 500, 378,
	379, 431, 432, 1120, 0, 0, 0, 0, 0, 1353,
	1204, -2, -2, 1236, 1238, 1754, 1775, 1352, 1240, 1241,
	1242, 1243, 0, 0, 1246, 0, 1248, 1249, 1250, 1251,
	0, 1253, 0, 1257, 1258, 1259, 0, 1432, 1495, -2,
	1034, 1035, 1036, 1037, 1038, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1491, 1486, 1325, 1272, -2, 1513, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1567, -2, -2, -2, -2, -2, -2, 1087, -2,
	-2, -2, -2, -2, -2, -2, 1787, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 0, 1743, 1760, 1761,
	1766, 1768, 1762, 1751, 1295, -2, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1800, 1801, 1802, 1803,
	1804, 1805, -2, -2, -2, 1755, 1756, 1758, 1767, 1771,
	1772, 1777, 1781, 1782, 808, 786, 799, 808, 788, 789,
	790, 791, 792, 797, 798, 801, 0, 793, 794, 795,
	895, 1657, 898, 672, 896, 880, 882, 0, 884, 0,
	0, 0, 889, 912, 910, 0, 948, 893, 894, 904,
	963, 986, 0, 968, 0, 986, 1008, 0, 973, 1676,
	1273, 1274, 0, 1499, 1496, -2, 1798, 1799, 2, 80,
	0, 1760, 1008, 82, 0, 1760, 85, 0, 1760, 0,
	-2, 89, 0, 1760, 171, 172, 1509, 1510, 1514, 1515,
	1516, 1517, 1787, 92, 0, 1474, 101, 0, 1760, 1452,
	0, 1471, 1518, 1519, 1520, 1521, 1522, 1806, 1807, 1808,
	1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818,
	1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
	1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
	1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
	1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
	1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868,
	1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
	1879, 1880, 1881, 1882, 1883, 1884, 1885, 0, 1468, 0,
	0, 597, 1449, 1454, 598, 1459, 0, 194, 195, 196,
	197, 198, 1760, 200, 201, 0, 203, 204, 1760, 206,
	207, 0, 209, 0, 0, 0, 0, 0, 231, 672,
	1760, 0, 238, 1479, 0, 696, 1760, 694, 1483, -2,
	1760, 716, 719, 1760, 721, 672, 723, 1481, 728, 1482,
	0, -2, 1506, 902, 1760, 822, 349, 351, 0, 243,
	0, 835, 0, 837, 0, 856, 1014, 155, 1760, 268,
	287, 155, 1760, 271, 155, 1760, 274, 155, 1760, 277,
	1447, 155, 1760, 280, 281, 1760, 283, 173, 284, 1760,
	286, 344, 0, 0, -2, 338, 1485, -2, 0, 336,
	295, 297, 300, 302, 304, 306, 308, 310, 312, 314,
	317, 319, 322, 324, 327, 329, -2, 0, 0, 0,
	0, 0, 0, 603, 604, 0, 0, 0, 773, 774,
	0, 0, 0, 392, 0, 0, 0, 0, 805, 389,
	0, 408, 0, 410, 1750, -2, -2, 414, 809, 813,
	814, 815, 0, 0, 0, 0, 421, 0, 0, 0,
	425, 428, 0, 497, 498, 0, 0, 508, 509, 510,
	511, 1655, 1581, 514, 0, 517, 538, 552, 0, 0,
	521, 523, 602, 525, 0, 0, 527, 0, 529, 0,
	531, 0, 533, 0, 535, 537, 539, 553, 541, 0,
	0, 0, 551, 0, 557, 0, 560, 561, 562, 0,
	564, 565, 566, 567, 0, 569, 570, -2, -2, 574,
	576, 0, 586, 0, 504, 505, 155, 1012, -2, 0,
	872, 926, 927, 0, 0, 0, 0, 907, 908, 0,
	0, 0, 868, 869, 374, 0, 377, 0, 0, 0,
	0, 1358, 1359, 1360, 1361, 1362, 1363, 1366, 1367, 1364,
	1365, 1368, 1369, 0, 0, 0, 0, 0, 1370, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1371, 1372, 1373, 0, 0, 1375, 0, 1377, 0, 0,
	0, 0, 0, 0, 1183, 1185, 1440, 0, 0, 1374,
	1125, 1126, 1127, 1162, 1163, 0, 1237, 1437, 1436, 1239,
	0, 1389, 0, 1245, 0, 1117, 1252, 1465, -2, 0,
	1353, 1384, 0, 0, 1260, 1261, 1262, 0, 0, 1389,
	0, 1431, 0, 1327, 0, 1070, 0, 1071, 1072, 0,
	1073, 1074, 1085, 1092, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 1089, 0, 0, 0, 0, 0, 1412,
	-2, 0, 0, 785, -2, 787, 0, 803, 0, 897,
	0, 0, 952, 1441, 1445, 1446, 952, 952, 0, 0,
	1390, 0, 0, 0, 0, 1005, 1005, 1005, 1003, 980,
	0, 986, 0, 996, 0, 986, 986, 0, -2, 968,
	0, 0, 996, 1009, 1010, 0, 0, 0, 0, 102,
	768, 123, 0, 768, 768, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 119, 108, 109, 0, 0, 86,
	697, 0, 700, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	121, 0, 146, 148, 0, 0, 0, 0, 999, 596,
	0, 0, 1500, 1457, 0, 0, 0, 0, 0, 0,
	1500, 0, 0, 1486, 1487, 611, 0, 0, 0, 241,
	692, 695, 0, 714, 0, 901, 0, 0, 0, 0,
	0, 729, 0, 1760, 734, 1470, 1505, 0, 1760, 824,
	0, 1018, 0, 838, 0, 0, 1015, 0, 266, 0,
	153, 154, 0, 269, 0, 272, 0, 275, 0, 0,
	278, 0, 0, 0, 0, 0, 904, 0, 0, 185,
	0, 354, 364, 0, 0, 0, 0, 904, 0, 1392,
	1026, 1022, 1029, 1030, 1031, 1117, 1077, 1078, 1079, 1080,
	1081, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1093, 1087,
	1103, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1083, 0, 1058, 1058, 1058, 1075, 1076, 1094,
	1095, 1097, 1099, 1101, 1027, 1028, 1093, 1093, 1090, 1091,
	185, 0, 358, 0, 999, 394, 999, 396, 0, 582,
	0, 0, 0, 0, -2, 416, 0, 811, 0, 816,
	440, 441, 442, 818, 819, 420, 443, 444, 445, 446,
	447, 448, 0, 689, 0, 691, 1461, 0, 417, 433,
	418, 423, 0, 429, 0, 0, 512, 513, 515, 516,
	518, 519, 520, 524, 0, 590, 1672, 600, 526, 528,
	530, 532, 534, 0, 543, 0, 545, 0, 547, 555,
	558, 563, 568, 0, 0, 0, 712, 0, 875, 924,
	925, 930, 934, 935, 938, 941, 942, 932, 1120, 890,
	891, 892, 918, 919, 751, 0, 0, 376, 1121, 1023,
	1122, 1123, 1467, 0, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, 1137, -2, -2, -2, -2, -2, -2,
	-2, -2, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
	1154, 1155, 1156, -2, -2, -2, 1160, 1161, -2, 1376,
	1378, 0, 1440, 0, -2, 0, -2, -2, -2, -2,
	1180, 0, 1182, 1187, 1189, 1191, 0, 0, 0, 0,
	1439, 1201, 1423, 1424, 0, 0, 1355, 1356, 1357, 1186,
	0, 1438, 1435, 0, 0, 1388, 915, 1263, 0, 0,
	0, 0, 1270, 0, 1466, 1104, 1105, 1106, 1107, 1108,
	1109, 1118, 1256, 1386, 0, 1385, 0, 0, 0, 1396,
	1430, 1426, 0, 1488, 1494, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1296, 1297, 1298, 1299, 1300,
	1301, 1302, 1303, 1304, 1305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1307, 0, 1399, -2, -2, -2,
	-2, -2, -2, -2, 0, 1309, 0, 1321, 0, 1323,
	0, 1311, 1390, 1409, 0, 0, 1207, 0, 0, 0,
	1353, 0, 1314, 1390, 1417, 0, 0, 0, 0, 0,
	1390, 0, 1422, 802, 899, 0, 0, 1018, 0, 0,
	0, 1444, 1018, 1018, 0, 947, 0, 0, 0, 0,
	0, 0, 1000, 1004, 1001, 1002, 0, 0, 986, 996,
	960, 0, 0, 1469, 966, 995, 0, 672, 985, 996,
	996, 0, -2, 970, 0, 0, 915, -2, 0, 0,
	0, 0, 767, 125, 1760, 0, 157, 0, 0, 662,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 698, 699, 701, 707, 709, 0, 703, 1464, 0,
	704, 0, 706, 708, 710, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 1451, 0, 0, 176, 998, 0, 1450, 1460, 0,
	199, 202, 205, 208, 186, 671, 0, 0, 0, 0,
	610, -2, 612, 614, 615, 616, 617, 1606, 1506, 0,
	1506, 0, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 826,
	832, 0, 917, 0, 854, 840, 0, 0, 0, 854,
	858, 859, 861, 862, 0, 0, 1016, 288, 155, 155,
	155, 1448, 155, 155, 174, 282, 285, 346, 291, 339,
	904, 0, 0, 0, 0, 185, 0, 0, 0, 340,
	0, 0, 0, 342, 0, 1019, 1021, 0, 1032, 0,
	1085, 0, 160, 185, 0, 0, 393, 398, 0, 583,
	0, 0, 409, 0, 810, 817, 0, 437, 0, 439,
	690, 1463, 1462, 0, 430, 506, 0, 601, 599, 542,
	0, 0, 0, 584, 585, 589, 1013, 0, 936, 0,
	933, 939, 940, 0, 921, 749, 750, 0, 0, 0,
	0, -2, -2, 0, 0, 0, 1202, 0, -2, 1181,
	1184, 1188, 1190, 1192, 0, 0, 0, 0, 0, 0,
	1379, 0, 1381, 1203, 1433, 1436, 1351, 0, 0, 914,
	915, 915, 915, 1269, 0, 0, 0, 0, 0, 0,
	0, 1387, 0, 1394, 1395, 0, 0, 1427, 0, 0,
	0, 1271, 0, 0, 0, 1082, 1056, 0, 1096, 1098,
	1100, 1102, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 1294, 1306, 0, 1308, 1320, 1322, 1310, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1210, 1211, 1212, 1313, 1415, 1416,
	0, 0, 0, 0, 0, 0, 1319, 0, 1421, 904,
	949, 944, 1442, 999, 951, 953, 1443, 1472, 944, 944,
	0, 1391, 988, 0, 990, 0, 0, 0, 992, 0,
	981, 0, 983, 996, 965, 0, 0, 958, 0, 957,
	672, 994, 967, 971, 1488, 0, 1011, 0, 975, 978,
	0, 0, 124, 755, 0, 0, 1473, 0, 127, 1760,
	136, 0, 639, 0, 0, 0, 0, 0, 770, 137,
	1760, 155, 1760, 155, 138, 141, 0, 145, 143, 0,
	0, 630, 103, 768, 106, 112, 0, 0, 761, 0,
	702, 705, 711, 87, 0, 763, 753, 0, 0, 752,
	147, 107, 113, 0, 0, 765, 105, 0, 0, 0,
	185, 0, 0, 1456, 1501, 210, 212, 213, 211, 619,
	0, 1506, 0, 1506, 0, 1477, 608, 672, 0, 239,
	240, 696, 717, -2, 720, 722, 724, 0, 726, 737,
	0, 0, 0, 828, 832, 0, 831, 902, 929, 916,
	1017, 833, 854, 0, 0, 0, 843, 845, 842, 839,
	836, 1018, 0, 0, 0, 0, 0, 267, 270, 273,
	276, 279, 292, 0, 183, 1638, 181, 178, 180, 353,
	0, 164, 0, 0, 0, 1393, 0, 1024, 0, 0,
	0, 0, 161, 357, 0, 395, 0, 0, 0, 0,
	0, 0, 406, 407, -2, 435, 436, 438, 434, 0,
	544, 546, 554, 0, 0, 920, 751, 0, 1124, 1165,
	0, 0, -2, 0, 0, 1169, 0, 0, 0, -2,
	0, 0, 0, 1380, 1382, 0, 1435, 1264, 0, 0,
	0, 0, 1247, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	0, 1254, 1255, 1354, 1397, 1425, 1429, 0, 1489, 1493,
	1333, 1334, 1338, 1480, 0, 0, 0, 1275, 0, 0,
	0, 0, 0, 0, 0, 1398, 1408, 1410, 1208, 1209,
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	-2, -2, -2, 1226, 1227, 1228, -2, -2, -2, 0,
	0, 0, 1411, 1413, 1414, 1418, 1419, 0, 1316, 1317,
	1318, 1420, 0, 946, 0, 950, 0, 946, 946, 911,
	989, 0, 1007, 991, 963, 982, 0, 972, 961, 0,
	962, 0, 993, 0, 969, 974, 0, 977, 0, 1264,
	-2, 0, 0, 0, 0, 156, 637, 661, 0, 0,
	740, 748, 748, 0, 1475, 0, 0, 129, 0, 0,
	0, 0, 134, 0, 140, 144, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 115, 118, 0, 0,
	114, 0, 158, 0, 0, 627, 0, 613, 0, 0,
	0, 0, 611, 0, 237, 693, 715, 725, 0, 0,
	0, 0, 0, 830, 832, 0, 823, 824, 854, 928,
	834, 852, 853, 851, 0, 0, 0, 917, 860, 857,
	863, 864, 0, 169, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 1025, 1033, 0, 1086, 359, 0, 577,
	578, 625, 0, 581, 507, 931, 937, 922, 751, 1167,
	1171, 0, 0, 0, 1173, -2, 0, 1195, -2, -2,
	1383, 1434, 1244, 915, 1265, 1267, 1268, 1119, 1428, 0,
	1340, 1337, 0, 1324, 1057, 1285, 1286, 0, 0, 1289,
	1291, 1292, 1293, 1407, 0, 0, 0, 0, 1315, 900,
	1329, 0, 0, 954, 1329, 1329, 0, 986, 984, 959,
	955, 0, 1489, 976, 0, 0, 757, 759, 126, 0,
	638, 0, 641, 0, 0, 0, 0, 648, 649, 0,
	0, 0, 0, 0, 663, 670, 0, 751, 0, 751,
	0, 0, 0, 0, 131, 150, 0, 0, 769, 0,
	155, 155, 0, 0, 756, 0, 0, 0, 762, 764,
	754, 0, 766, 0, 175, 0, 606, 626, 0, 0,
	0, 0, 0, 0, 0, 0, 735, 736, 0, 0,
	0, 820, 832, 0, 825, 826, 242, 0, 0, 0,
	841, 844, 846, 929, 0, 182, 0, 177, 179, 185,
	0, 0, 1020, 1084, 397, 399, 0, 0, 405, 579,
	624, 0, 0, 923, 1175, -2, -2, 1196, 0, 1490,
	1492, 917, 0, 1326, 0, 0, -2, 0, 0, 0,
	886, 0, 945, 943, 887, 888, 1006, 996, 0, 979,
	128, 0, 642, 643, 1476, 645, 0, 647, 650, 0,
	652, 1508, 0, 656, 619, 0, 667, 668, 741, 742,
	747, 743, 748, 665, 0, 130, 132, 149, 746, 133,
	139, 0, 0, 0, 0, 0, 0, 0, 997, 0,
	0, 670, 0, 660, 619, 609, 0, 737, 732, 0,
	0, 827, 828, 0, 0, 0, 854, 865, 184, 165,
	0, 0, 0, 401, 0, 403, 0, 623, 0, 1266,
	1343, 0, 1287, 1288, -2, 0, 1234, 1328, 1330, 0,
	964, 956, 640, 644, 0, 0, 676, 0, 0, 627,
	0, 751, 0, 152, 0, 0, 0, 758, 760, 0,
	0, 117, 0, 659, 619, 670, 627, 670, 0, 0,
	829, 830, 0, 848, 1018, 850, 855, 0, 0, 400,
	0, 0, 580, 0, 0, 0, 1339, 1235, 0, 0,
	0, 651, 681, 0, 0, 0, 664, 0, 744, 672,
	135, 0, 745, 0, 631, 0, 0, 634, 0, 0,
	0, 0, 627, 619, 607, 619, 0, 0, 821, 0,
	849, 185, 185, 402, 404, 1336, 1341, 1344, -2, 1725,
	1556, 0, 1342, 1331, 1332, 0, 653, 677, 678, 0,
	673, 674, 675, 1507, 654, 655, 669, 676, 151, 628,
	0, 0, 629, 0, 0, 120, 122, 0, 657, 627,
	627, 0, 733, 1018, 166, 167, 0, 1346, 1347, 1348,
	1349, 1350, 646, 679, 0, 680, 0, 0, 0, 681,
	632, 0, 635, 0, 622, 658, 730, 670, 847, 0,
	682, 0, 685, 686, 0, 683, 666, 0, 0, 618,
	620, 621, 619, 1345, 684, 687, 688, 0, 0, 627,
	627, 0, 731, 633, 0, 0, 0, 627, 636,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 410, 3, 416, 411, 3,
	421, 422, 414, 412, 426, 413, 423, 415, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 430, 425,
	402, 404, 403, 406, 427, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 419, 3, 420, 417, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 428, 409, 429, 407,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 405,
	57745, 408, 57746, 418, 57747, 424, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1026
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1032
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1041
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1072
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1075
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1078
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1087
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1097
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1104
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1144
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1155
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1170
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1174
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1178
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1189
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1201
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1227
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1231
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1235
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1241
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1245
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1251
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1257
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1267
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1274
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1281
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1288
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1295
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1305
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1315
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1325
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1338
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1350
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1354
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1360
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1364
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1370
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1381
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1386
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1391
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1396
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1401
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1406
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1411
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1415
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1418
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1427
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1439
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1449
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1456
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1459
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1466
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1475
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1484
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1496
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1503
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1504
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1508
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1518
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1526
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1530
		{
			sqlVAL.union.val = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1536
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1540
		{
			sqlVAL.union.val = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1547
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1551
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1555
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1561
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1565
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1594
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1617
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1621
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1624
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1628
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1659
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1663
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1667
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1674
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1691
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1694
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1708
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1718
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1722
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1728
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1732
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1736
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1740
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1746
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1756
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1760
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1763
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1767
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1779
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1780
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1781
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1782
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1792
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1800
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1802
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1805
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1815
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1824
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1832
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1834
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1838
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1841
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1851
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1860
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1868
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1870
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1874
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1877
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1881
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1886
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1892
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1893
		{
			sqlVAL.str = ""
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1902
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1903
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1905
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1906
		{
			return helpWith(sqllex, "CREATE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1911
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1912
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1913
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1915
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1916
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1917
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1918
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1928
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1935
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1939
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1949
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1953
		{
			sqlVAL.union.val = nil
		}
	case 242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1966
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return helpWith(sqllex, "DELETE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1983
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1986
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1987
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1988
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1989
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1990
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1999
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2000
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2001
		{
			return helpWith(sqllex, "DROP")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2004
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2005
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2007
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2008
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2016
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2020
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2023
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2031
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2035
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2038
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2046
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2050
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2053
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2061
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2069
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2076
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2084
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2092
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2099
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2107
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2111
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2114
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2122
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2126
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2129
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2133
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2137
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2158
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2161
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2167
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2174
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2177
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2178
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2180
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2181
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2182
		{
			return helpWith(sqllex, "DELETE")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2183
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2184
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2185
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2186
		{
			return helpWith(sqllex, "INSERT")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2187
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2189
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2190
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2192
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2195
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2196
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2198
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2199
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2207
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2208
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2212
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2216
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2226
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2233
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2237
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2241
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2251
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2257
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2263
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2267
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2277
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2281
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2285
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2289
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2292
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2312
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2316
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2320
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2323
		{
			return helpWith(sqllex, "GRANT")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2343
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2347
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2351
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2354
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2359
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2363
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2374
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2392
		{
			return helpWith(sqllex, "RESET")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2393
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2401
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2405
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2408
		{
			return helpWith(sqllex, "RESET")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2416
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2419
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2430
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2433
		{
			return helpWith(sqllex, "USE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2437
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2438
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2439
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2440
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2441
		{
			return helpWith(sqllex, "USE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2442
		{
			return unimplemented(sqllex, "set local")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2458
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2473
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2476
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2502
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2510
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2516
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2526
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2530
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2534
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2542
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2553
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2557
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2560
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2566
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2582
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2586
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2591
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2608
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2611
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2613
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2616
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2620
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2631
		{
			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2648
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2655
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2661
		{
			return unimplemented(sqllex, "set from current")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2662
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2670
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2675
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2682
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2686
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2692
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2703
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2709
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2719
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2723
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2727
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2731
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2735
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2741
		{
			sqlVAL.union.val = tree.Low
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2745
		{
			sqlVAL.union.val = tree.Normal
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2749
		{
			sqlVAL.union.val = tree.High
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2760
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2764
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2768
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2773
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2777
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2790
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2792
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2793
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2794
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2796
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2797
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2798
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2799
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2800
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2801
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2802
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2803
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2804
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2805
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2806
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2807
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2808
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2809
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2810
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2811
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2813
		{
			return helpWith(sqllex, "SHOW")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2820
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2821
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2822
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2833
		{
			sqlVAL.str = "client_encoding"
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2836
		{
			sqlVAL.str = "timezone"
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2837
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2851
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2855
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2858
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2869
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2877
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2885
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2892
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2899
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2905
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2915
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2919
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2922
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2924
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2927
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2935
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2938
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2946
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2949
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2962
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2970
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2978
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2981
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2983
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2986
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2988
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2991
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2999
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3002
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3004
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3007
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3015
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3018
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3020
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3024
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3034
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3037
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3046
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3049
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3051
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3054
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3056
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3060
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3063
		{
			sqlVAL.union.val = true
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3064
		{
			sqlVAL.union.val = false
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3072
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3075
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3077
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3081
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3091
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3100
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3109
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3112
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3119
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3123
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3126
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3133
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3137
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3145
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3150
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3155
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3159
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3167
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3171
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3175
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3188
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3191
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3199
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3202
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3206
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3211
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3216
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3223
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3231
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3238
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3243
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3255
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3259
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3262
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3270
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3277
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3282
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3402
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3406
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3410
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3449
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3453
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3458
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3462
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3471
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3478
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3482
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3494
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3503
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3506
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3542
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3554
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3568
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3579
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3593
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3599
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3609
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3615
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3629
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3636
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3641
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3646
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3652
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3659
		{
			sqlVAL.str = ""
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3666
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3672
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3679
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3686
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3692
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3702
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3712
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3716
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 636:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3722
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3733
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3744
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3748
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3754
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3758
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3762
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3766
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3770
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3774
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3778
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3796
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3800
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3804
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3808
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3812
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3816
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3820
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3828
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3832
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3836
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3843
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3853
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3865
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3875
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3887
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3892
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3898
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3904
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3915
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3925
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3949
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3953
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3959
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3963
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3968
		{
			return unimplemented(sqllex, "match full")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3969
		{
			return unimplemented(sqllex, "match partial")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3970
		{
			return unimplemented(sqllex, "match simple")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3971
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3978
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3982
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3986
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3990
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3994
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4000
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4006
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4014
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4018
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4022
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4026
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4030
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4036
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4040
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4044
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4062
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 693:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4070
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4078
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4082
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4085
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4089
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4090
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4092
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4093
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4094
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4097
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4099
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4101
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4103
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4104
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4106
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4107
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4109
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4118
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4121
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4129
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4133
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4136
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4140
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4144
		{
			sqlVAL.union.val = nil
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4154
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4158
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4161
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4169
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4176
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4184
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4186
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4188
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4190
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4192
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4194
		{
			return unimplementedWithIssue(sqllex, 27796)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4210
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4223
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4237
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4246
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4255
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4260
		{
			sqlVAL.union.val = true
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4264
		{
			sqlVAL.union.val = false
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4268
		{
			sqlVAL.union.val = false
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4274
		{
			sqlVAL.union.val = true
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4278
		{
			sqlVAL.union.val = false
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4284
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4288
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4297
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4300
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4301
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4304
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4305
		{
			sqlVAL.str = ""
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4308
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4309
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4313
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4317
		{
			sqlVAL.union.val = tree.Descending
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4321
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4327
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4334
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4338
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4344
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4348
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4352
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4356
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4360
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4362
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4366
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4370
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4376
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4380
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4386
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4390
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4395
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4396
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4399
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4400
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4408
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4411
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4421
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4430
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4433
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4441
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4444
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4448
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4449
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4450
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4466
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4469
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4471
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4474
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4484
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4487
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4489
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4492
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4496
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4501
		{
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4502
		{
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4503
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4511
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4518
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4521
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4522
		{
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4526
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4530
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4534
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4538
		{
			sqlVAL.str = ""
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4544
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4548
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4554
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4558
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4564
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4568
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4581
		{
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4583
		{
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4587
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4591
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4595
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4601
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4607
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4613
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4617
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 820:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4627
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4637
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4647
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4651
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4655
		{
			sqlVAL.str = ""
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4661
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4665
		{
			sqlVAL.str = ""
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4671
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4675
		{
			sqlVAL.str = ""
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4681
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4685
		{
			sqlVAL.str = ""
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4690
		{
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4691
		{
		}
	case 833:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4703
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4710
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4717
		{
			return helpWith(sqllex, "INSERT")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4728
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4735
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4739
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4747
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4753
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4757
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4761
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4767
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4771
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4791
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4795
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4799
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4805
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4809
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4811
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4817
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4822
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4826
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 855:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4843
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4854
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4858
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4859
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4863
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4867
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4880
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4883
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4887
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4930
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4936
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4940
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4955
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4959
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4963
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4967
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4971
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4975
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4982
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5017
		{
			return helpWith(sqllex, "SELECT")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5018
		{
			return helpWith(sqllex, "VALUES")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5019
		{
			return helpWith(sqllex, "TABLE")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5041
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5054
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5068
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5080
		{
			return helpWith(sqllex, "SELECT")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5084
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5093
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5102
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5117
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5124
		{
			return helpWith(sqllex, "TABLE")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5136
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5139
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5140
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5144
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5154
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5162
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5163
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5167
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5170
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5173
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5174
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5178
		{
			sqlVAL.union.val = true
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5182
		{
			sqlVAL.union.val = false
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5186
		{
			sqlVAL.union.val = false
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5192
		{
			sqlVAL.union.val = true
		}
	case 911:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5198
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5203
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5204
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5207
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5208
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5212
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5216
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5222
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5228
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5238
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5242
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5246
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5255
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5264
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5275
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5279
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5288
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5294
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5301
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5308
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5317
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5321
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5325
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5331
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5332
		{
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5335
		{
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5336
		{
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5353
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5357
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5363
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5367
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5386
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5389
		{
			return helpWith(sqllex, "VALUES")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5391
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5403
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5406
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5408
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5414
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5424
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5428
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5434
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5440
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5445
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5468
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5472
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5476
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5480
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 964:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5507
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5521
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5525
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5528
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5530
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5534
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5538
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5543
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5559
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5565
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5569
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5575
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5581
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5587
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5589
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5592
		{
			sqlVAL.union.val = nil
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5593
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5594
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5598
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5608
		{
			sqlVAL.union.val = true
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5612
		{
			sqlVAL.union.val = false
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5632
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5636
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5640
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5644
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5648
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5652
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5658
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5662
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5669
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5675
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5682
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5688
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5692
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5696
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5700
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5706
		{
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5707
		{
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5718
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5722
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5727
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5728
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5729
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5730
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5734
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5738
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5751
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5755
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5759
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5765
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5769
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5781
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5795
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5804
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5813
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5819
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5826
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5828
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5837
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5841
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5845
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5854
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5872
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5876
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5880
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5884
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5888
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5892
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5896
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5900
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5904
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5908
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5912
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5916
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5920
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5924
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5928
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5932
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5936
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5956
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5960
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5964
		{
			sqlVAL.union.val = nil
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5971
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5975
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5979
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5983
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5987
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5991
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5995
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5999
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6003
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6007
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6011
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6015
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6025
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6029
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6038
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6047
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6056
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6060
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6067
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6071
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6075
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6079
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6083
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6089
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6093
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6099
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6110
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6116
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6128
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6134
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6138
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6142
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6146
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6151
		{
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6152
		{
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6157
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6161
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6165
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6169
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6173
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6177
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6181
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6185
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6189
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6194
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6200
		{
			sqlVAL.union.val = tree.Year
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6204
		{
			sqlVAL.union.val = tree.Month
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6208
		{
			sqlVAL.union.val = tree.Day
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6212
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6216
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6220
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6226
		{
			sqlVAL.union.val = tree.Month
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6230
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6234
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6238
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6242
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6246
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6250
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6254
		{
			sqlVAL.union.val = nil
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6260
		{
			sqlVAL.union.val = tree.Second
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6263
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6287
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6291
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6295
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6298
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6307
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6311
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6315
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6319
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6323
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6343
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6347
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6351
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6355
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6359
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6363
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6371
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6375
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6379
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6383
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6387
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6391
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6395
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6399
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6403
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6407
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6411
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6415
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6419
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6423
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6427
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6431
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6435
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6439
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6443
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6447
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6451
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6455
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6459
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6463
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6467
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6471
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6475
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6479
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6483
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6487
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6491
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6495
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6499
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6503
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6507
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6511
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6515
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6519
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6523
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6527
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6531
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6535
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6539
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6543
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6547
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6550
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6552
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6560
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6564
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6568
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6572
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6576
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6580
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6584
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6588
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6592
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6596
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6600
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6604
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6608
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6612
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6616
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6633
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6637
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6641
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6656
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6660
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6664
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6668
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6672
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6676
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6680
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6684
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6688
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6692
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6696
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6700
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6704
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6708
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6712
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6716
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6720
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6724
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6728
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6732
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6736
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6740
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6744
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6748
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6752
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6756
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6760
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6764
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6778
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6786
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6822
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6826
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6830
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6834
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6837
		{
			return unimplemented(sqllex, "func const")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6839
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6843
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6846
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6848
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6852
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6856
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6860
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6864
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6873
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6878
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6882
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6886
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6891
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6895
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6899
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6903
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6907
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6916
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6920
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6923
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6924
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6926
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6930
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6934
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6937
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6948
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6955
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6964
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6965
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6969
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6971
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6975
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6981
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6985
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6993
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6999
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7003
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7007
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7011
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7015
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7019
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7023
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7027
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7031
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7035
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7039
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7043
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7047
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7054
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7057
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7059
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7062
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7064
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7067
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7072
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7074
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7077
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7079
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7082
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7084
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7087
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7092
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7094
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7101
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7102
		{
			return unimplemented(sqllex, "treat")
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7104
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7108
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7112
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7116
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7120
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7123
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7128
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7133
		{
			return unimplemented(sqllex, "within group")
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7134
		{
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7138
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7142
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7149
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7153
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7159
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7169
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7177
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7181
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7185
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7192
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7212
		{
			sqlVAL.str = ""
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7218
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7222
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7233
		{
			bounds := sqlDollar[2].union.windowFrameBounds()
			startBound := bounds.StartBound
			endBound := bounds.EndBound
			switch {
			case startBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			}
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: bounds,
			}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7257
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7264
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7270
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7283
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7311
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7315
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValuePreceding,
			}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7330
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValueFollowing,
			}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7346
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7350
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7357
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7369
		{
			sqlVAL.union.val = tree.Any
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7373
		{
			sqlVAL.union.val = tree.Some
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7377
		{
			sqlVAL.union.val = tree.All
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7382
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7383
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7384
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7385
		{
			sqlVAL.union.val = tree.Div
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7386
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7387
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7388
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7389
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7390
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7391
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7392
		{
			sqlVAL.union.val = tree.LT
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7393
		{
			sqlVAL.union.val = tree.GT
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7394
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7395
		{
			sqlVAL.union.val = tree.LE
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7396
		{
			sqlVAL.union.val = tree.GE
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7397
		{
			sqlVAL.union.val = tree.NE
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7401
		{
			sqlVAL.union.val = tree.Like
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7402
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7403
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7404
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7431
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7437
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7441
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7445
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7466
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7470
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7477
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7483
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7493
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7497
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7503
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7507
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7513
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7517
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7523
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7527
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7549
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7553
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7557
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7563
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7570
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7574
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7591
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7595
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7599
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7603
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7607
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7613
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7619
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7625
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7629
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7633
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7639
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7651
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7658
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7662
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7674
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7678
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7685
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7691
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7695
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7702
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7708
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7717
		{
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7718
		{
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7722
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7732
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7741
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7745
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7749
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7757
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7761
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7767
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7771
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7777
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7784
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7812
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7816
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7820
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7826
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7830
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7838
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7842
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7851
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7862
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7872
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7970
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7977
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7981
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7985
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7999
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8003
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8007
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8020
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8038
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8048
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8052
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8066
		{
			sqlVAL.str = ""
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8072
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8076
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
