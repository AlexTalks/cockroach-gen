// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}
func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*Scanner).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9178

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	446, 28,
	-2, 957,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 70,
	176, 794,
	193, 794,
	207, 228,
	279, 228,
	287, 650,
	314, 228,
	323, 650,
	360, 650,
	384, 228,
	407, 650,
	-2, 0,
	-1, 76,
	207, 232,
	-2, 0,
	-1, 77,
	105, 957,
	182, 957,
	393, 957,
	394, 957,
	-2, 0,
	-1, 88,
	118, 931,
	132, 931,
	190, 931,
	218, 931,
	247, 931,
	256, 931,
	389, 931,
	-2, 918,
	-1, 116,
	123, 576,
	206, 576,
	377, 576,
	-2, 0,
	-1, 117,
	4, 959,
	21, 959,
	22, 959,
	23, 959,
	24, 959,
	25, 959,
	27, 959,
	32, 959,
	37, 959,
	38, 959,
	39, 959,
	40, 959,
	41, 959,
	42, 959,
	43, 959,
	44, 959,
	45, 959,
	46, 959,
	48, 959,
	49, 959,
	50, 959,
	51, 959,
	52, 959,
	53, 959,
	56, 959,
	57, 959,
	58, 959,
	59, 959,
	61, 959,
	62, 959,
	66, 959,
	67, 959,
	68, 959,
	69, 959,
	70, 959,
	72, 959,
	73, 959,
	74, 959,
	75, 959,
	77, 959,
	79, 959,
	80, 959,
	81, 959,
	84, 959,
	85, 959,
	93, 959,
	94, 959,
	95, 959,
	96, 959,
	97, 959,
	98, 959,
	99, 959,
	100, 959,
	102, 959,
	104, 959,
	105, 959,
	107, 959,
	110, 959,
	111, 959,
	112, 959,
	114, 959,
	116, 959,
	117, 959,
	119, 959,
	120, 959,
	121, 959,
	122, 959,
	123, 959,
	124, 959,
	125, 959,
	126, 959,
	127, 959,
	128, 959,
	129, 959,
	131, 959,
	137, 959,
	138, 959,
	139, 959,
	140, 959,
	141, 959,
	142, 959,
	144, 959,
	146, 959,
	150, 959,
	151, 959,
	153, 959,
	154, 959,
	156, 959,
	157, 959,
	159, 959,
	160, 959,
	161, 959,
	162, 959,
	163, 959,
	164, 959,
	165, 959,
	166, 959,
	167, 959,
	168, 959,
	171, 959,
	172, 959,
	176, 959,
	177, 959,
	178, 959,
	179, 959,
	182, 959,
	183, 959,
	184, 959,
	185, 959,
	186, 959,
	187, 959,
	188, 959,
	189, 959,
	191, 959,
	193, 959,
	196, 959,
	197, 959,
	198, 959,
	200, 959,
	201, 959,
	204, 959,
	205, 959,
	206, 959,
	207, 959,
	209, 959,
	210, 959,
	212, 959,
	213, 959,
	215, 959,
	216, 959,
	219, 959,
	220, 959,
	223, 959,
	225, 959,
	226, 959,
	227, 959,
	228, 959,
	229, 959,
	230, 959,
	231, 959,
	232, 959,
	233, 959,
	235, 959,
	236, 959,
	237, 959,
	238, 959,
	240, 959,
	243, 959,
	244, 959,
	245, 959,
	246, 959,
	248, 959,
	249, 959,
	250, 959,
	252, 959,
	253, 959,
	254, 959,
	257, 959,
	258, 959,
	260, 959,
	262, 959,
	263, 959,
	264, 959,
	265, 959,
	266, 959,
	267, 959,
	268, 959,
	269, 959,
	270, 959,
	272, 959,
	273, 959,
	274, 959,
	275, 959,
	276, 959,
	278, 959,
	280, 959,
	281, 959,
	282, 959,
	283, 959,
	284, 959,
	285, 959,
	286, 959,
	287, 959,
	288, 959,
	290, 959,
	291, 959,
	292, 959,
	293, 959,
	294, 959,
	296, 959,
	297, 959,
	298, 959,
	299, 959,
	300, 959,
	301, 959,
	302, 959,
	303, 959,
	305, 959,
	307, 959,
	308, 959,
	309, 959,
	310, 959,
	311, 959,
	312, 959,
	314, 959,
	315, 959,
	316, 959,
	317, 959,
	318, 959,
	319, 959,
	320, 959,
	321, 959,
	323, 959,
	324, 959,
	325, 959,
	326, 959,
	327, 959,
	328, 959,
	329, 959,
	330, 959,
	331, 959,
	332, 959,
	334, 959,
	335, 959,
	336, 959,
	337, 959,
	339, 959,
	340, 959,
	341, 959,
	342, 959,
	344, 959,
	345, 959,
	346, 959,
	347, 959,
	348, 959,
	349, 959,
	350, 959,
	351, 959,
	352, 959,
	353, 959,
	354, 959,
	355, 959,
	357, 959,
	358, 959,
	359, 959,
	361, 959,
	362, 959,
	363, 959,
	364, 959,
	365, 959,
	366, 959,
	367, 959,
	368, 959,
	369, 959,
	371, 959,
	372, 959,
	373, 959,
	374, 959,
	377, 959,
	378, 959,
	379, 959,
	380, 959,
	381, 959,
	383, 959,
	384, 959,
	385, 959,
	387, 959,
	388, 959,
	391, 959,
	392, 959,
	393, 959,
	394, 959,
	395, 959,
	397, 959,
	399, 959,
	400, 959,
	401, 959,
	402, 959,
	403, 959,
	404, 959,
	405, 959,
	407, 959,
	408, 959,
	409, 959,
	414, 959,
	415, 959,
	416, 959,
	417, 959,
	418, 959,
	419, 959,
	-2, 0,
	-1, 118,
	1, 851,
	196, 851,
	278, 851,
	285, 851,
	445, 851,
	446, 851,
	-2, 0,
	-1, 120,
	1, 851,
	445, 851,
	446, 851,
	-2, 0,
	-1, 121,
	1, 851,
	445, 851,
	446, 851,
	-2, 0,
	-1, 122,
	1, 855,
	445, 855,
	446, 855,
	-2, 0,
	-1, 146,
	118, 930,
	132, 930,
	190, 930,
	218, 930,
	247, 930,
	256, 930,
	389, 930,
	-2, 927,
	-1, 176,
	4, 966,
	5, 966,
	6, 966,
	7, 966,
	8, 966,
	9, 966,
	10, 966,
	21, 966,
	22, 966,
	23, 966,
	24, 966,
	25, 966,
	27, 966,
	32, 966,
	33, 966,
	37, 966,
	38, 966,
	39, 966,
	40, 966,
	41, 966,
	42, 966,
	43, 966,
	44, 966,
	45, 966,
	46, 966,
	48, 966,
	49, 966,
	50, 966,
	51, 966,
	52, 966,
	53, 966,
	54, 966,
	55, 966,
	56, 966,
	57, 966,
	58, 966,
	59, 966,
	61, 966,
	62, 966,
	64, 966,
	66, 966,
	67, 966,
	68, 966,
	69, 966,
	70, 966,
	72, 966,
	73, 966,
	74, 966,
	75, 966,
	77, 966,
	79, 966,
	80, 966,
	81, 966,
	83, 966,
	84, 966,
	85, 966,
	86, 966,
	87, 966,
	88, 966,
	89, 966,
	90, 966,
	91, 966,
	92, 966,
	93, 966,
	94, 966,
	95, 966,
	96, 966,
	97, 966,
	98, 966,
	99, 966,
	100, 966,
	101, 966,
	102, 966,
	104, 966,
	105, 966,
	107, 966,
	110, 966,
	111, 966,
	112, 966,
	114, 966,
	116, 966,
	117, 966,
	119, 966,
	120, 966,
	121, 966,
	122, 966,
	123, 966,
	124, 966,
	125, 966,
	126, 966,
	127, 966,
	128, 966,
	129, 966,
	130, 966,
	131, 966,
	137, 966,
	138, 966,
	139, 966,
	140, 966,
	141, 966,
	142, 966,
	144, 966,
	146, 966,
	149, 966,
	150, 966,
	151, 966,
	153, 966,
	154, 966,
	156, 966,
	157, 966,
	159, 966,
	160, 966,
	161, 966,
	162, 966,
	163, 966,
	164, 966,
	165, 966,
	166, 966,
	167, 966,
	168, 966,
	169, 966,
	171, 966,
	172, 966,
	176, 966,
	177, 966,
	178, 966,
	179, 966,
	181, 966,
	182, 966,
	183, 966,
	184, 966,
	185, 966,
	186, 966,
	187, 966,
	188, 966,
	189, 966,
	191, 966,
	193, 966,
	194, 966,
	195, 966,
	196, 966,
	197, 966,
	198, 966,
	199, 966,
	200, 966,
	201, 966,
	204, 966,
	205, 966,
	206, 966,
	207, 966,
	209, 966,
	210, 966,
	212, 966,
	213, 966,
	214, 966,
	215, 966,
	216, 966,
	217, 966,
	219, 966,
	220, 966,
	223, 966,
	225, 966,
	226, 966,
	227, 966,
	228, 966,
	229, 966,
	230, 966,
	231, 966,
	232, 966,
	233, 966,
	234, 966,
	235, 966,
	236, 966,
	237, 966,
	238, 966,
	239, 966,
	240, 966,
	241, 966,
	242, 966,
	243, 966,
	244, 966,
	245, 966,
	246, 966,
	248, 966,
	249, 966,
	250, 966,
	253, 966,
	254, 966,
	257, 966,
	258, 966,
	259, 966,
	260, 966,
	261, 966,
	262, 966,
	263, 966,
	264, 966,
	265, 966,
	266, 966,
	267, 966,
	268, 966,
	269, 966,
	270, 966,
	272, 966,
	273, 966,
	274, 966,
	275, 966,
	276, 966,
	278, 966,
	280, 966,
	281, 966,
	282, 966,
	283, 966,
	284, 966,
	285, 966,
	286, 966,
	287, 966,
	288, 966,
	290, 966,
	291, 966,
	292, 966,
	293, 966,
	294, 966,
	296, 966,
	297, 966,
	298, 966,
	299, 966,
	300, 966,
	301, 966,
	302, 966,
	303, 966,
	305, 966,
	306, 966,
	307, 966,
	308, 966,
	309, 966,
	310, 966,
	311, 966,
	312, 966,
	314, 966,
	315, 966,
	316, 966,
	317, 966,
	318, 966,
	319, 966,
	320, 966,
	321, 966,
	323, 966,
	324, 966,
	325, 966,
	326, 966,
	327, 966,
	328, 966,
	329, 966,
	330, 966,
	331, 966,
	332, 966,
	333, 966,
	334, 966,
	335, 966,
	336, 966,
	337, 966,
	338, 966,
	339, 966,
	340, 966,
	341, 966,
	342, 966,
	344, 966,
	345, 966,
	346, 966,
	347, 966,
	348, 966,
	349, 966,
	350, 966,
	351, 966,
	352, 966,
	353, 966,
	354, 966,
	355, 966,
	357, 966,
	358, 966,
	359, 966,
	361, 966,
	362, 966,
	363, 966,
	364, 966,
	365, 966,
	366, 966,
	367, 966,
	368, 966,
	369, 966,
	371, 966,
	372, 966,
	373, 966,
	374, 966,
	377, 966,
	378, 966,
	379, 966,
	380, 966,
	381, 966,
	382, 966,
	383, 966,
	384, 966,
	385, 966,
	387, 966,
	388, 966,
	390, 966,
	391, 966,
	392, 966,
	393, 966,
	394, 966,
	395, 966,
	396, 966,
	397, 966,
	399, 966,
	400, 966,
	401, 966,
	402, 966,
	403, 966,
	404, 966,
	405, 966,
	407, 966,
	408, 966,
	409, 966,
	414, 966,
	415, 966,
	416, 966,
	417, 966,
	418, 966,
	419, 966,
	420, 966,
	428, 966,
	433, 966,
	434, 966,
	435, 966,
	442, 966,
	448, 966,
	-2, 0,
	-1, 179,
	1, 28,
	446, 28,
	-2, 957,
	-1, 537,
	148, 1618,
	375, 1618,
	425, 1618,
	444, 1618,
	-2, 0,
	-1, 538,
	148, 1694,
	375, 1694,
	425, 1694,
	444, 1694,
	-2, 0,
	-1, 539,
	148, 1608,
	375, 1608,
	425, 1608,
	444, 1608,
	-2, 0,
	-1, 541,
	148, 1776,
	375, 1776,
	425, 1776,
	444, 1776,
	-2, 0,
	-1, 543,
	148, 1805,
	375, 1805,
	425, 1805,
	444, 1805,
	-2, 0,
	-1, 550,
	148, 1702,
	375, 1702,
	425, 1702,
	444, 1702,
	-2, 451,
	-1, 567,
	444, 1568,
	447, 1568,
	-2, 619,
	-1, 568,
	444, 1570,
	447, 1570,
	-2, 620,
	-1, 569,
	444, 1569,
	447, 1569,
	-2, 621,
	-1, 570,
	447, 1517,
	-2, 622,
	-1, 714,
	1, 549,
	441, 549,
	443, 549,
	445, 549,
	446, 549,
	-2, 0,
	-1, 715,
	1, 618,
	145, 618,
	441, 618,
	443, 618,
	445, 618,
	446, 618,
	-2, 0,
	-1, 721,
	1, 563,
	441, 563,
	443, 563,
	445, 563,
	446, 563,
	-2, 0,
	-1, 723,
	1, 567,
	441, 567,
	443, 567,
	445, 567,
	446, 567,
	-2, 0,
	-1, 725,
	1, 577,
	441, 577,
	443, 577,
	445, 577,
	446, 577,
	-2, 0,
	-1, 726,
	1, 583,
	441, 583,
	443, 583,
	445, 583,
	446, 583,
	-2, 0,
	-1, 727,
	1, 586,
	441, 586,
	443, 586,
	445, 586,
	446, 586,
	-2, 0,
	-1, 731,
	1, 600,
	441, 600,
	443, 600,
	445, 600,
	446, 600,
	-2, 0,
	-1, 732,
	1, 602,
	441, 602,
	443, 602,
	445, 602,
	446, 602,
	-2, 0,
	-1, 775,
	132, 970,
	218, 970,
	247, 970,
	-2, 927,
	-1, 790,
	132, 969,
	218, 969,
	247, 969,
	-2, 927,
	-1, 814,
	444, 1567,
	-2, 459,
	-1, 843,
	442, 1559,
	-2, 1550,
	-1, 849,
	5, 1094,
	-2, 1599,
	-1, 850,
	5, 1095,
	-2, 1603,
	-1, 851,
	5, 1096,
	-2, 1602,
	-1, 852,
	5, 1097,
	-2, 1802,
	-1, 853,
	5, 1098,
	-2, 1704,
	-1, 854,
	5, 1099,
	-2, 1768,
	-1, 855,
	5, 1100,
	-2, 1770,
	-1, 856,
	5, 1101,
	-2, 1781,
	-1, 857,
	5, 1102,
	-2, 1771,
	-1, 858,
	5, 1103,
	-2, 1772,
	-1, 859,
	5, 1104,
	-2, 1598,
	-1, 860,
	5, 1105,
	-2, 1816,
	-1, 861,
	5, 1106,
	-2, 1669,
	-1, 862,
	5, 1107,
	-2, 1711,
	-1, 863,
	5, 1108,
	-2, 1713,
	-1, 864,
	5, 1109,
	-2, 1673,
	-1, 865,
	5, 1110,
	442, 1577,
	-2, 1568,
	-1, 866,
	5, 1163,
	442, 1163,
	-2, 1851,
	-1, 871,
	442, 1578,
	-2, 1569,
	-1, 873,
	5, 1114,
	-2, 1849,
	-1, 874,
	5, 1115,
	-2, 1850,
	-1, 875,
	5, 1116,
	-2, 1672,
	-1, 876,
	5, 1117,
	-2, 1862,
	-1, 877,
	5, 1118,
	-2, 1674,
	-1, 878,
	5, 1119,
	-2, 1675,
	-1, 879,
	5, 1120,
	-2, 1676,
	-1, 880,
	5, 1121,
	-2, 1831,
	-1, 881,
	5, 1122,
	-2, 1860,
	-1, 882,
	5, 1123,
	-2, 1653,
	-1, 883,
	5, 1124,
	-2, 1654,
	-1, 884,
	5, 1138,
	-2, 1843,
	-1, 886,
	5, 1113,
	-2, 1839,
	-1, 887,
	5, 1113,
	-2, 1838,
	-1, 888,
	5, 1113,
	-2, 1855,
	-1, 889,
	5, 1130,
	-2, 1833,
	-1, 890,
	5, 1131,
	-2, 1600,
	-1, 891,
	5, 1141,
	-2, 1832,
	-1, 892,
	5, 1143,
	-2, 1870,
	-1, 894,
	5, 1154,
	-2, 1628,
	-1, 895,
	5, 1155,
	-2, 1864,
	-1, 896,
	5, 1157,
	-2, 1865,
	-1, 897,
	5, 1159,
	-2, 1866,
	-1, 898,
	5, 1161,
	-2, 1803,
	-1, 899,
	5, 1081,
	-2, 1682,
	-1, 900,
	5, 1082,
	-2, 1683,
	-1, 901,
	444, 1565,
	-2, 1549,
	-1, 902,
	442, 1890,
	-2, 1566,
	-1, 922,
	5, 1149,
	-2, 1791,
	-1, 939,
	5, 1148,
	-2, 1871,
	-1, 949,
	5, 1150,
	408, 1150,
	-2, 1834,
	-1, 950,
	5, 1151,
	408, 1151,
	-2, 1835,
	-1, 986,
	442, 1577,
	-2, 1568,
	-1, 1015,
	148, 1805,
	375, 1805,
	425, 1805,
	444, 1805,
	-2, 0,
	-1, 1016,
	196, 863,
	278, 863,
	285, 863,
	-2, 439,
	-1, 1134,
	296, 1547,
	435, 1547,
	-2, 1546,
	-1, 1190,
	287, 650,
	407, 650,
	-2, 227,
	-1, 1210,
	268, 955,
	-2, 767,
	-1, 1219,
	251, 1572,
	-2, 0,
	-1, 1283,
	1, 330,
	441, 330,
	443, 330,
	445, 330,
	446, 330,
	-2, 929,
	-1, 1286,
	4, 1869,
	11, 1869,
	12, 1869,
	14, 1869,
	15, 1869,
	16, 1869,
	17, 1869,
	18, 1869,
	19, 1869,
	21, 1869,
	22, 1869,
	23, 1869,
	24, 1869,
	25, 1869,
	27, 1869,
	30, 1869,
	32, 1869,
	34, 1869,
	37, 1869,
	38, 1869,
	39, 1869,
	40, 1869,
	41, 1869,
	42, 1869,
	43, 1869,
	44, 1869,
	45, 1869,
	46, 1869,
	48, 1869,
	49, 1869,
	50, 1869,
	51, 1869,
	52, 1869,
	53, 1869,
	56, 1869,
	57, 1869,
	58, 1869,
	59, 1869,
	61, 1869,
	62, 1869,
	63, 1869,
	66, 1869,
	67, 1869,
	68, 1869,
	69, 1869,
	70, 1869,
	71, 1869,
	72, 1869,
	73, 1869,
	74, 1869,
	75, 1869,
	77, 1869,
	78, 1869,
	79, 1869,
	80, 1869,
	81, 1869,
	83, 1869,
	84, 1869,
	85, 1869,
	93, 1869,
	94, 1869,
	95, 1869,
	96, 1869,
	97, 1869,
	98, 1869,
	99, 1869,
	100, 1869,
	102, 1869,
	104, 1869,
	105, 1869,
	107, 1869,
	110, 1869,
	111, 1869,
	112, 1869,
	114, 1869,
	116, 1869,
	117, 1869,
	119, 1869,
	120, 1869,
	121, 1869,
	122, 1869,
	123, 1869,
	124, 1869,
	125, 1869,
	126, 1869,
	127, 1869,
	128, 1869,
	129, 1869,
	133, 1869,
	134, 1869,
	135, 1869,
	136, 1869,
	137, 1869,
	138, 1869,
	139, 1869,
	140, 1869,
	141, 1869,
	142, 1869,
	143, 1869,
	144, 1869,
	146, 1869,
	149, 1869,
	150, 1869,
	151, 1869,
	153, 1869,
	154, 1869,
	156, 1869,
	157, 1869,
	159, 1869,
	160, 1869,
	161, 1869,
	162, 1869,
	163, 1869,
	164, 1869,
	165, 1869,
	166, 1869,
	167, 1869,
	168, 1869,
	169, 1869,
	170, 1869,
	171, 1869,
	172, 1869,
	173, 1869,
	174, 1869,
	175, 1869,
	177, 1869,
	178, 1869,
	179, 1869,
	181, 1869,
	182, 1869,
	183, 1869,
	184, 1869,
	185, 1869,
	186, 1869,
	187, 1869,
	188, 1869,
	189, 1869,
	191, 1869,
	193, 1869,
	194, 1869,
	195, 1869,
	196, 1869,
	197, 1869,
	198, 1869,
	199, 1869,
	200, 1869,
	201, 1869,
	202, 1869,
	203, 1869,
	204, 1869,
	205, 1869,
	206, 1869,
	207, 1869,
	209, 1869,
	210, 1869,
	212, 1869,
	213, 1869,
	214, 1869,
	215, 1869,
	216, 1869,
	217, 1869,
	219, 1869,
	220, 1869,
	223, 1869,
	224, 1869,
	225, 1869,
	226, 1869,
	227, 1869,
	228, 1869,
	229, 1869,
	230, 1869,
	231, 1869,
	232, 1869,
	233, 1869,
	234, 1869,
	235, 1869,
	236, 1869,
	237, 1869,
	238, 1869,
	241, 1869,
	243, 1869,
	244, 1869,
	245, 1869,
	246, 1869,
	248, 1869,
	249, 1869,
	250, 1869,
	253, 1869,
	254, 1869,
	255, 1869,
	257, 1869,
	258, 1869,
	260, 1869,
	262, 1869,
	263, 1869,
	264, 1869,
	265, 1869,
	266, 1869,
	267, 1869,
	268, 1869,
	269, 1869,
	270, 1869,
	272, 1869,
	273, 1869,
	274, 1869,
	275, 1869,
	276, 1869,
	278, 1869,
	280, 1869,
	281, 1869,
	282, 1869,
	283, 1869,
	284, 1869,
	285, 1869,
	286, 1869,
	287, 1869,
	288, 1869,
	290, 1869,
	291, 1869,
	292, 1869,
	293, 1869,
	294, 1869,
	295, 1869,
	296, 1869,
	297, 1869,
	298, 1869,
	299, 1869,
	300, 1869,
	301, 1869,
	302, 1869,
	303, 1869,
	305, 1869,
	306, 1869,
	307, 1869,
	308, 1869,
	309, 1869,
	310, 1869,
	311, 1869,
	312, 1869,
	313, 1869,
	314, 1869,
	315, 1869,
	316, 1869,
	317, 1869,
	318, 1869,
	319, 1869,
	320, 1869,
	321, 1869,
	323, 1869,
	324, 1869,
	325, 1869,
	326, 1869,
	327, 1869,
	328, 1869,
	329, 1869,
	330, 1869,
	331, 1869,
	332, 1869,
	334, 1869,
	335, 1869,
	336, 1869,
	337, 1869,
	338, 1869,
	339, 1869,
	340, 1869,
	341, 1869,
	342, 1869,
	344, 1869,
	345, 1869,
	346, 1869,
	347, 1869,
	348, 1869,
	349, 1869,
	350, 1869,
	351, 1869,
	352, 1869,
	353, 1869,
	354, 1869,
	355, 1869,
	357, 1869,
	358, 1869,
	359, 1869,
	361, 1869,
	362, 1869,
	363, 1869,
	364, 1869,
	365, 1869,
	366, 1869,
	367, 1869,
	368, 1869,
	369, 1869,
	371, 1869,
	372, 1869,
	373, 1869,
	374, 1869,
	377, 1869,
	378, 1869,
	379, 1869,
	380, 1869,
	381, 1869,
	383, 1869,
	384, 1869,
	385, 1869,
	387, 1869,
	388, 1869,
	391, 1869,
	392, 1869,
	393, 1869,
	394, 1869,
	395, 1869,
	397, 1869,
	399, 1869,
	400, 1869,
	401, 1869,
	402, 1869,
	403, 1869,
	404, 1869,
	405, 1869,
	407, 1869,
	408, 1869,
	409, 1869,
	414, 1869,
	415, 1869,
	416, 1869,
	417, 1869,
	418, 1869,
	419, 1869,
	420, 1869,
	421, 1869,
	423, 1869,
	424, 1869,
	425, 1869,
	426, 1869,
	427, 1869,
	428, 1869,
	430, 1869,
	431, 1869,
	432, 1869,
	433, 1869,
	434, 1869,
	435, 1869,
	436, 1869,
	437, 1869,
	438, 1869,
	440, 1869,
	443, 1869,
	444, 1869,
	447, 1869,
	448, 1869,
	-2, 0,
	-1, 1289,
	148, 1776,
	375, 1776,
	425, 1776,
	444, 1776,
	-2, 0,
	-1, 1356,
	1, 1823,
	441, 1823,
	443, 1823,
	444, 1823,
	445, 1823,
	446, 1823,
	-2, 598,
	-1, 1357,
	1, 1774,
	441, 1774,
	443, 1774,
	444, 1774,
	445, 1774,
	446, 1774,
	-2, 599,
	-1, 1370,
	196, 863,
	278, 863,
	285, 863,
	-2, 858,
	-1, 1375,
	132, 969,
	218, 969,
	247, 969,
	-2, 927,
	-1, 1468,
	118, 931,
	132, 931,
	190, 931,
	218, 931,
	247, 931,
	256, 931,
	389, 931,
	-2, 1319,
	-1, 1517,
	443, 1452,
	-2, 0,
	-1, 1552,
	118, 931,
	132, 931,
	190, 931,
	218, 931,
	247, 931,
	256, 931,
	389, 931,
	-2, 1039,
	-1, 1605,
	442, 1153,
	-2, 1141,
	-1, 1644,
	196, 863,
	278, 863,
	285, 863,
	-2, 441,
	-1, 1893,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1199,
	-1, 1894,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1200,
	-1, 1895,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1201,
	-1, 1896,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1202,
	-1, 1897,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1203,
	-1, 1898,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1204,
	-1, 1899,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1205,
	-1, 1900,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1206,
	-1, 1912,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1218,
	-1, 1913,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1219,
	-1, 1914,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1220,
	-1, 1917,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1225,
	-1, 1923,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1229,
	-1, 1925,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1237,
	-1, 1926,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1238,
	-1, 1927,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1239,
	-1, 1928,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1240,
	-1, 2019,
	5, 1110,
	148, 1463,
	442, 1577,
	-2, 1568,
	-1, 2020,
	148, 1464,
	-2, 1827,
	-1, 2021,
	148, 1465,
	-2, 1701,
	-1, 2022,
	148, 1466,
	-2, 1629,
	-1, 2023,
	148, 1467,
	-2, 1663,
	-1, 2024,
	148, 1468,
	-2, 1699,
	-1, 2025,
	148, 1469,
	-2, 1767,
	-1, 2093,
	1, 1040,
	83, 1040,
	118, 1040,
	132, 1040,
	145, 1040,
	149, 1040,
	155, 1040,
	158, 1040,
	181, 1040,
	190, 1040,
	199, 1040,
	214, 1040,
	218, 1040,
	234, 1040,
	247, 1040,
	251, 1040,
	256, 1040,
	304, 1040,
	306, 1040,
	389, 1040,
	398, 1040,
	411, 1040,
	412, 1040,
	413, 1040,
	422, 1040,
	441, 1040,
	443, 1040,
	445, 1040,
	446, 1040,
	447, 1040,
	-2, 1039,
	-1, 2098,
	442, 1551,
	-2, 1563,
	-1, 2117,
	442, 1152,
	-2, 1142,
	-1, 2326,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1227,
	-1, 2327,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1231,
	-1, 2333,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1233,
	-1, 2507,
	196, 863,
	278, 863,
	285, 863,
	-2, 438,
	-1, 2578,
	443, 1522,
	447, 1522,
	-2, 1538,
	-1, 2590,
	268, 955,
	-2, 767,
	-1, 2667,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1235,
	-1, 2674,
	194, 0,
	195, 0,
	241, 0,
	-2, 1254,
	-1, 2735,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1283,
	-1, 2736,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1284,
	-1, 2737,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1285,
	-1, 2741,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1289,
	-1, 2742,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1290,
	-1, 2743,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1291,
	-1, 2785,
	442, 1552,
	-2, 1564,
	-1, 2864,
	444, 1972,
	-2, 904,
	-1, 2905,
	194, 0,
	195, 0,
	241, 0,
	-2, 1255,
	-1, 2908,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1258,
	-1, 2909,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1260,
	-1, 3050,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1259,
	-1, 3051,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1261,
	-1, 3061,
	194, 0,
	-2, 1292,
	-1, 3151,
	194, 0,
	-2, 1293,
	-1, 3257,
	40, 0,
	169, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1830,
}

const sqlPrivate = 57344

const sqlLast = 67289

var sqlAct = [...]int{

	871, 3337, 3089, 3256, 3006, 3092, 3266, 3232, 3327, 3114,
	3267, 3230, 3229, 3268, 2579, 2249, 3216, 3078, 3117, 1808,
	2705, 1275, 2803, 3155, 3019, 1880, 3042, 2855, 3255, 2850,
	2241, 1940, 2599, 2860, 2964, 1138, 2576, 2085, 1575, 791,
	209, 2804, 209, 209, 548, 2352, 209, 209, 209, 209,
	209, 2515, 800, 209, 2050, 1383, 2354, 2601, 2238, 2612,
	988, 569, 3065, 1039, 2607, 2216, 828, 2281, 1547, 201,
	2473, 2484, 2433, 2319, 979, 1766, 1545, 2940, 1769, 209,
	2219, 665, 1131, 569, 2145, 2280, 2449, 1758, 2250, 1787,
	2272, 1687, 2274, 1759, 1526, 2086, 2460, 2199, 2147, 2758,
	5, 1466, 1877, 1476, 1696, 3156, 33, 2138, 2315, 1555,
	2432, 1953, 1873, 1971, 1150, 799, 139, 2611, 1271, 1714,
	1720, 867, 2217, 1675, 2081, 1527, 3115, 87, 1576, 2489,
	1983, 1937, 788, 1673, 2088, 1564, 2200, 1370, 2577, 2177,
	2243, 1284, 1027, 1140, 1268, 1258, 1755, 1147, 2047, 1204,
	2284, 203, 1965, 1536, 974, 1278, 2176, 2073, 1018, 1384,
	953, 146, 2058, 1489, 2015, 1457, 1954, 516, 1382, 147,
	202, 209, 209, 532, 565, 1775, 500, 570, 660, 571,
	971, 524, 1282, 542, 1234, 641, 1158, 610, 1686, 893,
	827, 951, 2084, 139, 519, 976, 706, 1369, 2774, 1216,
	1388, 2775, 1809, 2350, 790, 3365, 2242, 1546, 123, 2067,
	1789, 2201, 574, 3356, 59, 527, 3355, 2067, 3336, 1789,
	2067, 795, 1727, 870, 2662, 60, 118, 795, 1789, 3323,
	2619, 577, 2585, 2978, 574, 1723, 1801, 3321, 2505, 64,
	3287, 2978, 2618, 3286, 2067, 3283, 3280, 2067, 3277, 3284,
	3281, 2067, 1727, 577, 40, 120, 3253, 674, 3252, 3249,
	1727, 3248, 1727, 1801, 3211, 1801, 3202, 39, 2110, 70,
	2978, 3201, 2060, 3195, 3189, 2978, 796, 1727, 2978, 3187,
	3153, 3139, 3136, 2978, 2110, 1727, 2978, 3106, 968, 42,
	3212, 1727, 3105, 3098, 43, 139, 1727, 1727, 2194, 76,
	3097, 776, 121, 3140, 2978, 954, 954, 41, 86, 775,
	3071, 1005, 77, 44, 1727, 1179, 3052, 3033, 3002, 2996,
	2110, 2631, 2067, 2067, 2977, 2907, 2874, 2866, 2978, 2110,
	2867, 2867, 2780, 2770, 2201, 1000, 2781, 2771, 804, 45,
	2764, 2698, 783, 2638, 2067, 1727, 2107, 2639, 2446, 2444,
	78, 2443, 2067, 2067, 2397, 2067, 2382, 2371, 2067, 2761,
	2383, 2067, 2369, 955, 1801, 2270, 2123, 2109, 2370, 1805,
	2067, 2110, 2104, 2100, 2066, 1804, 2067, 1727, 2067, 1805,
	1727, 957, 2761, 958, 1173, 2059, 2997, 1727, 2639, 2191,
	2136, 1647, 2631, 2225, 2318, 1726, 2134, 1522, 1157, 179,
	2620, 959, 982, 956, 782, 3273, 781, 1001, 176, 780,
	176, 779, 2067, 778, 774, 773, 3254, 772, 2353, 2621,
	2955, 1396, 1397, 771, 770, 769, 768, 1439, 1440, 1441,
	767, 766, 765, 764, 763, 704, 703, 2405, 2406, 702,
	2423, 2424, 2425, 701, 700, 699, 178, 1399, 178, 698,
	1445, 697, 696, 695, 694, 693, 79, 2405, 2406, 1790,
	2423, 2424, 2425, 46, 692, 2405, 2406, 691, 1790, 690,
	689, 688, 687, 1398, 1396, 1397, 2903, 1790, 686, 1178,
	685, 1418, 684, 683, 682, 2246, 49, 145, 82, 177,
	83, 177, 47, 681, 2405, 2406, 122, 2420, 680, 170,
	1399, 673, 48, 672, 632, 209, 631, 171, 590, 176,
	589, 588, 580, 579, 209, 2405, 2406, 2420, 2423, 2424,
	2425, 52, 578, 555, 116, 554, 1398, 2919, 148, 2618,
	148, 1727, 553, 119, 2902, 209, 552, 1001, 536, 199,
	198, 197, 209, 1421, 1422, 1423, 1424, 178, 1172, 196,
	1396, 1397, 195, 1404, 2420, 194, 193, 192, 209, 1042,
	209, 209, 1143, 209, 1042, 209, 191, 190, 189, 2411,
	117, 2059, 188, 209, 209, 2420, 1399, 187, 186, 1436,
	1446, 185, 149, 1426, 1427, 1428, 184, 183, 182, 2411,
	177, 181, 1666, 180, 2868, 998, 2427, 2411, 209, 1026,
	170, 1467, 1398, 1031, 1797, 2778, 1404, 2006, 171, 2487,
	1001, 2376, 209, 1788, 1143, 1143, 209, 209, 2365, 209,
	2426, 2301, 1853, 2204, 2101, 2231, 2411, 1434, 2092, 148,
	1134, 209, 4, 2004, 1419, 176, 1426, 1427, 1428, 209,
	2426, 1671, 1548, 2002, 2000, 1562, 1483, 2411, 1998, 1478,
	2421, 1163, 1811, 209, 209, 209, 209, 209, 1143, 1143,
	1033, 990, 3185, 1143, 1395, 209, 1143, 209, 3146, 826,
	2421, 3088, 3034, 178, 3027, 1396, 1397, 3143, 2421, 3141,
	1279, 1016, 1404, 1153, 2957, 1217, 1217, 1419, 2939, 2938,
	1166, 2926, 1171, 2925, 1177, 2924, 2923, 2917, 2426, 2916,
	2915, 1399, 2914, 2840, 176, 1425, 176, 2421, 1167, 1161,
	2793, 1143, 1426, 1427, 1428, 798, 177, 1136, 1810, 2792,
	2790, 2784, 2755, 1420, 574, 1013, 170, 1398, 2421, 2754,
	2753, 209, 2682, 2678, 171, 2482, 2440, 2642, 1035, 2422,
	1128, 1133, 178, 577, 178, 209, 2431, 2404, 1437, 2401,
	1160, 1040, 1159, 2400, 2398, 148, 1151, 2381, 2164, 2422,
	209, 2359, 2358, 1419, 1287, 2351, 1221, 2422, 2271, 1210,
	1213, 2093, 1976, 1395, 967, 1465, 1420, 1294, 1479, 139,
	1477, 1478, 1763, 1394, 1297, 177, 3363, 177, 3335, 1732,
	796, 3334, 2232, 3288, 1730, 170, 2422, 170, 989, 1262,
	1265, 2707, 3244, 171, 1272, 171, 1285, 1404, 3242, 3180,
	3178, 3175, 3174, 3170, 3164, 1376, 1218, 2422, 3135, 3134,
	1943, 1291, 3084, 3063, 148, 3039, 2245, 3038, 3017, 3014,
	1435, 3010, 1375, 2954, 2937, 2888, 2405, 2406, 1438, 2885,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 2417,
	2418, 2419, 1420, 2819, 2818, 2807, 2416, 2414, 2415, 2407,
	2408, 2409, 2410, 2412, 2413, 3026, 1308, 2806, 176, 2417,
	2418, 2419, 2766, 2673, 2632, 2593, 2416, 2414, 2415, 2407,
	2408, 2409, 2410, 2412, 2413, 2414, 2415, 2407, 2408, 2409,
	2410, 2412, 2413, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 2565, 2546, 1301, 176, 178, 2525, 1374, 2524,
	2501, 2445, 1949, 2416, 2414, 2415, 2407, 2408, 2409, 2410,
	2412, 2413, 2380, 1381, 2379, 1368, 2499, 2417, 2418, 2419,
	2364, 2342, 2213, 1373, 2416, 2414, 2415, 2407, 2408, 2409,
	2410, 2412, 2413, 178, 1490, 1487, 2112, 2119, 1371, 177,
	1968, 2230, 2118, 209, 2096, 2078, 1396, 1397, 2065, 170,
	1996, 776, 1461, 796, 2405, 2406, 1561, 171, 2411, 775,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 1525, 209,
	1521, 1377, 1399, 1520, 1519, 1518, 177, 1517, 148, 1516,
	209, 1042, 209, 209, 1391, 1392, 170, 1515, 1514, 1143,
	569, 209, 209, 2525, 171, 569, 209, 1513, 1398, 1511,
	1510, 209, 1812, 1969, 1509, 1524, 1508, 1667, 2178, 1507,
	1506, 1533, 1505, 1504, 1503, 148, 2314, 1502, 176, 2405,
	2406, 1501, 1500, 1499, 1042, 176, 2466, 1480, 1462, 1460,
	1455, 1012, 1396, 1397, 1003, 1556, 1467, 3158, 2005, 2421,
	1569, 1491, 1492, 995, 810, 1641, 1530, 1531, 2956, 2911,
	2789, 2773, 2769, 2405, 2406, 59, 178, 1642, 1399, 2368,
	1582, 1544, 1543, 178, 2003, 2079, 60, 2405, 2406, 1479,
	1669, 1970, 1967, 2497, 2001, 1999, 139, 954, 1404, 1997,
	64, 1557, 1662, 3144, 1398, 3142, 2411, 1400, 1401, 1402,
	1403, 1405, 1406, 796, 2405, 2406, 1458, 1666, 3179, 177,
	1030, 3087, 1506, 1666, 1567, 2602, 177, 1506, 3032, 170,
	70, 2998, 2776, 1028, 2549, 2634, 170, 171, 2633, 2201,
	1553, 1496, 1691, 1494, 171, 1548, 1572, 1497, 2422, 1495,
	2387, 1639, 1366, 2386, 1523, 2385, 2384, 1316, 148, 2324,
	76, 574, 1666, 1644, 1570, 148, 574, 1143, 209, 86,
	1029, 2411, 1681, 77, 1042, 1665, 2166, 2817, 1025, 1550,
	577, 1968, 1485, 1972, 1571, 577, 2581, 2421, 2580, 1638,
	1657, 1656, 1653, 1565, 1666, 1663, 761, 1809, 3118, 1760,
	1764, 2648, 2180, 1607, 2560, 2411, 1573, 982, 1709, 982,
	3066, 78, 3338, 209, 209, 2242, 2709, 1984, 3274, 2411,
	209, 2117, 1464, 2374, 966, 1512, 1658, 1493, 2574, 1752,
	209, 1194, 3285, 3282, 762, 2614, 1672, 2799, 3226, 209,
	2851, 209, 2278, 209, 1969, 3311, 3312, 209, 2988, 1711,
	3194, 1305, 1713, 1182, 2124, 1717, 2509, 3360, 1192, 209,
	755, 757, 3112, 627, 1695, 2416, 2414, 2415, 2407, 2408,
	2409, 2410, 2412, 2413, 3275, 1843, 2422, 753, 1340, 751,
	1966, 2140, 748, 1751, 1841, 556, 2421, 1660, 3109, 3108,
	1721, 3107, 2822, 2833, 2830, 2829, 1748, 2140, 2239, 1143,
	209, 1143, 2796, 2836, 2115, 2795, 1143, 2363, 2139, 2362,
	209, 209, 1970, 1967, 2361, 1246, 2360, 79, 2328, 574,
	1143, 1143, 1724, 209, 1781, 1772, 2196, 1813, 1193, 209,
	2149, 2190, 2187, 2168, 569, 209, 2106, 209, 577, 209,
	628, 209, 2033, 209, 1924, 1160, 1372, 1159, 145, 82,
	1156, 83, 1716, 209, 1725, 209, 1298, 1654, 3005, 1995,
	1030, 1339, 1792, 2113, 209, 1794, 1728, 1822, 1796, 2498,
	176, 1994, 1799, 1993, 1992, 2422, 1882, 1608, 562, 1188,
	1205, 1779, 664, 209, 1688, 116, 745, 1742, 1741, 209,
	1402, 1403, 1405, 1406, 1303, 2415, 2407, 2408, 2409, 2410,
	2412, 2413, 1030, 3193, 1972, 1227, 1661, 1226, 178, 1042,
	1029, 1225, 1685, 1224, 3047, 993, 1203, 2152, 1777, 1740,
	622, 1850, 2099, 1774, 2649, 2548, 796, 2167, 1939, 1851,
	1818, 117, 1939, 1857, 3094, 1689, 1690, 2159, 3246, 2158,
	2809, 1778, 1285, 149, 2651, 794, 1379, 1313, 2650, 1299,
	1860, 177, 1029, 1202, 2298, 1335, 1807, 1814, 1972, 564,
	3303, 170, 2689, 2409, 2410, 2412, 2413, 1852, 1011, 171,
	2692, 679, 789, 1582, 1582, 1820, 1821, 2609, 992, 1406,
	2984, 1806, 3270, 1013, 1691, 574, 1351, 794, 1190, 621,
	148, 3209, 1825, 2610, 1042, 2407, 2408, 2409, 2410, 2412,
	2413, 1966, 1683, 1557, 577, 869, 1336, 1935, 1832, 2407,
	2408, 2409, 2410, 2412, 2413, 1317, 2557, 793, 1855, 2552,
	1984, 3350, 2184, 1535, 1708, 1858, 1955, 1956, 3171, 1933,
	2690, 2568, 1338, 209, 3311, 1878, 1879, 2316, 2317, 1693,
	1205, 2413, 1667, 2178, 1955, 1981, 2609, 2151, 1667, 2178,
	558, 630, 629, 1859, 1488, 1856, 1854, 1042, 209, 793,
	776, 2510, 1972, 776, 776, 659, 563, 209, 1869, 1365,
	209, 1870, 1871, 1042, 2831, 2508, 2014, 2227, 2018, 2018,
	2031, 1245, 1955, 795, 2303, 2051, 2053, 1667, 2178, 1539,
	2057, 2820, 1789, 1980, 2339, 3182, 1607, 1607, 796, 3271,
	2105, 1881, 1991, 1947, 2094, 1849, 560, 2137, 1945, 2405,
	2406, 796, 2423, 2424, 2425, 796, 2337, 3207, 2982, 1667,
	1664, 1542, 1972, 1676, 2080, 795, 2097, 1677, 2090, 2091,
	1929, 620, 1951, 619, 759, 2188, 749, 758, 1930, 1537,
	1683, 1931, 3330, 557, 1936, 1187, 3208, 1304, 2893, 2537,
	1842, 209, 3057, 749, 1540, 750, 1978, 2070, 749, 1840,
	2150, 623, 2810, 1975, 2378, 2306, 1454, 954, 2074, 2420,
	2889, 2089, 3272, 795, 1538, 2787, 2539, 1022, 1006, 561,
	1348, 2895, 1042, 1579, 981, 2108, 1985, 209, 2536, 2026,
	559, 2462, 796, 2055, 2042, 209, 512, 2541, 3302, 3269,
	139, 1322, 2071, 2063, 2064, 209, 1712, 3095, 2075, 2076,
	1691, 2127, 1678, 3310, 1300, 1645, 792, 2334, 209, 1553,
	507, 1143, 3308, 2129, 1680, 1697, 1314, 843, 2335, 3124,
	3016, 2340, 2983, 209, 1042, 1387, 1868, 209, 209, 736,
	2540, 2411, 1701, 2597, 746, 2114, 1541, 2234, 2330, 1753,
	1532, 1302, 1938, 736, 2141, 2130, 2305, 2975, 792, 1023,
	1004, 787, 1349, 209, 209, 2098, 1024, 209, 2128, 999,
	3351, 982, 2302, 991, 1582, 787, 499, 1315, 1682, 1378,
	1312, 1932, 209, 2972, 1698, 2842, 2894, 1134, 982, 209,
	1934, 209, 2426, 209, 2122, 2153, 2155, 1491, 1492, 209,
	2185, 1010, 209, 2163, 209, 825, 209, 2571, 209, 209,
	2170, 209, 1143, 1143, 1143, 2125, 1143, 2214, 2121, 1386,
	209, 209, 2421, 209, 2973, 3328, 1824, 1692, 3301, 209,
	737, 3161, 1350, 2193, 2266, 2267, 2171, 2144, 2461, 2744,
	209, 1790, 209, 2290, 737, 3100, 581, 3345, 2206, 2304,
	2208, 2197, 2935, 1017, 3099, 1702, 3082, 2236, 2198, 2490,
	209, 209, 209, 1921, 209, 2034, 2798, 1683, 2336, 2179,
	2181, 2182, 2183, 2253, 2135, 2161, 2189, 2338, 2598, 2521,
	2517, 3044, 2235, 2218, 2215, 2169, 1773, 209, 574, 1762,
	1454, 3329, 2244, 1761, 2244, 901, 2543, 1607, 2186, 2222,
	1470, 2211, 2277, 1683, 1475, 1385, 985, 577, 1736, 1022,
	3183, 2422, 2688, 2226, 1160, 2268, 2202, 2474, 1703, 1704,
	1946, 1865, 2292, 3331, 2293, 2255, 2262, 1699, 2248, 1535,
	139, 3217, 1719, 1386, 1387, 205, 2172, 502, 503, 2987,
	1539, 520, 502, 520, 530, 535, 2986, 2259, 551, 2260,
	1323, 2261, 1718, 2263, 1700, 1846, 205, 2269, 2264, 1285,
	2291, 2279, 2968, 1648, 2331, 2969, 508, 2265, 738, 2856,
	2745, 3020, 1542, 2212, 668, 2296, 2746, 2297, 205, 2308,
	1715, 3043, 738, 1248, 983, 1652, 209, 3083, 3344, 2936,
	2072, 1023, 1919, 1922, 2527, 1539, 2526, 2322, 1024, 2311,
	2971, 1679, 1819, 1689, 1690, 1540, 2463, 2069, 2475, 2068,
	1233, 2103, 2974, 2102, 2313, 793, 678, 1866, 509, 1385,
	2224, 2417, 2418, 2419, 2356, 2357, 1219, 1542, 2416, 2414,
	2415, 2407, 2408, 2409, 2410, 2412, 2413, 1705, 1231, 2366,
	1918, 582, 583, 1220, 2310, 1537, 671, 1022, 3166, 1650,
	3090, 3007, 3184, 2643, 514, 1676, 510, 3, 511, 1677,
	1540, 1771, 3315, 2329, 1651, 3116, 502, 502, 739, 2570,
	2173, 2174, 1042, 3080, 205, 3045, 1579, 1579, 2941, 3220,
	1538, 796, 739, 3167, 2985, 2759, 1989, 3317, 209, 3062,
	1988, 209, 2934, 2835, 2434, 2435, 2491, 1541, 209, 2447,
	1706, 209, 209, 1042, 2454, 2455, 740, 2672, 3081, 1363,
	2493, 1345, 1042, 2970, 2442, 1343, 1333, 209, 2399, 2341,
	740, 2367, 1331, 2373, 2195, 585, 584, 3091, 2470, 1023,
	2456, 209, 1329, 2165, 2120, 1563, 1024, 3221, 2478, 2479,
	1560, 3168, 1364, 1295, 1678, 789, 1327, 1325, 209, 209,
	209, 2300, 1541, 2486, 209, 2299, 1680, 209, 2469, 2477,
	2295, 1920, 1848, 1829, 209, 209, 209, 209, 209, 1640,
	1498, 1209, 2481, 3265, 1319, 586, 587, 3214, 209, 209,
	2451, 2485, 1839, 2465, 2961, 2506, 209, 1582, 2458, 2459,
	2468, 1229, 2464, 2854, 2471, 2448, 2815, 2511, 209, 1143,
	1232, 209, 2813, 2437, 2438, 2439, 2797, 1042, 2523, 2596,
	1682, 676, 677, 2583, 747, 1042, 2529, 2582, 2533, 2534,
	209, 2518, 1582, 209, 209, 2240, 2700, 2229, 1230, 2228,
	2502, 2503, 2476, 2514, 2209, 1143, 209, 987, 1143, 1143,
	1143, 669, 670, 2492, 513, 209, 1803, 1802, 2528, 2496,
	2531, 209, 2494, 2586, 1800, 1362, 209, 1344, 209, 2551,
	1798, 1342, 1332, 2600, 2453, 209, 2504, 1751, 1330, 1795,
	2512, 1793, 2507, 1681, 1791, 1782, 1733, 1731, 1328, 2544,
	2558, 2545, 1722, 1710, 2522, 1707, 2034, 2034, 1143, 1143,
	2584, 2604, 1326, 1324, 982, 2480, 209, 209, 1681, 1683,
	209, 2630, 982, 982, 2488, 2542, 982, 2553, 2605, 2563,
	1607, 2564, 209, 1042, 209, 209, 1042, 209, 2556, 2547,
	1318, 2646, 2562, 2616, 1694, 1838, 1684, 2567, 1721, 3128,
	982, 2566, 2170, 209, 1721, 752, 754, 1228, 1389, 2320,
	2613, 3312, 963, 3238, 3036, 1607, 3035, 2554, 2561, 2613,
	1670, 2555, 1184, 3130, 2559, 2157, 2140, 2140, 2865, 2624,
	2625, 2626, 1691, 2627, 2628, 3173, 964, 2156, 2154, 1360,
	1361, 1826, 2641, 1396, 1397, 3148, 1042, 1579, 2645, 2656,
	2942, 2629, 2622, 796, 2034, 2034, 2034, 1042, 2192, 209,
	2587, 2675, 2615, 2589, 2590, 2591, 139, 2175, 2603, 1399,
	996, 2160, 1396, 1397, 1393, 2162, 3213, 2488, 3186, 668,
	2321, 2684, 2685, 2686, 515, 2846, 2841, 2783, 2247, 1582,
	1390, 2056, 1643, 1574, 3326, 1398, 2495, 2653, 207, 3343,
	1007, 2658, 1467, 1679, 2788, 2657, 1676, 551, 2405, 2406,
	1677, 2660, 2912, 2636, 2637, 1396, 1397, 2710, 965, 2132,
	2131, 1307, 2695, 205, 1398, 205, 205, 1306, 1148, 2132,
	205, 2654, 526, 2500, 2133, 1990, 1582, 1582, 205, 1162,
	1963, 1347, 2680, 2687, 1346, 1465, 1463, 3352, 3074, 981,
	209, 981, 1582, 1582, 2699, 2691, 2693, 2694, 3030, 3009,
	2884, 2873, 209, 1186, 2706, 2711, 2849, 2839, 1042, 2838,
	2837, 2812, 2713, 2623, 2594, 1151, 2756, 1208, 1040, 2592,
	2257, 205, 205, 1582, 1148, 2748, 209, 2772, 2723, 1948,
	2233, 2210, 1950, 2721, 1785, 1678, 205, 1784, 1878, 2714,
	1783, 1765, 1744, 1743, 1244, 1739, 1738, 1680, 1470, 1737,
	1735, 1734, 1607, 1380, 1878, 2724, 1359, 2777, 205, 205,
	205, 205, 1148, 1358, 2749, 1341, 2757, 2760, 1337, 209,
	551, 1334, 205, 1320, 2762, 2763, 2765, 1257, 2697, 1256,
	1255, 139, 1254, 1253, 1252, 2752, 1251, 1250, 814, 2703,
	1249, 2038, 1247, 2768, 1242, 1241, 1240, 2779, 1239, 1607,
	1607, 1682, 209, 209, 209, 1238, 209, 1201, 1200, 2834,
	1199, 1198, 1197, 2827, 1196, 1607, 1607, 1042, 209, 1195,
	2786, 2823, 1143, 2791, 1189, 1183, 1181, 1180, 1009, 1008,
	938, 848, 1646, 760, 614, 744, 205, 3093, 1353, 209,
	2832, 2814, 2801, 2816, 75, 1191, 1607, 601, 69, 2811,
	205, 3225, 209, 209, 1143, 1143, 1143, 2858, 209, 209,
	209, 2794, 2828, 209, 209, 535, 734, 2535, 2869, 1828,
	209, 2821, 785, 1751, 736, 1321, 2880, 1754, 2857, 1830,
	2861, 2170, 2467, 1042, 2077, 3206, 2845, 2892, 2034, 2034,
	1683, 2920, 2377, 2862, 3154, 3056, 787, 1987, 2848, 1484,
	2785, 71, 836, 921, 2962, 2800, 2283, 982, 2282, 803,
	1045, 985, 1655, 985, 842, 1668, 2116, 2859, 2017, 1674,
	1578, 845, 1580, 2253, 2863, 847, 2871, 2870, 209, 846,
	1568, 786, 2906, 1581, 1486, 844, 1577, 2223, 2886, 2881,
	2882, 2852, 2887, 2876, 2875, 2883, 2251, 1236, 724, 2451,
	1659, 1944, 1982, 2372, 2910, 2897, 1481, 816, 838, 1979,
	1582, 1002, 815, 2472, 2608, 737, 2034, 2034, 2034, 2034,
	2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034,
	2034, 2034, 2034, 2034, 2034, 2782, 2034, 209, 3025, 983,
	1864, 983, 2312, 1861, 617, 2402, 1964, 1042, 994, 1042,
	1579, 2039, 2032, 2028, 1367, 1456, 2252, 2898, 1032, 2877,
	2878, 2879, 819, 1942, 2933, 1472, 209, 209, 209, 2346,
	2483, 2617, 2111, 1872, 1679, 962, 961, 960, 209, 3231,
	3228, 1534, 2891, 1649, 209, 1579, 209, 2126, 1448, 209,
	209, 209, 209, 209, 832, 2452, 2644, 1206, 3172, 2980,
	209, 209, 1143, 1447, 1042, 756, 1143, 3163, 502, 1021,
	2944, 2945, 1020, 982, 1019, 2949, 2947, 2520, 2959, 3349,
	2808, 175, 209, 2953, 172, 1042, 2485, 3004, 1143, 205,
	174, 205, 173, 1607, 205, 2960, 2825, 2990, 209, 2569,
	91, 2943, 38, 2948, 2995, 1162, 37, 205, 36, 2979,
	2958, 18, 115, 738, 114, 205, 1162, 520, 113, 209,
	205, 1162, 112, 3022, 1042, 111, 551, 110, 2989, 109,
	1751, 2950, 2946, 108, 107, 3011, 2994, 106, 3037, 3031,
	2999, 3012, 105, 3000, 3021, 104, 103, 102, 3023, 101,
	1042, 100, 99, 98, 97, 3024, 2605, 3029, 96, 95,
	94, 93, 92, 35, 547, 544, 51, 50, 90, 89,
	17, 34, 15, 2981, 55, 56, 14, 30, 3008, 31,
	81, 80, 2613, 3013, 2991, 2992, 1042, 3046, 3003, 3053,
	29, 802, 209, 16, 209, 814, 1042, 209, 28, 814,
	26, 2952, 3048, 3028, 27, 209, 3064, 1126, 12, 3018,
	9, 784, 1126, 739, 8, 982, 11, 3001, 13, 25,
	144, 3077, 2038, 2038, 143, 74, 142, 3068, 209, 73,
	141, 140, 72, 24, 1582, 982, 10, 3069, 3070, 23,
	136, 209, 1579, 68, 138, 3076, 3072, 209, 137, 65,
	3096, 740, 1143, 135, 3040, 134, 3120, 209, 66, 3075,
	133, 132, 67, 981, 131, 22, 6, 3121, 54, 7,
	3123, 3041, 3110, 205, 2647, 84, 85, 3119, 209, 32,
	981, 3111, 63, 3073, 3133, 1582, 3127, 3126, 62, 1579,
	1579, 3137, 3138, 61, 3132, 3131, 21, 209, 53, 20,
	166, 165, 164, 209, 163, 1579, 1579, 159, 3125, 3103,
	3104, 209, 158, 162, 160, 161, 1040, 2861, 205, 205,
	2038, 2038, 2038, 157, 130, 205, 3147, 3169, 3160, 168,
	167, 155, 3152, 152, 151, 1770, 1579, 154, 209, 209,
	3157, 3159, 3054, 2605, 205, 156, 205, 3102, 205, 153,
	150, 169, 502, 129, 58, 209, 1143, 1607, 128, 3181,
	1582, 209, 127, 126, 1786, 1143, 1143, 125, 124, 57,
	19, 2, 3200, 209, 1, 209, 0, 0, 3054, 0,
	0, 0, 3188, 0, 0, 3192, 3198, 3199, 1881, 0,
	3177, 3191, 3129, 0, 0, 209, 0, 3203, 0, 0,
	0, 209, 209, 0, 1042, 551, 0, 0, 1607, 3222,
	0, 0, 3196, 209, 0, 1148, 205, 3233, 0, 0,
	3239, 0, 3176, 3241, 0, 3243, 3197, 0, 551, 3227,
	0, 0, 0, 3210, 205, 3250, 0, 3251, 0, 205,
	205, 0, 205, 209, 205, 0, 205, 3245, 205, 0,
	0, 0, 0, 0, 0, 3276, 3247, 0, 1844, 0,
	1845, 0, 3235, 3234, 3264, 3236, 3263, 3261, 3262, 205,
	0, 0, 0, 0, 0, 0, 3291, 209, 3293, 3289,
	0, 0, 0, 1607, 0, 985, 3299, 0, 535, 3290,
	3298, 3300, 3295, 0, 551, 3292, 209, 3294, 3296, 3297,
	2343, 2344, 985, 2034, 0, 0, 0, 0, 3204, 3309,
	3205, 3307, 0, 3306, 0, 3278, 0, 1396, 1397, 209,
	0, 0, 3316, 3240, 3314, 3313, 3233, 1396, 1397, 0,
	0, 3320, 0, 3322, 3319, 0, 3223, 0, 0, 3325,
	0, 0, 2034, 1399, 0, 0, 0, 0, 0, 0,
	3333, 3332, 0, 1399, 3340, 0, 3324, 3339, 0, 3341,
	3342, 2253, 0, 983, 0, 0, 3346, 0, 0, 1398,
	0, 0, 0, 1579, 3353, 0, 3354, 0, 0, 1398,
	983, 0, 0, 0, 0, 0, 0, 0, 802, 3361,
	3362, 0, 802, 3357, 3358, 3359, 1881, 0, 2428, 2429,
	2430, 0, 0, 0, 0, 3366, 0, 0, 0, 0,
	0, 0, 0, 0, 2038, 2038, 0, 0, 0, 3347,
	3348, 0, 0, 0, 1164, 0, 1168, 0, 1174, 0,
	0, 2034, 0, 0, 0, 0, 0, 0, 502, 1126,
	0, 0, 0, 0, 0, 0, 0, 0, 3364, 1404,
	0, 0, 0, 205, 3318, 0, 0, 0, 0, 1404,
	0, 0, 0, 502, 0, 0, 0, 0, 0, 0,
	205, 0, 502, 0, 0, 205, 814, 0, 0, 1426,
	1427, 1428, 1126, 0, 0, 0, 0, 0, 0, 1426,
	1427, 1428, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
	2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
	2038, 1293, 2038, 0, 0, 0, 0, 0, 1296, 0,
	59, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 64, 0, 661, 0, 0,
	0, 0, 0, 0, 0, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 663, 70, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 981, 0, 0, 0,
	0, 0, 2148, 0, 981, 981, 0, 64, 981, 0,
	205, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	205, 0, 1126, 0, 86, 0, 0, 0, 77, 1420,
	0, 0, 981, 205, 0, 0, 0, 70, 0, 1420,
	0, 0, 0, 0, 2975, 0, 0, 1579, 205, 0,
	0, 0, 205, 2203, 0, 0, 0, 1449, 1450, 1451,
	1452, 1453, 0, 0, 0, 0, 78, 76, 0, 0,
	2972, 0, 0, 2965, 0, 0, 86, 0, 205, 1162,
	77, 0, 205, 0, 0, 0, 2963, 1469, 0, 0,
	0, 0, 2967, 1482, 0, 0, 0, 1770, 1579, 0,
	0, 0, 2668, 2669, 2148, 0, 502, 0, 2256, 0,
	0, 2973, 0, 0, 205, 0, 0, 205, 78, 205,
	0, 205, 0, 205, 205, 0, 1148, 0, 0, 0,
	0, 0, 0, 0, 0, 2275, 668, 0, 2148, 0,
	0, 2966, 0, 0, 205, 0, 0, 0, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 1162, 0, 1162, 0, 1400,
	1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0, 0,
	0, 0, 79, 1579, 0, 205, 205, 205, 0, 205,
	2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734,
	2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 0,
	2747, 0, 205, 145, 82, 0, 83, 0, 0, 0,
	0, 0, 1528, 1528, 1528, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 79, 176, 985, 985, 0, 0,
	985, 0, 0, 0, 0, 0, 0, 664, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 2968,
	0, 0, 2969, 0, 985, 145, 82, 1126, 83, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 802,
	0, 0, 0, 0, 0, 0, 117, 2971, 0, 664,
	0, 0, 116, 0, 0, 0, 983, 0, 149, 2974,
	0, 1162, 0, 0, 983, 983, 177, 0, 983, 0,
	0, 1396, 1397, 0, 0, 178, 170, 0, 0, 0,
	0, 0, 0, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 983, 1568, 0, 0, 0, 1399, 117, 0,
	0, 0, 1126, 0, 0, 148, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 1398, 0, 0, 0, 0, 170, 0,
	0, 1418, 0, 0, 0, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 205, 205, 0, 662, 205, 981,
	2970, 0, 0, 502, 0, 1126, 502, 0, 0, 0,
	0, 0, 0, 502, 0, 0, 502, 502, 0, 0,
	0, 1126, 205, 0, 0, 0, 0, 0, 0, 2038,
	0, 0, 1162, 1421, 1422, 1423, 1424, 0, 0, 0,
	0, 0, 0, 1404, 0, 0, 1162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 2148, 2516, 0, 0, 2038, 2148,
	0, 0, 2516, 1426, 1427, 1428, 0, 0, 59, 2148,
	2516, 2148, 2516, 2516, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 205, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 1148, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	1126, 0, 0, 70, 0, 2573, 0, 0, 2575, 2578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 981, 0, 2038, 0, 0,
	205, 0, 0, 76, 0, 0, 1148, 0, 0, 0,
	0, 2148, 86, 502, 0, 0, 77, 0, 0, 0,
	2148, 0, 1126, 0, 0, 0, 0, 0, 0, 2405,
	2406, 0, 2423, 2424, 2425, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2677, 0,
	0, 205, 1770, 1420, 78, 1770, 0, 0, 0, 0,
	0, 985, 0, 0, 0, 0, 0, 2652, 0, 1148,
	205, 0, 205, 0, 0, 0, 0, 1862, 0, 1867,
	0, 0, 0, 0, 0, 1874, 0, 0, 205, 2420,
	0, 0, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 0, 1923, 0,
	1925, 1926, 1927, 1928, 0, 0, 0, 981, 0, 983,
	0, 0, 0, 0, 2708, 0, 0, 3061, 0, 0,
	1952, 0, 0, 0, 0, 0, 0, 981, 0, 0,
	79, 2411, 0, 0, 0, 1469, 0, 0, 0, 1977,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0,
	0, 0, 0, 0, 0, 0, 3085, 0, 0, 0,
	0, 145, 82, 0, 83, 0, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 0, 0, 0, 0, 2030, 0, 2041,
	2043, 2048, 2426, 176, 0, 0, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 664, 0, 0, 116, 205,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	0, 0, 2421, 0, 0, 0, 0, 502, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1162, 0, 0, 117, 3151, 0, 0, 0, 0,
	2405, 2406, 0, 2423, 2424, 2425, 149, 0, 0, 0,
	0, 0, 0, 0, 177, 983, 0, 2405, 2406, 2676,
	2423, 2424, 2425, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 171, 0, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 902, 0, 0,
	0, 2422, 0, 1288, 0, 0, 0, 0, 0, 0,
	2420, 0, 0, 0, 0, 0, 0, 2843, 205, 205,
	0, 205, 0, 0, 0, 0, 0, 2420, 0, 985,
	1126, 0, 0, 205, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 1396, 1397, 0, 985,
	0, 0, 0, 0, 2148, 205, 0, 0, 206, 0,
	0, 1126, 0, 0, 0, 0, 0, 2275, 2275, 0,
	1126, 0, 1399, 668, 668, 2148, 0, 0, 1770, 1770,
	206, 0, 2411, 0, 0, 205, 0, 0, 0, 0,
	0, 814, 2205, 0, 2207, 0, 0, 0, 1398, 2411,
	0, 0, 0, 814, 0, 0, 1418, 983, 0, 0,
	0, 2417, 2418, 2419, 1396, 1397, 0, 0, 2416, 2414,
	2415, 2407, 2408, 2409, 2410, 2412, 2413, 983, 0, 0,
	0, 0, 0, 2426, 0, 0, 0, 0, 0, 0,
	1399, 0, 0, 2921, 0, 0, 0, 0, 0, 0,
	0, 0, 2901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2421, 0, 1126, 1398, 0, 1421, 1422,
	1423, 1424, 0, 1126, 1418, 0, 0, 0, 1404, 0,
	2421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 1162, 0, 0, 0, 0, 0, 1426, 1427,
	1428, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	2671, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2148, 2516, 2148, 0, 0, 1421, 1422, 1423, 1424,
	0, 0, 0, 1162, 0, 0, 1404, 0, 0, 2148,
	0, 2516, 2422, 0, 1162, 1162, 205, 2148, 2516, 1419,
	0, 0, 0, 0, 0, 205, 205, 0, 0, 2422,
	0, 1126, 0, 0, 1126, 0, 1426, 1427, 1428, 0,
	2326, 2327, 0, 0, 0, 0, 2333, 3015, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 2148, 0, 2347, 2348, 0, 0, 0,
	0, 1977, 0, 0, 0, 0, 0, 0, 0, 0,
	2355, 0, 0, 0, 1162, 0, 0, 1419, 0, 0,
	1425, 0, 0, 0, 1126, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 1126, 2375, 0, 1420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2388, 0,
	575, 0, 2417, 2418, 2419, 0, 0, 0, 0, 2416,
	2414, 2415, 2407, 2408, 2409, 2410, 2412, 2413, 0, 2417,
	2418, 2419, 575, 0, 0, 0, 2416, 2414, 2415, 2407,
	2408, 2409, 2410, 2412, 2413, 0, 0, 2148, 1425, 2516,
	0, 0, 3079, 0, 0, 0, 2048, 2048, 2048, 0,
	205, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	0, 1528, 0, 0, 0, 0, 0, 0, 0, 2457,
	0, 0, 0, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2578, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 1126, 0, 0, 0,
	0, 0, 1162, 0, 0, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 0, 0, 0, 0, 984, 0,
	0, 0, 0, 205, 802, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 802, 0, 0, 0,
	0, 0, 2708, 0, 0, 0, 0, 0, 502, 0,
	0, 0, 0, 0, 0, 0, 3079, 0, 0, 0,
	0, 2538, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 0, 2148, 2516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 1047, 206, 206, 1047,
	205, 1047, 206, 0, 0, 1126, 2516, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 1162, 0,
	1162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3218, 0, 0, 0, 2606, 0, 1162, 205, 0, 0,
	0, 1047, 1047, 206, 206, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 1126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2708, 0,
	206, 206, 206, 206, 0, 1047, 1047, 0, 0, 0,
	1047, 0, 0, 1047, 206, 0, 0, 1396, 1397, 0,
	0, 0, 0, 0, 0, 0, 2659, 0, 0, 0,
	1874, 0, 2148, 0, 0, 0, 2663, 2664, 0, 0,
	2667, 0, 0, 1399, 2670, 0, 0, 0, 0, 0,
	0, 3079, 0, 2674, 0, 0, 0, 0, 1047, 0,
	0, 0, 2681, 0, 0, 2457, 0, 0, 0, 1398,
	0, 0, 0, 0, 1162, 0, 0, 1418, 206, 0,
	0, 0, 0, 0, 0, 0, 2701, 0, 0, 0,
	0, 0, 206, 0, 0, 1126, 0, 1126, 0, 0,
	0, 0, 0, 2715, 2716, 0, 2717, 2718, 2719, 0,
	0, 2720, 0, 0, 0, 2722, 0, 0, 0, 0,
	0, 0, 210, 2666, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1422, 1423, 1424, 0, 0, 0, 2750, 2751, 0, 1404,
	0, 0, 1126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1126, 2767, 0, 0, 0, 0, 1426,
	1427, 1428, 0, 568, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 204, 0, 204,
	204, 0, 1126, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 2802, 2805, 1126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2824,
	0, 0, 0, 0, 0, 204, 204, 0, 0, 0,
	0, 0, 0, 0, 1126, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 1126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1425, 204, 204, 204, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 814, 0, 1420,
	0, 1528, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 2872, 0, 0, 0, 0, 0, 1047, 206,
	206, 0, 0, 0, 0, 0, 1047, 206, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2899, 2900, 0,
	204, 1047, 0, 2904, 2905, 0, 0, 0, 2908, 2909,
	0, 0, 0, 0, 204, 2913, 0, 0, 0, 0,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 2918, 0, 0, 0, 0, 0,
	0, 2922, 1432, 0, 0, 0, 0, 0, 0, 1399,
	0, 0, 1445, 0, 0, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1398, 0, 0, 0, 0,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 0, 0, 0, 0, 0, 814, 0,
	0, 0, 0, 0, 1047, 206, 0, 0, 0, 0,
	0, 1047, 0, 0, 0, 0, 0, 0, 2805, 0,
	0, 0, 0, 0, 0, 1421, 1422, 1423, 1424, 0,
	0, 0, 0, 0, 0, 1404, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 206, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	872, 0, 0, 0, 0, 0, 206, 0, 206, 0,
	206, 0, 0, 0, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 2805, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 3049, 3050, 3051, 1419, 0, 0, 0,
	0, 0, 0, 1551, 0, 984, 0, 0, 204, 0,
	0, 0, 0, 1444, 0, 0, 1047, 0, 1047, 3059,
	3060, 204, 1551, 1047, 0, 0, 0, 1433, 206, 575,
	0, 0, 0, 3067, 575, 0, 0, 1047, 1047, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 206, 206, 0, 206, 0, 206, 0, 206, 0,
	206, 1043, 0, 0, 1144, 0, 1043, 1425, 0, 0,
	2805, 0, 0, 0, 0, 0, 0, 0, 3101, 0,
	0, 206, 0, 0, 0, 1420, 0, 0, 0, 0,
	802, 0, 0, 0, 0, 0, 0, 3113, 0, 0,
	0, 0, 0, 0, 0, 0, 2805, 0, 0, 2805,
	1437, 0, 0, 0, 0, 0, 1144, 1144, 1396, 1397,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	2805, 2805, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1144, 1144, 0, 0, 0, 1144, 0, 0, 1144, 0,
	1398, 0, 0, 0, 0, 0, 3162, 0, 1418, 3165,
	0, 0, 0, 0, 0, 0, 0, 575, 0, 0,
	0, 0, 1435, 0, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 1047, 0, 1144, 0, 2929, 0, 0, 0, 2928,
	0, 0, 0, 0, 2665, 0, 0, 0, 0, 0,
	0, 0, 204, 204, 0, 0, 0, 0, 0, 204,
	1421, 1422, 1423, 1424, 0, 0, 0, 0, 837, 88,
	1404, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	204, 0, 204, 0, 0, 0, 0, 0, 1396, 1397,
	0, 802, 0, 0, 1047, 0, 0, 0, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 206, 0, 0,
	1047, 0, 0, 0, 1399, 0, 0, 0, 0, 3260,
	3260, 3260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3279, 0,
	1398, 0, 0, 0, 0, 0, 88, 0, 1418, 0,
	204, 1419, 0, 0, 2805, 0, 2805, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 3260,
	0, 0, 0, 575, 204, 0, 204, 0, 204, 0,
	204, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2332, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 777, 0,
	1421, 1422, 1423, 1424, 0, 0, 0, 797, 0, 1047,
	1404, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 3260, 0,
	1420, 0, 206, 0, 0, 0, 0, 972, 88, 0,
	1426, 1427, 1428, 0, 0, 206, 0, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 1047, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 1419, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
	0, 1144, 568, 0, 0, 0, 0, 568, 0, 1044,
	0, 0, 1145, 0, 1044, 0, 206, 0, 0, 206,
	0, 206, 0, 206, 0, 206, 206, 0, 0, 1047,
	1047, 1047, 0, 1047, 0, 0, 1043, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 206, 1396, 1397, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1145, 1145, 0, 984, 0, 0,
	1420, 0, 0, 1399, 0, 0, 0, 206, 206, 206,
	0, 206, 0, 0, 984, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 1398,
	0, 0, 0, 0, 206, 0, 0, 1418, 1145, 1145,
	0, 0, 0, 1145, 0, 0, 1145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2325, 0, 0, 0, 0, 0, 1144,
	0, 1145, 0, 0, 0, 0, 1043, 0, 0, 1421,
	1422, 1423, 1424, 0, 0, 0, 0, 0, 0, 1404,
	0, 0, 0, 0, 0, 0, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1426,
	1427, 1428, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 575, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 204, 0, 0, 1047,
	0, 1144, 0, 1144, 0, 0, 0, 0, 1144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1144, 1144, 0, 0, 0, 0, 204, 0,
	1047, 204, 0, 204, 0, 204, 568, 204, 204, 1047,
	0, 1425, 88, 0, 88, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	204, 204, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 206, 0, 0, 0,
	0, 1043, 0, 206, 0, 0, 204, 0, 0, 0,
	0, 797, 88, 0, 0, 206, 1047, 0, 0, 88,
	0, 0, 0, 0, 1047, 0, 88, 0, 0, 0,
	0, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	0, 1044, 0, 0, 0, 0, 0, 0, 0, 1145,
	0, 0, 1047, 206, 0, 1047, 1047, 1047, 0, 0,
	0, 0, 206, 0, 0, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 1043, 0, 0, 0,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 1047, 1047, 0, 0, 0,
	0, 0, 1432, 206, 0, 0, 0, 0, 0, 1399,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 206, 1047, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1398, 0, 0, 777, 1043,
	206, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 1043, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 0, 0, 0, 1474, 0,
	984, 0, 0, 1047, 0, 0, 0, 0, 984, 984,
	0, 0, 984, 0, 1047, 0, 0, 1145, 0, 0,
	0, 0, 0, 0, 1044, 1421, 1422, 1423, 1424, 0,
	0, 0, 0, 0, 0, 1404, 1551, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 1446, 0, 1037, 1426, 1427, 1428, 0, 0,
	0, 1155, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 1043, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 204, 1434,
	0, 0, 0, 0, 0, 1551, 1419, 0, 0, 0,
	0, 0, 0, 1144, 0, 1047, 0, 204, 0, 88,
	0, 0, 1549, 1444, 1552, 0, 1043, 1237, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 1145,
	0, 1145, 0, 0, 0, 0, 1145, 0, 0, 1261,
	1261, 1261, 1155, 0, 0, 204, 0, 0, 0, 0,
	1145, 1145, 0, 1292, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 0,
	0, 0, 0, 0, 1144, 1144, 1144, 0, 1144, 0,
	206, 206, 0, 206, 0, 204, 0, 0, 0, 0,
	1437, 0, 0, 0, 1047, 206, 0, 1352, 0, 1047,
	0, 0, 0, 0, 204, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 1047, 1047, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 0, 0, 0, 0, 2393, 0, 0, 0, 2394,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 651, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 633, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 1047, 0, 1047, 0, 0, 0,
	0, 0, 0, 1044, 634, 0, 0, 0, 0, 0,
	0, 0, 0, 635, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 797, 636, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 656, 0, 0, 206, 206, 1047,
	0, 1047, 0, 1047, 1043, 0, 0, 0, 0, 637,
	0, 0, 0, 0, 0, 1558, 0, 0, 0, 0,
	0, 0, 1047, 0, 0, 1047, 638, 0, 1566, 0,
	0, 0, 0, 0, 0, 1043, 0, 0, 0, 0,
	0, 0, 0, 0, 1043, 0, 639, 0, 0, 640,
	0, 0, 204, 204, 0, 204, 0, 0, 0, 0,
	0, 1047, 1044, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 655, 0, 777, 0, 0,
	777, 777, 0, 0, 0, 0, 0, 1047, 0, 984,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 204,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 1144, 0, 1047, 0, 1941, 0, 0, 0, 1043,
	0, 0, 206, 0, 0, 0, 0, 1043, 0, 797,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 642, 0, 0, 1468, 1144, 0, 0,
	1144, 1144, 1144, 0, 0, 0, 0, 0, 659, 643,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 1047,
	0, 0, 1145, 1145, 1145, 0, 1145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 658, 0, 0, 0,
	0, 0, 0, 644, 0, 206, 645, 0, 0, 0,
	1144, 1144, 653, 0, 0, 0, 972, 0, 0, 646,
	0, 984, 0, 0, 0, 0, 0, 0, 0, 1746,
	0, 0, 0, 1552, 0, 1043, 1757, 0, 1043, 0,
	0, 1551, 0, 0, 0, 0, 0, 0, 647, 654,
	0, 0, 0, 88, 0, 1237, 0, 1776, 648, 1776,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 650,
	0, 0, 0, 0, 649, 0, 0, 0, 0, 0,
	204, 0, 206, 1047, 0, 657, 0, 0, 0, 204,
	204, 0, 1047, 1047, 0, 0, 652, 0, 1043, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1043,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1816, 0, 206,
	1604, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 1827, 0, 0, 0, 0,
	0, 1833, 0, 1834, 0, 1835, 0, 1836, 0, 1837,
	0, 0, 0, 0, 0, 88, 0, 1616, 1598, 1605,
	1588, 1626, 1625, 0, 0, 1590, 1589, 0, 0, 0,
	1847, 0, 0, 1636, 1637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	1043, 0, 0, 1627, 0, 1623, 1622, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 1621, 0, 0,
	0, 0, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1620, 1618, 1619, 0,
	0, 0, 0, 1044, 0, 0, 204, 0, 0, 0,
	0, 0, 1044, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1600, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 1609,
	1603, 1611, 1613, 1614, 1615, 1610, 0, 1608, 0, 0,
	0, 0, 0, 0, 0, 0, 1632, 1633, 0, 1043,
	0, 0, 0, 0, 1144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1592, 0,
	0, 0, 0, 0, 0, 0, 1144, 1144, 1144, 1145,
	1624, 0, 0, 0, 1601, 0, 1602, 1044, 0, 0,
	0, 0, 0, 0, 204, 1044, 2095, 0, 0, 0,
	0, 0, 0, 0, 0, 1043, 0, 0, 0, 0,
	0, 1941, 0, 0, 0, 1145, 0, 0, 1145, 1145,
	1145, 0, 1617, 0, 0, 0, 1585, 1583, 1584, 1587,
	1586, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 1593, 1594, 1596, 1597, 0, 0, 0, 1145, 1145,
	0, 0, 0, 0, 0, 0, 1612, 1595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1635, 0, 0,
	0, 0, 0, 1044, 0, 0, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 1591, 0, 1628, 1629, 1630,
	1631, 0, 0, 0, 0, 0, 0, 0, 0, 1043,
	0, 1043, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1599, 0, 0, 0, 0,
	1606, 1634, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 1044, 972, 972, 1155,
	0, 972, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 1144, 0, 1043, 0, 1144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2221,
	0, 0, 0, 1757, 0, 0, 0, 1043, 0, 0,
	1144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2258, 0, 0, 1261, 0,
	1261, 0, 1261, 0, 1155, 1155, 1043, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 88, 0, 2294, 0, 0, 0, 0,
	0, 0, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 88, 0, 88, 0, 0, 2307, 1155, 2309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1043, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1043, 0,
	0, 0, 0, 2323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 797, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 88,
	0, 0, 0, 0, 1144, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 1399, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 1145, 0, 0, 0, 0, 0, 0, 0,
	1398, 0, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 0, 1145, 1145, 1145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1144, 0,
	1421, 1422, 1423, 1424, 0, 0, 0, 1144, 1144, 0,
	1404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 1043, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 88, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 1434, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 1044, 0, 1044,
	0, 0, 0, 0, 2513, 0, 0, 0, 1444, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2550, 2221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1145, 0, 1044, 0, 1145, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1044, 0, 0, 1145, 0,
	1420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2588, 0, 0, 0, 0, 0, 0, 0,
	0, 2595, 0, 0, 0, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2655, 0, 1155, 0, 0, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 1435, 0, 2661,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0,
	1973, 0, 1396, 1397, 1974, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 1399, 0,
	0, 1445, 1145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1398, 0, 0, 0, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 1422, 1423, 1424, 0, 0,
	0, 0, 0, 0, 1404, 0, 1145, 0, 0, 0,
	0, 0, 0, 0, 0, 1145, 1145, 0, 0, 0,
	88, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 1399, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 2844,
	0, 0, 2847, 0, 0, 0, 1433, 1398, 0, 0,
	0, 0, 0, 0, 2853, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 1399, 0,
	0, 1445, 0, 0, 1420, 0, 2890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1422, 1423,
	1424, 0, 0, 0, 1398, 0, 0, 1404, 0, 1437,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	0, 1941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 0, 0, 1421, 1422, 1423, 1424, 0, 0,
	0, 1434, 0, 0, 1404, 0, 0, 0, 1419, 0,
	0, 1435, 0, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 2927, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2993, 1434, 1425,
	0, 0, 0, 0, 0, 1419, 2221, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 1420, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 1435, 0, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 0, 0, 0, 0, 0,
	0, 3086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3122, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	0, 0, 0, 0, 3145, 0, 0, 0, 2679, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1041, 0, 0, 0, 0, 3224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3237,
	214, 215, 216, 217, 218, 1048, 219, 1049, 1050, 1051,
	1052, 454, 1053, 1054, 1055, 1056, 220, 221, 222, 455,
	456, 223, 457, 224, 225, 458, 1057, 226, 227, 228,
	229, 230, 231, 1058, 1059, 232, 459, 460, 461, 1060,
	233, 462, 1061, 1046, 1062, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 1063, 243, 0, 244, 245,
	246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069,
	1070, 1071, 249, 250, 251, 252, 253, 254, 463, 464,
	1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076, 259,
	260, 261, 1077, 262, 1078, 263, 264, 1079, 465, 265,
	266, 268, 271, 267, 272, 273, 274, 466, 467, 1080,
	211, 1081, 0, 0, 0, 0, 275, 276, 277, 468,
	278, 279, 0, 280, 1082, 281, 1083, 1084, 924, 282,
	283, 1085, 284, 469, 1086, 470, 285, 1087, 286, 287,
	288, 289, 290, 291, 292, 471, 472, 473, 926, 1088,
	477, 294, 0, 0, 0, 212, 293, 295, 302, 1089,
	925, 296, 474, 298, 297, 299, 300, 301, 475, 1090,
	476, 1091, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 1092, 314, 313,
	1093, 315, 478, 930, 316, 317, 931, 1094, 318, 319,
	1095, 1096, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 1097, 213,
	933, 1098, 479, 480, 334, 335, 1099, 336, 337, 338,
	1100, 1101, 340, 341, 1102, 1103, 342, 481, 934, 343,
	935, 482, 344, 339, 345, 346, 347, 348, 349, 350,
	1104, 351, 483, 352, 484, 353, 1105, 354, 0, 355,
	356, 357, 358, 359, 360, 485, 361, 362, 1106, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 1107, 376, 936, 377, 378, 379, 380,
	486, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 1108, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 1109, 403, 383, 384, 404, 937, 405, 487,
	406, 407, 1110, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 488, 1111, 419, 420, 418, 1112,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 1113,
	489, 490, 491, 428, 1114, 1115, 429, 430, 492, 431,
	493, 1116, 432, 433, 434, 0, 435, 436, 1117, 1118,
	437, 438, 439, 440, 442, 1119, 443, 1120, 441, 444,
	445, 446, 494, 495, 496, 1121, 448, 447, 497, 1122,
	1123, 1124, 1125, 449, 450, 498, 451, 452, 453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1041, 0, 0, 0, 0, 0, 0, 2082,
	0, 0, 0, 0, 0, 0, 0, 0, 2083, 214,
	215, 216, 217, 218, 1048, 219, 1049, 1050, 1051, 1052,
	454, 1053, 1054, 1055, 1056, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 1057, 226, 227, 228, 229,
	230, 231, 1058, 1059, 232, 459, 460, 461, 1060, 233,
	462, 1061, 1046, 1062, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 1063, 243, 0, 244, 245, 246,
	1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069, 1070,
	1071, 249, 250, 251, 252, 253, 254, 463, 464, 1072,
	255, 1073, 257, 256, 1074, 258, 1075, 1076, 259, 260,
	261, 1077, 262, 1078, 263, 264, 1079, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 1080, 211,
	1081, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 1082, 281, 1083, 1084, 924, 282, 283,
	1085, 284, 469, 1086, 470, 285, 1087, 286, 287, 288,
	289, 290, 291, 292, 471, 472, 473, 926, 1088, 477,
	294, 0, 0, 0, 212, 293, 295, 302, 1089, 925,
	296, 474, 298, 297, 299, 300, 301, 475, 1090, 476,
	1091, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 1092, 314, 313, 1093,
	315, 478, 930, 316, 317, 931, 1094, 318, 319, 1095,
	1096, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 1097, 213, 933,
	1098, 479, 480, 334, 335, 1099, 336, 337, 338, 1100,
	1101, 340, 341, 1102, 1103, 342, 481, 934, 343, 935,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 1104,
	351, 483, 352, 484, 353, 1105, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 1106, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 1107, 376, 936, 377, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	1108, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 1109, 403, 383, 384, 404, 937, 405, 487, 406,
	407, 1110, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 1111, 419, 420, 418, 1112, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 1113, 489,
	490, 491, 428, 1114, 1115, 429, 430, 492, 431, 493,
	1116, 432, 433, 434, 0, 435, 436, 1117, 1118, 437,
	438, 439, 440, 442, 1119, 443, 1120, 441, 444, 445,
	446, 494, 495, 496, 1121, 448, 447, 497, 1122, 1123,
	1124, 1125, 449, 450, 498, 451, 452, 453, 0, 0,
	0, 0, 1041, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2951, 214,
	215, 216, 217, 218, 1048, 219, 1049, 1050, 1051, 1052,
	454, 1053, 1054, 1055, 1056, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 1057, 226, 227, 228, 229,
	230, 231, 1058, 1059, 232, 459, 460, 461, 1060, 233,
	462, 1061, 1046, 1062, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 1063, 243, 0, 244, 245, 246,
	1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069, 1070,
	1071, 249, 250, 251, 252, 253, 254, 463, 464, 1072,
	255, 1073, 257, 256, 1074, 258, 1075, 1076, 259, 260,
	261, 1077, 262, 1078, 263, 264, 1079, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 1080, 211,
	1081, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 1082, 281, 1083, 1084, 924, 282, 283,
	1085, 284, 469, 1086, 470, 285, 1087, 286, 287, 288,
	289, 290, 291, 292, 471, 472, 473, 926, 1088, 477,
	294, 0, 0, 0, 212, 293, 295, 302, 1089, 925,
	296, 474, 298, 297, 299, 300, 301, 475, 1090, 476,
	1091, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 1092, 314, 313, 1093,
	315, 478, 930, 316, 317, 931, 1094, 318, 319, 1095,
	1096, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 1097, 213, 933,
	1098, 479, 480, 334, 335, 1099, 336, 337, 338, 1100,
	1101, 340, 341, 1102, 1103, 342, 481, 934, 343, 935,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 1104,
	351, 483, 352, 484, 353, 1105, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 1106, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 1107, 376, 936, 377, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	1108, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 1109, 403, 383, 384, 404, 937, 405, 487, 406,
	407, 1110, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 1111, 419, 420, 418, 1112, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 1113, 489,
	490, 491, 428, 1114, 1115, 429, 430, 492, 431, 493,
	1116, 432, 433, 434, 0, 435, 436, 1117, 1118, 437,
	438, 439, 440, 442, 1119, 443, 1120, 441, 444, 445,
	446, 494, 495, 496, 1121, 448, 447, 497, 1122, 1123,
	1124, 1125, 449, 450, 498, 451, 452, 453, 1041, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3055, 0, 214, 215, 216, 217, 218,
	1048, 219, 1049, 1050, 1051, 1052, 454, 1053, 1054, 1055,
	1056, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 1057, 226, 227, 228, 229, 230, 231, 1058, 1059,
	232, 459, 460, 461, 1060, 233, 462, 1061, 1046, 1062,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1063, 243, 0, 244, 245, 246, 1064, 923, 247, 248,
	1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251,
	252, 253, 254, 463, 464, 1072, 255, 1073, 257, 256,
	1074, 258, 1075, 1076, 259, 260, 261, 1077, 262, 1078,
	263, 264, 1079, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 1080, 211, 1081, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 1082,
	281, 1083, 1084, 924, 282, 283, 1085, 284, 469, 1086,
	470, 285, 1087, 286, 287, 288, 289, 290, 291, 292,
	471, 472, 473, 926, 1088, 477, 294, 0, 0, 0,
	212, 293, 295, 302, 1089, 925, 296, 474, 298, 297,
	299, 300, 301, 475, 1090, 476, 1091, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 1092, 314, 313, 1093, 315, 478, 930, 316,
	317, 931, 1094, 318, 319, 1095, 1096, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 1097, 213, 933, 1098, 479, 480, 334,
	335, 1099, 336, 337, 338, 1100, 1101, 340, 341, 1102,
	1103, 342, 481, 934, 343, 935, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 1104, 351, 483, 352, 484,
	353, 1105, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 1106, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 1107, 376,
	936, 377, 378, 379, 380, 486, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 1108, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 1109, 403, 383,
	384, 404, 937, 405, 487, 406, 407, 1110, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	1111, 419, 420, 418, 1112, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 1113, 489, 490, 491, 428, 1114,
	1115, 429, 430, 492, 431, 493, 1116, 432, 433, 434,
	0, 435, 436, 1117, 1118, 437, 438, 439, 440, 442,
	1119, 443, 1120, 441, 444, 445, 446, 494, 495, 496,
	1121, 448, 447, 497, 1122, 1123, 1124, 1125, 449, 450,
	498, 451, 452, 453, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2704,
	0, 214, 215, 216, 217, 218, 1048, 219, 1049, 1050,
	1051, 1052, 454, 1053, 1054, 1055, 1056, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 1057, 226, 227,
	228, 229, 230, 231, 1058, 1059, 232, 459, 460, 461,
	1060, 233, 462, 1061, 1046, 1062, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 1063, 243, 0, 244,
	245, 246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067,
	1069, 1070, 1071, 249, 250, 251, 252, 253, 254, 463,
	464, 1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076,
	259, 260, 261, 1077, 262, 1078, 263, 264, 1079, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	1080, 211, 1081, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 1082, 281, 1083, 1084, 924,
	282, 283, 1085, 284, 469, 1086, 470, 285, 1087, 286,
	287, 288, 289, 290, 291, 292, 471, 472, 473, 926,
	1088, 477, 294, 0, 0, 0, 212, 293, 295, 302,
	1089, 925, 296, 474, 298, 297, 299, 300, 301, 475,
	1090, 476, 1091, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 1092, 314,
	313, 1093, 315, 478, 930, 316, 317, 931, 1094, 318,
	319, 1095, 1096, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 1097,
	213, 933, 1098, 479, 480, 334, 335, 1099, 336, 337,
	338, 1100, 1101, 340, 341, 1102, 1103, 342, 481, 934,
	343, 935, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 1104, 351, 483, 352, 484, 353, 1105, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 1106,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 1107, 376, 936, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 1108, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 1109, 403, 383, 384, 404, 937, 405,
	487, 406, 407, 1110, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 1111, 419, 420, 418,
	1112, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	1113, 489, 490, 491, 428, 1114, 1115, 429, 430, 492,
	431, 493, 1116, 432, 433, 434, 0, 435, 436, 1117,
	1118, 437, 438, 439, 440, 442, 1119, 443, 1120, 441,
	444, 445, 446, 494, 495, 496, 1121, 448, 447, 497,
	1122, 1123, 1124, 1125, 449, 450, 498, 451, 452, 453,
	1041, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2696, 0, 214, 215, 216,
	217, 218, 1048, 219, 1049, 1050, 1051, 1052, 454, 1053,
	1054, 1055, 1056, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 1057, 226, 227, 228, 229, 230, 231,
	1058, 1059, 232, 459, 460, 461, 1060, 233, 462, 1061,
	1046, 1062, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 1063, 243, 0, 244, 245, 246, 1064, 923,
	247, 248, 1065, 1066, 1068, 1067, 1069, 1070, 1071, 249,
	250, 251, 252, 253, 254, 463, 464, 1072, 255, 1073,
	257, 256, 1074, 258, 1075, 1076, 259, 260, 261, 1077,
	262, 1078, 263, 264, 1079, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 1080, 211, 1081, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 1082, 281, 1083, 1084, 924, 282, 283, 1085, 284,
	469, 1086, 470, 285, 1087, 286, 287, 288, 289, 290,
	291, 292, 471, 472, 473, 926, 1088, 477, 294, 0,
	0, 0, 212, 293, 295, 302, 1089, 925, 296, 474,
	298, 297, 299, 300, 301, 475, 1090, 476, 1091, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 1092, 314, 313, 1093, 315, 478,
	930, 316, 317, 931, 1094, 318, 319, 1095, 1096, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 1097, 213, 933, 1098, 479,
	480, 334, 335, 1099, 336, 337, 338, 1100, 1101, 340,
	341, 1102, 1103, 342, 481, 934, 343, 935, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 1104, 351, 483,
	352, 484, 353, 1105, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 1106, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	1107, 376, 936, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 1108, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 1109,
	403, 383, 384, 404, 937, 405, 487, 406, 407, 1110,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 1111, 419, 420, 418, 1112, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 1113, 489, 490, 491,
	428, 1114, 1115, 429, 430, 492, 431, 493, 1116, 432,
	433, 434, 0, 435, 436, 1117, 1118, 437, 438, 439,
	440, 442, 1119, 443, 1120, 441, 444, 445, 446, 494,
	495, 496, 1121, 448, 447, 497, 1122, 1123, 1124, 1125,
	449, 450, 498, 451, 452, 453, 1041, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2572, 0, 214, 215, 216, 217, 218, 1048, 219,
	1049, 1050, 1051, 1052, 454, 1053, 1054, 1055, 1056, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 1057,
	226, 227, 228, 229, 230, 231, 1058, 1059, 232, 459,
	460, 461, 1060, 233, 462, 1061, 1046, 1062, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1063, 243,
	0, 244, 245, 246, 1064, 923, 247, 248, 1065, 1066,
	1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252, 253,
	254, 463, 464, 1072, 255, 1073, 257, 256, 1074, 258,
	1075, 1076, 259, 260, 261, 1077, 262, 1078, 263, 264,
	1079, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 1080, 211, 1081, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 1082, 281, 1083,
	1084, 924, 282, 283, 1085, 284, 469, 1086, 470, 285,
	1087, 286, 287, 288, 289, 290, 291, 292, 471, 472,
	473, 926, 1088, 477, 294, 0, 0, 0, 212, 293,
	295, 302, 1089, 925, 296, 474, 298, 297, 299, 300,
	301, 475, 1090, 476, 1091, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	1092, 314, 313, 1093, 315, 478, 930, 316, 317, 931,
	1094, 318, 319, 1095, 1096, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 1097, 213, 933, 1098, 479, 480, 334, 335, 1099,
	336, 337, 338, 1100, 1101, 340, 341, 1102, 1103, 342,
	481, 934, 343, 935, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 1104, 351, 483, 352, 484, 353, 1105,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 1106, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 1107, 376, 936, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 1108, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 1109, 403, 383, 384, 404,
	937, 405, 487, 406, 407, 1110, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 1111, 419,
	420, 418, 1112, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 1113, 489, 490, 491, 428, 1114, 1115, 429,
	430, 492, 431, 493, 1116, 432, 433, 434, 0, 435,
	436, 1117, 1118, 437, 438, 439, 440, 442, 1119, 443,
	1120, 441, 444, 445, 446, 494, 495, 496, 1121, 448,
	447, 497, 1122, 1123, 1124, 1125, 449, 450, 498, 451,
	452, 453, 1041, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1986, 0, 214,
	215, 216, 217, 218, 1048, 219, 1049, 1050, 1051, 1052,
	454, 1053, 1054, 1055, 1056, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 1057, 226, 227, 228, 229,
	230, 231, 1058, 1059, 232, 459, 460, 461, 1060, 233,
	462, 1061, 1046, 1062, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 1063, 243, 0, 244, 245, 246,
	1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069, 1070,
	1071, 249, 250, 251, 252, 253, 254, 463, 464, 1072,
	255, 1073, 257, 256, 1074, 258, 1075, 1076, 259, 260,
	261, 1077, 262, 1078, 263, 264, 1079, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 1080, 211,
	1081, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 1082, 281, 1083, 1084, 924, 282, 283,
	1085, 284, 469, 1086, 470, 285, 1087, 286, 287, 288,
	289, 290, 291, 292, 471, 472, 473, 926, 1088, 477,
	294, 0, 0, 0, 212, 293, 295, 302, 1089, 925,
	296, 474, 298, 297, 299, 300, 301, 475, 1090, 476,
	1091, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 1092, 314, 313, 1093,
	315, 478, 930, 316, 317, 931, 1094, 318, 319, 1095,
	1096, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 1097, 213, 933,
	1098, 479, 480, 334, 335, 1099, 336, 337, 338, 1100,
	1101, 340, 341, 1102, 1103, 342, 481, 934, 343, 935,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 1104,
	351, 483, 352, 484, 353, 1105, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 1106, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 1107, 376, 936, 377, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	1108, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 1109, 403, 383, 384, 404, 937, 405, 487, 406,
	407, 1110, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 1111, 419, 420, 418, 1112, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 1113, 489,
	490, 491, 428, 1114, 1115, 429, 430, 492, 431, 493,
	1116, 432, 433, 434, 0, 435, 436, 1117, 1118, 437,
	438, 439, 440, 442, 1119, 443, 1120, 441, 444, 445,
	446, 494, 495, 496, 1121, 448, 447, 497, 1122, 1123,
	1124, 1125, 449, 450, 498, 451, 452, 453, 1149, 0,
	1041, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1729, 0, 0, 0, 214, 215, 216,
	217, 218, 1048, 219, 1049, 1050, 1051, 1052, 454, 1053,
	1054, 1055, 1056, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 1057, 226, 227, 228, 229, 230, 231,
	1058, 1059, 232, 459, 460, 461, 1060, 233, 462, 1061,
	1046, 1062, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 1063, 243, 0, 244, 245, 246, 1064, 923,
	247, 248, 1065, 1066, 1068, 1067, 1069, 1070, 1071, 249,
	250, 251, 252, 253, 254, 463, 464, 1072, 255, 1073,
	257, 256, 1074, 258, 1075, 1076, 259, 260, 261, 1077,
	262, 1078, 263, 264, 1079, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 1080, 211, 1081, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 1082, 281, 1083, 1084, 924, 282, 283, 1085, 284,
	469, 1086, 470, 285, 1087, 286, 287, 288, 289, 290,
	291, 292, 471, 472, 473, 926, 1088, 477, 294, 0,
	0, 0, 212, 293, 295, 302, 1089, 925, 296, 474,
	298, 297, 299, 300, 301, 475, 1090, 476, 1091, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 1092, 314, 313, 1093, 315, 478,
	930, 316, 317, 931, 1094, 318, 319, 1095, 1096, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 1097, 213, 933, 1098, 479,
	480, 334, 335, 1099, 336, 337, 338, 1100, 1101, 340,
	341, 1102, 1103, 342, 481, 934, 343, 935, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 1104, 351, 483,
	352, 484, 353, 1105, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 1106, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	1107, 376, 936, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 1108, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 1109,
	403, 383, 384, 404, 937, 405, 487, 406, 407, 1110,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 1111, 419, 420, 418, 1112, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 1113, 489, 490, 491,
	428, 1114, 1115, 429, 430, 492, 431, 493, 1116, 432,
	433, 434, 0, 435, 436, 1117, 1118, 437, 438, 439,
	440, 442, 1119, 443, 1120, 441, 444, 445, 446, 494,
	495, 496, 1121, 448, 447, 497, 1122, 1123, 1124, 1125,
	449, 450, 498, 451, 452, 453, 1038, 0, 1041, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	1048, 219, 1049, 1050, 1051, 1052, 454, 1053, 1054, 1055,
	1056, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 1057, 226, 227, 228, 229, 230, 231, 1058, 1059,
	232, 459, 460, 461, 1060, 233, 462, 1061, 1046, 1062,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1063, 243, 0, 244, 245, 246, 1064, 923, 247, 248,
	1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251,
	252, 253, 254, 463, 464, 1072, 255, 1073, 257, 256,
	1074, 258, 1075, 1076, 259, 260, 261, 1077, 262, 1078,
	263, 264, 1079, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 1080, 211, 1081, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 1082,
	281, 1083, 1084, 924, 282, 283, 1085, 284, 469, 1086,
	470, 285, 1087, 286, 287, 288, 289, 290, 291, 292,
	471, 472, 473, 926, 1088, 477, 294, 0, 0, 0,
	212, 293, 295, 302, 1089, 925, 296, 474, 298, 297,
	299, 300, 301, 475, 1090, 476, 1091, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 1092, 314, 313, 1093, 315, 478, 930, 316,
	317, 931, 1094, 318, 319, 1095, 1096, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 1097, 213, 933, 1098, 479, 480, 334,
	335, 1099, 336, 337, 338, 1100, 1101, 340, 341, 1102,
	1103, 342, 481, 934, 343, 935, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 1104, 351, 483, 352, 484,
	353, 1105, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 1106, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 1107, 376,
	936, 377, 378, 379, 380, 486, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 1108, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 1109, 403, 383,
	384, 404, 937, 405, 487, 406, 407, 1110, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	1111, 419, 420, 418, 1112, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 1113, 489, 490, 491, 428, 1114,
	1115, 429, 430, 492, 431, 493, 1116, 432, 433, 434,
	0, 435, 436, 1117, 1118, 437, 438, 439, 440, 442,
	1119, 443, 1120, 441, 444, 445, 446, 494, 495, 496,
	1121, 448, 447, 497, 1122, 1123, 1124, 1125, 449, 450,
	498, 451, 452, 453, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 1048, 219, 1049, 1050,
	1051, 1052, 454, 1053, 1054, 1055, 1056, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 1057, 226, 227,
	228, 229, 230, 231, 1058, 1059, 232, 459, 460, 461,
	1060, 233, 462, 1061, 1046, 1062, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 1063, 243, 0, 244,
	245, 246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067,
	1069, 1070, 1071, 249, 250, 251, 252, 253, 254, 463,
	464, 1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076,
	259, 260, 261, 1077, 262, 1078, 263, 264, 1079, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	1080, 211, 1081, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 1082, 281, 1083, 1084, 924,
	282, 283, 1085, 284, 469, 1086, 470, 285, 1087, 286,
	287, 288, 289, 290, 291, 292, 471, 472, 473, 926,
	1088, 477, 294, 0, 0, 0, 212, 293, 295, 302,
	1089, 925, 296, 474, 298, 297, 299, 300, 301, 475,
	1090, 476, 1091, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 1092, 314,
	313, 1093, 315, 478, 930, 316, 317, 931, 1094, 318,
	319, 1095, 1096, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 1097,
	213, 933, 1098, 479, 480, 334, 335, 1099, 336, 337,
	338, 1100, 1101, 340, 341, 1102, 1103, 342, 481, 934,
	343, 935, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 1104, 351, 483, 352, 484, 353, 1105, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 1106,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 1107, 376, 936, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 1108, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 1109, 403, 383, 384, 404, 937, 405,
	487, 406, 407, 1110, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 1111, 419, 420, 418,
	1112, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	1113, 489, 490, 491, 428, 1114, 1115, 429, 430, 492,
	431, 493, 1116, 432, 433, 434, 0, 435, 436, 1117,
	1118, 437, 438, 439, 440, 442, 1119, 443, 1120, 441,
	444, 445, 446, 494, 495, 496, 1121, 448, 447, 497,
	1122, 1123, 1124, 1125, 449, 450, 498, 451, 452, 453,
	1962, 0, 865, 822, 823, 824, 820, 821, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 1959, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 455, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 461, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 1960, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 481, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 429, 430, 945, 431, 946,
	829, 432, 433, 434, 0, 435, 436, 0, 812, 437,
	438, 439, 440, 442, 912, 443, 0, 860, 444, 445,
	446, 494, 892, 939, 1958, 448, 447, 497, 0, 0,
	0, 0, 449, 450, 498, 451, 452, 453, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 1961, 0, 0, 0, 0, 0, 0,
	835, 1957, 0, 0, 0, 798, 833, 865, 822, 823,
	824, 820, 821, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 455, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 461, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 481, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 484, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 176, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 178, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	429, 430, 945, 431, 946, 829, 432, 433, 434, 0,
	435, 436, 0, 812, 437, 438, 439, 440, 442, 912,
	443, 0, 860, 444, 445, 446, 1286, 892, 939, 0,
	448, 447, 497, 0, 0, 0, 170, 449, 450, 498,
	451, 452, 453, 809, 171, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 865, 822,
	823, 824, 820, 821, 834, 1473, 1471, 0, 0, 0,
	0, 833, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 839, 0, 0,
	0, 220, 221, 222, 455, 880, 859, 891, 849, 890,
	889, 0, 226, 851, 850, 229, 230, 231, 841, 913,
	232, 949, 950, 461, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 894, 254, 887, 886, 811, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 885, 261, 0, 262, 0,
	263, 264, 0, 817, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 830, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 884, 882, 883, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	840, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 861, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 873, 864, 875,
	877, 878, 879, 874, 0, 866, 0, 303, 927, 928,
	304, 305, 306, 929, 899, 900, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 853, 327, 932, 330,
	331, 333, 332, 808, 213, 933, 831, 918, 888, 334,
	335, 0, 862, 337, 863, 0, 0, 340, 341, 0,
	0, 342, 481, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	881, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 818, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 176, 399, 400, 854,
	855, 857, 858, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 876, 856, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 922, 412, 413, 414, 944,
	0, 419, 420, 418, 178, 421, 422, 423, 424, 425,
	269, 426, 270, 852, 0, 895, 896, 897, 898, 0,
	0, 429, 430, 945, 431, 946, 829, 432, 433, 434,
	0, 435, 436, 0, 812, 437, 438, 439, 440, 442,
	912, 443, 0, 860, 444, 445, 446, 1286, 892, 939,
	0, 448, 447, 497, 0, 0, 0, 170, 449, 450,
	498, 451, 452, 453, 809, 171, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 805, 806, 865,
	822, 823, 824, 820, 821, 834, 1473, 2345, 0, 0,
	0, 0, 833, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 455, 880, 859, 891, 849,
	890, 889, 0, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 461, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 254, 887, 886, 811, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 853, 327, 932,
	330, 331, 333, 332, 808, 213, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 0, 0, 340, 341,
	0, 0, 342, 481, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	484, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 176, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 178, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 0, 429, 430, 945, 431, 946, 829, 432, 433,
	434, 0, 435, 436, 0, 812, 437, 438, 439, 440,
	442, 912, 443, 0, 860, 444, 445, 446, 1286, 892,
	939, 0, 448, 447, 497, 0, 0, 0, 170, 449,
	450, 498, 451, 452, 453, 809, 171, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 805, 806,
	865, 822, 823, 824, 820, 821, 834, 1473, 1471, 0,
	0, 0, 0, 833, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 455, 880, 859, 891,
	849, 890, 889, 2044, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 461, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 2049, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 2045, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 481, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 2046, 429, 430, 945, 431, 946, 829, 432,
	433, 434, 0, 435, 436, 0, 812, 437, 438, 439,
	440, 442, 912, 443, 0, 860, 444, 445, 446, 494,
	892, 939, 0, 448, 447, 497, 0, 0, 0, 0,
	449, 450, 498, 451, 452, 453, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 801, 833, 865, 822, 823, 824, 820,
	821, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 455, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	461, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 813, 0, 340, 341, 0, 0, 342, 481,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 484, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 429, 430,
	945, 431, 946, 829, 432, 433, 434, 0, 435, 436,
	0, 812, 437, 438, 439, 440, 442, 912, 443, 0,
	860, 444, 445, 446, 494, 892, 939, 0, 448, 447,
	497, 0, 0, 0, 0, 449, 450, 498, 451, 452,
	453, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 865, 822, 823, 824,
	820, 821, 834, 835, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 455, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 461, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 813, 0, 340, 341, 0, 0, 342,
	481, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 429,
	430, 945, 431, 946, 829, 432, 433, 434, 0, 435,
	436, 0, 812, 437, 438, 439, 440, 442, 912, 443,
	0, 860, 444, 445, 446, 494, 892, 939, 0, 448,
	447, 497, 0, 0, 0, 0, 449, 450, 498, 451,
	452, 453, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 865, 822, 823,
	824, 820, 821, 834, 835, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 455, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 461, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 2864, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 481, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 484, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	429, 430, 945, 431, 946, 829, 432, 433, 434, 0,
	435, 436, 0, 812, 437, 438, 439, 440, 442, 912,
	443, 0, 860, 444, 445, 446, 494, 892, 939, 0,
	448, 447, 497, 0, 0, 0, 0, 449, 450, 498,
	451, 452, 453, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 1529, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	0, 833, 865, 822, 823, 824, 820, 821, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 455, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 461, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 481, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 429, 430, 945, 431, 946,
	829, 432, 433, 434, 0, 435, 436, 0, 812, 437,
	438, 439, 440, 442, 912, 443, 0, 860, 444, 445,
	446, 494, 892, 939, 2683, 448, 447, 497, 0, 0,
	0, 0, 449, 450, 498, 451, 452, 453, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 865, 822, 823, 824, 820, 821, 834,
	835, 0, 0, 0, 0, 0, 833, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 839, 0, 0, 0, 220, 221, 222, 455,
	880, 859, 891, 849, 890, 889, 0, 226, 851, 850,
	229, 230, 231, 841, 913, 232, 949, 950, 461, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 894, 254, 887, 886,
	811, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	885, 261, 0, 262, 0, 263, 264, 0, 817, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 830,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 884,
	882, 883, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 840, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 861, 0, 0, 0, 1876, 293, 295, 302, 0,
	925, 296, 873, 864, 875, 877, 878, 879, 874, 0,
	866, 0, 303, 927, 928, 304, 305, 306, 929, 899,
	900, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 853, 327, 932, 330, 331, 333, 332, 808, 213,
	933, 831, 918, 888, 334, 335, 0, 862, 337, 863,
	0, 0, 340, 341, 0, 0, 342, 481, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 484, 353, 1875, 354, 0, 355,
	356, 357, 358, 359, 360, 881, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	818, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 854, 855, 857, 858, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 876,
	856, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	922, 412, 413, 414, 944, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 852, 0,
	895, 896, 897, 898, 0, 0, 429, 430, 945, 431,
	946, 829, 432, 433, 434, 0, 435, 436, 0, 812,
	437, 438, 439, 440, 442, 912, 443, 0, 860, 444,
	445, 446, 494, 892, 939, 0, 448, 447, 497, 0,
	0, 0, 0, 449, 450, 498, 451, 452, 453, 809,
	0, 0, 0, 0, 0, 0, 0, 807, 0, 0,
	0, 0, 805, 806, 865, 822, 823, 824, 820, 821,
	834, 835, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	455, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 461,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 481, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 429, 430, 945,
	431, 946, 829, 432, 433, 434, 0, 435, 436, 0,
	812, 437, 438, 439, 440, 442, 912, 443, 0, 860,
	444, 445, 446, 494, 892, 939, 0, 448, 447, 497,
	0, 0, 0, 0, 449, 450, 498, 451, 452, 453,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 1529, 0, 0, 0, 0,
	0, 0, 835, 0, 0, 0, 0, 0, 833, 865,
	822, 823, 824, 820, 821, 834, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 455, 880, 859, 891, 849,
	890, 889, 0, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 461, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 254, 887, 886, 811, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 2049, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 853, 327, 932,
	330, 331, 333, 332, 808, 213, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 0, 0, 340, 341,
	0, 0, 342, 481, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	484, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 0, 429, 430, 945, 431, 946, 829, 432, 433,
	434, 0, 435, 436, 0, 812, 437, 438, 439, 440,
	442, 912, 443, 0, 860, 444, 445, 446, 494, 892,
	939, 0, 448, 447, 497, 0, 0, 0, 0, 449,
	450, 498, 451, 452, 453, 809, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 805, 806,
	865, 822, 823, 824, 820, 821, 834, 835, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 455, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 461, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 481, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 429, 430, 945, 431, 946, 829, 432,
	433, 434, 0, 435, 436, 0, 812, 437, 438, 439,
	440, 442, 912, 443, 0, 860, 444, 445, 446, 494,
	892, 939, 0, 448, 447, 497, 0, 0, 0, 0,
	449, 450, 498, 451, 452, 453, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 0, 0, 0, 0, 0, 0, 0, 835, 1471,
	0, 0, 0, 2054, 833, 865, 822, 823, 824, 820,
	821, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 455, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	461, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 481,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 484, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 429, 430,
	945, 431, 946, 829, 432, 433, 434, 0, 435, 436,
	0, 812, 437, 438, 439, 440, 442, 912, 443, 0,
	860, 444, 445, 446, 494, 892, 939, 0, 448, 447,
	497, 0, 0, 0, 0, 449, 450, 498, 451, 452,
	453, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 2052, 833,
	865, 822, 823, 824, 820, 821, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 455, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 461, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 481, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 429, 430, 945, 431, 946, 829, 432,
	433, 434, 0, 435, 436, 0, 812, 437, 438, 439,
	440, 442, 912, 443, 0, 860, 444, 445, 446, 494,
	892, 939, 0, 448, 447, 497, 0, 0, 0, 0,
	449, 450, 498, 451, 452, 453, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 2040, 833, 865, 822, 823, 824, 820,
	821, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 455, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	461, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 481,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 484, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 429, 430,
	945, 431, 946, 829, 432, 433, 434, 0, 435, 436,
	0, 812, 437, 438, 439, 440, 442, 912, 443, 0,
	860, 444, 445, 446, 494, 892, 939, 0, 448, 447,
	497, 0, 0, 0, 0, 449, 450, 498, 451, 452,
	453, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 2029, 833,
	865, 822, 823, 824, 820, 821, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 455, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 461, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 481, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 429, 430, 945, 431, 946, 829, 432,
	433, 434, 0, 435, 436, 0, 812, 437, 438, 439,
	440, 442, 912, 443, 0, 860, 444, 445, 446, 494,
	892, 939, 0, 448, 447, 497, 0, 0, 0, 0,
	449, 450, 498, 451, 452, 453, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 2027, 833, 2019, 822, 823, 824, 820,
	821, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 455, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	461, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 2022,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 2023, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	2024, 2021, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 481,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 484, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 2025, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 429, 430,
	945, 431, 946, 829, 432, 433, 434, 0, 435, 436,
	0, 812, 437, 438, 439, 440, 442, 912, 443, 0,
	860, 444, 445, 446, 494, 892, 939, 0, 448, 447,
	497, 0, 0, 0, 0, 449, 450, 498, 451, 2020,
	453, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 2016, 833,
	2019, 822, 823, 824, 820, 821, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 455, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 461, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 2022, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 2023, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 2024, 2021, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 481, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 2025, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 429, 430, 945, 431, 946, 829, 432,
	433, 434, 0, 435, 436, 0, 812, 437, 438, 439,
	440, 442, 912, 443, 0, 860, 444, 445, 446, 494,
	892, 939, 0, 448, 447, 497, 0, 0, 0, 0,
	449, 450, 498, 451, 2020, 453, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 865, 822, 823, 824, 820, 821, 834, 835, 0,
	0, 0, 0, 0, 833, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 455, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 461, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 481, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 484, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 429, 430, 945, 431, 946, 829,
	432, 433, 434, 0, 435, 436, 0, 812, 437, 438,
	439, 440, 442, 912, 443, 0, 860, 444, 445, 446,
	494, 892, 939, 0, 448, 447, 497, 0, 0, 0,
	0, 449, 450, 498, 451, 452, 453, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 0, 0, 0, 0, 0, 1479, 0, 835,
	0, 0, 0, 0, 0, 833, 865, 822, 823, 824,
	820, 821, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 1863, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 455, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 461, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	481, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 429,
	430, 945, 431, 946, 829, 432, 433, 434, 0, 435,
	436, 0, 812, 437, 438, 439, 440, 442, 912, 443,
	0, 860, 444, 445, 446, 494, 892, 939, 0, 448,
	447, 497, 0, 0, 0, 0, 449, 450, 498, 451,
	452, 453, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 1176,
	833, 865, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 455, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 461, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 1175, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 481, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 484, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 429, 430, 945, 431, 946, 829,
	432, 433, 434, 0, 435, 436, 0, 812, 437, 438,
	439, 440, 442, 912, 443, 0, 860, 444, 445, 446,
	494, 892, 939, 0, 448, 447, 497, 0, 0, 0,
	0, 449, 450, 498, 451, 452, 453, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 1170, 833, 865, 822, 823, 824,
	820, 821, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 455, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 461, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1169, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	481, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 429,
	430, 945, 431, 946, 829, 432, 433, 434, 0, 435,
	436, 0, 812, 437, 438, 439, 440, 442, 912, 443,
	0, 860, 444, 445, 446, 494, 892, 939, 0, 448,
	447, 497, 0, 0, 0, 0, 449, 450, 498, 451,
	452, 453, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 1165,
	833, 865, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 455, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 461, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 481, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 484, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 429, 430, 945, 431, 946, 829,
	432, 433, 434, 0, 435, 436, 0, 812, 437, 438,
	439, 440, 442, 912, 443, 0, 860, 444, 445, 446,
	494, 892, 939, 0, 448, 447, 497, 0, 0, 0,
	0, 449, 450, 498, 451, 452, 453, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 865, 822, 823, 824, 820, 821, 834, 835,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 455, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 461, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 481, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 429, 430, 945, 431, 946,
	829, 432, 433, 434, 0, 435, 436, 0, 812, 437,
	438, 439, 440, 442, 912, 443, 0, 860, 444, 445,
	446, 494, 892, 939, 0, 448, 447, 497, 0, 0,
	0, 0, 449, 450, 498, 451, 452, 453, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 865, 822, 823, 824, 820, 821, 834,
	835, 0, 0, 0, 0, 0, 833, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 839, 0, 0, 0, 220, 221, 222, 455,
	880, 859, 891, 849, 890, 889, 0, 226, 851, 850,
	229, 230, 231, 841, 913, 232, 949, 950, 461, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 3259, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 894, 254, 887, 886,
	811, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	885, 261, 0, 262, 0, 263, 264, 0, 817, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 830,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 884,
	882, 883, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 840, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 861, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 873, 864, 875, 877, 878, 879, 874, 0,
	866, 0, 303, 927, 928, 304, 305, 306, 929, 899,
	900, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 853, 327, 932, 330, 331, 333, 332, 808, 213,
	933, 831, 918, 888, 334, 335, 0, 862, 337, 863,
	0, 0, 340, 341, 0, 0, 342, 481, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 484, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 881, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	818, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 854, 855, 857, 858, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 876,
	856, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	922, 412, 413, 414, 944, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 852, 0,
	895, 896, 897, 898, 0, 0, 429, 430, 945, 431,
	946, 829, 432, 433, 434, 0, 3258, 436, 0, 812,
	437, 438, 439, 440, 442, 912, 443, 0, 860, 444,
	445, 446, 494, 892, 939, 0, 448, 447, 497, 0,
	0, 0, 0, 449, 450, 498, 451, 452, 453, 809,
	0, 0, 0, 0, 0, 0, 0, 807, 0, 0,
	0, 0, 805, 806, 865, 822, 823, 824, 820, 821,
	834, 835, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	3257, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 461,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 3259, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 481, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 429, 430, 945,
	431, 946, 829, 432, 433, 434, 0, 3258, 436, 0,
	812, 437, 438, 439, 440, 442, 912, 443, 0, 860,
	444, 445, 446, 494, 892, 939, 0, 448, 447, 497,
	0, 0, 0, 0, 449, 450, 498, 451, 452, 453,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 865, 822, 823, 824, 820,
	821, 834, 835, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 455, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	461, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	0, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 481,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 484, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 429, 430,
	945, 431, 946, 829, 432, 433, 434, 0, 435, 436,
	0, 0, 437, 438, 439, 440, 442, 912, 443, 0,
	860, 444, 445, 446, 494, 892, 939, 0, 448, 447,
	497, 0, 0, 0, 0, 449, 450, 498, 451, 452,
	453, 0, 0, 0, 0, 0, 0, 0, 0, 2037,
	0, 0, 0, 0, 2035, 2036, 865, 822, 823, 824,
	820, 821, 834, 835, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 0, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 461, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 3259, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 0, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 0, 0, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 0, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	481, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	0, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 429,
	430, 945, 431, 946, 829, 432, 433, 434, 0, 3258,
	436, 0, 812, 437, 438, 439, 440, 442, 912, 443,
	0, 860, 444, 445, 446, 494, 892, 939, 0, 448,
	447, 497, 0, 0, 0, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 0, 798, 0, 986, 0,
	0, 0, 0, 0, 0, 805, 806, 0, 0, 0,
	0, 0, 0, 0, 835, 214, 215, 216, 217, 218,
	833, 219, 0, 0, 0, 0, 914, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 913,
	232, 459, 460, 461, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	470, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 973, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 213, 933, 0, 918, 480, 334,
	335, 0, 336, 337, 338, 0, 978, 340, 341, 0,
	0, 342, 481, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 486, 980, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 176, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 944,
	0, 419, 420, 418, 178, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 489, 490, 491, 428, 0,
	0, 429, 430, 945, 431, 946, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	912, 443, 0, 441, 444, 445, 446, 1286, 495, 496,
	0, 448, 447, 497, 986, 0, 0, 170, 449, 450,
	498, 451, 452, 453, 0, 171, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 0, 970, 0, 1554, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 913, 232, 459, 460, 461,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 253, 254, 463,
	464, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 973, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 0,
	213, 933, 0, 918, 480, 334, 335, 0, 336, 337,
	338, 0, 978, 340, 341, 0, 0, 342, 481, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 486, 980, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 176, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 944, 0, 419, 420, 418,
	178, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 489, 490, 491, 428, 0, 0, 429, 430, 945,
	431, 946, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 912, 443, 0, 441,
	444, 445, 446, 1286, 495, 496, 0, 448, 447, 497,
	0, 0, 0, 170, 449, 450, 498, 451, 452, 453,
	0, 171, 0, 0, 2450, 0, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 1554, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 913, 232, 459,
	460, 461, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	973, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 213, 933, 0, 918, 480, 334, 335, 0,
	336, 337, 338, 0, 978, 340, 341, 0, 0, 342,
	481, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 486, 980, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 945, 431, 946, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 912, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 0, 448,
	447, 497, 0, 969, 0, 986, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 970, 914, 975, 0, 0, 0, 220, 221,
	222, 455, 456, 223, 457, 224, 225, 458, 0, 226,
	227, 228, 229, 230, 231, 0, 913, 232, 459, 460,
	461, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 253, 254,
	463, 464, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	465, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 468, 278, 279, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 470, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 474, 298, 297, 299, 300, 301,
	475, 0, 476, 0, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 973,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	0, 213, 933, 0, 918, 480, 334, 335, 0, 336,
	337, 338, 0, 978, 340, 341, 0, 0, 342, 481,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 484, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 485, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 486, 980, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 487, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 489, 490, 491, 428, 0, 0, 429, 430,
	945, 431, 946, 0, 432, 433, 434, 0, 435, 436,
	0, 0, 437, 438, 439, 440, 442, 912, 443, 0,
	441, 444, 445, 446, 494, 495, 496, 0, 448, 447,
	497, 986, 0, 0, 0, 449, 450, 498, 451, 452,
	453, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	0, 970, 0, 975, 220, 221, 222, 455, 456, 223,
	457, 224, 225, 458, 0, 226, 227, 228, 229, 230,
	231, 0, 913, 232, 459, 460, 461, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 253, 254, 463, 464, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 465, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 468, 278, 279,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 470, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	474, 298, 297, 299, 300, 301, 475, 0, 476, 0,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 973, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 0, 213, 933, 0,
	918, 480, 334, 335, 0, 336, 337, 338, 0, 978,
	340, 341, 0, 0, 342, 481, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 484, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 485, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 486, 980,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 487, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 489, 490,
	491, 428, 0, 0, 429, 430, 945, 431, 946, 0,
	432, 433, 434, 0, 435, 436, 0, 0, 437, 438,
	439, 440, 442, 912, 443, 0, 441, 444, 445, 446,
	494, 495, 496, 0, 448, 447, 497, 986, 0, 0,
	0, 449, 450, 498, 451, 452, 453, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 0, 970, 0, 975,
	220, 221, 222, 455, 456, 223, 457, 224, 225, 458,
	0, 226, 227, 228, 229, 230, 231, 0, 913, 232,
	459, 460, 461, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	253, 254, 463, 464, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 465, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 468, 278, 279, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 470,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 474, 298, 297, 299,
	300, 301, 475, 0, 476, 0, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 0, 213, 933, 0, 918, 480, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 481, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 484, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 485,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 486, 980, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 487, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 489, 490, 491, 428, 0, 0,
	429, 430, 945, 431, 946, 0, 432, 433, 434, 0,
	435, 436, 0, 0, 437, 438, 439, 440, 442, 912,
	443, 0, 441, 444, 445, 446, 494, 495, 496, 0,
	448, 447, 497, 798, 0, 1142, 0, 449, 450, 498,
	451, 452, 453, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 454, 0, 1460, 0, 0, 220, 221,
	222, 455, 456, 223, 457, 224, 225, 458, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 459, 460,
	461, 0, 233, 462, 0, 1046, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	463, 464, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	465, 265, 266, 268, 271, 267, 272, 273, 274, 466,
	467, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 468, 278, 279, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 469, 0, 470, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 471, 472, 473,
	926, 0, 477, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 925, 296, 474, 298, 297, 299, 300, 301,
	475, 0, 476, 0, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 478, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	0, 0, 933, 0, 479, 480, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 481,
	934, 343, 935, 482, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 483, 352, 484, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 485, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 486, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 176, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 937,
	405, 487, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 488, 0, 419, 420,
	418, 178, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 489, 490, 491, 428, 0, 0, 429, 430,
	492, 431, 493, 0, 432, 433, 434, 0, 435, 436,
	0, 0, 437, 438, 439, 440, 442, 0, 443, 0,
	441, 444, 445, 446, 1286, 495, 496, 0, 448, 447,
	497, 1283, 0, 1142, 170, 449, 450, 498, 451, 452,
	453, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 454, 0, 148, 0, 0, 220, 221, 222, 455,
	456, 223, 457, 224, 225, 458, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 459, 460, 461, 0,
	233, 462, 0, 1046, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 463, 464,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 465, 265,
	266, 268, 271, 267, 272, 273, 274, 466, 467, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 468,
	278, 279, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 469, 0, 470, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 471, 472, 473, 926, 0,
	477, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	925, 296, 474, 298, 297, 299, 300, 301, 475, 0,
	476, 0, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 478, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 0, 0,
	933, 0, 479, 480, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 481, 934, 343,
	935, 482, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 483, 352, 484, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 485, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	486, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 176, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 937, 405, 487,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 488, 0, 419, 420, 418, 178,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	489, 490, 491, 428, 0, 0, 429, 430, 492, 431,
	493, 0, 432, 433, 434, 0, 435, 436, 0, 0,
	437, 438, 439, 440, 442, 0, 443, 0, 441, 444,
	445, 446, 1286, 495, 496, 0, 448, 447, 497, 0,
	0, 0, 170, 449, 450, 498, 451, 452, 453, 0,
	171, 0, 0, 0, 0, 1142, 1141, 0, 0, 0,
	0, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 454, 0, 0, 0, 0, 220, 221,
	222, 455, 456, 223, 457, 224, 225, 458, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 459, 460,
	461, 0, 233, 462, 0, 1046, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	463, 464, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	465, 265, 266, 268, 271, 267, 272, 273, 274, 466,
	467, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 468, 278, 279, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 469, 0, 470, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 471, 472, 473,
	926, 0, 477, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 925, 296, 474, 298, 297, 299, 300, 301,
	475, 0, 476, 0, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 478, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	0, 0, 933, 0, 479, 480, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 481,
	934, 343, 935, 482, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 483, 352, 484, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 485, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 486, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 937,
	405, 487, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 488, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 489, 490, 491, 428, 0, 0, 429, 430,
	492, 431, 493, 0, 432, 433, 434, 0, 435, 436,
	0, 0, 437, 438, 439, 440, 442, 0, 443, 0,
	441, 444, 445, 446, 494, 495, 496, 0, 448, 447,
	497, 0, 0, 0, 0, 449, 450, 498, 451, 452,
	453, 1142, 1141, 0, 0, 0, 0, 1139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 2635, 219, 0, 0, 0, 0, 454,
	0, 0, 0, 0, 220, 221, 222, 455, 456, 223,
	457, 224, 225, 458, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 459, 460, 461, 0, 233, 462,
	0, 1046, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 463, 464, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 465, 265, 266, 268,
	271, 267, 272, 273, 274, 466, 467, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 468, 278, 279,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 469, 0, 470, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 471, 472, 473, 926, 0, 477, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 925, 296,
	474, 298, 297, 299, 300, 301, 475, 0, 476, 0,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	478, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 0, 0, 933, 0,
	479, 480, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 481, 934, 343, 935, 482,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	483, 352, 484, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 485, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 486, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 937, 405, 487, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 488, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 489, 490,
	491, 428, 0, 0, 429, 430, 492, 431, 493, 0,
	432, 433, 434, 0, 435, 436, 0, 0, 437, 438,
	439, 440, 442, 0, 443, 0, 441, 444, 445, 446,
	494, 495, 496, 0, 448, 447, 497, 986, 0, 0,
	0, 449, 450, 498, 451, 452, 453, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 0, 0, 0, 1290,
	220, 221, 222, 455, 456, 223, 457, 224, 225, 458,
	0, 226, 227, 228, 229, 230, 231, 0, 913, 232,
	459, 460, 461, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	253, 254, 463, 464, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 465, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 468, 278, 279, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 470,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 474, 298, 297, 299,
	300, 301, 475, 0, 476, 0, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 0, 213, 933, 0, 918, 480, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 481, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 484, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 485,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 486, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 487, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 489, 490, 491, 428, 0, 0,
	429, 430, 945, 431, 946, 0, 432, 433, 434, 0,
	435, 436, 0, 0, 437, 438, 439, 440, 442, 912,
	443, 0, 441, 444, 445, 446, 494, 495, 496, 0,
	448, 447, 497, 798, 0, 208, 0, 449, 450, 498,
	451, 452, 453, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 454, 0, 0, 0, 0, 220, 221,
	222, 455, 456, 223, 457, 224, 225, 458, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 459, 460,
	461, 0, 233, 462, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	463, 464, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	465, 265, 266, 268, 271, 267, 272, 273, 274, 466,
	467, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 468, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 469, 0, 470, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 471, 472, 473,
	0, 0, 477, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 474, 298, 297, 299, 300, 301,
	475, 0, 476, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 478, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 479, 480, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 481,
	0, 343, 0, 482, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 483, 352, 484, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 485, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 486, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 176, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 487, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 488, 0, 419, 420,
	418, 178, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 489, 490, 491, 428, 0, 0, 429, 430,
	492, 431, 493, 0, 432, 433, 434, 0, 435, 436,
	0, 0, 437, 438, 439, 440, 442, 0, 443, 0,
	441, 444, 445, 446, 1286, 495, 496, 0, 448, 447,
	497, 208, 0, 0, 170, 449, 450, 498, 451, 452,
	453, 0, 171, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 454,
	0, 0, 0, 148, 220, 221, 222, 455, 456, 223,
	457, 224, 225, 458, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 459, 460, 461, 0, 233, 462,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 463, 464, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 465, 265, 266, 268,
	271, 267, 272, 273, 274, 466, 467, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 468, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 469, 0, 470, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 471, 472, 473, 0, 0, 477, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 0, 296,
	474, 298, 297, 299, 300, 301, 475, 0, 476, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	478, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 213, 0, 0,
	479, 480, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 481, 0, 343, 0, 482,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	483, 352, 484, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 485, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 486, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 487, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 488, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 489, 490,
	491, 428, 0, 0, 429, 430, 492, 431, 493, 0,
	432, 433, 434, 0, 435, 436, 0, 0, 437, 438,
	439, 440, 442, 0, 443, 0, 441, 444, 445, 446,
	494, 495, 496, 0, 448, 447, 497, 208, 0, 0,
	0, 449, 450, 498, 451, 452, 453, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 454, 0, 0, 0, 1559,
	220, 221, 222, 455, 456, 223, 457, 224, 225, 458,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	459, 460, 461, 0, 233, 462, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 463, 464, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 465, 265, 266, 268, 271, 267, 272, 273,
	274, 466, 467, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 468, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 469, 0, 470,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 471,
	472, 473, 0, 0, 477, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 474, 298, 297, 299,
	300, 301, 475, 0, 476, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 478, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 479, 480, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 481, 0, 343, 0, 482, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 483, 352, 484, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 485,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 486, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 487, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 488, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 489, 490, 491, 428, 0, 0,
	429, 430, 492, 431, 493, 0, 432, 433, 434, 0,
	435, 436, 0, 0, 437, 438, 439, 440, 442, 0,
	443, 0, 441, 444, 445, 446, 494, 495, 496, 0,
	448, 447, 497, 208, 0, 0, 0, 449, 450, 498,
	451, 452, 453, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 454, 0, 0, 0, 2254, 220, 221, 222, 455,
	456, 223, 457, 224, 225, 458, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 459, 460, 461, 0,
	233, 462, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 463, 464,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 465, 265,
	266, 268, 271, 267, 272, 273, 274, 466, 467, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 468,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 469, 0, 470, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 471, 472, 473, 0, 0,
	477, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 474, 298, 297, 299, 300, 301, 475, 0,
	476, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 478, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 0,
	0, 0, 479, 480, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 481, 0, 343,
	0, 482, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 483, 352, 484, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 485, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	486, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 487,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 488, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	489, 490, 491, 428, 0, 0, 429, 430, 492, 431,
	493, 0, 432, 433, 434, 0, 435, 436, 0, 0,
	437, 438, 439, 440, 442, 0, 443, 0, 441, 444,
	445, 446, 494, 495, 496, 0, 448, 447, 497, 675,
	0, 567, 0, 449, 450, 498, 451, 452, 453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 454,
	0, 2707, 0, 0, 220, 221, 222, 455, 456, 223,
	457, 224, 225, 458, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 459, 460, 461, 0, 233, 462,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 573, 252, 253, 254, 463, 464, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 465, 265, 266, 268,
	271, 267, 272, 273, 274, 466, 467, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 468, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 469, 0, 470, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 471, 472, 473, 0, 0, 477, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 0, 296,
	474, 298, 297, 299, 300, 301, 475, 0, 476, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	478, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 213, 0, 0,
	479, 480, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 481, 0, 343, 0, 482,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	483, 352, 484, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 485, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 486, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 487, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 488, 0, 419, 420, 418, 572, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 489, 490,
	491, 428, 0, 0, 429, 430, 492, 431, 493, 0,
	432, 433, 434, 0, 435, 436, 0, 0, 437, 438,
	439, 440, 442, 0, 443, 0, 441, 444, 445, 446,
	494, 495, 496, 0, 448, 447, 497, 0, 566, 0,
	567, 449, 450, 498, 451, 452, 453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 576, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 573, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 471, 472, 473, 0, 0, 477, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 0, 343, 0, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 572, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 567, 448, 447, 497, 0, 0, 0, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	454, 576, 0, 0, 0, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 459, 460, 461, 0, 233,
	462, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 573, 252, 253, 254, 463, 464, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 469, 0, 470, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 471, 472, 473, 0, 0, 477,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 474, 298, 297, 299, 300, 301, 475, 0, 476,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 478, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 479, 480, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 481, 0, 343, 0,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 483, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 1831, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 487, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 0, 419, 420, 418, 572, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 489,
	490, 491, 428, 0, 0, 429, 430, 492, 431, 493,
	0, 432, 433, 434, 0, 435, 436, 0, 0, 437,
	438, 439, 440, 442, 0, 443, 0, 441, 444, 445,
	446, 494, 495, 496, 567, 448, 447, 497, 0, 0,
	0, 0, 449, 450, 498, 451, 452, 453, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 454, 576, 0, 0, 0, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 459, 460, 461,
	0, 233, 462, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 573, 252, 253, 254, 463,
	464, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 469, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 471, 472, 473, 0,
	0, 477, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 478, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 479, 480, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 481, 0,
	343, 0, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 483, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 0, 419, 420, 418,
	572, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 489, 490, 491, 428, 0, 0, 429, 430, 492,
	431, 493, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 0, 443, 0, 441,
	444, 445, 446, 494, 495, 496, 208, 448, 447, 497,
	0, 0, 0, 0, 449, 450, 498, 451, 452, 453,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 576, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 471, 472,
	473, 0, 0, 477, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 0, 343, 0, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 0, 448,
	447, 497, 0, 0, 0, 0, 449, 450, 498, 451,
	452, 453, 1311, 0, 1142, 1141, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 576, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 459, 460, 461,
	0, 233, 462, 0, 1046, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 463,
	464, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	0, 211, 0, 0, 0, 0, 0, 1310, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 469, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 471, 472, 473, 926,
	0, 477, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 925, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 478, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 0,
	0, 933, 0, 479, 480, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 481, 934,
	343, 935, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 483, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 1309, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 937, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 489, 490, 491, 428, 0, 0, 429, 430, 492,
	431, 493, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 0, 443, 0, 441,
	444, 445, 446, 494, 495, 496, 0, 448, 447, 497,
	0, 0, 0, 0, 449, 450, 498, 451, 452, 453,
	1281, 0, 1142, 1141, 0, 0, 0, 0, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 459, 460, 461, 0, 233,
	462, 0, 1046, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 463, 464, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 469, 0, 470, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1280, 472, 473, 926, 0, 477,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 925,
	296, 474, 298, 297, 299, 300, 301, 475, 0, 476,
	0, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 478, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 0, 0, 933,
	0, 479, 480, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 481, 934, 343, 935,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 483, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 937, 405, 487, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 489,
	490, 491, 428, 0, 0, 429, 430, 492, 431, 493,
	0, 432, 433, 434, 0, 435, 436, 0, 0, 437,
	438, 439, 440, 442, 0, 443, 0, 441, 444, 445,
	446, 494, 495, 496, 0, 448, 447, 497, 0, 0,
	0, 0, 449, 450, 498, 451, 452, 453, 1277, 0,
	1142, 1141, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	1046, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1276, 472, 473, 926, 0, 477, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 925, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 0, 933, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 934, 343, 935, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 937, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 0, 448, 447, 497, 0, 0, 0, 0,
	449, 450, 498, 451, 452, 453, 1215, 0, 1142, 1141,
	0, 0, 0, 0, 1139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 459, 460, 461, 0, 233, 462, 0, 1046, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 469, 0,
	470, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1214, 472, 473, 926, 0, 477, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 925, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 478, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 0, 933, 0, 479, 480, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 481, 934, 343, 935, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 483, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 486, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 937, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 489, 490, 491, 428, 0,
	0, 429, 430, 492, 431, 493, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	0, 443, 0, 441, 444, 445, 446, 494, 495, 496,
	0, 448, 447, 497, 0, 0, 0, 0, 449, 450,
	498, 451, 452, 453, 1212, 0, 1142, 1141, 0, 0,
	0, 0, 1139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 1046, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1211, 472,
	473, 926, 0, 477, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 925, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 0, 933, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 934, 343, 935, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	937, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 0, 448,
	447, 497, 0, 0, 0, 0, 449, 450, 498, 451,
	452, 453, 1135, 0, 1142, 1141, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 459, 460, 461,
	0, 233, 462, 0, 1046, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 463,
	464, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 469, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1137, 472, 473, 926,
	0, 477, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 925, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 478, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 0,
	0, 933, 0, 479, 480, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 481, 934,
	343, 935, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 483, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 937, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 489, 490, 491, 428, 0, 0, 429, 430, 492,
	431, 493, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 0, 443, 0, 441,
	444, 445, 446, 494, 495, 496, 0, 448, 447, 497,
	0, 0, 0, 0, 449, 450, 498, 451, 452, 453,
	1142, 1141, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	1046, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 471, 472, 473, 926, 0, 477, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 925, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 0, 933, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 934, 343, 935, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 937, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 0, 448, 447, 497, 1142, 1141, 0, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 1046, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 471, 472,
	473, 926, 0, 477, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 925, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 0, 933, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 934, 343, 935, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	937, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 1142, 448,
	447, 497, 0, 0, 0, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 459, 460, 461, 0, 233, 462, 0, 1046, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 469, 0,
	470, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	471, 472, 473, 926, 0, 477, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 925, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 478, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 0, 933, 0, 479, 480, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 481, 934, 343, 935, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 483, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 486, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 937, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 489, 490, 491, 428, 0,
	0, 429, 430, 492, 431, 493, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	0, 443, 0, 441, 444, 445, 446, 494, 495, 496,
	208, 448, 447, 497, 0, 0, 0, 0, 449, 450,
	498, 451, 452, 453, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 2149, 233, 462, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 2146, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 2289, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 2152, 0, 0, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 471, 472, 473, 0, 0, 477, 294, 0,
	0, 0, 2286, 293, 295, 302, 0, 0, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 2288,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	0, 316, 317, 2285, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 0, 343, 0, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 2151, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 2287, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 208, 448, 447, 497, 0, 0, 0, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 459, 460, 461, 2149, 233,
	462, 0, 0, 2143, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 2146, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 463, 464, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 0, 281, 2152, 0, 0, 282, 283,
	0, 284, 469, 0, 470, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 2142, 472, 473, 0, 0, 477,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 474, 298, 297, 299, 300, 301, 475, 0, 476,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 478, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 479, 480, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 481, 0, 343, 0,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 483, 352, 484, 353, 2151, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 487, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 489,
	490, 491, 428, 0, 0, 429, 430, 492, 431, 493,
	0, 432, 433, 434, 0, 435, 436, 0, 2150, 437,
	438, 439, 440, 442, 0, 443, 0, 441, 444, 445,
	446, 494, 495, 496, 0, 448, 447, 497, 1354, 0,
	208, 0, 449, 450, 498, 451, 452, 453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 471, 472, 473, 0, 0, 477, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 0, 343, 0, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 1357,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 1355, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 0, 1356, 447, 497, 1130, 0, 208, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 459, 460, 461, 0, 233, 462, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 469, 0,
	470, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1132, 472, 473, 0, 0, 477, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 478, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 479, 480, 334,
	335, 0, 336, 337, 338, 0, 978, 340, 341, 0,
	0, 342, 481, 0, 343, 0, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 483, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 486, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 489, 490, 491, 428, 0,
	0, 429, 430, 492, 431, 493, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	0, 443, 0, 441, 444, 445, 446, 494, 495, 496,
	0, 448, 447, 497, 1127, 0, 208, 0, 449, 450,
	498, 451, 452, 453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1129, 472,
	473, 0, 0, 477, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 978, 340, 341, 0, 0, 342,
	481, 0, 343, 0, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 0, 448,
	447, 497, 1034, 0, 208, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 459, 460, 461,
	0, 233, 462, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 463,
	464, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 469, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1036, 472, 473, 0,
	0, 477, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 478, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 479, 480, 334, 335, 0, 336, 337,
	338, 0, 978, 340, 341, 0, 0, 342, 481, 0,
	343, 0, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 483, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 489, 490, 491, 428, 0, 0, 429, 430, 492,
	431, 493, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 0, 443, 0, 441,
	444, 445, 446, 494, 495, 496, 0, 448, 447, 497,
	529, 0, 208, 0, 449, 450, 498, 451, 452, 453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 528, 218, 518, 219, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 459, 460, 461, 0, 233,
	462, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	521, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 463, 464, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	522, 284, 469, 0, 470, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 471, 472, 473, 0, 0, 477,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 474, 298, 297, 299, 300, 301, 475, 0, 476,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 478, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 479, 480, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 481, 0, 343, 0,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 483, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	523, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 487, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 489,
	490, 491, 428, 0, 0, 429, 430, 492, 431, 493,
	0, 432, 433, 434, 0, 435, 436, 0, 0, 437,
	438, 439, 440, 442, 0, 443, 0, 441, 444, 445,
	446, 494, 495, 496, 0, 448, 447, 497, 517, 0,
	208, 0, 449, 450, 498, 451, 452, 453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 518, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 521, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 522, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 471, 472, 473, 0, 0, 477, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 0, 343, 0, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 523, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 208, 448, 447, 497, 0, 0, 0, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 459, 460, 461, 0, 233,
	462, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 463, 464, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 469, 0, 470, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 471, 472, 473, 0, 0, 477,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 474, 298, 297, 299, 300, 301, 475, 0, 476,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 478, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 479, 480, 334, 335, 0, 336, 337, 338, 0,
	978, 340, 341, 0, 0, 342, 481, 0, 343, 0,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 483, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 487, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 489,
	490, 491, 428, 0, 0, 429, 430, 492, 431, 493,
	0, 432, 433, 434, 0, 435, 436, 0, 0, 437,
	438, 439, 440, 442, 0, 443, 0, 441, 444, 445,
	446, 494, 495, 496, 0, 448, 447, 497, 2220, 0,
	208, 0, 449, 450, 498, 451, 452, 453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 471, 472, 473, 0, 0, 477, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 0, 343, 0, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 0, 448, 447, 497, 1817, 0, 208, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 459, 460, 461, 0, 233, 462, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 469, 0,
	470, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	471, 472, 473, 0, 0, 477, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 478, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 479, 480, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 481, 0, 343, 0, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 483, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 486, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 489, 490, 491, 428, 0,
	0, 429, 430, 492, 431, 493, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	0, 443, 0, 441, 444, 445, 446, 494, 495, 496,
	208, 448, 447, 497, 0, 0, 0, 0, 449, 450,
	498, 451, 452, 453, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 471, 472, 473, 0, 0, 477, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 0, 343, 0, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 1756, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 0, 448, 447, 497, 1750, 0, 208, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 459, 460, 461, 0, 233, 462, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 469, 0,
	470, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1749, 472, 473, 0, 0, 477, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 478, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 479, 480, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 481, 0, 343, 0, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 483, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 486, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 489, 490, 491, 428, 0,
	0, 429, 430, 492, 431, 493, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	0, 443, 0, 441, 444, 445, 446, 494, 495, 496,
	0, 448, 447, 497, 1745, 0, 208, 0, 449, 450,
	498, 451, 452, 453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1747, 472,
	473, 0, 0, 477, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 0, 343, 0, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 0, 448,
	447, 497, 1270, 0, 208, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 459, 460, 461,
	0, 233, 462, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 463,
	464, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 469, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1269, 472, 473, 0,
	0, 477, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 478, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 479, 480, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 481, 0,
	343, 0, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 483, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 489, 490, 491, 428, 0, 0, 429, 430, 492,
	431, 493, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 0, 443, 0, 441,
	444, 445, 446, 494, 495, 496, 0, 448, 447, 497,
	1267, 0, 208, 0, 449, 450, 498, 451, 452, 453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 459, 460, 461, 0, 233,
	462, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 463, 464, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 469, 0, 470, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1266, 472, 473, 0, 0, 477,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 474, 298, 297, 299, 300, 301, 475, 0, 476,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 478, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 479, 480, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 481, 0, 343, 0,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 483, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 487, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 489,
	490, 491, 428, 0, 0, 429, 430, 492, 431, 493,
	0, 432, 433, 434, 0, 435, 436, 0, 0, 437,
	438, 439, 440, 442, 0, 443, 0, 441, 444, 445,
	446, 494, 495, 496, 0, 448, 447, 497, 1264, 0,
	208, 0, 449, 450, 498, 451, 452, 453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1263, 472, 473, 0, 0, 477, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 0, 343, 0, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 0, 448, 447, 497, 1260, 0, 208, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 459, 460, 461, 0, 233, 462, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 469, 0,
	470, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1259, 472, 473, 0, 0, 477, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 478, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 479, 480, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 481, 0, 343, 0, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 483, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 486, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 489, 490, 491, 428, 0,
	0, 429, 430, 492, 431, 493, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	0, 443, 0, 441, 444, 445, 446, 494, 495, 496,
	0, 448, 447, 497, 1235, 0, 208, 0, 449, 450,
	498, 451, 452, 453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 471, 472,
	473, 0, 0, 477, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 0, 343, 0, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 0, 448,
	447, 497, 1152, 0, 208, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 459, 460, 461,
	0, 233, 462, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 463,
	464, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 469, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1154, 472, 473, 0,
	0, 477, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 478, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 479, 480, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 481, 0,
	343, 0, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 483, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 489, 490, 491, 428, 0, 0, 429, 430, 492,
	431, 493, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 0, 443, 0, 441,
	444, 445, 446, 494, 495, 496, 208, 448, 447, 497,
	0, 0, 0, 0, 449, 450, 498, 451, 452, 453,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 471, 472,
	473, 0, 0, 477, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 0, 343, 0, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 208, 448,
	447, 497, 0, 0, 0, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 459, 460, 461, 0, 233, 462, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 521, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 522, 284, 469, 0,
	470, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	471, 472, 473, 0, 0, 477, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 478, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 479, 480, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 481, 0, 343, 0, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 483, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 486, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 523, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 489, 490, 491, 428, 0,
	0, 429, 430, 492, 431, 493, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	0, 443, 0, 441, 444, 445, 446, 494, 495, 496,
	0, 448, 447, 497, 667, 0, 208, 0, 449, 450,
	498, 451, 452, 453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 471, 472,
	473, 0, 0, 477, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 0, 343, 0, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 666, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 0, 448,
	447, 497, 506, 0, 208, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 505, 219, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 459, 460, 461,
	0, 233, 462, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 463,
	464, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 469, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 471, 472, 473, 0,
	0, 477, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 478, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 479, 480, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 481, 0,
	343, 0, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 483, 352, 484, 504, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 489, 490, 491, 428, 0, 0, 429, 430, 492,
	431, 493, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 0, 443, 0, 441,
	444, 445, 446, 494, 495, 496, 208, 448, 447, 497,
	0, 0, 0, 0, 449, 450, 498, 451, 452, 453,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 0, 2087, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 471, 472,
	473, 0, 0, 477, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 0, 343, 0, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 0, 448,
	447, 497, 208, 2276, 0, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 459, 460, 461, 0, 233,
	462, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 463, 464, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 469, 0, 470, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 471, 472, 473, 0, 0, 477,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 474, 298, 297, 299, 300, 301, 475, 0, 476,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 478, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 479, 480, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 481, 0, 343, 0,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 483, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 487, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 489,
	490, 491, 428, 0, 0, 429, 430, 492, 431, 493,
	0, 432, 433, 434, 0, 435, 436, 0, 0, 437,
	438, 439, 440, 442, 0, 443, 0, 441, 444, 445,
	446, 494, 495, 496, 208, 448, 447, 497, 0, 0,
	0, 0, 449, 450, 498, 451, 452, 453, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 459, 460, 461,
	0, 233, 462, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 463,
	464, 2826, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 469, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 471, 472, 473, 0,
	0, 477, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 478, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 479, 480, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 481, 0,
	343, 0, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 483, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 489, 490, 491, 428, 0, 0, 429, 430, 492,
	431, 493, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 0, 443, 0, 441,
	444, 445, 446, 494, 495, 496, 0, 448, 447, 497,
	208, 2276, 0, 0, 449, 450, 498, 451, 452, 453,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 471, 472, 473, 0, 0, 477, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	2273, 0, 0, 342, 481, 0, 343, 0, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 208, 448, 447, 497, 0, 0, 0, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 214,
	215, 216, 217, 218, 1823, 219, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 459, 460, 461, 0, 233,
	462, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 463, 464, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 469, 0, 470, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 471, 472, 473, 0, 0, 477,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 474, 298, 297, 299, 300, 301, 475, 0, 476,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 478, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 479, 480, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 481, 0, 343, 0,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 483, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 487, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 489,
	490, 491, 428, 0, 0, 429, 430, 492, 431, 493,
	0, 432, 433, 434, 0, 435, 436, 0, 0, 437,
	438, 439, 440, 442, 0, 443, 0, 441, 444, 445,
	446, 494, 495, 496, 0, 448, 447, 497, 1815, 0,
	208, 0, 449, 450, 498, 451, 452, 453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 471, 472, 473, 0, 0, 477, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 0, 343, 0, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 0, 448, 447, 497, 549, 0, 208, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 459, 460, 1014, 0, 233, 462, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 469, 0,
	470, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	471, 472, 473, 0, 0, 477, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 478, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 550, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 479, 480, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 481, 0, 343, 0, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 483, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 486, 381, 0, 382, 386,
	387, 546, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 545, 490, 491, 428, 0,
	0, 429, 430, 492, 431, 493, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	0, 443, 0, 441, 444, 445, 446, 494, 495, 496,
	0, 448, 447, 497, 1768, 0, 208, 0, 449, 450,
	498, 451, 452, 453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1767, 472,
	473, 0, 0, 477, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 0, 343, 0, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 0, 448,
	447, 497, 549, 0, 208, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 459, 460, 461,
	0, 539, 462, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 463,
	464, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 469, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 471, 472, 473, 0,
	0, 477, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 478, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 550, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 479, 480, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 481, 0,
	343, 0, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 483, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 546, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 1289, 402, 0, 403, 383, 384, 404, 0, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 545, 490, 491, 428, 0, 0, 429, 430, 492,
	431, 493, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 0, 443, 0, 441,
	444, 445, 446, 494, 495, 496, 0, 448, 447, 497,
	1274, 0, 208, 0, 449, 450, 498, 451, 452, 453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 459, 460, 461, 0, 233,
	462, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 463, 464, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 469, 0, 470, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1273, 472, 473, 0, 0, 477,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 474, 298, 297, 299, 300, 301, 475, 0, 476,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 478, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 479, 480, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 481, 0, 343, 0,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 483, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 487, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 489,
	490, 491, 428, 0, 0, 429, 430, 492, 431, 493,
	0, 432, 433, 434, 0, 435, 436, 0, 0, 437,
	438, 439, 440, 442, 0, 443, 0, 441, 444, 445,
	446, 494, 495, 496, 0, 448, 447, 497, 1223, 0,
	208, 0, 449, 450, 498, 451, 452, 453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1222, 472, 473, 0, 0, 477, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 0, 343, 0, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 0, 448, 447, 497, 1207, 0, 208, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 459, 460, 461, 0, 233, 462, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 469, 0,
	470, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	471, 472, 473, 0, 0, 477, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 478, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 479, 480, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 481, 0, 343, 0, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 483, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 486, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 489, 490, 491, 428, 0,
	0, 429, 430, 492, 431, 493, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	0, 443, 0, 441, 444, 445, 446, 494, 495, 496,
	0, 448, 447, 497, 1146, 0, 208, 0, 449, 450,
	498, 451, 452, 453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 471, 472,
	473, 0, 0, 477, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 0, 343, 0, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 0, 448,
	447, 497, 549, 0, 208, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 459, 460, 1014,
	0, 233, 462, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 463,
	464, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 469, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 471, 472, 473, 0,
	0, 477, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 478, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 550, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 479, 480, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 481, 0,
	343, 0, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 483, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 546, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 545, 490, 491, 428, 0, 0, 429, 1015, 492,
	431, 493, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 0, 443, 0, 441,
	444, 445, 446, 494, 495, 496, 208, 448, 447, 497,
	0, 0, 0, 0, 449, 450, 498, 451, 452, 453,
	0, 0, 0, 214, 215, 216, 217, 218, 997, 219,
	0, 0, 0, 0, 454, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 471, 472,
	473, 0, 0, 477, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 0, 343, 0, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 0, 448,
	447, 497, 549, 0, 208, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 459, 460, 461,
	0, 539, 462, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 537, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 463,
	464, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 469, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 471, 472, 473, 0,
	0, 477, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 478, 0, 316, 317, 0, 0, 318,
	538, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 550, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 479, 480, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 481, 0,
	343, 0, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 483, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 540, 381, 0, 382, 386, 387, 546, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 541, 402, 0, 403, 383, 384, 404, 0, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 545, 490, 491, 428, 0, 0, 429, 543, 492,
	431, 493, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 0, 443, 0, 441,
	444, 445, 446, 494, 495, 496, 0, 448, 447, 497,
	533, 0, 208, 0, 449, 450, 498, 451, 452, 453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 459, 460, 461, 0, 233,
	462, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 463, 464, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 469, 0, 470, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 471, 472, 473, 0, 0, 477,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 474, 298, 297, 299, 300, 301, 475, 0, 476,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 478, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 479, 480, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 481, 0, 343, 0,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 483, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 486,
	381, 0, 382, 534, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 487, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 489,
	490, 491, 428, 0, 0, 429, 430, 492, 431, 493,
	0, 432, 433, 434, 0, 435, 436, 0, 0, 437,
	438, 439, 440, 442, 0, 443, 0, 441, 444, 445,
	446, 494, 495, 496, 0, 448, 447, 497, 531, 0,
	208, 0, 449, 450, 498, 451, 452, 453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 471, 472, 473, 0, 0, 477, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 0, 343, 0, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 0, 448, 447, 497, 525, 0, 208, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 459, 460, 461, 0, 233, 462, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 469, 0,
	470, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	471, 472, 473, 0, 0, 477, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 478, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 479, 480, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 481, 0, 343, 0, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 483, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 486, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 489, 490, 491, 428, 0,
	0, 429, 430, 492, 431, 493, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	0, 443, 0, 441, 444, 445, 446, 494, 495, 496,
	0, 448, 447, 497, 501, 0, 208, 0, 449, 450,
	498, 451, 452, 453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 471, 472,
	473, 0, 0, 477, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 0, 343, 0, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 208, 448,
	447, 497, 0, 0, 0, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 459, 460, 461, 0, 233, 462, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 469, 0,
	470, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	471, 472, 473, 0, 0, 477, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 478, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 479, 480, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 481, 0, 343, 0, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 483, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 486, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 489, 490, 491, 428, 0,
	0, 429, 430, 492, 431, 493, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	0, 443, 0, 441, 444, 445, 446, 494, 495, 496,
	208, 448, 447, 497, 0, 0, 0, 0, 449, 450,
	498, 451, 452, 453, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 2532, 472, 473, 0, 0, 477, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 0, 343, 0, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 208, 448, 447, 497, 0, 0, 0, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 459, 460, 461, 0, 233,
	462, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 463, 464, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 469, 0, 470, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 2530, 472, 473, 0, 0, 477,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 474, 298, 297, 299, 300, 301, 475, 0, 476,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 478, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 479, 480, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 481, 0, 343, 0,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 483, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 487, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 489,
	490, 491, 428, 0, 0, 429, 430, 492, 431, 493,
	0, 432, 433, 434, 0, 435, 436, 0, 0, 437,
	438, 439, 440, 442, 0, 443, 0, 441, 444, 445,
	446, 494, 495, 496, 208, 448, 447, 497, 0, 0,
	0, 0, 449, 450, 498, 451, 452, 453, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 459, 460, 461,
	0, 233, 462, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 463,
	464, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 469, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 2519, 472, 473, 0,
	0, 477, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 478, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 479, 480, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 481, 0,
	343, 0, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 483, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 489, 490, 491, 428, 0, 0, 429, 430, 492,
	431, 493, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 0, 443, 0, 441,
	444, 445, 446, 494, 495, 496, 208, 448, 447, 497,
	0, 0, 0, 0, 449, 450, 498, 451, 452, 453,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 2237, 472,
	473, 0, 0, 477, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 0, 343, 0, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 208, 448,
	447, 497, 0, 0, 0, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 459, 460, 461, 0, 233, 462, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 469, 0,
	470, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	471, 472, 473, 0, 0, 477, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 478, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 479, 480, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 481, 0, 343, 0, 482, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 483, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 486, 381, 0, 382, 534,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 489, 490, 491, 428, 0,
	0, 429, 430, 492, 431, 493, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	0, 443, 0, 441, 444, 445, 446, 494, 495, 496,
	208, 448, 447, 497, 0, 0, 0, 0, 449, 450,
	498, 451, 452, 453, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 454, 0,
	1780, 0, 0, 220, 221, 222, 455, 456, 223, 457,
	224, 225, 458, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 459, 460, 461, 0, 233, 462, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 463, 464, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 465, 265, 266, 268, 271,
	267, 272, 273, 274, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 468, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	469, 0, 470, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 471, 472, 473, 0, 0, 477, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 474,
	298, 297, 299, 300, 301, 475, 0, 476, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 478,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 479,
	480, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 481, 0, 343, 0, 482, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 483,
	352, 484, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 485, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 486, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	0, 383, 384, 404, 0, 405, 487, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 488, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 489, 490, 491,
	428, 0, 0, 429, 430, 492, 431, 493, 0, 432,
	433, 434, 0, 435, 436, 0, 0, 437, 438, 439,
	440, 442, 0, 443, 0, 441, 444, 445, 446, 494,
	495, 496, 208, 448, 447, 497, 0, 0, 0, 0,
	449, 450, 498, 451, 452, 453, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 220, 221, 222, 455, 456,
	223, 457, 224, 225, 458, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 459, 460, 461, 0, 233,
	462, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 463, 464, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 465, 265, 266,
	268, 271, 267, 272, 273, 274, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 468, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 469, 0, 470, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1243, 472, 473, 0, 0, 477,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 474, 298, 297, 299, 300, 301, 475, 0, 476,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 478, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 479, 480, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 481, 0, 343, 0,
	482, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 483, 352, 484, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 485, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 486,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 487, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 488, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 489,
	490, 491, 428, 0, 0, 429, 430, 492, 431, 493,
	0, 432, 433, 434, 0, 435, 436, 0, 0, 437,
	438, 439, 440, 442, 0, 443, 0, 441, 444, 445,
	446, 494, 495, 496, 208, 448, 447, 497, 0, 0,
	0, 0, 449, 450, 498, 451, 452, 453, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 220, 221, 222,
	455, 456, 223, 457, 224, 225, 458, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 459, 460, 461,
	0, 233, 462, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 463,
	464, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 465,
	265, 266, 268, 271, 267, 272, 273, 274, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	468, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 469, 0, 470, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1185, 472, 473, 0,
	0, 477, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 474, 298, 297, 299, 300, 301, 475,
	0, 476, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 478, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 479, 480, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 481, 0,
	343, 0, 482, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 483, 352, 484, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 485, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 486, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	487, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 488, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 489, 490, 491, 428, 0, 0, 429, 430, 492,
	431, 493, 0, 432, 433, 434, 0, 435, 436, 0,
	0, 437, 438, 439, 440, 442, 0, 443, 0, 441,
	444, 445, 446, 494, 495, 496, 208, 448, 447, 497,
	0, 0, 0, 0, 449, 450, 498, 451, 452, 453,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 454, 0, 0, 0, 0, 220,
	221, 222, 455, 456, 223, 457, 224, 225, 458, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 459,
	460, 461, 0, 233, 462, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 463, 464, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 465, 265, 266, 268, 271, 267, 272, 273, 274,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 468, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 469, 0, 470, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 471, 472,
	473, 0, 0, 477, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 474, 298, 297, 299, 300,
	301, 475, 0, 476, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 478, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 479, 480, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	481, 0, 343, 0, 482, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 483, 352, 484, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 485, 952,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 486, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 487, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 488, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 489, 490, 491, 428, 0, 0, 429,
	430, 492, 431, 493, 0, 432, 433, 434, 0, 435,
	436, 0, 0, 437, 438, 439, 440, 442, 0, 443,
	0, 441, 444, 445, 446, 494, 495, 496, 208, 448,
	447, 497, 0, 0, 0, 0, 449, 450, 498, 451,
	452, 453, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 454, 0, 0, 0,
	0, 220, 221, 222, 455, 456, 223, 457, 224, 225,
	458, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 459, 460, 461, 0, 233, 462, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 463, 464, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 465, 265, 266, 268, 271, 267, 272,
	273, 274, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 468, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 469, 0,
	470, 0, 0, 286, 287, 288, 289, 290, 291, 292,
	471, 472, 473, 0, 0, 477, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 474, 298, 297,
	299, 300, 301, 475, 0, 476, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 478, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 479, 480, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 481, 0, 343, 0, 482, 344, 339, 345,
	346, 0, 348, 349, 350, 0, 351, 483, 352, 484,
	353, 0, 354, 0, 355, 356, 357, 0, 359, 360,
	485, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 486, 0, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 487, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 488,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 489, 490, 491, 428, 0,
	0, 429, 430, 492, 431, 493, 0, 432, 433, 434,
	0, 435, 436, 0, 0, 437, 438, 439, 440, 442,
	0, 443, 0, 441, 444, 445, 446, 494, 495, 496,
	0, 448, 447, 497, 0, 0, 0, 0, 449, 450,
	498, 451, 452, 453, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 0, 0,
	1399, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1398, 0, 0, 0,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 1399, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 1422, 1423, 1424,
	0, 1398, 0, 0, 0, 0, 1404, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 1443, 0,
	0, 0, 0, 0, 0, 1413, 1414, 0, 0, 0,
	0, 1421, 1422, 1423, 1424, 0, 0, 0, 0, 0,
	1434, 1404, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1443, 0, 0, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 1425, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 1437, 0, 0, 0,
	0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 0, 0, 0, 0, 0, 1398, 0, 0,
	2396, 0, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 1399, 0, 1435, 1445,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422, 1423,
	1424, 0, 1398, 0, 0, 2395, 0, 1404, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 1415, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 1421, 1422, 1423, 1424, 0, 0, 0, 0,
	0, 1434, 1404, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 1436, 1446,
	0, 0, 1426, 1427, 1428, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1443, 0, 0, 0, 0, 0,
	0, 1413, 1414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 1425,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 0, 1396, 1397, 0, 1429,
	1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 1437, 0, 0,
	0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 0, 0, 0, 1398, 0,
	0, 2392, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 1415, 0, 0, 0, 0, 0, 0,
	0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 1399, 0, 1435,
	1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422,
	1423, 1424, 0, 1398, 0, 0, 2391, 0, 1404, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 1415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1446, 0, 0, 1426, 1427,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	1443, 0, 0, 0, 0, 0, 0, 1413, 1414, 0,
	0, 0, 0, 1421, 1422, 1423, 1424, 0, 0, 0,
	0, 0, 1434, 1404, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1413, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	1425, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 1437, 0,
	0, 0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411,
	1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 0, 0, 0, 0, 0, 1398,
	0, 0, 2390, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 1399, 0,
	1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421,
	1422, 1423, 1424, 0, 1398, 0, 0, 1974, 0, 1404,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 0, 1421, 1422, 1423, 1424, 0, 0,
	0, 0, 0, 1434, 1404, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 1425, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 1437,
	0, 0, 0, 0, 1399, 0, 1435, 1445, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0, 3219,
	1398, 0, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 1399,
	0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	1421, 1422, 1423, 1424, 3215, 1398, 0, 0, 0, 0,
	1404, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 1421, 1422, 1423, 1424, 0,
	0, 0, 0, 0, 1434, 1404, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 1425, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	1437, 0, 0, 0, 0, 1399, 0, 1435, 1445, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0,
	3150, 1398, 0, 0, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 0, 0,
	1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 1421, 1422, 1423, 1424, 3149, 1398, 0, 0, 0,
	0, 1404, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1443, 0, 0, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 1421, 1422, 1423, 1424,
	0, 0, 0, 0, 0, 1434, 1404, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 1443, 0,
	0, 0, 0, 0, 0, 1413, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 1425, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 1437, 0, 0, 0, 0, 1399, 0, 1435, 1445,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0,
	0, 3058, 1398, 0, 0, 0, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 1415, 0, 0,
	0, 0, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 1421, 1422, 1423, 1424, 2976, 1398, 0, 0,
	0, 0, 1404, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 1446,
	0, 0, 1426, 1427, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1443, 0, 0, 0, 0, 0,
	0, 1413, 1414, 0, 0, 0, 0, 1421, 1422, 1423,
	1424, 0, 0, 0, 0, 0, 1434, 1404, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 1425, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 1437, 0, 0, 0, 0, 1399, 0, 1435,
	1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0,
	0, 0, 2932, 1398, 0, 0, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 1415, 0,
	0, 0, 0, 0, 0, 0, 1396, 1397, 0, 1429,
	1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 1421, 1422, 1423, 1424, 2931, 1398, 0,
	0, 0, 0, 1404, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 1415, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1413, 1414, 0, 0, 0, 0, 1421, 1422,
	1423, 1424, 0, 0, 0, 0, 0, 1434, 1404, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 1436, 1446, 0, 0, 1426, 1427,
	1428, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	1443, 0, 0, 0, 0, 0, 0, 1413, 1414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 1425, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 1437, 0, 0, 0, 0, 1399, 0,
	1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0,
	0, 0, 0, 2930, 1398, 0, 0, 0, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411,
	1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424, 2896, 1398,
	0, 0, 0, 0, 1404, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 1421,
	1422, 1423, 1424, 0, 0, 0, 0, 0, 1434, 1404,
	0, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 1425, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	0, 0, 0, 0, 2712, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 1399,
	0, 0, 1445, 0, 0, 0, 1435, 0, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 1398, 0, 2349, 0, 0,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 0, 2320, 0, 1399, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1422, 1423, 1424, 0,
	1398, 0, 0, 0, 0, 1404, 3305, 0, 1418, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 0, 2321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 0, 0, 0,
	1421, 1422, 1423, 1424, 0, 0, 0, 0, 0, 1434,
	1404, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 3304, 0, 0, 1413,
	1414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 1425, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 1437, 0, 0, 0, 0,
	1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 0, 0, 0, 0, 0, 1398, 0, 0, 0,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 1415, 2062, 0, 0, 0, 0, 0, 0, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 2061, 0, 0, 1399, 0, 1435, 1445, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424,
	0, 1398, 0, 0, 0, 0, 1404, 0, 2435, 1418,
	0, 2434, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 1443, 0,
	0, 0, 0, 0, 0, 1413, 1414, 0, 0, 0,
	0, 1421, 1422, 1423, 1424, 0, 0, 0, 0, 0,
	1434, 1404, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1443, 0, 0, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 1425, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 1437, 0, 0, 0,
	0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 0, 0, 0, 0, 0, 1398, 0, 0,
	0, 0, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 1399, 0, 1435, 1445,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422, 1423,
	1424, 0, 1398, 0, 0, 0, 0, 1404, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 1415, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 1421, 1422, 1423, 1424, 0, 0, 0, 0,
	0, 1434, 1404, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 1436, 1446,
	0, 0, 1426, 1427, 1428, 0, 0, 0, 0, 1433,
	795, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1443, 0, 0, 0, 0, 0,
	0, 1413, 1414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 1425,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 0, 1396, 1397, 0, 1429,
	1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 1437, 0, 0,
	0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 0, 0, 0, 1398, 2702,
	0, 0, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 1415, 0, 0, 0, 0, 0, 0,
	0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 2436, 0, 0, 1399, 0, 1435,
	1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422,
	1423, 1424, 0, 1398, 0, 0, 0, 0, 1404, 0,
	0, 1418, 0, 2441, 0, 0, 0, 0, 1415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1446, 0, 0, 1426, 1427,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	1443, 0, 0, 0, 0, 0, 0, 1413, 1414, 0,
	0, 0, 0, 1421, 1422, 1423, 1424, 0, 0, 0,
	0, 0, 1434, 1404, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1413, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	1425, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 1437, 0,
	0, 0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411,
	1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 0, 0, 0, 0, 0, 1398,
	0, 0, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 2389, 0, 0, 1399, 0,
	1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421,
	1422, 1423, 1424, 0, 1398, 0, 0, 0, 0, 1404,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 0, 1421, 1422, 1423, 1424, 0, 0,
	0, 0, 0, 1434, 1404, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 2403, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 1425, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 1437,
	0, 0, 0, 0, 1399, 0, 1435, 1445, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0, 0,
	1398, 0, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 1399,
	0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	1421, 1422, 1423, 1424, 0, 1398, 0, 0, 0, 0,
	1404, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 1421, 1422, 1423, 1424, 0,
	0, 0, 0, 0, 1434, 1404, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 0, 0, 1434,
	0, 0, 1425, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 1444, 0, 0, 593, 612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 594, 0, 0,
	595, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 0, 596, 0, 0, 0, 0, 1425, 0, 0,
	0, 616, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 597, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	1437, 599, 622, 0, 0, 1399, 625, 1435, 1445, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0,
	0, 1398, 0, 0, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 621, 0, 0, 0, 0, 0, 602, 0, 0,
	0, 705, 1435, 736, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 1421, 1422, 1423, 1424, 712, 600, 0, 0, 0,
	0, 1404, 0, 0, 0, 603, 0, 710, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 0, 0, 0, 1436, 1446, 0,
	711, 1426, 1427, 1428, 0, 713, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 719, 720, 0, 624, 0,
	0, 730, 1442, 1443, 0, 0, 0, 0, 605, 0,
	1413, 1414, 0, 0, 737, 714, 0, 0, 0, 0,
	0, 606, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 611, 0,
	0, 735, 0, 0, 0, 0, 0, 0, 0, 1444,
	607, 0, 0, 620, 0, 619, 0, 0, 0, 0,
	608, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 715, 0, 0, 0, 615, 0, 0, 709,
	0, 626, 0, 623, 0, 0, 0, 613, 0, 0,
	0, 0, 0, 0, 0, 716, 717, 0, 0, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 723, 0, 0,
	0, 1420, 0, 0, 718, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 722,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 738, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	721, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 732, 1435, 0,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 727, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0,
	707, 725, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 708, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 728, 0, 0, 0,
	726, 0, 0, 0, 742, 743, 0, 0, 0, 0,
	740, 0, 0, 0, 0, 0, 0, 729, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 733,
}
var sqlPact = [...]int{

	187, -1000, -47, -1000, -1000, -1000, -1000, -1000, 148, 146,
	143, 142, 141, 136, 133, 132, 127, -1000, -1000, -1000,
	123, -1000, -1000, 122, -1000, 121, 112, 111, 110, -1000,
	107, 104, -1000, -1000, -1000, -1000, 96, 95, 94, 46792,
	1515, 56142, 48010, 1684, 2042, 41506, 55734, 41098, 55326, 54918,
	93, -1000, 54510, 91, 87, 80, -1000, -1000, 78, 1273,
	33316, 77, 68, 67, 1834, 66, 65, -1000, 63, -1000,
	66641, 1148, -1000, 61, 59, -1000, 7179, 3515, 47602, 2034,
	58, 56, 32907, 2004, -1000, -1000, 1142, -1000, -1000, 53,
	48, 39, 38, 37, 35, 33, 27, 26, -1000, 25,
	24, 22, 19, 10, 9, 8, 7, 6, 4, 0,
	-1, -2, -6, -9, -10, -1000, 66869, 1374, 1270, 1267,
	1265, 1248, 1249, 808, -11, -12, -13, -14, -15, -19,
	-1000, -1000, -20, -21, -22, -28, -1000, -30, -31, 88,
	-32, -34, -36, -39, -41, 2650, 1990, 1359, 713, 16261,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	60162, 56544, -42, -64, -44, -1000, 2330, 772, 28001, 187,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	356, -1000, -1000, -1000, 217, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1403,
	611, -1000, -1000, -1000, 54102, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 56544, -1000, 1508, -40, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 602, -1000, 1499, 163, 1415, -1000,
	-1000, -1000, -1000, -1000, 56544, -1000, -1000, 2607, 2606, 1456,
	599, 53700, -1000, 1841, -1000, 749, 16692, -1000, 975, -1000,
	16692, 216, -1000, -1000, -1000, -1000, -1000, 40690, 13244, 40282,
	39874, 37030, 53292, 12826, 46390, 965, -1000, -1000, -1000, -1000,
	-1000, -49, 34522, 56544, -1000, 207, -1000, -1000, -1000, -1000,
	-1000, -1000, 24187, 706, 23742, 382, 23297, 313, -1000, -1000,
	-1000, -1000, 2605, 2604, 863, 2603, 2263, 59760, 1275, 2602,
	1180, 934, 814, 2597, 2592, 2590, 2589, 2588, 2586, 2585,
	1083, 52884, 2016, 36612, 36194, 46792, 46792, 1840, 52476, -1000,
	-1000, 1039, 1033, -1000, -1000, -1000, -1000, 2179, 2026, 1998,
	45982, -1000, -1000, 2583, 2576, 2574, 2573, 2572, 59358, 1211,
	2570, 1766, 2568, 2565, 2564, 2562, 2561, 2560, 2558, 2557,
	2555, -1000, 45574, 45166, 44758, 44350, 52068, 35776, 35358, -1000,
	-1000, -1000, 29629, 4011, 51660, 30467, 46792, -1000, -1000, 24618,
	583, -1000, -1000, -1000, 1985, -1000, 24618, 583, -1000, 1344,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1739, 1239, 2439,
	34940, 1435, 1086, 2162, 2551, 1689, 2135, 2134, 2120, 2110,
	2104, 2549, 1164, 2546, 1145, 2543, 2103, 2099, 2459, 1474,
	39466, 2541, 2534, 2287, 2097, 1984, -1000, -1000, -1000, -1000,
	1140, -1000, -1000, -1000, 41908, -1000, -1000, 1471, -1000, -1000,
	1471, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 961, 58554,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1317, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1725, -1000, 1434, -1000, -1000, 2531,
	1990, 1677, 2302, 2302, 2302, 2346, 340, 330, -1000, 88,
	-1000, -1000, 66377, -1000, -1000, 24618, 24618, 24618, 24618, 24618,
	1395, -1000, 598, -1000, -1000, 666, -1000, 597, 520, -1000,
	-1000, -1000, -1000, -1000, -1000, 596, 2461, -1000, 770, -1000,
	-1000, -1000, -1000, 2414, -1000, 15385, -1000, -1000, -1000, 338,
	595, 24618, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 202, 758,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 503, 1269, 502, 502, 502, -1000,
	-1000, 809, -1000, -1000, -1000, 718, -1000, 716, -1000, -1000,
	-1000, -1000, -1000, 2015, 591, 590, -1000, 589, 585, 582,
	-1000, -1000, -1000, 581, 580, 578, 577, 574, 572, 568,
	567, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 807, -1000,
	565, 556, 555, 547, 545, 543, 542, 541, 538, -1000,
	-1000, -50, 56544, -1000, 356, -50, -1000, -1000, 536, -1000,
	18430, 18430, 18430, -1000, -1000, 1489, 24618, -1000, 1836, -1000,
	1038, -241, 714, 28813, -1000, 27170, 714, 656, 31687, -1000,
	1982, -1000, -1000, 524, 201, -1000, -1000, -1000, 1977, 56544,
	13660, 46792, 46792, -1000, -1000, 24618, -1000, -1000, 37446, 34120,
	56544, 47194, 2379, 7616, 34120, 56544, 2014, -1000, -1000, -1000,
	56544, -1000, 24618, -1000, 2378, 1703, -56, -1000, -1000, -1000,
	-1000, -1000, 1737, 1816, 930, 1176, -1000, 16692, 2255, -1000,
	-1000, -1000, 197, 13660, -1000, 2403, 2197, 1058, -1000, 1572,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1233, 2195,
	-1000, 1681, 2156, 1218, -1000, -1000, 785, 2154, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1400, -1000, -1000,
	2278, -1000, -1000, 1626, 2153, -213, 37446, 34522, -52, -1000,
	-1000, -60, -1000, 12408, 66377, -1000, -1000, -1000, 66377, 675,
	-1000, -1000, 2148, -1000, 66377, 670, -1000, -1000, 2147, -1000,
	-1000, -1000, 2529, -1000, 2528, 1659, 2527, 2524, 2523, -1000,
	1259, 1276, 2521, -1000, 2520, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43942, 43534, 812, -1000, 1488, -1000, -1000, 43126,
	776, 1644, -1000, -1000, 1640, -1000, 748, -1000, 2519, 51252,
	1875, 776, 1637, -1000, -1000, -1000, -1000, -1000, 46792, -1000,
	46792, -1000, 46792, -1000, 1097, -1000, 58956, -241, -1000, -1000,
	-1000, -1000, -1000, 2146, 2518, 2515, 2512, -1000, 56544, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 166, 2145,
	-1000, -1000, 166, 2142, -1000, 166, 2140, -1000, 157, 2131,
	-1000, -1000, 1529, 2125, -1000, -83, 2118, -1000, -1000, -83,
	2117, -1000, -68, -1000, -1000, -1000, 772, -1000, 29221, 50844,
	37446, 774, 570, 66377, -1000, 37446, 66377, -1000, -1000, 50436,
	42724, -1000, -1000, 1060, 1792, -1000, -1000, -1000, -1000, 37446,
	37446, -1000, 50028, -1000, -1000, -1000, 1480, 2288, 46792, -1000,
	-1000, 2008, -1000, 33718, 46792, -1000, 46792, -1000, 46792, -1000,
	46792, -1000, 46792, -1000, -1000, -1000, -1000, -1000, 2170, 1272,
	1263, -1000, 56544, -1000, 56544, -1000, -1000, -1000, 1729, -1000,
	-1000, -1000, -1000, 46792, -1000, -1000, -1000, -1000, -1000, -1000,
	2007, -1000, 1235, -1000, 1059, -1000, -1000, 175, -1000, -1000,
	-56, -1000, 58554, -1000, -1000, 1990, 1677, -1000, 56544, -1000,
	-1000, -1000, 1990, 1478, 1791, 22852, 1772, 24618, 88, -1000,
	-1000, 88, 88, 17999, -1000, -1000, 7616, 7616, 13660, 995,
	24618, 24618, 24618, 24618, 24618, 24618, 24618, 24618, 24618, 24618,
	24618, 24618, 24618, 24618, 24618, 24618, 24618, 24618, 24618, 24618,
	24618, 24618, 24618, 24618, 24618, 24618, 24618, 24618, 24618, 24618,
	24618, 24618, 24618, 24618, 24618, 1813, 24618, 959, 24618, 24618,
	24618, 24618, 1389, -1000, -1000, 1386, 378, 1567, -1000, 2424,
	2424, 2424, 66758, 66758, 470, 2510, 666, -1000, 24618, -1000,
	583, 24618, 14078, -1000, 2452, 1073, -1000, -1000, 330, 8217,
	1619, -1000, 329, 14523, -1000, -1000, -1000, 15385, 520, 22407,
	24618, 797, 66377, 11992, 1942, 1921, -1000, 2447, -1000, -1000,
	2414, -1000, -1000, -1000, 993, 992, 990, 978, 518, 646,
	642, 641, 631, 605, 24618, 24618, 24618, 24618, 24618, 24618,
	24618, 24618, -1000, 21976, 21531, 21086, 25911, 20641, 24618, 15816,
	20196, 19751, 56544, -50, 2377, 24618, 124, -1000, 64928, -1000,
	124, 124, 516, -69, 66377, 1800, 1798, 28407, 1781, 1399,
	1399, 1399, -1000, 513, 634, 714, 9479, 48412, 1404, 714,
	714, 184, 221, 328, 26764, 1836, 48412, -1000, -1000, 46792,
	512, 14078, 13660, 1063, -70, 180, 1809, 1807, -1000, -71,
	774, 951, -67, -1000, 3463, -76, -1000, 913, -1000, -1000,
	-1000, -1000, 852, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 803, 510, 505, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	503, 1269, 502, 502, 502, -1000, -1000, -1000, 718, -1000,
	716, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1976, -60,
	47194, 735, -77, 866, -56, -1000, 1471, -1000, 1416, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2460, -1000, 2431, -1000, -1000, 2446, -51, -1000,
	-1000, 13660, -1000, -57, 1222, -1000, 39058, 2282, 2281, 2269,
	1095, -1000, 1080, 2343, 41908, 2358, 546, -1000, 1975, -1000,
	-1000, 747, 1057, 948, 41908, 1681, -1000, 7616, -1000, 1833,
	2339, 1105, 1144, 1105, 1105, 1099, -1000, 41908, 947, 1357,
	37446, -1000, 946, -1000, -58, 2341, 86, -1000, 1966, 941,
	-1000, -1000, 46792, 13660, 707, -52, 34522, 56544, 179, -1000,
	24618, 583, 24618, 583, -1000, -1000, 2105, -1000, -1000, -1000,
	2509, 1243, 1756, -1000, -1000, -1000, 490, 1635, 1681, 1634,
	-1000, -1000, 42316, 56544, 1818, -54, 46792, -1000, -1000, 1299,
	-1000, 2100, 2098, 509, 2508, -1000, 1486, 1633, -1000, -1000,
	-1000, 58152, 925, 2096, 794, 384, 2374, 384, 32093, -1000,
	56544, -1000, 56544, -1000, -1000, -1000, 2498, -1000, 46792, -1000,
	-1000, 46792, -1000, 46792, -1000, 46792, -1000, 46792, 46792, -1000,
	56544, 37446, 37446, 37446, 3463, 38254, -78, 325, -1000, 49626,
	56544, 834, 38656, -211, 707, -1000, 707, -1000, 46792, 2005,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 56544,
	-1000, 56544, -1000, -1000, -1000, -1000, -1000, -1000, 1113, -1000,
	2000, -1000, 1996, -1000, 177, -1000, -1000, -1000, 1479, 46792,
	46792, 46792, -1000, 41908, -1000, -1000, 1990, -1000, -1000, -1000,
	-1000, -1000, 66377, -1000, 584, -1000, -1000, 66377, 1216, 1815,
	-1000, 1815, -53, -1000, 64547, 1783, 46792, -1000, -1000, -1000,
	-1000, -1000, 730, 945, 945, 1031, 1031, 1031, 1031, 2352,
	3276, 3286, 539, 410, 410, 410, 410, 410, 410, 410,
	410, 463, 664, 664, 463, 463, 463, 463, 463, 664,
	664, 664, 410, 410, 410, 66758, 66452, 6256, 24618, 24618,
	933, 1382, 378, 5977, 24618, 3860, 3860, 3860, 3860, -1000,
	1476, -1000, -1000, -1000, -1000, 1961, 489, 25911, 25911, -1000,
	-1000, -1000, -1000, 14954, 24618, -1000, -1000, -1000, -1000, 19306,
	-1000, -1000, 64096, -248, 322, -196, -29, -1000, 24618, 24618,
	24618, 319, -1000, 318, -1000, -1000, 931, -1000, 929, 924,
	922, -1000, 488, 174, 24618, 56544, -1000, 61810, 628, -79,
	-1000, -86, 1100, -1000, 24618, 167, -1000, 1394, 482, 480,
	314, -87, 727, 726, 724, 721, 24618, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 66071, 61735, 61429,
	61354, 6702, 61048, 60973, -89, 311, -1000, 1960, -196, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 310, -1000, 306, -1000,
	65996, -196, 304, 426, -1000, 25911, 25911, 25911, -1000, 303,
	-1000, 64853, -1000, 65690, 18875, 18875, 18875, 293, 65615, 24618,
	-196, -92, -1000, -94, -1000, -1000, 469, -95, 794, 18430,
	27592, 13660, -1000, 794, 794, 24618, -1000, 24618, 28407, 28407,
	1430, 1797, 28407, -1000, -1000, -1000, -1000, 48412, 593, 714,
	48412, -1000, 2414, 1761, -1000, -1000, -1000, 56544, 356, -1000,
	48412, 48412, 13660, 714, -1000, 292, 30873, -29, 165, -1000,
	-1000, 13660, 1844, 1844, -1000, 1952, 56544, 2392, -1000, -1000,
	7616, -1000, 643, 918, -1000, 2445, 468, -1000, 2414, 2414,
	56544, 90, 16692, -1000, 1471, -1000, -1000, 1177, -1000, 1266,
	-1000, -1000, -1000, -1000, 16692, -1000, 2022, 46792, 56544, 56544,
	-1000, -1000, 1631, 57750, 1630, 7616, 56544, -1000, -1000, 467,
	465, 1782, 1780, 56544, 56544, 57348, 56946, 56544, 1393, 24618,
	1447, 1590, 583, -1000, 583, 461, 1017, 46792, 46792, 1213,
	-1000, -1000, -1000, -1000, -1000, 46792, -1000, -1000, 2441, -1000,
	1105, -1000, -1000, -1000, 1105, 1681, 1210, 46792, 37446, 781,
	56544, 1363, 583, -1000, 583, 460, 13660, 1225, -1000, 1894,
	-1000, 1552, -1000, -1000, 11576, 66377, -1000, 66377, -1000, 56544,
	-1000, 811, 56544, 38656, 763, 2088, -1000, 1681, 2084, 356,
	-1000, -1000, 84, 774, 37446, 46792, -54, 37446, 37446, 37446,
	2497, 433, 2492, -1000, 46792, 2080, 1482, 1629, 2139, 690,
	56544, 1407, 24618, 1232, -1000, 31281, 822, 56544, 1163, 82,
	-1000, -1000, -1000, -25, 56544, -1000, 2491, -1000, -1000, 166,
	166, 166, -1000, 157, 1529, -1000, -83, -83, -1000, -1000,
	3463, 774, -55, 432, -1000, 703, 700, 30051, 37446, -100,
	-1000, -1000, -1000, -1000, -1000, 46792, 56544, 561, 1867, 56544,
	-1000, 774, -1000, 778, -1000, 1054, -60, -60, -1000, 1107,
	1103, 56544, 13660, 56544, 46792, 13660, 46792, -1000, -1000, -1000,
	-1000, -1000, 1216, -1000, 24618, -1000, -1000, -1000, 17999, -1000,
	-1000, -1000, 46792, -224, 24618, 24618, 5827, 5106, 24618, 25911,
	25911, -1000, 24618, 4553, -1000, -1000, -1000, -1000, -1000, 1949,
	431, 24618, 7616, 4389, 4138, -1000, 290, 8921, 463, -1000,
	24618, -1000, 289, 17568, -1000, 65234, -35, -35, -1000, 2458,
	1672, 1291, 1231, 1127, 2434, 11160, -196, -102, -1000, -1000,
	639, -1000, 2101, -1000, 24618, 65309, 10744, -1000, 32499, 795,
	1407, -1000, -1000, 2414, -1000, -1000, -1000, -1000, 64021, 7616,
	7616, 24618, 24618, -1000, 24618, 24618, 24618, -1000, -1000, 24618,
	-1000, -1000, 1936, 24618, -1000, 7616, 7616, 25911, 25911, 25911,
	25911, 25911, 25911, 25911, 25911, 25911, 25911, 25911, 25911, 25911,
	25911, 25911, 25911, 25911, 25911, 25911, 1721, 25911, 2417, 2417,
	2417, -1000, 1940, 1936, 24618, 24618, 7616, 287, 286, 279,
	-1000, 24618, -196, -1000, -1000, 3463, -1000, 1920, -1000, -88,
	-1000, 1836, -1000, -1000, 1920, 1920, -103, 66377, -1000, 1430,
	-1000, 430, 24618, 28407, -1000, 621, -1000, -110, -1000, 48412,
	-1000, 620, -249, -1000, 697, -1000, 356, -1000, -1000, -1000,
	161, 48412, -1000, -111, -1000, 2373, 278, 13660, -1000, -1000,
	-1000, -1000, -1000, 583, -60, 1412, -1000, 2416, -1000, 619,
	277, 2414, 276, 267, -60, 56544, -1000, -56, -1000, -1000,
	-1000, -1000, -1000, -1000, 920, 917, -1000, 2077, -1000, 1617,
	-1000, 827, -1000, 1260, 24618, 24618, 425, 413, 1318, 2489,
	2073, 1529, 2067, 1529, -1000, -1000, 750, -1000, 66377, 412,
	411, -1000, -57, 1206, -1000, -1000, 24618, 24618, 49220, -1000,
	2278, -1000, 910, -1000, -1000, -1000, 1681, 909, -1000, -1000,
	1296, -1000, -1000, -1000, -1000, 24618, -1000, -58, 908, 774,
	1935, 935, -1000, 2488, 2487, 2485, 260, -59, -1000, 2372,
	1526, 56544, 46792, 46792, 2371, 46792, -1000, -1000, -1000, -1000,
	776, -1000, -1000, 2484, -1000, 832, 13660, 46792, 2064, 1749,
	690, 37852, -1000, 776, 1791, -1000, 66377, -1000, 1163, 17123,
	2273, -116, -1000, 150, -1000, -1000, -1000, 794, 32093, 28407,
	24618, 2479, -117, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 48818, 48818, 37446, 37446, 37446, 774, 56544, 56544, 38656,
	2478, 397, 56544, 56544, 393, -1000, -1000, -1000, 1406, 46792,
	-1000, -1000, -1000, -1000, -1000, 1371, 1531, -1000, 1419, 63715,
	-1000, 2294, 13660, 2381, 3860, 24618, 24618, 4485, 504, 446,
	3860, 24618, 24618, 7616, 8844, -118, 24618, 24618, -1000, 24618,
	618, 66377, 2427, 24618, 259, 257, 256, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 254, -1000, -1000, -1000, -1000,
	-1000, 66377, 24618, 83, -1000, -1000, -1000, 60564, -1000, 24618,
	253, 252, -1000, 250, 248, 8651, 5492, 63640, 63334, 63259,
	66377, 1940, 66377, -1000, -1000, 1018, 1018, 1093, 1093, 1093,
	1093, 2417, 953, 1052, 454, 483, 483, 483, 825, 1066,
	1066, 483, 483, 483, 1934, 1734, 392, 1588, -1000, -1000,
	66377, 66377, 246, -1000, -1000, -1000, -196, 245, 1910, 2322,
	-1000, 28407, 1910, 1910, -1000, -1000, 56544, 66377, -1000, -241,
	-1000, 2414, -1000, -1000, 1761, -1000, 9908, -1000, 13660, -1000,
	-1000, 30873, -1000, 391, -1000, -24, -1000, -1000, 617, -1000,
	-1000, 241, -1000, -1000, -60, 56544, 56544, 56544, 2055, -1000,
	3570, -1000, 62953, -119, -1000, 64547, 24618, 56544, -1000, 1369,
	1835, 853, -1000, 56544, -1000, 56544, -1000, -1000, 56544, 56544,
	46792, 56544, 56544, -124, 66377, -61, -1000, 696, -1000, 46792,
	46792, 37446, -125, 13660, -1000, 37446, 977, -1000, -1000, -1000,
	1862, 583, -1000, 2477, 389, 1681, 583, -1000, -1000, -1000,
	387, 56544, 1469, 386, 13660, 1752, 690, 37852, -1000, 925,
	1163, -1000, -1000, -62, -1000, 423, 583, 56544, 2476, 1407,
	-1000, -65, 66377, -1000, 693, -1000, -126, -1000, -1000, 229,
	-1000, 2242, 2240, -1000, -1000, 24618, 385, 383, 56544, 1795,
	-1000, -1000, -1000, 13660, 1044, -1000, -1000, -1000, 2294, 3860,
	3860, 24618, 24618, 24618, 3860, 8844, -127, -1000, 3860, 3860,
	-196, -1000, -1000, 65234, -1000, -1000, -1000, -1000, 66377, 10328,
	1375, -1000, 62878, -1000, -1000, -1000, -1000, 24618, 24618, -1000,
	-1000, -1000, -1000, -1000, 25911, 1931, 381, 7616, -1000, -1000,
	788, 24618, 24618, 1836, 788, 788, -133, 714, -1000, -1000,
	-1000, 2414, -24, -1000, 2466, 13660, -1000, -1000, -1000, -1000,
	-1000, 56544, -1000, 56544, -1000, 13660, 56544, 1932, 1604, -1000,
	-1000, 1773, 380, 25911, 46792, 669, 1937, 1343, 24618, -1000,
	-143, -150, 1602, -1000, -1000, 1593, 24618, -1000, 7616, 1529,
	1529, -151, -156, -1000, 906, 904, 903, 56544, 16692, -1000,
	-1000, -1000, 877, -1000, -83, 24618, 1363, 1885, 775, -1000,
	38656, 763, -1000, -1000, 24618, -1000, 46792, 24618, 1468, -1000,
	690, 37852, -1000, 2139, -1000, 2210, 56544, 2267, -1000, -1000,
	-1000, 1791, 378, -1000, 774, 377, 376, -161, 24618, 24618,
	-162, -144, -1000, 653, 651, -1000, -1000, 46792, -1000, 3860,
	3860, 3860, -1000, 225, -1000, -1000, 1407, 2317, -1000, 62572,
	62497, 4406, 25911, 7616, -163, -1000, 56544, 66377, -196, -1000,
	-1000, -1000, 48412, 606, -1000, -1000, 1713, -1000, -1000, -1000,
	56544, 1582, -1000, -1000, 24618, 1588, 372, 24618, -1000, -1000,
	1858, 1969, 1862, 371, -1000, -1000, -1000, -1000, 1229, -1000,
	-1000, 66377, 2292, -1000, -1000, 370, 369, 56544, 56544, 368,
	683, -1000, 367, 66377, 763, -1000, 1320, -1000, 1806, 219,
	2364, -164, 832, -169, 46792, 37852, -1000, 1749, 1000, -170,
	56544, 1163, -1000, -1000, 37446, 37446, 1343, -172, -177, -1000,
	1795, -1000, 56544, -1000, 56544, -1000, -1000, 1324, 24618, -1000,
	-1000, 4406, -179, -1000, -157, -1000, 2362, -1000, -1000, -1000,
	-1000, 2048, 62191, 1696, 56544, 62116, 1965, -1000, -1000, 1363,
	56544, 46792, 830, 13660, 1371, 1371, -1000, -1000, 24618, 16692,
	24618, -1000, 46792, -1000, 2239, 1862, 583, 1343, 366, 1343,
	360, -1000, 1752, 1094, -1000, 794, -1000, -1000, -182, -184,
	1862, 1343, -1000, -1000, -185, -187, -27, 25480, 25480, 25480,
	-196, -1000, 56544, 359, 2032, -1000, 1438, 1323, -38, 855,
	-1000, -1000, 1937, -195, 356, -1000, 24618, -1000, -197, -1000,
	820, -198, -1000, 819, -200, -1000, -203, 351, -1000, 1363,
	775, 1862, 24618, 1862, 24618, -1000, 32093, -1000, 774, 774,
	1363, 1862, -1000, -1000, -1000, -1000, -1000, 26342, 1544, 1139,
	64472, -1000, -1000, -1000, -1000, 56544, -1000, 1461, 1452, 1131,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1696, 66377,
	-1000, 1371, 1882, -1000, 1371, 1929, -1000, -1000, 56544, 763,
	-1000, 1363, -206, 1363, -214, -205, -1000, -1000, -1000, 1363,
	2384, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2226, -1000,
	842, 1579, 1579, 1438, -1000, 349, -1000, 346, -225, -1000,
	791, 1343, 791, 1343, -1000, -1000, 25049, -1000, 2397, -1000,
	-1000, 1736, -1000, 1937, 24618, 24618, 1458, -1000, 2465, 1862,
	-1000, 1862, -1000, -1000, -1000, -1000, -1000, -227, -230, -1000,
	-1000, -1000, -1000, 1363, 1363, 1363, 872, 791, 791, -1000,
	344, -1000, -1000, 24618, -238, 1363, -1000,
}
var sqlPgo = [...]int{

	0, 3144, 3141, 2047, 3140, 3139, 3138, 3137, 3133, 3132,
	3128, 3124, 3123, 3121, 3120, 3119, 3115, 3107, 3104, 3103,
	3101, 3100, 3099, 3094, 3093, 3085, 3084, 3083, 3082, 3077,
	3074, 3072, 3071, 3070, 3069, 3068, 3066, 3063, 3058, 3052,
	3049, 3046, 3045, 3044, 3041, 26, 3039, 3038, 3036, 3035,
	3034, 3032, 3031, 3030, 3028, 3025, 3023, 3019, 3018, 3014,
	3013, 3010, 3009, 3006, 3003, 3002, 3001, 3000, 2999, 2996,
	2995, 2994, 2990, 2989, 2988, 100, 2986, 2984, 2980, 2978,
	2974, 2970, 2968, 2963, 2960, 2951, 2950, 2949, 2947, 2946,
	106, 2945, 2944, 2942, 2941, 2940, 2939, 2938, 2937, 2936,
	2935, 183, 2934, 2933, 2932, 2931, 2930, 2929, 2928, 2924,
	2923, 2922, 2921, 2919, 2917, 2916, 2915, 2912, 2907, 2904,
	2903, 2899, 2897, 2895, 2892, 2888, 2884, 2882, 196, 129,
	2881, 2878, 2876, 2872, 2870, 2869, 92, 90, 19, 2866,
	81, 127, 169, 5968, 161, 2862, 2860, 2854, 2851, 2850,
	73, 123, 133, 120, 119, 89, 2849, 2847, 58, 32,
	27, 24, 87, 2844, 2842, 2839, 1885, 78, 2837, 2835,
	194, 173, 2833, 1795, 2828, 147, 124, 75, 84, 59,
	2827, 105, 17, 2826, 134, 51, 2825, 114, 63, 25,
	4749, 6316, 82, 199, 80, 69, 170, 151, 179, 177,
	121, 1717, 2824, 175, 118, 144, 2818, 2817, 2813, 36,
	138, 4, 9, 126, 11, 2812, 12, 2810, 7, 2809,
	2807, 2806, 2805, 60, 117, 56, 39, 2803, 22, 135,
	167, 2802, 162, 2801, 86, 2800, 186, 146, 145, 54,
	166, 2799, 2795, 2793, 2792, 2788, 94, 15, 88, 2786,
	2785, 99, 168, 2784, 64, 122, 65, 104, 200, 157,
	96, 153, 164, 2783, 2782, 2781, 148, 2778, 2776, 113,
	152, 2775, 2774, 29, 55, 159, 33, 2773, 2772, 108,
	2770, 140, 2768, 2765, 2744, 197, 137, 158, 5, 67,
	85, 30, 165, 111, 76, 70, 2743, 2811, 1332, 338,
	2742, 110, 72, 31, 77, 103, 190, 38, 2741, 2739,
	1054, 2738, 2737, 2736, 2733, 130, 2732, 2731, 2730, 95,
	37, 68, 2728, 112, 41, 109, 195, 71, 154, 180,
	184, 2727, 125, 2726, 136, 97, 2717, 141, 182, 128,
	2716, 669, 2715, 163, 2714, 2713, 2709, 2705, 66, 2702,
	2701, 189, 2700, 102, 2698, 2696, 139, 156, 101, 52,
	2695, 44, 192, 2694, 143, 35, 2692, 155, 21, 0,
	5670, 4447, 5222, 2690, 2418, 2689, 150, 98, 2688, 2686,
	2685, 2684, 34, 16, 6, 8, 13, 10, 1495, 223,
	2683, 2682, 74, 93, 115, 2681, 191, 160, 2679, 2677,
	2675, 62, 2674, 23, 2672, 20, 2671, 2665, 28, 3,
	2664, 2662, 174, 2659, 2657, 2655, 2649, 2404, 2647, 188,
	2646, 91, 2631, 142, 107, 2629, 2628, 2627, 2625, 185,
	2624, 187, 2618, 14, 18, 2, 2617, 2615, 2614, 149,
	1, 2204, 2613, 2612, 57, 132, 45, 2611, 2610, 131,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 9, 9, 9, 33,
	33, 11, 11, 10, 10, 10, 12, 12, 7, 7,
	7, 7, 7, 7, 7, 7, 14, 14, 24, 24,
	15, 26, 419, 419, 18, 28, 19, 29, 13, 421,
	421, 421, 421, 22, 20, 20, 30, 139, 139, 17,
	17, 25, 25, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 418, 418, 154, 154, 153, 149,
	149, 422, 422, 155, 155, 155, 157, 157, 34, 34,
	88, 88, 88, 140, 81, 81, 81, 81, 81, 81,
	81, 76, 76, 367, 367, 368, 368, 135, 135, 136,
	136, 136, 136, 137, 137, 138, 138, 138, 48, 36,
	36, 36, 36, 36, 36, 36, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 46, 46, 46, 129, 129, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 427, 427, 428,
	428, 429, 429, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 60, 60,
	50, 414, 414, 237, 237, 336, 336, 62, 62, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 71, 71, 71, 72, 72, 72, 69, 69,
	69, 67, 67, 67, 66, 66, 66, 70, 70, 70,
	68, 68, 68, 238, 238, 73, 73, 73, 73, 73,
	73, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 338, 338, 74, 74, 308, 308, 77, 77,
	267, 267, 78, 78, 78, 78, 78, 79, 79, 79,
	79, 89, 89, 89, 89, 417, 417, 230, 230, 170,
	170, 170, 170, 84, 84, 84, 84, 85, 85, 85,
	86, 86, 134, 134, 95, 95, 95, 95, 95, 94,
	94, 94, 94, 94, 94, 40, 40, 40, 41, 41,
	42, 42, 43, 43, 44, 44, 45, 45, 45, 45,
	45, 97, 97, 423, 423, 99, 96, 96, 96, 98,
	98, 98, 98, 100, 101, 101, 101, 101, 101, 101,
	102, 102, 361, 361, 245, 245, 359, 359, 375, 375,
	360, 360, 207, 207, 207, 207, 207, 208, 208, 208,
	366, 366, 366, 366, 366, 366, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 119, 119, 119, 128, 128, 128, 128,
	128, 128, 128, 121, 121, 121, 112, 112, 104, 104,
	104, 104, 108, 108, 108, 108, 108, 105, 105, 109,
	109, 111, 111, 113, 113, 113, 113, 113, 113, 106,
	106, 106, 106, 115, 115, 115, 115, 114, 114, 124,
	124, 124, 124, 124, 124, 322, 322, 120, 120, 120,
	120, 123, 123, 123, 123, 118, 118, 118, 122, 122,
	125, 125, 125, 125, 107, 107, 107, 432, 432, 432,
	126, 126, 117, 117, 127, 127, 127, 127, 127, 127,
	127, 116, 116, 116, 420, 420, 110, 415, 415, 412,
	412, 412, 412, 412, 412, 412, 413, 413, 416, 416,
	82, 82, 82, 55, 55, 433, 433, 433, 56, 56,
	434, 434, 434, 431, 431, 431, 431, 431, 431, 431,
	431, 209, 209, 210, 210, 290, 290, 290, 290, 290,
	211, 211, 156, 156, 156, 214, 215, 215, 212, 212,
	213, 213, 213, 217, 217, 216, 219, 219, 218, 289,
	380, 380, 381, 381, 381, 381, 381, 381, 381, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 378,
	378, 378, 379, 376, 376, 377, 377, 377, 377, 435,
	435, 435, 435, 435, 435, 436, 436, 288, 288, 223,
	223, 383, 383, 383, 383, 384, 384, 384, 384, 384,
	387, 386, 385, 385, 385, 385, 385, 318, 318, 318,
	59, 59, 59, 256, 256, 255, 255, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 131, 131, 57, 57, 57, 162, 162, 54, 54,
	54, 438, 438, 58, 58, 58, 439, 439, 61, 61,
	61, 61, 61, 61, 53, 53, 53, 53, 53, 440,
	440, 273, 273, 272, 272, 228, 228, 324, 174, 174,
	150, 150, 150, 21, 23, 23, 16, 16, 16, 16,
	16, 16, 31, 31, 32, 32, 27, 27, 424, 424,
	425, 425, 83, 83, 87, 87, 87, 93, 93, 130,
	130, 130, 130, 130, 130, 130, 35, 35, 35, 35,
	47, 47, 47, 47, 91, 442, 442, 442, 92, 92,
	441, 441, 169, 169, 169, 169, 171, 171, 285, 285,
	286, 286, 443, 443, 287, 287, 287, 164, 163, 165,
	165, 52, 52, 52, 158, 158, 159, 159, 160, 160,
	161, 161, 444, 444, 80, 80, 80, 133, 133, 203,
	203, 281, 281, 281, 224, 224, 179, 179, 284, 284,
	282, 282, 282, 254, 254, 254, 132, 132, 233, 233,
	247, 247, 248, 248, 333, 333, 249, 90, 90, 143,
	143, 141, 141, 141, 141, 141, 141, 445, 445, 142,
	142, 142, 144, 144, 144, 144, 144, 144, 144, 147,
	147, 147, 147, 148, 148, 148, 146, 146, 394, 394,
	394, 396, 396, 397, 393, 393, 395, 395, 437, 437,
	258, 258, 258, 221, 222, 220, 220, 446, 446, 226,
	226, 225, 227, 227, 323, 323, 323, 252, 252, 252,
	252, 276, 276, 274, 274, 275, 275, 277, 277, 278,
	278, 278, 279, 279, 280, 280, 251, 251, 304, 304,
	145, 145, 145, 232, 232, 232, 234, 234, 295, 295,
	295, 296, 296, 294, 294, 294, 294, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 326, 326, 235, 235,
	327, 283, 283, 410, 410, 410, 411, 411, 321, 321,
	328, 328, 328, 328, 328, 328, 319, 319, 320, 320,
	334, 335, 335, 261, 261, 261, 261, 259, 259, 260,
	260, 329, 329, 329, 329, 253, 253, 330, 330, 330,
	331, 291, 291, 339, 339, 339, 339, 353, 231, 231,
	231, 447, 447, 340, 340, 340, 340, 340, 340, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 343, 343, 343, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 352, 352, 352, 352, 352, 344, 344, 349,
	349, 350, 350, 350, 345, 346, 351, 351, 351, 351,
	448, 448, 355, 355, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 348, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 268, 268, 269,
	269, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 299, 299, 299, 299,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 388, 388, 388, 388, 388,
	388, 388, 388, 391, 391, 392, 392, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 398, 398, 399, 399,
	401, 401, 402, 402, 403, 404, 404, 404, 405, 406,
	406, 400, 400, 407, 407, 407, 407, 408, 408, 409,
	409, 409, 409, 409, 310, 310, 311, 311, 317, 317,
	317, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 172, 172, 172,
	172, 172, 243, 243, 241, 241, 241, 244, 244, 242,
	242, 240, 240, 239, 239, 307, 307, 305, 305, 309,
	309, 262, 262, 354, 354, 354, 354, 354, 354, 354,
	263, 263, 263, 271, 264, 264, 265, 265, 265, 265,
	265, 301, 302, 266, 266, 266, 303, 303, 312, 316,
	316, 315, 314, 314, 313, 313, 292, 292, 293, 293,
	250, 250, 449, 449, 246, 246, 332, 332, 332, 332,
	205, 205, 236, 236, 204, 204, 198, 198, 199, 199,
	199, 199, 229, 229, 356, 356, 356, 357, 358, 306,
	189, 188, 176, 177, 187, 186, 185, 175, 178, 182,
	183, 184, 180, 181, 194, 193, 192, 191, 337, 200,
	200, 201, 201, 201, 202, 202, 202, 202, 173, 173,
	195, 195, 196, 197, 197, 190, 190, 190, 166, 166,
	166, 167, 167, 168, 168, 365, 365, 363, 363, 363,
	364, 364, 364, 364, 362, 362, 362, 362, 362, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 371, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 374, 374,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 0, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 7, 4, 3, 5, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 3, 2, 0, 1,
	0, 1, 0, 3, 3, 3, 3, 3, 6, 4,
	4, 4, 3, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 1, 1, 2, 1, 2, 7, 3,
	6, 1, 2, 1, 3, 2, 0, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 6,
	3, 1, 1, 2, 1, 1, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 3, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 5, 7, 3, 3, 3, 3, 4,
	4, 3, 4, 4, 3, 4, 4, 4, 3, 2,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 2, 3, 3, 3, 2, 3, 5,
	4, 6, 4, 6, 4, 1, 0, 2, 3, 3,
	3, 6, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 6, 3,
	4, 5, 5, 3, 1, 1, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 10, 13, 0, 2, 3, 9, 12,
	0, 2, 3, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 4, 2, 5, 5, 5, 2, 8,
	9, 6, 5, 3, 1, 5, 8, 5, 11, 0,
	1, 3, 3, 2, 2, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	5, 8, 4, 1, 0, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 2, 2, 2, 2, 2, 3,
	1, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 1, 1, 8, 7, 5, 0, 1, 6, 7,
	6, 5, 3, 4, 14, 17, 14, 17, 4, 0,
	2, 2, 0, 1, 0, 1, 3, 2, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 1, 3, 1, 3, 8, 5,
	4, 3, 0, 2, 2, 0, 10, 3, 2, 0,
	1, 3, 1, 1, 3, 3, 5, 1, 1, 3,
	3, 2, 3, 4, 3, 4, 5, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 5, 1, 0, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	4, 2, 5, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 3,
	4, 1, 5, 3, 4, 5, 1, 5, 1, 3,
	2, 0, 3, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 3, 2, 1, 0,
	5, 1, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 5,
	4, 1, 2, 1, 4, 1, 1, 2, 1, 1,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 1, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 5, 4, 6, 3,
	5, 4, 6, 4, 6, 5, 7, 3, 3, 3,
	3, 3, 4, 3, 2, 4, 2, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 1, 5, 5, 3, 1, 1,
	1, 2, 2, 2, 4, 3, 5, 6, 8, 6,
	6, 4, 3, 4, 1, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 8,
	8, 6, 4, 6, 6, 6, 4, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 1, 2, 3, 2, 3, 2,
	3, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 1, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	1, 2, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 3, 1, 1, 1, 1, 5,
	3, 1, 1, 3, 1, 2, 2, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 7, 1, 7, 5, 3, 1, 1,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 445, -75, -48, -46, -77, -78,
	-63, -76, -79, -74, -89, -93, -83, -95, -130, -4,
	-34, -36, -49, -62, -64, -73, -81, -80, -82, -84,
	-88, -87, -40, -90, -94, -103, -131, -132, -133, 80,
	67, 120, 102, 107, 126, 152, 276, 305, 315, 299,
	-98, -99, 334, -35, -47, -92, -91, -5, -11, 27,
	38, -37, -38, -39, 52, -57, -54, -51, -60, -426,
	82, -395, -65, -68, -70, -430, 112, 125, 163, 269,
	-85, -86, 301, 303, -42, -41, 121, -141, -143, -96,
	-97, -134, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, 337, 383, 39, 346,
	68, 115, 309, 21, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -394,
	-66, -67, -69, -71, -72, 300, -144, -142, 442, 395,
	-14, -18, -19, -15, -17, -20, -16, -24, -28, -29,
	-26, -25, -27, -30, -31, -32, -33, -21, -22, -13,
	413, 421, -147, -145, -146, -148, 322, 403, 360, 446,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	-191, -195, -196, -197, -190, -166, -371, -374, 4, -369,
	-372, 131, 176, 240, 21, 22, 23, 24, 25, 27,
	37, 38, 39, 42, 44, 45, 48, 49, 50, 51,
	52, 53, 56, 61, 66, 67, 68, 69, 70, 75,
	72, 73, 74, 77, 79, 80, 81, 84, 85, 93,
	94, 95, 96, 97, 98, 102, 105, 104, 107, 110,
	111, 112, 114, 116, 117, 120, 121, 124, 122, 366,
	368, 123, 125, 126, 127, 137, 138, 139, 141, 142,
	144, 146, 150, 151, 153, 157, 159, 160, 161, 162,
	163, 164, 165, 177, 172, 178, 182, 185, 184, 186,
	187, 188, 179, 193, 196, 197, 198, 200, 201, 204,
	205, 206, 207, 210, 209, 212, 215, 216, 219, 220,
	223, 225, 226, 228, 229, 227, 230, 233, 231, 232,
	235, 236, 238, 237, 245, 246, 248, 249, 250, 264,
	253, 254, 257, 260, 263, 265, 266, 267, 268, 269,
	270, 272, 274, 276, 278, 280, 281, 282, 283, 284,
	285, 287, 288, 290, 291, 292, 293, 294, 299, 296,
	297, 298, 300, 301, 302, 303, 305, 307, 308, 309,
	310, 312, 314, 335, 336, 348, 315, 316, 317, 318,
	319, 320, 321, 325, 329, 326, 327, 328, 330, 323,
	324, 331, 332, 334, 337, 339, 341, 342, 345, 346,
	347, 349, 352, 353, 354, 350, 351, 344, 359, 357,
	358, 361, 362, 363, 364, 365, 367, 369, 374, 377,
	378, 380, 383, 384, 385, 387, 388, 391, 392, 393,
	394, 399, 395, 397, 400, 401, 402, 408, 407, 414,
	415, 417, 418, 419, 32, 40, 41, 43, 46, 57,
	58, 59, 62, 99, 100, 119, 128, 129, 140, 154,
	156, 166, 167, 168, 183, 189, 191, 171, 213, 243,
	244, 258, 262, 273, 275, 286, 311, 340, 355, 371,
	372, 373, 379, 381, 403, 404, 405, 409, 416, 251,
	-184, 2, -166, -166, 276, 26, 2, 26, 272, 324,
	362, 364, 2, 192, 2, -417, -230, 2, 26, -170,
	-166, 82, 152, 322, -184, 2, -417, -230, 24, 2,
	-166, 2, -171, 2, 315, -166, 445, 77, 220, 61,
	311, 331, -101, 378, -100, 371, 317, -102, -361, 2,
	233, -166, 445, 445, 445, 445, 2, 360, 267, 407,
	323, 396, 95, 283, 176, -412, 2, 4, -372, -369,
	-199, -198, 360, 95, -197, -190, 435, -196, 445, 445,
	445, 2, 197, 198, 282, 281, 331, 332, 445, 445,
	445, 2, 25, 55, 76, 79, 101, 127, 147, 150,
	255, -427, 226, 264, 280, 317, 330, 359, 369, 380,
	-431, 347, 56, 396, -438, 385, 110, -272, 95, 364,
	362, 220, 151, 392, 307, 155, 390, 105, 182, 394,
	393, 445, 445, 25, 55, 64, 79, 110, 127, 147,
	150, -429, 264, 280, 314, 317, 330, 359, 369, 385,
	380, 2, 407, 323, 360, 176, 95, 396, 307, 279,
	-75, 2, 442, 29, 334, -140, 360, 2, -166, 197,
	198, 2, 445, 445, -412, 2, 197, 198, 2, 319,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 2, -128, 331, 347, 160,
	38, 61, 26, 66, 96, 153, 176, 177, 205, 76,
	77, 281, 220, 198, -322, 332, 361, 318, 357, 378,
	82, 397, 308, 419, -420, 122, 4, 95, 233, 333,
	371, 70, 365, 366, -437, 2, 360, -441, 2, 378,
	378, 2, -441, 2, -441, 2, -169, 2, 378, 375,
	-442, 378, 416, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, -142, -144, -143, 445, 445,
	445, 445, 445, -128, 331, 2, 61, 26, -445, 145,
	-225, -226, 389, 190, 118, 256, -141, -143, 2, -394,
	-359, 2, -297, -375, -299, 433, 434, 428, 239, 420,
	-310, 101, 390, 251, -374, -300, -312, 119, 311, -244,
	8, 9, 5, 6, 7, -173, -341, -306, -348, 382,
	130, 242, -202, 448, 10, 442, -391, -143, -311, 33,
	156, 54, -363, -201, -342, -350, -346, -347, -447, 44,
	50, 49, 369, 232, 325, 326, 341, 327, 328, 42,
	399, 172, 248, 250, 184, 4, 191, -200, -190, -388,
	-389, -369, -370, 183, 189, 185, 340, 186, 187, 188,
	41, 286, 141, 142, 140, 111, 100, 99, 244, 46,
	45, 43, 404, -351, 97, 371, 372, 373, 374, 200,
	201, -166, -371, 64, 87, 88, 86, 91, 90, 92,
	89, 333, 396, 55, 32, 166, 167, 171, 243, 168,
	62, -390, 351, 83, 149, 181, 169, 194, 195, 199,
	214, 217, 234, 241, 259, 261, 306, 338, -448, 405,
	128, 129, 262, 273, 355, 379, 381, 154, 213, 57,
	58, -396, 287, -397, -184, -396, 445, 445, 447, 445,
	-220, -221, -222, 2, 26, 108, 442, 2, -325, 2,
	440, -329, -143, 208, -328, 442, -326, -191, 252, -392,
	312, -388, -389, -173, -190, -201, 4, -3, -223, 442,
	444, 360, 65, 2, -267, 442, -166, 26, -140, 251,
	375, 447, -308, 442, 251, 148, 253, -166, 2, 2,
	335, 2, 442, -101, 59, 378, -286, 2, -287, -163,
	-164, -165, 196, 278, 285, 419, -359, -423, 148, 425,
	375, -359, -245, 444, 2, -329, 166, -191, 2, -188,
	-362, 4, -369, -372, -370, -373, 64, -371, 26, 28,
	29, 30, 31, 33, 34, 35, 36, 47, 54, 55,
	60, 63, 65, 76, 82, 86, 87, 89, 88, 90,
	91, 92, 101, 103, 106, 108, 109, 113, 115, 118,
	130, 132, 145, 147, 148, 152, 155, 158, 170, 180,
	190, 192, 208, 211, 218, 221, 222, 239, 242, 247,
	251, 252, 255, 256, 271, 277, 289, 304, 322, 333,
	343, 356, 360, 370, 375, 376, 382, 389, 390, 396,
	398, 406, 410, 411, 412, 413, -374, 2, -329, 166,
	2, -192, 166, -329, -195, 2, -367, 166, -365, 10,
	-364, 5, 4, -369, -372, -370, 2, -175, -166, 2,
	-187, -362, 2, -204, 166, -191, 375, 447, -236, -198,
	-199, -229, -166, 444, -297, 2, -90, 2, -297, 166,
	2, -90, 166, 2, -297, 166, 2, -90, 166, 2,
	2, 2, 380, 2, 79, 166, -166, 360, 94, 2,
	298, -428, 314, 384, 407, 2, 2, 2, 2, 2,
	2, 2, 360, 323, -439, 287, -180, 2, -166, 145,
	-367, 166, 2, -367, 166, 2, -193, -195, -193, 176,
	193, -175, 166, 2, 364, 362, 364, 362, 148, 2,
	192, 2, 192, 2, -330, 2, -331, -191, 2, 2,
	2, 2, 2, 166, -166, 360, 94, 2, 207, 2,
	2, 2, 2, 2, 2, 2, 2, 2, -238, 166,
	2, -191, -238, 166, 2, -238, 166, 2, -205, 166,
	2, -204, -175, 166, 2, -368, 166, 2, -367, -368,
	166, 2, -338, 2, -337, -364, 403, -75, 442, 331,
	442, -367, -191, -297, -90, 148, -297, -90, 2, 95,
	360, -128, 2, 145, 398, 2, 8, 2, -367, 284,
	137, 2, 335, 2, 281, 332, 61, 419, 148, 2,
	2, -415, 2, 251, 148, 2, 148, 2, 148, 2,
	148, 2, 148, 2, 2, 281, 332, 2, 377, 206,
	123, 2, 148, 2, 148, 2, 5, 2, 196, 278,
	348, 2, -191, -432, 2, 360, 407, 323, 2, 2,
	72, 73, 148, 2, 148, 419, 2, -253, -329, -285,
	-286, -285, 375, -171, -445, -225, -226, -128, 335, 2,
	2, -445, -252, -274, -275, 218, 132, 247, -258, 26,
	108, -258, -258, 48, 443, 443, 11, 12, 63, 37,
	433, 434, 435, 436, 143, 437, 438, 431, 432, 430,
	423, 424, 427, 202, 203, 78, 426, 425, 71, 224,
	313, 133, 134, 135, 136, 295, 173, 174, 175, 14,
	15, 16, 30, 255, 217, 420, 169, 338, 428, 17,
	18, 19, 194, 195, 241, 40, 170, -172, -206, -297,
	-297, -297, -297, -297, 261, 442, -250, -292, 440, -143,
	442, 442, 442, 5, 442, 5, -358, 8, -143, -297,
	-310, 443, -242, 442, -143, -310, -305, 442, 311, 440,
	442, -313, -297, 444, -398, 414, -344, 442, 275, -343,
	442, -343, -343, 408, 415, 421, 415, 421, 145, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 408, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 447, -396, -223, 442, -246, -332, -297, 435,
	-246, -246, 251, -239, -297, 83, -261, 199, 234, 149,
	214, 306, 181, -358, -75, -294, 448, -321, 421, -143,
	-326, -190, -143, -328, 442, -325, -321, 435, -191, 442,
	148, 442, 444, 148, -229, -362, -191, -200, -201, -239,
	-367, -412, -229, -170, 34, -307, -339, -340, -352, -341,
	-349, -345, -348, 291, 292, 290, 294, 293, 44, 50,
	49, 369, 232, 325, 326, 341, 327, 328, 42, 399,
	172, 248, 250, 184, 4, 43, 404, -351, 191, 183,
	189, 185, 340, 186, 187, 188, 41, 286, 141, 142,
	140, 111, 100, 99, 244, 46, 45, 97, 371, 372,
	373, 374, 200, 201, 405, 351, 57, 58, -412, -229,
	145, -361, -239, 34, -286, 2, -443, 447, 216, -208,
	223, 238, 159, 252, 417, -366, 5, 4, -306, -318,
	101, 220, -348, 9, 434, -356, 8, 433, -360, -359,
	85, 444, -362, -152, 296, -151, 23, 27, 112, 401,
	124, -213, 178, 267, 119, 344, -419, -421, 316, 367,
	368, 74, 245, 296, 119, -255, -257, 34, 93, 236,
	263, 51, 164, 227, 228, 346, 409, 119, 296, 413,
	119, -421, 296, -421, -154, 344, -419, -421, 316, 296,
	-153, -213, 119, 448, -367, -236, 447, 447, -362, 435,
	119, 119, 119, 119, 2, 2, 239, 2, 2, 2,
	150, -431, -429, 2, 2, 2, -191, 166, -192, 166,
	2, -195, 407, 251, -414, -237, 360, -191, -162, -393,
	413, 239, 239, 34, 442, 2, -177, 166, 2, -167,
	-166, 176, -393, 239, -330, -203, -191, -203, 334, -184,
	34, -294, 119, 2, 2, 2, -166, -155, 447, 53,
	302, 119, -155, 119, -155, 119, -155, 447, 119, -155,
	119, 447, 119, 119, 443, 447, -338, -367, -138, 413,
	148, 82, 442, -368, -175, 2, -191, 2, 360, 200,
	-367, -367, -361, 26, 336, 2, 73, -191, -416, 145,
	-413, 307, -412, -191, -191, -191, -191, -191, 145, 2,
	377, 2, 377, 2, -166, -166, 216, -191, 145, 360,
	176, 360, -155, 447, -171, -445, -252, -361, -445, -275,
	-274, -277, -297, 26, -280, 139, 235, -297, -299, -142,
	-142, -142, -227, -323, -297, 277, 176, -353, -339, -339,
	-189, -362, 371, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, 217, 169,
	338, 40, 170, -297, 375, -297, -297, -297, -297, 231,
	239, 242, 382, 130, 391, 108, 245, -449, 356, 36,
	-303, -143, -243, 442, -317, 31, 343, 26, -310, 442,
	2, -292, -297, -293, -240, -239, -239, 443, 406, 26,
	108, 435, 2, 8, -268, -270, 418, 230, 98, 161,
	229, -269, 321, 443, 447, 34, 443, -297, -240, -309,
	-305, -239, -316, -315, 410, -362, 435, -399, 138, 155,
	8, -358, 371, 371, 371, 371, 442, 443, 2, 443,
	2, 443, 2, 443, 2, 443, 2, -297, -297, -297,
	-297, -297, -297, -297, -239, -262, 2, -354, -239, 4,
	418, 230, 98, 161, 229, 321, -262, 2, -263, 2,
	-297, -239, -264, -298, -299, 433, 434, 428, -310, -265,
	2, -297, -240, -297, 47, 211, 376, -266, -297, 148,
	-239, -239, 2, -239, 2, -397, 34, -239, -232, 447,
	148, 34, 4, -232, -232, 442, 443, 447, 199, 199,
	-325, -261, 199, -259, 259, -259, -259, -410, 442, 441,
	-321, -176, 440, 449, -362, -320, -319, 34, -184, 257,
	-321, -321, 444, 443, -320, -191, 442, -239, -362, 349,
	443, 444, 194, 194, 443, -138, 375, 413, -75, 443,
	447, -231, 33, 440, -270, 442, -355, 408, 442, 442,
	148, -230, -423, 443, 378, -287, -207, 285, 342, 297,
	329, 9, 8, 8, 447, -362, 447, 375, -424, 76,
	65, -289, 166, 65, -376, -178, 76, -377, -166, 60,
	390, 277, 147, -424, 76, -424, 76, 76, 334, 347,
	48, -329, 37, -90, 212, 148, 419, 360, 375, -329,
	-257, -339, 93, 227, 228, 48, -357, -356, 434, -357,
	48, -357, -357, -357, 413, -192, -329, 375, 268, -367,
	375, 447, 37, -90, 212, 148, 375, -204, -176, -335,
	-334, 422, -198, -166, 444, -297, -90, -297, -90, 119,
	2, -439, 207, 442, -223, 239, -256, -255, 239, -194,
	2, -191, -229, -336, 192, 447, -237, 268, 119, 119,
	442, 116, 283, 2, 251, 239, -177, 166, -158, 363,
	119, -291, 411, -281, -90, 442, 101, 34, -281, -247,
	-248, -333, -249, -178, 442, -184, -166, 2, -191, -238,
	-238, -238, -204, -205, -175, -367, -368, -368, -75, -337,
	443, 443, -137, 254, -136, -166, 5, -140, 398, -210,
	-290, -289, -378, -379, -376, 217, 176, 390, 193, 131,
	-138, -334, -335, -335, -191, 145, -229, -229, 331, 145,
	145, 444, 283, 95, 360, 267, 176, -191, -204, -191,
	-329, -445, -278, -356, 442, -279, 311, 312, 447, -150,
	35, 106, 204, -191, 419, 117, -297, -297, 375, -449,
	356, -303, 117, -297, 231, 242, 382, 130, 391, 108,
	245, 148, 442, -298, -298, 443, -241, -297, -297, 441,
	451, 443, -446, 447, -225, -297, -239, -239, 443, 443,
	375, 375, 375, 375, 442, 444, -239, -229, 441, 441,
	447, 443, -314, -315, 113, -297, 444, -404, 260, 442,
	442, 443, 443, 447, 419, 419, 419, 419, -297, 34,
	447, 447, 447, 443, 447, 447, 447, 443, 443, 148,
	443, 443, -271, 271, 443, 11, 12, 433, 434, 435,
	436, 143, 437, 438, 431, 432, 430, 423, 424, 425,
	71, 224, 313, 14, 15, 16, 194, 170, -298, -298,
	-298, 443, -301, -302, 148, 145, 34, -266, -266, -266,
	443, 148, -239, 443, 443, 442, 443, -291, -332, -234,
	2, -325, -186, -362, -291, -291, -239, -297, -325, -325,
	-260, 398, 251, 199, -325, -319, 443, -411, -358, -321,
	-320, -358, -296, -295, 146, 237, -184, -223, -320, -320,
	-362, -321, 443, -235, -327, -392, -446, 444, -362, -129,
	5, 242, -129, 148, -229, 24, -339, 440, 441, 8,
	8, 442, -358, -358, -229, 148, -359, -286, 388, 69,
	285, -359, -151, -191, -178, -185, -166, 239, -289, 166,
	-157, 239, -339, -185, 442, 442, 204, 204, -178, -185,
	166, -178, 166, -185, -185, -418, 285, 246, -297, 219,
	283, 240, -152, 296, -90, -90, 442, -423, 398, 107,
	-191, -194, 296, -200, -357, -357, -255, 296, -192, -367,
	413, -175, -153, -90, -90, 442, -176, -154, 296, -135,
	165, 245, 435, -166, 407, -166, -209, -210, -166, -433,
	415, 413, 119, 119, -223, 148, -138, -367, -191, -367,
	-367, -367, 2, 442, 2, -191, 119, 251, 239, -159,
	114, -444, 425, -175, -226, -225, -297, -254, -284, 304,
	251, -224, -179, -178, 403, -184, -254, -233, 447, 148,
	425, 444, -224, 2, -155, -155, -155, -155, -155, -75,
	-138, 447, 442, 425, 425, 442, -367, -367, 443, 447,
	-191, -177, 176, 176, -183, -167, -138, -43, 413, 360,
	331, 331, -166, -187, -175, -191, -188, -204, -279, -297,
	-323, -191, 448, -297, -297, 117, 117, -297, -298, -298,
	-297, 117, 148, 442, -297, -307, 30, 30, 443, 447,
	-293, -297, 443, 406, -446, -446, -446, 5, 230, 161,
	229, -269, 229, -269, -269, 8, 435, -362, 443, -305,
	115, -297, 370, -362, 435, -405, -181, 442, -166, 411,
	-225, -358, 443, -353, -339, -297, -297, -297, -297, -297,
	-297, -301, -297, -353, -339, -298, -298, -298, -298, -298,
	-298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
	-298, -298, -298, -298, 108, 239, 245, -298, -302, -301,
	-297, -297, -339, 443, 443, 443, -239, -75, -251, 155,
	-335, 447, -251, -251, 443, -260, 442, -297, -325, 441,
	443, 447, -320, 441, 447, 450, 425, -223, 444, -319,
	443, 447, -283, 34, 443, -362, -90, 253, 8, 441,
	443, -358, 443, 443, -229, 375, 375, 119, 239, 400,
	-380, -377, -297, -228, -324, -297, 442, 442, -149, 112,
	334, -425, 2, 119, -155, 119, -155, 417, 442, 442,
	375, -424, 76, -239, -297, -139, 101, -361, -421, 375,
	375, 268, -239, 375, -138, 148, 358, 2, 2, 2,
	443, 34, 249, -166, -191, -192, 34, -191, -162, 2,
	-273, 398, -176, -191, 119, -160, 210, -444, -365, -393,
	-276, -274, -254, -246, 240, 75, 443, 447, 444, -291,
	-248, -234, -297, 2, 443, -136, -137, -367, -367, -367,
	-138, -140, -140, -290, 2, 442, -177, -167, 442, 254,
	-191, -215, -214, 267, 245, 252, 443, -150, -176, -297,
	-297, 117, 30, 30, -297, -297, -307, 443, -297, -297,
	-239, 441, 5, -297, 443, 443, 443, 443, -297, 444,
	-406, -166, -297, 443, 443, 443, 443, 447, 447, 443,
	443, 443, 443, -302, 148, 108, 245, 442, 443, 443,
	-304, 158, 48, -325, -304, -304, -229, -294, -358, -295,
	-176, 440, -362, -327, 442, 444, 441, 443, -178, -185,
	-289, 119, -381, 76, -382, 63, 131, 82, 239, 242,
	390, 277, 60, 101, 289, 34, 443, 443, 447, -150,
	-228, -229, 239, 353, 101, 239, 101, 94, 385, -178,
	-185, -229, -229, -191, -178, -185, 443, 447, 425, -194,
	-192, -367, 443, -176, -368, 371, -211, 179, -90, 2,
	442, -223, -256, -90, 442, -166, 251, 442, -176, -161,
	209, -444, -365, -158, -254, -282, 442, 251, -90, -179,
	2, -226, 425, 443, 443, 94, 94, -228, 442, 442,
	-229, -44, -45, 176, 76, 270, -188, 360, -150, -297,
	-297, -297, 443, -446, -362, 435, -400, 267, 443, -297,
	-297, -298, 148, 442, -307, -401, 412, -297, -239, -401,
	-401, 443, -321, -358, 2, -289, -185, -189, -182, -166,
	131, 166, 242, 204, 442, -298, -191, 442, 2, -435,
	103, 180, -288, -436, 81, 354, -324, 443, 443, 242,
	242, -297, -339, -155, -155, 443, 443, 375, 375, 375,
	-361, -359, 375, -297, -212, -213, 170, -434, 413, -209,
	-433, -228, -191, -228, 251, -444, -365, -159, 109, -229,
	76, -276, -303, -138, 442, 442, 443, -228, -228, 443,
	447, 26, 442, 26, 442, -191, 443, -226, 48, 443,
	443, -298, -307, 443, -402, -403, -181, -320, 441, -382,
	-182, 239, -297, -168, 442, -297, 180, 104, 162, -211,
	442, 289, -174, 63, 442, 442, -178, -185, 442, 425,
	442, -433, 265, 94, 236, 443, 34, 443, -273, 443,
	-191, -365, -160, 393, 240, 443, -185, -254, -368, -368,
	-288, 443, 443, -45, -229, -229, -407, 283, 312, 157,
	-239, 443, 447, 34, 119, 443, -383, 225, -166, 443,
	104, 162, -212, -229, -191, -422, 398, -189, -217, -216,
	-214, -219, -218, -214, -239, -359, -239, -191, 94, -211,
	-90, -288, 442, -288, 442, -161, 334, -291, 443, 443,
	-211, -288, 443, 443, 443, -408, -409, 40, 387, 85,
	-297, -408, -408, -403, -405, 131, -384, -387, -386, 251,
	149, 266, 339, 443, 353, 409, -435, 443, -223, -297,
	443, 447, 403, 443, 447, 403, 443, 443, 442, -212,
	-434, -211, -228, -211, -228, -247, -138, -138, -212, -211,
	-409, 274, 144, 311, 274, 144, -182, -386, 251, -387,
	251, 393, 105, -383, -216, 170, -218, 148, -229, -433,
	-212, 443, -212, 443, -291, -212, 30, -385, 236, 302,
	53, 334, -385, -384, 442, 442, 443, -440, 411, -288,
	-440, -288, -409, 22, 242, 101, -435, -239, -239, -156,
	53, 302, 2, -211, -211, 443, 443, -212, -212, -212,
	375, -440, -440, 442, -239, 443, -212,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 27, 331,
	332, 334, 335, 336, 338, 339, 341, 343, 345, 347,
	348, 350, 352, 353, 354, 355, 356, 358, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	404, 406, 0, 829, 831, 833, 835, 29, 30, 0,
	0, 169, 171, 173, 0, 197, 199, 201, 202, 204,
	-2, 0, 285, 286, 288, 290, -2, -2, 0, 0,
	393, 395, 0, 0, 415, 416, 0, 917, -2, 409,
	411, 413, 476, 478, 480, 482, 484, 486, 488, 489,
	491, 493, 495, 497, 499, 501, 503, 505, 507, 509,
	511, 513, 515, 517, 519, 521, -2, -2, -2, 0,
	-2, -2, -2, 847, 33, 35, 37, 39, 41, 43,
	61, 253, 254, 256, 258, 260, 263, 264, 266, 956,
	292, 294, 296, 298, 300, 0, -2, 970, 0, 0,
	45, 46, 47, 48, 49, 50, 51, 68, 69, 70,
	71, 72, 73, 74, 54, 56, 57, 63, 64, 66,
	0, 0, 932, 934, 936, 938, -2, 0, 0, -2,
	9, 11, 13, 15, 17, 19, 21, 23, 25, 333,
	337, 340, 342, 344, 346, 349, 351, 357, 359, 361,
	720, 1547, 1560, 1561, 1562, 1565, 1566, 1567, 1568, 1569,
	1570, 1891, 1971, 1972, 1589, 1590, 1591, 1592, 1593, 1594,
	1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
	1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664,
	1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674,
	1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684,
	1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
	1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704,
	1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 0,
	371, 369, 1541, 372, 1728, 374, 376, 279, 280, 281,
	282, 283, 284, 0, 152, 0, 386, 380, 385, 387,
	389, 390, 391, 392, 367, 365, 0, 386, 1592, 384,
	827, 828, 822, 823, 1761, 857, 405, -2, -2, -2,
	1861, -2, 437, -2, 444, 1864, 1763, 447, 0, 449,
	-2, 452, 830, 832, 834, 31, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, -2, -2, -2,
	-2, 0, 0, 1626, 1518, 1562, 1521, 1516, 170, 172,
	174, 175, 0, 0, 0, 0, 0, 0, 198, 200,
	203, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	776, 0, 0, 0, 0, 0, 0, 0, 0, 643,
	644, 0, 0, 649, 771, 772, 793, 0, 0, 0,
	0, 287, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 231,
	325, 326, 0, 957, 0, 0, 0, 150, 143, 0,
	0, 632, 394, 396, 0, 142, 0, 0, 826, 0,
	410, 412, 414, 477, 479, 481, 483, 485, 487, 490,
	492, 494, 496, 498, 500, 502, 504, 506, 508, 510,
	512, 514, 516, 518, 520, 522, 523, 0, 0, 0,
	0, 0, 527, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, -2, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 0, 526, 528, 529, 530,
	0, 575, 614, 615, 0, 762, 958, 859, 837, 850,
	859, 839, 840, 841, 842, 843, 848, 849, 852, 0,
	844, 845, 846, 34, 36, 38, 40, 42, 44, 255,
	257, 259, 261, 265, 267, -2, 930, 931, 293, 295,
	297, 299, 301, 397, 0, 399, 0, 527, 921, 0,
	-2, 0, 962, 962, 962, 0, 0, 931, 929, 0,
	402, 403, 456, 457, 1181, 0, 0, 0, 0, 0,
	1416, 1265, 0, 458, -2, 1296, 1298, 1840, 1861, 1415,
	1300, 1301, 1302, 1303, 1304, 0, 0, 1307, 0, 1309,
	1310, 1311, 1312, 0, 1314, 0, 1318, 1319, 1320, 0,
	1845, 1495, 1558, -2, 1089, 1090, 1091, 1092, 1093, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1554, 0, 1387,
	1334, -2, 1579, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1635, -2, -2, -2, -2,
	-2, -2, -2, 1145, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1874, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 0, 1829, 1846, 1847, 1852, 1854, 1848,
	1837, 1357, -2, 1875, 1876, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1146, -2,
	1841, 1842, 1857, 1858, 1863, 1867, 1868, 1844, 1853, -2,
	-2, 948, 1736, 951, 720, 949, 933, 935, 0, 937,
	0, 0, 0, 942, 965, 963, 0, 1001, 946, 947,
	957, 1016, 1039, 0, 1021, 0, 1039, 1061, 0, 1026,
	1756, 1335, 1336, 0, 1562, 1559, -2, 2, 0, 0,
	0, 0, 0, 194, 368, 0, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 407, 408,
	0, 432, 0, 436, 1836, -2, -2, 440, 860, 864,
	865, 866, 0, 0, 0, 0, 446, 0, 0, 433,
	434, 450, 453, 0, 52, 0, 1846, 1061, 53, 0,
	1531, 1584, 1585, 1586, 1587, 1588, 1874, 1890, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943,
	1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 55, 0, 1846,
	58, 0, 1846, 0, -2, 62, 0, 1846, 153, 154,
	1575, 1576, 1580, 1581, 1582, 1583, 65, 0, 1537, 67,
	0, 1534, 75, 0, 1846, 1515, 0, 0, 624, 1512,
	1517, 625, 1522, 0, 176, 177, 178, 179, 180, 1846,
	182, 183, 0, 185, 186, 1846, 188, 189, 0, 191,
	206, 207, 0, 209, 0, 1846, 0, 0, 0, 215,
	-2, 232, 0, 229, 0, 219, 220, 222, 223, 224,
	225, 226, 0, 0, 0, 777, 0, 269, 1542, 0,
	-2, 1846, 765, 768, 1846, 770, 782, 1545, 0, -2,
	0, 955, 1846, 873, 645, 646, 647, 648, 0, 278,
	0, 886, 0, 888, 0, 907, 1067, 1016, 233, 234,
	235, 236, 237, 1846, 0, 0, 0, 242, 0, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 135, 1846,
	304, 323, 135, 1846, 307, 135, 1846, 310, 135, 1846,
	313, 1510, 135, 1846, 316, 317, 1846, 319, 155, 320,
	1846, 322, 0, -2, 362, 1548, -2, 328, 0, -2,
	0, 167, 0, 630, 631, 0, 824, 825, 417, 0,
	0, 524, 525, 0, 0, 535, 536, 537, 538, 1734,
	1650, 541, 0, 544, 565, 579, 0, 0, 0, 548,
	550, 629, 552, 0, 0, 554, 0, 556, 0, 558,
	0, 560, 0, 562, 564, 566, 580, 568, 0, 0,
	0, 578, 0, 584, 0, 587, 588, 589, 0, 591,
	592, 593, 594, 0, 596, 597, -2, -2, 601, 603,
	0, 609, 0, 613, 0, 531, 532, 135, 1065, 836,
	-2, 838, 0, 854, 924, -2, 0, 398, 0, 401,
	928, 922, 927, 979, 980, 0, 0, 0, 0, 960,
	961, 0, 0, 0, 919, 920, 0, 0, 0, 0,
	1421, 1422, 1423, 1424, 1425, 1426, 1429, 1430, 1427, 1428,
	1431, 1432, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	1435, 1436, 0, 0, 1438, 0, 1440, 0, 0, 0,
	0, 0, 0, 1244, 1246, 1503, 0, 0, 1437, 1186,
	1187, 1188, 1223, 1224, 0, 0, 1297, 1500, 1499, 1299,
	0, 1452, 0, 1306, 0, 1178, 1313, 1528, -2, 0,
	1416, 1447, 0, 0, 1321, 1322, 1323, 0, 0, 1452,
	0, 0, 1494, 0, 1389, 0, 1125, 0, 1126, 1127,
	0, 1128, 1129, 1142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1147, 0, 0, 0, 1475, -2, 0, 0,
	0, 0, 0, 950, 0, 0, 1005, 1504, 1508, 1509,
	1005, 1005, 0, 0, 1453, 0, 0, 0, 0, 1058,
	1058, 1058, 1056, 1033, 0, 1039, 0, 1049, 0, 1039,
	1039, 0, -2, 1021, 0, 0, 1049, 1062, 1063, 0,
	0, 0, 0, 0, 0, 1563, 0, 0, 1550, 0,
	167, 0, 378, 388, 957, 0, 1455, 1080, 1076, 1083,
	1084, 1085, 1086, 1132, 1133, 1134, 1135, 1136, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 1107, 1108, 1109, 1110, -2, 1143, 1145, 1163, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1138, 0, 1113, 1113, 1113, 1130, 1131, 1154, 1155, 1157,
	1159, 1161, 1081, 1082, 1148, 1149, 1150, 1151, 0, 382,
	0, 0, 0, 0, -2, 442, 0, 862, 0, 867,
	467, 468, 469, 869, 870, 445, 470, 471, 472, 473,
	474, 475, 0, 737, 0, 739, 1524, 0, 443, 460,
	448, 0, 454, 76, 819, 103, 0, 819, 819, 0,
	0, 122, 0, 0, 0, 0, 0, 94, 99, 82,
	83, 0, 0, 0, 0, 59, 745, 0, 748, 0,
	0, 0, 0, 0, 0, 0, 760, 0, 0, 0,
	0, 93, 0, 88, 78, 0, 0, 96, 101, 0,
	126, 128, 0, 0, 1052, 623, 0, 0, 1563, 1520,
	0, 0, 0, 0, 208, 210, 0, 212, 213, 214,
	0, 776, 0, 221, 218, 262, 720, 1846, 744, 1846,
	742, 1546, 0, 0, 276, 271, 0, 273, 763, 0,
	954, 0, 0, 0, 0, 783, 0, 1846, 788, 1533,
	1571, 1572, 875, 0, 1072, 0, 889, 0, 0, 1068,
	0, 1070, 0, 239, 240, 241, 0, 302, 0, 133,
	134, 0, 305, 0, 308, 0, 311, 0, 0, 314,
	0, 0, 0, 0, 957, 0, 0, 0, 145, 0,
	0, 0, 0, 167, 1052, 419, 1052, 421, 0, 0,
	539, 540, 542, 543, 545, 546, 610, 547, 551, 0,
	617, 1752, 627, 553, 555, 557, 559, 561, 0, 570,
	0, 572, 0, 574, 582, 585, 590, 595, 0, 0,
	0, 0, 761, 0, 853, 925, 927, 400, 923, 977,
	978, 983, 987, 988, 991, 994, 995, 985, 1181, 943,
	944, 945, 971, 972, 802, 0, 1971, 1182, 1077, 1183,
	1184, 1530, 0, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, 1198, -2, -2, -2, -2, -2, -2, -2,
	-2, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, -2, -2, -2, 1221, 1222, -2, 1439, 1441,
	0, 1503, 0, -2, 0, -2, -2, -2, -2, 1241,
	0, 1243, 1248, 1250, 1252, 0, 0, 0, 0, 1502,
	1262, 1486, 1487, 0, 0, 1418, 1419, 1420, 1247, 0,
	1266, 1501, 1498, 0, 0, 1451, 968, 1325, 0, 0,
	0, 0, 1332, 0, 1529, 1177, 1164, 1165, 1166, 1167,
	1168, 1169, 1179, 1317, 1449, 0, 1448, 0, 0, 0,
	1459, 0, 1493, 1489, 0, 1551, 1557, 1397, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1358, 1359, 1360,
	1361, 1362, 1363, 1364, 1365, 1366, 1367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1369, 0, 1462, -2,
	-2, -2, -2, -2, -2, -2, 0, 1371, 0, 1373,
	1453, 1472, 0, 0, 1267, 0, 0, 0, 1416, 0,
	1376, 1453, 1480, 0, 0, 0, 0, 0, 1453, 0,
	1485, 0, 1383, 0, 1385, 952, 0, 0, 1072, 0,
	0, 0, 1507, 1072, 1072, 0, 1000, 0, 0, 0,
	0, 0, 0, 1053, 1057, 1054, 1055, 0, 0, 1039,
	1049, 1013, 0, 0, 1532, 1019, 1048, 0, 720, 1038,
	1049, 1049, 0, -2, 1023, 0, 0, 968, -2, 168,
	719, 0, 0, 0, 370, 0, 0, 0, 364, 366,
	0, 1073, 1075, 0, 1087, 0, 0, -2, 0, 0,
	0, 0, 0, 435, 0, 861, 868, 0, 464, 0,
	466, 738, 1526, 1525, 0, 455, 0, 0, 0, 0,
	818, 105, 1846, 0, 137, 0, 0, 704, 1538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	746, 747, 749, 755, 757, 0, 751, 1527, 0, 752,
	0, 754, 756, 758, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 1514, 158,
	1051, 0, 1513, 1523, 0, 181, 184, 187, 190, 0,
	216, 0, 0, 652, 635, 0, 740, 743, 0, 720,
	775, 1544, 0, 167, 0, 0, 272, 0, 0, 0,
	0, 0, 0, 781, 0, 0, 0, 1846, 877, 883,
	0, 970, 0, 905, 891, 0, 0, 0, 905, 909,
	910, 912, 913, 0, 0, 1069, 0, 243, 324, 135,
	135, 135, 1511, 135, 135, 156, 318, 321, 327, 363,
	957, 167, 165, 1716, 163, 160, 162, 0, 0, 0,
	653, 655, 656, 657, 658, 0, 1572, 0, 1678, 1572,
	140, 167, 418, 423, 533, 0, 628, 626, 569, 0,
	0, 0, 0, 0, 0, 0, 0, 611, 612, 616,
	1066, 926, 0, 989, 0, 986, 992, 993, 0, 974,
	800, 801, 0, 0, 0, 0, -2, -2, 0, 0,
	0, 1263, 0, -2, 1242, 1245, 1249, 1251, 1253, 0,
	0, 0, 0, 0, 0, 1442, 0, 1444, 1264, 1496,
	1499, 1414, 0, 0, 967, 968, 968, 968, 1331, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 1457, 1458,
	0, 1324, 0, 1490, 0, 0, 0, 1333, 0, 0,
	0, 1137, 1111, 0, 1156, 1158, 1160, 1162, 0, 0,
	0, 0, 0, 1352, 0, 0, 0, 1356, 1368, 0,
	1370, 1372, 0, 0, 1374, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1270, 1271,
	1272, 1375, 1478, 1479, 0, 0, 0, 0, 0, 0,
	1381, 0, 1484, 1382, 1384, 957, 1002, 997, 1505, 1052,
	1004, 1006, 1506, 1535, 997, 997, 0, 1454, 1041, 0,
	1043, 0, 0, 0, 1045, 0, 1034, 0, 1036, 1049,
	1018, 0, 0, 1011, 0, 1010, 720, 1047, 1020, 1024,
	1551, 0, 1064, 0, 1028, 1031, 0, 0, 1564, 192,
	195, 196, 193, 0, 377, 0, 1456, 0, 1078, 0,
	0, 0, 0, 0, 381, 0, 431, -2, 462, 463,
	465, 461, 104, 806, 0, 0, 1536, 0, 107, 1846,
	116, 0, 681, 0, 0, 0, 0, 0, 821, 0,
	1846, 135, 1846, 135, 118, 121, 0, 125, 123, 0,
	0, 672, 77, 819, 80, 86, 0, 0, 0, 92,
	0, 812, 0, 750, 753, 759, 60, 0, 814, 804,
	0, 803, 127, 81, 87, 0, 816, 79, 0, 167,
	0, 0, 1519, 0, 0, 0, 0, 651, -2, 0,
	0, 0, 0, 0, 0, 0, 270, 275, 274, 766,
	-2, 769, 778, 0, 780, 792, 0, 0, 0, 879,
	883, 0, 882, 955, 982, 969, 1071, 884, 905, 0,
	0, 0, 894, 896, 893, 890, 887, 1072, 0, 0,
	0, 0, 0, 238, 303, 306, 309, 312, 315, 329,
	144, 0, 0, 0, 0, 0, 167, 0, 0, 0,
	0, 0, 1572, 1572, 0, 1540, 141, 420, 0, 0,
	571, 573, 581, 604, 605, 667, 0, 608, 0, 0,
	973, 802, 0, 1185, 1226, 0, 0, -2, 0, 0,
	1230, 0, 0, 0, -2, 0, 0, 0, 1443, 1445,
	0, 1498, 1326, 0, 0, 0, 0, 1308, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 0, 1315, 1316, 1417, 1460,
	1488, 1492, 0, 1552, 1556, 1395, 1396, 1400, 1543, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	1461, 1471, 1473, 1268, 1269, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, -2, -2, -2, 1286, 1287,
	1288, -2, -2, -2, 0, 0, 0, 1474, 1476, 1477,
	1481, 1482, 0, 1378, 1379, 1380, 1483, 0, 999, 0,
	1003, 0, 999, 999, 964, 1042, 0, 1060, 1044, 1016,
	1035, 0, 1025, 1014, 0, 1015, 0, 1046, 0, 1022,
	1027, 0, 1030, 0, 1326, -2, 151, 379, 0, 1079,
	1088, 0, 1140, 1144, 383, 0, 0, 0, 0, 136,
	679, 703, 0, 0, 795, 802, 0, 0, 109, 0,
	0, 0, 117, 0, 114, 0, 120, 124, 0, 0,
	0, 0, 0, 0, 89, 90, 91, 0, 95, 0,
	0, 0, 0, 0, 138, 0, 0, 211, 774, 217,
	661, 0, 636, 0, 720, 744, 0, 268, 764, 779,
	0, 0, 0, 0, 0, 881, 883, 0, 874, 875,
	905, 981, 885, 903, -2, 902, 0, 0, 0, 970,
	911, 908, 914, 915, 0, 164, 0, 159, 161, 0,
	147, 0, 0, 654, 659, 0, 0, 0, 0, 0,
	534, 606, 666, 0, 0, 984, 990, 975, 802, 1228,
	1232, 0, 0, 0, 1234, -2, 0, 1256, -2, -2,
	1446, 1497, 1305, 968, 1327, 1329, 1330, 1180, 1491, 0,
	1402, 1399, 0, 1386, 1112, 1347, 1348, 0, 0, 1351,
	1353, 1354, 1355, 1470, 0, 0, 0, 0, 1377, 953,
	1391, 0, 0, 1007, 1391, 1391, 0, 1039, 1037, 1012,
	1008, 0, 1552, 1029, 0, 0, 1074, 1139, 808, 810,
	106, 0, 680, 0, 683, 0, 0, 0, 0, 690,
	691, 0, 0, 0, 0, 0, 709, 718, 0, 797,
	0, 0, 0, 111, 130, 0, 0, 820, 0, 135,
	135, 0, 0, 807, 0, 0, 0, 0, 0, 813,
	815, 805, 0, 817, 157, 0, 669, 0, 640, 637,
	652, 635, 741, 773, 0, 791, 0, 0, 0, 871,
	883, 0, 876, 877, 277, 0, 0, 0, 892, 895,
	897, 982, 0, 166, 167, 0, 0, 0, 0, 0,
	0, 422, 424, 0, 0, 430, 665, 0, 976, 1236,
	-2, -2, 1257, 0, 1553, 1555, 970, 0, 1388, 0,
	0, -2, 0, 0, 0, 939, 0, 998, 996, 940,
	941, 1059, 1049, 0, 1032, 108, 0, 684, 685, 1539,
	687, 0, 689, 692, 0, 694, 1574, 0, 698, 705,
	710, 0, 661, 0, 715, 716, 796, 707, 0, 110,
	112, 129, 799, 113, 119, 0, 0, 0, 0, 0,
	0, 97, 0, 1050, 635, 668, 0, 638, 0, 0,
	0, 0, 792, 0, 0, 0, 878, 879, 0, 0,
	0, 905, 916, 146, 0, 0, 718, 0, 0, 702,
	0, 426, 0, 428, 0, 607, 1328, 1406, 0, 1349,
	1350, -2, 0, 1294, 1390, 1392, 0, 1017, 1009, 682,
	686, 0, 0, 724, 0, 0, 0, 713, 714, 669,
	0, 0, 132, 0, 0, 0, 809, 811, 0, 0,
	0, 633, 0, 641, 0, 661, 0, 718, 0, 718,
	0, 880, 881, 0, 899, 1072, 901, 906, 0, 0,
	661, 718, 701, 425, 0, 0, 0, 0, 0, 0,
	1401, 1295, 0, 0, 0, 693, 729, 0, 0, 0,
	711, 712, 709, 0, 720, 115, 0, 798, 0, 673,
	0, 0, 676, 0, 0, 98, 0, 0, 642, 669,
	640, 661, 0, 661, 0, 872, 0, 900, 167, 167,
	669, 661, 427, 429, 1398, 1403, 1407, -2, 1810, 1623,
	0, 1404, 1405, 1393, 1394, 0, 695, 725, 726, 0,
	721, 722, 723, 1573, 696, 697, 706, 717, 724, 131,
	670, 0, 0, 671, 0, 0, 100, 102, 0, 635,
	639, 669, 0, 669, 0, 1072, 148, 149, 699, 669,
	0, 1409, 1410, 1411, 1412, 1413, 688, 727, 0, 728,
	0, 0, 0, 729, 674, 0, 677, 0, 0, 634,
	789, 718, 789, 718, 898, 700, 0, 730, 0, 733,
	734, 0, 731, 709, 0, 0, 664, 784, 0, 661,
	786, 661, 1408, 732, 735, 736, 708, 0, 0, 660,
	662, 663, 790, 669, 669, 669, 0, 789, 789, 675,
	0, 785, 787, 0, 0, 669, 678,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 431, 3, 437, 432, 3,
	442, 443, 435, 433, 447, 434, 444, 436, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 451, 446,
	423, 425, 424, 427, 448, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 440, 3, 441, 438, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 449, 430, 450, 428,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 426, 57766, 429, 57767, 439, 57768, 445, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1029
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1035
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1044
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "GRANT")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1069
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1078
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1082
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1137
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1138
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1149
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1164
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1168
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1177
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1193
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1205
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1223
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1246
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1250
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1259
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1270
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1274
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1280
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1291
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1301
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1313
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1320
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1332
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1339
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1347
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1352
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1356
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1361
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1367
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1375
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1388
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1404
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1414
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1424
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1433
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1444
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1448
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1454
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1458
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1470
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1475
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1480
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1485
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1490
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1495
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1499
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1511
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1523
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1533
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1540
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1543
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1550
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1559
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1568
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1573
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1580
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1588
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1589
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1593
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1597
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1603
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1611
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1615
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1621
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1625
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1632
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1636
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1640
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1646
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1650
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1679
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1706
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1709
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1713
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1750
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1755
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1759
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1769
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1778
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1787
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1795
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1811
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1814
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1818
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1822
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1828
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1832
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1838
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1842
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1848
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1852
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1856
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1860
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1866
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1876
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1880
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1884
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1890
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1907
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1908
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1909
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1920
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1928
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1930
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1933
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1943
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1952
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1960
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1962
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1966
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1969
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1979
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1988
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1996
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1998
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2002
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2005
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2009
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "table")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2013
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "column")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2017
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2022
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2023
		{
			sqlVAL.str = ""
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2032
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2033
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2035
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2036
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2037
		{
			return helpWith(sqllex, "CREATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2040
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2041
		{
			return unimplemented(sqllex, "create cast")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2042
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2043
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2044
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2045
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2046
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2047
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2048
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2049
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2050
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2051
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2052
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2053
		{
			return unimplemented(sqllex, "create operator")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2054
		{
			return unimplemented(sqllex, "create publication")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "create rule")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2056
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2057
		{
			return unimplemented(sqllex, "create server")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2058
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2059
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2060
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2063
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2064
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2067
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2068
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2071
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2072
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2075
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2076
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2077
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2078
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2079
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2080
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2081
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2082
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2083
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2084
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2085
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2086
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2087
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2088
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2089
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2090
		{
			return unimplemented(sqllex, "drop server")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2092
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2093
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2094
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2098
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2099
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2100
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2101
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2103
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2104
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2105
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2106
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2116
		{

			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       name,
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2129
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2133
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2143
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2147
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2153
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2157
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2164
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2168
		{

			sqlVAL.union.val = nil
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:2182
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2192
		{
			return helpWith(sqllex, "DELETE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2199
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2202
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2203
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2204
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2205
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2206
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2215
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2216
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2217
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2218
		{
			return helpWith(sqllex, "DROP")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2221
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2222
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2223
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2224
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2225
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2233
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2237
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2240
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2248
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2252
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2255
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2263
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2267
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2270
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2278
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2286
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2293
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2301
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2309
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2316
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2324
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2328
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2331
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2339
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2343
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2346
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2350
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2359
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2386
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2389
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2391
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2395
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2399
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2406
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2410
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2413
		{
			return helpWith(sqllex, "DELETE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2415
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2416
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2417
		{
			return helpWith(sqllex, "INSERT")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2418
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2420
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2421
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2424
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2429
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2430
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2431
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2435
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2449
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2456
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2460
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2464
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2474
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2480
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2484
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2488
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2498
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2502
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2510
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2513
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2533
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2537
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2541
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2544
		{
			return helpWith(sqllex, "GRANT")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2564
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2568
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2575
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2580
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2584
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2595
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2613
		{
			return helpWith(sqllex, "RESET")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2614
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2622
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2626
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2629
		{
			return helpWith(sqllex, "RESET")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2637
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2640
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2651
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2654
		{
			return helpWith(sqllex, "USE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2658
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2659
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2660
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2661
		{
			return unimplemented(sqllex, "set local")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2665
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2666
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2667
		{
			return helpWith(sqllex, "USE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2683
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2698
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2701
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2719
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2732
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2736
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2740
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2746
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2756
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2760
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2764
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2768
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2772
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2783
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2786
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2796
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2812
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2816
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2821
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2838
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2841
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2843
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2846
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2850
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2869
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2876
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2882
		{
			return unimplemented(sqllex, "set from current")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2883
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2891
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2896
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2903
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2907
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2913
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2924
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2945
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2955
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2959
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2963
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2967
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2971
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2977
		{
			sqlVAL.union.val = tree.Low
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2981
		{
			sqlVAL.union.val = tree.Normal
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2985
		{
			sqlVAL.union.val = tree.High
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2996
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3000
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3004
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3009
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3013
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3025
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3026
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3027
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3028
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3029
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3030
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3032
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3034
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3035
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3036
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3037
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3038
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3040
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3041
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3043
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3044
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3045
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3046
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3047
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3049
		{
			return helpWith(sqllex, "SHOW")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3056
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3057
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3058
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3069
		{
			sqlVAL.str = "client_encoding"
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3072
		{
			sqlVAL.str = "timezone"
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3073
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3087
		{

			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3097
		{

			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3106
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3117
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3126
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3134
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3141
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3149
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3156
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3166
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3170
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3173
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3175
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3178
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3186
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3194
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3202
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3205
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3218
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3226
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3234
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3244
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3252
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3254
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3262
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3270
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3278
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3280
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3288
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3296
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3299
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3301
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3305
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3315
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3318
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3327
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3330
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3332
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3337
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3344
		{
			sqlVAL.union.val = true
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3345
		{
			sqlVAL.union.val = false
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3353
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3358
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3362
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3372
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3381
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3390
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3393
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3400
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3404
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3407
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3414
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3418
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3426
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3431
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3436
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3440
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3448
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3457
		{

			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3466
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3479
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3482
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3490
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3493
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3497
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3501
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3505
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3516
		{
			name, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3528
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3534
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3538
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3549
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3558
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3561
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3569
		{

			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3581
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3586
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3706
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3710
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3714
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3753
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3757
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3762
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3766
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3775
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3782
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3786
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3798
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3807
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3810
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3846
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:3863
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3881
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3882
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3883
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3887
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:3903
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3920
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3921
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3922
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3936
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3937
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3938
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3939
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3940
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3941
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3942
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3943
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3948
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3954
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3964
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3970
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3973
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3977
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3990
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3997
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4002
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4007
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4013
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4020
		{
			sqlVAL.str = ""
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4027
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4033
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4040
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4047
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4053
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 675:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4063
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4073
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 678:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4083
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4094
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4105
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4109
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4115
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4119
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4123
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4127
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4131
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4135
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4139
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4157
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4161
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4165
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4169
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4173
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4177
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4181
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4194
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4198
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4202
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 699:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4209
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4219
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4231
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4241
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4253
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4258
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4264
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4270
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4281
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4291
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4306
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4307
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4308
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4309
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4310
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4311
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4328
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4332
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4338
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4342
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4347
		{
			return unimplemented(sqllex, "references match full")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4348
		{
			return unimplemented(sqllex, "references match partial")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4349
		{
			return unimplemented(sqllex, "references match simple")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4350
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4357
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4361
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4365
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4369
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4373
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4379
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4385
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4393
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4397
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4401
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4405
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4409
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4415
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4419
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4425
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4444
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4453
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4461
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4465
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4468
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4469
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4472
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4473
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4475
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4476
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4477
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4480
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4482
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4484
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4486
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4487
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4489
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4490
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4492
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4494
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4502
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4505
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4513
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4517
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4520
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4524
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4528
		{
			sqlVAL.union.val = nil
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4538
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4542
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4545
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4550
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4551
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4559
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4571
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4572
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4575
		{
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4576
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4582
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4584
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4586
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4588
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4590
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4592
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql-gen.y:4608
		{
			table, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
		//line sql-gen.y:4626
		{
			table, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql-gen.y:4645
		{
			table, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
		//line sql-gen.y:4663
		{
			table, err := tree.NormalizeTableName(sqlDollar[10].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4681
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4684
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4685
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4689
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4704
		{
			sqlVAL.union.val = false
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4710
		{
			sqlVAL.union.val = true
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4714
		{
			sqlVAL.union.val = false
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4720
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4724
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4733
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4744
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4745
		{
			sqlVAL.str = ""
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4749
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4753
		{
			sqlVAL.union.val = tree.Descending
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4757
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 803:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4763
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4770
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4774
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4780
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4794
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4808
		{
			table, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[6].str),
				NewName:  tree.Name(sqlDollar[8].str),
				IfExists: false,
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4822
		{
			table, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[8].str),
				NewName:  tree.Name(sqlDollar[10].str),
				IfExists: true,
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4836
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4838
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4842
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4856
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4872
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4886
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4902
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4906
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4911
		{
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4912
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4915
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4916
		{
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4924
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4927
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4937
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4946
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4949
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4957
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4960
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4964
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4965
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4966
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4982
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4985
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4987
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4990
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5000
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5003
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5005
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5008
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5012
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5017
		{
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5018
		{
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5019
		{
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5027
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5034
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5037
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5038
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5042
		{
			sqlVAL.str = ""
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5046
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5050
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5054
		{
			sqlVAL.str = ""
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5060
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5064
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5070
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5074
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5080
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5084
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5097
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5099
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5103
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5107
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5111
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5117
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5123
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5129
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5133
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 871:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5143
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:5153
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5163
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5167
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5171
		{
			sqlVAL.str = ""
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5177
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5181
		{
			sqlVAL.str = ""
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5187
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5191
		{
			sqlVAL.str = ""
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5197
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5201
		{
			sqlVAL.str = ""
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5206
		{
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5207
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5219
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:5226
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5233
		{
			return helpWith(sqllex, "INSERT")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5244
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5251
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5255
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &name
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5268
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5279
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5283
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5287
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5293
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5297
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5317
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5321
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5325
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5331
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5335
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5337
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5343
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5348
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5352
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 906:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:5369
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5380
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5384
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5385
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5389
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5406
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5409
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 916:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5413
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5456
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5462
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5466
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5481
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5485
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5489
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5493
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5497
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5501
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5506
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5507
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5512
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5547
		{
			return helpWith(sqllex, "SELECT")
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5548
		{
			return helpWith(sqllex, "VALUES")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5549
		{
			return helpWith(sqllex, "TABLE")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5571
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5584
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5598
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5610
		{
			return helpWith(sqllex, "SELECT")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5614
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5623
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5632
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5647
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5654
		{
			return helpWith(sqllex, "TABLE")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5666
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5670
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5674
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5678
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 953:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5688
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5696
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5697
		{
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5701
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5705
		{
			sqlVAL.union.val = nil
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5710
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5711
		{
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5715
		{
			sqlVAL.union.val = true
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5719
		{
			sqlVAL.union.val = false
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5723
		{
			sqlVAL.union.val = false
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5729
		{
			sqlVAL.union.val = true
		}
	case 964:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5735
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5740
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5741
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5744
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5745
		{
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5749
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5753
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5759
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5765
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5769
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5775
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5779
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5788
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5807
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5816
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5827
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5831
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5840
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5846
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5853
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5860
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5869
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5873
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5877
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5883
		{
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5884
		{
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5887
		{
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5888
		{
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5905
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5909
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5915
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5919
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5938
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5941
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5943
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5955
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5958
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5960
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5966
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5976
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5980
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5986
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5992
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5997
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6009
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6013
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6017
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6021
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6048
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6062
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6076
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6083
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6085
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6089
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6093
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6097
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6113
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6119
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6123
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6129
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6131
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6135
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6141
		{
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6143
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6146
		{
			sqlVAL.union.val = nil
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6147
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6148
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6152
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6162
		{
			sqlVAL.union.val = true
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6166
		{
			sqlVAL.union.val = false
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6186
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6190
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6194
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6198
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6202
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6206
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6212
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6216
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6223
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6229
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6236
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6242
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6246
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6250
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6254
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6260
		{
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6261
		{
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6272
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6276
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6281
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6282
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6283
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6284
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6288
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6297
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6315
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6319
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6325
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6333
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6347
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6351
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6363
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6377
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6386
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6395
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6401
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6408
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6410
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6419
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6430
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6431
		{
			return unimplemented(sqllex, "interval with precision")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6448
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6452
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6456
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6460
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6464
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6468
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6472
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6476
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6480
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6484
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6488
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6492
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6496
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6500
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6504
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6508
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6512
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6516
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6547
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6551
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6555
		{
			sqlVAL.union.val = nil
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6562
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6566
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6570
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6574
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6578
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6582
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6586
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6590
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6594
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6598
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6602
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6606
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6610
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6614
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6621
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6628
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6635
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6639
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6646
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6650
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6654
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6658
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6662
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6668
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6683
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6689
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6695
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6703
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6707
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6711
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6717
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6730
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6736
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6740
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6744
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6748
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6757
		{
			sqlVAL.union.val = true
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6758
		{
			sqlVAL.union.val = false
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6763
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6767
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6771
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6775
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6779
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6783
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6787
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6791
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6795
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6800
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6806
		{
			sqlVAL.union.val = tree.Year
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6810
		{
			sqlVAL.union.val = tree.Month
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6814
		{
			sqlVAL.union.val = tree.Day
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6818
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6822
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6826
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6832
		{
			sqlVAL.union.val = tree.Month
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6836
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6840
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6844
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6848
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6852
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6856
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6863
		{
			sqlVAL.union.val = nil
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6869
		{
			sqlVAL.union.val = tree.Second
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6872
		{
			return unimplemented(sqllex, "interval second with precision")
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6896
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6900
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6904
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6907
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6916
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6921
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6925
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6929
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6933
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6937
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6941
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6945
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6949
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6953
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6957
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6961
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6965
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6969
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6973
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6981
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6985
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6993
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7001
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7005
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7009
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7013
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7017
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7021
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7025
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7033
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7037
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7041
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7045
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7053
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7057
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7065
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7077
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7085
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7093
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7097
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7101
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7109
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7113
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7117
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7121
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7133
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7137
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7141
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7145
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7149
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7153
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7157
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7160
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7162
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7166
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7170
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7174
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7178
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7182
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7186
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7190
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7194
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7198
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7202
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7206
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7210
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7214
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7218
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7222
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7226
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7243
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7248
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7260
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7264
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7268
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7272
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7276
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7280
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7284
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7288
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7292
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7296
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7300
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7304
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7308
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7312
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7316
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7324
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7328
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7332
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7336
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7340
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7344
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7348
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7352
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7356
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7368
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7382
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7390
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7426
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7430
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7434
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7438
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7442
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7447
		{
			return unimplemented(sqllex, "func const")
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7449
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7453
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7456
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7458
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7462
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7466
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7470
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7474
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7483
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7488
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7492
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7496
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7501
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7505
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7513
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7517
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7520
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7524
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7528
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7531
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7532
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7538
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7542
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7545
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7556
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7563
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7572
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7573
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7577
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation for")
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7579
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7583
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7589
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7597
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7607
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7611
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7615
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7619
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7623
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7627
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7631
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7635
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7639
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7643
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7647
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7651
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7655
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7662
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7665
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7667
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7670
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7675
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7677
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7680
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7682
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7685
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7687
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7690
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7692
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7695
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7697
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7700
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7709
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7710
		{
			return unimplemented(sqllex, "treat")
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7716
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7720
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7724
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7728
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7731
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7733
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7736
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7741
		{
			return unimplemented(sqllex, "within group")
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7742
		{
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7746
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7750
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7757
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7761
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7767
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7771
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7777
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7785
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7789
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7793
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7820
		{
			sqlVAL.str = ""
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7826
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7830
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7841
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7848
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7855
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7862
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7868
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7881
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7909
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7913
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7917
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7921
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7928
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7944
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7948
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7955
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7967
		{
			sqlVAL.union.val = tree.Any
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7971
		{
			sqlVAL.union.val = tree.Some
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7975
		{
			sqlVAL.union.val = tree.All
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7980
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7981
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7982
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7983
		{
			sqlVAL.union.val = tree.Div
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7984
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7985
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7986
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7987
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7988
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7989
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7990
		{
			sqlVAL.union.val = tree.LT
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7991
		{
			sqlVAL.union.val = tree.GT
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7992
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7993
		{
			sqlVAL.union.val = tree.LE
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7994
		{
			sqlVAL.union.val = tree.GE
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7995
		{
			sqlVAL.union.val = tree.NE
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7999
		{
			sqlVAL.union.val = tree.Like
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8000
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8001
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8002
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8025
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8029
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8035
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8039
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8043
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8054
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8058
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8064
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8068
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8075
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8081
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8085
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8091
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8095
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8101
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8105
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8111
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8115
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8121
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8125
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:8147
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8151
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8155
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8161
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8168
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8172
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8189
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8193
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8197
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8201
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8205
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8211
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8217
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8223
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8227
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8231
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8237
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8249
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8256
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8260
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:8266
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8272
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8276
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8283
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8289
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8293
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8300
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8306
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8315
		{
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8316
		{
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8320
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8330
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8339
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8343
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8347
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8355
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8359
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8365
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8375
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8387
		{

			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       name,
				SearchTable: true,
			}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8420
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8424
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8428
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8434
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8446
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8450
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8461
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8472
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8482
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8580
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8587
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8591
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8595
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8609
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8613
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8617
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8630
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8648
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8658
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8662
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8684
		{
			sqlVAL.str = ""
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8690
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8694
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
