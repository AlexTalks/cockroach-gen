// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:565
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8534

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	425, 57,
	-2, 908,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	169, 743,
	-2, 0,
	-1, 60,
	102, 908,
	175, 908,
	373, 908,
	374, 908,
	-2, 0,
	-1, 74,
	115, 882,
	128, 882,
	183, 882,
	210, 882,
	238, 882,
	246, 882,
	370, 882,
	-2, 871,
	-1, 108,
	120, 553,
	199, 553,
	360, 553,
	-2, 0,
	-1, 113,
	4, 910,
	20, 910,
	21, 910,
	22, 910,
	23, 910,
	25, 910,
	30, 910,
	35, 910,
	36, 910,
	37, 910,
	38, 910,
	39, 910,
	40, 910,
	41, 910,
	42, 910,
	43, 910,
	44, 910,
	46, 910,
	47, 910,
	48, 910,
	49, 910,
	50, 910,
	51, 910,
	52, 910,
	55, 910,
	56, 910,
	57, 910,
	58, 910,
	60, 910,
	61, 910,
	65, 910,
	66, 910,
	67, 910,
	68, 910,
	69, 910,
	71, 910,
	72, 910,
	73, 910,
	74, 910,
	76, 910,
	78, 910,
	79, 910,
	82, 910,
	83, 910,
	91, 910,
	92, 910,
	93, 910,
	94, 910,
	95, 910,
	96, 910,
	97, 910,
	98, 910,
	100, 910,
	102, 910,
	104, 910,
	107, 910,
	108, 910,
	109, 910,
	111, 910,
	113, 910,
	114, 910,
	116, 910,
	117, 910,
	118, 910,
	119, 910,
	120, 910,
	121, 910,
	122, 910,
	123, 910,
	124, 910,
	125, 910,
	133, 910,
	134, 910,
	135, 910,
	136, 910,
	137, 910,
	138, 910,
	140, 910,
	142, 910,
	146, 910,
	148, 910,
	149, 910,
	151, 910,
	153, 910,
	154, 910,
	155, 910,
	156, 910,
	157, 910,
	158, 910,
	159, 910,
	160, 910,
	161, 910,
	164, 910,
	165, 910,
	170, 910,
	171, 910,
	172, 910,
	175, 910,
	176, 910,
	177, 910,
	178, 910,
	179, 910,
	180, 910,
	181, 910,
	182, 910,
	184, 910,
	186, 910,
	189, 910,
	190, 910,
	191, 910,
	193, 910,
	194, 910,
	197, 910,
	198, 910,
	199, 910,
	201, 910,
	202, 910,
	204, 910,
	205, 910,
	207, 910,
	208, 910,
	211, 910,
	212, 910,
	215, 910,
	217, 910,
	220, 910,
	221, 910,
	222, 910,
	223, 910,
	224, 910,
	226, 910,
	227, 910,
	228, 910,
	229, 910,
	234, 910,
	235, 910,
	236, 910,
	237, 910,
	239, 910,
	240, 910,
	242, 910,
	243, 910,
	244, 910,
	247, 910,
	248, 910,
	250, 910,
	252, 910,
	253, 910,
	254, 910,
	255, 910,
	256, 910,
	257, 910,
	258, 910,
	259, 910,
	261, 910,
	262, 910,
	263, 910,
	264, 910,
	265, 910,
	267, 910,
	268, 910,
	269, 910,
	270, 910,
	271, 910,
	272, 910,
	273, 910,
	274, 910,
	275, 910,
	277, 910,
	278, 910,
	279, 910,
	280, 910,
	281, 910,
	283, 910,
	284, 910,
	285, 910,
	286, 910,
	287, 910,
	288, 910,
	289, 910,
	291, 910,
	293, 910,
	294, 910,
	295, 910,
	296, 910,
	297, 910,
	298, 910,
	300, 910,
	301, 910,
	302, 910,
	303, 910,
	304, 910,
	305, 910,
	306, 910,
	308, 910,
	309, 910,
	310, 910,
	311, 910,
	312, 910,
	313, 910,
	314, 910,
	315, 910,
	316, 910,
	318, 910,
	319, 910,
	320, 910,
	321, 910,
	323, 910,
	324, 910,
	325, 910,
	326, 910,
	328, 910,
	329, 910,
	330, 910,
	331, 910,
	332, 910,
	333, 910,
	334, 910,
	335, 910,
	336, 910,
	337, 910,
	338, 910,
	339, 910,
	341, 910,
	342, 910,
	344, 910,
	345, 910,
	346, 910,
	347, 910,
	348, 910,
	349, 910,
	350, 910,
	351, 910,
	352, 910,
	354, 910,
	355, 910,
	356, 910,
	357, 910,
	360, 910,
	361, 910,
	362, 910,
	363, 910,
	365, 910,
	366, 910,
	368, 910,
	369, 910,
	372, 910,
	373, 910,
	374, 910,
	375, 910,
	377, 910,
	379, 910,
	380, 910,
	381, 910,
	382, 910,
	383, 910,
	384, 910,
	386, 910,
	387, 910,
	388, 910,
	393, 910,
	394, 910,
	395, 910,
	396, 910,
	397, 910,
	398, 910,
	-2, 0,
	-1, 135,
	115, 881,
	128, 881,
	183, 881,
	210, 881,
	238, 881,
	246, 881,
	370, 881,
	-2, 874,
	-1, 140,
	1, 804,
	189, 804,
	267, 804,
	272, 804,
	424, 804,
	425, 804,
	-2, 0,
	-1, 142,
	1, 804,
	424, 804,
	425, 804,
	-2, 0,
	-1, 143,
	1, 804,
	424, 804,
	425, 804,
	-2, 0,
	-1, 144,
	1, 808,
	424, 808,
	425, 808,
	-2, 0,
	-1, 172,
	4, 917,
	5, 917,
	6, 917,
	7, 917,
	8, 917,
	9, 917,
	20, 917,
	21, 917,
	22, 917,
	23, 917,
	25, 917,
	30, 917,
	31, 917,
	35, 917,
	36, 917,
	37, 917,
	38, 917,
	39, 917,
	40, 917,
	41, 917,
	42, 917,
	43, 917,
	44, 917,
	46, 917,
	47, 917,
	48, 917,
	49, 917,
	50, 917,
	51, 917,
	52, 917,
	53, 917,
	54, 917,
	55, 917,
	56, 917,
	57, 917,
	58, 917,
	60, 917,
	61, 917,
	63, 917,
	65, 917,
	66, 917,
	67, 917,
	68, 917,
	69, 917,
	71, 917,
	72, 917,
	73, 917,
	74, 917,
	76, 917,
	78, 917,
	79, 917,
	81, 917,
	82, 917,
	83, 917,
	84, 917,
	85, 917,
	86, 917,
	87, 917,
	88, 917,
	89, 917,
	90, 917,
	91, 917,
	92, 917,
	93, 917,
	94, 917,
	95, 917,
	96, 917,
	97, 917,
	98, 917,
	99, 917,
	100, 917,
	102, 917,
	104, 917,
	107, 917,
	108, 917,
	109, 917,
	111, 917,
	113, 917,
	114, 917,
	116, 917,
	117, 917,
	118, 917,
	119, 917,
	120, 917,
	121, 917,
	122, 917,
	123, 917,
	124, 917,
	125, 917,
	126, 917,
	127, 917,
	133, 917,
	134, 917,
	135, 917,
	136, 917,
	137, 917,
	138, 917,
	140, 917,
	142, 917,
	145, 917,
	146, 917,
	148, 917,
	149, 917,
	151, 917,
	153, 917,
	154, 917,
	155, 917,
	156, 917,
	157, 917,
	158, 917,
	159, 917,
	160, 917,
	161, 917,
	162, 917,
	164, 917,
	165, 917,
	170, 917,
	171, 917,
	172, 917,
	174, 917,
	175, 917,
	176, 917,
	177, 917,
	178, 917,
	179, 917,
	180, 917,
	181, 917,
	182, 917,
	184, 917,
	186, 917,
	187, 917,
	188, 917,
	189, 917,
	190, 917,
	191, 917,
	192, 917,
	193, 917,
	194, 917,
	197, 917,
	198, 917,
	199, 917,
	201, 917,
	202, 917,
	204, 917,
	205, 917,
	206, 917,
	207, 917,
	208, 917,
	209, 917,
	211, 917,
	212, 917,
	215, 917,
	217, 917,
	218, 917,
	219, 917,
	220, 917,
	221, 917,
	222, 917,
	223, 917,
	224, 917,
	225, 917,
	226, 917,
	227, 917,
	228, 917,
	229, 917,
	230, 917,
	232, 917,
	233, 917,
	234, 917,
	235, 917,
	236, 917,
	237, 917,
	239, 917,
	240, 917,
	243, 917,
	244, 917,
	247, 917,
	248, 917,
	249, 917,
	250, 917,
	251, 917,
	252, 917,
	253, 917,
	254, 917,
	255, 917,
	256, 917,
	257, 917,
	258, 917,
	259, 917,
	261, 917,
	262, 917,
	263, 917,
	264, 917,
	265, 917,
	267, 917,
	268, 917,
	269, 917,
	270, 917,
	271, 917,
	272, 917,
	273, 917,
	274, 917,
	275, 917,
	277, 917,
	278, 917,
	279, 917,
	280, 917,
	281, 917,
	283, 917,
	284, 917,
	285, 917,
	286, 917,
	287, 917,
	288, 917,
	289, 917,
	291, 917,
	292, 917,
	293, 917,
	294, 917,
	295, 917,
	296, 917,
	297, 917,
	298, 917,
	300, 917,
	301, 917,
	302, 917,
	303, 917,
	304, 917,
	305, 917,
	306, 917,
	308, 917,
	309, 917,
	310, 917,
	311, 917,
	312, 917,
	313, 917,
	314, 917,
	315, 917,
	316, 917,
	317, 917,
	318, 917,
	319, 917,
	320, 917,
	321, 917,
	322, 917,
	323, 917,
	324, 917,
	325, 917,
	326, 917,
	328, 917,
	329, 917,
	330, 917,
	331, 917,
	332, 917,
	333, 917,
	334, 917,
	335, 917,
	336, 917,
	337, 917,
	338, 917,
	339, 917,
	341, 917,
	342, 917,
	344, 917,
	345, 917,
	346, 917,
	347, 917,
	348, 917,
	349, 917,
	350, 917,
	351, 917,
	352, 917,
	354, 917,
	355, 917,
	356, 917,
	357, 917,
	360, 917,
	361, 917,
	362, 917,
	363, 917,
	364, 917,
	365, 917,
	366, 917,
	368, 917,
	369, 917,
	372, 917,
	373, 917,
	374, 917,
	375, 917,
	376, 917,
	377, 917,
	379, 917,
	380, 917,
	381, 917,
	382, 917,
	383, 917,
	384, 917,
	386, 917,
	387, 917,
	388, 917,
	393, 917,
	394, 917,
	395, 917,
	396, 917,
	397, 917,
	398, 917,
	399, 917,
	407, 917,
	412, 917,
	413, 917,
	414, 917,
	421, 917,
	427, 917,
	-2, 0,
	-1, 175,
	1, 57,
	425, 57,
	-2, 908,
	-1, 208,
	423, 1506,
	426, 1506,
	-2, 596,
	-1, 209,
	423, 1508,
	426, 1508,
	-2, 597,
	-1, 210,
	423, 1507,
	426, 1507,
	-2, 598,
	-1, 211,
	426, 1458,
	-2, 599,
	-1, 625,
	144, 1625,
	358, 1625,
	404, 1625,
	423, 1625,
	-2, 0,
	-1, 626,
	144, 1546,
	358, 1546,
	404, 1546,
	423, 1546,
	-2, 0,
	-1, 628,
	144, 1698,
	358, 1698,
	404, 1698,
	423, 1698,
	-2, 0,
	-1, 630,
	144, 1726,
	358, 1726,
	404, 1726,
	423, 1726,
	-2, 0,
	-1, 637,
	144, 1630,
	358, 1630,
	404, 1630,
	423, 1630,
	-2, 430,
	-1, 670,
	1, 526,
	420, 526,
	422, 526,
	424, 526,
	425, 526,
	-2, 0,
	-1, 671,
	1, 595,
	141, 595,
	420, 595,
	422, 595,
	424, 595,
	425, 595,
	-2, 0,
	-1, 677,
	1, 540,
	420, 540,
	422, 540,
	424, 540,
	425, 540,
	-2, 0,
	-1, 679,
	1, 544,
	420, 544,
	422, 544,
	424, 544,
	425, 544,
	-2, 0,
	-1, 681,
	1, 554,
	420, 554,
	422, 554,
	424, 554,
	425, 554,
	-2, 0,
	-1, 682,
	1, 560,
	420, 560,
	422, 560,
	424, 560,
	425, 560,
	-2, 0,
	-1, 683,
	1, 563,
	420, 563,
	422, 563,
	424, 563,
	425, 563,
	-2, 0,
	-1, 687,
	1, 577,
	420, 577,
	422, 577,
	424, 577,
	425, 577,
	-2, 0,
	-1, 688,
	1, 579,
	420, 579,
	422, 579,
	424, 579,
	425, 579,
	-2, 0,
	-1, 716,
	128, 921,
	210, 921,
	238, 921,
	-2, 877,
	-1, 724,
	128, 920,
	210, 920,
	238, 920,
	-2, 875,
	-1, 751,
	421, 1802,
	-2, 1209,
	-1, 752,
	421, 1803,
	-2, 1210,
	-1, 779,
	421, 1500,
	-2, 1491,
	-1, 785,
	5, 1043,
	-2, 1536,
	-1, 786,
	5, 1044,
	-2, 1541,
	-1, 787,
	5, 1045,
	-2, 1540,
	-1, 788,
	5, 1046,
	-2, 1723,
	-1, 789,
	5, 1047,
	-2, 1632,
	-1, 790,
	5, 1048,
	-2, 1691,
	-1, 791,
	5, 1049,
	-2, 1693,
	-1, 792,
	5, 1050,
	-2, 1694,
	-1, 793,
	5, 1051,
	-2, 1695,
	-1, 794,
	5, 1052,
	-2, 1703,
	-1, 795,
	5, 1053,
	-2, 1734,
	-1, 796,
	5, 1054,
	-2, 1601,
	-1, 797,
	5, 1055,
	-2, 1535,
	-1, 798,
	5, 1056,
	-2, 1639,
	-1, 799,
	5, 1057,
	-2, 1640,
	-1, 800,
	5, 1058,
	-2, 1605,
	-1, 801,
	5, 1059,
	421, 1515,
	-2, 1506,
	-1, 802,
	5, 1107,
	421, 1107,
	-2, 1769,
	-1, 807,
	421, 1516,
	-2, 1507,
	-1, 809,
	5, 1063,
	-2, 1767,
	-1, 810,
	5, 1064,
	-2, 1604,
	-1, 811,
	5, 1065,
	-2, 1606,
	-1, 812,
	5, 1066,
	-2, 1607,
	-1, 813,
	5, 1067,
	-2, 1608,
	-1, 814,
	5, 1068,
	-2, 1768,
	-1, 815,
	5, 1069,
	-2, 1780,
	-1, 816,
	5, 1070,
	-2, 1749,
	-1, 817,
	5, 1071,
	-2, 1778,
	-1, 818,
	5, 1072,
	-2, 1588,
	-1, 819,
	5, 1073,
	-2, 1589,
	-1, 820,
	5, 1087,
	-2, 1761,
	-1, 822,
	5, 1062,
	-2, 1757,
	-1, 823,
	5, 1062,
	-2, 1756,
	-1, 824,
	5, 1062,
	-2, 1773,
	-1, 825,
	5, 1079,
	-2, 1751,
	-1, 826,
	5, 1080,
	-2, 1537,
	-1, 827,
	5, 1097,
	-2, 1750,
	-1, 829,
	5, 1098,
	-2, 1565,
	-1, 830,
	5, 1099,
	-2, 1782,
	-1, 831,
	5, 1101,
	-2, 1783,
	-1, 832,
	5, 1103,
	-2, 1784,
	-1, 833,
	5, 1105,
	-2, 1724,
	-1, 834,
	5, 1031,
	-2, 1614,
	-1, 835,
	5, 1032,
	-2, 1615,
	-1, 855,
	5, 1095,
	-2, 1713,
	-1, 872,
	5, 1097,
	-2, 1753,
	-1, 873,
	5, 1097,
	-2, 1752,
	-1, 874,
	5, 1094,
	-2, 1788,
	-1, 935,
	421, 1515,
	-2, 1506,
	-1, 950,
	283, 1488,
	414, 1488,
	-2, 1487,
	-1, 1099,
	257, 906,
	-2, 722,
	-1, 1111,
	241, 1510,
	-2, 0,
	-1, 1154,
	1, 297,
	420, 297,
	424, 297,
	425, 297,
	-2, 880,
	-1, 1157,
	4, 1787,
	10, 1787,
	11, 1787,
	13, 1787,
	14, 1787,
	15, 1787,
	16, 1787,
	17, 1787,
	18, 1787,
	20, 1787,
	21, 1787,
	22, 1787,
	23, 1787,
	25, 1787,
	28, 1787,
	30, 1787,
	32, 1787,
	35, 1787,
	36, 1787,
	37, 1787,
	38, 1787,
	39, 1787,
	40, 1787,
	41, 1787,
	42, 1787,
	43, 1787,
	44, 1787,
	46, 1787,
	47, 1787,
	48, 1787,
	49, 1787,
	50, 1787,
	51, 1787,
	52, 1787,
	55, 1787,
	56, 1787,
	57, 1787,
	58, 1787,
	60, 1787,
	61, 1787,
	62, 1787,
	65, 1787,
	66, 1787,
	67, 1787,
	68, 1787,
	69, 1787,
	70, 1787,
	71, 1787,
	72, 1787,
	73, 1787,
	74, 1787,
	76, 1787,
	77, 1787,
	78, 1787,
	79, 1787,
	81, 1787,
	82, 1787,
	83, 1787,
	91, 1787,
	92, 1787,
	93, 1787,
	94, 1787,
	95, 1787,
	96, 1787,
	97, 1787,
	98, 1787,
	100, 1787,
	102, 1787,
	104, 1787,
	107, 1787,
	108, 1787,
	109, 1787,
	111, 1787,
	113, 1787,
	114, 1787,
	116, 1787,
	117, 1787,
	118, 1787,
	119, 1787,
	120, 1787,
	121, 1787,
	122, 1787,
	123, 1787,
	124, 1787,
	125, 1787,
	129, 1787,
	130, 1787,
	131, 1787,
	132, 1787,
	133, 1787,
	134, 1787,
	135, 1787,
	136, 1787,
	137, 1787,
	138, 1787,
	139, 1787,
	140, 1787,
	142, 1787,
	145, 1787,
	146, 1787,
	148, 1787,
	149, 1787,
	151, 1787,
	153, 1787,
	154, 1787,
	155, 1787,
	156, 1787,
	157, 1787,
	158, 1787,
	159, 1787,
	160, 1787,
	161, 1787,
	162, 1787,
	163, 1787,
	164, 1787,
	165, 1787,
	166, 1787,
	167, 1787,
	168, 1787,
	170, 1787,
	171, 1787,
	172, 1787,
	174, 1787,
	175, 1787,
	176, 1787,
	177, 1787,
	178, 1787,
	179, 1787,
	180, 1787,
	181, 1787,
	182, 1787,
	184, 1787,
	186, 1787,
	187, 1787,
	188, 1787,
	189, 1787,
	190, 1787,
	191, 1787,
	192, 1787,
	193, 1787,
	194, 1787,
	195, 1787,
	196, 1787,
	197, 1787,
	198, 1787,
	199, 1787,
	201, 1787,
	202, 1787,
	204, 1787,
	205, 1787,
	206, 1787,
	207, 1787,
	208, 1787,
	209, 1787,
	211, 1787,
	212, 1787,
	215, 1787,
	216, 1787,
	217, 1787,
	220, 1787,
	221, 1787,
	222, 1787,
	223, 1787,
	224, 1787,
	225, 1787,
	226, 1787,
	227, 1787,
	228, 1787,
	229, 1787,
	232, 1787,
	234, 1787,
	235, 1787,
	236, 1787,
	237, 1787,
	239, 1787,
	240, 1787,
	243, 1787,
	244, 1787,
	245, 1787,
	247, 1787,
	248, 1787,
	250, 1787,
	252, 1787,
	253, 1787,
	254, 1787,
	255, 1787,
	256, 1787,
	257, 1787,
	258, 1787,
	259, 1787,
	261, 1787,
	262, 1787,
	263, 1787,
	264, 1787,
	265, 1787,
	267, 1787,
	268, 1787,
	269, 1787,
	270, 1787,
	271, 1787,
	272, 1787,
	273, 1787,
	274, 1787,
	275, 1787,
	277, 1787,
	278, 1787,
	279, 1787,
	280, 1787,
	281, 1787,
	282, 1787,
	283, 1787,
	284, 1787,
	285, 1787,
	286, 1787,
	287, 1787,
	288, 1787,
	289, 1787,
	291, 1787,
	292, 1787,
	293, 1787,
	294, 1787,
	295, 1787,
	296, 1787,
	297, 1787,
	298, 1787,
	299, 1787,
	300, 1787,
	301, 1787,
	302, 1787,
	303, 1787,
	304, 1787,
	305, 1787,
	306, 1787,
	308, 1787,
	309, 1787,
	310, 1787,
	311, 1787,
	312, 1787,
	313, 1787,
	314, 1787,
	315, 1787,
	316, 1787,
	318, 1787,
	319, 1787,
	320, 1787,
	321, 1787,
	322, 1787,
	323, 1787,
	324, 1787,
	325, 1787,
	326, 1787,
	328, 1787,
	329, 1787,
	330, 1787,
	331, 1787,
	332, 1787,
	333, 1787,
	334, 1787,
	335, 1787,
	336, 1787,
	337, 1787,
	338, 1787,
	339, 1787,
	341, 1787,
	342, 1787,
	344, 1787,
	345, 1787,
	346, 1787,
	347, 1787,
	348, 1787,
	349, 1787,
	350, 1787,
	351, 1787,
	352, 1787,
	354, 1787,
	355, 1787,
	356, 1787,
	357, 1787,
	360, 1787,
	361, 1787,
	362, 1787,
	363, 1787,
	365, 1787,
	366, 1787,
	368, 1787,
	369, 1787,
	372, 1787,
	373, 1787,
	374, 1787,
	375, 1787,
	377, 1787,
	379, 1787,
	380, 1787,
	381, 1787,
	382, 1787,
	383, 1787,
	384, 1787,
	386, 1787,
	387, 1787,
	388, 1787,
	393, 1787,
	394, 1787,
	395, 1787,
	396, 1787,
	397, 1787,
	398, 1787,
	399, 1787,
	400, 1787,
	402, 1787,
	403, 1787,
	404, 1787,
	405, 1787,
	406, 1787,
	407, 1787,
	409, 1787,
	410, 1787,
	411, 1787,
	412, 1787,
	413, 1787,
	414, 1787,
	415, 1787,
	416, 1787,
	417, 1787,
	419, 1787,
	422, 1787,
	423, 1787,
	426, 1787,
	427, 1787,
	-2, 0,
	-1, 1176,
	144, 1698,
	358, 1698,
	404, 1698,
	423, 1698,
	-2, 0,
	-1, 1205,
	144, 1726,
	358, 1726,
	404, 1726,
	423, 1726,
	-2, 0,
	-1, 1206,
	189, 816,
	267, 816,
	272, 816,
	-2, 417,
	-1, 1277,
	1, 1741,
	420, 1741,
	422, 1741,
	423, 1741,
	424, 1741,
	425, 1741,
	-2, 575,
	-1, 1278,
	1, 1696,
	420, 1696,
	422, 1696,
	423, 1696,
	424, 1696,
	425, 1696,
	-2, 576,
	-1, 1288,
	128, 920,
	210, 920,
	238, 920,
	-2, 878,
	-1, 1378,
	115, 882,
	128, 882,
	183, 882,
	210, 882,
	238, 882,
	246, 882,
	370, 882,
	-2, 1262,
	-1, 1430,
	422, 1393,
	-2, 0,
	-1, 1434,
	189, 816,
	267, 816,
	272, 816,
	-2, 811,
	-1, 1468,
	115, 882,
	128, 882,
	183, 882,
	210, 882,
	238, 882,
	246, 882,
	370, 882,
	-2, 990,
	-1, 1687,
	189, 816,
	267, 816,
	272, 816,
	-2, 419,
	-1, 1787,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1142,
	-1, 1788,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1143,
	-1, 1789,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1144,
	-1, 1790,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1145,
	-1, 1791,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1146,
	-1, 1792,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1147,
	-1, 1793,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1148,
	-1, 1794,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1149,
	-1, 1806,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1161,
	-1, 1807,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1162,
	-1, 1808,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1163,
	-1, 1811,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1168,
	-1, 1817,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1172,
	-1, 1819,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1180,
	-1, 1820,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1181,
	-1, 1821,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1182,
	-1, 1822,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1183,
	-1, 1910,
	5, 1059,
	144, 1404,
	421, 1515,
	-2, 1506,
	-1, 1911,
	144, 1405,
	-2, 1745,
	-1, 1912,
	144, 1406,
	-2, 1629,
	-1, 1913,
	144, 1407,
	-2, 1566,
	-1, 1914,
	144, 1408,
	-2, 1596,
	-1, 1915,
	144, 1409,
	-2, 1628,
	-1, 1916,
	144, 1410,
	-2, 1690,
	-1, 1985,
	1, 991,
	81, 991,
	115, 991,
	128, 991,
	145, 991,
	150, 991,
	152, 991,
	174, 991,
	183, 991,
	192, 991,
	206, 991,
	210, 991,
	225, 991,
	238, 991,
	241, 991,
	246, 991,
	290, 991,
	292, 991,
	370, 991,
	378, 991,
	390, 991,
	391, 991,
	401, 991,
	420, 991,
	422, 991,
	424, 991,
	425, 991,
	426, 991,
	-2, 990,
	-1, 1990,
	421, 1492,
	-2, 1504,
	-1, 2074,
	422, 1463,
	426, 1463,
	-2, 1479,
	-1, 2206,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1170,
	-1, 2207,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1174,
	-1, 2213,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1176,
	-1, 2449,
	257, 906,
	-2, 722,
	-1, 2520,
	189, 816,
	267, 816,
	272, 816,
	-2, 416,
	-1, 2538,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1178,
	-1, 2545,
	187, 0,
	188, 0,
	232, 0,
	-2, 1197,
	-1, 2606,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1227,
	-1, 2607,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1228,
	-1, 2608,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1229,
	-1, 2612,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1233,
	-1, 2613,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1234,
	-1, 2614,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1235,
	-1, 2656,
	421, 1493,
	-2, 1505,
	-1, 2771,
	187, 0,
	188, 0,
	232, 0,
	-2, 1198,
	-1, 2774,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1201,
	-1, 2775,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1203,
	-1, 2921,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1202,
	-1, 2922,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1204,
	-1, 2932,
	187, 0,
	-2, 1236,
	-1, 3020,
	187, 0,
	-2, 1237,
	-1, 3114,
	38, 0,
	162, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1748,
}

const sqlPrivate = 57344

const sqlLast = 58858

var sqlAct = [...]int{

	807, 3113, 1945, 2701, 2960, 3122, 3093, 3176, 3091, 3078,
	2107, 3124, 3090, 3123, 2115, 2949, 2872, 2136, 2576, 2887,
	3024, 3112, 1774, 1144, 2199, 1083, 2911, 954, 2719, 2467,
	2665, 1977, 2714, 1834, 2459, 2828, 2724, 2234, 2370, 1611,
	725, 210, 1057, 2843, 2461, 2076, 498, 2936, 1291, 2490,
	2072, 2666, 2492, 498, 2104, 1463, 1105, 2232, 1612, 2806,
	498, 2363, 2472, 498, 498, 2352, 498, 210, 2314, 498,
	498, 970, 1461, 1973, 2328, 1140, 498, 1556, 1442, 2116,
	1557, 593, 1568, 964, 498, 1376, 1565, 1553, 2075, 2339,
	2002, 1993, 1978, 550, 1500, 2629, 2057, 3025, 1863, 2313,
	1771, 765, 1386, 1846, 947, 493, 1766, 2195, 733, 129,
	1434, 546, 2471, 2430, 1522, 1554, 1516, 1479, 1481, 1443,
	1831, 803, 2031, 1874, 1712, 1208, 585, 1942, 928, 1422,
	2058, 1980, 2073, 1857, 1398, 2873, 2030, 1127, 1155, 1137,
	956, 920, 2109, 1550, 2079, 211, 923, 1965, 1906, 1847,
	902, 495, 73, 212, 1452, 494, 635, 1367, 135, 1950,
	1581, 1292, 1290, 1711, 764, 615, 588, 498, 498, 129,
	136, 206, 629, 1153, 724, 2667, 1061, 1575, 1124, 1492,
	900, 925, 1433, 1296, 662, 1108, 828, 2645, 1471, 2230,
	2646, 543, 478, 2108, 763, 608, 481, 600, 2137, 498,
	498, 498, 959, 498, 498, 973, 973, 2059, 3203, 3197,
	1583, 1462, 1959, 1959, 498, 498, 3196, 1583, 478, 1583,
	1959, 3173, 481, 3170, 3148, 2842, 3142, 1531, 2842, 2478,
	1959, 3141, 1595, 3138, 729, 1959, 3135, 3139, 602, 3132,
	3136, 3110, 3109, 1531, 3108, 1531, 1531, 3107, 1595, 3073,
	3060, 1595, 3053, 2149, 1531, 3051, 2842, 3049, 3022, 2842,
	1959, 2842, 2149, 3004, 739, 2994, 2989, 2740, 2987, 2842,
	1531, 2978, 2842, 2977, 2970, 1531, 729, 1531, 1531, 967,
	547, 2969, 2942, 2923, 129, 2842, 1531, 2149, 717, 2867,
	730, 2863, 2841, 1959, 2510, 1959, 2842, 2773, 903, 903,
	716, 2149, 2059, 578, 2738, 549, 950, 2730, 2731, 2651,
	2533, 2731, 2641, 2652, 40, 2479, 2642, 2635, 1307, 1308,
	2443, 1959, 3074, 734, 1350, 1351, 1352, 2632, 2569, 44,
	2500, 2325, 1531, 2281, 2435, 1959, 3008, 1959, 2249, 2139,
	940, 944, 949, 1310, 2250, 1082, 1356, 2280, 904, 2276,
	2261, 1959, 2167, 1959, 2262, 1179, 1959, 2148, 577, 1063,
	2135, 2149, 2132, 917, 1600, 478, 1959, 1062, 2068, 481,
	1309, 1958, 1531, 1531, 1952, 1959, 1307, 1308, 1329, 1340,
	1341, 1342, 1350, 1351, 1352, 1599, 1525, 579, 1595, 1600,
	1191, 906, 1531, 907, 1343, 59, 581, 2632, 1951, 1690,
	60, 1310, 1307, 1308, 1356, 2740, 172, 2046, 1991, 2089,
	2435, 2198, 2178, 1530, 1959, 1438, 1060, 175, 1175, 1174,
	1173, 1709, 2480, 1180, 1172, 1171, 1170, 1310, 1309, 1169,
	172, 1860, 1168, 1167, 63, 1166, 1329, 1332, 1333, 1334,
	1335, 2481, 174, 1326, 1165, 1164, 1584, 1315, 1307, 1308,
	1163, 1162, 1161, 1584, 1309, 1584, 2233, 1160, 1159, 908,
	571, 28, 905, 723, 722, 721, 174, 720, 719, 715,
	1347, 1357, 714, 1310, 1337, 1338, 1339, 713, 712, 711,
	1076, 710, 173, 709, 1070, 708, 707, 706, 705, 701,
	1861, 166, 700, 699, 660, 1332, 1333, 1334, 1335, 167,
	1309, 659, 1081, 658, 657, 1315, 173, 498, 498, 656,
	498, 959, 959, 498, 498, 498, 655, 1345, 498, 654,
	137, 498, 653, 2821, 1330, 652, 651, 498, 1347, 1357,
	650, 1315, 1337, 1338, 1339, 649, 64, 498, 498, 498,
	498, 498, 959, 959, 137, 648, 647, 1897, 646, 959,
	645, 644, 643, 1353, 1354, 1862, 1859, 732, 1337, 1338,
	1339, 1324, 1325, 642, 138, 66, 1148, 67, 641, 640,
	639, 624, 623, 622, 1984, 1345, 1180, 1315, 621, 620,
	619, 498, 1330, 498, 1591, 172, 534, 533, 2112, 2785,
	1336, 1582, 504, 1750, 503, 498, 580, 2478, 1355, 108,
	2732, 1113, 1531, 502, 1337, 1338, 1339, 1331, 1330, 484,
	483, 1344, 779, 482, 1095, 1098, 2286, 2287, 498, 1109,
	1109, 174, 196, 195, 1141, 194, 193, 192, 1539, 498,
	1348, 191, 2286, 2287, 190, 189, 28, 1075, 1307, 1308,
	188, 1864, 187, 186, 806, 185, 184, 183, 1336, 182,
	172, 181, 180, 179, 1330, 178, 1951, 177, 176, 2649,
	2366, 173, 805, 1310, 1177, 1331, 1377, 959, 1126, 1895,
	166, 2255, 1180, 2245, 2187, 1131, 1134, 2097, 167, 2069,
	2062, 1715, 1478, 1392, 1464, 1893, 174, 498, 1348, 1156,
	1309, 1331, 1222, 1085, 1891, 2286, 2287, 1889, 1066, 548,
	1110, 730, 3129, 498, 2286, 2287, 1303, 1346, 3111, 3015,
	762, 2990, 2909, 2959, 2905, 1349, 2805, 1320, 1318, 1319,
	1311, 1312, 1313, 1314, 1316, 1317, 173, 1608, 2895, 3011,
	2438, 3009, 1858, 2804, 2792, 166, 2791, 1331, 1307, 1308,
	2790, 1206, 2789, 167, 2049, 2292, 2286, 2287, 2783, 1388,
	2782, 2781, 2780, 2752, 1288, 2750, 2154, 1289, 1216, 1307,
	1308, 2292, 1220, 1310, 137, 1346, 2655, 1315, 1321, 1322,
	1328, 1327, 1323, 1349, 2019, 1320, 1318, 1319, 1311, 1312,
	1313, 1314, 1316, 1317, 1310, 172, 2626, 934, 2795, 172,
	1309, 1607, 2794, 2625, 2624, 2553, 172, 2549, 1329, 2434,
	2361, 1203, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317,
	2321, 1309, 2312, 2285, 1307, 1308, 2282, 2279, 2277, 931,
	2260, 174, 2302, 2239, 2292, 174, 1710, 2032, 2238, 2231,
	2140, 1985, 174, 2292, 2098, 2194, 1388, 930, 2302, 1310,
	1868, 1303, 2767, 1064, 1287, 1562, 916, 172, 1223, 1319,
	1311, 1312, 1313, 1314, 1316, 1317, 1375, 1332, 1333, 1334,
	1335, 173, 172, 1536, 1534, 173, 1309, 1315, 1302, 3201,
	166, 1389, 173, 1387, 166, 2292, 3184, 172, 167, 3183,
	1084, 166, 167, 174, 2578, 932, 3102, 3097, 1315, 167,
	3055, 3046, 717, 3045, 1337, 1338, 1339, 498, 174, 137,
	3042, 2302, 498, 137, 716, 2303, 3041, 3036, 2894, 3033,
	2111, 1299, 1300, 174, 3007, 1337, 1338, 1339, 1449, 1976,
	1304, 2303, 3006, 173, 1837, 730, 2955, 2934, 498, 1440,
	2881, 2877, 166, 2875, 2820, 2803, 2741, 2717, 173, 2708,
	167, 2707, 2705, 1315, 1330, 2683, 2682, 166, 1069, 2672,
	1074, 2671, 1080, 173, 2637, 167, 2544, 1402, 1400, 1401,
	1843, 137, 166, 2506, 2504, 1330, 3027, 1896, 2498, 2453,
	167, 2419, 2402, 2380, 2379, 2324, 137, 2259, 2258, 2244,
	2222, 1472, 2380, 1399, 2303, 2096, 1396, 2156, 1988, 1446,
	1447, 137, 1970, 1957, 1887, 1371, 1545, 1477, 1441, 1432,
	1431, 2286, 2287, 1423, 1430, 1459, 1429, 1428, 1427, 1426,
	1336, 1425, 1424, 1421, 1420, 2297, 2295, 2296, 2288, 2289,
	2290, 2291, 2293, 2294, 1419, 1418, 1417, 1331, 129, 1416,
	1415, 1460, 1414, 903, 2288, 2289, 2290, 2291, 2293, 2294,
	1311, 1312, 1313, 1314, 1316, 1317, 1413, 1412, 1331, 1219,
	1411, 1410, 1409, 1372, 1370, 1202, 1186, 1181, 1158, 1184,
	959, 498, 1437, 1499, 1152, 2908, 1189, 973, 1609, 2777,
	1435, 1469, 2749, 2644, 2640, 2248, 1487, 730, 2151, 1473,
	1971, 2345, 1439, 2286, 2287, 498, 973, 498, 498, 1894,
	1389, 2502, 1368, 2462, 2900, 498, 2296, 2288, 2289, 2290,
	2291, 2293, 2294, 1523, 1466, 1892, 2288, 2289, 2290, 2291,
	2293, 2294, 498, 498, 1890, 1546, 2743, 1888, 2742, 498,
	2647, 498, 2059, 498, 971, 1058, 3012, 498, 3010, 2166,
	2292, 1561, 2958, 1464, 1285, 1307, 1308, 1320, 1318, 1319,
	1311, 1312, 1313, 1314, 1316, 1317, 1197, 1518, 2983, 1709,
	2290, 2291, 2293, 2294, 1493, 1598, 2423, 1709, 2418, 959,
	1310, 1311, 1312, 1313, 1314, 1316, 1317, 1709, 1416, 1416,
	1406, 2413, 2401, 2266, 2681, 2165, 1407, 498, 959, 210,
	498, 498, 959, 1404, 2265, 2264, 2263, 1309, 959, 1405,
	2204, 210, 498, 1683, 1572, 498, 498, 2034, 1215, 1570,
	1696, 498, 898, 1394, 2137, 1685, 1063, 2302, 1558, 1542,
	2512, 1673, 478, 2412, 1062, 1860, 481, 1512, 1313, 1314,
	1316, 1317, 2937, 973, 2108, 2580, 3130, 2253, 1875, 1403,
	3140, 3137, 959, 959, 1563, 498, 899, 1529, 2474, 2661,
	498, 3087, 2715, 2142, 542, 210, 498, 201, 498, 1227,
	498, 3163, 498, 511, 498, 3059, 3164, 2855, 1579, 892,
	1126, 2168, 3200, 1217, 498, 915, 498, 2522, 2982, 1261,
	894, 2981, 1374, 1741, 1861, 498, 2980, 3131, 1677, 523,
	890, 2979, 888, 1995, 2695, 2690, 2689, 2658, 1618, 885,
	2303, 2657, 1586, 1739, 2686, 1588, 2243, 1574, 1590, 1156,
	1577, 2004, 1593, 728, 2242, 2241, 498, 2240, 743, 1218,
	973, 2208, 2138, 2052, 2045, 2105, 1687, 1705, 2871, 2041,
	2022, 736, 1224, 691, 691, 1700, 1699, 541, 1709, 1706,
	478, 1818, 1601, 1436, 481, 1059, 510, 1494, 1708, 1862,
	1859, 1753, 478, 738, 738, 1087, 481, 1605, 1260, 1203,
	1603, 1886, 524, 1885, 1697, 1884, 1883, 1684, 1776, 1995,
	3014, 2525, 1674, 2056, 1491, 1193, 1772, 1773, 703, 1748,
	1994, 727, 1717, 1642, 1848, 1849, 2700, 2503, 2067, 737,
	1701, 1615, 1713, 1747, 1833, 2007, 1495, 1496, 1225, 2014,
	614, 1721, 1848, 973, 3105, 2962, 478, 3058, 613, 2013,
	481, 2295, 2296, 2288, 2289, 2290, 2291, 2293, 2294, 1618,
	1618, 1833, 692, 692, 1578, 614, 1730, 2527, 1724, 2526,
	1703, 1256, 2184, 2171, 1905, 1864, 2563, 1909, 1909, 1919,
	1921, 1926, 1864, 1848, 729, 2173, 3155, 498, 2470, 498,
	3070, 1841, 2196, 2197, 1949, 1306, 1839, 1749, 2674, 2469,
	1473, 1201, 1751, 1752, 1514, 717, 1194, 3186, 717, 717,
	2851, 1489, 1770, 973, 498, 2174, 2152, 1762, 3071, 1257,
	1763, 1764, 540, 498, 1583, 2409, 498, 2172, 2404, 973,
	1989, 1272, 2523, 498, 1511, 1882, 1497, 2469, 2422, 3038,
	2294, 498, 1872, 535, 1642, 1642, 1397, 2691, 2092, 498,
	2042, 3126, 1615, 1615, 1986, 1643, 1875, 1688, 2006, 1259,
	2392, 498, 1864, 1365, 959, 1489, 1858, 1972, 2286, 2287,
	1196, 1982, 1983, 730, 1844, 498, 973, 3163, 1996, 2985,
	1284, 498, 498, 1704, 2038, 934, 730, 934, 202, 1870,
	730, 2917, 1317, 693, 693, 2391, 498, 3154, 539, 498,
	526, 525, 498, 2928, 1710, 2032, 1867, 1746, 726, 2257,
	2025, 1966, 1710, 2032, 197, 1981, 2754, 931, 2521, 931,
	903, 729, 1710, 2032, 1917, 2008, 2010, 2684, 2301, 498,
	1937, 498, 1207, 498, 540, 930, 498, 930, 498, 1947,
	498, 2849, 498, 498, 2024, 498, 959, 959, 959, 2054,
	2053, 959, 1946, 1618, 1967, 1968, 1955, 1956, 498, 1963,
	498, 3127, 1235, 2005, 203, 2039, 950, 1469, 886, 1515,
	2130, 2131, 2761, 730, 1086, 1226, 896, 1999, 508, 895,
	749, 1740, 2016, 932, 735, 932, 694, 694, 2560, 886,
	2023, 887, 1962, 2033, 2035, 2036, 2037, 2292, 886, 2024,
	3125, 1738, 2040, 1992, 2963, 202, 2744, 2675, 2000, 2918,
	539, 1192, 3162, 1243, 2514, 3160, 517, 2126, 1269, 2886,
	3153, 1815, 542, 695, 695, 1519, 1063, 498, 2128, 3128,
	514, 2884, 478, 2102, 2060, 2100, 481, 537, 1642, 2141,
	2210, 2157, 1548, 3187, 1212, 2090, 1615, 804, 2850, 1482,
	1544, 205, 1483, 2561, 2144, 1829, 1195, 2913, 129, 704,
	1584, 2133, 2121, 1448, 1212, 204, 973, 1832, 498, 129,
	2114, 2000, 538, 2123, 2302, 2124, 1827, 2125, 498, 1190,
	498, 203, 2127, 1710, 1707, 3179, 1723, 1178, 479, 2134,
	2517, 1156, 2143, 496, 1840, 501, 1270, 498, 498, 498,
	519, 498, 2153, 200, 2119, 541, 1295, 545, 2219, 516,
	589, 596, 1305, 545, 479, 536, 589, 611, 1200, 1212,
	498, 2155, 1213, 618, 2161, 1365, 2162, 1214, 1294, 2217,
	2427, 638, 1527, 2972, 542, 2000, 1484, 2971, 198, 1864,
	1455, 2431, 1213, 1400, 1401, 1813, 1816, 1214, 1486, 537,
	1423, 2912, 2953, 2160, 2158, 3030, 691, 2303, 1604, 2615,
	2801, 1271, 3192, 1489, 2660, 2169, 2376, 2372, 205, 1458,
	1675, 201, 1823, 2189, 2394, 2103, 738, 2516, 2101, 1573,
	1824, 199, 204, 1825, 538, 1560, 1830, 1964, 2854, 1559,
	1521, 2513, 1812, 1482, 2396, 2853, 1483, 1213, 1488, 1555,
	2211, 1456, 1214, 1547, 1758, 2236, 2237, 2353, 1520, 2559,
	1293, 3079, 1928, 1744, 545, 545, 511, 541, 498, 2246,
	200, 532, 933, 1691, 2720, 2214, 1294, 536, 1236, 2888,
	2193, 509, 2954, 2395, 2382, 1517, 2215, 2381, 1295, 2220,
	2202, 2914, 2191, 527, 2026, 692, 496, 496, 496, 1718,
	965, 496, 1244, 2342, 507, 198, 1695, 1495, 1496, 1961,
	3177, 479, 1065, 1960, 2515, 2071, 506, 2297, 2295, 2296,
	2288, 2289, 2290, 2291, 2293, 2294, 1237, 2070, 2088, 1234,
	1484, 2702, 727, 1489, 2616, 606, 2209, 1457, 201, 513,
	2617, 2802, 1486, 2354, 518, 1759, 3191, 2323, 199, 510,
	2436, 1112, 1123, 2018, 973, 1814, 1111, 1121, 1293, 512,
	2335, 2326, 3167, 2874, 1826, 2426, 2333, 2334, 1693, 2807,
	498, 3178, 1828, 498, 599, 2630, 2852, 1880, 3, 2048,
	498, 2883, 1694, 498, 498, 973, 1532, 3169, 1482, 583,
	730, 1483, 1488, 498, 498, 498, 2064, 2252, 2066, 498,
	2951, 3180, 498, 2933, 2349, 1540, 2356, 576, 36, 498,
	498, 498, 498, 498, 2357, 2358, 2800, 2216, 2699, 2432,
	2315, 2027, 2028, 498, 2543, 2218, 693, 2348, 2489, 2278,
	498, 1282, 2952, 575, 35, 2221, 2110, 1266, 2110, 2159,
	2378, 2360, 498, 959, 2373, 2051, 498, 2365, 2384, 1264,
	2388, 2389, 485, 973, 574, 32, 2347, 498, 1485, 2377,
	2350, 2021, 2344, 973, 1254, 1538, 934, 2318, 2319, 2320,
	973, 2327, 573, 79, 1476, 1484, 1283, 1489, 1187, 2403,
	2316, 2882, 498, 934, 498, 2186, 498, 1486, 2185, 959,
	498, 1879, 498, 959, 959, 959, 3121, 1252, 931, 572,
	78, 498, 1618, 498, 2398, 2444, 2181, 498, 2163, 884,
	2367, 2355, 498, 1250, 498, 931, 930, 2364, 1737, 694,
	1727, 498, 1676, 604, 605, 1248, 2420, 1487, 2697, 2414,
	528, 569, 23, 930, 2397, 1122, 1408, 1488, 498, 498,
	1120, 2330, 1716, 959, 2476, 2465, 2410, 1098, 2464, 2337,
	2338, 2405, 1487, 2343, 938, 2408, 695, 1451, 2497, 1094,
	498, 2415, 597, 598, 932, 2571, 2440, 1526, 2437, 2369,
	2421, 2406, 582, 1281, 2000, 2407, 2508, 2086, 529, 1265,
	3076, 932, 1523, 36, 2383, 2433, 2386, 1642, 498, 1523,
	2463, 1263, 2460, 1246, 2825, 1615, 2447, 1098, 2839, 570,
	24, 1240, 1485, 498, 496, 1093, 1253, 496, 2501, 35,
	496, 496, 496, 2679, 530, 965, 531, 2677, 1116, 568,
	30, 1455, 1489, 2659, 496, 2836, 567, 21, 2458, 1775,
	32, 1119, 2999, 2482, 496, 496, 496, 496, 965, 1251,
	486, 487, 2507, 2456, 129, 2475, 973, 2488, 79, 1480,
	1458, 1618, 889, 891, 1501, 1249, 973, 1736, 498, 565,
	20, 2106, 2546, 2094, 730, 2837, 1451, 1247, 1453, 566,
	19, 2093, 1505, 2091, 2085, 78, 555, 15, 638, 2520,
	596, 1597, 1456, 1596, 2483, 2484, 2485, 2473, 2486, 2487,
	2518, 2519, 496, 2555, 2556, 2557, 2473, 2581, 1594, 1592,
	2529, 1454, 1589, 2524, 1587, 2531, 1585, 23, 556, 16,
	564, 57, 1876, 1502, 1537, 1198, 1535, 2341, 489, 488,
	1524, 563, 56, 1513, 1618, 2627, 638, 1772, 2585, 1510,
	1455, 554, 55, 1498, 2551, 1245, 1642, 1490, 2200, 3164,
	2562, 2564, 2565, 1239, 1615, 1772, 2595, 1485, 2582, 498,
	1297, 2907, 2906, 2570, 1714, 2577, 2182, 3001, 2183, 1458,
	2012, 498, 562, 12, 2729, 490, 491, 973, 1457, 2584,
	1618, 1618, 2869, 1118, 2055, 24, 2623, 1453, 2164, 1506,
	2643, 2648, 2619, 2592, 496, 553, 50, 2594, 1618, 1618,
	2050, 1456, 560, 47, 2044, 30, 2832, 2020, 1990, 2833,
	496, 3040, 21, 1380, 2844, 2688, 1238, 1385, 2201, 1642,
	1454, 561, 48, 1995, 2620, 552, 49, 1615, 2628, 1618,
	559, 7, 2694, 1995, 2011, 2631, 558, 6, 2636, 2633,
	2634, 1298, 2835, 129, 2009, 20, 498, 498, 3017, 498,
	1507, 1508, 2838, 2698, 498, 19, 1681, 1682, 912, 1503,
	557, 38, 15, 2650, 2340, 1642, 1642, 973, 2808, 973,
	551, 37, 959, 1615, 1615, 2029, 2015, 584, 2709, 2663,
	913, 1307, 1308, 1642, 1642, 1504, 1301, 1457, 2399, 498,
	2400, 1615, 1615, 2047, 16, 2017, 57, 3075, 2733, 2722,
	2685, 2880, 2654, 3175, 2113, 2095, 2247, 56, 2726, 959,
	498, 498, 2084, 2024, 1642, 2721, 1948, 55, 2416, 2668,
	2417, 498, 1615, 2725, 973, 498, 498, 973, 498, 2704,
	1686, 1610, 2496, 1309, 2703, 2706, 498, 2712, 3190, 1377,
	2716, 2639, 2718, 2748, 973, 2711, 607, 2834, 12, 2286,
	2287, 1307, 1308, 2566, 2723, 2441, 2505, 2678, 2727, 2680,
	1229, 914, 1509, 2776, 2735, 1228, 2451, 2763, 2734, 2758,
	2176, 50, 2176, 2175, 2177, 934, 1881, 1856, 47, 1268,
	2778, 2558, 1267, 934, 934, 1375, 1373, 934, 2945, 498,
	1689, 2746, 2747, 2898, 2772, 2755, 2737, 48, 1307, 1308,
	2713, 49, 2751, 2759, 618, 2454, 7, 931, 2756, 545,
	2452, 934, 6, 2099, 1761, 931, 931, 2764, 1564, 931,
	1280, 2000, 1279, 1310, 1262, 930, 1258, 1255, 1241, 1199,
	1467, 897, 933, 930, 930, 496, 38, 930, 702, 2961,
	1274, 2676, 3086, 931, 689, 2179, 37, 2390, 498, 1726,
	1309, 1242, 1544, 1549, 1728, 2346, 1618, 1969, 973, 3069,
	973, 930, 2786, 2256, 2119, 3023, 2927, 1878, 498, 498,
	498, 2799, 1393, 932, 53, 1450, 773, 854, 2330, 2826,
	2662, 932, 932, 498, 2078, 932, 2077, 976, 498, 1698,
	498, 778, 1908, 498, 498, 498, 498, 498, 1614, 781,
	498, 498, 959, 2810, 2811, 1616, 973, 2823, 784, 932,
	959, 783, 2847, 782, 1617, 2824, 1395, 780, 498, 498,
	1613, 2815, 2845, 2813, 2819, 2087, 2117, 680, 2857, 1702,
	1838, 2816, 959, 2870, 1873, 2862, 2251, 1390, 2814, 754,
	775, 1642, 498, 1871, 1185, 753, 2876, 2351, 1929, 1615,
	2468, 498, 498, 959, 959, 2653, 2864, 2893, 2885, 2890,
	1757, 2192, 1754, 515, 2892, 2283, 1151, 1934, 479, 2879,
	1927, 1923, 1286, 1366, 2118, 2889, 2916, 2495, 1221, 2868,
	757, 2465, 1836, 1382, 2899, 2226, 2362, 2477, 2891, 2150,
	1765, 2364, 1065, 911, 496, 1543, 973, 910, 2509, 2919,
	909, 2902, 496, 2901, 2897, 2865, 1098, 3092, 3089, 2915,
	2668, 1692, 2170, 1359, 769, 741, 2331, 2439, 1091, 1569,
	1569, 2939, 3039, 1358, 893, 3032, 496, 1211, 496, 1210,
	496, 2809, 973, 1209, 545, 2375, 498, 3185, 498, 2673,
	973, 498, 171, 2822, 2668, 2000, 168, 2924, 170, 498,
	169, 2425, 82, 2935, 34, 973, 2668, 33, 107, 106,
	105, 104, 2948, 2856, 103, 102, 101, 100, 2940, 2941,
	99, 2861, 98, 97, 96, 95, 2947, 2966, 2965, 2943,
	2967, 2946, 94, 2332, 638, 93, 479, 1065, 589, 92,
	91, 90, 89, 88, 2000, 498, 87, 498, 479, 1065,
	959, 86, 965, 496, 2964, 498, 85, 84, 638, 634,
	631, 81, 80, 2944, 2359, 1618, 2986, 2473, 2988, 31,
	26, 111, 2992, 112, 2974, 25, 77, 2997, 973, 76,
	29, 18, 11, 3005, 17, 22, 2998, 134, 133, 132,
	131, 130, 638, 2996, 3003, 14, 3002, 496, 498, 13,
	126, 128, 479, 496, 498, 496, 127, 496, 2725, 496,
	2739, 496, 498, 125, 124, 934, 123, 1618, 122, 121,
	3013, 1742, 10, 1743, 3035, 2465, 8, 3029, 3016, 110,
	9, 2668, 496, 2910, 3021, 3026, 2511, 70, 71, 27,
	498, 498, 2429, 3028, 43, 42, 498, 931, 41, 2429,
	1642, 109, 3050, 934, 3052, 162, 1842, 959, 1615, 161,
	160, 2000, 498, 638, 2668, 930, 2668, 959, 959, 159,
	2668, 498, 3037, 498, 1380, 498, 155, 2975, 2976, 3044,
	3072, 154, 158, 505, 3056, 931, 3054, 3057, 156, 157,
	3063, 3064, 3062, 153, 498, 3065, 1618, 498, 120, 498,
	3061, 973, 1642, 930, 164, 163, 151, 148, 3095, 3096,
	1615, 3094, 3082, 932, 3098, 1147, 3099, 147, 3101, 150,
	1933, 152, 3084, 3088, 149, 146, 165, 119, 118, 3100,
	117, 3106, 116, 115, 114, 498, 508, 3104, 5, 2,
	1, 0, 0, 0, 0, 0, 3103, 0, 0, 0,
	0, 932, 934, 3118, 3120, 3119, 0, 0, 498, 0,
	0, 0, 0, 3145, 0, 3146, 498, 0, 0, 0,
	0, 3133, 0, 0, 517, 3144, 3152, 0, 0, 0,
	3149, 1642, 498, 0, 931, 3150, 3151, 0, 514, 1615,
	0, 0, 0, 3147, 618, 3159, 545, 3158, 3161, 2753,
	1929, 1929, 930, 3165, 0, 0, 3168, 0, 3094, 3166,
	0, 933, 1067, 0, 1071, 3043, 1077, 0, 0, 0,
	3174, 545, 3171, 3172, 0, 2568, 0, 0, 933, 0,
	545, 3182, 3181, 496, 0, 2574, 0, 3189, 3188, 0,
	2003, 0, 0, 0, 2668, 0, 3193, 3194, 496, 2145,
	932, 2896, 3195, 0, 0, 0, 496, 0, 0, 0,
	40, 0, 0, 0, 3202, 0, 0, 516, 496, 0,
	0, 0, 3198, 3199, 0, 44, 0, 0, 0, 0,
	3204, 0, 496, 0, 0, 0, 0, 0, 479, 2061,
	0, 2668, 0, 0, 0, 0, 0, 0, 0, 1929,
	1929, 1929, 0, 2074, 2146, 934, 1065, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 1183, 0, 934, 2812, 0, 0, 0,
	1188, 0, 0, 2147, 0, 0, 2003, 931, 545, 0,
	496, 2119, 581, 496, 934, 496, 2656, 496, 0, 496,
	496, 0, 965, 0, 0, 930, 0, 931, 0, 741,
	0, 2848, 0, 741, 0, 596, 0, 2003, 0, 0,
	0, 2858, 2859, 0, 511, 930, 931, 0, 934, 0,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 509,
	934, 0, 0, 0, 930, 0, 2878, 0, 0, 0,
	0, 2991, 0, 932, 0, 0, 0, 0, 0, 0,
	931, 0, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 931, 932, 506, 0, 0, 0, 930, 0,
	0, 0, 0, 0, 589, 0, 0, 0, 0, 0,
	930, 0, 932, 0, 0, 0, 0, 513, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 0, 0,
	1360, 1361, 1362, 1363, 1364, 496, 932, 0, 0, 0,
	0, 0, 64, 0, 0, 1065, 0, 1065, 932, 2839,
	0, 0, 0, 971, 0, 0, 1058, 0, 1379, 0,
	0, 0, 0, 1391, 496, 496, 496, 0, 496, 0,
	138, 66, 0, 67, 0, 934, 2836, 0, 0, 2829,
	0, 0, 1933, 1933, 0, 0, 0, 496, 0, 0,
	0, 172, 2827, 0, 0, 0, 0, 2831, 0, 0,
	0, 0, 580, 0, 0, 108, 0, 931, 934, 0,
	934, 1307, 1308, 0, 934, 0, 2837, 0, 0, 0,
	0, 0, 0, 0, 0, 930, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 1310, 0, 1929, 1929,
	931, 0, 931, 3000, 2830, 0, 931, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 930, 0,
	930, 0, 0, 1309, 930, 0, 0, 173, 0, 0,
	0, 0, 0, 932, 0, 0, 166, 0, 0, 0,
	0, 1933, 1933, 1933, 167, 1065, 1099, 1102, 0, 2818,
	0, 0, 0, 0, 0, 1444, 1444, 1444, 0, 0,
	0, 0, 0, 0, 0, 137, 932, 0, 932, 0,
	0, 0, 932, 0, 0, 0, 0, 1929, 1929, 1929,
	1929, 1929, 1929, 1929, 1929, 1929, 1929, 1929, 1929, 1929,
	1929, 1929, 1929, 1929, 1929, 1929, 0, 1929, 0, 0,
	1315, 0, 0, 0, 0, 0, 0, 2832, 0, 0,
	2833, 0, 0, 0, 0, 0, 0, 0, 0, 3066,
	0, 3067, 0, 0, 0, 0, 0, 1337, 1338, 1339,
	933, 0, 0, 0, 0, 0, 0, 0, 933, 933,
	0, 499, 933, 2835, 0, 3083, 0, 545, 934, 0,
	545, 0, 0, 2838, 0, 808, 0, 545, 0, 0,
	545, 545, 0, 0, 0, 0, 1467, 0, 0, 0,
	496, 2003, 2371, 0, 2223, 2224, 2003, 1330, 0, 2371,
	931, 0, 209, 0, 0, 2925, 2003, 2371, 2003, 2371,
	2371, 0, 0, 0, 0, 934, 0, 0, 930, 0,
	496, 0, 1230, 0, 0, 0, 3143, 1543, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 496,
	0, 2925, 0, 965, 0, 0, 0, 931, 0, 1775,
	0, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1775, 930, 932, 0, 2834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1569,
	1331, 1569, 0, 496, 0, 0, 0, 496, 0, 496,
	0, 0, 0, 2309, 2310, 2311, 0, 0, 496, 0,
	496, 0, 0, 0, 965, 0, 0, 0, 0, 2003,
	0, 545, 0, 932, 0, 0, 0, 0, 2003, 0,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 0, 2493, 1065, 1058, 0, 0,
	1933, 1933, 0, 0, 0, 0, 2286, 2287, 0, 2304,
	2305, 2306, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 960, 2769, 0, 974, 974, 0, 0,
	0, 0, 492, 0, 0, 0, 0, 961, 0, 0,
	975, 975, 0, 741, 741, 2528, 0, 0, 0, 0,
	1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 0,
	496, 0, 0, 0, 0, 0, 2301, 0, 0, 0,
	2286, 2287, 0, 2304, 2305, 2306, 0, 0, 0, 1933,
	1933, 1933, 1933, 1933, 1933, 1933, 1933, 1933, 1933, 1933,
	1933, 1933, 1933, 1933, 1933, 1933, 1933, 1933, 0, 1933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2579, 0, 0, 0, 1755,
	1775, 1760, 0, 0, 0, 0, 0, 1767, 0, 0,
	2301, 0, 0, 0, 0, 2292, 0, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 0, 1817, 0, 1819, 1820, 1821, 1822, 0,
	0, 0, 0, 2307, 0, 942, 0, 0, 0, 0,
	969, 0, 0, 0, 1845, 0, 0, 0, 0, 2292,
	933, 0, 0, 0, 0, 0, 545, 0, 0, 1379,
	0, 0, 2302, 1869, 0, 0, 0, 0, 545, 0,
	0, 0, 0, 2308, 0, 0, 0, 0, 0, 0,
	0, 0, 2539, 2540, 0, 0, 0, 0, 2670, 0,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 2307, 0, 0,
	0, 0, 0, 0, 1925, 0, 1936, 1938, 1943, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1929,
	0, 0, 0, 0, 0, 1528, 2302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2003, 1569, 2303, 1569, 0, 0, 0,
	0, 496, 0, 0, 0, 0, 1929, 0, 0, 0,
	0, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604,
	2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614,
	0, 2618, 960, 960, 0, 0, 2003, 933, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 596, 2303,
	2063, 0, 2065, 960, 960, 0, 0, 0, 1065, 0,
	960, 0, 965, 496, 0, 496, 0, 961, 961, 0,
	0, 0, 0, 496, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 1602, 0, 0, 0, 1606, 2298, 2299,
	2300, 0, 1929, 0, 0, 2297, 2295, 2296, 2288, 2289,
	2290, 2291, 2293, 2294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2286, 2287, 0, 2304, 2305,
	2306, 0, 0, 0, 0, 0, 2787, 0, 0, 0,
	0, 0, 0, 2768, 0, 0, 0, 1719, 1720, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2298, 2299, 2300, 0, 0, 0, 0, 2297,
	2295, 2296, 2288, 2289, 2290, 2291, 2293, 2294, 0, 0,
	0, 0, 0, 0, 0, 2301, 0, 0, 960, 0,
	933, 0, 0, 1089, 0, 1065, 0, 0, 0, 1107,
	0, 0, 961, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 2003, 2371, 2003, 0, 0,
	0, 0, 0, 1130, 1130, 1130, 969, 0, 0, 2670,
	1065, 0, 0, 0, 0, 2003, 0, 2371, 0, 0,
	1065, 1065, 496, 2003, 2371, 0, 0, 496, 496, 0,
	0, 0, 0, 0, 2292, 0, 0, 0, 0, 0,
	0, 0, 0, 2670, 0, 1065, 2074, 0, 0, 0,
	0, 0, 0, 0, 0, 2670, 0, 0, 0, 0,
	0, 1182, 0, 0, 0, 0, 0, 0, 0, 2003,
	0, 1933, 0, 0, 0, 0, 0, 0, 2493, 2493,
	0, 0, 2307, 0, 0, 1377, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 578, 0, 0, 0, 0, 1933, 0,
	0, 2302, 0, 0, 40, 0, 0, 0, 2206, 2207,
	0, 0, 0, 0, 2213, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2227, 2228, 0, 0, 0, 0, 1869,
	0, 0, 0, 1273, 0, 0, 0, 2235, 577, 0,
	0, 0, 0, 2003, 0, 2371, 0, 0, 2950, 0,
	0, 0, 0, 0, 0, 0, 496, 0, 0, 0,
	2670, 2254, 0, 0, 0, 0, 0, 579, 0, 0,
	0, 0, 0, 2267, 2303, 59, 581, 0, 0, 0,
	60, 0, 0, 0, 1933, 774, 74, 0, 0, 2043,
	0, 0, 0, 2670, 0, 2670, 0, 0, 0, 2670,
	0, 0, 496, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 63, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1943, 1943, 1943, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 2336, 74, 0, 0, 1307,
	1308, 0, 0, 0, 0, 2579, 0, 0, 0, 0,
	0, 545, 0, 0, 0, 0, 0, 0, 0, 2950,
	0, 2129, 0, 0, 1310, 0, 0, 2298, 2299, 2300,
	0, 0, 0, 2932, 2297, 2295, 2296, 2288, 2289, 2290,
	2291, 2293, 2294, 0, 0, 0, 0, 2003, 2371, 0,
	2393, 1309, 0, 496, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 718, 64, 0, 0, 2371,
	2956, 0, 0, 731, 0, 0, 0, 0, 1065, 0,
	1065, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 138, 66, 0, 67, 974, 0,
	0, 3080, 0, 2542, 1065, 961, 496, 0, 0, 0,
	921, 74, 975, 0, 0, 172, 0, 974, 1332, 1333,
	1334, 1335, 0, 2670, 1474, 0, 580, 0, 1315, 108,
	0, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2579, 0, 2466, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 0, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 0, 0, 1065, 3020, 0, 0, 0,
	2670, 0, 0, 2003, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2950,
	960, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 741, 741, 0, 961, 1330, 0, 0, 167, 960,
	209, 0, 0, 960, 741, 0, 0, 0, 0, 960,
	0, 0, 209, 961, 0, 0, 0, 961, 0, 137,
	2530, 0, 0, 961, 1767, 0, 0, 0, 0, 0,
	2534, 2535, 0, 0, 2538, 0, 0, 0, 2541, 0,
	0, 0, 0, 0, 974, 0, 0, 2545, 0, 0,
	0, 0, 0, 960, 960, 0, 2552, 0, 975, 2336,
	0, 1336, 0, 0, 0, 0, 209, 961, 961, 0,
	0, 0, 0, 1541, 0, 0, 0, 0, 1331, 2572,
	0, 1552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2586, 2587, 0, 2588,
	2589, 2590, 0, 0, 2591, 0, 0, 1576, 0, 1576,
	2593, 0, 0, 0, 0, 0, 2286, 2287, 0, 2304,
	2305, 2306, 0, 0, 0, 0, 0, 145, 0, 0,
	0, 974, 39, 0, 2548, 0, 0, 0, 0, 0,
	0, 2621, 2622, 40, 140, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	2286, 2287, 0, 2304, 2305, 2306, 0, 2638, 0, 0,
	0, 0, 0, 46, 142, 0, 2301, 0, 2547, 0,
	0, 0, 1679, 0, 0, 45, 0, 51, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 2664, 0, 52, 0, 0,
	0, 54, 0, 74, 974, 74, 58, 74, 0, 143,
	2301, 0, 0, 0, 59, 72, 1725, 2687, 975, 60,
	61, 0, 1731, 0, 1732, 0, 1733, 0, 1734, 2692,
	1735, 0, 0, 0, 2693, 2292, 0, 0, 0, 2696,
	0, 0, 0, 0, 62, 0, 0, 0, 2411, 0,
	0, 1745, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 974, 0, 0, 0, 0, 2292,
	0, 0, 0, 2307, 0, 1444, 0, 0, 975, 0,
	974, 0, 0, 0, 2445, 0, 2736, 0, 2448, 2449,
	2450, 0, 0, 0, 975, 0, 0, 0, 0, 1307,
	1308, 0, 2302, 0, 74, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 960, 0, 2307, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 974, 0, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 2499, 0,
	0, 975, 2765, 2766, 0, 64, 2302, 0, 2770, 2771,
	0, 1309, 65, 2774, 2775, 0, 0, 0, 0, 1329,
	2779, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 138, 66, 0, 67, 0, 68, 2784,
	0, 0, 144, 0, 0, 2303, 2788, 69, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 960, 960, 960,
	0, 0, 960, 2537, 0, 83, 0, 0, 108, 0,
	0, 961, 961, 961, 0, 0, 961, 141, 1332, 1333,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1315, 2303,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 718,
	0, 0, 1987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 1337, 1338, 1339, 0, 0,
	0, 1369, 139, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 0, 2846, 0, 0, 1378, 166,
	0, 0, 1384, 0, 0, 0, 0, 167, 2298, 2299,
	2300, 969, 0, 0, 0, 2297, 2295, 2296, 2288, 2289,
	2290, 2291, 2293, 2294, 0, 1330, 0, 0, 137, 0,
	0, 4, 1307, 1308, 0, 0, 0, 974, 1552, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 975, 2298, 2299, 2300, 0, 0, 1310, 0, 2297,
	2295, 2296, 2288, 2289, 2290, 2291, 2293, 2294, 0, 2122,
	0, 0, 1130, 0, 1130, 0, 1130, 0, 969, 969,
	0, 0, 0, 0, 1309, 0, 0, 0, 0, 0,
	0, 1336, 1329, 2920, 2921, 2922, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2930,
	2931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2938, 0, 0, 2536, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 1465, 0,
	1468, 1332, 1333, 1334, 1335, 0, 0, 0, 0, 0,
	0, 1315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2973,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 1338,
	1339, 0, 0, 0, 0, 0, 0, 2984, 0, 0,
	0, 0, 0, 0, 2180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2745, 0, 0, 0, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0,
	0, 0, 0, 2188, 969, 2190, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 974, 0, 0, 0, 0,
	0, 3031, 0, 0, 3034, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 974, 0, 0, 3047,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350,
	1351, 1352, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 1356, 0, 0, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 974, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 974, 1309, 0, 0, 975, 0,
	0, 974, 0, 1329, 0, 0, 3117, 3117, 975, 0,
	1326, 0, 0, 0, 0, 975, 0, 2866, 0, 0,
	960, 0, 0, 3134, 960, 960, 960, 0, 0, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 961, 961,
	961, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317,
	3117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 1333, 1334, 1335, 0, 0, 2903, 2904,
	0, 0, 1315, 0, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 2368,
	0, 0, 0, 0, 0, 1347, 1357, 0, 0, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 0, 0, 1307,
	1308, 3117, 1340, 1341, 1342, 1350, 1351, 1352, 0, 1107,
	1353, 1354, 0, 1307, 1308, 0, 0, 1343, 1324, 1325,
	0, 0, 718, 0, 1310, 718, 718, 1356, 0, 0,
	0, 0, 1345, 0, 0, 0, 0, 0, 1310, 1330,
	0, 0, 0, 2424, 0, 0, 0, 0, 0, 0,
	0, 1309, 0, 0, 0, 1355, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 1309, 1326, 974, 1344, 0,
	0, 0, 2442, 1329, 0, 0, 2446, 974, 0, 0,
	0, 975, 0, 1835, 0, 0, 0, 2455, 0, 2457,
	0, 975, 0, 0, 0, 0, 731, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 1378,
	0, 0, 0, 1378, 0, 0, 0, 2212, 1332, 1333,
	1334, 1335, 1331, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 1332, 1333, 1334, 1335, 0, 0, 0, 0,
	0, 0, 1315, 0, 0, 1348, 0, 0, 0, 0,
	0, 1347, 1357, 0, 0, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	1338, 1339, 0, 0, 0, 0, 1353, 1354, 0, 921,
	0, 0, 0, 0, 1324, 1325, 0, 0, 974, 2532,
	0, 0, 0, 0, 0, 0, 1468, 0, 1345, 0,
	0, 0, 975, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 1330,
	0, 1355, 1346, 0, 0, 1321, 1322, 1328, 1327, 1323,
	1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316,
	1317, 0, 0, 0, 74, 2272, 0, 0, 0, 2273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 974, 0,
	974, 0, 0, 960, 0, 1336, 0, 0, 1331, 0,
	0, 0, 975, 0, 975, 0, 0, 961, 0, 0,
	0, 74, 1331, 74, 0, 0, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 974, 74, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 975, 0, 0, 974, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 1346, 0,
	0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0,
	0, 577, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2710, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 0, 0, 0, 0, 0, 0, 0, 59, 581,
	0, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 974,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 975, 0, 63, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2757, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 2760, 960, 0, 0, 0, 974, 0, 0,
	0, 960, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 975, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 1835, 960, 0, 0, 0, 0, 0, 0,
	2286, 2287, 0, 2304, 2305, 2306, 0, 961, 0, 0,
	0, 0, 0, 1378, 960, 960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 974, 0, 0,
	2301, 0, 0, 0, 0, 0, 0, 138, 66, 0,
	67, 975, 0, 0, 0, 0, 0, 0, 0, 1307,
	1308, 0, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 0, 974, 0, 0, 0, 0, 0, 580,
	0, 974, 108, 0, 1310, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 975, 974, 0, 0, 0,
	0, 2860, 0, 0, 174, 0, 1107, 0, 921, 2292,
	975, 1309, 0, 0, 0, 0, 921, 921, 0, 1329,
	921, 0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342,
	1350, 1351, 1352, 0, 0, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 173, 0, 0, 0, 0, 1310,
	0, 0, 1356, 166, 0, 961, 0, 2307, 0, 0,
	0, 167, 0, 2205, 0, 0, 0, 0, 0, 974,
	0, 0, 0, 74, 0, 74, 1309, 0, 1332, 1333,
	1334, 1335, 137, 975, 1329, 0, 2302, 0, 1315, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 1332, 1333, 1334, 1335, 0, 960, 0,
	0, 74, 0, 1315, 0, 2957, 0, 0, 960, 960,
	0, 0, 961, 0, 0, 1330, 0, 731, 0, 2303,
	0, 0, 961, 961, 0, 0, 1347, 1357, 0, 0,
	1337, 1338, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 2993, 0, 2995, 0, 0, 975, 0, 0, 1324,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 0, 0,
	1330, 1336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2298, 2299, 2300, 0, 0, 0, 0, 2297,
	2295, 2296, 2288, 2289, 2290, 2291, 2293, 2294, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 3048, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3068, 0, 0, 0, 0, 1348, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3085, 0, 0, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 0, 0, 1321, 1322, 1328, 1327,
	1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314,
	1316, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1154, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 962,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 292,
	0, 0, 0, 0, 0, 921, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 74, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 860, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	859, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 861, 862, 342, 343, 344, 863, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 864, 353, 354, 865, 0, 355, 356, 0,
	0, 357, 0, 358, 937, 936, 359, 360, 362, 363,
	361, 866, 364, 365, 367, 366, 0, 0, 867, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 921, 372,
	373, 0, 0, 374, 242, 868, 375, 869, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 870, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 172, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 871, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 74, 446, 447, 174,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 1157,
	256, 0, 472, 471, 257, 0, 0, 0, 166, 473,
	474, 258, 475, 476, 477, 0, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1835, 259, 260, 261,
	262, 977, 263, 978, 979, 980, 981, 215, 982, 983,
	984, 985, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 986, 270, 271, 272, 273, 274, 275, 276,
	987, 988, 277, 220, 221, 222, 989, 278, 223, 990,
	962, 991, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 992, 288, 0, 289, 290, 993, 856, 291,
	292, 994, 995, 997, 996, 998, 999, 1000, 293, 294,
	500, 295, 296, 297, 224, 225, 1001, 298, 1002, 299,
	1003, 300, 1004, 1005, 301, 302, 303, 1006, 304, 1007,
	305, 306, 1008, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 1009, 857, 1010, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 1011, 322,
	1012, 1013, 858, 323, 1014, 324, 230, 1015, 231, 1016,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 860,
	1017, 238, 332, 0, 0, 0, 1018, 331, 333, 340,
	1019, 859, 334, 235, 336, 335, 337, 338, 339, 236,
	1020, 237, 1021, 341, 861, 862, 342, 343, 344, 863,
	345, 346, 0, 0, 347, 348, 349, 1022, 351, 350,
	1023, 352, 239, 864, 353, 354, 865, 1024, 355, 356,
	1025, 1026, 357, 0, 358, 937, 936, 359, 360, 362,
	363, 361, 866, 364, 365, 367, 366, 1027, 1028, 867,
	1029, 240, 241, 368, 369, 1030, 370, 371, 1031, 1032,
	372, 373, 1033, 1034, 374, 242, 868, 375, 869, 243,
	376, 377, 378, 379, 380, 381, 382, 1035, 383, 244,
	384, 245, 385, 1036, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 1037, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 1038, 406, 870,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 1039, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 1040, 431, 412, 413, 432, 871,
	433, 248, 434, 435, 1041, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 1042, 446, 447,
	1043, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	1044, 250, 251, 252, 455, 1045, 1046, 456, 457, 253,
	254, 1047, 458, 459, 0, 460, 461, 1048, 1049, 462,
	463, 464, 466, 1050, 467, 1051, 465, 468, 469, 470,
	255, 256, 1052, 472, 471, 257, 1053, 1054, 1055, 1056,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 1974, 0, 0, 0,
	0, 0, 0, 0, 0, 1975, 259, 260, 261, 262,
	977, 263, 978, 979, 980, 981, 215, 982, 983, 984,
	985, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 986, 270, 271, 272, 273, 274, 275, 276, 987,
	988, 277, 220, 221, 222, 989, 278, 223, 990, 962,
	991, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 992, 288, 0, 289, 290, 993, 856, 291, 292,
	994, 995, 997, 996, 998, 999, 1000, 293, 294, 500,
	295, 296, 297, 224, 225, 1001, 298, 1002, 299, 1003,
	300, 1004, 1005, 301, 302, 303, 1006, 304, 1007, 305,
	306, 1008, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 1009, 857, 1010, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 1011, 322, 1012,
	1013, 858, 323, 1014, 324, 230, 1015, 231, 1016, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 860, 1017,
	238, 332, 0, 0, 0, 1018, 331, 333, 340, 1019,
	859, 334, 235, 336, 335, 337, 338, 339, 236, 1020,
	237, 1021, 341, 861, 862, 342, 343, 344, 863, 345,
	346, 0, 0, 347, 348, 349, 1022, 351, 350, 1023,
	352, 239, 864, 353, 354, 865, 1024, 355, 356, 1025,
	1026, 357, 0, 358, 937, 936, 359, 360, 362, 363,
	361, 866, 364, 365, 367, 366, 1027, 1028, 867, 1029,
	240, 241, 368, 369, 1030, 370, 371, 1031, 1032, 372,
	373, 1033, 1034, 374, 242, 868, 375, 869, 243, 376,
	377, 378, 379, 380, 381, 382, 1035, 383, 244, 384,
	245, 385, 1036, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 1037, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 1038, 406, 870, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 1039, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 1040, 431, 412, 413, 432, 871, 433,
	248, 434, 435, 1041, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 1042, 446, 447, 1043,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 1044,
	250, 251, 252, 455, 1045, 1046, 456, 457, 253, 254,
	1047, 458, 459, 0, 460, 461, 1048, 1049, 462, 463,
	464, 466, 1050, 467, 1051, 465, 468, 469, 470, 255,
	256, 1052, 472, 471, 257, 1053, 1054, 1055, 1056, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2817, 259, 260, 261, 262,
	977, 263, 978, 979, 980, 981, 215, 982, 983, 984,
	985, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 986, 270, 271, 272, 273, 274, 275, 276, 987,
	988, 277, 220, 221, 222, 989, 278, 223, 990, 962,
	991, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 992, 288, 0, 289, 290, 993, 856, 291, 292,
	994, 995, 997, 996, 998, 999, 1000, 293, 294, 500,
	295, 296, 297, 224, 225, 1001, 298, 1002, 299, 1003,
	300, 1004, 1005, 301, 302, 303, 1006, 304, 1007, 305,
	306, 1008, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 1009, 857, 1010, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 1011, 322, 1012,
	1013, 858, 323, 1014, 324, 230, 1015, 231, 1016, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 860, 1017,
	238, 332, 0, 0, 0, 1018, 331, 333, 340, 1019,
	859, 334, 235, 336, 335, 337, 338, 339, 236, 1020,
	237, 1021, 341, 861, 862, 342, 343, 344, 863, 345,
	346, 0, 0, 347, 348, 349, 1022, 351, 350, 1023,
	352, 239, 864, 353, 354, 865, 1024, 355, 356, 1025,
	1026, 357, 0, 358, 937, 936, 359, 360, 362, 363,
	361, 866, 364, 365, 367, 366, 1027, 1028, 867, 1029,
	240, 241, 368, 369, 1030, 370, 371, 1031, 1032, 372,
	373, 1033, 1034, 374, 242, 868, 375, 869, 243, 376,
	377, 378, 379, 380, 381, 382, 1035, 383, 244, 384,
	245, 385, 1036, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 1037, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 1038, 406, 870, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 1039, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 1040, 431, 412, 413, 432, 871, 433,
	248, 434, 435, 1041, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 1042, 446, 447, 1043,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 1044,
	250, 251, 252, 455, 1045, 1046, 456, 457, 253, 254,
	1047, 458, 459, 0, 460, 461, 1048, 1049, 462, 463,
	464, 466, 1050, 467, 1051, 465, 468, 469, 470, 255,
	256, 1052, 472, 471, 257, 1053, 1054, 1055, 1056, 473,
	474, 258, 475, 476, 477, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2926, 259, 260, 261, 262, 977, 263, 978, 979, 980,
	981, 215, 982, 983, 984, 985, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 986, 270, 271, 272,
	273, 274, 275, 276, 987, 988, 277, 220, 221, 222,
	989, 278, 223, 990, 962, 991, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 992, 288, 0, 289,
	290, 993, 856, 291, 292, 994, 995, 997, 996, 998,
	999, 1000, 293, 294, 500, 295, 296, 297, 224, 225,
	1001, 298, 1002, 299, 1003, 300, 1004, 1005, 301, 302,
	303, 1006, 304, 1007, 305, 306, 1008, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 1009, 857, 1010,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 1011, 322, 1012, 1013, 858, 323, 1014, 324,
	230, 1015, 231, 1016, 325, 326, 327, 328, 329, 330,
	232, 233, 234, 860, 1017, 238, 332, 0, 0, 0,
	1018, 331, 333, 340, 1019, 859, 334, 235, 336, 335,
	337, 338, 339, 236, 1020, 237, 1021, 341, 861, 862,
	342, 343, 344, 863, 345, 346, 0, 0, 347, 348,
	349, 1022, 351, 350, 1023, 352, 239, 864, 353, 354,
	865, 1024, 355, 356, 1025, 1026, 357, 0, 358, 937,
	936, 359, 360, 362, 363, 361, 866, 364, 365, 367,
	366, 1027, 1028, 867, 1029, 240, 241, 368, 369, 1030,
	370, 371, 1031, 1032, 372, 373, 1033, 1034, 374, 242,
	868, 375, 869, 243, 376, 377, 378, 379, 380, 381,
	382, 1035, 383, 244, 384, 245, 385, 1036, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 1037, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 1038, 406, 870, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 1039, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 1040, 431,
	412, 413, 432, 871, 433, 248, 434, 435, 1041, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 1042, 446, 447, 1043, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 1044, 250, 251, 252, 455, 1045,
	1046, 456, 457, 253, 254, 1047, 458, 459, 0, 460,
	461, 1048, 1049, 462, 463, 464, 466, 1050, 467, 1051,
	465, 468, 469, 470, 255, 256, 1052, 472, 471, 257,
	1053, 1054, 1055, 1056, 473, 474, 258, 475, 476, 477,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2575, 259, 260, 261, 262,
	977, 263, 978, 979, 980, 981, 215, 982, 983, 984,
	985, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 986, 270, 271, 272, 273, 274, 275, 276, 987,
	988, 277, 220, 221, 222, 989, 278, 223, 990, 962,
	991, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 992, 288, 0, 289, 290, 993, 856, 291, 292,
	994, 995, 997, 996, 998, 999, 1000, 293, 294, 500,
	295, 296, 297, 224, 225, 1001, 298, 1002, 299, 1003,
	300, 1004, 1005, 301, 302, 303, 1006, 304, 1007, 305,
	306, 1008, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 1009, 857, 1010, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 1011, 322, 1012,
	1013, 858, 323, 1014, 324, 230, 1015, 231, 1016, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 860, 1017,
	238, 332, 0, 0, 0, 1018, 331, 333, 340, 1019,
	859, 334, 235, 336, 335, 337, 338, 339, 236, 1020,
	237, 1021, 341, 861, 862, 342, 343, 344, 863, 345,
	346, 0, 0, 347, 348, 349, 1022, 351, 350, 1023,
	352, 239, 864, 353, 354, 865, 1024, 355, 356, 1025,
	1026, 357, 0, 358, 937, 936, 359, 360, 362, 363,
	361, 866, 364, 365, 367, 366, 1027, 1028, 867, 1029,
	240, 241, 368, 369, 1030, 370, 371, 1031, 1032, 372,
	373, 1033, 1034, 374, 242, 868, 375, 869, 243, 376,
	377, 378, 379, 380, 381, 382, 1035, 383, 244, 384,
	245, 385, 1036, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 1037, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 1038, 406, 870, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 1039, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 1040, 431, 412, 413, 432, 871, 433,
	248, 434, 435, 1041, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 1042, 446, 447, 1043,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 1044,
	250, 251, 252, 455, 1045, 1046, 456, 457, 253, 254,
	1047, 458, 459, 0, 460, 461, 1048, 1049, 462, 463,
	464, 466, 1050, 467, 1051, 465, 468, 469, 470, 255,
	256, 1052, 472, 471, 257, 1053, 1054, 1055, 1056, 473,
	474, 258, 475, 476, 477, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2567, 259, 260, 261, 262, 977, 263, 978, 979, 980,
	981, 215, 982, 983, 984, 985, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 986, 270, 271, 272,
	273, 274, 275, 276, 987, 988, 277, 220, 221, 222,
	989, 278, 223, 990, 962, 991, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 992, 288, 0, 289,
	290, 993, 856, 291, 292, 994, 995, 997, 996, 998,
	999, 1000, 293, 294, 500, 295, 296, 297, 224, 225,
	1001, 298, 1002, 299, 1003, 300, 1004, 1005, 301, 302,
	303, 1006, 304, 1007, 305, 306, 1008, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 1009, 857, 1010,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 1011, 322, 1012, 1013, 858, 323, 1014, 324,
	230, 1015, 231, 1016, 325, 326, 327, 328, 329, 330,
	232, 233, 234, 860, 1017, 238, 332, 0, 0, 0,
	1018, 331, 333, 340, 1019, 859, 334, 235, 336, 335,
	337, 338, 339, 236, 1020, 237, 1021, 341, 861, 862,
	342, 343, 344, 863, 345, 346, 0, 0, 347, 348,
	349, 1022, 351, 350, 1023, 352, 239, 864, 353, 354,
	865, 1024, 355, 356, 1025, 1026, 357, 0, 358, 937,
	936, 359, 360, 362, 363, 361, 866, 364, 365, 367,
	366, 1027, 1028, 867, 1029, 240, 241, 368, 369, 1030,
	370, 371, 1031, 1032, 372, 373, 1033, 1034, 374, 242,
	868, 375, 869, 243, 376, 377, 378, 379, 380, 381,
	382, 1035, 383, 244, 384, 245, 385, 1036, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 1037, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 1038, 406, 870, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 1039, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 1040, 431,
	412, 413, 432, 871, 433, 248, 434, 435, 1041, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 1042, 446, 447, 1043, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 1044, 250, 251, 252, 455, 1045,
	1046, 456, 457, 253, 254, 1047, 458, 459, 0, 460,
	461, 1048, 1049, 462, 463, 464, 466, 1050, 467, 1051,
	465, 468, 469, 470, 255, 256, 1052, 472, 471, 257,
	1053, 1054, 1055, 1056, 473, 474, 258, 475, 476, 477,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2428, 259, 260, 261, 262,
	977, 263, 978, 979, 980, 981, 215, 982, 983, 984,
	985, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 986, 270, 271, 272, 273, 274, 275, 276, 987,
	988, 277, 220, 221, 222, 989, 278, 223, 990, 962,
	991, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 992, 288, 0, 289, 290, 993, 856, 291, 292,
	994, 995, 997, 996, 998, 999, 1000, 293, 294, 500,
	295, 296, 297, 224, 225, 1001, 298, 1002, 299, 1003,
	300, 1004, 1005, 301, 302, 303, 1006, 304, 1007, 305,
	306, 1008, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 1009, 857, 1010, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 1011, 322, 1012,
	1013, 858, 323, 1014, 324, 230, 1015, 231, 1016, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 860, 1017,
	238, 332, 0, 0, 0, 1018, 331, 333, 340, 1019,
	859, 334, 235, 336, 335, 337, 338, 339, 236, 1020,
	237, 1021, 341, 861, 862, 342, 343, 344, 863, 345,
	346, 0, 0, 347, 348, 349, 1022, 351, 350, 1023,
	352, 239, 864, 353, 354, 865, 1024, 355, 356, 1025,
	1026, 357, 0, 358, 937, 936, 359, 360, 362, 363,
	361, 866, 364, 365, 367, 366, 1027, 1028, 867, 1029,
	240, 241, 368, 369, 1030, 370, 371, 1031, 1032, 372,
	373, 1033, 1034, 374, 242, 868, 375, 869, 243, 376,
	377, 378, 379, 380, 381, 382, 1035, 383, 244, 384,
	245, 385, 1036, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 1037, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 1038, 406, 870, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 1039, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 1040, 431, 412, 413, 432, 871, 433,
	248, 434, 435, 1041, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 1042, 446, 447, 1043,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 1044,
	250, 251, 252, 455, 1045, 1046, 456, 457, 253, 254,
	1047, 458, 459, 0, 460, 461, 1048, 1049, 462, 463,
	464, 466, 1050, 467, 1051, 465, 468, 469, 470, 255,
	256, 1052, 472, 471, 257, 1053, 1054, 1055, 1056, 473,
	474, 258, 475, 476, 477, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1877, 259, 260, 261, 262, 977, 263, 978, 979, 980,
	981, 215, 982, 983, 984, 985, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 986, 270, 271, 272,
	273, 274, 275, 276, 987, 988, 277, 220, 221, 222,
	989, 278, 223, 990, 962, 991, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 992, 288, 0, 289,
	290, 993, 856, 291, 292, 994, 995, 997, 996, 998,
	999, 1000, 293, 294, 500, 295, 296, 297, 224, 225,
	1001, 298, 1002, 299, 1003, 300, 1004, 1005, 301, 302,
	303, 1006, 304, 1007, 305, 306, 1008, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 1009, 857, 1010,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 1011, 322, 1012, 1013, 858, 323, 1014, 324,
	230, 1015, 231, 1016, 325, 326, 327, 328, 329, 330,
	232, 233, 234, 860, 1017, 238, 332, 0, 0, 0,
	1018, 331, 333, 340, 1019, 859, 334, 235, 336, 335,
	337, 338, 339, 236, 1020, 237, 1021, 341, 861, 862,
	342, 343, 344, 863, 345, 346, 0, 0, 347, 348,
	349, 1022, 351, 350, 1023, 352, 239, 864, 353, 354,
	865, 1024, 355, 356, 1025, 1026, 357, 0, 358, 937,
	936, 359, 360, 362, 363, 361, 866, 364, 365, 367,
	366, 1027, 1028, 867, 1029, 240, 241, 368, 369, 1030,
	370, 371, 1031, 1032, 372, 373, 1033, 1034, 374, 242,
	868, 375, 869, 243, 376, 377, 378, 379, 380, 381,
	382, 1035, 383, 244, 384, 245, 385, 1036, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 1037, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 1038, 406, 870, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 1039, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 1040, 431,
	412, 413, 432, 871, 433, 248, 434, 435, 1041, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 1042, 446, 447, 1043, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 1044, 250, 251, 252, 455, 1045,
	1046, 456, 457, 253, 254, 1047, 458, 459, 0, 460,
	461, 1048, 1049, 462, 463, 464, 466, 1050, 467, 1051,
	465, 468, 469, 470, 255, 256, 1052, 472, 471, 257,
	1053, 1054, 1055, 1056, 473, 474, 258, 475, 476, 477,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1533, 259, 260, 261, 262,
	977, 263, 978, 979, 980, 981, 215, 982, 983, 984,
	985, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 986, 270, 271, 272, 273, 274, 275, 276, 987,
	988, 277, 220, 221, 222, 989, 278, 223, 990, 962,
	991, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 992, 288, 0, 289, 290, 993, 856, 291, 292,
	994, 995, 997, 996, 998, 999, 1000, 293, 294, 500,
	295, 296, 297, 224, 225, 1001, 298, 1002, 299, 1003,
	300, 1004, 1005, 301, 302, 303, 1006, 304, 1007, 305,
	306, 1008, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 1009, 857, 1010, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 1011, 322, 1012,
	1013, 858, 323, 1014, 324, 230, 1015, 231, 1016, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 860, 1017,
	238, 332, 0, 0, 0, 1018, 331, 333, 340, 1019,
	859, 334, 235, 336, 335, 337, 338, 339, 236, 1020,
	237, 1021, 341, 861, 862, 342, 343, 344, 863, 345,
	346, 0, 0, 347, 348, 349, 1022, 351, 350, 1023,
	352, 239, 864, 353, 354, 865, 1024, 355, 356, 1025,
	1026, 357, 0, 358, 937, 936, 359, 360, 362, 363,
	361, 866, 364, 365, 367, 366, 1027, 1028, 867, 1029,
	240, 241, 368, 369, 1030, 370, 371, 1031, 1032, 372,
	373, 1033, 1034, 374, 242, 868, 375, 869, 243, 376,
	377, 378, 379, 380, 381, 382, 1035, 383, 244, 384,
	245, 385, 1036, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 1037, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 1038, 406, 870, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 1039, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 1040, 431, 412, 413, 432, 871, 433,
	248, 434, 435, 1041, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 1042, 446, 447, 1043,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 1044,
	250, 251, 252, 455, 1045, 1046, 456, 457, 253, 254,
	1047, 458, 459, 0, 460, 461, 1048, 1049, 462, 463,
	464, 466, 1050, 467, 1051, 465, 468, 469, 470, 255,
	256, 1052, 472, 471, 257, 1053, 1054, 1055, 1056, 473,
	474, 258, 475, 476, 477, 1855, 0, 801, 760, 761,
	758, 759, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 1852, 263, 0,
	0, 0, 0, 847, 776, 0, 0, 0, 264, 265,
	266, 216, 816, 797, 827, 785, 826, 825, 0, 270,
	271, 787, 786, 274, 275, 276, 777, 846, 277, 873,
	872, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 292, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 500, 295, 829, 297,
	823, 822, 750, 298, 0, 299, 0, 300, 1853, 0,
	301, 821, 303, 0, 304, 0, 305, 306, 0, 755,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 767,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 820,
	818, 819, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 796, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 341,
	861, 862, 342, 343, 344, 863, 834, 835, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 752, 751, 359, 360, 362, 789, 361, 866, 364,
	365, 367, 366, 747, 0, 867, 768, 851, 824, 368,
	369, 0, 798, 799, 0, 0, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 879, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 880, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 817, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	756, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 790, 791, 792, 793, 423, 429, 430,
	844, 431, 412, 413, 432, 871, 433, 815, 794, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 855, 440,
	441, 442, 881, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 788, 0, 830, 831, 832,
	833, 0, 0, 456, 457, 882, 883, 766, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 845,
	467, 0, 795, 468, 469, 470, 255, 874, 1851, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 748, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 744, 745, 1854, 0, 0,
	0, 0, 0, 0, 772, 1850, 0, 0, 0, 732,
	770, 801, 760, 761, 758, 759, 771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 264, 265, 266, 216, 816, 797, 827, 785,
	826, 825, 0, 270, 271, 787, 786, 274, 275, 276,
	777, 846, 277, 873, 872, 222, 0, 278, 853, 0,
	836, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 856, 291,
	292, 839, 837, 838, 843, 841, 840, 842, 293, 294,
	500, 295, 829, 297, 823, 822, 750, 298, 0, 299,
	0, 300, 0, 0, 301, 821, 303, 0, 304, 0,
	305, 306, 0, 755, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 767, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 820, 818, 819, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 877, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 848, 849, 852, 860,
	0, 850, 796, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 341, 861, 862, 342, 343, 344, 863,
	834, 835, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 752, 751, 359, 360, 362,
	789, 361, 866, 364, 365, 367, 366, 747, 0, 867,
	768, 851, 824, 368, 369, 0, 798, 799, 0, 0,
	372, 373, 0, 0, 374, 242, 868, 375, 869, 879,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 880,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	817, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 870,
	407, 408, 409, 410, 756, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 172, 427, 428, 790, 791, 792,
	793, 423, 429, 430, 844, 431, 412, 413, 432, 871,
	433, 815, 794, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 855, 440, 441, 442, 881, 0, 446, 447,
	174, 448, 449, 450, 451, 452, 311, 453, 312, 788,
	0, 830, 831, 832, 833, 0, 0, 456, 457, 882,
	883, 766, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 845, 467, 0, 795, 468, 469, 470,
	1157, 874, 0, 472, 471, 257, 0, 0, 0, 166,
	473, 474, 258, 475, 476, 477, 748, 167, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 744,
	745, 801, 760, 761, 758, 759, 771, 0, 1383, 1381,
	0, 0, 0, 0, 770, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 264, 265, 266, 216, 816, 797, 827, 785,
	826, 825, 0, 270, 271, 787, 786, 274, 275, 276,
	777, 846, 277, 873, 872, 222, 0, 278, 853, 0,
	836, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 856, 291,
	292, 839, 837, 838, 843, 841, 840, 842, 293, 294,
	500, 295, 829, 297, 823, 822, 750, 298, 0, 299,
	0, 300, 0, 0, 301, 821, 303, 0, 304, 0,
	305, 306, 0, 755, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 767, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 820, 818, 819, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 877, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 848, 849, 852, 860,
	0, 850, 796, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 341, 861, 862, 342, 343, 344, 863,
	834, 835, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 752, 751, 359, 360, 362,
	789, 361, 866, 364, 365, 367, 366, 747, 0, 867,
	768, 851, 824, 368, 369, 0, 798, 799, 0, 0,
	372, 373, 0, 0, 374, 242, 868, 375, 869, 879,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 880,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	817, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 870,
	407, 408, 409, 410, 756, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 172, 427, 428, 790, 791, 792,
	793, 423, 429, 430, 844, 431, 412, 413, 432, 871,
	433, 815, 794, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 855, 440, 441, 442, 881, 0, 446, 447,
	174, 448, 449, 450, 451, 452, 311, 453, 312, 788,
	0, 830, 831, 832, 833, 0, 0, 456, 457, 882,
	883, 766, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 845, 467, 0, 795, 468, 469, 470,
	1157, 874, 0, 472, 471, 257, 0, 0, 0, 166,
	473, 474, 258, 475, 476, 477, 748, 167, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 744,
	745, 801, 760, 761, 758, 759, 771, 0, 1383, 2225,
	0, 0, 0, 0, 770, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 264, 265, 266, 216, 816, 797, 827, 785,
	826, 825, 0, 270, 271, 787, 786, 274, 275, 276,
	777, 846, 277, 873, 872, 222, 0, 278, 853, 0,
	836, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 856, 291,
	292, 839, 837, 838, 843, 841, 840, 842, 293, 294,
	500, 295, 829, 297, 823, 822, 750, 298, 0, 299,
	0, 300, 0, 0, 301, 821, 303, 0, 304, 0,
	305, 306, 0, 755, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 767, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 820, 818, 819, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 877, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 848, 849, 852, 860,
	0, 850, 796, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 341, 861, 862, 342, 343, 344, 863,
	834, 835, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 752, 751, 359, 360, 362,
	789, 361, 866, 364, 365, 367, 366, 747, 0, 867,
	768, 851, 824, 368, 369, 0, 798, 799, 0, 0,
	372, 373, 0, 0, 374, 242, 868, 375, 869, 879,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 880,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	817, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 870,
	407, 408, 409, 410, 756, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 172, 427, 428, 790, 791, 792,
	793, 423, 429, 430, 844, 431, 412, 413, 432, 871,
	433, 815, 794, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 855, 440, 441, 442, 881, 0, 446, 447,
	174, 448, 449, 450, 451, 452, 311, 453, 312, 788,
	0, 830, 831, 832, 833, 0, 0, 456, 457, 882,
	883, 766, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 845, 467, 0, 795, 468, 469, 470,
	1157, 874, 0, 472, 471, 257, 0, 0, 0, 166,
	473, 474, 258, 475, 476, 477, 748, 167, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 744,
	745, 801, 760, 761, 758, 759, 771, 0, 1383, 1381,
	0, 0, 0, 0, 770, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 264, 265, 266, 216, 816, 797, 827, 785,
	826, 825, 1939, 270, 271, 787, 786, 274, 275, 276,
	777, 846, 277, 873, 872, 222, 0, 278, 853, 0,
	836, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 856, 291,
	292, 839, 837, 838, 843, 841, 840, 842, 293, 294,
	500, 295, 829, 297, 823, 822, 750, 298, 0, 299,
	0, 300, 0, 0, 301, 821, 303, 0, 304, 0,
	305, 306, 0, 755, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 767, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 820, 818, 819, 0, 321, 0, 322,
	0, 1944, 858, 323, 0, 324, 877, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 848, 849, 852, 860,
	0, 850, 796, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 341, 861, 862, 342, 343, 344, 863,
	834, 835, 0, 0, 347, 348, 349, 0, 351, 350,
	1940, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 752, 751, 359, 360, 362,
	789, 361, 866, 364, 365, 367, 366, 747, 0, 867,
	768, 851, 824, 368, 369, 0, 798, 799, 0, 0,
	372, 373, 0, 0, 374, 242, 868, 375, 869, 879,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 880,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	817, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 870,
	407, 408, 409, 410, 756, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 790, 791, 792,
	793, 423, 429, 430, 844, 431, 412, 413, 432, 871,
	433, 815, 794, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 855, 440, 441, 442, 881, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 788,
	0, 830, 831, 832, 833, 0, 1941, 456, 457, 882,
	883, 766, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 845, 467, 0, 795, 468, 469, 470,
	255, 874, 0, 472, 471, 257, 0, 0, 0, 0,
	473, 474, 258, 475, 476, 477, 748, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 744,
	745, 801, 760, 761, 758, 759, 771, 0, 772, 0,
	0, 0, 0, 0, 770, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 264, 265, 266, 216, 816, 797, 827, 785,
	826, 825, 0, 270, 271, 787, 786, 274, 275, 276,
	777, 846, 277, 873, 872, 222, 0, 278, 853, 0,
	836, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 856, 291,
	292, 839, 837, 838, 843, 841, 840, 842, 293, 294,
	500, 295, 829, 297, 823, 822, 750, 298, 0, 299,
	0, 300, 0, 0, 301, 821, 303, 0, 304, 0,
	305, 306, 0, 755, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 767, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 820, 818, 819, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 877, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 848, 849, 852, 860,
	0, 850, 796, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 341, 861, 862, 342, 343, 344, 863,
	834, 835, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 752, 751, 359, 360, 362,
	789, 361, 866, 364, 365, 367, 366, 747, 2728, 867,
	768, 851, 824, 368, 369, 0, 798, 799, 0, 0,
	372, 373, 0, 0, 374, 242, 868, 375, 869, 879,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 880,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	817, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 870,
	407, 408, 409, 410, 756, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 790, 791, 792,
	793, 423, 429, 430, 844, 431, 412, 413, 432, 871,
	433, 815, 794, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 855, 440, 441, 442, 881, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 788,
	0, 830, 831, 832, 833, 0, 0, 456, 457, 882,
	883, 766, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 845, 467, 0, 795, 468, 469, 470,
	255, 874, 0, 472, 471, 257, 0, 0, 0, 0,
	473, 474, 258, 475, 476, 477, 748, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 744,
	745, 1445, 801, 760, 761, 758, 759, 771, 772, 0,
	0, 0, 0, 0, 770, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 847, 776,
	0, 0, 0, 264, 265, 266, 216, 816, 797, 827,
	785, 826, 825, 0, 270, 271, 787, 786, 274, 275,
	276, 777, 846, 277, 873, 872, 222, 0, 278, 853,
	0, 836, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 856,
	291, 292, 839, 837, 838, 843, 841, 840, 842, 293,
	294, 500, 295, 829, 297, 823, 822, 750, 298, 0,
	299, 0, 300, 0, 0, 301, 821, 303, 0, 304,
	0, 305, 306, 0, 755, 307, 308, 310, 313, 309,
	314, 315, 875, 876, 767, 857, 0, 0, 0, 0,
	0, 316, 317, 318, 820, 818, 819, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 877, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 848, 849, 852,
	860, 0, 850, 796, 0, 0, 0, 1769, 331, 333,
	340, 0, 859, 334, 809, 800, 810, 811, 812, 813,
	814, 0, 802, 0, 341, 861, 862, 342, 343, 344,
	863, 834, 835, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 878, 864, 353, 354, 865, 0, 355,
	356, 0, 0, 357, 0, 358, 752, 751, 359, 360,
	362, 789, 361, 866, 364, 365, 367, 366, 747, 0,
	867, 768, 851, 824, 368, 369, 0, 798, 799, 0,
	0, 372, 373, 0, 0, 374, 242, 868, 375, 869,
	879, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	880, 384, 245, 385, 1768, 386, 387, 388, 389, 390,
	391, 817, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	870, 407, 408, 409, 410, 756, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 790, 791,
	792, 793, 423, 429, 430, 844, 431, 412, 413, 432,
	871, 433, 815, 794, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 855, 440, 441, 442, 881, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	788, 0, 830, 831, 832, 833, 0, 0, 456, 457,
	882, 883, 766, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 845, 467, 0, 795, 468, 469,
	470, 255, 874, 0, 472, 471, 257, 0, 0, 0,
	0, 473, 474, 258, 475, 476, 477, 748, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 0,
	744, 745, 0, 0, 0, 0, 0, 0, 0, 772,
	0, 0, 0, 0, 740, 770, 801, 760, 761, 758,
	759, 771, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 847, 776, 0, 0, 0, 264, 265, 266,
	216, 816, 797, 827, 785, 826, 825, 0, 270, 271,
	787, 786, 274, 275, 276, 777, 846, 277, 873, 872,
	222, 0, 278, 853, 0, 836, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 856, 291, 292, 839, 837, 838, 843,
	841, 840, 842, 293, 294, 500, 295, 829, 297, 823,
	822, 750, 298, 0, 299, 0, 300, 0, 0, 301,
	821, 303, 0, 304, 0, 305, 306, 0, 755, 307,
	308, 310, 313, 309, 314, 315, 875, 876, 767, 857,
	0, 0, 0, 0, 0, 316, 317, 318, 820, 818,
	819, 0, 321, 0, 322, 0, 0, 858, 323, 0,
	324, 877, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 848, 849, 852, 860, 0, 850, 796, 0, 0,
	0, 0, 331, 333, 340, 0, 859, 334, 809, 800,
	810, 811, 812, 813, 814, 0, 802, 0, 341, 861,
	862, 342, 343, 344, 863, 834, 835, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 878, 864, 353,
	354, 865, 0, 355, 356, 0, 0, 357, 0, 358,
	752, 751, 359, 360, 362, 789, 361, 866, 364, 365,
	367, 366, 747, 0, 867, 768, 851, 824, 368, 369,
	0, 798, 799, 742, 0, 372, 373, 0, 0, 374,
	242, 868, 375, 869, 879, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 880, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 817, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 870, 407, 408, 409, 410, 756,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 790, 791, 792, 793, 423, 429, 430, 844,
	431, 412, 413, 432, 871, 433, 815, 794, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 855, 440, 441,
	442, 881, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 788, 0, 830, 831, 832, 833,
	0, 0, 456, 457, 882, 883, 766, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 845, 467,
	0, 795, 468, 469, 470, 255, 874, 0, 472, 471,
	257, 0, 0, 0, 0, 473, 474, 258, 475, 476,
	477, 748, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 744, 745, 801, 760, 761, 758,
	759, 771, 0, 772, 0, 0, 0, 0, 0, 770,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 847, 776, 0, 0, 0, 264, 265, 266,
	216, 816, 797, 827, 785, 826, 825, 0, 270, 271,
	787, 786, 274, 275, 276, 777, 846, 277, 873, 872,
	222, 0, 278, 853, 0, 836, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 856, 291, 292, 839, 837, 838, 843,
	841, 840, 842, 293, 294, 500, 295, 829, 297, 823,
	822, 750, 298, 0, 299, 0, 300, 0, 0, 301,
	821, 303, 0, 304, 0, 305, 306, 0, 755, 307,
	308, 310, 313, 309, 314, 315, 875, 876, 767, 857,
	0, 0, 0, 0, 0, 316, 317, 318, 820, 818,
	819, 0, 321, 0, 322, 0, 0, 858, 323, 0,
	324, 877, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 848, 849, 852, 860, 0, 850, 796, 0, 0,
	0, 0, 331, 333, 340, 0, 859, 334, 809, 800,
	810, 811, 812, 813, 814, 0, 802, 0, 341, 861,
	862, 342, 343, 344, 863, 834, 835, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 878, 864, 353,
	354, 865, 0, 355, 356, 0, 0, 357, 0, 358,
	752, 751, 359, 360, 362, 789, 361, 866, 364, 365,
	367, 366, 747, 0, 867, 768, 851, 824, 368, 369,
	0, 798, 799, 0, 0, 372, 373, 0, 0, 374,
	242, 868, 375, 869, 879, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 880, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 817, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 870, 407, 408, 409, 410, 756,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 790, 791, 792, 793, 423, 429, 430, 844,
	431, 412, 413, 432, 871, 433, 815, 794, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 855, 440, 441,
	442, 881, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 788, 0, 830, 831, 832, 833,
	0, 0, 456, 457, 882, 883, 766, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 845, 467,
	0, 795, 468, 469, 470, 255, 874, 2554, 472, 471,
	257, 0, 0, 0, 0, 473, 474, 258, 475, 476,
	477, 748, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 744, 745, 801, 760, 761, 758,
	759, 771, 0, 772, 0, 0, 0, 0, 0, 770,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 847, 776, 0, 0, 0, 264, 265, 266,
	216, 816, 797, 827, 785, 826, 825, 0, 270, 271,
	787, 786, 274, 275, 276, 777, 846, 277, 873, 872,
	222, 0, 278, 853, 0, 836, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 856, 291, 292, 839, 837, 838, 843,
	841, 840, 842, 293, 294, 500, 295, 829, 297, 823,
	822, 750, 298, 0, 299, 0, 300, 0, 0, 301,
	821, 303, 0, 304, 0, 305, 306, 0, 755, 307,
	308, 310, 313, 309, 314, 315, 875, 876, 767, 857,
	0, 0, 0, 0, 0, 316, 317, 318, 820, 818,
	819, 0, 321, 0, 322, 0, 0, 858, 323, 0,
	324, 877, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 848, 849, 852, 860, 0, 850, 796, 0, 0,
	0, 0, 331, 333, 340, 0, 859, 334, 809, 800,
	810, 811, 812, 813, 814, 0, 802, 0, 341, 861,
	862, 342, 343, 344, 863, 834, 835, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 878, 864, 353,
	354, 865, 0, 355, 356, 0, 0, 357, 0, 358,
	752, 751, 359, 360, 362, 789, 361, 866, 364, 365,
	367, 366, 747, 0, 867, 768, 851, 824, 368, 369,
	0, 798, 799, 742, 0, 372, 373, 0, 0, 374,
	242, 868, 375, 869, 879, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 880, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 817, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 870, 407, 408, 409, 410, 756,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 790, 791, 792, 793, 423, 429, 430, 844,
	431, 412, 413, 432, 871, 433, 815, 794, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 855, 440, 441,
	442, 881, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 788, 0, 830, 831, 832, 833,
	0, 0, 456, 457, 882, 883, 766, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 845, 467,
	0, 795, 468, 469, 470, 255, 874, 0, 472, 471,
	257, 0, 0, 0, 0, 473, 474, 258, 475, 476,
	477, 748, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 744, 745, 801, 760, 761, 758,
	759, 771, 0, 772, 0, 0, 0, 0, 0, 770,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 847, 776, 0, 0, 0, 264, 265, 266,
	216, 816, 797, 827, 785, 826, 825, 0, 270, 271,
	787, 786, 274, 275, 276, 777, 846, 277, 873, 872,
	222, 0, 278, 853, 0, 836, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 856, 291, 292, 839, 837, 838, 843,
	841, 840, 842, 293, 294, 500, 295, 829, 297, 823,
	822, 750, 298, 0, 299, 0, 300, 0, 0, 301,
	821, 303, 0, 304, 0, 305, 306, 0, 755, 307,
	308, 310, 313, 309, 314, 315, 875, 876, 767, 857,
	0, 0, 0, 0, 0, 316, 317, 318, 820, 818,
	819, 0, 321, 0, 322, 0, 0, 858, 323, 0,
	324, 877, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 848, 849, 852, 860, 0, 850, 796, 0, 0,
	0, 0, 331, 333, 340, 0, 859, 334, 809, 800,
	810, 811, 812, 813, 814, 0, 802, 0, 341, 861,
	862, 342, 343, 344, 863, 834, 835, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 878, 864, 353,
	354, 865, 0, 355, 356, 0, 0, 357, 0, 358,
	752, 751, 359, 360, 362, 789, 361, 866, 364, 365,
	367, 366, 747, 0, 867, 768, 851, 824, 368, 369,
	0, 798, 799, 0, 0, 372, 373, 0, 0, 374,
	242, 868, 375, 869, 879, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 880, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 817, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 870, 407, 408, 409, 410, 756,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 790, 791, 792, 793, 423, 429, 430, 844,
	431, 412, 413, 432, 871, 433, 815, 794, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 855, 440, 441,
	442, 881, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 788, 0, 830, 831, 832, 833,
	0, 0, 456, 457, 882, 883, 766, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 845, 467,
	0, 795, 468, 469, 470, 255, 874, 0, 472, 471,
	257, 0, 0, 0, 0, 473, 474, 258, 475, 476,
	477, 748, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 744, 745, 1445, 801, 760, 761,
	758, 759, 771, 772, 0, 0, 0, 0, 0, 770,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 847, 776, 0, 0, 0, 264, 265,
	266, 216, 816, 797, 827, 785, 826, 825, 0, 270,
	271, 787, 786, 274, 275, 276, 777, 846, 277, 873,
	872, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 292, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 500, 295, 829, 297,
	823, 822, 750, 298, 0, 299, 0, 300, 0, 0,
	301, 821, 303, 0, 304, 0, 305, 306, 0, 755,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 767,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 820,
	818, 819, 0, 321, 0, 322, 0, 1944, 858, 323,
	0, 324, 877, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 796, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 341,
	861, 862, 342, 343, 344, 863, 834, 835, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 752, 751, 359, 360, 362, 789, 361, 866, 364,
	365, 367, 366, 747, 0, 867, 768, 851, 824, 368,
	369, 0, 798, 799, 0, 0, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 879, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 880, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 817, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	756, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 790, 791, 792, 793, 423, 429, 430,
	844, 431, 412, 413, 432, 871, 433, 815, 794, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 855, 440,
	441, 442, 881, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 788, 0, 830, 831, 832,
	833, 0, 0, 456, 457, 882, 883, 766, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 845,
	467, 0, 795, 468, 469, 470, 255, 874, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 748, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 744, 745, 801, 760, 761,
	758, 759, 771, 0, 772, 0, 0, 0, 0, 0,
	770, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 847, 776, 0, 0, 0, 264, 265,
	266, 216, 816, 797, 827, 785, 826, 825, 0, 270,
	271, 787, 786, 274, 275, 276, 777, 846, 277, 873,
	872, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 292, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 500, 295, 829, 297,
	823, 822, 750, 298, 0, 299, 0, 300, 0, 0,
	301, 821, 303, 0, 304, 0, 305, 306, 0, 755,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 767,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 820,
	818, 819, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 796, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 341,
	861, 862, 342, 343, 344, 863, 834, 835, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 752, 751, 359, 360, 362, 789, 361, 866, 364,
	365, 367, 366, 747, 0, 867, 768, 851, 824, 368,
	369, 0, 798, 799, 0, 0, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 879, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 880, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 817, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	756, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 790, 791, 792, 793, 423, 429, 430,
	844, 431, 412, 413, 432, 871, 433, 815, 794, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 855, 440,
	441, 442, 881, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 788, 0, 830, 831, 832,
	833, 0, 0, 456, 457, 882, 883, 766, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 845,
	467, 0, 795, 468, 469, 470, 255, 874, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 748, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 744, 745, 0, 0, 0,
	0, 0, 0, 0, 772, 1381, 0, 0, 0, 1935,
	770, 801, 760, 761, 758, 759, 771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 264, 265, 266, 216, 816, 797, 827, 785,
	826, 825, 0, 270, 271, 787, 786, 274, 275, 276,
	777, 846, 277, 873, 872, 222, 0, 278, 853, 0,
	836, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 856, 291,
	292, 839, 837, 838, 843, 841, 840, 842, 293, 294,
	500, 295, 829, 297, 823, 822, 750, 298, 0, 299,
	0, 300, 0, 0, 301, 821, 303, 0, 304, 0,
	305, 306, 0, 755, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 767, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 820, 818, 819, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 877, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 848, 849, 852, 860,
	0, 850, 796, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 341, 861, 862, 342, 343, 344, 863,
	834, 835, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 752, 751, 359, 360, 362,
	789, 361, 866, 364, 365, 367, 366, 747, 0, 867,
	768, 851, 824, 368, 369, 0, 798, 799, 0, 0,
	372, 373, 0, 0, 374, 242, 868, 375, 869, 879,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 880,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	817, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 870,
	407, 408, 409, 410, 756, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 790, 791, 792,
	793, 423, 429, 430, 844, 431, 412, 413, 432, 871,
	433, 815, 794, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 855, 440, 441, 442, 881, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 788,
	0, 830, 831, 832, 833, 0, 0, 456, 457, 882,
	883, 766, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 845, 467, 0, 795, 468, 469, 470,
	255, 874, 0, 472, 471, 257, 0, 0, 0, 0,
	473, 474, 258, 475, 476, 477, 748, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 744,
	745, 0, 0, 0, 0, 0, 0, 0, 772, 0,
	0, 0, 0, 1924, 770, 801, 760, 761, 758, 759,
	771, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 797, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 500, 295, 829, 297, 823, 822,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 752,
	751, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 747, 0, 867, 768, 851, 824, 368, 369, 0,
	798, 799, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 879, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 880, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 817, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 756, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 790, 791, 792, 793, 423, 429, 430, 844, 431,
	412, 413, 432, 871, 433, 815, 794, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 855, 440, 441, 442,
	881, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 456, 457, 882, 883, 766, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 845, 467, 0,
	795, 468, 469, 470, 255, 874, 0, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 0, 0, 0, 0, 0,
	0, 0, 772, 0, 0, 0, 0, 1922, 770, 801,
	760, 761, 758, 759, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 797, 827, 785, 826, 825,
	0, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 500, 295,
	829, 297, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 747, 0, 867, 768, 851,
	824, 368, 369, 0, 798, 799, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 879, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 880, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 817, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 790, 791, 792, 793, 423,
	429, 430, 844, 431, 412, 413, 432, 871, 433, 815,
	794, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	855, 440, 441, 442, 881, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 788, 0, 830,
	831, 832, 833, 0, 0, 456, 457, 882, 883, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 845, 467, 0, 795, 468, 469, 470, 255, 874,
	0, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 0,
	0, 0, 0, 0, 0, 0, 772, 0, 0, 0,
	0, 1920, 770, 801, 760, 761, 758, 759, 771, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 847,
	776, 0, 0, 0, 264, 265, 266, 216, 816, 797,
	827, 785, 826, 825, 0, 270, 271, 787, 786, 274,
	275, 276, 777, 846, 277, 873, 872, 222, 0, 278,
	853, 0, 836, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	856, 291, 292, 839, 837, 838, 843, 841, 840, 842,
	293, 294, 500, 295, 829, 297, 823, 822, 750, 298,
	0, 299, 0, 300, 0, 0, 301, 821, 303, 0,
	304, 0, 305, 306, 0, 755, 307, 308, 310, 313,
	309, 314, 315, 875, 876, 767, 857, 0, 0, 0,
	0, 0, 316, 317, 318, 820, 818, 819, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 877, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 848, 849,
	852, 860, 0, 850, 796, 0, 0, 0, 0, 331,
	333, 340, 0, 859, 334, 809, 800, 810, 811, 812,
	813, 814, 0, 802, 0, 341, 861, 862, 342, 343,
	344, 863, 834, 835, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 878, 864, 353, 354, 865, 0,
	355, 356, 0, 0, 357, 0, 358, 752, 751, 359,
	360, 362, 789, 361, 866, 364, 365, 367, 366, 747,
	0, 867, 768, 851, 824, 368, 369, 0, 798, 799,
	0, 0, 372, 373, 0, 0, 374, 242, 868, 375,
	869, 879, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 880, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 817, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 870, 407, 408, 409, 410, 756, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 790,
	791, 792, 793, 423, 429, 430, 844, 431, 412, 413,
	432, 871, 433, 815, 794, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 855, 440, 441, 442, 881, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 788, 0, 830, 831, 832, 833, 0, 0, 456,
	457, 882, 883, 766, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 845, 467, 0, 795, 468,
	469, 470, 255, 874, 0, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 748, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 744, 745, 0, 0, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 0, 1918, 770, 1910, 760, 761,
	758, 759, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 847, 776, 0, 0, 0, 264, 265,
	266, 216, 816, 797, 827, 785, 826, 825, 0, 270,
	271, 787, 786, 274, 275, 276, 777, 846, 277, 873,
	872, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 292, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 500, 295, 829, 1913,
	823, 822, 750, 298, 0, 299, 0, 300, 0, 0,
	301, 821, 303, 0, 304, 0, 305, 306, 0, 755,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 767,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 820,
	818, 819, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 231, 0, 325, 326, 1914, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 796, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 341,
	861, 862, 342, 343, 344, 863, 834, 835, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 752, 751, 1915, 1912, 362, 789, 361, 866, 364,
	365, 367, 366, 747, 0, 867, 768, 851, 824, 368,
	369, 0, 798, 799, 0, 0, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 879, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 880, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 817, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	756, 411, 0, 415, 416, 417, 418, 419, 420, 1916,
	0, 427, 428, 790, 791, 792, 793, 423, 429, 430,
	844, 431, 412, 413, 432, 871, 433, 815, 794, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 855, 440,
	441, 442, 881, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 788, 0, 830, 831, 832,
	833, 0, 0, 456, 457, 882, 883, 766, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 845,
	467, 0, 795, 468, 469, 470, 255, 874, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	1911, 477, 748, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 744, 745, 0, 0, 0,
	0, 0, 0, 0, 772, 0, 0, 0, 0, 1907,
	770, 1910, 760, 761, 758, 759, 771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 264, 265, 266, 216, 816, 797, 827, 785,
	826, 825, 0, 270, 271, 787, 786, 274, 275, 276,
	777, 846, 277, 873, 872, 222, 0, 278, 853, 0,
	836, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 856, 291,
	292, 839, 837, 838, 843, 841, 840, 842, 293, 294,
	500, 295, 829, 1913, 823, 822, 750, 298, 0, 299,
	0, 300, 0, 0, 301, 821, 303, 0, 304, 0,
	305, 306, 0, 755, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 767, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 820, 818, 819, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 877, 0, 231, 0,
	325, 326, 1914, 328, 329, 330, 848, 849, 852, 860,
	0, 850, 796, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 341, 861, 862, 342, 343, 344, 863,
	834, 835, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 752, 751, 1915, 1912, 362,
	789, 361, 866, 364, 365, 367, 366, 747, 0, 867,
	768, 851, 824, 368, 369, 0, 798, 799, 0, 0,
	372, 373, 0, 0, 374, 242, 868, 375, 869, 879,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 880,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	817, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 870,
	407, 408, 409, 410, 756, 411, 0, 415, 416, 417,
	418, 419, 420, 1916, 0, 427, 428, 790, 791, 792,
	793, 423, 429, 430, 844, 431, 412, 413, 432, 871,
	433, 815, 794, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 855, 440, 441, 442, 881, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 788,
	0, 830, 831, 832, 833, 0, 0, 456, 457, 882,
	883, 766, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 845, 467, 0, 795, 468, 469, 470,
	255, 874, 0, 472, 471, 257, 0, 0, 0, 0,
	473, 474, 258, 475, 1911, 477, 748, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 744,
	745, 801, 760, 761, 758, 759, 771, 0, 772, 0,
	0, 0, 0, 0, 770, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 264, 265, 266, 216, 816, 797, 827, 785,
	826, 825, 0, 270, 271, 787, 786, 274, 275, 276,
	777, 846, 277, 873, 872, 222, 0, 278, 853, 0,
	836, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 856, 291,
	292, 839, 837, 838, 843, 841, 840, 842, 293, 294,
	500, 295, 829, 297, 823, 822, 750, 298, 0, 299,
	0, 300, 0, 0, 301, 821, 303, 0, 304, 0,
	305, 306, 0, 755, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 767, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 820, 818, 819, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 877, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 848, 849, 852, 860,
	0, 850, 796, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 341, 861, 862, 342, 343, 344, 863,
	834, 835, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 752, 751, 359, 360, 362,
	789, 361, 866, 364, 365, 367, 366, 747, 0, 867,
	768, 851, 824, 368, 369, 0, 798, 799, 0, 0,
	372, 373, 0, 0, 374, 242, 868, 375, 869, 879,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 880,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	817, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 870,
	407, 408, 409, 410, 756, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 790, 791, 792,
	793, 423, 429, 430, 844, 431, 412, 413, 432, 871,
	433, 815, 794, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 855, 440, 441, 442, 881, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 788,
	0, 830, 831, 832, 833, 0, 0, 456, 457, 882,
	883, 766, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 845, 467, 0, 795, 468, 469, 470,
	255, 874, 0, 472, 471, 257, 0, 0, 0, 0,
	473, 474, 258, 475, 476, 477, 748, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 744,
	745, 0, 0, 0, 0, 0, 1389, 0, 772, 0,
	0, 0, 0, 0, 770, 801, 760, 761, 758, 759,
	771, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 1756, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 797, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 500, 295, 829, 297, 823, 822,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 752,
	751, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 747, 0, 867, 768, 851, 824, 368, 369, 0,
	798, 799, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 879, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 880, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 817, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 756, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 790, 791, 792, 793, 423, 429, 430, 844, 431,
	412, 413, 432, 871, 433, 815, 794, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 855, 440, 441, 442,
	881, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 456, 457, 882, 883, 766, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 845, 467, 0,
	795, 468, 469, 470, 255, 874, 0, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 0, 0, 0, 0, 0,
	0, 0, 772, 0, 0, 0, 0, 1079, 770, 801,
	760, 761, 758, 759, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 797, 827, 785, 826, 825,
	0, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 500, 295,
	829, 297, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 1078, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 747, 0, 867, 768, 851,
	824, 368, 369, 0, 798, 799, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 879, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 880, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 817, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 790, 791, 792, 793, 423,
	429, 430, 844, 431, 412, 413, 432, 871, 433, 815,
	794, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	855, 440, 441, 442, 881, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 788, 0, 830,
	831, 832, 833, 0, 0, 456, 457, 882, 883, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 845, 467, 0, 795, 468, 469, 470, 255, 874,
	0, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 0,
	0, 0, 0, 0, 0, 0, 772, 0, 0, 0,
	0, 1073, 770, 801, 760, 761, 758, 759, 771, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 847,
	776, 0, 0, 0, 264, 265, 266, 216, 816, 797,
	827, 785, 826, 825, 0, 270, 271, 787, 786, 274,
	275, 276, 777, 846, 277, 873, 872, 222, 0, 278,
	853, 0, 836, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	856, 291, 292, 839, 837, 838, 843, 841, 840, 842,
	293, 294, 500, 295, 829, 297, 823, 822, 750, 298,
	0, 299, 0, 300, 0, 0, 301, 821, 303, 0,
	304, 0, 305, 306, 0, 755, 307, 308, 310, 313,
	309, 314, 315, 875, 876, 767, 857, 0, 0, 0,
	0, 0, 316, 317, 318, 820, 818, 819, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 877, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 1072, 849,
	852, 860, 0, 850, 796, 0, 0, 0, 0, 331,
	333, 340, 0, 859, 334, 809, 800, 810, 811, 812,
	813, 814, 0, 802, 0, 341, 861, 862, 342, 343,
	344, 863, 834, 835, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 878, 864, 353, 354, 865, 0,
	355, 356, 0, 0, 357, 0, 358, 752, 751, 359,
	360, 362, 789, 361, 866, 364, 365, 367, 366, 747,
	0, 867, 768, 851, 824, 368, 369, 0, 798, 799,
	0, 0, 372, 373, 0, 0, 374, 242, 868, 375,
	869, 879, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 880, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 817, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 870, 407, 408, 409, 410, 756, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 790,
	791, 792, 793, 423, 429, 430, 844, 431, 412, 413,
	432, 871, 433, 815, 794, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 855, 440, 441, 442, 881, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 788, 0, 830, 831, 832, 833, 0, 0, 456,
	457, 882, 883, 766, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 845, 467, 0, 795, 468,
	469, 470, 255, 874, 0, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 748, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 744, 745, 0, 0, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 0, 1068, 770, 801, 760, 761,
	758, 759, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 847, 776, 0, 0, 0, 264, 265,
	266, 216, 816, 797, 827, 785, 826, 825, 0, 270,
	271, 787, 786, 274, 275, 276, 777, 846, 277, 873,
	872, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 292, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 500, 295, 829, 297,
	823, 822, 750, 298, 0, 299, 0, 300, 0, 0,
	301, 821, 303, 0, 304, 0, 305, 306, 0, 755,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 767,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 820,
	818, 819, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 796, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 341,
	861, 862, 342, 343, 344, 863, 834, 835, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 752, 751, 359, 360, 362, 789, 361, 866, 364,
	365, 367, 366, 747, 0, 867, 768, 851, 824, 368,
	369, 0, 798, 799, 0, 0, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 879, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 880, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 817, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	756, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 790, 791, 792, 793, 423, 429, 430,
	844, 431, 412, 413, 432, 871, 433, 815, 794, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 855, 440,
	441, 442, 881, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 788, 0, 830, 831, 832,
	833, 0, 0, 456, 457, 882, 883, 766, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 845,
	467, 0, 795, 468, 469, 470, 255, 874, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 748, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 744, 745, 801, 760, 761,
	758, 759, 771, 0, 772, 0, 0, 0, 0, 0,
	770, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 847, 776, 0, 0, 0, 264, 265,
	266, 216, 816, 797, 827, 785, 826, 825, 0, 270,
	271, 787, 786, 274, 275, 276, 777, 846, 277, 873,
	872, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 292, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 500, 295, 829, 297,
	823, 822, 750, 298, 0, 299, 0, 300, 0, 0,
	301, 821, 303, 0, 304, 0, 305, 306, 0, 755,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 767,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 820,
	818, 819, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 796, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 341,
	861, 862, 342, 343, 344, 863, 834, 835, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 752, 751, 359, 360, 362, 789, 361, 866, 364,
	365, 367, 366, 747, 0, 867, 768, 851, 824, 368,
	369, 0, 798, 799, 0, 0, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 879, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 880, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 817, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	756, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 790, 791, 792, 793, 423, 429, 430,
	844, 431, 412, 413, 432, 871, 433, 815, 794, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 855, 440,
	441, 442, 881, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 788, 0, 830, 831, 832,
	833, 0, 0, 456, 457, 882, 883, 766, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 845,
	467, 0, 795, 468, 469, 470, 255, 874, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 748, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 744, 745, 801, 760, 761,
	758, 759, 771, 0, 772, 0, 0, 0, 0, 0,
	770, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 847, 776, 0, 0, 0, 264, 265,
	266, 216, 816, 797, 827, 785, 826, 825, 0, 270,
	271, 787, 786, 274, 275, 276, 777, 846, 277, 873,
	872, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 3116, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 500, 295, 829, 297,
	823, 822, 750, 298, 0, 299, 0, 300, 0, 0,
	301, 821, 303, 0, 304, 0, 305, 306, 0, 755,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 767,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 820,
	818, 819, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 796, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 341,
	861, 862, 342, 343, 344, 863, 834, 835, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 752, 751, 359, 360, 362, 789, 361, 866, 364,
	365, 367, 366, 747, 0, 867, 768, 851, 824, 368,
	369, 0, 798, 799, 0, 0, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 879, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 880, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 817, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	756, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 790, 791, 792, 793, 423, 429, 430,
	844, 431, 412, 413, 432, 871, 433, 815, 794, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 855, 440,
	441, 442, 881, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 788, 0, 830, 831, 832,
	833, 0, 0, 456, 457, 882, 883, 766, 458, 459,
	0, 3115, 461, 0, 0, 462, 463, 464, 466, 845,
	467, 0, 795, 468, 469, 470, 255, 874, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 748, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 744, 745, 801, 760, 761,
	758, 759, 771, 0, 772, 0, 0, 0, 0, 0,
	770, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 847, 776, 0, 0, 0, 264, 265,
	266, 3114, 816, 797, 827, 785, 826, 825, 0, 270,
	271, 787, 786, 274, 275, 276, 777, 846, 277, 873,
	872, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 3116, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 500, 295, 829, 297,
	823, 822, 750, 298, 0, 299, 0, 300, 0, 0,
	301, 821, 303, 0, 304, 0, 305, 306, 0, 755,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 767,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 820,
	818, 819, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 796, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 341,
	861, 862, 342, 343, 344, 863, 834, 835, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 752, 751, 359, 360, 362, 789, 361, 866, 364,
	365, 367, 366, 747, 0, 867, 768, 851, 824, 368,
	369, 0, 798, 799, 0, 0, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 879, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 880, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 817, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	756, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 790, 791, 792, 793, 423, 429, 430,
	844, 431, 412, 413, 432, 871, 433, 815, 794, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 855, 440,
	441, 442, 881, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 788, 0, 830, 831, 832,
	833, 0, 0, 456, 457, 882, 883, 766, 458, 459,
	0, 3115, 461, 0, 0, 462, 463, 464, 466, 845,
	467, 0, 795, 468, 469, 470, 255, 874, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 748, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 744, 745, 801, 760, 761,
	758, 759, 771, 0, 772, 0, 0, 0, 0, 0,
	770, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 847, 776, 0, 0, 0, 264, 265,
	266, 216, 816, 797, 827, 785, 826, 825, 0, 270,
	271, 787, 786, 274, 275, 276, 777, 846, 277, 873,
	872, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 292, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 500, 295, 829, 297,
	823, 822, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 821, 303, 0, 304, 0, 305, 306, 0, 755,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 767,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 820,
	818, 819, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 796, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 341,
	861, 862, 342, 343, 344, 863, 834, 835, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 937, 936, 359, 360, 362, 789, 361, 866, 364,
	365, 367, 366, 0, 0, 867, 768, 851, 824, 368,
	369, 0, 798, 799, 0, 0, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 879, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 880, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 817, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	756, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 790, 791, 792, 793, 423, 429, 430,
	844, 431, 412, 413, 432, 871, 433, 815, 794, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 855, 440,
	441, 442, 881, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 788, 0, 830, 831, 832,
	833, 0, 0, 456, 457, 882, 883, 766, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 845,
	467, 0, 795, 468, 469, 470, 255, 874, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 801, 760, 761, 758, 759, 771, 0, 0,
	1932, 0, 0, 0, 0, 1930, 1931, 0, 259, 260,
	261, 262, 0, 263, 772, 0, 0, 0, 847, 776,
	770, 0, 0, 264, 265, 266, 0, 816, 797, 827,
	785, 826, 825, 0, 270, 271, 787, 786, 274, 275,
	276, 777, 846, 277, 873, 872, 222, 0, 278, 853,
	0, 836, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 856,
	291, 3116, 839, 837, 838, 843, 841, 840, 842, 293,
	294, 500, 295, 829, 297, 823, 822, 750, 298, 0,
	299, 0, 300, 0, 0, 301, 821, 303, 0, 304,
	0, 305, 306, 0, 755, 307, 308, 310, 313, 309,
	314, 315, 875, 876, 767, 857, 0, 0, 0, 0,
	0, 316, 317, 318, 820, 818, 819, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 877, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 848, 849, 852,
	0, 0, 850, 796, 0, 0, 0, 0, 331, 333,
	340, 0, 859, 334, 809, 800, 810, 811, 812, 813,
	814, 0, 802, 0, 341, 0, 0, 342, 343, 344,
	863, 834, 835, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 878, 864, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 752, 751, 359, 360,
	362, 789, 361, 866, 364, 365, 367, 366, 747, 0,
	0, 768, 851, 824, 368, 369, 0, 798, 799, 0,
	0, 372, 373, 0, 0, 374, 242, 868, 375, 869,
	879, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	880, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 817, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	870, 407, 408, 409, 410, 756, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 790, 791,
	792, 793, 423, 429, 430, 844, 431, 412, 413, 432,
	0, 433, 815, 794, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 855, 440, 441, 442, 881, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	788, 0, 830, 831, 832, 833, 0, 0, 456, 457,
	882, 883, 766, 458, 459, 0, 3115, 461, 0, 0,
	462, 463, 464, 466, 845, 467, 0, 795, 468, 469,
	470, 255, 874, 0, 472, 471, 257, 0, 0, 0,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 732, 0, 935, 0, 0, 0, 0,
	744, 745, 0, 0, 0, 0, 0, 0, 0, 772,
	0, 259, 260, 261, 262, 770, 263, 0, 0, 0,
	0, 847, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 846, 277, 220, 221, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 0, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 861, 862,
	342, 343, 344, 863, 345, 346, 0, 0, 347, 348,
	349, 922, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 937,
	936, 359, 360, 362, 363, 361, 866, 364, 365, 367,
	366, 0, 0, 867, 0, 851, 241, 368, 369, 0,
	370, 371, 0, 927, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 879, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 880, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 247, 929,
	0, 415, 416, 417, 418, 419, 420, 421, 172, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 844, 431,
	412, 413, 432, 871, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	881, 0, 446, 447, 174, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 882, 883, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 845, 467, 0,
	465, 468, 469, 470, 1157, 256, 0, 472, 471, 257,
	0, 0, 935, 166, 473, 474, 258, 475, 476, 477,
	0, 167, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 847, 0,
	919, 0, 1470, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 846, 277, 220, 221, 222, 0, 278, 853,
	0, 836, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 856,
	291, 292, 839, 837, 838, 843, 841, 840, 842, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 875, 876, 0, 857, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 877, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 848, 849, 852,
	860, 0, 850, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 859, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 861, 862, 342, 343, 344,
	863, 345, 346, 0, 0, 347, 348, 349, 922, 351,
	350, 0, 352, 878, 864, 353, 354, 865, 0, 355,
	356, 0, 0, 357, 0, 358, 937, 936, 359, 360,
	362, 363, 361, 866, 364, 365, 367, 366, 0, 0,
	867, 0, 851, 241, 368, 369, 0, 370, 371, 0,
	927, 372, 373, 0, 0, 374, 242, 868, 375, 869,
	879, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	880, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	870, 407, 408, 409, 410, 247, 929, 0, 415, 416,
	417, 418, 419, 420, 421, 172, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 844, 431, 412, 413, 432,
	871, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 881, 0, 446,
	447, 174, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	882, 883, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 845, 467, 0, 465, 468, 469,
	470, 1157, 256, 0, 472, 471, 257, 2329, 0, 935,
	166, 473, 474, 258, 475, 476, 477, 0, 167, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 0, 919, 0, 1470,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 846,
	277, 220, 221, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 0, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 861, 862, 342, 343, 344, 863, 345, 346,
	0, 0, 347, 348, 349, 922, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 937, 936, 359, 360, 362, 363, 361,
	866, 364, 365, 367, 366, 0, 0, 867, 0, 851,
	241, 368, 369, 0, 370, 371, 0, 927, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 879, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 880, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 247, 929, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 844, 431, 412, 413, 432, 871, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 881, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 882, 883, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 845, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 918, 0, 935, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 847, 0, 919, 0, 924, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 846, 277, 220, 221,
	222, 0, 278, 853, 0, 836, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 856, 291, 292, 839, 837, 838, 843,
	841, 840, 842, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 875, 876, 0, 857,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 858, 323, 0,
	324, 877, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 848, 849, 852, 860, 0, 850, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 859, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 861,
	862, 342, 343, 344, 863, 345, 346, 0, 0, 347,
	348, 349, 922, 351, 350, 0, 352, 878, 864, 353,
	354, 865, 0, 355, 356, 0, 0, 357, 0, 358,
	937, 936, 359, 360, 362, 363, 361, 866, 364, 365,
	367, 366, 0, 0, 867, 0, 851, 241, 368, 369,
	0, 370, 371, 0, 927, 372, 373, 0, 0, 374,
	242, 868, 375, 869, 879, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 880, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 870, 407, 408, 409, 410, 247,
	929, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 844,
	431, 412, 413, 432, 871, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 881, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 882, 883, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 845, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 472, 471,
	257, 0, 0, 935, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 847,
	0, 919, 0, 924, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 846, 277, 220, 221, 222, 0, 278,
	853, 0, 836, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	856, 291, 292, 839, 837, 838, 843, 841, 840, 842,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 875, 876, 0, 857, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 877, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 848, 849,
	852, 860, 0, 850, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 859, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 861, 862, 342, 343,
	344, 863, 345, 346, 0, 0, 347, 348, 349, 922,
	351, 350, 0, 352, 878, 864, 353, 354, 865, 0,
	355, 356, 0, 0, 357, 0, 358, 937, 936, 359,
	360, 362, 363, 361, 866, 364, 365, 367, 366, 0,
	0, 867, 0, 851, 241, 368, 369, 0, 370, 371,
	0, 927, 372, 373, 0, 0, 374, 242, 868, 375,
	869, 879, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 880, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 870, 407, 408, 409, 410, 247, 929, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 844, 431, 412, 413,
	432, 871, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 881, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 882, 883, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 845, 467, 0, 465, 468,
	469, 470, 255, 256, 0, 472, 471, 257, 0, 0,
	935, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 847, 0, 919, 0,
	924, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	846, 277, 220, 221, 222, 0, 278, 853, 0, 836,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 292,
	839, 837, 838, 843, 841, 840, 842, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	875, 876, 0, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 877, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 848, 849, 852, 860, 0,
	850, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	859, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 861, 862, 342, 343, 344, 863, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 878, 864, 353, 354, 865, 0, 355, 356, 0,
	0, 357, 0, 358, 937, 936, 359, 360, 362, 363,
	361, 866, 364, 365, 367, 366, 0, 0, 867, 0,
	851, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 868, 375, 869, 879, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 880, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 870, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 844, 431, 412, 413, 432, 871, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 881, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 882, 883,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 845, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 0, 0, 935, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 847, 0, 0, 0, 2669, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 846, 277, 220,
	221, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 292, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 0,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	861, 862, 342, 343, 344, 863, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 937, 936, 359, 360, 362, 363, 361, 866, 364,
	365, 367, 366, 0, 0, 867, 0, 851, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 879, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 880, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	247, 929, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	844, 431, 412, 413, 432, 871, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 881, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 882, 883, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 845,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 0, 0, 935, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	847, 0, 0, 0, 1370, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 846, 277, 220, 221, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 0, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 848,
	849, 852, 860, 0, 850, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 861, 862, 342,
	343, 344, 863, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 878, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 937, 936,
	359, 360, 362, 363, 361, 866, 364, 365, 367, 366,
	0, 0, 867, 0, 851, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 868,
	375, 869, 879, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 880, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 870, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 844, 431, 412,
	413, 432, 871, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 881,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 882, 883, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 845, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 732,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 172, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	174, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	1157, 256, 0, 472, 471, 257, 0, 0, 497, 166,
	473, 474, 258, 475, 476, 477, 0, 167, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 137, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 0,
	472, 471, 257, 0, 0, 497, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 2120, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	232, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	0, 0, 497, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 2578, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 0, 0, 0,
	0, 473, 474, 258, 475, 476, 477, 1233, 0, 958,
	957, 0, 0, 0, 955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 1475,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 962, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 857, 0, 0, 0, 0, 0, 1232, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 860, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 861, 862, 342, 343, 344, 863, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 937, 936, 359, 360, 362, 363, 361,
	866, 364, 365, 367, 366, 0, 0, 867, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 1231, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 871, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 1150, 0, 958, 957, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 962, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 856, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 857,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 858, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 1149, 233, 234, 860, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 859, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 861,
	862, 342, 343, 344, 863, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 864, 353,
	354, 865, 0, 355, 356, 0, 0, 357, 0, 358,
	937, 936, 359, 360, 362, 363, 361, 866, 364, 365,
	367, 366, 0, 0, 867, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 868, 375, 869, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 870, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 871, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 472, 471,
	257, 0, 0, 0, 0, 473, 474, 258, 475, 476,
	477, 1146, 0, 958, 957, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 962, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	856, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 857, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 1145, 233,
	234, 860, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 859, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 861, 862, 342, 343,
	344, 863, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 864, 353, 354, 865, 0,
	355, 356, 0, 0, 357, 0, 358, 937, 936, 359,
	360, 362, 363, 361, 866, 364, 365, 367, 366, 0,
	0, 867, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 868, 375,
	869, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 870, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 871, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 0, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 1104, 0,
	958, 957, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 962,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 1103, 233, 234, 860, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	859, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 861, 862, 342, 343, 344, 863, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 864, 353, 354, 865, 0, 355, 356, 0,
	0, 357, 0, 358, 937, 936, 359, 360, 362, 363,
	361, 866, 364, 365, 367, 366, 0, 0, 867, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 868, 375, 869, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 870, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 871, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 1101, 0, 958, 957, 0,
	0, 0, 955, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 962, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 1100, 233, 234, 860, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	861, 862, 342, 343, 344, 863, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 937, 936, 359, 360, 362, 363, 361, 866, 364,
	365, 367, 366, 0, 0, 867, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 868, 375, 869, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 870, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 871, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 951, 0, 958, 957, 0, 0, 0, 955,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 962, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 953,
	233, 234, 860, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 861, 862, 342,
	343, 344, 863, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 937, 936,
	359, 360, 362, 363, 361, 866, 364, 365, 367, 366,
	0, 0, 867, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 868,
	375, 869, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 870, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 871, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 958,
	957, 0, 0, 0, 955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 962, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 860, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 861, 862, 342, 343, 344, 863, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 937, 936, 359, 360, 362, 363, 361,
	866, 364, 365, 367, 366, 0, 0, 867, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 868, 375, 869, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 870, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 871, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 958, 957, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 962, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 860, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 861, 862, 342,
	343, 344, 863, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 937, 936,
	359, 360, 362, 363, 361, 866, 364, 365, 367, 366,
	0, 0, 867, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 868,
	375, 869, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 870, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 871, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 958, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 962, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	232, 233, 234, 860, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 861, 862,
	342, 343, 344, 863, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 937,
	936, 359, 360, 362, 363, 361, 866, 364, 365, 367,
	366, 0, 0, 867, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	868, 375, 869, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 870, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 871, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	603, 0, 208, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 214, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 213, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 207, 0, 208,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 480, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 214, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 213, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	208, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 480,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 214,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 1729,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 213,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 208, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	480, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	214, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	213, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 497, 472, 471, 257, 0, 0, 0, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 480, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 497, 472, 471, 257, 0, 0, 0,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 480, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 2004, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 2001, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 2083, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 2007, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 2081, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 2080, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 2006, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	2082, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 497, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 2004,
	278, 223, 0, 0, 1998, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 2001, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 2007, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 1997,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 2006, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 2005, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 610,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	609, 587, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 590, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 591, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 592, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 586, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 587, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 590, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 591, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 592, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 497,
	472, 471, 257, 0, 0, 0, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 590, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 591, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 592, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 1275, 0, 497, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 232, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	1278, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 1276, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 1277, 471,
	257, 1125, 0, 497, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 927, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 0, 472, 471, 257, 946, 0,
	497, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 948, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 927, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 943, 0, 497, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 945, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 927, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 939, 0, 497, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 941,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 927, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 595,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	594, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 522, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 521, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 520,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 497,
	472, 471, 257, 0, 0, 0, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 1979, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 497, 2494, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 497,
	2494, 0, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 2491,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	497, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 927, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 497, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 259, 260, 261,
	262, 1722, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 1680, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 0,
	472, 471, 257, 1678, 0, 497, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	232, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	636, 0, 497, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 1204, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 637, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	633, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 632, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 1567, 0, 497,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 1566, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	497, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 1551,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 636, 0, 497, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 1204, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 232, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 637, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 633, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 632, 251, 252,
	455, 0, 0, 456, 1205, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 636, 0, 497, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	626, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 637, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 633, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 1176, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 632, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 1143,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 1142, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 1139, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 1138, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 0,
	472, 471, 257, 1136, 0, 497, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	1135, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	1133, 0, 497, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 1132, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 1129, 0, 497,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 1128, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	497, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 259, 260, 261, 262,
	1117, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 1115, 0, 497, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 1114, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 1106, 0, 497, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 1097,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 1096, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 1092, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 0,
	472, 471, 257, 1088, 0, 497, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	1090, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	966, 0, 497, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 968, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 963, 0, 497,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 636, 0, 497, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 626, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 232, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 625, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 637, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 627,
	411, 0, 415, 416, 633, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 628, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 632, 251, 252, 455,
	0, 0, 456, 630, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 472, 471,
	257, 616, 0, 497, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 617,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 0, 472, 471, 257, 612, 0,
	497, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 601, 0, 497, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 232, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 544, 0, 497, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 497, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	232, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 497, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 2387, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 497, 472, 471,
	257, 0, 0, 0, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 2385, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 497, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 2374, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 497,
	472, 471, 257, 0, 0, 0, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 617, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	497, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 1580, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 0, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 497, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 1571, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 497, 472, 471, 257, 0, 0, 0, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 901, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 497, 472, 471, 257, 0, 0, 0,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 0, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 0,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 0, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 0, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 1307, 1308,
	0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 0, 1310, 0, 0, 1356, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1309, 0, 0, 0, 0, 0, 0, 0, 1329, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 0, 1307,
	1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 1356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 1333, 1334,
	1335, 1309, 0, 0, 0, 0, 0, 1315, 0, 1329,
	0, 0, 0, 0, 0, 0, 1326, 0, 0, 0,
	1307, 1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0,
	1347, 1357, 0, 0, 1337, 1338, 1339, 0, 1343, 0,
	0, 0, 0, 0, 0, 1310, 0, 0, 1356, 0,
	0, 0, 0, 0, 0, 1353, 1354, 0, 0, 0,
	0, 0, 0, 1324, 1325, 0, 0, 0, 1332, 1333,
	1334, 1335, 1309, 0, 0, 0, 0, 1345, 1315, 0,
	1329, 0, 0, 0, 1330, 0, 0, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1355, 1347, 1357, 0, 0, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1353, 1354, 0, 0,
	0, 0, 0, 0, 1324, 1325, 0, 0, 0, 1332,
	1333, 1334, 1335, 0, 0, 0, 0, 0, 1345, 1315,
	1336, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 1355, 1347, 1357, 0, 0, 1337, 1338, 1339, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 1353, 1354, 0,
	0, 0, 0, 0, 0, 1324, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	0, 1336, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 1355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 0, 0, 1346, 0, 0,
	1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319,
	1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0, 0,
	1865, 0, 1336, 0, 1866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1331,
	0, 1307, 1308, 0, 1340, 1341, 1342, 1350, 1351, 1352,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1343,
	0, 0, 1348, 0, 0, 0, 1310, 0, 1346, 1356,
	0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0,
	0, 0, 0, 1309, 0, 2793, 0, 0, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 1326, 0,
	0, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350, 1351,
	1352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 1310, 0, 1346,
	1356, 0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320,
	1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0,
	1332, 1333, 1334, 1335, 1309, 0, 2550, 0, 0, 0,
	1315, 0, 1329, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350,
	1351, 1352, 0, 1347, 1357, 0, 0, 1337, 1338, 1339,
	0, 1343, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 1356, 0, 0, 0, 0, 0, 0, 1353, 1354,
	0, 0, 0, 0, 0, 0, 1324, 1325, 0, 0,
	0, 1332, 1333, 1334, 1335, 1309, 0, 0, 0, 0,
	1345, 1315, 0, 1329, 0, 0, 0, 1330, 0, 0,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1355, 1347, 1357, 0, 0, 1337, 1338,
	1339, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	1354, 0, 0, 0, 0, 0, 0, 1324, 1325, 0,
	0, 0, 1332, 1333, 1334, 1335, 0, 0, 0, 0,
	0, 1345, 1315, 1336, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 1355, 1347, 1357, 0, 0, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	1353, 1354, 0, 0, 0, 0, 0, 0, 1324, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 0, 1336, 0, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 1355, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	1346, 0, 0, 1321, 1322, 1328, 1327, 1323, 1349, 0,
	1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 0,
	0, 0, 0, 0, 0, 1336, 0, 2275, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 1307, 1308, 0, 1340, 1341, 1342,
	1350, 1351, 1352, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1343, 0, 0, 1348, 0, 0, 0, 1310,
	0, 1346, 1356, 0, 1321, 1322, 1328, 1327, 1323, 1349,
	0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317,
	0, 0, 0, 0, 0, 0, 1309, 0, 2274, 0,
	0, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 1326, 0, 0, 0, 1307, 1308, 0, 1340, 1341,
	1342, 1350, 1351, 1352, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 0, 0, 0, 0, 0,
	1310, 0, 1346, 1356, 0, 1321, 1322, 1328, 1327, 1323,
	1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316,
	1317, 0, 0, 1332, 1333, 1334, 1335, 1309, 0, 2271,
	0, 0, 0, 1315, 0, 1329, 0, 0, 0, 0,
	0, 0, 1326, 0, 0, 0, 1307, 1308, 0, 1340,
	1341, 1342, 1350, 1351, 1352, 0, 1347, 1357, 0, 0,
	1337, 1338, 1339, 0, 1343, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 1356, 0, 0, 0, 0, 0,
	0, 1353, 1354, 0, 0, 0, 0, 0, 0, 1324,
	1325, 0, 0, 0, 1332, 1333, 1334, 1335, 1309, 0,
	0, 0, 0, 1345, 1315, 0, 1329, 0, 0, 0,
	1330, 0, 0, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1355, 1347, 1357, 0,
	0, 1337, 1338, 1339, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1353, 1354, 0, 0, 0, 0, 0, 0,
	1324, 1325, 0, 0, 0, 1332, 1333, 1334, 1335, 0,
	0, 0, 0, 0, 1345, 1315, 1336, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 1355, 1347, 1357,
	0, 0, 1337, 1338, 1339, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 1348, 0, 0, 0,
	0, 0, 0, 1353, 1354, 0, 0, 0, 0, 0,
	0, 1324, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 0, 1336, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 1355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 1348, 0, 0,
	0, 0, 0, 1346, 0, 0, 1321, 1322, 1328, 1327,
	1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314,
	1316, 1317, 0, 0, 0, 0, 0, 0, 1336, 0,
	2270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1331, 0, 1307, 1308, 0,
	1340, 1341, 1342, 1350, 1351, 1352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1343, 0, 0, 1348, 0,
	0, 0, 1310, 0, 1346, 1356, 0, 1321, 1322, 1328,
	1327, 1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313,
	1314, 1316, 1317, 0, 0, 0, 0, 0, 0, 1309,
	0, 2269, 0, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 1326, 0, 0, 0, 1307, 1308,
	0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 0, 1310, 0, 1346, 1356, 0, 1321, 1322,
	1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311, 1312,
	1313, 1314, 1316, 1317, 0, 0, 1332, 1333, 1334, 1335,
	1309, 0, 1866, 0, 0, 0, 1315, 0, 1329, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 0, 1307,
	1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 1347,
	1357, 0, 0, 1337, 1338, 1339, 0, 1343, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 1356, 0, 0,
	0, 0, 0, 0, 1353, 1354, 0, 0, 0, 0,
	0, 0, 1324, 1325, 0, 0, 0, 1332, 1333, 1334,
	1335, 1309, 0, 0, 0, 0, 1345, 1315, 0, 1329,
	0, 0, 0, 1330, 2286, 2287, 1326, 2304, 2305, 2306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1355,
	1347, 1357, 0, 0, 1337, 1338, 1339, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1353, 1354, 0, 0, 0,
	0, 0, 0, 1324, 1325, 0, 0, 0, 1332, 1333,
	1334, 1335, 0, 0, 2301, 0, 0, 1345, 1315, 1336,
	0, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	1355, 1347, 1357, 0, 0, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 1348,
	0, 0, 0, 0, 0, 0, 1353, 1354, 0, 0,
	0, 0, 0, 0, 1324, 1325, 0, 0, 0, 0,
	0, 0, 0, 2292, 0, 0, 0, 0, 1345, 0,
	1336, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 1355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	1348, 0, 0, 0, 0, 0, 1346, 0, 0, 1321,
	1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311,
	1312, 1313, 1314, 1316, 1317, 0, 0, 0, 0, 3081,
	2302, 1336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 0, 0, 1346, 0, 0,
	1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319,
	1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0, 0,
	3077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2303, 0, 1307, 1308, 0, 1340, 1341,
	1342, 1350, 1351, 1352, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 0, 0, 0, 0, 0,
	1310, 0, 0, 1356, 0, 0, 0, 0, 1346, 0,
	0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 1309, 0, 0,
	0, 3019, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 1326, 0, 0, 0, 1307, 1308, 0, 1340,
	1341, 1342, 1350, 1351, 1352, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1343, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 1356, 0, 2298, 2299, 2300, 0,
	0, 0, 0, 2297, 2295, 2296, 2288, 2289, 2290, 2291,
	2293, 2294, 0, 0, 1332, 1333, 1334, 1335, 1309, 0,
	0, 0, 0, 0, 1315, 0, 1329, 0, 0, 0,
	0, 0, 0, 1326, 0, 0, 0, 1307, 1308, 0,
	1340, 1341, 1342, 1350, 1351, 1352, 0, 1347, 1357, 0,
	0, 1337, 1338, 1339, 0, 1343, 0, 0, 0, 0,
	0, 0, 1310, 0, 0, 1356, 0, 0, 0, 0,
	0, 0, 1353, 1354, 0, 0, 0, 0, 0, 0,
	1324, 1325, 0, 0, 0, 1332, 1333, 1334, 1335, 1309,
	0, 0, 0, 0, 1345, 1315, 0, 1329, 0, 0,
	0, 1330, 0, 0, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1355, 1347, 1357,
	0, 0, 1337, 1338, 1339, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 1354, 0, 0, 0, 0, 0,
	0, 1324, 1325, 0, 0, 0, 1332, 1333, 1334, 1335,
	0, 0, 0, 0, 0, 1345, 1315, 1336, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 1355, 1347,
	1357, 0, 0, 1337, 1338, 1339, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 1348, 0, 0,
	0, 0, 0, 0, 1353, 1354, 0, 0, 0, 0,
	0, 0, 1324, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 1336, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 1355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 1348, 0,
	0, 0, 0, 0, 1346, 0, 0, 1321, 1322, 1328,
	1327, 1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313,
	1314, 1316, 1317, 0, 0, 0, 0, 3018, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	0, 0, 0, 0, 0, 1346, 0, 0, 1321, 1322,
	1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311, 1312,
	1313, 1314, 1316, 1317, 0, 0, 0, 0, 2968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350,
	1351, 1352, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 1356, 0, 0, 0, 0, 1346, 0, 0, 1321,
	1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319, 1311,
	1312, 1313, 1314, 1316, 1317, 1309, 0, 0, 0, 2929,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342,
	1350, 1351, 1352, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 0, 1310,
	0, 0, 1356, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 1333, 1334, 1335, 1309, 0, 0, 0,
	0, 0, 1315, 0, 1329, 0, 0, 0, 0, 0,
	0, 1326, 0, 0, 0, 1307, 1308, 0, 1340, 1341,
	1342, 1350, 1351, 1352, 0, 1347, 1357, 0, 0, 1337,
	1338, 1339, 0, 1343, 0, 0, 0, 0, 0, 0,
	1310, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	1353, 1354, 0, 0, 0, 0, 0, 0, 1324, 1325,
	0, 0, 0, 1332, 1333, 1334, 1335, 1309, 0, 0,
	0, 0, 1345, 1315, 0, 1329, 0, 0, 0, 1330,
	0, 0, 1326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1355, 1347, 1357, 0, 0,
	1337, 1338, 1339, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1353, 1354, 0, 0, 0, 0, 0, 0, 1324,
	1325, 0, 0, 0, 1332, 1333, 1334, 1335, 0, 0,
	0, 0, 0, 1345, 1315, 1336, 0, 0, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 1355, 1347, 1357, 0,
	0, 1337, 1338, 1339, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 1353, 1354, 0, 0, 0, 0, 0, 0,
	1324, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1345, 0, 1336, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 1355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 1348, 0, 0, 0,
	0, 0, 1346, 0, 0, 1321, 1322, 1328, 1327, 1323,
	1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316,
	1317, 0, 0, 0, 0, 2840, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 0, 0,
	0, 0, 0, 1346, 0, 0, 1321, 1322, 1328, 1327,
	1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314,
	1316, 1317, 0, 0, 0, 0, 2798, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1307, 1308, 0, 1340, 1341, 1342, 1350, 1351, 1352,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1343,
	0, 0, 0, 0, 0, 0, 1310, 0, 0, 1356,
	0, 0, 0, 0, 1346, 0, 0, 1321, 1322, 1328,
	1327, 1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313,
	1314, 1316, 1317, 1309, 0, 0, 0, 2797, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 1326, 0,
	0, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350, 1351,
	1352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 1310, 0, 0,
	1356, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 1333, 1334, 1335, 1309, 0, 0, 0, 0, 0,
	1315, 0, 1329, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350,
	1351, 1352, 0, 1347, 1357, 0, 0, 1337, 1338, 1339,
	0, 1343, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 1356, 0, 0, 0, 0, 0, 0, 1353, 1354,
	0, 0, 0, 0, 0, 0, 1324, 1325, 0, 0,
	0, 1332, 1333, 1334, 1335, 1309, 0, 0, 0, 0,
	1345, 1315, 0, 1329, 0, 0, 0, 1330, 0, 0,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1355, 1347, 1357, 0, 0, 1337, 1338,
	1339, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	1354, 0, 0, 0, 0, 0, 0, 1324, 1325, 0,
	0, 0, 1332, 1333, 1334, 1335, 0, 0, 0, 0,
	0, 1345, 1315, 1336, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 1355, 1347, 1357, 0, 0, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	1353, 1354, 0, 0, 0, 0, 0, 0, 1324, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 0, 1336, 0, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 1355, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	1346, 0, 0, 1321, 1322, 1328, 1327, 1323, 1349, 0,
	1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 0,
	0, 0, 0, 2796, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 0, 0, 0, 0,
	0, 1346, 0, 0, 1321, 1322, 1328, 1327, 1323, 1349,
	0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317,
	0, 0, 0, 0, 2762, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1307,
	1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 1356, 0, 0,
	0, 0, 1346, 0, 0, 1321, 1322, 1328, 1327, 1323,
	1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316,
	1317, 1309, 0, 0, 0, 2583, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 1326, 0, 0, 0,
	1307, 1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 0, 1310, 0, 0, 1356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 1333,
	1334, 1335, 1309, 0, 0, 0, 0, 0, 1315, 0,
	1329, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	0, 1307, 1308, 0, 1340, 1341, 1342, 1350, 1351, 1352,
	0, 1347, 1357, 0, 0, 1337, 1338, 1339, 0, 1343,
	0, 0, 0, 0, 0, 0, 1310, 0, 0, 1356,
	0, 0, 0, 0, 0, 0, 1353, 1354, 0, 0,
	0, 0, 0, 0, 1324, 1325, 0, 0, 0, 1332,
	1333, 1334, 1335, 1309, 0, 0, 0, 0, 1345, 1315,
	3157, 1329, 0, 0, 0, 1330, 0, 0, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1355, 1347, 1357, 0, 0, 1337, 1338, 1339, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1353, 1354, 0,
	0, 0, 0, 0, 0, 1324, 1325, 0, 0, 0,
	1332, 1333, 1334, 1335, 0, 0, 0, 0, 0, 1345,
	1315, 1336, 2316, 0, 0, 2315, 1330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 1355, 1347, 1357, 0, 0, 1337, 1338, 1339,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 1353, 1354,
	0, 0, 0, 3156, 0, 0, 1324, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 1336, 0, 0, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 1355, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 1346, 0,
	0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 2229,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350, 1351,
	1352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 1348, 0, 2200, 0, 1310, 0, 1346,
	1356, 0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320,
	1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0,
	0, 0, 0, 0, 1309, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 1954, 1326,
	0, 0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342,
	1350, 1351, 1352, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1343, 0, 0, 2201, 1953, 0, 0, 1310,
	1346, 0, 1356, 1321, 1322, 1328, 1327, 1323, 1349, 0,
	1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 0,
	0, 1332, 1333, 1334, 1335, 0, 1309, 0, 0, 0,
	0, 1315, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1347, 1357, 0, 0, 1337, 1338,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	1354, 0, 0, 0, 0, 0, 0, 1324, 1325, 0,
	0, 0, 0, 1332, 1333, 1334, 1335, 0, 0, 0,
	0, 1345, 0, 1315, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1355, 0, 1347, 1357, 0, 0,
	1337, 1338, 1339, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1353, 1354, 0, 0, 0, 0, 0, 0, 1324,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1336, 0, 0, 0, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 1355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350,
	1351, 1352, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 1356, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1309, 1348, 0, 0, 0,
	0, 1346, 0, 1329, 1321, 1322, 1328, 1327, 1323, 1349,
	1326, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1307, 1308, 0, 1340, 1341, 1342, 1350, 1351,
	1352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 1332, 1333, 1334, 1335, 0, 1310, 0, 0,
	1356, 0, 1315, 1346, 0, 0, 1321, 1322, 1328, 1327,
	1323, 1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314,
	1316, 1317, 0, 0, 1309, 1347, 1357, 0, 0, 1337,
	1338, 1339, 1329, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1353, 1354, 0, 1307, 1308, 0, 0, 0, 1324, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 0, 0, 0, 0, 0, 1310, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 1333, 1334, 1335, 1355, 0, 0, 0, 0,
	0, 1315, 0, 0, 0, 1309, 0, 0, 1344, 729,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1347, 1357, 0, 0, 1337, 1338,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 1353,
	1354, 0, 0, 0, 0, 0, 0, 1324, 1325, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 1332, 1333, 1334, 1335, 0, 0, 1330, 0,
	0, 0, 1315, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 1355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1344, 0, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1307,
	1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 1356, 0, 1330,
	0, 1331, 1346, 0, 0, 1321, 1322, 1328, 1327, 1323,
	1349, 0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316,
	1317, 1309, 0, 0, 1348, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2573, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 1332, 1333,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 1346, 0, 2322, 1321, 1322, 1328, 1327, 1323, 1349,
	0, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317,
	0, 1347, 1357, 0, 0, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1353, 1354, 0, 0,
	0, 0, 0, 0, 1324, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1355, 1320, 1318, 1319, 1311, 1312, 1313, 1314, 1316,
	1317, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1307, 1308, 0, 1340, 1341,
	1342, 1350, 1351, 1352, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 1343, 0, 0, 0, 2317, 0, 0,
	1310, 0, 0, 1356, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1309, 0, 0,
	0, 1348, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 1326, 0, 0, 0, 0, 0, 0, 0,
	1307, 1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 0, 1310, 0, 0, 1356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 1333, 1334, 1335, 0, 0,
	0, 0, 1309, 0, 1315, 0, 0, 0, 1346, 0,
	1329, 1321, 1322, 1328, 1327, 1323, 1349, 1326, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 1347, 1357, 0,
	0, 1337, 1338, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1353, 1354, 0, 0, 0, 0, 0, 0,
	1324, 1325, 0, 0, 0, 0, 0, 0, 0, 1332,
	1333, 1334, 1335, 0, 1345, 0, 0, 0, 0, 1315,
	0, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1355, 0, 0,
	0, 0, 1347, 1357, 0, 0, 1337, 1338, 1339, 0,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1353, 1354, 0,
	0, 0, 0, 0, 0, 1324, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 1345,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 1355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 1348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2284, 0, 0, 0, 0, 0, 1307, 1308, 0, 1340,
	1341, 1342, 1350, 1351, 1352, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 1343, 0, 0, 0, 2268, 0,
	0, 1310, 0, 0, 1356, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1309, 0,
	0, 0, 1348, 0, 1346, 0, 1329, 1321, 1322, 1328,
	1327, 1323, 1349, 1326, 1320, 1318, 1319, 1311, 1312, 1313,
	1314, 1316, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 1333, 1334, 1335, 0,
	0, 0, 0, 0, 0, 1315, 0, 0, 0, 1346,
	0, 0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320,
	1318, 1319, 1311, 1312, 1313, 1314, 1316, 1317, 1347, 1357,
	0, 0, 1337, 1338, 1339, 0, 0, 0, 0, 1307,
	1308, 0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 0,
	0, 0, 0, 1353, 1354, 0, 0, 1343, 0, 0,
	0, 1324, 1325, 0, 1310, 0, 0, 1356, 0, 0,
	0, 0, 0, 0, 0, 1345, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 0,
	0, 1309, 0, 0, 0, 0, 0, 0, 1355, 1329,
	0, 0, 0, 0, 0, 0, 1326, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1307, 1308,
	0, 1340, 1341, 1342, 1350, 1351, 1352, 0, 1336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 1333,
	1334, 1335, 0, 1310, 0, 1331, 1356, 0, 1315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 0,
	1309, 1347, 1357, 0, 0, 1337, 1338, 1339, 1329, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1353, 1354, 0, 0,
	0, 0, 0, 0, 1324, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 1333, 1334,
	1335, 1355, 0, 0, 0, 1346, 0, 1315, 1321, 1322,
	1328, 1327, 1323, 1349, 1344, 1320, 1318, 1319, 1311, 1312,
	1313, 1314, 1316, 1317, 0, 0, 0, 0, 0, 0,
	1347, 1357, 0, 0, 1337, 1338, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 1353, 1354, 0, 0, 0,
	0, 0, 0, 1324, 1325, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	1355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 1640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 1346, 0,
	0, 1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318,
	1319, 1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 0,
	1348, 1651, 1636, 1641, 1624, 1661, 1660, 0, 0, 0,
	1626, 1625, 0, 0, 0, 0, 0, 0, 1670, 1669,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1662, 0, 1658,
	1657, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1656, 0, 0, 0, 0, 0, 0, 1346, 0, 0,
	1321, 1322, 1328, 1327, 1323, 1349, 0, 1320, 1318, 1319,
	1311, 1312, 1313, 1314, 1316, 1317, 0, 0, 1655, 1653,
	1654, 0, 661, 0, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 668, 0, 0, 1635, 0, 0,
	0, 0, 0, 0, 0, 0, 666, 0, 1644, 1639,
	1645, 1646, 1647, 1648, 1649, 0, 1643, 0, 0, 0,
	0, 0, 0, 0, 0, 1667, 1668, 0, 0, 0,
	667, 0, 0, 0, 0, 669, 0, 0, 0, 696,
	0, 0, 0, 0, 0, 675, 676, 0, 0, 0,
	686, 0, 0, 0, 0, 1628, 0, 0, 0, 0,
	0, 0, 0, 692, 670, 0, 0, 1659, 0, 0,
	0, 1637, 1638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 690,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1652, 0, 0, 0, 1621,
	1619, 1620, 1623, 1622, 0, 0, 0, 0, 671, 0,
	0, 0, 0, 0, 665, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 672,
	673, 0, 1629, 1630, 1631, 1632, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1650, 1633, 0, 0,
	0, 679, 0, 0, 0, 0, 0, 1672, 674, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 678, 0, 1627, 0, 1663, 1664, 1665, 1666,
	0, 0, 0, 0, 693, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1634, 0, 0, 0, 0, 1671, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 677, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 688, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 681, 694, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 664, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 684, 0, 0, 682, 0, 0, 0, 697, 698,
	0, 0, 0, 0, 695, 0, 0, 0, 0, 0,
	0, 685, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 687,
}
var sqlPact = [...]int{

	4947, -1000, -8, -1000, -1000, -1000, 234, -1000, -1000, -1000,
	-1000, 233, 231, 229, -1000, 228, 227, 225, 223, 222,
	221, 219, 218, 216, 211, 210, 207, -1000, -1000, 203,
	-1000, -1000, -1000, -1000, 202, 201, 199, -1000, 198, 1562,
	31635, 189, 186, 185, 2050, 49361, 1504, 179, 170, -1000,
	168, 3021, 37404, 1177, 1869, -1000, 163, 162, 1491, 48980,
	278, 1987, 34314, 37017, 1972, 48593, 31248, 1933, 33927, 48206,
	-1000, -1000, 1094, -1000, -1000, 47819, 156, 155, 154, 149,
	148, -1000, 147, 47432, 146, 145, 144, 139, 128, 127,
	-1000, 126, 124, 122, 121, 111, 106, 102, 101, 98,
	95, 92, 85, 80, 79, 77, 70, -1000, 58480, 69,
	68, 65, -1000, 1366, 64, 63, 62, 61, 59, -1000,
	-1000, -1000, 57, 55, 54, 53, -1000, 48, 45, 123,
	44, 43, 41, 40, 39, -1000, 1188, 555, 1319, 13922,
	1287, 1280, 1278, 1257, 1268, 841, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 52028, 49361, 38, -33,
	35, -1000, 2446, 844, 24222, 4947, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36630, 36243,
	35856, 29700, 47045, 46658, 10626, 10626, 977, -1000, -1000, -1000,
	-1000, -1000, -10, 32778, 49361, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 275,
	-1000, -1000, -1000, -1000, -1000, -1000, 20623, 482, 20199, 478,
	19775, 343, 459, -1000, -1000, -1000, 270, -1000, -1000, -1000,
	-1000, 1281, -1000, -1000, -1000, -1000, 46271, 45884, 2018, 45497,
	29303, 28906, 45110, 49361, 49361, 1787, 1782, 44723, -1000, -1000,
	44336, -1000, -1000, 2229, 1955, 1950, 35469, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 43955, 43568, 43181, 42794,
	42407, 28509, 28112, 643, -1000, -1000, -1000, -1000, 6956, 637,
	-1000, -1000, -1000, -1000, -1000, 34, -1000, 33, 28, -1000,
	27, 26, 21, 20, 11, 9, 8, 5, -1000, 2,
	1, -1000, 0, -4, -1000, -5, -6, 1573, 1445, 1379,
	42020, 1069, 49361, -1000, 1496, -3, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 636, 49361, -1000, -1000, 21033, 99, -1000,
	635, -1000, 1934, -1000, 21033, 99, -1000, 1488, 246, 1418,
	-1000, -1000, -1000, 1363, 1122, -1000, -1000, 49361, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2617, 1449, 634, 41633, -1000,
	1580, -1000, 800, 14742, -1000, 905, -1000, 14742, 269, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1320, 1247, 2548, 27715, 1610, 2346, 2199,
	2616, 1661, 2191, 2123, 2111, 2095, 2062, 2615, 1153, 2614,
	1149, 2612, 2047, 2035, 2567, 1479, 35082, 2610, 2608, 2029,
	1932, -1000, -1000, -1000, -1000, 1132, -1000, -1000, -1000, -1000,
	-1000, -1000, 38936, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1188, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1650, 2326, 2326, 2326, 2429,
	446, 419, -1000, 123, -1000, 1802, -1000, 1443, -1000, -1000,
	-1000, 57959, -1000, -1000, 21033, 21033, 21033, 21033, 21033, 1262,
	-1000, -1000, -1000, 673, -1000, 633, 574, -1000, -1000, -1000,
	-1000, -1000, 632, 2571, -1000, 851, -1000, -1000, -1000, -1000,
	2522, -1000, 12267, -1000, -1000, -1000, 452, 21033, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 260, 810, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	565, 1232, 562, 562, 562, -1000, -1000, 842, -1000, -1000,
	789, -1000, 776, -1000, -1000, -1000, 1995, 631, 630, -1000,
	629, 626, 625, -1000, -1000, -1000, 611, 609, 608, 605,
	604, 603, 593, 592, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 842, 842, -1000, 591, 590, 588, 587, 586,
	585, 583, 579, 578, 1525, -1000, -1000, 1525, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 975, 50885, -1000, -1000, -1000,
	-11, 49361, -1000, 459, -11, -1000, -1000, 577, -1000, 15152,
	15152, 15152, -1000, -1000, 1472, 21033, -1000, 2185, -1000, 4438,
	-216, 733, 25383, -1000, 23448, 733, 665, 27318, -1000, 1930,
	-1000, -1000, 576, 259, -1000, -1000, -1000, -1000, -1000, -1000,
	1966, 2221, 1036, -1000, 1203, 2217, -1000, 2222, 2213, 1201,
	-1000, -1000, 825, 2207, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1336, -1000, -1000, 1557, 2204, -41,
	2049, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1546, -1000, 30095,
	32778, -13, -1000, -1000, -34, -1000, 10231, 57959, -1000, -1000,
	-1000, 57959, 748, -1000, -1000, 2200, -1000, 57959, 747, -1000,
	-1000, 2198, -1000, 1921, 49361, 10626, 49361, 49361, -1000, 575,
	1623, 1451, -1000, -1000, 41246, 2222, 1619, -1000, -1000, 816,
	1609, -1000, -1000, 1605, -1000, 459, -1000, -1000, 813, -1000,
	2606, 40865, 51647, 816, 1599, -1000, -1000, -1000, 38936, -1000,
	49361, -1000, 49361, -1000, 1096, -1000, 51266, 165, 2190, -1000,
	-1000, 165, 2188, -1000, 165, 2186, -1000, 158, 2183, -1000,
	-1000, 1422, 2182, -1000, -38, 2167, -1000, -1000, -38, 2165,
	-1000, -1000, 21033, -37, -1000, -1000, -1000, 844, 30861, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 40478, 30095, 32397, 49361,
	34695, 30095, 647, 57959, -1000, 2489, 58342, 30095, 57959, -1000,
	32397, 49361, 1981, -1000, 40091, 39704, 2375, 795, -1000, -1000,
	49361, -1000, 21033, -1000, 2488, 1505, -27, -1000, -1000, -1000,
	-1000, -1000, 1665, 1753, 958, 1321, -1000, 14742, 14742, 2271,
	-1000, 258, 10626, -1000, -1000, 1029, 1706, -1000, -1000, -1000,
	-1000, 30095, 30095, -1000, 39317, -1000, -1000, -1000, 1416, 49361,
	-1000, -1000, 1979, -1000, 32016, 49361, -1000, 49361, -1000, 49361,
	-1000, 49361, -1000, 49361, -1000, -1000, -1000, -1000, -1000, 2116,
	1291, 1271, -1000, 49361, -1000, 49361, -1000, -1000, -1000, 1655,
	-1000, -1000, -1000, -1000, 49361, -1000, -1000, -1000, -1000, -1000,
	-1000, 1214, -1000, 1026, -1000, -1000, 167, -1000, -1000, 1650,
	-1000, 1518, 1748, 19351, 1719, 21033, 123, -1000, -1000, 123,
	123, 13498, -1000, -1000, -1000, 49361, -1000, 58342, 58342, 10626,
	1004, 21033, 21033, 21033, 21033, 21033, 21033, 21033, 21033, 21033,
	21033, 21033, 21033, 21033, 21033, 21033, 21033, 21033, 21033, 21033,
	21033, 21033, 21033, 21033, 21033, 21033, 21033, 21033, 21033, 21033,
	21033, 21033, 21033, 21033, 21033, 21033, 1633, 21033, 973, 21033,
	21033, 21033, 21033, 1600, -1000, -1000, 1377, 503, 1417, -1000,
	2531, 2531, 2531, 58058, 58058, 539, 673, -1000, 21033, -1000,
	99, 21033, 11023, -1000, 2560, 1119, -1000, -1000, 419, 52798,
	1524, -1000, 418, 11447, -1000, -1000, -1000, 12267, 574, 18927,
	839, 57959, 9836, 1957, 1827, -1000, 2559, -1000, -1000, 2522,
	-1000, -1000, -1000, -1000, 1002, 1001, 999, 997, 573, 695,
	692, 683, 667, 545, 21033, 21033, 21033, 21033, 21033, 21033,
	21033, 21033, -1000, -1000, 18517, 18093, 17669, 17245, 16821, 22263,
	16397, 21033, 12677, -1000, -27, -1000, 50885, -1000, 49361, -11,
	2474, 21033, 230, -1000, 56594, -1000, 230, 230, 572, -51,
	57959, 1721, 1717, 24609, 1645, 1312, 1312, 1312, -1000, 571,
	660, 733, 7447, 37785, 1318, 733, 733, 151, 284, 409,
	23061, 2185, 37785, -1000, -1000, 49361, 567, 11023, 10626, -18,
	1295, -1000, 33540, 2359, 2349, 2285, 1081, -1000, 1058, 2419,
	38936, 2450, 570, 2324, 1917, -1000, -1000, 962, 38936, 2222,
	-1000, 58342, -1000, 1803, 2418, 1160, 1150, 1160, 1160, 1142,
	38936, 961, 1243, 30095, 2321, 956, -19, 2448, 540, 2317,
	1901, 955, -1000, -1000, 49361, 10626, 2301, 1020, 721, -13,
	32778, 49361, 257, -1000, 21033, 99, 21033, 99, 1045, -54,
	256, 1740, 1728, 151, -1000, 33159, 2470, 2158, 49361, 1743,
	-17, 49361, -1000, -1000, 2222, 2157, -1000, 1241, -1000, 2155,
	2147, 2463, 564, 2601, -1000, 1444, 1598, -1000, -1000, -1000,
	1442, 1595, 969, 2145, 834, 489, 2462, 489, 26544, -1000,
	49361, -1000, 49361, -1000, -1000, 49361, -1000, 49361, -1000, 49361,
	-1000, 49361, 49361, -1000, 49361, 30095, 30095, 30095, -60, 6171,
	30861, -62, 812, 954, -53, -1000, 408, 49361, 865, 33159,
	3164, -65, -1000, 1047, -1000, -1000, -1000, -1000, 335, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 842, 566, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 565, 1232, 562, 562, 562,
	-1000, -1000, -1000, 789, -1000, 776, -1000, -1000, -1000, 842,
	842, -1000, -1000, -194, 1895, -34, 34695, 721, -1000, 721,
	-1000, 1967, -1000, 2306, 771, -70, 900, -27, -1000, 1525,
	-1000, 1151, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2570, -1000, 2555, -1000, -1000,
	2557, -14, -1000, -14, -1000, 10626, -1000, 49361, 1965, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 49361, -1000, 49361,
	-1000, -1000, -1000, -1000, -1000, -1000, 1107, -1000, 1947, -1000,
	1944, -1000, 251, -1000, -1000, -1000, 49361, 49361, 49361, -1000,
	38936, -1000, -1000, -1000, -1000, 57959, -1000, 414, -1000, -1000,
	57959, 1145, 1749, -1000, 1749, -15, -1000, 56522, 1693, 49361,
	-1000, -1000, -1000, -1000, -1000, -1000, 792, 804, 804, 1125,
	1125, 1125, 1125, 2578, 438, 749, 392, 308, 308, 308,
	308, 308, 308, 308, 308, 3481, 628, 628, 3481, 3481,
	3481, 3481, 3481, 628, 628, 628, 308, 308, 308, 58058,
	5829, 6459, 21033, 21033, 953, 1350, 503, 5843, 21033, 57033,
	57033, 57033, 57033, -1000, 1653, -1000, -1000, -1000, -1000, 1891,
	559, 22263, 22263, -1000, -1000, -1000, -1000, 11857, 21033, -1000,
	-1000, -1000, -1000, 15973, -1000, 56089, -241, 407, -166, 30,
	-1000, 21033, 21033, 21033, 406, -1000, 401, -1000, 949, -1000,
	947, 946, 938, -1000, 558, 250, 21033, 49361, -1000, 53806,
	655, -82, -1000, 1117, -1000, 21033, 248, -1000, 1309, 557,
	556, 398, -72, 788, 787, 786, 775, 21033, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 57796, 53735,
	53664, 53373, 5663, 53302, 53231, -73, 396, -1000, 1885, -166,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 395, -1000, -75,
	-1000, -89, -1000, 394, -1000, 57540, -166, 391, 3900, -1000,
	22263, 22263, 22263, -1000, 390, -1000, 56231, -1000, 57465, 15563,
	15563, 15563, 388, 57209, 21033, -166, -1000, -1000, 554, -91,
	834, 15152, 23835, 10626, -1000, 834, 834, 21033, -1000, 21033,
	24609, 24609, 2076, 1711, 24609, -1000, -1000, -1000, -1000, 37785,
	659, 733, 37785, -1000, 2522, 1715, -1000, -1000, -1000, 49361,
	459, -1000, 37785, 37785, 10626, 733, -1000, 378, 25770, 30,
	237, 1677, 49361, 49361, 49361, -1000, -1000, 1587, 50504, 1586,
	58342, 49361, -1000, -1000, 553, 552, 1690, 1687, 49361, 49361,
	50123, 49742, 49361, 1273, 21033, 1613, 1821, 99, -1000, 99,
	774, 551, 49361, 1195, -1000, -1000, -1000, -1000, -1000, 49361,
	-1000, -1000, 2553, -1000, 1160, -1000, -1000, -1000, 1160, 2222,
	1192, 49361, 30095, 821, 773, 49361, 1259, 99, -1000, 99,
	760, 550, 10626, 1205, -1000, 758, 49361, 1807, -1000, 1544,
	-1000, -1000, 9441, 57959, -1000, 57959, -1000, -1000, -1000, 10626,
	1786, 1786, 377, -16, -1000, -1000, -1000, -1000, -1000, -1000,
	1781, 49361, 561, 49361, 99, 49361, 176, 812, 30095, 49361,
	-17, 49361, 30095, 30095, 30095, 99, 2598, 548, 2593, -1000,
	49361, 2127, 49361, 2112, 2081, 689, 49361, 1325, 21033, 1197,
	-1000, 26157, 855, 49361, 1159, 171, -1000, -1000, -1000, 18,
	49361, -1000, -1000, 165, 165, 165, -1000, 158, 1422, -1000,
	-38, -38, -1000, -1000, -1000, 6171, 1884, 38555, 49361, 2499,
	812, 547, 30095, -92, -1000, 871, 960, 951, -1000, 58342,
	-1000, 672, 957, -1000, 2539, 542, 2522, -1000, 812, 49361,
	150, -1000, 818, 1571, -1000, 14742, 14742, -1000, 1525, -1000,
	-1000, 1199, -1000, 1210, -1000, -1000, -1000, -1000, 14742, -1000,
	-1000, 1018, -34, -34, -1000, 1104, 1102, 49361, -1000, -1000,
	-1000, -1000, 1145, -1000, 21033, -1000, -1000, -1000, 13498, -1000,
	-1000, -1000, 49361, -117, 21033, 21033, 5362, 5149, 21033, 22263,
	22263, -1000, 21033, 4619, -1000, -1000, -1000, -1000, -1000, 1880,
	535, 21033, 58342, 4990, 4946, -1000, 375, 52940, 3481, -1000,
	21033, -1000, 373, 14332, -1000, 56853, -12, -12, -1000, 2566,
	1638, 1483, 1206, 1126, 2536, 9046, -166, -94, -1000, -1000,
	671, 2053, -1000, 21033, 56952, 8651, -1000, 26931, 835, 1325,
	-1000, -1000, 2522, -1000, -1000, -1000, -1000, 55733, 58342, 58342,
	21033, 21033, -1000, 21033, 21033, 21033, -1000, -1000, 21033, -1000,
	-1000, -1000, -1000, 1876, 21033, -1000, 58342, 58342, 22263, 22263,
	22263, 22263, 22263, 22263, 22263, 22263, 22263, 22263, 22263, 22263,
	22263, 22263, 22263, 22263, 22263, 22263, 22263, 1704, 22263, 2529,
	2529, 2529, -1000, 1939, 1876, 21033, 21033, 58342, 372, 371,
	364, -1000, 21033, -166, 3164, -1000, 1825, -1000, -99, -1000,
	2185, -1000, -1000, 1825, 1825, -105, 57959, -1000, 2076, -1000,
	533, 21033, 24609, -1000, 654, -1000, -110, -1000, 37785, -1000,
	653, -239, -1000, 716, -1000, 459, -1000, -1000, -1000, 236,
	37785, -1000, -113, -1000, 2460, 344, 10626, -1000, -1000, 933,
	929, -1000, 2107, -1000, 1584, -1000, 859, -1000, 1242, 21033,
	24996, 530, 528, 1339, -1000, 2101, 1422, 2097, 1422, -1000,
	-1000, 778, -1000, 57959, 525, 524, -1000, -18, 1219, -1000,
	-1000, 21033, 21033, -1000, 928, -1000, -1000, -1000, 2222, 927,
	-1000, -1000, 1240, 21033, -1000, -1000, -1000, -1000, 21033, 21033,
	-1000, -19, 926, 21033, 2010, 812, 1874, 1034, -1000, -1000,
	-1000, -1000, -1000, -1000, 1759, 33159, 49361, 521, 49361, 520,
	-1000, -1000, 518, 49361, -1000, -1000, -1000, 2222, -1000, 816,
	-1000, -1000, -1000, 2588, -1000, 864, 10626, 516, 10626, 1672,
	689, 30480, -1000, 816, 1748, -1000, 57959, -1000, 1159, 13087,
	2290, -115, -1000, 177, -1000, -1000, -1000, 834, 26544, 24609,
	21033, 2584, -118, -1000, -1000, -1000, -1000, -1000, -1000, 99,
	-21, 515, -1000, 714, 712, -34, 1413, -1000, 30095, 49361,
	49361, -1000, 2526, -1000, 652, 333, 2522, 331, -1000, -34,
	49361, -1000, 1322, 10626, 49361, 49361, 10626, 49361, -1000, -1000,
	-27, -1000, -1000, -1000, -1000, 49361, -1000, -1000, -1000, 1380,
	55662, -1000, 2305, 10626, 2461, 57033, 21033, 21033, 728, 4255,
	3836, 57033, 21033, 21033, 58342, 6524, -125, 21033, 21033, -1000,
	21033, 649, 57959, 2565, 21033, 330, 329, 328, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 326, -1000, -1000, -1000,
	-1000, -1000, 57959, 21033, 166, -1000, -1000, -1000, 52409, -1000,
	21033, 320, 318, -1000, 314, 312, 52869, 366, 55591, 55235,
	55164, 57959, 1939, 57959, -1000, -1000, 736, 736, 1073, 1073,
	1073, 1073, 2529, 685, 622, 991, 1508, 1508, 1508, 606,
	694, 694, 1508, 1508, 1508, 1872, 1705, 514, 6380, -1000,
	-1000, 57959, 57959, 311, -1000, -1000, -1000, -166, 294, 1817,
	2411, -1000, 24609, 1817, 1817, -1000, -1000, 49361, 57959, -1000,
	-216, -1000, 2522, -1000, -1000, 1715, -1000, 7856, -1000, 10626,
	-1000, -1000, 25770, -1000, 513, -1000, 100, 49361, 49361, 49361,
	2078, -1000, 3397, -1000, 55093, -130, -1000, 2342, 2342, 21033,
	151, 24996, 49361, -1000, 1361, 1746, 891, 49361, -1000, 49361,
	-1000, -1000, 49361, 49361, 49361, 49361, 49361, 57959, -131, 49361,
	49361, 30095, 57959, 57959, -133, 10626, 57959, 2299, -1000, 30095,
	964, 1259, 1800, -1000, 512, 24996, 510, 49361, 33159, 2459,
	-1000, -1000, -1000, -1000, 509, 1935, 1440, 24996, 1428, 1678,
	689, 30480, -1000, 969, 1159, -1000, -1000, -28, -1000, 487,
	99, 49361, 2581, 1325, -1000, -29, 57959, -1000, 690, -1000,
	38170, 38170, 30095, 30095, -1000, 292, 2260, 2259, 645, -1000,
	-1000, 290, -1000, -34, 1632, -1000, -1000, 1285, 1423, -1000,
	-1000, -1000, -1000, -1000, 2305, 57033, 57033, 21033, 21033, 21033,
	57033, 6524, -139, -1000, 57033, 57033, -166, -1000, -1000, 56853,
	-1000, -1000, -1000, -1000, 57959, 8256, 1297, -1000, 54737, -1000,
	-1000, -1000, -1000, 21033, 21033, -1000, -1000, -1000, -1000, -1000,
	22263, 1859, 506, 58342, -1000, -1000, 831, 21033, 21033, 2185,
	831, 831, -140, 733, -1000, -1000, -1000, 2522, 100, -1000,
	2576, 10626, -1000, -1000, -1000, 49361, -1000, 49361, -1000, 10626,
	49361, 1873, 1569, -1000, -1000, 1685, 505, 22263, 49361, 711,
	-1000, 1316, 24996, 2305, 10626, 2305, 54666, -141, -148, 1554,
	-1000, -1000, 1550, 21033, -1000, 58342, 1422, 1422, -149, -151,
	-1000, 923, 918, 913, -1000, -1000, -1000, 910, -1000, 750,
	-38, 21033, -1000, -1000, 1275, 24996, -154, 24996, -156, 289,
	99, 24996, -1000, -1000, 49361, -157, 49361, -1000, 689, 30480,
	-1000, 2081, -1000, 2126, 49361, 2282, -1000, -1000, -1000, 1748,
	503, -1000, -159, -1000, -1000, 812, 501, 493, -1000, -1000,
	-90, -1000, 707, 705, -1000, -1000, -1000, 10626, 1017, -1000,
	57033, 57033, 57033, -1000, 287, -1000, -1000, 1325, 2391, -1000,
	54595, 54239, 54304, 22263, 58342, -164, -1000, 49361, 57959, -166,
	-1000, -1000, -1000, 37785, 546, -1000, -1000, 2166, -1000, -1000,
	-1000, 49361, 1575, -1000, -1000, 21033, 6380, 488, 21033, -1000,
	1759, 486, -1000, -1000, -1000, -1000, -1000, -1000, 2342, -1000,
	1213, -1000, -1000, 57959, 2339, -1000, -1000, 485, 479, 49361,
	49361, 472, 470, 21033, 57959, 49361, -165, 1316, -167, -1000,
	1759, -1000, -170, 864, -1000, 469, 30480, -1000, 1672, 1024,
	-172, 49361, 1159, -1000, -1000, -1000, 30095, 30095, 1632, -1000,
	49361, -1000, 49361, -1000, 49361, -1000, 1170, 21033, -1000, -1000,
	54304, -173, -1000, -104, -1000, 2455, -1000, -1000, -1000, -1000,
	2064, 54168, 1644, 49361, 54097, 1259, 49361, 2305, 49361, 863,
	10626, 1285, 1285, -1000, -1000, 21033, 21033, 57959, 466, -1000,
	1759, 1316, 1259, 1316, 465, 24996, -1000, 1678, 1076, -1000,
	834, -1000, -1000, -175, -178, -1000, -180, -181, -1000, 286,
	21853, 21853, -166, -1000, 49361, 463, 1969, -1000, 1409, 1356,
	280, 889, -1000, -183, -1000, 459, -1000, 21033, -1000, -186,
	-1000, 848, -189, -1000, 847, -191, -196, 49361, 1259, 1759,
	-1000, 1759, 24996, -198, -1000, 26544, -1000, 812, 812, -1000,
	-1000, -1000, -1000, -1000, 22658, 1407, 1139, 56160, -1000, -1000,
	-1000, 49361, -1000, 1424, 1421, 1154, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1644, 57959, -1000, 1285, 1799, -1000, 1285,
	1843, -1000, -1000, -199, -1000, 1259, 1259, -201, -1000, -197,
	-1000, -1000, 2465, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2237, -1000, 878, 1683, 1683, 1409, -1000, 458, -1000, 455,
	1405, -1000, -1000, 1316, -1000, 21443, -1000, 2507, -1000, -1000,
	1713, -1000, -1000, 21033, 21033, -1000, -1000, -1000, 1759, -1000,
	-1000, -1000, -1000, -206, -213, 1259, 1259, 904, -1000, -1000,
	448, 21033, -214, 1259, -1000,
}
var sqlPgo = [...]int{

	0, 3080, 3079, 1978, 3078, 2460, 3074, 3073, 3072, 3070,
	3068, 2450, 3067, 3066, 3065, 3064, 3061, 3059, 3057, 3047,
	3046, 3045, 3044, 3038, 3033, 3029, 3028, 3022, 3021, 3016,
	3009, 3000, 2999, 2995, 2426, 2991, 2420, 2988, 2985, 2984,
	2979, 2978, 2977, 2976, 2973, 26, 2970, 2969, 2966, 2962,
	2959, 2415, 2958, 2956, 2411, 2954, 2953, 2392, 2946, 2941,
	2385, 2940, 2362, 2939, 2935, 2331, 2931, 2930, 2321, 2929,
	2310, 2928, 2927, 2308, 2925, 93, 111, 2924, 2276, 2922,
	2921, 2269, 2259, 2226, 2920, 2219, 2919, 2916, 2199, 2131,
	2915, 460, 2913, 2911, 2910, 2909, 2099, 2072, 2902, 2901,
	2900, 172, 2899, 2054, 2897, 2896, 2891, 2886, 2883, 2882,
	2881, 2880, 2879, 2875, 2872, 2865, 2864, 2863, 2862, 2860,
	2857, 2856, 2855, 2854, 2851, 2850, 2849, 2848, 184, 113,
	2847, 2844, 2033, 2007, 2842, 2841, 52, 49, 17, 81,
	152, 170, 4565, 158, 2840, 2838, 2836, 2832, 2829, 24,
	118, 117, 114, 116, 160, 2827, 2825, 54, 34, 28,
	19, 77, 2823, 2819, 2817, 1697, 82, 2815, 2814, 166,
	165, 2813, 710, 2812, 43, 83, 73, 86, 175, 62,
	2808, 97, 15, 2807, 131, 38, 2806, 71, 42, 22,
	3826, 104, 185, 56, 105, 155, 151, 153, 145, 121,
	612, 2804, 177, 75, 139, 2803, 2802, 2801, 50, 132,
	3, 16, 135, 8, 2799, 12, 2798, 6, 2797, 2790,
	2787, 2783, 25, 112, 37, 40, 2780, 30, 628, 126,
	2779, 159, 2777, 74, 2776, 176, 143, 137, 2, 149,
	2775, 2773, 2772, 2770, 2768, 78, 14, 79, 2764, 2763,
	95, 162, 2762, 29, 115, 87, 94, 183, 147, 89,
	154, 148, 2761, 2760, 2757, 127, 2756, 133, 98, 2755,
	2753, 32, 48, 161, 36, 2752, 2751, 107, 2750, 142,
	2747, 2745, 2740, 182, 110, 125, 4, 45, 88, 10,
	157, 103, 72, 65, 2737, 2665, 1862, 1308, 2735, 99,
	68, 33, 59, 102, 164, 39, 2734, 2733, 1630, 2730,
	2729, 2727, 2726, 123, 2724, 2720, 2719, 92, 31, 55,
	2717, 106, 51, 188, 181, 61, 146, 141, 178, 119,
	2716, 130, 96, 2715, 138, 173, 58, 2710, 194, 2707,
	134, 2706, 2704, 2703, 2701, 101, 2698, 2695, 2689, 186,
	2688, 100, 2682, 129, 122, 136, 85, 124, 163, 156,
	919, 2681, 140, 27, 2679, 3055, 23, 0, 3675, 3661,
	2677, 144, 90, 2676, 2674, 2670, 2669, 35, 9, 5,
	7, 11, 13, 662, 644, 2667, 2666, 128, 80, 108,
	2664, 180, 150, 2662, 2657, 2656, 47, 2655, 20, 2653,
	18, 2652, 2649, 21, 1, 2647, 2645, 171, 2644, 2643,
	2641, 2639, 2467, 2637, 179, 2634, 2632, 91, 2631, 2630,
	2629, 2628, 2109, 2621, 2580, 44, 57, 120,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 8, 8, 9, 9, 9, 33, 33, 11, 11,
	10, 10, 10, 12, 7, 7, 7, 7, 7, 7,
	7, 7, 14, 14, 24, 24, 15, 26, 414, 414,
	18, 28, 19, 29, 13, 22, 20, 20, 30, 17,
	17, 25, 25, 151, 151, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 413, 413, 153, 153, 152, 148,
	148, 416, 416, 154, 154, 154, 156, 156, 34, 34,
	89, 89, 89, 139, 82, 82, 82, 82, 82, 77,
	77, 365, 365, 366, 366, 135, 135, 136, 136, 136,
	136, 137, 137, 138, 138, 138, 48, 36, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 39, 39, 39, 39, 39, 39,
	46, 46, 129, 129, 49, 49, 49, 49, 49, 49,
	49, 49, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 60, 60, 50,
	409, 409, 236, 236, 333, 333, 62, 62, 63, 63,
	63, 63, 63, 63, 64, 64, 64, 64, 64, 64,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	71, 71, 71, 72, 72, 72, 69, 69, 69, 67,
	67, 67, 66, 66, 66, 70, 70, 70, 68, 68,
	68, 237, 237, 73, 73, 73, 73, 73, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 76, 76, 76, 76, 76, 76,
	76, 76, 335, 335, 74, 74, 306, 306, 78, 78,
	266, 266, 79, 79, 79, 79, 79, 80, 80, 80,
	80, 90, 90, 90, 90, 412, 412, 229, 229, 169,
	169, 169, 169, 85, 85, 85, 85, 86, 86, 86,
	87, 87, 134, 134, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 40, 40, 40, 41, 41, 42,
	42, 43, 43, 44, 44, 45, 45, 45, 45, 45,
	97, 97, 97, 99, 96, 96, 96, 98, 98, 98,
	98, 100, 100, 101, 101, 101, 101, 101, 101, 102,
	102, 359, 359, 244, 244, 357, 357, 358, 358, 206,
	206, 206, 206, 206, 207, 207, 207, 364, 364, 364,
	364, 364, 364, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	119, 119, 119, 128, 128, 128, 128, 128, 128, 128,
	121, 121, 121, 112, 112, 104, 104, 104, 104, 108,
	108, 108, 108, 108, 105, 105, 109, 109, 111, 111,
	113, 113, 113, 113, 113, 113, 106, 106, 106, 106,
	115, 115, 115, 115, 114, 114, 124, 124, 124, 124,
	124, 124, 320, 320, 120, 120, 120, 120, 123, 123,
	123, 123, 118, 118, 118, 122, 122, 125, 125, 125,
	125, 107, 107, 107, 419, 419, 419, 126, 126, 117,
	117, 127, 127, 127, 127, 127, 127, 127, 116, 116,
	116, 415, 415, 110, 410, 410, 407, 407, 407, 407,
	407, 407, 407, 408, 408, 411, 411, 83, 83, 83,
	55, 55, 56, 56, 208, 208, 209, 209, 288, 288,
	288, 288, 210, 210, 155, 155, 155, 213, 214, 214,
	211, 211, 212, 212, 212, 216, 216, 215, 218, 218,
	217, 287, 375, 375, 376, 376, 376, 376, 376, 376,
	376, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 373, 373, 373, 374, 371, 371, 372, 372, 372,
	372, 420, 420, 286, 286, 222, 222, 378, 378, 378,
	378, 379, 379, 379, 379, 379, 382, 381, 380, 380,
	380, 380, 380, 316, 316, 316, 59, 59, 59, 255,
	255, 254, 254, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 131, 131, 57, 57,
	57, 161, 161, 54, 54, 54, 58, 58, 61, 61,
	61, 61, 61, 61, 53, 53, 53, 53, 53, 271,
	271, 271, 270, 270, 227, 227, 322, 322, 322, 173,
	173, 174, 174, 149, 149, 149, 21, 23, 23, 16,
	16, 16, 16, 16, 16, 31, 31, 32, 32, 27,
	27, 417, 417, 418, 418, 84, 84, 88, 88, 88,
	94, 94, 130, 130, 130, 130, 130, 130, 130, 35,
	35, 35, 35, 47, 47, 47, 47, 92, 423, 423,
	423, 93, 93, 422, 422, 168, 168, 168, 168, 170,
	170, 283, 283, 284, 284, 424, 424, 285, 285, 285,
	163, 162, 164, 164, 52, 52, 52, 157, 157, 158,
	158, 159, 159, 160, 160, 425, 425, 81, 81, 81,
	133, 133, 202, 202, 279, 279, 279, 223, 223, 179,
	179, 282, 282, 280, 280, 280, 253, 253, 253, 132,
	132, 232, 232, 246, 246, 247, 247, 330, 330, 248,
	91, 91, 142, 142, 140, 140, 140, 140, 140, 140,
	141, 141, 141, 143, 143, 143, 143, 143, 143, 143,
	146, 146, 146, 146, 147, 147, 147, 145, 145, 389,
	389, 389, 391, 391, 392, 388, 388, 390, 390, 421,
	421, 257, 257, 257, 220, 221, 219, 219, 426, 426,
	225, 225, 224, 226, 226, 321, 321, 321, 251, 251,
	251, 251, 274, 274, 272, 272, 273, 273, 275, 275,
	276, 276, 276, 277, 277, 278, 278, 250, 250, 302,
	302, 144, 144, 144, 231, 231, 231, 233, 233, 293,
	293, 293, 294, 294, 292, 292, 292, 292, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 324, 324, 234,
	234, 325, 281, 281, 405, 405, 405, 406, 406, 319,
	319, 326, 326, 326, 326, 326, 326, 317, 317, 318,
	318, 331, 332, 332, 260, 260, 260, 260, 258, 258,
	259, 259, 327, 327, 327, 327, 252, 252, 328, 328,
	328, 289, 289, 336, 336, 336, 336, 351, 230, 230,
	230, 346, 346, 337, 337, 337, 337, 337, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	340, 340, 340, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 350, 350, 350, 350, 350, 341, 341, 347, 348,
	342, 343, 349, 349, 349, 349, 353, 353, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 345, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 267, 267,
	267, 267, 268, 268, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	297, 297, 297, 297, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 383, 383, 383,
	383, 383, 383, 383, 383, 386, 386, 387, 387, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 393, 393,
	394, 394, 396, 396, 397, 397, 398, 399, 399, 399,
	400, 401, 401, 395, 395, 402, 402, 402, 403, 403,
	404, 404, 404, 404, 404, 308, 308, 309, 309, 315,
	315, 315, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 171, 171,
	171, 171, 171, 242, 242, 240, 240, 240, 243, 243,
	241, 241, 239, 239, 238, 238, 305, 305, 303, 303,
	307, 307, 261, 261, 352, 352, 352, 352, 352, 352,
	352, 262, 262, 262, 269, 263, 263, 264, 264, 264,
	264, 264, 299, 300, 265, 265, 265, 301, 301, 310,
	314, 314, 313, 312, 312, 311, 311, 290, 290, 291,
	291, 249, 249, 427, 427, 245, 245, 329, 329, 329,
	329, 204, 204, 235, 235, 203, 203, 197, 197, 198,
	198, 198, 198, 228, 228, 354, 354, 354, 355, 356,
	304, 189, 188, 176, 177, 187, 186, 185, 175, 178,
	182, 183, 184, 180, 181, 193, 192, 191, 190, 334,
	199, 199, 200, 200, 200, 201, 201, 201, 201, 172,
	172, 194, 194, 195, 196, 196, 165, 165, 165, 166,
	166, 167, 167, 363, 363, 361, 361, 361, 362, 362,
	362, 362, 360, 360, 360, 360, 360, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 6, 4, 6, 6, 6, 1, 1,
	5, 5, 6, 6, 7, 7, 7, 10, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 9, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 1, 2, 1, 2, 7, 3, 6,
	1, 2, 1, 3, 2, 0, 8, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 2, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 6, 3, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 3, 1, 1, 3, 5, 4, 6,
	4, 3, 0, 1, 3, 2, 4, 2, 4, 1,
	6, 6, 3, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 3, 1, 3, 2, 1, 3, 1, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 7, 3, 3, 3, 3, 4, 4, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 5, 4, 6, 4,
	6, 4, 1, 0, 2, 3, 3, 3, 6, 4,
	2, 3, 4, 2, 3, 3, 3, 4, 3, 3,
	3, 3, 4, 3, 1, 1, 1, 2, 3, 2,
	3, 7, 7, 8, 10, 7, 4, 5, 5, 5,
	3, 1, 1, 5, 2, 0, 1, 1, 1, 1,
	3, 2, 2, 2, 1, 2, 0, 3, 3, 2,
	8, 11, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 4, 2, 5, 5, 5,
	2, 8, 9, 6, 5, 3, 1, 4, 7, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 7, 3, 1,
	0, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 4, 2, 4, 7,
	3, 3, 0, 3, 6, 3, 6, 3, 6, 7,
	6, 5, 3, 4, 13, 16, 9, 12, 4, 2,
	2, 0, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 1, 3, 1,
	3, 8, 5, 4, 3, 0, 2, 2, 0, 10,
	3, 2, 0, 1, 3, 1, 1, 3, 3, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	3, 4, 1, 5, 3, 4, 5, 1, 5, 1,
	3, 2, 0, 3, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 2,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 5,
	4, 6, 3, 5, 4, 6, 4, 6, 5, 7,
	3, 3, 3, 3, 3, 4, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 1,
	1, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 1, 5, 5,
	3, 1, 1, 1, 2, 2, 2, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 8, 8, 6, 4, 6, 6, 6, 4, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 1, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 2, 2, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 424, -4, -34, -36, -48, -46,
	-49, -79, -62, -63, -64, -78, -73, -77, -80, -81,
	-82, -83, -74, -89, -88, -90, -94, -40, -91, -84,
	-85, -95, -103, -130, -131, -132, -133, -5, -11, 25,
	36, -37, -38, -39, 51, 78, 66, -57, -54, -51,
	-60, 80, 100, -390, 104, -65, -68, -70, 109, 117,
	122, 123, 147, 156, 258, 265, 287, 289, 291, 300,
	-42, -41, 118, -140, -142, 285, -86, -87, -96, -97,
	-98, -99, -134, 318, -104, -105, -106, -107, -108, -109,
	-110, -111, -112, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, 321, -35,
	-47, -93, -92, 365, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -389,
	-66, -67, -69, -71, -72, -143, -141, 421, 286, 375,
	37, 330, 67, 112, 295, 20, -14, -18, -19, -15,
	-17, -20, -16, -24, -28, -29, -26, -25, -27, -30,
	-31, -32, -33, -21, -22, -13, 392, 400, -146, -144,
	-145, -147, 307, 383, 343, 425, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 2, 343, 386,
	308, 376, 93, 169, 270, 256, -407, 2, 4, -369,
	-367, -198, -197, 343, 93, 30, 38, 39, 41, 44,
	56, 57, 58, 61, 97, 98, 116, 124, 125, 136,
	149, 151, 159, 160, 161, 176, 182, 184, 164, 205,
	234, 235, 248, 252, 262, 264, 273, 297, 324, 339,
	354, 355, 356, 362, 363, 383, 384, 388, 395, 20,
	21, 22, 23, 25, 35, 36, 37, 40, 42, 43,
	46, 47, 48, 49, 50, 51, 52, 55, 60, 65,
	66, 67, 68, 69, 74, 71, 72, 73, 76, 78,
	79, 82, 83, 91, 92, 94, 95, 96, 100, 102,
	104, 107, 108, 109, 111, 113, 114, 117, 118, 121,
	119, 349, 351, 120, 122, 123, 133, 134, 135, 137,
	138, 140, 142, 146, 148, 153, 154, 155, 156, 157,
	158, 170, 165, 171, 175, 178, 177, 179, 180, 181,
	172, 186, 189, 190, 191, 193, 194, 197, 198, 199,
	202, 201, 204, 207, 208, 211, 212, 215, 217, 220,
	221, 224, 222, 223, 226, 227, 229, 228, 236, 237,
	239, 240, 243, 244, 247, 250, 253, 254, 255, 256,
	257, 258, 259, 261, 263, 265, 267, 268, 269, 270,
	271, 272, 274, 275, 277, 278, 279, 280, 281, 285,
	283, 284, 286, 287, 288, 289, 291, 293, 294, 295,
	296, 298, 319, 320, 332, 300, 301, 302, 303, 304,
	305, 306, 310, 314, 311, 312, 313, 308, 309, 315,
	316, 318, 321, 323, 325, 326, 329, 330, 331, 333,
	336, 337, 338, 334, 335, 328, 341, 342, 344, 345,
	346, 347, 348, 350, 352, 357, 360, 361, 365, 366,
	368, 369, 372, 373, 374, 379, 375, 377, 380, 381,
	382, 387, 386, 393, 394, 396, 397, 398, -196, -165,
	414, -195, 424, 424, 424, 2, 190, 191, 269, 268,
	315, 316, -190, -194, -195, -196, -165, 4, -367, -369,
	93, 241, 424, 424, 424, 2, 343, 331, 55, 308,
	376, 293, 386, 366, 107, -270, 186, 93, 371, -165,
	265, 24, 2, 102, 175, 374, 373, 24, 261, 309,
	345, 347, 2, 424, 424, 2, 386, 308, 343, 169,
	93, 376, 293, -184, 2, -165, -76, 2, 421, 27,
	-75, -5, -51, -60, -65, -78, -73, -11, -34, -36,
	-57, -54, -62, -68, -70, -82, -81, -83, -85, -89,
	-88, -91, -96, -97, -103, -132, -133, 80, 25, 109,
	318, 118, 185, 2, -412, -229, 2, 24, -169, -165,
	80, 147, 307, -139, 343, 2, -165, 190, 191, 2,
	-184, 2, -407, 2, 190, 191, 2, -412, -229, 23,
	2, -165, 2, 304, 321, -170, 2, 300, -165, 424,
	424, 424, 424, 424, 424, 212, 60, 297, 315, -101,
	361, -100, 354, 302, -102, -359, 2, 224, -165, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 2, -128, 315, 331, 154, 36, 60, 24, 65,
	94, 148, 169, 170, 198, 75, 76, 268, 212, 191,
	-320, 316, 344, 303, 341, 361, 80, 377, 294, -415,
	119, 4, 93, 224, 317, 354, 69, 348, 349, 424,
	424, 424, -421, 2, 343, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, -141, -143, -142, 424,
	424, 424, 424, 424, -224, -225, 370, 183, 115, 246,
	-140, -142, 2, -389, -128, 315, 2, 60, 24, -357,
	2, -295, 241, -297, 412, 413, 407, 230, 399, -308,
	99, 219, 218, -298, -310, 116, 297, -243, 7, 8,
	5, 6, -172, -338, -304, -345, 364, 126, 233, -201,
	427, 9, 421, -386, -142, -309, 31, 53, -361, -200,
	-339, -348, -343, -344, -346, 42, 49, 48, 352, 223,
	310, 311, 312, 313, 325, 379, 165, 40, 239, 240,
	177, 4, 184, -199, -165, -383, -384, -367, -368, 176,
	178, 179, 180, 181, 182, 324, 39, 273, 137, 138,
	136, 108, 98, 97, 235, 44, 43, 41, -349, 95,
	354, 355, 356, 357, 193, 194, 63, 85, 86, 84,
	89, 88, 90, 87, 317, 376, 54, 30, 159, 160,
	164, 234, 161, 61, -385, 335, 81, 127, 145, 174,
	162, 187, 188, 192, 206, 209, 225, 232, 249, 251,
	292, 322, 57, 56, 384, 124, 125, 149, 205, 252,
	262, 339, 362, 363, -422, 2, 361, 361, 2, -422,
	2, -422, 2, -168, 2, 361, 358, -423, 361, 395,
	-391, 274, -392, -184, -391, 424, 424, 426, 424, -219,
	-220, -221, 2, 24, 105, 421, 2, -323, 2, 419,
	-327, -142, 200, -326, 421, -324, -190, 242, -387, 298,
	-383, -384, -172, -165, -200, 4, 219, 218, -3, 2,
	-327, 159, -190, 2, -327, 159, 2, -191, 159, -327,
	-194, 2, -365, 159, -363, 9, -362, 5, 4, -367,
	-369, -368, 63, 2, -175, -165, 2, -203, 159, -190,
	-187, -360, 4, -367, -369, -368, -370, 24, 26, 27,
	28, 29, 31, 32, 33, 34, 45, 53, 54, 59,
	62, 64, 75, 80, 84, 85, 87, 86, 88, 89,
	90, 99, 101, 103, 105, 106, 110, 112, 115, 126,
	128, 141, 143, 144, 147, 150, 152, 163, 169, 173,
	183, 185, 200, 203, 210, 213, 214, 230, 231, 233,
	238, 241, 242, 245, 246, 260, 266, 276, 290, 307,
	317, 327, 340, 343, 353, 358, 359, 364, 370, 371,
	376, 378, 385, 389, 390, 391, 392, -188, -360, 358,
	426, -235, -197, -198, -228, -165, 423, -295, 2, -91,
	2, -295, 159, 2, -91, 159, 2, -295, 159, 2,
	-91, 159, 2, -222, 421, 423, 343, 64, 2, -190,
	159, -180, 2, -165, 141, -191, 159, 2, -194, -365,
	159, 2, -365, 159, 2, -193, 2, -190, -192, -194,
	-192, 169, 169, -175, 159, 2, -165, 24, 144, 2,
	185, 2, 185, 2, -328, 2, -327, -237, 159, 2,
	-190, -237, 159, 2, -237, 159, 2, -204, 159, 2,
	-203, -175, 159, 2, -366, 159, 2, -365, -366, 159,
	2, -266, 421, -335, 2, -334, -362, 383, 421, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 315, -139, 241, 358,
	426, 421, -190, -295, -91, -306, 421, 144, -295, -91,
	241, 144, 243, 2, 93, 343, 398, 24, -165, 2,
	319, 2, 421, -101, 58, 361, -284, 2, -285, -162,
	-163, -164, 189, 267, 272, 398, -357, 358, 404, 144,
	-357, -244, 423, -128, 2, 141, 378, 2, 7, 2,
	-365, 271, 133, 2, 319, 2, 268, 316, 60, 144,
	2, 2, -410, 2, 241, 144, 2, 144, 2, 144,
	2, 144, 2, 144, 2, 2, 268, 316, 2, 360,
	199, 120, 2, 144, 2, 144, 2, 5, 2, 189,
	267, 332, 2, -190, -419, 2, 343, 386, 308, 2,
	2, 144, 2, 144, 398, 2, -252, -327, -224, -225,
	-251, -272, -273, 210, 128, 238, -257, 24, 105, -257,
	-257, 47, 422, 422, -128, 319, 2, 10, 11, 62,
	35, 412, 413, 414, 415, 139, 416, 417, 410, 411,
	409, 402, 403, 406, 195, 196, 77, 405, 404, 70,
	216, 299, 129, 130, 131, 132, 282, 166, 167, 168,
	13, 14, 15, 28, 245, 209, 399, 162, 322, 407,
	16, 17, 18, 187, 188, 232, 38, 163, -171, -205,
	-295, -295, -295, -295, -295, 251, -249, -290, 419, -142,
	421, 421, 421, 5, 421, 5, -356, 7, -142, -295,
	-308, 422, -241, 421, -142, -308, -303, 421, 297, 419,
	-311, -295, 423, -393, 393, -341, 421, 264, -340, 421,
	-340, -340, -353, 387, 394, 400, 394, 400, 141, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 421, -353, -353, 421, 421, 421, 421, 421, 421,
	421, 421, 421, -283, -284, -283, 358, -170, 426, -391,
	-222, 421, -245, -329, -295, 414, -245, -245, 241, -238,
	-295, 81, -260, 192, 225, 145, 206, 292, 174, -356,
	-76, -292, 427, -319, 400, -142, -324, -165, -142, -326,
	421, -323, -319, 414, -190, 421, 144, 421, 423, -151,
	283, -150, 22, 25, 109, 381, 121, -212, 171, 256,
	116, 328, -414, 118, 301, 350, 351, 283, 116, -254,
	-256, 32, 91, 227, 253, 50, 157, 218, 219, 330,
	116, 283, 392, 116, 118, 283, -153, 328, -414, 118,
	301, 283, -152, -212, 116, 427, 118, 236, -365, -235,
	426, 426, -360, 414, 116, 116, 116, 116, 144, -228,
	-360, -190, -199, -165, -200, 421, -222, 230, 241, -409,
	-236, 343, -190, -255, -254, 230, -161, -388, 392, 230,
	230, -222, 32, 421, 2, -177, 159, 2, -166, -165,
	-177, 159, -388, 230, -328, -202, -190, -202, 318, -184,
	32, -154, 426, 52, 288, 116, -154, 116, -154, 116,
	-154, 426, 116, -154, 116, 426, 116, 116, -238, 422,
	426, -335, -365, -407, -228, -169, -365, 144, 80, 421,
	32, -305, -336, -337, -350, -338, -347, -342, -345, 278,
	279, 277, 281, 280, 42, 49, 48, 352, 223, 310,
	311, 312, 313, 325, 379, 165, 40, 239, 240, 177,
	4, 41, -349, 184, 176, 178, 179, 180, 181, 182,
	324, 39, 273, 137, 138, 136, 108, 98, 97, 235,
	44, 43, 95, 354, 355, 356, 357, 193, 194, 57,
	56, 384, 335, -366, -407, -228, 141, -175, 2, -190,
	2, 71, 72, 398, -359, -238, 32, -284, 2, -424,
	426, 208, -207, 215, 229, 153, 242, 396, -364, 5,
	4, -304, -316, 99, 212, -345, 8, 413, -354, 7,
	412, -358, -357, -358, 83, 423, -360, 343, 193, -365,
	-365, -359, 24, 320, 2, -190, -411, 141, -408, 293,
	-407, -190, -190, -190, -190, -190, 141, 2, 360, 2,
	360, 2, -165, -165, 208, -190, 343, 169, 343, -154,
	426, -251, -273, -272, -275, -295, 24, -278, 135, 226,
	-295, -297, -141, -141, -141, -226, -321, -295, 266, 169,
	-359, -351, -336, -336, -189, -360, 354, -295, -295, -295,
	-295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, 209, 162, 322, 38, 163, -295, 358, -295,
	-295, -295, -295, 222, 230, 233, 364, 126, 372, 105,
	236, -427, 340, 34, -301, -142, -242, 421, -315, 29,
	327, 24, -308, 421, -290, -295, -291, -239, -238, -238,
	422, 385, 24, 105, 414, 2, 7, -267, 397, 221,
	96, 155, 220, -268, 306, 422, 426, 32, 422, -295,
	-239, -307, -303, -314, -313, 389, -360, 414, -394, 134,
	150, 7, -356, 354, 354, 354, 354, 421, 422, 2,
	422, 2, 422, 2, 422, 2, 422, 2, -295, -295,
	-295, -295, -295, -295, -295, -238, -261, 2, -352, -238,
	4, 397, 221, 96, 155, 220, 306, -261, 2, -238,
	2, -238, 2, -262, 2, -295, -238, -263, -296, -297,
	412, 413, 407, -308, -264, 2, -295, -239, -295, 45,
	203, 359, -265, -295, 144, -238, -170, -392, 32, -238,
	-231, 426, 144, 32, 4, -231, -231, 421, 422, 426,
	192, 192, -323, -260, 192, -258, 249, -258, -258, -405,
	421, 420, -319, -176, 419, 428, -360, -318, -317, 32,
	-184, 247, -319, -319, 423, 422, -318, -190, 421, -238,
	-360, 426, 358, -417, 75, 64, -287, 159, 64, -371,
	-178, 75, -372, -165, 59, 371, 266, 143, -417, 75,
	-417, 75, 75, 318, 331, 47, -327, 35, -91, 204,
	73, 144, 358, -327, -256, -336, 91, 218, 219, 47,
	-355, -354, 413, -355, 47, -355, -355, -355, 392, -191,
	-327, 358, 257, -365, 73, 358, 426, 35, -91, 204,
	73, 144, 358, -203, -176, 73, 343, -332, -331, 401,
	-197, -165, 423, -295, -91, -295, -91, 333, 422, 423,
	187, 187, -208, -209, -165, -288, -287, -373, -374, -371,
	186, 169, 371, 127, 32, 116, -228, -333, 185, 426,
	-236, 116, 257, 116, 116, 32, 421, 113, 270, 2,
	241, 230, 241, 230, -157, 346, 116, -289, 390, -279,
	-91, 421, 99, 32, -279, -246, -247, -330, -248, -178,
	421, -184, -190, -237, -237, -237, -203, -204, -175, -365,
	-366, -366, 422, -76, -334, 422, -138, 392, 358, 392,
	422, -139, 378, -209, -75, 25, 80, 109, 422, 426,
	-230, 31, 419, -267, 421, -353, 421, -138, -331, 144,
	-229, -332, -332, 141, 72, 404, 358, 422, 361, -285,
	-206, 272, 326, 284, 314, 8, 7, 7, 426, -360,
	-190, 141, -228, -228, 315, 141, 141, 423, -190, -203,
	-190, -327, -276, -354, 421, -277, 297, 298, 426, -149,
	33, 103, 197, -190, 398, 114, -295, -295, 358, -427,
	340, -301, 114, -295, 222, 233, 364, 126, 372, 105,
	236, 144, 421, -296, -296, 422, -240, -295, -295, 420,
	430, 422, -426, 426, -224, -295, -238, -238, 422, 422,
	358, 358, 358, 358, 421, 423, -238, -228, 420, 420,
	426, -312, -313, 110, -295, 423, -399, 250, 421, 421,
	422, 422, 426, 398, 398, 398, 398, -295, 32, 426,
	426, 426, 422, 426, 426, 426, 422, 422, 144, 422,
	422, 422, 422, -269, 260, 422, 10, 11, 412, 413,
	414, 415, 139, 416, 417, 410, 411, 409, 402, 403,
	404, 70, 216, 299, 13, 14, 15, 187, 163, -296,
	-296, -296, 422, -299, -300, 144, 141, 32, -265, -265,
	-265, 422, 144, -238, 421, 422, -289, -329, -233, 2,
	-323, -186, -360, -289, -289, -238, -295, -323, -323, -259,
	378, 241, 192, -323, -317, 422, -406, -356, -319, -318,
	-356, -294, -293, 142, 228, -184, -222, -318, -318, -360,
	-319, 422, -234, -325, -387, -426, 423, -150, -190, -178,
	-185, -165, 230, -287, 159, -156, 230, -336, -185, 421,
	421, 197, 197, -178, -185, 159, -178, 159, -185, -185,
	-413, 272, 237, -295, 211, 270, 231, -151, 283, -91,
	-91, 398, 421, -193, 283, -199, -355, -355, -254, 283,
	-191, -365, 392, 398, -175, -152, -91, -91, 398, 421,
	-176, -153, 283, 398, -190, -135, 158, 236, 414, -360,
	-129, 5, 233, -129, 422, 426, 169, -177, 169, -183,
	-166, -91, -190, 144, -138, -365, -190, -191, -365, -365,
	-365, -91, 2, 421, 2, -190, 116, -190, 116, -158,
	111, -425, 404, -175, -225, -224, -295, -253, -282, 290,
	241, -223, -179, -178, 383, -184, -253, -232, 426, 144,
	404, 423, -223, -154, -154, -154, -154, -154, -76, 144,
	-137, 244, -136, -165, 5, -228, 23, -138, 421, -365,
	422, -336, 419, 420, 7, 7, 421, -356, -138, -228,
	144, -43, 392, 270, 93, 343, 256, 169, -357, -357,
	-284, 369, 68, 272, -357, 343, 315, 315, -165, -277,
	-295, -321, -190, 427, -295, -295, 114, 114, -295, -296,
	-296, -295, 114, 144, 421, -295, -305, 28, 28, 422,
	426, -291, -295, 422, 385, -426, -426, -426, 5, 221,
	155, 220, -268, 220, -268, -268, 7, 414, -360, 422,
	-303, 112, -295, 353, -360, 414, -400, -181, 421, -165,
	390, -224, -356, 422, -351, -336, -295, -295, -295, -295,
	-295, -295, -299, -295, -351, -336, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, 105, 230, 236, -296, -300,
	-299, -295, -295, -336, 422, 422, 422, -238, -75, -250,
	150, -332, 426, -250, -250, 422, -259, 421, -295, -323,
	420, 422, 426, -318, 420, 426, 429, 404, -222, 423,
	-317, 422, 426, -281, 32, 422, -360, 358, 358, 116,
	230, 380, -375, -372, -295, -227, -322, -178, -387, 421,
	-165, 421, 421, -148, 109, 318, -418, 116, -154, 116,
	-154, 396, 421, 421, 358, -417, 75, -295, -238, 358,
	358, 257, -295, -295, -238, 358, -295, 118, -138, 144,
	342, -210, 172, -288, -166, 421, -177, 421, 421, -222,
	-190, -255, -161, 2, -271, 378, -176, 421, -176, -159,
	202, -425, -363, -388, -274, -272, -253, -245, 231, 74,
	422, 426, 423, -289, -247, -233, -295, 2, 422, -91,
	426, 421, 404, 404, 243, -365, -139, -139, 7, 420,
	422, -356, 422, -228, 244, -187, -175, -190, -188, -203,
	-190, 242, 422, -149, -176, -295, -295, 114, 28, 28,
	-295, -295, -305, 422, -295, -295, -238, 420, 5, -295,
	422, 422, 422, 422, -295, 423, -401, -165, -295, 422,
	422, 422, 422, 426, 426, 422, 422, 422, 422, -300,
	144, 105, 236, 421, 422, 422, -302, 152, 47, -323,
	-302, -302, -228, -292, -356, -293, -176, 419, -360, -325,
	421, 423, -178, -185, -287, 116, -376, 75, -377, 62,
	127, 80, 230, 233, 371, 266, 59, 99, 276, 32,
	422, 422, 426, -174, 62, -174, -295, -227, -228, 230,
	337, 99, 230, 99, 92, 366, -178, -185, -228, -228,
	-190, -178, -185, 422, -193, -191, -365, 422, -176, 73,
	-366, 354, -211, -212, 163, 421, -227, 421, -228, -208,
	32, 421, 146, 46, 241, -227, 241, -160, 201, -425,
	-363, -157, -253, -280, 421, 241, -91, -179, 2, -225,
	404, -136, -137, -365, -365, 422, 92, 92, 420, 422,
	-44, -45, 169, 75, 259, -214, -213, 256, 236, -149,
	-295, -295, -295, 422, -426, -360, 414, -395, 256, 422,
	-295, -295, -296, 144, 421, -305, -396, 391, -295, -238,
	-396, -396, 422, -319, -356, 2, -287, -185, -189, -182,
	-165, 127, 159, 233, 197, 421, -296, -190, 421, 2,
	-286, -420, 79, 338, -322, -149, -189, -149, 422, 422,
	422, 233, 233, -295, -336, -154, -154, 422, 422, 358,
	358, 358, 358, 398, -295, 254, -227, 422, -227, 422,
	422, -91, -227, -190, 422, -190, -425, -363, -158, 106,
	-228, 75, -274, -301, 422, -138, 421, 421, 426, 24,
	421, 24, 421, -188, 343, 422, -225, 47, 422, 422,
	-296, -305, 422, -397, -398, -181, -318, 420, -377, -182,
	230, -295, -167, 421, -295, -210, 421, -174, 276, -173,
	62, 421, 421, -178, -185, 421, 421, -295, -190, 422,
	-286, 422, -210, 422, -271, 421, -363, -159, 373, 231,
	422, -185, -253, -366, -366, -45, -228, -228, -190, -402,
	270, 298, -238, 422, 426, 32, 116, 422, -378, 217,
	-165, 422, -211, -228, -149, -190, -416, 378, -189, -216,
	-215, -213, -218, -217, -213, -238, -238, 421, -210, -286,
	-211, -286, 421, -227, -160, 318, -289, 422, 422, 422,
	422, 422, -403, -404, 38, 368, 83, -295, -403, -398,
	-400, 127, -379, -382, -381, 241, 145, 255, 323, 422,
	337, 388, 422, -222, -295, 422, 426, 383, 422, 426,
	383, 422, 422, -228, -211, -210, -210, -227, 422, -246,
	-138, -138, -404, 263, 140, 297, 263, 140, -182, -381,
	241, -382, 241, 373, 102, -378, -215, 163, -217, 144,
	422, -211, -211, 422, -289, 28, -380, 227, 288, 52,
	318, -380, -379, 421, 421, -155, 52, 288, -286, -404,
	21, 233, 99, -238, -238, -210, 422, 422, -211, -211,
	358, 421, -238, 422, -211,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 187, 189, 191, 0, 0, 0, 214, 216, 218,
	219, -2, 0, 0, 0, 254, 255, 257, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	394, 395, 0, 870, -2, 0, 373, 375, 384, 386,
	388, 390, 391, 0, 453, 455, 457, 459, 461, 463,
	465, 466, 468, 470, 472, 474, 476, 478, 480, 482,
	484, 486, 488, 490, 492, 494, 496, 498, -2, 782,
	784, 786, 788, -2, 62, 64, 66, 68, 70, 72,
	88, 222, 223, 225, 227, 229, 232, 233, 235, 907,
	260, 262, 264, 266, 268, -2, 921, 0, 0, 0,
	-2, 0, -2, -2, -2, 800, 73, 74, 75, 76,
	77, 78, 79, 94, 95, 96, 97, 98, 99, 100,
	81, 83, 84, 90, 91, 93, 0, 0, 883, 885,
	887, 889, -2, 0, 0, -2, 7, 13, 15, 17,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
	40, 42, 46, 52, 54, 56, 60, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, -2, -2,
	-2, -2, 0, 0, 1563, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
	1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1564, 1565, 1566, 1567, 1568,
	1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
	1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
	1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618,
	1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628,
	1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638,
	1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
	1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658,
	1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668,
	1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
	1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
	1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718,
	1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728,
	1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738,
	1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1459, 1503,
	1462, 1457, 188, 190, 192, 193, 0, 0, 0, 0,
	0, 0, 676, 1488, 1501, 1502, 1503, 1506, 1507, 1508,
	1563, 0, 215, 217, 220, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 742, 352,
	1654, 354, 356, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 256, 258, 259, 0, 0, 0, 0,
	0, 0, 0, 351, 349, 1482, 293, 294, 0, 0,
	334, 335, 336, 337, 338, 339, 341, 298, 300, 302,
	303, 305, 307, 309, 311, 313, 315, 317, 319, 320,
	322, 324, 325, 327, 329, 330, 332, 743, 0, 0,
	0, 0, 0, 170, 0, 366, 360, 365, 367, 369,
	370, 371, 372, 0, 0, 168, 163, 0, 0, 609,
	347, 345, 0, 162, 0, 0, 779, 0, 366, 1530,
	364, 780, 781, 0, 0, 775, 776, 1684, 810, 374,
	376, 385, 387, 389, 392, -2, -2, 1779, -2, 415,
	-2, 423, 1782, 1686, 426, 0, 428, -2, 431, 454,
	456, 458, 460, 462, 464, 467, 469, 471, 473, 475,
	477, 479, 481, 483, 485, 487, 489, 491, 493, 495,
	497, 499, 500, 0, 0, 0, 0, 0, 504, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, -2, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 503, 505, 506, 507, 0, 552, 591, 592, 783,
	785, 787, 0, 717, 909, 63, 65, 67, 69, 71,
	224, 226, 228, 230, 234, 236, -2, 881, 882, 261,
	263, 265, 267, 269, -2, 0, 913, 913, 913, 0,
	0, 882, 880, 0, 377, 0, 379, 0, 504, 382,
	383, 435, 436, 1124, 0, 0, 0, 0, 0, 1357,
	1208, -2, -2, 1240, 1242, 1758, 1779, 1356, 1244, 1245,
	1246, 1247, 0, 0, 1250, 0, 1252, 1253, 1254, 1255,
	0, 1257, 0, 1261, 1262, 1263, 0, 1436, 1499, -2,
	1038, 1039, 1040, 1041, 1042, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1495, 1490, 1329, 1276, -2, 1517, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1571, -2, -2, -2, -2, -2, -2, 1091, -2,
	-2, -2, -2, -2, -2, -2, 1791, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 0, 1747, 1764, 1765,
	1770, 1772, 1766, 1755, 1299, -2, 1792, 1793, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1804, 1805, 1806, 1807,
	1808, 1809, -2, -2, -2, 1759, 1760, 1762, 1771, 1775,
	1776, 1781, 1785, 1786, 812, 790, 803, 812, 792, 793,
	794, 795, 796, 801, 802, 805, 0, 797, 798, 799,
	899, 1661, 902, 676, 900, 884, 886, 0, 888, 0,
	0, 0, 893, 916, 914, 0, 952, 897, 898, 908,
	967, 990, 0, 972, 0, 990, 1012, 0, 977, 1680,
	1277, 1278, 0, 1503, 1500, -2, 1802, 1803, 2, 80,
	0, 1764, 1012, 82, 0, 1764, 85, 0, 1764, 0,
	-2, 89, 0, 1764, 171, 172, 1513, 1514, 1518, 1519,
	1520, 1521, 1791, 92, 0, 1478, 101, 0, 1764, 1456,
	0, 1475, 1522, 1523, 1524, 1525, 1526, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
	1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
	1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
	1883, 1884, 1885, 1886, 1887, 1888, 1889, 0, 1472, 0,
	0, 601, 1453, 1458, 602, 1463, 0, 194, 195, 196,
	197, 198, 1764, 200, 201, 0, 203, 204, 1764, 206,
	207, 0, 209, 0, 0, 0, 0, 0, 231, 676,
	1764, 0, 238, 1483, 0, 700, 1764, 698, 1487, -2,
	1764, 720, 723, 1764, 725, 676, 727, 1485, 732, 1486,
	0, -2, 1510, 906, 1764, 826, 353, 355, 0, 247,
	0, 839, 0, 841, 0, 860, 1018, 155, 1764, 272,
	291, 155, 1764, 275, 155, 1764, 278, 155, 1764, 281,
	1451, 155, 1764, 284, 285, 1764, 287, 173, 288, 1764,
	290, 348, 0, 0, -2, 342, 1489, -2, 0, 340,
	299, 301, 304, 306, 308, 310, 312, 314, 316, 318,
	321, 323, 326, 328, 331, 333, -2, 0, 0, 0,
	0, 0, 0, 607, 608, 0, 0, 0, 777, 778,
	0, 0, 0, 396, 0, 0, 0, 0, 809, 393,
	0, 412, 0, 414, 1754, -2, -2, 418, 813, 817,
	818, 819, 0, 0, 0, 0, 425, 0, 0, 0,
	429, 432, 0, 501, 502, 0, 0, 512, 513, 514,
	515, 1659, 1585, 518, 0, 521, 542, 556, 0, 0,
	525, 527, 606, 529, 0, 0, 531, 0, 533, 0,
	535, 0, 537, 0, 539, 541, 543, 557, 545, 0,
	0, 0, 555, 0, 561, 0, 564, 565, 566, 0,
	568, 569, 570, 571, 0, 573, 574, -2, -2, 578,
	580, 0, 590, 0, 508, 509, 155, 1016, -2, 0,
	876, 930, 931, 0, 0, 0, 0, 911, 912, 0,
	0, 0, 872, 873, 378, 0, 381, 0, 0, 0,
	0, 1362, 1363, 1364, 1365, 1366, 1367, 1370, 1371, 1368,
	1369, 1372, 1373, 0, 0, 0, 0, 0, 1374, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1375, 1376, 1377, 0, 0, 1379, 0, 1381, 0, 0,
	0, 0, 0, 0, 1187, 1189, 1444, 0, 0, 1378,
	1129, 1130, 1131, 1166, 1167, 0, 1241, 1441, 1440, 1243,
	0, 1393, 0, 1249, 0, 1121, 1256, 1469, -2, 0,
	1357, 1388, 0, 0, 1264, 1265, 1266, 0, 0, 1393,
	0, 1435, 0, 1331, 0, 1074, 0, 1075, 1076, 0,
	1077, 1078, 1089, 1096, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 1093, 0, 0, 0, 0, 0, 1416,
	-2, 0, 0, 789, -2, 791, 0, 807, 0, 901,
	0, 0, 956, 1445, 1449, 1450, 956, 956, 0, 0,
	1394, 0, 0, 0, 0, 1009, 1009, 1009, 1007, 984,
	0, 990, 0, 1000, 0, 990, 990, 0, -2, 972,
	0, 0, 1000, 1013, 1014, 0, 0, 0, 0, 102,
	772, 123, 0, 772, 772, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 119, 108, 109, 0, 0, 86,
	701, 0, 704, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	121, 0, 146, 148, 0, 0, 0, 0, 1003, 600,
	0, 0, 1504, 1461, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 1490, 1491, 615, 0, 0, 0, 245,
	240, 0, 242, 696, 699, 0, 718, 0, 905, 0,
	0, 0, 0, 0, 733, 0, 1764, 738, 1474, 1509,
	0, 1764, 828, 0, 1022, 0, 842, 0, 0, 1019,
	0, 270, 0, 153, 154, 0, 273, 0, 276, 0,
	279, 0, 0, 282, 0, 0, 0, 0, 0, 908,
	0, 0, 185, 0, 358, 368, 0, 0, 0, 0,
	908, 0, 1396, 1030, 1026, 1033, 1034, 1035, 1121, 1081,
	1082, 1083, 1084, 1085, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1097, 1091, 1107, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1087, 0, 1062, 1062, 1062,
	1079, 1080, 1098, 1099, 1101, 1103, 1105, 1031, 1032, 1097,
	1097, 1094, 1095, 185, 0, 362, 0, 1003, 398, 1003,
	400, 0, 586, 0, 0, 0, 0, -2, 420, 0,
	815, 0, 820, 444, 445, 446, 822, 823, 424, 447,
	448, 449, 450, 451, 452, 0, 693, 0, 695, 1465,
	0, 421, 437, 422, 427, 0, 433, 0, 0, 516,
	517, 519, 520, 522, 523, 524, 528, 0, 594, 1676,
	604, 530, 532, 534, 536, 538, 0, 547, 0, 549,
	0, 551, 559, 562, 567, 572, 0, 0, 0, 716,
	0, 879, 928, 929, 934, 938, 939, 942, 945, 946,
	936, 1124, 894, 895, 896, 922, 923, 755, 0, 0,
	380, 1125, 1027, 1126, 1127, 1471, 0, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, -2, -2, -2,
	-2, -2, -2, -2, -2, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, -2, -2, -2, 1164,
	1165, -2, 1380, 1382, 0, 1444, 0, -2, 0, -2,
	-2, -2, -2, 1184, 0, 1186, 1191, 1193, 1195, 0,
	0, 0, 0, 1443, 1205, 1427, 1428, 0, 0, 1359,
	1360, 1361, 1190, 0, 1442, 1439, 0, 0, 1392, 919,
	1267, 0, 0, 0, 0, 1274, 0, 1470, 1108, 1109,
	1110, 1111, 1112, 1113, 1122, 1260, 1390, 0, 1389, 0,
	0, 0, 1400, 1434, 1430, 0, 1492, 1498, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 1403,
	-2, -2, -2, -2, -2, -2, -2, 0, 1313, 0,
	1325, 0, 1327, 0, 1315, 1394, 1413, 0, 0, 1211,
	0, 0, 0, 1357, 0, 1318, 1394, 1421, 0, 0,
	0, 0, 0, 1394, 0, 1426, 806, 903, 0, 0,
	1022, 0, 0, 0, 1448, 1022, 1022, 0, 951, 0,
	0, 0, 0, 0, 0, 1004, 1008, 1005, 1006, 0,
	0, 990, 1000, 964, 0, 0, 1473, 970, 999, 0,
	676, 989, 1000, 1000, 0, -2, 974, 0, 0, 919,
	-2, 0, 0, 0, 0, 771, 125, 1764, 0, 157,
	0, 0, 666, 1479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 702, 703, 705, 711, 713, 0,
	707, 1468, 0, 708, 0, 710, 712, 714, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 1455, 0, 0, 176, 1002, 0,
	1454, 1464, 0, 199, 202, 205, 208, 186, 675, 0,
	0, 0, 0, 614, -2, 616, 618, 619, 620, 621,
	1610, 1510, 0, 1510, 0, 0, 0, 185, 0, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 731,
	0, 0, 0, 0, 830, 836, 0, 921, 0, 858,
	844, 0, 0, 0, 858, 862, 863, 865, 866, 0,
	0, 1020, 292, 155, 155, 155, 1452, 155, 155, 174,
	286, 289, 350, 295, 343, 908, 0, 0, 0, 0,
	185, 0, 0, 0, 344, 0, 0, 0, 346, 0,
	1023, 1025, 0, 1036, 0, 1089, 0, 160, 185, 0,
	0, 397, 402, 0, 587, 0, 0, 413, 0, 814,
	821, 0, 441, 0, 443, 694, 1467, 1466, 0, 434,
	510, 0, 605, 603, 546, 0, 0, 0, 588, 589,
	593, 1017, 0, 940, 0, 937, 943, 944, 0, 925,
	753, 754, 0, 0, 0, 0, -2, -2, 0, 0,
	0, 1206, 0, -2, 1185, 1188, 1192, 1194, 1196, 0,
	0, 0, 0, 0, 0, 1383, 0, 1385, 1207, 1437,
	1440, 1355, 0, 0, 918, 919, 919, 919, 1273, 0,
	0, 0, 0, 0, 0, 0, 1391, 0, 1398, 1399,
	0, 0, 1431, 0, 0, 0, 1275, 0, 0, 0,
	1086, 1060, 0, 1100, 1102, 1104, 1106, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 1298, 1310, 0, 1312,
	1324, 1326, 1314, 0, 0, 1316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1214,
	1215, 1216, 1317, 1419, 1420, 0, 0, 0, 0, 0,
	0, 1323, 0, 1425, 908, 953, 948, 1446, 1003, 955,
	957, 1447, 1476, 948, 948, 0, 1395, 992, 0, 994,
	0, 0, 0, 996, 0, 985, 0, 987, 1000, 969,
	0, 0, 962, 0, 961, 676, 998, 971, 975, 1492,
	0, 1015, 0, 979, 982, 0, 0, 124, 759, 0,
	0, 1477, 0, 127, 1764, 136, 0, 643, 0, 0,
	0, 0, 0, 774, 137, 1764, 155, 1764, 155, 138,
	141, 0, 145, 143, 0, 0, 634, 103, 772, 106,
	112, 0, 0, 765, 0, 706, 709, 715, 87, 0,
	767, 757, 0, 0, 756, 147, 107, 113, 0, 0,
	769, 105, 0, 0, 0, 185, 0, 0, 1460, 1505,
	210, 212, 213, 211, 623, 0, 1510, 0, 1510, 0,
	1481, 612, 676, 0, 239, 244, 243, 700, 721, -2,
	724, 726, 728, 0, 730, 741, 0, 0, 0, 832,
	836, 0, 835, 906, 933, 920, 1021, 837, 858, 0,
	0, 0, 847, 849, 846, 843, 840, 1022, 0, 0,
	0, 0, 0, 271, 274, 277, 280, 283, 296, 0,
	183, 1642, 181, 178, 180, 357, 0, 164, 0, 0,
	0, 1397, 0, 1028, 0, 0, 0, 0, 161, 361,
	0, 399, 0, 0, 0, 0, 0, 0, 410, 411,
	-2, 439, 440, 442, 438, 0, 548, 550, 558, 0,
	0, 924, 755, 0, 1128, 1169, 0, 0, -2, 0,
	0, 1173, 0, 0, 0, -2, 0, 0, 0, 1384,
	1386, 0, 1439, 1268, 0, 0, 0, 0, 1251, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 0, 1258, 1259, 1358,
	1401, 1429, 1433, 0, 1493, 1497, 1337, 1338, 1342, 1484,
	0, 0, 0, 1279, 0, 0, 0, 0, 0, 0,
	0, 1402, 1412, 1414, 1212, 1213, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, -2, -2, -2, 1230,
	1231, 1232, -2, -2, -2, 0, 0, 0, 1415, 1417,
	1418, 1422, 1423, 0, 1320, 1321, 1322, 1424, 0, 950,
	0, 954, 0, 950, 950, 915, 993, 0, 1011, 995,
	967, 986, 0, 976, 965, 0, 966, 0, 997, 0,
	973, 978, 0, 981, 0, 1268, -2, 0, 0, 0,
	0, 156, 641, 665, 0, 0, 744, 752, 752, 0,
	1479, 0, 0, 129, 0, 0, 0, 0, 134, 0,
	140, 144, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 115, 118, 0, 0, 114, 0, 158, 0,
	0, 631, 0, 617, 0, 0, 0, 0, 615, 0,
	237, 697, 719, 729, 0, 0, 0, 0, 0, 834,
	836, 0, 827, 828, 858, 932, 838, 856, 857, 855,
	0, 0, 0, 921, 864, 861, 867, 868, 0, 169,
	0, 0, 0, 0, 359, 0, 0, 0, 0, 1029,
	1037, 0, 1090, 363, 0, 581, 582, 629, 0, 585,
	511, 935, 941, 926, 755, 1171, 1175, 0, 0, 0,
	1177, -2, 0, 1199, -2, -2, 1387, 1438, 1248, 919,
	1269, 1271, 1272, 1123, 1432, 0, 1344, 1341, 0, 1328,
	1061, 1289, 1290, 0, 0, 1293, 1295, 1296, 1297, 1411,
	0, 0, 0, 0, 1319, 904, 1333, 0, 0, 958,
	1333, 1333, 0, 990, 988, 963, 959, 0, 1493, 980,
	0, 0, 761, 763, 126, 0, 642, 0, 645, 0,
	0, 0, 0, 652, 653, 0, 0, 0, 0, 0,
	667, 674, 0, 755, 0, 755, 0, 0, 0, 0,
	131, 150, 0, 0, 773, 0, 155, 155, 0, 0,
	760, 0, 0, 0, 766, 768, 758, 0, 770, 0,
	175, 0, 610, 630, 0, 0, 0, 0, 0, 0,
	0, 0, 739, 740, 0, 0, 0, 824, 836, 0,
	829, 830, 246, 0, 0, 0, 845, 848, 850, 933,
	0, 182, 0, 177, 179, 185, 0, 0, 1024, 1088,
	401, 403, 0, 0, 409, 583, 628, 0, 0, 927,
	1179, -2, -2, 1200, 0, 1494, 1496, 921, 0, 1330,
	0, 0, -2, 0, 0, 0, 890, 0, 949, 947,
	891, 892, 1010, 1000, 0, 983, 128, 0, 646, 647,
	1480, 649, 0, 651, 654, 0, 656, 1512, 0, 660,
	623, 0, 671, 672, 745, 746, 751, 747, 752, 669,
	0, 130, 132, 149, 750, 133, 139, 0, 0, 0,
	0, 0, 0, 0, 1001, 0, 0, 674, 0, 664,
	623, 613, 0, 741, 736, 0, 0, 831, 832, 0,
	0, 0, 858, 869, 184, 165, 0, 0, 0, 405,
	0, 407, 0, 627, 0, 1270, 1347, 0, 1291, 1292,
	-2, 0, 1238, 1332, 1334, 0, 968, 960, 644, 648,
	0, 0, 680, 0, 0, 631, 0, 755, 0, 152,
	0, 0, 0, 762, 764, 0, 0, 117, 0, 663,
	623, 674, 631, 674, 0, 0, 833, 834, 0, 852,
	1022, 854, 859, 0, 0, 404, 0, 0, 584, 0,
	0, 0, 1343, 1239, 0, 0, 0, 655, 685, 0,
	0, 0, 668, 0, 748, 676, 135, 0, 749, 0,
	635, 0, 0, 638, 0, 0, 0, 0, 631, 623,
	611, 623, 0, 0, 825, 0, 853, 185, 185, 406,
	408, 1340, 1345, 1348, -2, 1729, 1560, 0, 1346, 1335,
	1336, 0, 657, 681, 682, 0, 677, 678, 679, 1511,
	658, 659, 673, 680, 151, 632, 0, 0, 633, 0,
	0, 120, 122, 0, 661, 631, 631, 0, 737, 1022,
	166, 167, 0, 1350, 1351, 1352, 1353, 1354, 650, 683,
	0, 684, 0, 0, 0, 685, 636, 0, 639, 0,
	626, 662, 734, 674, 851, 0, 686, 0, 689, 690,
	0, 687, 670, 0, 0, 622, 624, 625, 623, 1349,
	688, 691, 692, 0, 0, 631, 631, 0, 735, 637,
	0, 0, 0, 631, 640,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 410, 3, 416, 411, 3,
	421, 422, 414, 412, 426, 413, 423, 415, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 430, 425,
	402, 404, 403, 406, 427, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 419, 3, 420, 417, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 428, 409, 429, 407,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 405,
	57745, 408, 57746, 418, 57747, 424, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1026
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1032
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1041
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1072
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1075
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1078
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1087
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1097
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1104
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1144
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1155
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1170
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1174
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1178
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1189
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1201
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1227
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1231
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1235
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1241
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1245
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1251
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1257
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1267
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1274
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1281
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1288
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1295
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1305
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1315
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1325
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1338
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1350
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1354
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1360
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1364
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1370
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1381
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1386
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1391
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1396
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1401
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1406
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1411
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1415
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1418
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1427
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1439
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1449
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1456
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1459
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1466
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1475
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1484
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1496
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1503
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1504
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1508
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1518
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1526
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1530
		{
			sqlVAL.union.val = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1536
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1540
		{
			sqlVAL.union.val = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1547
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1551
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1555
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1561
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1565
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1594
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1617
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1621
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1624
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1628
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1659
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1663
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1667
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1674
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1691
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1694
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1708
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1718
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1722
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1728
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1732
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1736
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1740
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1746
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1756
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1760
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1763
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1767
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1779
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1780
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1781
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1782
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1792
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1800
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1802
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1805
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1815
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1824
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1832
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1834
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1838
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1841
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1851
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1860
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1868
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1870
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1874
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1877
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1881
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1886
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1892
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1893
		{
			sqlVAL.str = ""
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1902
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1903
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1905
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1906
		{
			return helpWith(sqllex, "CREATE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1911
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1912
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1913
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1915
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1916
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1917
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1918
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1928
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1935
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1939
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1949
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1953
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1959
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1963
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1970
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1974
		{
			sqlVAL.union.val = nil
		}
	case 246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1987
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1997
		{
			return helpWith(sqllex, "DELETE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2004
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2007
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2008
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2009
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2010
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2011
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2020
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2021
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2022
		{
			return helpWith(sqllex, "DROP")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2025
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2026
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2027
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2028
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2029
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2037
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2041
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2044
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2052
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2056
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2059
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2067
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2071
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2074
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2082
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2090
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2097
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2105
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2113
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2120
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2128
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2132
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2135
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2143
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2147
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2150
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2154
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2158
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2179
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2182
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2184
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2188
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2195
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2198
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2199
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2201
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2202
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2203
		{
			return helpWith(sqllex, "DELETE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2204
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2205
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2206
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2207
		{
			return helpWith(sqllex, "INSERT")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2208
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2210
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2211
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2213
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2216
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2217
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2219
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2220
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2228
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2229
		{
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2233
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2247
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2254
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2258
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2262
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2272
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2278
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2284
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2288
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2298
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2306
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2310
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2313
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2333
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2337
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2341
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2344
		{
			return helpWith(sqllex, "GRANT")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2364
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2368
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2372
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2375
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2380
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2384
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2395
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2399
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2413
		{
			return helpWith(sqllex, "RESET")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2414
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2422
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2426
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2429
		{
			return helpWith(sqllex, "RESET")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2437
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2440
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2451
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2454
		{
			return helpWith(sqllex, "USE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2458
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2459
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2460
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2461
		{
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2462
		{
			return helpWith(sqllex, "USE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2463
		{
			return unimplemented(sqllex, "set local")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2479
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2497
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2515
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2523
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2527
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2531
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2537
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2541
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2547
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2551
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2555
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2559
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2563
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2574
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2578
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2581
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2587
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2603
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2607
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2612
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2629
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2632
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2634
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2637
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2641
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2652
		{
			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2669
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2676
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2682
		{
			return unimplemented(sqllex, "set from current")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2683
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2691
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2696
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2703
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2707
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2713
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2717
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2724
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2730
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2740
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2744
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2748
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2752
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2756
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2762
		{
			sqlVAL.union.val = tree.Low
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2766
		{
			sqlVAL.union.val = tree.Normal
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2770
		{
			sqlVAL.union.val = tree.High
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2781
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2785
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2789
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2794
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2798
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2810
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2811
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2812
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2813
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2814
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2815
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2817
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2818
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2819
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2820
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2821
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2822
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2823
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2824
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2825
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2826
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2827
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2828
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2829
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2830
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2831
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2832
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2834
		{
			return helpWith(sqllex, "SHOW")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2841
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2842
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2843
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2854
		{
			sqlVAL.str = "client_encoding"
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2857
		{
			sqlVAL.str = "timezone"
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2858
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2872
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2876
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2879
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2890
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2898
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2906
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2913
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2920
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2926
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2936
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2940
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2943
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2945
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2948
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2956
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2959
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2967
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2970
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2983
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2991
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2999
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3002
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3004
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3007
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3009
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3012
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3020
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3023
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3025
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3028
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3036
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3041
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3045
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3055
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3058
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3067
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3070
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3072
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3075
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3077
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3081
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3084
		{
			sqlVAL.union.val = true
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3085
		{
			sqlVAL.union.val = false
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3093
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3096
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3098
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3102
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3112
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3121
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3130
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3133
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3140
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3144
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3147
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3154
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3158
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3166
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3171
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3176
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3180
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3188
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3192
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3196
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3209
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3212
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3220
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3223
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3227
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3232
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3237
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3244
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3252
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3259
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3264
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3276
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3280
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3283
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3291
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3298
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3303
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3423
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3427
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3431
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3470
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3474
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3479
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3483
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3492
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3499
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3503
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3515
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3524
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3527
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3563
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3575
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3589
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3600
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3614
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3620
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3624
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3630
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3636
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3642
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3650
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3657
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3662
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3667
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3673
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3680
		{
			sqlVAL.str = ""
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3687
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 632:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3693
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3700
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3707
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3713
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3717
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 637:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3723
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3733
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 640:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3743
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3754
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3765
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3769
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3775
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3779
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3783
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3787
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3791
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3795
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3799
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3817
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3821
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3825
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3829
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3833
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3837
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3841
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3849
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3853
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3857
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 661:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3864
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3874
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3886
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3896
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3908
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3913
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3919
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3925
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3936
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3946
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3970
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3974
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3980
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3984
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3989
		{
			return unimplemented(sqllex, "match full")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3990
		{
			return unimplemented(sqllex, "match partial")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3991
		{
			return unimplemented(sqllex, "match simple")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3992
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3999
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4003
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4007
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4011
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4015
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4021
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4027
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4035
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4039
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4043
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4047
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4051
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4057
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4061
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4065
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4083
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 697:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4091
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4099
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4103
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4106
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4107
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4110
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4111
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4113
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4114
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4115
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4118
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4120
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4122
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4124
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4125
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4127
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4128
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4130
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4139
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4142
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4150
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4154
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4157
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4161
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4165
		{
			sqlVAL.union.val = nil
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4175
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4179
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4182
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4190
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4197
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4205
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4207
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4209
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4211
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4213
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4215
		{
			return unimplementedWithIssue(sqllex, 27796)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4231
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4244
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4258
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4267
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4276
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4281
		{
			sqlVAL.union.val = true
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4285
		{
			sqlVAL.union.val = false
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4289
		{
			sqlVAL.union.val = false
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4295
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4299
		{
			sqlVAL.union.val = false
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4305
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4309
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4318
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4321
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4322
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4325
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4326
		{
			sqlVAL.str = ""
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4329
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4330
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4334
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4338
		{
			sqlVAL.union.val = tree.Descending
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4342
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4348
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4355
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4359
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4365
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4369
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4373
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4377
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4381
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4383
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4387
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4391
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4397
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4401
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4407
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4411
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4416
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4417
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4420
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4421
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4429
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4432
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4442
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4451
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4454
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4462
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4465
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4469
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4470
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4471
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4487
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4490
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4492
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4495
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4505
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4508
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4510
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4513
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4517
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4522
		{
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4523
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4524
		{
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4532
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4539
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4542
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4543
		{
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4547
		{
			sqlVAL.str = ""
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4551
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4555
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4559
		{
			sqlVAL.str = ""
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4565
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4569
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4575
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4579
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4585
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4589
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4602
		{
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4604
		{
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4608
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4612
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4616
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4622
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4628
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4634
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4638
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 824:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4648
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4658
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4668
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4672
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4676
		{
			sqlVAL.str = ""
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4682
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4686
		{
			sqlVAL.str = ""
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4692
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4696
		{
			sqlVAL.str = ""
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4702
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4706
		{
			sqlVAL.str = ""
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4711
		{
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4712
		{
		}
	case 837:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4724
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4731
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4738
		{
			return helpWith(sqllex, "INSERT")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4749
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4756
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4760
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4768
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4774
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4778
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4782
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4788
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4792
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4812
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4816
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4820
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4826
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4830
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4832
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4838
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4843
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4847
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 859:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4864
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4875
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4879
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4880
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4884
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4888
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4901
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4904
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4908
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4951
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4957
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4961
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4976
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4980
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4984
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4988
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4992
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4996
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5003
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5038
		{
			return helpWith(sqllex, "SELECT")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5039
		{
			return helpWith(sqllex, "VALUES")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5040
		{
			return helpWith(sqllex, "TABLE")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5062
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5075
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5089
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5101
		{
			return helpWith(sqllex, "SELECT")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5105
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5114
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5123
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5138
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5145
		{
			return helpWith(sqllex, "TABLE")
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5157
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5160
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5161
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5165
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5169
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5175
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5183
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5184
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5188
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5191
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5194
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5195
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5199
		{
			sqlVAL.union.val = true
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5203
		{
			sqlVAL.union.val = false
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5207
		{
			sqlVAL.union.val = false
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5213
		{
			sqlVAL.union.val = true
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5219
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5224
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5225
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5228
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5229
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5233
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5237
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5243
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5249
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5253
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5259
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5263
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5267
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5276
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5285
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5296
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5300
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5309
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5315
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5322
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5329
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5338
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5342
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5346
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5352
		{
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5353
		{
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5356
		{
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5357
		{
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5374
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5378
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5384
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5388
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5407
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5410
		{
			return helpWith(sqllex, "VALUES")
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5412
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5424
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5427
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5429
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5435
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5445
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5449
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5455
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5461
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5466
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5489
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5493
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5497
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5501
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 968:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5528
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5542
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5546
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5549
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5551
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5555
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5559
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5564
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5580
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5586
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5590
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5596
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5598
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5602
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5608
		{
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5610
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5613
		{
			sqlVAL.union.val = nil
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5614
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5615
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5619
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5623
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5629
		{
			sqlVAL.union.val = true
		}
	case 990:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5633
		{
			sqlVAL.union.val = false
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5653
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5657
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5661
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5665
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5669
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5673
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5679
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5683
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5690
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5696
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5703
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5709
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5713
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5717
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5721
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5727
		{
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5728
		{
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5739
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5743
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5748
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5749
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5750
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5751
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5755
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5759
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5772
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5776
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5780
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5786
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5790
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5802
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5816
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5825
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5834
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5840
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5847
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5849
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5858
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5862
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5866
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5875
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5893
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5897
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5901
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5905
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5909
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5913
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5917
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5921
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5925
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5929
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5933
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5937
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5941
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5945
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5949
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5953
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5957
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5977
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5981
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5985
		{
			sqlVAL.union.val = nil
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5992
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5996
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6000
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6004
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6008
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6012
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6016
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6020
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6024
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6028
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6032
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6036
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6046
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6050
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6059
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6068
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6077
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6081
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6088
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6092
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6096
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6100
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6104
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6110
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6114
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6120
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6131
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6137
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6149
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6155
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6159
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6163
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6167
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6172
		{
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6173
		{
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6178
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6182
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6186
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6190
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6194
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6198
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6202
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6206
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6210
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6215
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6221
		{
			sqlVAL.union.val = tree.Year
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6225
		{
			sqlVAL.union.val = tree.Month
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6229
		{
			sqlVAL.union.val = tree.Day
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6233
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6237
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6241
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6247
		{
			sqlVAL.union.val = tree.Month
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6251
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6255
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6259
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6263
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6267
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6271
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6275
		{
			sqlVAL.union.val = nil
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6281
		{
			sqlVAL.union.val = tree.Second
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6284
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6308
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6312
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6316
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6319
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6328
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6332
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6336
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6340
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6344
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6348
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6352
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6356
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6360
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6364
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6368
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6372
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6376
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6380
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6384
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6388
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6392
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6396
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6400
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6404
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6408
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6412
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6416
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6420
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6424
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6428
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6432
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6436
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6440
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6444
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6448
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6452
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6456
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6464
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6468
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6472
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6476
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6480
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6484
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6488
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6492
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6496
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6500
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6504
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6508
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6512
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6516
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6520
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6524
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6528
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6532
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6536
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6540
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6544
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6548
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6552
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6560
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6564
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6568
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6571
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6573
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6577
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6581
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6585
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6589
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6593
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6597
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6601
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6605
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6609
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6613
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6617
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6621
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6625
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6629
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6633
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6637
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6654
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6658
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6662
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6677
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6681
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6685
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6689
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6693
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6697
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6701
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6705
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6709
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6713
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6717
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6721
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6725
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6729
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6733
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6737
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6741
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6745
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6749
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6753
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6757
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6761
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6765
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6769
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6773
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6777
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6781
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6785
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6799
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6807
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6843
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6847
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6851
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6855
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6858
		{
			return unimplemented(sqllex, "func const")
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6860
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6864
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6867
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6869
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6873
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6877
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6881
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6885
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6894
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6899
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6903
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6907
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6912
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6916
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6920
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6924
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6928
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6937
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6941
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6944
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6945
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6947
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6951
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6955
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6958
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6969
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6976
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6985
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6986
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6990
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7002
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7006
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7010
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7014
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7020
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7024
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7028
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7032
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7036
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7040
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7048
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7052
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7056
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7060
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7064
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7068
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7075
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7078
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7080
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7083
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7085
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7088
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7090
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7093
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7095
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7098
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7100
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7103
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7108
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7110
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7113
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7115
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7119
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7122
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7123
		{
			return unimplemented(sqllex, "treat")
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7133
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7137
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7141
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7144
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7146
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7149
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7154
		{
			return unimplemented(sqllex, "within group")
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7155
		{
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7159
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7163
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7170
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7174
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7180
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7190
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7198
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7202
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7206
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7213
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7233
		{
			sqlVAL.str = ""
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7239
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7243
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7254
		{
			bounds := sqlDollar[2].union.windowFrameBounds()
			startBound := bounds.StartBound
			endBound := bounds.EndBound
			switch {
			case startBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			}
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: bounds,
			}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7278
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7285
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7291
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7304
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7332
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7336
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7340
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7344
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7371
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7378
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7390
		{
			sqlVAL.union.val = tree.Any
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7394
		{
			sqlVAL.union.val = tree.Some
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7398
		{
			sqlVAL.union.val = tree.All
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7403
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7404
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7405
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7406
		{
			sqlVAL.union.val = tree.Div
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7407
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7408
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7409
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7410
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7411
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7412
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7413
		{
			sqlVAL.union.val = tree.LT
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7414
		{
			sqlVAL.union.val = tree.GT
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7415
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7416
		{
			sqlVAL.union.val = tree.LE
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7417
		{
			sqlVAL.union.val = tree.GE
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7418
		{
			sqlVAL.union.val = tree.NE
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7422
		{
			sqlVAL.union.val = tree.Like
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7423
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7424
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7425
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7458
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7462
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7466
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7477
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7481
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7487
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7491
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7498
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7504
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7508
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7514
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7518
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7524
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7528
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7534
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7538
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7544
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7548
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7570
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7574
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7578
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7584
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7591
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7595
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7612
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7616
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7620
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7624
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7628
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7634
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7640
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7646
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7650
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7654
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7660
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7679
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7683
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7689
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7695
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7699
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7706
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7716
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7723
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7729
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7738
		{
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7739
		{
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7743
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7747
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7753
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7762
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7766
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7770
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7778
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7782
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7788
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7792
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7798
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7805
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7833
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7837
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7841
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7847
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7859
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7863
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7872
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7883
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7893
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7991
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7998
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8002
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8006
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8020
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8024
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8028
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8041
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8059
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8069
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8073
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8087
		{
			sqlVAL.str = ""
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8093
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8097
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
