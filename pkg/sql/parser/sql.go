// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:550
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:8088

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	420, 57,
	-2, 879,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	165, 717,
	-2, 0,
	-1, 60,
	101, 879,
	171, 879,
	368, 879,
	369, 879,
	-2, 0,
	-1, 74,
	113, 853,
	127, 853,
	179, 853,
	205, 853,
	234, 853,
	242, 853,
	365, 853,
	-2, 842,
	-1, 110,
	195, 535,
	356, 535,
	-2, 0,
	-1, 115,
	4, 881,
	20, 881,
	21, 881,
	22, 881,
	23, 881,
	25, 881,
	30, 881,
	35, 881,
	36, 881,
	37, 881,
	38, 881,
	39, 881,
	40, 881,
	41, 881,
	42, 881,
	43, 881,
	44, 881,
	46, 881,
	47, 881,
	48, 881,
	49, 881,
	50, 881,
	51, 881,
	54, 881,
	55, 881,
	56, 881,
	58, 881,
	59, 881,
	63, 881,
	64, 881,
	65, 881,
	66, 881,
	67, 881,
	69, 881,
	70, 881,
	71, 881,
	72, 881,
	74, 881,
	76, 881,
	77, 881,
	80, 881,
	81, 881,
	82, 881,
	90, 881,
	91, 881,
	92, 881,
	93, 881,
	94, 881,
	95, 881,
	96, 881,
	97, 881,
	99, 881,
	101, 881,
	103, 881,
	106, 881,
	107, 881,
	109, 881,
	110, 881,
	114, 881,
	115, 881,
	116, 881,
	117, 881,
	118, 881,
	119, 881,
	120, 881,
	121, 881,
	122, 881,
	123, 881,
	124, 881,
	132, 881,
	133, 881,
	134, 881,
	135, 881,
	136, 881,
	138, 881,
	140, 881,
	144, 881,
	146, 881,
	147, 881,
	149, 881,
	151, 881,
	152, 881,
	153, 881,
	154, 881,
	155, 881,
	156, 881,
	157, 881,
	158, 881,
	161, 881,
	166, 881,
	167, 881,
	168, 881,
	171, 881,
	172, 881,
	173, 881,
	174, 881,
	175, 881,
	176, 881,
	177, 881,
	178, 881,
	180, 881,
	182, 881,
	185, 881,
	186, 881,
	187, 881,
	189, 881,
	190, 881,
	193, 881,
	194, 881,
	195, 881,
	197, 881,
	198, 881,
	200, 881,
	202, 881,
	203, 881,
	206, 881,
	207, 881,
	210, 881,
	212, 881,
	215, 881,
	216, 881,
	217, 881,
	218, 881,
	219, 881,
	221, 881,
	222, 881,
	223, 881,
	224, 881,
	229, 881,
	230, 881,
	231, 881,
	232, 881,
	233, 881,
	235, 881,
	236, 881,
	238, 881,
	239, 881,
	240, 881,
	243, 881,
	244, 881,
	246, 881,
	248, 881,
	249, 881,
	250, 881,
	251, 881,
	252, 881,
	253, 881,
	254, 881,
	255, 881,
	257, 881,
	258, 881,
	259, 881,
	260, 881,
	261, 881,
	263, 881,
	264, 881,
	265, 881,
	266, 881,
	267, 881,
	268, 881,
	269, 881,
	270, 881,
	272, 881,
	273, 881,
	274, 881,
	275, 881,
	276, 881,
	278, 881,
	279, 881,
	280, 881,
	281, 881,
	282, 881,
	283, 881,
	284, 881,
	286, 881,
	288, 881,
	289, 881,
	290, 881,
	291, 881,
	292, 881,
	293, 881,
	295, 881,
	296, 881,
	297, 881,
	298, 881,
	299, 881,
	300, 881,
	301, 881,
	303, 881,
	304, 881,
	305, 881,
	306, 881,
	307, 881,
	308, 881,
	309, 881,
	310, 881,
	311, 881,
	313, 881,
	314, 881,
	315, 881,
	316, 881,
	318, 881,
	319, 881,
	320, 881,
	321, 881,
	323, 881,
	324, 881,
	325, 881,
	326, 881,
	327, 881,
	328, 881,
	329, 881,
	330, 881,
	331, 881,
	332, 881,
	333, 881,
	334, 881,
	336, 881,
	337, 881,
	339, 881,
	340, 881,
	341, 881,
	342, 881,
	343, 881,
	344, 881,
	345, 881,
	346, 881,
	347, 881,
	348, 881,
	350, 881,
	351, 881,
	352, 881,
	353, 881,
	356, 881,
	357, 881,
	358, 881,
	359, 881,
	361, 881,
	362, 881,
	363, 881,
	364, 881,
	367, 881,
	368, 881,
	369, 881,
	370, 881,
	372, 881,
	374, 881,
	375, 881,
	376, 881,
	377, 881,
	378, 881,
	379, 881,
	382, 881,
	383, 881,
	388, 881,
	389, 881,
	390, 881,
	391, 881,
	392, 881,
	393, 881,
	-2, 0,
	-1, 136,
	113, 852,
	127, 852,
	179, 852,
	205, 852,
	234, 852,
	242, 852,
	365, 852,
	-2, 845,
	-1, 141,
	1, 775,
	185, 775,
	263, 775,
	267, 775,
	419, 775,
	420, 775,
	-2, 0,
	-1, 143,
	1, 775,
	419, 775,
	420, 775,
	-2, 0,
	-1, 144,
	1, 775,
	419, 775,
	420, 775,
	-2, 0,
	-1, 145,
	1, 779,
	419, 779,
	420, 779,
	-2, 0,
	-1, 171,
	4, 888,
	5, 888,
	6, 888,
	7, 888,
	8, 888,
	9, 888,
	20, 888,
	21, 888,
	22, 888,
	23, 888,
	25, 888,
	30, 888,
	31, 888,
	35, 888,
	36, 888,
	37, 888,
	38, 888,
	39, 888,
	40, 888,
	41, 888,
	42, 888,
	43, 888,
	44, 888,
	46, 888,
	47, 888,
	48, 888,
	49, 888,
	50, 888,
	51, 888,
	52, 888,
	53, 888,
	54, 888,
	55, 888,
	56, 888,
	58, 888,
	59, 888,
	61, 888,
	63, 888,
	64, 888,
	65, 888,
	66, 888,
	67, 888,
	69, 888,
	70, 888,
	71, 888,
	72, 888,
	74, 888,
	76, 888,
	77, 888,
	79, 888,
	80, 888,
	81, 888,
	82, 888,
	83, 888,
	84, 888,
	85, 888,
	86, 888,
	87, 888,
	88, 888,
	89, 888,
	90, 888,
	91, 888,
	92, 888,
	93, 888,
	94, 888,
	95, 888,
	96, 888,
	97, 888,
	98, 888,
	99, 888,
	101, 888,
	103, 888,
	106, 888,
	107, 888,
	109, 888,
	110, 888,
	114, 888,
	115, 888,
	116, 888,
	117, 888,
	118, 888,
	119, 888,
	120, 888,
	121, 888,
	122, 888,
	123, 888,
	124, 888,
	125, 888,
	126, 888,
	132, 888,
	133, 888,
	134, 888,
	135, 888,
	136, 888,
	138, 888,
	140, 888,
	143, 888,
	144, 888,
	146, 888,
	147, 888,
	149, 888,
	151, 888,
	152, 888,
	153, 888,
	154, 888,
	155, 888,
	156, 888,
	157, 888,
	158, 888,
	159, 888,
	161, 888,
	166, 888,
	167, 888,
	168, 888,
	170, 888,
	171, 888,
	172, 888,
	173, 888,
	174, 888,
	175, 888,
	176, 888,
	177, 888,
	178, 888,
	180, 888,
	182, 888,
	183, 888,
	184, 888,
	185, 888,
	186, 888,
	187, 888,
	188, 888,
	189, 888,
	190, 888,
	193, 888,
	194, 888,
	195, 888,
	197, 888,
	198, 888,
	200, 888,
	201, 888,
	202, 888,
	203, 888,
	204, 888,
	206, 888,
	207, 888,
	210, 888,
	212, 888,
	213, 888,
	214, 888,
	215, 888,
	216, 888,
	217, 888,
	218, 888,
	219, 888,
	220, 888,
	221, 888,
	222, 888,
	223, 888,
	224, 888,
	225, 888,
	227, 888,
	228, 888,
	229, 888,
	230, 888,
	231, 888,
	232, 888,
	233, 888,
	235, 888,
	236, 888,
	239, 888,
	240, 888,
	243, 888,
	244, 888,
	245, 888,
	246, 888,
	247, 888,
	248, 888,
	249, 888,
	250, 888,
	251, 888,
	252, 888,
	253, 888,
	254, 888,
	255, 888,
	257, 888,
	258, 888,
	259, 888,
	260, 888,
	261, 888,
	263, 888,
	264, 888,
	265, 888,
	266, 888,
	267, 888,
	268, 888,
	269, 888,
	270, 888,
	272, 888,
	273, 888,
	274, 888,
	275, 888,
	276, 888,
	278, 888,
	279, 888,
	280, 888,
	281, 888,
	282, 888,
	283, 888,
	284, 888,
	286, 888,
	287, 888,
	288, 888,
	289, 888,
	290, 888,
	291, 888,
	292, 888,
	293, 888,
	295, 888,
	296, 888,
	297, 888,
	298, 888,
	299, 888,
	300, 888,
	301, 888,
	303, 888,
	304, 888,
	305, 888,
	306, 888,
	307, 888,
	308, 888,
	309, 888,
	310, 888,
	311, 888,
	312, 888,
	313, 888,
	314, 888,
	315, 888,
	316, 888,
	317, 888,
	318, 888,
	319, 888,
	320, 888,
	321, 888,
	323, 888,
	324, 888,
	325, 888,
	326, 888,
	327, 888,
	328, 888,
	329, 888,
	330, 888,
	331, 888,
	332, 888,
	333, 888,
	334, 888,
	336, 888,
	337, 888,
	339, 888,
	340, 888,
	341, 888,
	342, 888,
	343, 888,
	344, 888,
	345, 888,
	346, 888,
	347, 888,
	348, 888,
	350, 888,
	351, 888,
	352, 888,
	353, 888,
	356, 888,
	357, 888,
	358, 888,
	359, 888,
	360, 888,
	361, 888,
	362, 888,
	363, 888,
	364, 888,
	367, 888,
	368, 888,
	369, 888,
	370, 888,
	371, 888,
	372, 888,
	374, 888,
	375, 888,
	376, 888,
	377, 888,
	378, 888,
	379, 888,
	382, 888,
	383, 888,
	388, 888,
	389, 888,
	390, 888,
	391, 888,
	392, 888,
	393, 888,
	394, 888,
	402, 888,
	407, 888,
	408, 888,
	409, 888,
	416, 888,
	422, 888,
	-2, 0,
	-1, 174,
	1, 57,
	420, 57,
	-2, 879,
	-1, 207,
	418, 1455,
	421, 1455,
	-2, 578,
	-1, 208,
	418, 1457,
	421, 1457,
	-2, 579,
	-1, 209,
	418, 1456,
	421, 1456,
	-2, 580,
	-1, 210,
	421, 1397,
	-2, 581,
	-1, 608,
	142, 1570,
	354, 1570,
	399, 1570,
	418, 1570,
	-2, 0,
	-1, 609,
	142, 1493,
	354, 1493,
	399, 1493,
	418, 1493,
	-2, 0,
	-1, 611,
	142, 1643,
	354, 1643,
	399, 1643,
	418, 1643,
	-2, 0,
	-1, 613,
	142, 1672,
	354, 1672,
	399, 1672,
	418, 1672,
	-2, 0,
	-1, 620,
	142, 1575,
	354, 1575,
	399, 1575,
	418, 1575,
	-2, 409,
	-1, 655,
	1, 507,
	415, 507,
	417, 507,
	419, 507,
	420, 507,
	-2, 0,
	-1, 656,
	1, 577,
	139, 577,
	415, 577,
	417, 577,
	419, 577,
	420, 577,
	-2, 0,
	-1, 662,
	1, 521,
	415, 521,
	417, 521,
	419, 521,
	420, 521,
	-2, 0,
	-1, 664,
	1, 525,
	415, 525,
	417, 525,
	419, 525,
	420, 525,
	-2, 0,
	-1, 667,
	1, 536,
	415, 536,
	417, 536,
	419, 536,
	420, 536,
	-2, 0,
	-1, 668,
	1, 542,
	415, 542,
	417, 542,
	419, 542,
	420, 542,
	-2, 0,
	-1, 669,
	1, 545,
	415, 545,
	417, 545,
	419, 545,
	420, 545,
	-2, 0,
	-1, 673,
	1, 559,
	415, 559,
	417, 559,
	419, 559,
	420, 559,
	-2, 0,
	-1, 674,
	1, 561,
	415, 561,
	417, 561,
	419, 561,
	420, 561,
	-2, 0,
	-1, 702,
	127, 892,
	205, 892,
	234, 892,
	-2, 848,
	-1, 710,
	127, 891,
	205, 891,
	234, 891,
	-2, 846,
	-1, 737,
	416, 1745,
	-2, 1171,
	-1, 738,
	416, 1746,
	-2, 1172,
	-1, 769,
	416, 1449,
	-2, 1440,
	-1, 770,
	5, 1027,
	416, 1464,
	-2, 1455,
	-1, 771,
	416, 1465,
	-2, 1456,
	-1, 778,
	5, 1011,
	-2, 1485,
	-1, 779,
	5, 1012,
	-2, 1489,
	-1, 780,
	5, 1013,
	-2, 1488,
	-1, 781,
	5, 1014,
	-2, 1668,
	-1, 782,
	5, 1015,
	-2, 1577,
	-1, 783,
	5, 1016,
	-2, 1636,
	-1, 784,
	5, 1017,
	-2, 1638,
	-1, 785,
	5, 1018,
	-2, 1639,
	-1, 786,
	5, 1019,
	-2, 1640,
	-1, 787,
	5, 1020,
	-2, 1648,
	-1, 788,
	5, 1021,
	-2, 1680,
	-1, 789,
	5, 1022,
	-2, 1547,
	-1, 790,
	5, 1023,
	-2, 1484,
	-1, 791,
	5, 1024,
	-2, 1585,
	-1, 792,
	5, 1025,
	-2, 1586,
	-1, 793,
	5, 1026,
	-2, 1551,
	-1, 794,
	5, 1075,
	416, 1075,
	-2, 1713,
	-1, 812,
	5, 1048,
	-2, 1486,
	-1, 813,
	5, 1066,
	-2, 1513,
	-1, 815,
	5, 1040,
	-2, 1534,
	-1, 816,
	5, 1041,
	-2, 1535,
	-1, 817,
	5, 1032,
	-2, 1550,
	-1, 818,
	5, 1033,
	-2, 1552,
	-1, 819,
	5, 1034,
	-2, 1553,
	-1, 820,
	5, 1035,
	-2, 1554,
	-1, 821,
	5, 999,
	-2, 1560,
	-1, 822,
	5, 1000,
	-2, 1561,
	-1, 823,
	5, 1063,
	-2, 1658,
	-1, 824,
	5, 1073,
	-2, 1670,
	-1, 825,
	5, 1038,
	-2, 1694,
	-1, 826,
	5, 1065,
	-2, 1695,
	-1, 827,
	5, 1047,
	-2, 1696,
	-1, 828,
	5, 1065,
	-2, 1697,
	-1, 829,
	5, 1065,
	-2, 1698,
	-1, 830,
	5, 1030,
	-2, 1701,
	-1, 831,
	5, 1030,
	-2, 1702,
	-1, 834,
	5, 1055,
	-2, 1706,
	-1, 836,
	5, 1031,
	-2, 1711,
	-1, 837,
	5, 1036,
	-2, 1712,
	-1, 839,
	5, 1030,
	-2, 1716,
	-1, 842,
	5, 1039,
	-2, 1721,
	-1, 843,
	5, 1037,
	-2, 1723,
	-1, 845,
	5, 1067,
	-2, 1725,
	-1, 846,
	5, 1069,
	-2, 1726,
	-1, 847,
	5, 1071,
	-2, 1727,
	-1, 850,
	5, 1062,
	-2, 1731,
	-1, 920,
	416, 1464,
	-2, 1455,
	-1, 937,
	278, 1437,
	409, 1437,
	-2, 1436,
	-1, 1078,
	253, 877,
	-2, 703,
	-1, 1087,
	237, 1459,
	-2, 0,
	-1, 1130,
	1, 276,
	415, 276,
	417, 276,
	419, 276,
	420, 276,
	-2, 851,
	-1, 1133,
	4, 1730,
	10, 1730,
	11, 1730,
	13, 1730,
	14, 1730,
	15, 1730,
	16, 1730,
	17, 1730,
	18, 1730,
	20, 1730,
	21, 1730,
	22, 1730,
	23, 1730,
	25, 1730,
	28, 1730,
	30, 1730,
	32, 1730,
	35, 1730,
	36, 1730,
	37, 1730,
	38, 1730,
	39, 1730,
	40, 1730,
	41, 1730,
	42, 1730,
	43, 1730,
	44, 1730,
	46, 1730,
	47, 1730,
	48, 1730,
	49, 1730,
	50, 1730,
	51, 1730,
	54, 1730,
	55, 1730,
	56, 1730,
	58, 1730,
	59, 1730,
	60, 1730,
	63, 1730,
	64, 1730,
	65, 1730,
	66, 1730,
	67, 1730,
	68, 1730,
	69, 1730,
	70, 1730,
	71, 1730,
	72, 1730,
	74, 1730,
	75, 1730,
	76, 1730,
	77, 1730,
	79, 1730,
	80, 1730,
	81, 1730,
	82, 1730,
	90, 1730,
	91, 1730,
	92, 1730,
	93, 1730,
	94, 1730,
	95, 1730,
	96, 1730,
	97, 1730,
	99, 1730,
	101, 1730,
	103, 1730,
	106, 1730,
	107, 1730,
	109, 1730,
	110, 1730,
	114, 1730,
	115, 1730,
	116, 1730,
	117, 1730,
	118, 1730,
	119, 1730,
	120, 1730,
	121, 1730,
	122, 1730,
	123, 1730,
	124, 1730,
	128, 1730,
	129, 1730,
	130, 1730,
	131, 1730,
	132, 1730,
	133, 1730,
	134, 1730,
	135, 1730,
	136, 1730,
	137, 1730,
	138, 1730,
	140, 1730,
	143, 1730,
	144, 1730,
	146, 1730,
	147, 1730,
	149, 1730,
	151, 1730,
	152, 1730,
	153, 1730,
	154, 1730,
	155, 1730,
	156, 1730,
	157, 1730,
	158, 1730,
	159, 1730,
	160, 1730,
	161, 1730,
	162, 1730,
	163, 1730,
	164, 1730,
	166, 1730,
	167, 1730,
	168, 1730,
	170, 1730,
	171, 1730,
	172, 1730,
	173, 1730,
	174, 1730,
	175, 1730,
	176, 1730,
	177, 1730,
	178, 1730,
	180, 1730,
	182, 1730,
	183, 1730,
	184, 1730,
	185, 1730,
	186, 1730,
	187, 1730,
	188, 1730,
	189, 1730,
	190, 1730,
	191, 1730,
	192, 1730,
	193, 1730,
	194, 1730,
	195, 1730,
	197, 1730,
	198, 1730,
	200, 1730,
	201, 1730,
	202, 1730,
	203, 1730,
	204, 1730,
	206, 1730,
	207, 1730,
	210, 1730,
	211, 1730,
	212, 1730,
	215, 1730,
	216, 1730,
	217, 1730,
	218, 1730,
	219, 1730,
	220, 1730,
	221, 1730,
	222, 1730,
	223, 1730,
	224, 1730,
	227, 1730,
	229, 1730,
	230, 1730,
	231, 1730,
	232, 1730,
	233, 1730,
	235, 1730,
	236, 1730,
	239, 1730,
	240, 1730,
	241, 1730,
	243, 1730,
	244, 1730,
	246, 1730,
	248, 1730,
	249, 1730,
	250, 1730,
	251, 1730,
	252, 1730,
	253, 1730,
	254, 1730,
	255, 1730,
	257, 1730,
	258, 1730,
	259, 1730,
	260, 1730,
	261, 1730,
	263, 1730,
	264, 1730,
	265, 1730,
	266, 1730,
	267, 1730,
	268, 1730,
	269, 1730,
	270, 1730,
	272, 1730,
	273, 1730,
	274, 1730,
	275, 1730,
	276, 1730,
	277, 1730,
	278, 1730,
	279, 1730,
	280, 1730,
	281, 1730,
	282, 1730,
	283, 1730,
	284, 1730,
	286, 1730,
	287, 1730,
	288, 1730,
	289, 1730,
	290, 1730,
	291, 1730,
	292, 1730,
	293, 1730,
	294, 1730,
	295, 1730,
	296, 1730,
	297, 1730,
	298, 1730,
	299, 1730,
	300, 1730,
	301, 1730,
	303, 1730,
	304, 1730,
	305, 1730,
	306, 1730,
	307, 1730,
	308, 1730,
	309, 1730,
	310, 1730,
	311, 1730,
	313, 1730,
	314, 1730,
	315, 1730,
	316, 1730,
	317, 1730,
	318, 1730,
	319, 1730,
	320, 1730,
	321, 1730,
	323, 1730,
	324, 1730,
	325, 1730,
	326, 1730,
	327, 1730,
	328, 1730,
	329, 1730,
	330, 1730,
	331, 1730,
	332, 1730,
	333, 1730,
	334, 1730,
	336, 1730,
	337, 1730,
	339, 1730,
	340, 1730,
	341, 1730,
	342, 1730,
	343, 1730,
	344, 1730,
	345, 1730,
	346, 1730,
	347, 1730,
	348, 1730,
	350, 1730,
	351, 1730,
	352, 1730,
	353, 1730,
	356, 1730,
	357, 1730,
	358, 1730,
	359, 1730,
	361, 1730,
	362, 1730,
	363, 1730,
	364, 1730,
	367, 1730,
	368, 1730,
	369, 1730,
	370, 1730,
	372, 1730,
	374, 1730,
	375, 1730,
	376, 1730,
	377, 1730,
	378, 1730,
	379, 1730,
	382, 1730,
	383, 1730,
	388, 1730,
	389, 1730,
	390, 1730,
	391, 1730,
	392, 1730,
	393, 1730,
	394, 1730,
	395, 1730,
	397, 1730,
	398, 1730,
	399, 1730,
	400, 1730,
	401, 1730,
	402, 1730,
	404, 1730,
	405, 1730,
	406, 1730,
	407, 1730,
	408, 1730,
	409, 1730,
	410, 1730,
	411, 1730,
	412, 1730,
	414, 1730,
	417, 1730,
	418, 1730,
	421, 1730,
	422, 1730,
	-2, 0,
	-1, 1151,
	142, 1643,
	354, 1643,
	399, 1643,
	418, 1643,
	-2, 0,
	-1, 1178,
	142, 1672,
	354, 1672,
	399, 1672,
	418, 1672,
	-2, 0,
	-1, 1179,
	185, 787,
	263, 787,
	267, 787,
	-2, 396,
	-1, 1256,
	127, 891,
	205, 891,
	234, 891,
	-2, 849,
	-1, 1340,
	113, 853,
	127, 853,
	179, 853,
	205, 853,
	234, 853,
	242, 853,
	365, 853,
	-2, 1214,
	-1, 1387,
	417, 1332,
	-2, 0,
	-1, 1395,
	185, 787,
	263, 787,
	267, 787,
	-2, 782,
	-1, 1424,
	417, 1332,
	-2, 0,
	-1, 1432,
	113, 853,
	127, 853,
	179, 853,
	205, 853,
	234, 853,
	242, 853,
	365, 853,
	-2, 958,
	-1, 1631,
	185, 787,
	263, 787,
	267, 787,
	-2, 398,
	-1, 1739,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1110,
	-1, 1740,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1111,
	-1, 1741,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1112,
	-1, 1742,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1113,
	-1, 1743,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1114,
	-1, 1744,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1115,
	-1, 1745,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1116,
	-1, 1746,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1117,
	-1, 1758,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1129,
	-1, 1759,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1130,
	-1, 1760,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1131,
	-1, 1763,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1136,
	-1, 1769,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1138,
	-1, 1771,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1142,
	-1, 1772,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1143,
	-1, 1773,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1144,
	-1, 1774,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1145,
	-1, 1852,
	5, 1027,
	142, 1343,
	416, 1464,
	-2, 1455,
	-1, 1853,
	142, 1344,
	-2, 1690,
	-1, 1854,
	142, 1345,
	-2, 1574,
	-1, 1855,
	142, 1346,
	-2, 1514,
	-1, 1856,
	142, 1347,
	-2, 1542,
	-1, 1857,
	142, 1348,
	-2, 1573,
	-1, 1858,
	142, 1349,
	-2, 1635,
	-1, 1927,
	417, 1332,
	-2, 0,
	-1, 1937,
	1, 959,
	79, 959,
	113, 959,
	127, 959,
	143, 959,
	148, 959,
	150, 959,
	170, 959,
	179, 959,
	188, 959,
	201, 959,
	205, 959,
	220, 959,
	234, 959,
	237, 959,
	242, 959,
	285, 959,
	287, 959,
	365, 959,
	373, 959,
	385, 959,
	386, 959,
	396, 959,
	415, 959,
	417, 959,
	419, 959,
	420, 959,
	421, 959,
	-2, 958,
	-1, 1939,
	416, 1441,
	-2, 1453,
	-1, 2019,
	417, 1402,
	421, 1402,
	-2, 1429,
	-1, 2141,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1137,
	-1, 2142,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1139,
	-1, 2147,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1140,
	-1, 2165,
	247, 1303,
	-2, 1305,
	-1, 2376,
	253, 877,
	-2, 703,
	-1, 2441,
	185, 787,
	263, 787,
	267, 787,
	-2, 395,
	-1, 2456,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1141,
	-1, 2461,
	183, 0,
	184, 0,
	227, 0,
	-2, 1159,
	-1, 2472,
	247, 1304,
	-2, 1306,
	-1, 2521,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1189,
	-1, 2522,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1190,
	-1, 2523,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1191,
	-1, 2527,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1195,
	-1, 2528,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1196,
	-1, 2529,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1197,
	-1, 2570,
	416, 1442,
	-2, 1454,
	-1, 2684,
	183, 0,
	184, 0,
	227, 0,
	-2, 1160,
	-1, 2687,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1163,
	-1, 2688,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1165,
	-1, 2833,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1164,
	-1, 2834,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1166,
	-1, 2844,
	183, 0,
	-2, 1198,
	-1, 2933,
	183, 0,
	-2, 1199,
	-1, 3031,
	38, 0,
	159, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1693,
}

const sqlPrivate = 57344

const sqlLast = 58854

var sqlAct = [...]int{

	771, 1800, 2786, 2619, 3030, 2873, 3039, 2045, 3093, 3006,
	3007, 3009, 3040, 2993, 3041, 2053, 2493, 2862, 2937, 2073,
	2801, 1120, 3029, 2824, 2637, 941, 1726, 2632, 2176, 2741,
	1786, 2391, 1062, 1561, 1259, 2642, 1044, 2756, 2383, 2580,
	768, 209, 2415, 2135, 2178, 2396, 488, 1931, 2849, 2385,
	711, 1562, 2413, 488, 2017, 1924, 956, 745, 2021, 1152,
	488, 2042, 2242, 488, 1534, 2260, 488, 209, 2284, 488,
	488, 1513, 1084, 1116, 811, 1512, 488, 1422, 1498, 2054,
	2004, 2579, 1509, 1521, 488, 2020, 1951, 2271, 2546, 1932,
	2719, 1461, 763, 950, 1403, 1518, 1825, 1799, 2938, 1717,
	537, 1347, 1798, 2581, 1921, 1712, 2131, 1344, 1395, 2395,
	767, 1942, 719, 130, 1656, 2359, 1477, 483, 2301, 558,
	28, 2241, 534, 1934, 1404, 1483, 1442, 1978, 1440, 1890,
	754, 1807, 1783, 1979, 73, 1510, 1181, 572, 2005, 1373,
	2787, 905, 943, 1375, 1819, 2018, 1131, 934, 1103, 2047,
	210, 1413, 1113, 1898, 1431, 211, 2024, 910, 887, 1335,
	1913, 1123, 1848, 735, 1258, 1260, 488, 488, 598, 136,
	205, 1655, 762, 130, 485, 575, 484, 618, 612, 1048,
	137, 1528, 710, 531, 1100, 1453, 885, 1394, 647, 584,
	1435, 1264, 769, 2562, 2164, 1536, 2563, 2046, 488, 488,
	488, 946, 488, 488, 959, 959, 591, 3120, 1536, 715,
	2074, 1907, 1536, 488, 488, 471, 3114, 474, 3113, 2006,
	1907, 3090, 1907, 3087, 3065, 2755, 715, 1492, 2755, 1275,
	1276, 3059, 3058, 2402, 3055, 1907, 1907, 586, 3056, 2431,
	1423, 471, 3052, 474, 1548, 3049, 3053, 3027, 908, 1492,
	1907, 1492, 3026, 3025, 1278, 725, 1492, 1548, 3024, 957,
	1045, 2988, 1548, 2975, 2968, 2084, 2966, 1492, 2755, 2403,
	2755, 2964, 2454, 716, 2935, 2755, 953, 2919, 2084, 1277,
	2909, 2658, 2904, 1486, 2755, 2372, 1492, 130, 1900, 888,
	888, 2902, 1051, 2892, 28, 2755, 2989, 1492, 2891, 2884,
	703, 2883, 1492, 1492, 2006, 2755, 2855, 1275, 1276, 2835,
	1492, 702, 2781, 2084, 2777, 2754, 1907, 937, 1907, 2755,
	565, 2686, 2656, 2648, 1155, 2084, 2649, 2649, 720, 2549,
	2558, 40, 1278, 565, 2559, 2922, 1164, 1822, 2552, 927,
	931, 936, 1907, 2465, 40, 44, 2421, 1907, 2257, 1548,
	2364, 2207, 1907, 889, 1492, 1907, 1283, 1277, 44, 2076,
	2212, 2213, 939, 1050, 902, 2206, 914, 2200, 1049, 1907,
	2199, 2201, 2169, 564, 1907, 2102, 2083, 2549, 2170, 1907,
	2084, 1305, 1306, 1307, 2212, 2213, 564, 471, 1907, 474,
	2070, 1156, 2013, 1492, 1907, 1823, 1492, 1906, 891, 1552,
	892, 1907, 566, 1553, 1899, 2177, 1634, 2658, 1994, 1940,
	2534, 59, 568, 718, 2467, 566, 60, 2364, 2134, 2113,
	1491, 1399, 1802, 1047, 59, 568, 174, 1537, 2404, 60,
	1298, 171, 1150, 1149, 1283, 760, 1148, 1147, 1146, 1145,
	1537, 2080, 852, 171, 1537, 1144, 1345, 2405, 1653, 63,
	1143, 1142, 40, 1141, 1140, 1139, 1138, 1824, 1821, 1305,
	1306, 1307, 63, 1137, 565, 1136, 44, 173, 1135, 1134,
	893, 890, 709, 708, 707, 40, 706, 705, 701, 173,
	700, 699, 698, 697, 696, 695, 694, 2218, 693, 44,
	692, 691, 687, 686, 2081, 685, 645, 488, 488, 644,
	488, 946, 946, 488, 643, 642, 488, 172, 1298, 488,
	641, 2218, 640, 1299, 639, 488, 165, 564, 1156, 172,
	638, 637, 636, 2082, 166, 488, 488, 488, 488, 488,
	946, 946, 2050, 568, 635, 634, 633, 946, 632, 2212,
	2213, 631, 630, 1826, 629, 138, 566, 628, 2402, 64,
	2212, 2213, 1124, 627, 626, 59, 568, 138, 146, 625,
	60, 2228, 64, 39, 1492, 1544, 624, 1899, 488, 623,
	63, 622, 607, 606, 40, 141, 139, 66, 1535, 67,
	2734, 488, 1696, 605, 604, 2228, 603, 602, 44, 139,
	66, 1299, 67, 63, 522, 521, 494, 171, 493, 1089,
	492, 488, 46, 143, 477, 2447, 2212, 2213, 567, 906,
	171, 110, 488, 1930, 45, 1156, 51, 1077, 2119, 476,
	475, 567, 1117, 195, 110, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 194, 173, 1820, 193, 192, 52, 2212, 2213,
	191, 54, 190, 189, 2229, 58, 173, 1074, 188, 144,
	187, 186, 946, 185, 59, 72, 1102, 184, 2089, 60,
	61, 2693, 1078, 1081, 2227, 183, 2218, 182, 2229, 181,
	64, 716, 180, 172, 1107, 1110, 179, 2218, 178, 1132,
	177, 176, 165, 62, 175, 2650, 172, 2567, 2297, 488,
	166, 2175, 63, 64, 2166, 165, 1345, 139, 66, 2123,
	67, 2014, 2009, 166, 1279, 1280, 1281, 1282, 1284, 1285,
	1659, 138, 1430, 171, 1275, 1276, 1840, 1439, 171, 1838,
	139, 66, 1179, 67, 138, 1275, 1276, 1351, 1195, 567,
	1836, 1189, 110, 2218, 1271, 1193, 171, 1064, 1053, 1278,
	2228, 171, 2212, 2213, 1834, 1342, 3046, 1256, 1832, 173,
	1278, 3028, 567, 1257, 173, 110, 2222, 2214, 2215, 2216,
	2217, 2219, 2220, 3011, 1277, 2218, 3000, 2872, 2929, 2905,
	2822, 2718, 173, 2717, 2925, 1277, 2809, 173, 2223, 2221,
	2222, 2214, 2215, 2216, 2217, 2219, 2220, 2923, 2716, 172,
	1176, 2367, 64, 2709, 172, 2705, 2704, 2703, 165, 65,
	2699, 2698, 2697, 165, 2696, 2689, 166, 2228, 2669, 2667,
	2566, 166, 172, 1203, 2543, 2542, 2541, 172, 75, 139,
	66, 165, 67, 2229, 68, 2479, 165, 138, 145, 166,
	1255, 2363, 138, 69, 166, 2296, 2287, 1196, 2253, 2228,
	171, 1283, 2240, 2211, 2208, 2205, 2204, 2202, 1654, 1980,
	2049, 83, 1283, 2183, 110, 138, 1794, 2130, 1496, 2182,
	2165, 1937, 1271, 142, 1558, 1495, 1355, 1270, 901, 2218,
	1275, 1276, 1348, 3118, 1338, 3101, 173, 3100, 716, 1063,
	2495, 3019, 488, 3014, 2970, 2961, 2960, 488, 2956, 703,
	2229, 2955, 2949, 2946, 2921, 1278, 2920, 1788, 2868, 115,
	702, 2846, 1410, 2796, 2791, 1267, 1268, 2789, 140, 2776,
	1272, 2760, 2714, 2659, 488, 2635, 172, 2626, 2625, 2623,
	1277, 1401, 2229, 2600, 2599, 165, 2589, 2588, 2554, 2460,
	2427, 2425, 2348, 166, 2221, 2222, 2214, 2215, 2216, 2217,
	2219, 2220, 2332, 2311, 2310, 1348, 2256, 2214, 2215, 2216,
	2217, 2219, 2220, 2239, 138, 2808, 2940, 4, 2192, 2191,
	2188, 2161, 2156, 1275, 1276, 1376, 1371, 1381, 2091, 1374,
	1927, 1918, 1905, 1830, 1504, 1377, 1363, 1362, 1361, 1360,
	1795, 1359, 1426, 1384, 1424, 1402, 908, 1393, 1278, 1392,
	1407, 1408, 1387, 1386, 1385, 1383, 1382, 1283, 1379, 1378,
	2223, 2221, 2222, 2214, 2215, 2216, 2217, 2219, 2220, 1369,
	888, 1368, 1420, 1277, 1367, 1366, 1365, 130, 1364, 1352,
	1339, 1338, 1305, 1306, 1307, 1644, 1643, 1421, 1653, 1650,
	1175, 1160, 1128, 2821, 2691, 2214, 2215, 2216, 2217, 2219,
	2220, 2423, 2311, 2086, 2666, 2561, 716, 946, 488, 2557,
	1398, 2168, 1919, 1336, 959, 2212, 2213, 1436, 1653, 2386,
	1396, 1653, 2101, 1429, 488, 959, 488, 488, 1448, 1433,
	1460, 1298, 2814, 1400, 209, 2661, 2660, 2564, 1454, 1192,
	2006, 1390, 1653, 1430, 1388, 1170, 1253, 1391, 488, 488,
	1389, 2898, 1822, 2352, 1484, 488, 2347, 488, 2343, 488,
	914, 1505, 2331, 488, 914, 2248, 2277, 2100, 1357, 1493,
	1640, 1279, 1280, 1281, 1282, 1284, 1285, 1517, 2247, 1647,
	1499, 1982, 2246, 2245, 1281, 1282, 1284, 1285, 2140, 1627,
	1551, 1839, 1188, 2850, 1837, 2074, 2598, 883, 2173, 1479,
	1514, 2216, 2217, 2219, 2220, 1835, 2433, 2342, 1473, 2046,
	1823, 2497, 488, 946, 1299, 209, 488, 488, 3047, 1833,
	1366, 1525, 946, 1831, 209, 488, 2926, 1366, 488, 488,
	884, 1808, 1539, 1372, 488, 1541, 3057, 1629, 1543, 2924,
	1246, 2871, 1546, 1617, 1523, 3054, 2398, 2575, 3003, 2633,
	1443, 2077, 200, 1444, 2768, 2974, 959, 1501, 1050, 3081,
	761, 1587, 1559, 1049, 1200, 3080, 488, 530, 1489, 3048,
	501, 488, 1824, 1821, 2103, 1244, 209, 488, 1953, 488,
	2443, 488, 471, 488, 474, 488, 1532, 1490, 1648, 1681,
	877, 511, 879, 3117, 1556, 488, 1102, 488, 1231, 875,
	1232, 1944, 201, 1619, 1508, 488, 488, 488, 471, 873,
	474, 1660, 2603, 1567, 2897, 870, 2896, 1455, 1245, 1503,
	2894, 1621, 2893, 1641, 729, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 2785, 488, 1445, 714, 1354, 959, 1527,
	1530, 1649, 900, 2613, 1452, 2608, 2607, 1631, 1447, 2572,
	529, 1190, 2571, 500, 2187, 1699, 2186, 2185, 1826, 2184,
	2143, 512, 1956, 2075, 2032, 1999, 1456, 1457, 1993, 1989,
	1970, 1770, 1397, 1046, 1554, 202, 1885, 1884, 1688, 1695,
	1883, 1882, 1652, 1728, 2043, 1555, 2928, 1718, 1725, 471,
	1176, 474, 1557, 1727, 1618, 1449, 1191, 2973, 471, 2424,
	474, 1198, 713, 1425, 1066, 1342, 1166, 906, 1944, 689,
	2618, 1628, 959, 1693, 1812, 2446, 2003, 1694, 1661, 1943,
	2012, 1645, 1963, 1657, 1077, 1285, 1785, 2875, 1567, 1567,
	1436, 1846, 597, 581, 1826, 196, 1785, 3022, 1962, 2106,
	1851, 1851, 1243, 1663, 1862, 1864, 1672, 1869, 2153, 1820,
	471, 2108, 474, 596, 1690, 1893, 1531, 3072, 488, 1230,
	488, 1792, 204, 2393, 1897, 715, 1790, 1809, 2591, 2151,
	597, 1274, 2132, 2133, 1808, 1174, 203, 1206, 2489, 1666,
	1450, 2109, 1697, 1955, 959, 1698, 2087, 523, 1654, 1651,
	488, 2339, 488, 2107, 703, 2334, 1167, 703, 703, 488,
	959, 1986, 528, 2985, 488, 1708, 1803, 1472, 1709, 1710,
	1805, 1716, 488, 199, 1169, 2394, 3043, 2220, 1654, 1980,
	488, 1654, 1980, 1475, 1227, 201, 3080, 2486, 1458, 2952,
	2986, 2444, 488, 716, 1450, 946, 1871, 1252, 716, 1936,
	1370, 1450, 1654, 1980, 1847, 1881, 488, 959, 197, 908,
	505, 3071, 488, 488, 1796, 1939, 2323, 1793, 514, 513,
	2351, 2148, 1945, 2393, 1826, 488, 2900, 2609, 488, 908,
	2752, 1228, 2149, 498, 1973, 527, 2154, 528, 2442, 3096,
	3103, 200, 1925, 888, 2034, 1536, 1692, 1954, 712, 2487,
	2322, 198, 488, 2601, 488, 2749, 488, 2830, 202, 488,
	535, 488, 1859, 488, 1446, 488, 488, 1949, 488, 946,
	946, 946, 1972, 1990, 946, 1567, 1957, 1959, 1895, 2000,
	488, 1903, 1904, 565, 3044, 1240, 1894, 1911, 2841, 716,
	1333, 2068, 2069, 1967, 40, 1199, 2750, 1920, 1915, 1916,
	504, 1928, 1929, 1680, 881, 871, 2031, 880, 44, 937,
	527, 2001, 1433, 1965, 871, 1981, 1983, 1984, 1985, 1996,
	1948, 1971, 1972, 1586, 872, 1910, 1632, 914, 1949, 1781,
	871, 2435, 3070, 1988, 2592, 1826, 564, 1767, 2064, 1987,
	1065, 488, 2190, 2876, 1476, 204, 1914, 914, 1935, 715,
	1779, 3045, 2671, 2662, 1165, 2057, 1991, 2092, 530, 203,
	1941, 2066, 1050, 1241, 2150, 566, 2678, 2007, 2048, 1214,
	2048, 2152, 1263, 525, 59, 568, 3042, 2059, 3079, 60,
	959, 2079, 488, 1949, 478, 130, 471, 2145, 474, 495,
	488, 1412, 488, 130, 2826, 2071, 199, 1784, 3077, 1207,
	2052, 2800, 1168, 1185, 2438, 690, 501, 2061, 526, 2062,
	3094, 2063, 63, 488, 488, 488, 1132, 488, 2065, 1791,
	2072, 499, 2096, 2745, 2097, 2078, 2746, 1242, 1480, 580,
	2067, 197, 2088, 530, 2325, 2114, 488, 1443, 1586, 1586,
	1444, 529, 1775, 1273, 497, 2090, 1208, 1173, 525, 1205,
	1776, 524, 1665, 1777, 2327, 1416, 496, 1782, 1765, 1768,
	2748, 2798, 2831, 2040, 200, 1377, 2038, 1384, 2117, 2751,
	2118, 3095, 3104, 1374, 198, 1507, 2093, 1537, 2095, 505,
	1409, 1186, 1419, 526, 506, 1187, 2825, 2125, 1163, 500,
	2104, 2437, 1154, 1416, 2326, 1262, 491, 2356, 1488, 502,
	1414, 3097, 498, 1764, 2886, 2434, 2360, 2530, 2885, 1185,
	2159, 130, 64, 1417, 2712, 130, 529, 2162, 2866, 2146,
	1419, 2120, 1445, 2943, 1639, 2122, 524, 2767, 2764, 3109,
	2574, 1197, 1415, 677, 2766, 1447, 2180, 2181, 1912, 139,
	66, 2307, 67, 2303, 2041, 677, 2285, 2039, 1526, 2273,
	1516, 1417, 1515, 724, 1511, 1506, 1704, 2129, 2127, 2485,
	171, 2994, 1262, 1450, 2747, 724, 1685, 1635, 479, 504,
	906, 567, 2638, 1261, 110, 2802, 2827, 2436, 1974, 2867,
	1662, 2313, 1449, 1637, 1180, 1778, 2312, 1186, 2138, 1482,
	906, 1187, 1780, 2274, 589, 1909, 173, 1638, 2238, 1418,
	1908, 2016, 1263, 2015, 1215, 1099, 713, 1481, 583, 1893,
	1893, 1893, 2620, 3, 2255, 2365, 1766, 1088, 563, 36,
	2144, 678, 959, 1097, 1087, 1586, 2258, 2267, 2531, 2286,
	570, 2265, 2266, 678, 1478, 2532, 172, 1418, 488, 3084,
	1261, 488, 2713, 716, 1705, 165, 2788, 480, 520, 488,
	488, 959, 2864, 166, 488, 2763, 1456, 1457, 2172, 3108,
	2355, 2765, 488, 488, 488, 2720, 2547, 1450, 488, 1829,
	515, 488, 2797, 3086, 536, 501, 2845, 2264, 488, 488,
	488, 488, 488, 2865, 2711, 2272, 2617, 2294, 2281, 1250,
	499, 488, 481, 2329, 2243, 908, 2290, 2291, 488, 2459,
	2412, 1975, 1976, 908, 908, 2203, 2292, 908, 562, 35,
	488, 946, 2155, 497, 488, 2094, 1998, 1969, 869, 1497,
	959, 2308, 1251, 1161, 488, 496, 2304, 2276, 1237, 2361,
	959, 716, 2244, 1443, 2121, 959, 1444, 2250, 2251, 2252,
	2116, 1235, 1828, 2098, 2259, 2288, 2279, 488, 679, 488,
	2282, 488, 1679, 506, 488, 946, 946, 946, 500, 488,
	679, 488, 1567, 2333, 1682, 488, 2300, 1185, 502, 1669,
	488, 1949, 488, 1225, 561, 32, 1620, 2293, 588, 488,
	1358, 2314, 1223, 2317, 1098, 2358, 1221, 2298, 925, 2309,
	2358, 1446, 582, 36, 2280, 488, 488, 2315, 946, 2319,
	2320, 1448, 1096, 1412, 2400, 3038, 2330, 2344, 2615, 569,
	2389, 2262, 2295, 914, 2328, 488, 2388, 1487, 1445, 2269,
	2270, 914, 914, 2275, 2349, 914, 1448, 1077, 2335, 1249,
	2336, 1447, 2369, 2429, 2337, 2346, 2991, 2350, 1219, 755,
	2345, 680, 2366, 2338, 488, 1186, 2407, 2408, 2409, 1187,
	2410, 2411, 2362, 680, 2738, 1484, 2422, 2340, 2387, 488,
	1217, 1484, 874, 876, 2474, 560, 79, 1416, 1236, 2370,
	1211, 1077, 2341, 2397, 2418, 559, 78, 2378, 1449, 681,
	472, 1234, 2397, 35, 2596, 486, 2594, 959, 2406, 1678,
	1503, 681, 507, 2430, 1419, 2399, 959, 1567, 2384, 533,
	2573, 2374, 576, 516, 716, 533, 472, 1095, 576, 594,
	2462, 488, 1414, 1224, 2382, 601, 2375, 2376, 2377, 2428,
	556, 23, 1222, 621, 2380, 1417, 1220, 2044, 2481, 2482,
	2483, 2036, 2441, 557, 24, 2439, 2440, 2035, 555, 30,
	554, 21, 2471, 722, 1415, 677, 2033, 2030, 2445, 32,
	517, 2477, 552, 20, 130, 2450, 1550, 2498, 1549, 2420,
	2452, 553, 19, 1450, 2448, 724, 1718, 2501, 1547, 1567,
	542, 15, 543, 16, 551, 57, 2544, 1545, 1218, 2466,
	1542, 1540, 1073, 1538, 1718, 2510, 518, 2468, 519, 1441,
	550, 56, 2473, 541, 55, 1485, 549, 12, 1474, 723,
	1216, 488, 2488, 2490, 2491, 533, 533, 1567, 1567, 2494,
	1210, 1418, 1471, 921, 2500, 1459, 488, 1451, 959, 2914,
	3081, 2540, 2820, 2819, 2536, 1567, 1567, 1265, 1658, 2505,
	1153, 2916, 2509, 678, 540, 50, 1961, 486, 486, 486,
	79, 951, 486, 547, 47, 2136, 2568, 1094, 2560, 897,
	78, 2507, 472, 1052, 2606, 2647, 906, 2535, 548, 48,
	2783, 2548, 1567, 2002, 906, 906, 539, 49, 906, 908,
	2612, 898, 2586, 2570, 2550, 2551, 1997, 2545, 2553, 1944,
	1462, 1564, 546, 7, 2537, 488, 488, 1446, 488, 130,
	1960, 545, 6, 488, 2616, 23, 1992, 1466, 1968, 544,
	38, 959, 2595, 959, 2597, 2569, 946, 1266, 24, 2604,
	2099, 1944, 1586, 30, 2137, 21, 2577, 571, 2954, 1625,
	1626, 2610, 1958, 488, 2627, 2611, 2757, 20, 1209, 2651,
	2614, 2640, 538, 37, 1275, 1276, 19, 2931, 1463, 2721,
	1977, 1964, 2585, 2643, 2644, 15, 1269, 16, 1995, 57,
	1972, 899, 488, 1966, 2639, 959, 488, 488, 959, 488,
	679, 2602, 2565, 2990, 2794, 56, 2051, 488, 55, 2622,
	2621, 12, 2631, 2037, 2629, 959, 2029, 2630, 1896, 2641,
	1630, 1275, 1276, 2624, 1277, 2556, 590, 914, 1949, 2653,
	1560, 3092, 2419, 3107, 2675, 1345, 1564, 1564, 908, 1202,
	2663, 2664, 2652, 1467, 1201, 2634, 1278, 2636, 2645, 50,
	957, 2672, 2665, 1045, 2685, 2492, 488, 2680, 47, 2212,
	2213, 1275, 1276, 2426, 914, 2111, 2057, 2111, 2110, 2112,
	2670, 1277, 2676, 48, 1861, 1818, 1239, 2694, 2484, 1238,
	1355, 49, 1353, 2373, 914, 2812, 2655, 1586, 1707, 2673,
	1248, 721, 2657, 680, 1247, 2668, 914, 7, 1233, 1229,
	914, 1468, 1469, 1226, 1212, 914, 6, 1172, 1633, 882,
	1464, 688, 2874, 1567, 38, 488, 675, 2321, 1668, 2681,
	1213, 1670, 2278, 1917, 2984, 959, 488, 2700, 959, 2189,
	2710, 681, 488, 488, 488, 2936, 2840, 1465, 1827, 1356,
	53, 2582, 748, 2739, 2576, 2023, 2022, 37, 962, 1642,
	488, 772, 1850, 1719, 2262, 488, 914, 488, 774, 1586,
	488, 488, 488, 488, 488, 1565, 777, 776, 488, 488,
	946, 775, 1566, 2731, 959, 1380, 486, 1072, 946, 486,
	2758, 773, 486, 2733, 908, 951, 488, 488, 1092, 2586,
	1563, 2728, 2737, 2725, 486, 2726, 1129, 1586, 1586, 2784,
	946, 2723, 2724, 2055, 486, 486, 486, 486, 951, 2795,
	488, 1872, 665, 1470, 1646, 1586, 1586, 1789, 1806, 488,
	488, 946, 946, 1564, 2586, 2804, 2171, 2727, 2762, 2729,
	2761, 1349, 740, 752, 2806, 2735, 2586, 1949, 2771, 2772,
	2778, 2793, 751, 1804, 1159, 2829, 739, 621, 2803, 2283,
	2392, 2736, 1586, 2807, 959, 2811, 2389, 1703, 2769, 2585,
	486, 2815, 2813, 2805, 2792, 2790, 2774, 2128, 1700, 2593,
	906, 503, 2816, 2209, 1127, 2770, 1878, 2799, 2782, 1870,
	1171, 2732, 2775, 2852, 2839, 2832, 1077, 1866, 1254, 1334,
	1949, 621, 2056, 488, 2585, 959, 1194, 2401, 2085, 488,
	2722, 488, 914, 959, 488, 1711, 2585, 2587, 2847, 2837,
	896, 895, 488, 2397, 894, 3008, 2779, 3005, 959, 2828,
	1636, 2105, 2882, 1327, 744, 2263, 2368, 2605, 2810, 2861,
	1070, 2780, 2853, 2854, 1326, 878, 2945, 1184, 2895, 2605,
	2858, 914, 1183, 2605, 2879, 1182, 2306, 3102, 2605, 2953,
	2837, 2590, 3002, 170, 167, 2877, 2586, 2859, 1727, 488,
	2878, 488, 2880, 169, 946, 168, 2354, 1567, 486, 488,
	82, 34, 33, 1727, 109, 108, 914, 107, 106, 105,
	2888, 104, 2817, 2818, 103, 102, 101, 100, 914, 2912,
	2586, 959, 2586, 99, 2889, 2890, 98, 2586, 2857, 906,
	97, 96, 1949, 2899, 2913, 2918, 95, 2752, 2643, 2917,
	94, 488, 2911, 93, 92, 91, 90, 488, 89, 2860,
	88, 1567, 87, 86, 85, 488, 2585, 2927, 84, 617,
	614, 2901, 2749, 2903, 81, 2742, 80, 2948, 2907, 31,
	2934, 2856, 2942, 26, 113, 2389, 1045, 2915, 2740, 114,
	2941, 2930, 25, 2744, 488, 488, 77, 76, 29, 18,
	2585, 488, 2585, 1586, 2939, 11, 17, 2585, 2965, 2967,
	22, 2951, 946, 2750, 2906, 135, 134, 488, 133, 2950,
	132, 946, 946, 131, 2959, 488, 14, 488, 13, 488,
	128, 129, 127, 2987, 126, 125, 2969, 2971, 2972, 1567,
	124, 2743, 2978, 2979, 123, 10, 2980, 488, 914, 2977,
	488, 2997, 8, 488, 112, 959, 2962, 9, 2823, 2432,
	70, 71, 3012, 3013, 27, 43, 42, 3010, 41, 3015,
	3017, 111, 3016, 161, 3018, 160, 159, 158, 914, 1275,
	1276, 3004, 914, 3023, 914, 906, 154, 157, 155, 914,
	488, 156, 153, 3021, 2999, 122, 163, 2957, 162, 151,
	148, 601, 150, 2981, 1278, 2982, 533, 3037, 3036, 3035,
	1727, 2586, 152, 2958, 149, 488, 147, 164, 3061, 121,
	3062, 120, 3063, 488, 2587, 1275, 1276, 1428, 2998, 1277,
	119, 921, 118, 486, 3050, 2976, 3069, 117, 3066, 488,
	2745, 116, 5, 2746, 3067, 3068, 2, 1, 1872, 1872,
	1278, 0, 3020, 0, 3078, 3076, 3075, 0, 0, 2587,
	2586, 0, 0, 3083, 3082, 3088, 3089, 3010, 3085, 0,
	0, 2587, 0, 0, 3091, 1277, 0, 2748, 0, 0,
	0, 2585, 0, 1297, 0, 0, 2751, 0, 0, 3099,
	3098, 914, 0, 3060, 0, 0, 3105, 3106, 0, 0,
	0, 3064, 3110, 3111, 0, 0, 1283, 0, 0, 3112,
	0, 0, 0, 0, 0, 3115, 3116, 0, 0, 0,
	3119, 0, 0, 3121, 0, 0, 2057, 0, 0, 0,
	2585, 1305, 1306, 1307, 0, 0, 0, 0, 1872, 1872,
	1872, 0, 0, 1300, 1301, 1302, 1303, 0, 0, 0,
	1564, 0, 1283, 0, 0, 0, 0, 1586, 0, 0,
	0, 0, 0, 914, 0, 0, 0, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1305, 1306, 1307,
	1298, 2747, 0, 1052, 0, 486, 1502, 0, 0, 0,
	0, 2587, 0, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1522, 1522, 0,
	0, 1586, 914, 0, 486, 0, 486, 0, 486, 0,
	0, 2605, 533, 0, 0, 2587, 1298, 2587, 0, 0,
	0, 0, 2587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2212, 2213, 0, 2230, 2231, 2232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2157, 2158, 2683, 1299, 0, 0, 0, 0, 0, 0,
	0, 621, 489, 0, 472, 1052, 576, 0, 0, 0,
	0, 0, 0, 472, 1052, 1564, 0, 951, 486, 1586,
	1411, 0, 1304, 621, 0, 0, 0, 0, 0, 0,
	0, 0, 2227, 0, 0, 0, 0, 0, 0, 1299,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 621, 0, 0, 0, 0,
	486, 0, 0, 0, 2605, 472, 486, 0, 486, 208,
	486, 0, 486, 0, 486, 0, 0, 0, 0, 0,
	2235, 2236, 2237, 0, 1683, 0, 1684, 1564, 0, 0,
	0, 0, 0, 0, 486, 486, 486, 0, 0, 0,
	0, 2218, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 621, 0, 1564, 1564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2587, 0, 0, 1872,
	1872, 0, 0, 1564, 1564, 0, 0, 2233, 0, 1288,
	1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 0,
	0, 727, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2228, 0, 0, 0, 0,
	1564, 0, 0, 2212, 2213, 2587, 2230, 2231, 2232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2682, 0, 947, 0, 0, 960, 960, 0, 1872,
	1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
	1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 0, 1872,
	0, 0, 0, 0, 0, 0, 0, 565, 0, 0,
	0, 2227, 0, 0, 0, 0, 0, 601, 40, 533,
	0, 0, 0, 0, 0, 0, 0, 0, 2229, 0,
	0, 0, 44, 0, 921, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 533,
	0, 533, 0, 0, 921, 0, 0, 0, 486, 0,
	564, 0, 0, 1952, 0, 0, 0, 0, 0, 0,
	0, 486, 0, 0, 0, 0, 0, 0, 0, 486,
	2218, 0, 0, 0, 0, 0, 0, 0, 0, 566,
	0, 486, 0, 0, 0, 0, 0, 0, 59, 568,
	0, 0, 0, 60, 0, 486, 0, 0, 0, 0,
	0, 472, 2008, 0, 0, 0, 0, 0, 0, 0,
	0, 2457, 2458, 0, 2019, 0, 2233, 1052, 0, 0,
	0, 2224, 2225, 2226, 0, 0, 63, 0, 2223, 2221,
	2222, 2214, 2215, 2216, 2217, 2219, 2220, 0, 0, 0,
	0, 1952, 0, 533, 2228, 486, 0, 0, 486, 0,
	486, 1564, 486, 0, 486, 486, 0, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1952,
	0, 0, 0, 0, 0, 0, 0, 0, 851, 0,
	0, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519,
	2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529,
	0, 2533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 0, 64, 2229, 0, 0,
	576, 0, 0, 2212, 2213, 0, 2230, 2231, 2232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2464, 0, 139, 66, 0, 67, 0, 0, 0,
	1054, 1056, 1059, 947, 947, 0, 0, 0, 0, 0,
	482, 486, 0, 0, 171, 0, 0, 0, 0, 1052,
	0, 1052, 0, 0, 0, 567, 0, 0, 110, 0,
	0, 2227, 947, 947, 0, 0, 0, 0, 0, 947,
	0, 0, 486, 486, 486, 0, 486, 0, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 486, 0, 0, 0, 0,
	2224, 2225, 2226, 0, 0, 0, 0, 2223, 2221, 2222,
	2214, 2215, 2216, 2217, 2219, 2220, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	2218, 0, 0, 1158, 0, 0, 0, 166, 0, 1162,
	0, 2212, 2213, 0, 2230, 2231, 2232, 0, 0, 948,
	0, 0, 961, 961, 0, 0, 0, 0, 138, 2463,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	0, 727, 0, 0, 0, 1564, 2233, 0, 0, 0,
	749, 74, 0, 0, 947, 0, 0, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 955, 0, 2227,
	0, 0, 0, 0, 2228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2212, 2213, 0, 2230,
	2231, 2232, 0, 0, 0, 0, 0, 0, 0, 1564,
	0, 0, 0, 0, 0, 0, 1872, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2218, 0,
	0, 0, 0, 0, 2227, 1872, 0, 0, 0, 0,
	921, 1328, 1329, 1330, 1331, 1332, 0, 2229, 921, 921,
	0, 0, 921, 0, 1341, 0, 0, 533, 0, 0,
	533, 0, 0, 0, 1350, 0, 0, 1564, 533, 533,
	0, 704, 0, 533, 2233, 0, 0, 0, 0, 717,
	0, 486, 1952, 2302, 0, 0, 0, 1952, 0, 0,
	2302, 0, 0, 0, 0, 0, 0, 1952, 2302, 1952,
	2302, 2302, 2228, 2218, 0, 0, 0, 0, 0, 0,
	486, 0, 0, 0, 909, 74, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 2234, 0, 0, 486,
	1872, 0, 0, 951, 0, 2212, 2213, 0, 2230, 2231,
	2232, 0, 0, 486, 0, 0, 0, 0, 0, 2233,
	2224, 2225, 2226, 0, 0, 0, 0, 2223, 2221, 2222,
	2214, 2215, 2216, 2217, 2219, 2220, 1522, 0, 1522, 0,
	486, 0, 0, 486, 0, 0, 0, 2228, 486, 0,
	486, 0, 0, 0, 951, 2229, 0, 0, 0, 1952,
	0, 533, 0, 2227, 0, 0, 0, 0, 1952, 0,
	0, 0, 0, 0, 0, 1405, 1405, 1405, 2844, 948,
	948, 0, 0, 0, 2416, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 0, 0, 0, 948, 948,
	0, 0, 0, 0, 0, 948, 0, 2869, 0, 0,
	0, 1068, 0, 0, 0, 0, 0, 1086, 0, 0,
	2229, 0, 2218, 2449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 486, 1106,
	1106, 1106, 955, 0, 0, 0, 0, 0, 2224, 2225,
	2226, 0, 0, 0, 0, 2223, 2221, 2222, 2214, 2215,
	2216, 2217, 2219, 2220, 0, 0, 0, 0, 2233, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2496, 0, 0, 0, 0, 1157, 2228, 0, 0, 947,
	0, 0, 2933, 0, 0, 0, 960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	948, 0, 0, 2224, 2225, 2226, 208, 0, 0, 0,
	2223, 2221, 2222, 2214, 2215, 2216, 2217, 2219, 2220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 2229,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 533, 2212, 2213, 0, 2230,
	2231, 2232, 0, 0, 0, 947, 0, 208, 0, 0,
	0, 2584, 0, 0, 947, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1428, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 0, 1428, 0, 0, 0, 1428, 960, 0,
	0, 0, 1428, 0, 2227, 0, 0, 0, 0, 0,
	0, 727, 727, 0, 1952, 1522, 0, 1522, 208, 0,
	0, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2224, 2225, 2226, 0, 0, 0, 0, 2223,
	2221, 2222, 2214, 2215, 2216, 2217, 2219, 2220, 0, 0,
	0, 0, 1952, 921, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2218, 0, 0, 0, 0, 0, 0,
	960, 1052, 1701, 0, 1706, 951, 486, 0, 486, 0,
	1713, 0, 0, 0, 0, 0, 486, 0, 0, 0,
	1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738,
	1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748,
	1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758,
	1759, 1760, 1761, 1762, 1763, 0, 1769, 0, 1771, 1772,
	1773, 1774, 0, 0, 0, 2701, 0, 2228, 0, 0,
	0, 0, 0, 0, 960, 0, 0, 1797, 0, 0,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	704, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 1841, 1842, 1843, 1844, 1845,
	0, 0, 1337, 0, 1340, 0, 0, 0, 0, 921,
	0, 1346, 0, 0, 1052, 0, 1868, 0, 1880, 0,
	0, 0, 0, 1886, 1891, 533, 0, 0, 0, 0,
	0, 1952, 2302, 1952, 0, 0, 960, 0, 0, 0,
	2229, 0, 0, 0, 0, 0, 0, 0, 2584, 1052,
	0, 0, 960, 0, 1952, 0, 2302, 0, 0, 1052,
	1052, 486, 1952, 2302, 0, 0, 0, 486, 486, 0,
	0, 0, 0, 0, 0, 948, 0, 0, 0, 0,
	0, 0, 961, 2584, 0, 1052, 2019, 947, 0, 0,
	0, 0, 0, 961, 0, 2584, 0, 0, 0, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1952,
	0, 0, 0, 0, 0, 0, 0, 0, 2416, 2416,
	0, 0, 0, 0, 0, 0, 2010, 2011, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1500, 0, 0, 2224, 2225, 2226, 0, 0, 0, 0,
	2223, 2221, 2222, 2214, 2215, 2216, 2217, 2219, 2220, 0,
	0, 947, 947, 947, 0, 74, 947, 0, 1427, 0,
	0, 1529, 1432, 1529, 0, 0, 0, 0, 0, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	948, 0, 533, 0, 0, 0, 0, 0, 1952, 0,
	2302, 0, 0, 2863, 0, 0, 0, 0, 0, 0,
	0, 486, 0, 0, 0, 2584, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1623, 0, 1428, 0, 0, 0, 2584,
	0, 2584, 0, 0, 0, 0, 2584, 0, 486, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 1052, 0,
	0, 0, 960, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1667, 0, 0, 0, 0,
	0, 1673, 0, 1674, 0, 1675, 0, 1676, 0, 1677,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	2496, 0, 0, 0, 0, 0, 533, 0, 0, 1686,
	1086, 0, 0, 0, 2863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1952, 2302, 0, 0, 0, 1428, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2302, 0, 0, 0,
	961, 0, 0, 0, 1052, 0, 1052, 0, 486, 0,
	0, 0, 0, 0, 0, 2141, 2142, 0, 0, 0,
	0, 2147, 0, 0, 0, 0, 2995, 0, 0, 1052,
	0, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	2160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2584, 0, 0, 2167, 0, 0, 0, 0, 0, 2174,
	0, 0, 0, 0, 2179, 0, 0, 0, 0, 2496,
	0, 0, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 2193, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 1052, 0, 0, 0, 0, 2584,
	0, 0, 1952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2863, 0,
	0, 0, 0, 948, 0, 0, 0, 1341, 0, 0,
	0, 0, 0, 1938, 960, 961, 0, 0, 1891, 1891,
	1891, 0, 0, 0, 0, 704, 0, 0, 704, 704,
	1405, 0, 0, 0, 0, 0, 0, 0, 2268, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	955, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 948, 948, 948,
	0, 0, 948, 0, 0, 0, 1787, 0, 0, 0,
	0, 0, 0, 0, 2324, 0, 0, 0, 0, 717,
	0, 0, 0, 947, 1340, 0, 0, 0, 0, 0,
	2060, 0, 960, 1106, 0, 1106, 0, 1106, 0, 955,
	955, 0, 960, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 947, 947, 947,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 909, 0, 2390, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	947, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 727, 727, 0, 0, 0, 2115, 0, 0, 0,
	74, 0, 0, 0, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2451, 0, 0, 0, 1713, 0, 2124, 955, 2126,
	0, 2455, 0, 0, 2456, 0, 0, 0, 0, 960,
	0, 0, 0, 0, 0, 0, 2461, 0, 960, 74,
	2139, 74, 0, 0, 0, 2469, 0, 0, 0, 0,
	0, 0, 0, 0, 2475, 0, 0, 0, 2268, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 2502, 2503, 2504,
	0, 0, 0, 0, 2506, 0, 0, 0, 0, 0,
	0, 2508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2538, 2539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1275, 1276, 0,
	0, 0, 0, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 2555, 0, 0, 0, 0, 0,
	960, 0, 1278, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 1277, 0, 74,
	0, 2578, 0, 74, 0, 1297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 960, 0, 960, 0, 0, 947, 0,
	0, 0, 0, 0, 0, 1300, 1301, 1302, 1303, 0,
	0, 0, 0, 0, 1283, 0, 2299, 0, 0, 948,
	0, 0, 0, 0, 1405, 0, 0, 0, 961, 1787,
	0, 0, 0, 0, 0, 2654, 1315, 1325, 961, 1305,
	1306, 1307, 0, 961, 0, 1086, 0, 960, 0, 1340,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 948, 948, 948, 0, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2353, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 1298, 0,
	2684, 0, 0, 0, 2687, 2688, 0, 0, 2690, 0,
	0, 0, 0, 0, 0, 2371, 948, 2692, 0, 0,
	0, 2695, 0, 2379, 0, 2381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2702, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 909, 0, 0, 0, 2715, 0, 0, 0, 909,
	909, 1299, 0, 909, 0, 0, 0, 960, 0, 0,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 961, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 2453, 2759, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 0, 0, 960, 74, 0, 0,
	947, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1314, 0, 947, 947, 0, 0, 0, 0, 1317,
	0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285,
	74, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 0,
	717, 0, 0, 2833, 2834, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 2843, 0, 0,
	1278, 0, 0, 1324, 0, 0, 0, 960, 0, 0,
	0, 2851, 0, 0, 0, 960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1277, 0, 0, 0, 0,
	960, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2887, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	0, 961, 0, 0, 948, 0, 947, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 1301, 1302, 1303, 0, 0, 0,
	0, 0, 1283, 960, 0, 0, 0, 2628, 0, 0,
	0, 0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310,
	1318, 1319, 1320, 961, 1315, 1325, 961, 1305, 1306, 1307,
	0, 0, 1311, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 1324, 961, 0, 0, 0, 0, 1321, 1322,
	0, 0, 0, 0, 0, 0, 1292, 1293, 0, 2944,
	0, 0, 2947, 0, 1277, 0, 0, 0, 0, 1313,
	0, 2674, 1297, 955, 0, 0, 1298, 74, 0, 1294,
	0, 2677, 0, 0, 947, 0, 0, 0, 0, 0,
	0, 0, 1323, 947, 947, 909, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 1300, 1301, 1302, 1303, 0, 0, 0, 0,
	0, 1283, 1304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 961, 0, 0, 1299,
	0, 0, 0, 1315, 1325, 0, 1305, 1306, 1307, 0,
	0, 0, 0, 0, 0, 0, 3034, 3034, 0, 0,
	0, 0, 1316, 0, 0, 0, 0, 1321, 1322, 0,
	0, 0, 0, 0, 3051, 1292, 1293, 0, 948, 0,
	0, 0, 961, 0, 0, 0, 948, 0, 1313, 0,
	0, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 3034, 0, 909, 0, 0, 0, 948, 0,
	0, 1323, 0, 74, 0, 0, 2773, 0, 0, 0,
	0, 0, 1086, 0, 0, 1312, 0, 0, 0, 948,
	948, 0, 0, 0, 0, 0, 0, 0, 0, 1314,
	0, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288,
	1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 0,
	0, 1304, 961, 3034, 0, 0, 2706, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1316, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 961, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2870, 0, 0, 0,
	0, 0, 948, 0, 0, 0, 0, 0, 1314, 0,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 0, 961,
	0, 0, 0, 0, 0, 2198, 0, 0, 0, 0,
	0, 0, 0, 2908, 0, 2910, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	948, 0, 0, 0, 0, 0, 0, 0, 0, 948,
	948, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2963, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2983, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1787, 256, 257, 258, 259,
	963, 260, 964, 965, 966, 967, 214, 968, 969, 970,
	971, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 972, 267, 268, 269, 270, 271, 272, 973, 974,
	219, 220, 221, 975, 273, 222, 976, 922, 977, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 978,
	283, 0, 284, 285, 979, 853, 286, 287, 288, 980,
	981, 983, 982, 984, 985, 986, 289, 290, 490, 291,
	292, 293, 223, 224, 987, 294, 988, 295, 989, 296,
	990, 991, 297, 298, 992, 299, 300, 993, 0, 994,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 995, 854, 996, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 997, 316, 998, 999, 855,
	317, 1000, 318, 229, 1001, 230, 1002, 319, 320, 321,
	322, 323, 324, 231, 232, 857, 1003, 326, 0, 0,
	0, 1004, 325, 327, 334, 1005, 856, 328, 233, 330,
	329, 331, 332, 333, 234, 1006, 235, 1007, 335, 858,
	859, 336, 337, 338, 860, 339, 340, 0, 0, 341,
	342, 343, 1008, 345, 344, 1009, 236, 861, 346, 347,
	862, 1010, 348, 349, 1011, 1012, 350, 0, 351, 924,
	923, 352, 353, 355, 356, 354, 863, 357, 358, 360,
	359, 1013, 1014, 864, 1015, 237, 361, 238, 362, 363,
	1016, 364, 365, 1017, 1018, 366, 367, 1019, 1020, 368,
	239, 865, 369, 866, 240, 370, 371, 372, 373, 374,
	375, 376, 1021, 377, 241, 378, 242, 379, 1022, 380,
	381, 382, 383, 384, 243, 385, 386, 1023, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 1024, 399, 867, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 1025, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 1026, 424,
	405, 406, 425, 868, 426, 245, 427, 428, 1027, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 1028, 439, 440, 1029, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 1030, 247, 248, 249, 449,
	1031, 1032, 450, 451, 250, 251, 1033, 452, 453, 454,
	455, 1034, 1035, 456, 457, 458, 460, 1036, 461, 1037,
	459, 462, 463, 464, 252, 253, 1038, 1039, 465, 254,
	1040, 1041, 1042, 1043, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	1922, 0, 0, 0, 0, 0, 0, 0, 0, 1923,
	256, 257, 258, 259, 963, 260, 964, 965, 966, 967,
	214, 968, 969, 970, 971, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 972, 267, 268, 269, 270,
	271, 272, 973, 974, 219, 220, 221, 975, 273, 222,
	976, 922, 977, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 978, 283, 0, 284, 285, 979, 853,
	286, 287, 288, 980, 981, 983, 982, 984, 985, 986,
	289, 290, 490, 291, 292, 293, 223, 224, 987, 294,
	988, 295, 989, 296, 990, 991, 297, 298, 992, 299,
	300, 993, 0, 994, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 995, 854, 996, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 997,
	316, 998, 999, 855, 317, 1000, 318, 229, 1001, 230,
	1002, 319, 320, 321, 322, 323, 324, 231, 232, 857,
	1003, 326, 0, 0, 0, 1004, 325, 327, 334, 1005,
	856, 328, 233, 330, 329, 331, 332, 333, 234, 1006,
	235, 1007, 335, 858, 859, 336, 337, 338, 860, 339,
	340, 0, 0, 341, 342, 343, 1008, 345, 344, 1009,
	236, 861, 346, 347, 862, 1010, 348, 349, 1011, 1012,
	350, 0, 351, 924, 923, 352, 353, 355, 356, 354,
	863, 357, 358, 360, 359, 1013, 1014, 864, 1015, 237,
	361, 238, 362, 363, 1016, 364, 365, 1017, 1018, 366,
	367, 1019, 1020, 368, 239, 865, 369, 866, 240, 370,
	371, 372, 373, 374, 375, 376, 1021, 377, 241, 378,
	242, 379, 1022, 380, 381, 382, 383, 384, 243, 385,
	386, 1023, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 1024, 399, 867, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 1025, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 1026, 424, 405, 406, 425, 868, 426, 245,
	427, 428, 1027, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 1028, 439, 440, 1029, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 1030,
	247, 248, 249, 449, 1031, 1032, 450, 451, 250, 251,
	1033, 452, 453, 454, 455, 1034, 1035, 456, 457, 458,
	460, 1036, 461, 1037, 459, 462, 463, 464, 252, 253,
	1038, 1039, 465, 254, 1040, 1041, 1042, 1043, 466, 467,
	255, 468, 469, 470, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2730, 256, 257, 258, 259, 963,
	260, 964, 965, 966, 967, 214, 968, 969, 970, 971,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	972, 267, 268, 269, 270, 271, 272, 973, 974, 219,
	220, 221, 975, 273, 222, 976, 922, 977, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 978, 283,
	0, 284, 285, 979, 853, 286, 287, 288, 980, 981,
	983, 982, 984, 985, 986, 289, 290, 490, 291, 292,
	293, 223, 224, 987, 294, 988, 295, 989, 296, 990,
	991, 297, 298, 992, 299, 300, 993, 0, 994, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	995, 854, 996, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 997, 316, 998, 999, 855, 317,
	1000, 318, 229, 1001, 230, 1002, 319, 320, 321, 322,
	323, 324, 231, 232, 857, 1003, 326, 0, 0, 0,
	1004, 325, 327, 334, 1005, 856, 328, 233, 330, 329,
	331, 332, 333, 234, 1006, 235, 1007, 335, 858, 859,
	336, 337, 338, 860, 339, 340, 0, 0, 341, 342,
	343, 1008, 345, 344, 1009, 236, 861, 346, 347, 862,
	1010, 348, 349, 1011, 1012, 350, 0, 351, 924, 923,
	352, 353, 355, 356, 354, 863, 357, 358, 360, 359,
	1013, 1014, 864, 1015, 237, 361, 238, 362, 363, 1016,
	364, 365, 1017, 1018, 366, 367, 1019, 1020, 368, 239,
	865, 369, 866, 240, 370, 371, 372, 373, 374, 375,
	376, 1021, 377, 241, 378, 242, 379, 1022, 380, 381,
	382, 383, 384, 243, 385, 386, 1023, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	1024, 399, 867, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 1025, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 1026, 424, 405,
	406, 425, 868, 426, 245, 427, 428, 1027, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	1028, 439, 440, 1029, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 1030, 247, 248, 249, 449, 1031,
	1032, 450, 451, 250, 251, 1033, 452, 453, 454, 455,
	1034, 1035, 456, 457, 458, 460, 1036, 461, 1037, 459,
	462, 463, 464, 252, 253, 1038, 1039, 465, 254, 1040,
	1041, 1042, 1043, 466, 467, 255, 468, 469, 470, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2838, 256, 257, 258, 259, 963,
	260, 964, 965, 966, 967, 214, 968, 969, 970, 971,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	972, 267, 268, 269, 270, 271, 272, 973, 974, 219,
	220, 221, 975, 273, 222, 976, 922, 977, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 978, 283,
	0, 284, 285, 979, 853, 286, 287, 288, 980, 981,
	983, 982, 984, 985, 986, 289, 290, 490, 291, 292,
	293, 223, 224, 987, 294, 988, 295, 989, 296, 990,
	991, 297, 298, 992, 299, 300, 993, 0, 994, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	995, 854, 996, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 997, 316, 998, 999, 855, 317,
	1000, 318, 229, 1001, 230, 1002, 319, 320, 321, 322,
	323, 324, 231, 232, 857, 1003, 326, 0, 0, 0,
	1004, 325, 327, 334, 1005, 856, 328, 233, 330, 329,
	331, 332, 333, 234, 1006, 235, 1007, 335, 858, 859,
	336, 337, 338, 860, 339, 340, 0, 0, 341, 342,
	343, 1008, 345, 344, 1009, 236, 861, 346, 347, 862,
	1010, 348, 349, 1011, 1012, 350, 0, 351, 924, 923,
	352, 353, 355, 356, 354, 863, 357, 358, 360, 359,
	1013, 1014, 864, 1015, 237, 361, 238, 362, 363, 1016,
	364, 365, 1017, 1018, 366, 367, 1019, 1020, 368, 239,
	865, 369, 866, 240, 370, 371, 372, 373, 374, 375,
	376, 1021, 377, 241, 378, 242, 379, 1022, 380, 381,
	382, 383, 384, 243, 385, 386, 1023, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	1024, 399, 867, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 1025, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 1026, 424, 405,
	406, 425, 868, 426, 245, 427, 428, 1027, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	1028, 439, 440, 1029, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 1030, 247, 248, 249, 449, 1031,
	1032, 450, 451, 250, 251, 1033, 452, 453, 454, 455,
	1034, 1035, 456, 457, 458, 460, 1036, 461, 1037, 459,
	462, 463, 464, 252, 253, 1038, 1039, 465, 254, 1040,
	1041, 1042, 1043, 466, 467, 255, 468, 469, 470, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2478, 256, 257, 258, 259, 963,
	260, 964, 965, 966, 967, 214, 968, 969, 970, 971,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	972, 267, 268, 269, 270, 271, 272, 973, 974, 219,
	220, 221, 975, 273, 222, 976, 922, 977, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 978, 283,
	0, 284, 285, 979, 853, 286, 287, 288, 980, 981,
	983, 982, 984, 985, 986, 289, 290, 490, 291, 292,
	293, 223, 224, 987, 294, 988, 295, 989, 296, 990,
	991, 297, 298, 992, 299, 300, 993, 0, 994, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	995, 854, 996, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 997, 316, 998, 999, 855, 317,
	1000, 318, 229, 1001, 230, 1002, 319, 320, 321, 322,
	323, 324, 231, 232, 857, 1003, 326, 0, 0, 0,
	1004, 325, 327, 334, 1005, 856, 328, 233, 330, 329,
	331, 332, 333, 234, 1006, 235, 1007, 335, 858, 859,
	336, 337, 338, 860, 339, 340, 0, 0, 341, 342,
	343, 1008, 345, 344, 1009, 236, 861, 346, 347, 862,
	1010, 348, 349, 1011, 1012, 350, 0, 351, 924, 923,
	352, 353, 355, 356, 354, 863, 357, 358, 360, 359,
	1013, 1014, 864, 1015, 237, 361, 238, 362, 363, 1016,
	364, 365, 1017, 1018, 366, 367, 1019, 1020, 368, 239,
	865, 369, 866, 240, 370, 371, 372, 373, 374, 375,
	376, 1021, 377, 241, 378, 242, 379, 1022, 380, 381,
	382, 383, 384, 243, 385, 386, 1023, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	1024, 399, 867, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 1025, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 1026, 424, 405,
	406, 425, 868, 426, 245, 427, 428, 1027, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	1028, 439, 440, 1029, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 1030, 247, 248, 249, 449, 1031,
	1032, 450, 451, 250, 251, 1033, 452, 453, 454, 455,
	1034, 1035, 456, 457, 458, 460, 1036, 461, 1037, 459,
	462, 463, 464, 252, 253, 1038, 1039, 465, 254, 1040,
	1041, 1042, 1043, 466, 467, 255, 468, 469, 470, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2470, 256, 257, 258, 259, 963,
	260, 964, 965, 966, 967, 214, 968, 969, 970, 971,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	972, 267, 268, 269, 270, 271, 272, 973, 974, 219,
	220, 221, 975, 273, 222, 976, 922, 977, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 978, 283,
	0, 284, 285, 979, 853, 286, 287, 288, 980, 981,
	983, 982, 984, 985, 986, 289, 290, 490, 291, 292,
	293, 223, 224, 987, 294, 988, 295, 989, 296, 990,
	991, 297, 298, 992, 299, 300, 993, 0, 994, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	995, 854, 996, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 997, 316, 998, 999, 855, 317,
	1000, 318, 229, 1001, 230, 1002, 319, 320, 321, 322,
	323, 324, 231, 232, 857, 1003, 326, 0, 0, 0,
	1004, 325, 327, 334, 1005, 856, 328, 233, 330, 329,
	331, 332, 333, 234, 1006, 235, 1007, 335, 858, 859,
	336, 337, 338, 860, 339, 340, 0, 0, 341, 342,
	343, 1008, 345, 344, 1009, 236, 861, 346, 347, 862,
	1010, 348, 349, 1011, 1012, 350, 0, 351, 924, 923,
	352, 353, 355, 356, 354, 863, 357, 358, 360, 359,
	1013, 1014, 864, 1015, 237, 361, 238, 362, 363, 1016,
	364, 365, 1017, 1018, 366, 367, 1019, 1020, 368, 239,
	865, 369, 866, 240, 370, 371, 372, 373, 374, 375,
	376, 1021, 377, 241, 378, 242, 379, 1022, 380, 381,
	382, 383, 384, 243, 385, 386, 1023, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	1024, 399, 867, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 1025, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 1026, 424, 405,
	406, 425, 868, 426, 245, 427, 428, 1027, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	1028, 439, 440, 1029, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 1030, 247, 248, 249, 449, 1031,
	1032, 450, 451, 250, 251, 1033, 452, 453, 454, 455,
	1034, 1035, 456, 457, 458, 460, 1036, 461, 1037, 459,
	462, 463, 464, 252, 253, 1038, 1039, 465, 254, 1040,
	1041, 1042, 1043, 466, 467, 255, 468, 469, 470, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2357, 256, 257, 258, 259, 963,
	260, 964, 965, 966, 967, 214, 968, 969, 970, 971,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	972, 267, 268, 269, 270, 271, 272, 973, 974, 219,
	220, 221, 975, 273, 222, 976, 922, 977, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 978, 283,
	0, 284, 285, 979, 853, 286, 287, 288, 980, 981,
	983, 982, 984, 985, 986, 289, 290, 490, 291, 292,
	293, 223, 224, 987, 294, 988, 295, 989, 296, 990,
	991, 297, 298, 992, 299, 300, 993, 0, 994, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	995, 854, 996, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 997, 316, 998, 999, 855, 317,
	1000, 318, 229, 1001, 230, 1002, 319, 320, 321, 322,
	323, 324, 231, 232, 857, 1003, 326, 0, 0, 0,
	1004, 325, 327, 334, 1005, 856, 328, 233, 330, 329,
	331, 332, 333, 234, 1006, 235, 1007, 335, 858, 859,
	336, 337, 338, 860, 339, 340, 0, 0, 341, 342,
	343, 1008, 345, 344, 1009, 236, 861, 346, 347, 862,
	1010, 348, 349, 1011, 1012, 350, 0, 351, 924, 923,
	352, 353, 355, 356, 354, 863, 357, 358, 360, 359,
	1013, 1014, 864, 1015, 237, 361, 238, 362, 363, 1016,
	364, 365, 1017, 1018, 366, 367, 1019, 1020, 368, 239,
	865, 369, 866, 240, 370, 371, 372, 373, 374, 375,
	376, 1021, 377, 241, 378, 242, 379, 1022, 380, 381,
	382, 383, 384, 243, 385, 386, 1023, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	1024, 399, 867, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 1025, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 1026, 424, 405,
	406, 425, 868, 426, 245, 427, 428, 1027, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	1028, 439, 440, 1029, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 1030, 247, 248, 249, 449, 1031,
	1032, 450, 451, 250, 251, 1033, 452, 453, 454, 455,
	1034, 1035, 456, 457, 458, 460, 1036, 461, 1037, 459,
	462, 463, 464, 252, 253, 1038, 1039, 465, 254, 1040,
	1041, 1042, 1043, 466, 467, 255, 468, 469, 470, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1810, 256, 257, 258, 259, 963,
	260, 964, 965, 966, 967, 214, 968, 969, 970, 971,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	972, 267, 268, 269, 270, 271, 272, 973, 974, 219,
	220, 221, 975, 273, 222, 976, 922, 977, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 978, 283,
	0, 284, 285, 979, 853, 286, 287, 288, 980, 981,
	983, 982, 984, 985, 986, 289, 290, 490, 291, 292,
	293, 223, 224, 987, 294, 988, 295, 989, 296, 990,
	991, 297, 298, 992, 299, 300, 993, 0, 994, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	995, 854, 996, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 997, 316, 998, 999, 855, 317,
	1000, 318, 229, 1001, 230, 1002, 319, 320, 321, 322,
	323, 324, 231, 232, 857, 1003, 326, 0, 0, 0,
	1004, 325, 327, 334, 1005, 856, 328, 233, 330, 329,
	331, 332, 333, 234, 1006, 235, 1007, 335, 858, 859,
	336, 337, 338, 860, 339, 340, 0, 0, 341, 342,
	343, 1008, 345, 344, 1009, 236, 861, 346, 347, 862,
	1010, 348, 349, 1011, 1012, 350, 0, 351, 924, 923,
	352, 353, 355, 356, 354, 863, 357, 358, 360, 359,
	1013, 1014, 864, 1015, 237, 361, 238, 362, 363, 1016,
	364, 365, 1017, 1018, 366, 367, 1019, 1020, 368, 239,
	865, 369, 866, 240, 370, 371, 372, 373, 374, 375,
	376, 1021, 377, 241, 378, 242, 379, 1022, 380, 381,
	382, 383, 384, 243, 385, 386, 1023, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	1024, 399, 867, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 1025, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 1026, 424, 405,
	406, 425, 868, 426, 245, 427, 428, 1027, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	1028, 439, 440, 1029, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 1030, 247, 248, 249, 449, 1031,
	1032, 450, 451, 250, 251, 1033, 452, 453, 454, 455,
	1034, 1035, 456, 457, 458, 460, 1036, 461, 1037, 459,
	462, 463, 464, 252, 253, 1038, 1039, 465, 254, 1040,
	1041, 1042, 1043, 466, 467, 255, 468, 469, 470, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1494, 256, 257, 258, 259, 963,
	260, 964, 965, 966, 967, 214, 968, 969, 970, 971,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	972, 267, 268, 269, 270, 271, 272, 973, 974, 219,
	220, 221, 975, 273, 222, 976, 922, 977, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 978, 283,
	0, 284, 285, 979, 853, 286, 287, 288, 980, 981,
	983, 982, 984, 985, 986, 289, 290, 490, 291, 292,
	293, 223, 224, 987, 294, 988, 295, 989, 296, 990,
	991, 297, 298, 992, 299, 300, 993, 0, 994, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	995, 854, 996, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 997, 316, 998, 999, 855, 317,
	1000, 318, 229, 1001, 230, 1002, 319, 320, 321, 322,
	323, 324, 231, 232, 857, 1003, 326, 0, 0, 0,
	1004, 325, 327, 334, 1005, 856, 328, 233, 330, 329,
	331, 332, 333, 234, 1006, 235, 1007, 335, 858, 859,
	336, 337, 338, 860, 339, 340, 0, 0, 341, 342,
	343, 1008, 345, 344, 1009, 236, 861, 346, 347, 862,
	1010, 348, 349, 1011, 1012, 350, 0, 351, 924, 923,
	352, 353, 355, 356, 354, 863, 357, 358, 360, 359,
	1013, 1014, 864, 1015, 237, 361, 238, 362, 363, 1016,
	364, 365, 1017, 1018, 366, 367, 1019, 1020, 368, 239,
	865, 369, 866, 240, 370, 371, 372, 373, 374, 375,
	376, 1021, 377, 241, 378, 242, 379, 1022, 380, 381,
	382, 383, 384, 243, 385, 386, 1023, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	1024, 399, 867, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 1025, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 1026, 424, 405,
	406, 425, 868, 426, 245, 427, 428, 1027, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	1028, 439, 440, 1029, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 1030, 247, 248, 249, 449, 1031,
	1032, 450, 451, 250, 251, 1033, 452, 453, 454, 455,
	1034, 1035, 456, 457, 458, 460, 1036, 461, 1037, 459,
	462, 463, 464, 252, 253, 1038, 1039, 465, 254, 1040,
	1041, 1042, 1043, 466, 467, 255, 468, 469, 470, 1817,
	0, 770, 758, 759, 756, 757, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 1814, 260, 0, 0, 0, 0, 806, 750, 0,
	0, 0, 261, 262, 263, 215, 825, 790, 826, 778,
	812, 827, 0, 267, 780, 779, 270, 271, 272, 753,
	805, 828, 829, 221, 0, 273, 810, 0, 795, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 853, 286, 287, 288,
	798, 796, 797, 802, 800, 799, 801, 289, 290, 490,
	291, 813, 293, 830, 831, 736, 294, 0, 295, 0,
	296, 1815, 0, 814, 298, 0, 299, 300, 0, 0,
	0, 741, 304, 301, 302, 305, 308, 303, 309, 310,
	832, 833, 765, 854, 0, 0, 0, 0, 0, 311,
	312, 834, 815, 816, 0, 315, 0, 316, 0, 0,
	855, 317, 0, 318, 835, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 807, 809, 857, 0, 789, 0,
	0, 0, 0, 325, 327, 334, 0, 856, 328, 836,
	793, 817, 818, 819, 820, 837, 0, 794, 0, 335,
	858, 859, 336, 337, 338, 860, 821, 822, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 838, 861, 346,
	347, 862, 0, 348, 349, 0, 0, 350, 0, 351,
	738, 737, 352, 353, 355, 782, 354, 863, 357, 358,
	360, 359, 733, 0, 864, 766, 808, 361, 839, 362,
	363, 0, 791, 792, 0, 0, 366, 367, 0, 0,
	368, 239, 865, 369, 866, 840, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 841, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 842, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 867, 400, 401, 402, 403, 742,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 783, 784, 785, 786, 416, 422, 423, 803,
	424, 405, 406, 425, 868, 426, 843, 787, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 823, 433, 434,
	435, 844, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 781, 448, 0, 845, 846, 847,
	824, 0, 0, 450, 451, 848, 849, 764, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 804, 461,
	0, 788, 462, 463, 464, 252, 850, 1813, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 734, 0, 0, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 0, 730, 731, 1816, 0, 0, 0,
	0, 0, 0, 743, 1811, 0, 0, 0, 718, 746,
	770, 758, 759, 756, 757, 747, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 806, 750, 0, 0,
	0, 261, 262, 263, 215, 825, 790, 826, 778, 812,
	827, 0, 267, 780, 779, 270, 271, 272, 753, 805,
	828, 829, 221, 0, 273, 810, 0, 795, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 798,
	796, 797, 802, 800, 799, 801, 289, 290, 490, 291,
	813, 293, 830, 831, 736, 294, 0, 295, 0, 296,
	0, 0, 814, 298, 0, 299, 300, 0, 0, 0,
	741, 304, 301, 302, 305, 308, 303, 309, 310, 832,
	833, 765, 854, 0, 0, 0, 0, 0, 311, 312,
	834, 815, 816, 0, 315, 0, 316, 0, 0, 855,
	317, 0, 318, 835, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 807, 809, 857, 0, 789, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 836, 793,
	817, 818, 819, 820, 837, 0, 794, 0, 335, 858,
	859, 336, 337, 338, 860, 821, 822, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 838, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 738,
	737, 352, 353, 355, 782, 354, 863, 357, 358, 360,
	359, 733, 0, 864, 766, 808, 361, 839, 362, 363,
	0, 791, 792, 0, 0, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 840, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 841, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 842, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 742, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 171, 420,
	421, 783, 784, 785, 786, 416, 422, 423, 803, 424,
	405, 406, 425, 868, 426, 843, 787, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 823, 433, 434, 435,
	844, 0, 439, 440, 173, 441, 442, 443, 444, 445,
	306, 446, 307, 781, 448, 0, 845, 846, 847, 824,
	0, 0, 450, 451, 848, 849, 764, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 804, 461, 0,
	788, 462, 463, 464, 1133, 850, 0, 0, 465, 254,
	0, 0, 0, 165, 466, 467, 255, 468, 469, 470,
	734, 166, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 0, 730, 731, 770, 758, 759, 756, 757,
	747, 0, 1343, 0, 0, 0, 0, 0, 746, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 806, 750, 0, 0, 0, 261, 262, 263, 215,
	825, 790, 826, 778, 812, 827, 0, 267, 780, 779,
	270, 271, 272, 753, 805, 828, 829, 221, 0, 273,
	810, 0, 795, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 798, 796, 797, 802, 800, 799,
	801, 289, 290, 490, 291, 813, 293, 830, 831, 736,
	294, 0, 295, 0, 296, 0, 0, 814, 298, 0,
	299, 300, 0, 0, 0, 741, 304, 301, 302, 305,
	308, 303, 309, 310, 832, 833, 765, 854, 0, 0,
	0, 0, 0, 311, 312, 834, 815, 816, 0, 315,
	0, 316, 0, 0, 855, 317, 0, 318, 835, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 807, 809,
	857, 0, 789, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 836, 793, 817, 818, 819, 820, 837,
	0, 794, 0, 335, 858, 859, 336, 337, 338, 860,
	821, 822, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 838, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 738, 737, 352, 353, 355, 782,
	354, 863, 357, 358, 360, 359, 733, 0, 864, 766,
	808, 361, 839, 362, 363, 0, 791, 792, 0, 0,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 840,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 841,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 842,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 742, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 171, 420, 421, 783, 784, 785, 786,
	416, 422, 423, 803, 424, 405, 406, 425, 868, 426,
	843, 787, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 823, 433, 434, 435, 844, 0, 439, 440, 173,
	441, 442, 443, 444, 445, 306, 446, 307, 781, 448,
	0, 845, 846, 847, 824, 0, 0, 450, 451, 848,
	849, 764, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 804, 461, 0, 788, 462, 463, 464, 1133,
	850, 0, 0, 465, 254, 0, 0, 0, 165, 466,
	467, 255, 468, 469, 470, 734, 166, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 730, 731,
	770, 758, 759, 756, 757, 747, 0, 1343, 0, 0,
	0, 0, 0, 746, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 806, 750, 0, 0,
	0, 261, 262, 263, 215, 825, 790, 826, 778, 812,
	827, 1887, 267, 780, 779, 270, 271, 272, 753, 805,
	828, 829, 221, 0, 273, 810, 0, 795, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 798,
	796, 797, 802, 800, 799, 801, 289, 290, 490, 291,
	813, 293, 830, 831, 736, 294, 0, 295, 0, 296,
	0, 0, 814, 298, 0, 299, 300, 0, 0, 0,
	741, 304, 301, 302, 305, 308, 303, 309, 310, 832,
	833, 765, 854, 0, 0, 0, 0, 0, 311, 312,
	834, 815, 816, 0, 315, 0, 316, 0, 1892, 855,
	317, 0, 318, 835, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 807, 809, 857, 0, 789, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 836, 793,
	817, 818, 819, 820, 837, 0, 794, 0, 335, 858,
	859, 336, 337, 338, 860, 821, 822, 0, 0, 341,
	342, 343, 0, 345, 344, 1888, 838, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 738,
	737, 352, 353, 355, 782, 354, 863, 357, 358, 360,
	359, 733, 0, 864, 766, 808, 361, 839, 362, 363,
	0, 791, 792, 0, 0, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 840, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 841, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 842, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 742, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 783, 784, 785, 786, 416, 422, 423, 803, 424,
	405, 406, 425, 868, 426, 843, 787, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 823, 433, 434, 435,
	844, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 781, 448, 0, 845, 846, 847, 824,
	0, 1889, 450, 451, 848, 849, 764, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 804, 461, 0,
	788, 462, 463, 464, 252, 850, 0, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	734, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 0, 730, 731, 770, 758, 759, 756, 757,
	747, 0, 743, 0, 0, 0, 0, 0, 746, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 806, 750, 0, 0, 0, 261, 262, 263, 215,
	825, 790, 826, 778, 812, 827, 0, 267, 780, 779,
	270, 271, 272, 753, 805, 828, 829, 221, 0, 273,
	810, 0, 795, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 798, 796, 797, 802, 800, 799,
	801, 289, 290, 490, 291, 813, 293, 830, 831, 736,
	294, 0, 295, 0, 296, 0, 0, 814, 298, 0,
	299, 300, 0, 0, 0, 741, 304, 301, 302, 305,
	308, 303, 309, 310, 832, 833, 765, 854, 0, 0,
	0, 0, 0, 311, 312, 834, 815, 816, 0, 315,
	0, 316, 0, 0, 855, 317, 0, 318, 835, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 807, 809,
	857, 0, 789, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 836, 793, 817, 818, 819, 820, 837,
	0, 794, 0, 335, 858, 859, 336, 337, 338, 860,
	821, 822, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 838, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 738, 737, 352, 353, 355, 782,
	354, 863, 357, 358, 360, 359, 733, 2646, 864, 766,
	808, 361, 839, 362, 363, 0, 791, 792, 0, 0,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 840,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 841,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 842,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 742, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 783, 784, 785, 786,
	416, 422, 423, 803, 424, 405, 406, 425, 868, 426,
	843, 787, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 823, 433, 434, 435, 844, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 781, 448,
	0, 845, 846, 847, 824, 0, 0, 450, 451, 848,
	849, 764, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 804, 461, 0, 788, 462, 463, 464, 252,
	850, 0, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 734, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 730, 731,
	1406, 770, 758, 759, 756, 757, 747, 743, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 806, 750, 0,
	0, 0, 261, 262, 263, 215, 825, 790, 826, 778,
	812, 827, 0, 267, 780, 779, 270, 271, 272, 753,
	805, 828, 829, 221, 0, 273, 810, 0, 795, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 853, 286, 287, 288,
	798, 796, 797, 802, 800, 799, 801, 289, 290, 490,
	291, 813, 293, 830, 831, 736, 294, 0, 295, 0,
	296, 0, 0, 814, 298, 0, 299, 300, 0, 0,
	0, 741, 304, 301, 302, 305, 308, 303, 309, 310,
	832, 833, 765, 854, 0, 0, 0, 0, 0, 311,
	312, 834, 815, 816, 0, 315, 0, 316, 0, 0,
	855, 317, 0, 318, 835, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 807, 809, 857, 0, 789, 0,
	0, 0, 1715, 325, 327, 334, 0, 856, 328, 836,
	793, 817, 818, 819, 820, 837, 0, 794, 0, 335,
	858, 859, 336, 337, 338, 860, 821, 822, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 838, 861, 346,
	347, 862, 0, 348, 349, 0, 0, 350, 0, 351,
	738, 737, 352, 353, 355, 782, 354, 863, 357, 358,
	360, 359, 733, 0, 864, 766, 808, 361, 839, 362,
	363, 0, 791, 792, 0, 0, 366, 367, 0, 0,
	368, 239, 865, 369, 866, 840, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 841, 378, 242, 379, 1714,
	380, 381, 382, 383, 384, 842, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 867, 400, 401, 402, 403, 742,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 783, 784, 785, 786, 416, 422, 423, 803,
	424, 405, 406, 425, 868, 426, 843, 787, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 823, 433, 434,
	435, 844, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 781, 448, 0, 845, 846, 847,
	824, 0, 0, 450, 451, 848, 849, 764, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 804, 461,
	0, 788, 462, 463, 464, 252, 850, 0, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 734, 0, 0, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 0, 730, 731, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 726, 746,
	770, 758, 759, 756, 757, 747, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 806, 750, 0, 0,
	0, 261, 262, 263, 215, 825, 790, 826, 778, 812,
	827, 0, 267, 780, 779, 270, 271, 272, 753, 805,
	828, 829, 221, 0, 273, 810, 0, 795, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 798,
	796, 797, 802, 800, 799, 801, 289, 290, 490, 291,
	813, 293, 830, 831, 736, 294, 0, 295, 0, 296,
	0, 0, 814, 298, 0, 299, 300, 0, 0, 0,
	741, 304, 301, 302, 305, 308, 303, 309, 310, 832,
	833, 765, 854, 0, 0, 0, 0, 0, 311, 312,
	834, 815, 816, 0, 315, 0, 316, 0, 0, 855,
	317, 0, 318, 835, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 807, 809, 857, 0, 789, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 836, 793,
	817, 818, 819, 820, 837, 0, 794, 0, 335, 858,
	859, 336, 337, 338, 860, 821, 822, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 838, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 738,
	737, 352, 353, 355, 782, 354, 863, 357, 358, 360,
	359, 733, 0, 864, 766, 808, 361, 839, 362, 363,
	0, 791, 792, 728, 0, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 840, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 841, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 842, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 742, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 783, 784, 785, 786, 416, 422, 423, 803, 424,
	405, 406, 425, 868, 426, 843, 787, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 823, 433, 434, 435,
	844, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 781, 448, 0, 845, 846, 847, 824,
	0, 0, 450, 451, 848, 849, 764, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 804, 461, 0,
	788, 462, 463, 464, 252, 850, 0, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	734, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 0, 730, 731, 770, 758, 759, 756, 757,
	747, 0, 743, 0, 0, 0, 0, 0, 746, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 806, 750, 0, 0, 0, 261, 262, 263, 215,
	825, 790, 826, 778, 812, 827, 0, 267, 780, 779,
	270, 271, 272, 753, 805, 828, 829, 221, 0, 273,
	810, 0, 795, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 798, 796, 797, 802, 800, 799,
	801, 289, 290, 490, 291, 813, 293, 830, 831, 736,
	294, 0, 295, 0, 296, 0, 0, 814, 298, 0,
	299, 300, 0, 0, 0, 741, 304, 301, 302, 305,
	308, 303, 309, 310, 832, 833, 765, 854, 0, 0,
	0, 0, 0, 311, 312, 834, 815, 816, 0, 315,
	0, 316, 0, 0, 855, 317, 0, 318, 835, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 807, 809,
	857, 0, 789, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 836, 793, 817, 818, 819, 820, 837,
	0, 794, 0, 335, 858, 859, 336, 337, 338, 860,
	821, 822, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 838, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 738, 737, 352, 353, 355, 782,
	354, 863, 357, 358, 360, 359, 733, 0, 864, 766,
	808, 361, 839, 362, 363, 0, 791, 792, 0, 0,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 840,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 841,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 842,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 742, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 783, 784, 785, 786,
	416, 422, 423, 803, 424, 405, 406, 425, 868, 426,
	843, 787, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 823, 433, 434, 435, 844, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 781, 448,
	0, 845, 846, 847, 824, 0, 0, 450, 451, 848,
	849, 764, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 804, 461, 0, 788, 462, 463, 464, 252,
	850, 2480, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 734, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 730, 731,
	770, 758, 759, 756, 757, 747, 0, 743, 0, 0,
	0, 0, 0, 746, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 806, 750, 0, 0,
	0, 261, 262, 263, 215, 825, 790, 826, 778, 812,
	827, 0, 267, 780, 779, 270, 271, 272, 753, 805,
	828, 829, 221, 0, 273, 810, 0, 795, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 798,
	796, 797, 802, 800, 799, 801, 289, 290, 490, 291,
	813, 293, 830, 831, 736, 294, 0, 295, 0, 296,
	0, 0, 814, 298, 0, 299, 300, 0, 0, 0,
	741, 304, 301, 302, 305, 308, 303, 309, 310, 832,
	833, 765, 854, 0, 0, 0, 0, 0, 311, 312,
	834, 815, 816, 0, 315, 0, 316, 0, 0, 855,
	317, 0, 318, 835, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 807, 809, 857, 0, 789, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 836, 793,
	817, 818, 819, 820, 837, 0, 794, 0, 335, 858,
	859, 336, 337, 338, 860, 821, 822, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 838, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 738,
	737, 352, 353, 355, 782, 354, 863, 357, 358, 360,
	359, 733, 0, 864, 766, 808, 361, 839, 362, 363,
	0, 791, 792, 728, 0, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 840, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 841, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 842, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 742, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 783, 784, 785, 786, 416, 422, 423, 803, 424,
	405, 406, 425, 868, 426, 843, 787, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 823, 433, 434, 435,
	844, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 781, 448, 0, 845, 846, 847, 824,
	0, 0, 450, 451, 848, 849, 764, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 804, 461, 0,
	788, 462, 463, 464, 252, 850, 0, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	734, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 0, 730, 731, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 0, 2289, 746, 770,
	758, 759, 756, 757, 747, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 806, 750, 0, 0, 0,
	261, 262, 263, 215, 825, 790, 826, 778, 812, 827,
	0, 267, 780, 779, 270, 271, 272, 753, 805, 828,
	829, 221, 0, 273, 810, 0, 795, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 288, 798, 796,
	797, 802, 800, 799, 801, 289, 290, 490, 291, 813,
	293, 830, 831, 736, 294, 0, 295, 0, 296, 0,
	0, 814, 298, 0, 299, 300, 0, 0, 0, 741,
	304, 301, 302, 305, 308, 303, 309, 310, 832, 833,
	765, 854, 0, 0, 0, 0, 0, 311, 312, 834,
	815, 816, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 835, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 807, 809, 857, 0, 789, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 836, 793, 817,
	818, 819, 820, 837, 0, 794, 0, 335, 858, 859,
	336, 337, 338, 860, 821, 822, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 838, 861, 346, 347, 862,
	0, 348, 349, 0, 0, 350, 0, 351, 738, 737,
	352, 353, 355, 782, 354, 863, 357, 358, 360, 359,
	733, 0, 864, 766, 808, 361, 839, 362, 363, 0,
	791, 792, 0, 0, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 840, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 841, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 842, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 742, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	783, 784, 785, 786, 416, 422, 423, 803, 424, 405,
	406, 425, 868, 426, 843, 787, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 823, 433, 434, 435, 844,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 781, 448, 0, 845, 846, 847, 824, 0,
	0, 450, 451, 848, 849, 764, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 804, 461, 0, 788,
	462, 463, 464, 252, 850, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 734,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 0,
	0, 0, 730, 731, 770, 758, 759, 756, 757, 747,
	0, 743, 0, 0, 0, 0, 0, 746, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	806, 750, 0, 0, 0, 261, 262, 263, 215, 825,
	790, 826, 778, 812, 827, 0, 267, 780, 779, 270,
	271, 272, 753, 805, 828, 829, 221, 0, 273, 810,
	0, 795, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 288, 798, 796, 797, 802, 800, 799, 801,
	289, 290, 490, 291, 813, 293, 830, 831, 736, 294,
	0, 295, 0, 296, 0, 0, 814, 298, 0, 299,
	300, 0, 0, 0, 741, 304, 301, 302, 305, 308,
	303, 309, 310, 832, 833, 765, 854, 0, 0, 0,
	0, 0, 311, 312, 834, 815, 816, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 835, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 807, 809, 857,
	0, 789, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 836, 793, 817, 818, 819, 820, 837, 0,
	794, 0, 335, 858, 859, 336, 337, 338, 860, 821,
	822, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	838, 861, 346, 347, 862, 0, 348, 349, 0, 0,
	350, 0, 351, 738, 737, 352, 353, 355, 782, 354,
	863, 357, 358, 360, 359, 733, 0, 864, 766, 808,
	361, 839, 362, 363, 0, 791, 792, 0, 0, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 840, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 841, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 842, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 742, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 783, 784, 785, 786, 416,
	422, 423, 803, 424, 405, 406, 425, 868, 426, 843,
	787, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	823, 433, 434, 435, 844, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 781, 448, 0,
	845, 846, 847, 824, 0, 0, 450, 451, 848, 849,
	764, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 804, 461, 0, 788, 462, 463, 464, 252, 850,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 734, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 730, 731, 1406,
	770, 758, 759, 756, 757, 747, 743, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 806, 750, 0, 0,
	0, 261, 262, 263, 215, 825, 790, 826, 778, 812,
	827, 0, 267, 780, 779, 270, 271, 272, 753, 805,
	828, 829, 221, 0, 273, 810, 0, 795, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 798,
	796, 797, 802, 800, 799, 801, 289, 290, 490, 291,
	813, 293, 830, 831, 736, 294, 0, 295, 0, 296,
	0, 0, 814, 298, 0, 299, 300, 0, 0, 0,
	741, 304, 301, 302, 305, 308, 303, 309, 310, 832,
	833, 765, 854, 0, 0, 0, 0, 0, 311, 312,
	834, 815, 816, 0, 315, 0, 316, 0, 1892, 855,
	317, 0, 318, 835, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 807, 809, 857, 0, 789, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 836, 793,
	817, 818, 819, 820, 837, 0, 794, 0, 335, 858,
	859, 336, 337, 338, 860, 821, 822, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 838, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 738,
	737, 352, 353, 355, 782, 354, 863, 357, 358, 360,
	359, 733, 0, 864, 766, 808, 361, 839, 362, 363,
	0, 791, 792, 0, 0, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 840, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 841, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 842, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 742, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 783, 784, 785, 786, 416, 422, 423, 803, 424,
	405, 406, 425, 868, 426, 843, 787, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 823, 433, 434, 435,
	844, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 781, 448, 0, 845, 846, 847, 824,
	0, 0, 450, 451, 848, 849, 764, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 804, 461, 0,
	788, 462, 463, 464, 252, 850, 0, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	734, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 0, 730, 731, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 0, 1926, 746, 770,
	758, 759, 756, 757, 747, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 806, 750, 0, 0, 0,
	261, 262, 263, 215, 825, 790, 826, 778, 812, 827,
	0, 267, 780, 779, 270, 271, 272, 753, 805, 828,
	829, 221, 0, 273, 810, 0, 795, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 288, 798, 796,
	797, 802, 800, 799, 801, 289, 290, 490, 291, 813,
	293, 830, 831, 736, 294, 0, 295, 0, 296, 0,
	0, 814, 298, 0, 299, 300, 0, 0, 0, 741,
	304, 301, 302, 305, 308, 303, 309, 310, 832, 833,
	765, 854, 0, 0, 0, 0, 0, 311, 312, 834,
	815, 816, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 835, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 807, 809, 857, 0, 789, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 836, 793, 817,
	818, 819, 820, 837, 0, 794, 0, 335, 858, 859,
	336, 337, 338, 860, 821, 822, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 838, 861, 346, 347, 862,
	0, 348, 349, 0, 0, 350, 0, 351, 738, 737,
	352, 353, 355, 782, 354, 863, 357, 358, 360, 359,
	733, 0, 864, 766, 808, 361, 839, 362, 363, 0,
	791, 792, 0, 0, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 840, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 841, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 842, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 742, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	783, 784, 785, 786, 416, 422, 423, 803, 424, 405,
	406, 425, 868, 426, 843, 787, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 823, 433, 434, 435, 844,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 781, 448, 0, 845, 846, 847, 824, 0,
	0, 450, 451, 848, 849, 764, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 804, 461, 0, 788,
	462, 463, 464, 252, 850, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 734,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 0,
	0, 0, 730, 731, 0, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 0, 1879, 746, 770, 758,
	759, 756, 757, 747, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 806, 750, 0, 0, 0, 261,
	262, 263, 215, 825, 790, 826, 778, 812, 827, 0,
	267, 780, 779, 270, 271, 272, 753, 805, 828, 829,
	221, 0, 273, 810, 0, 795, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 853, 286, 287, 288, 798, 796, 797,
	802, 800, 799, 801, 289, 290, 490, 291, 813, 293,
	830, 831, 736, 294, 0, 295, 0, 296, 0, 0,
	814, 298, 0, 299, 300, 0, 0, 0, 741, 304,
	301, 302, 305, 308, 303, 309, 310, 832, 833, 765,
	854, 0, 0, 0, 0, 0, 311, 312, 834, 815,
	816, 0, 315, 0, 316, 0, 0, 855, 317, 0,
	318, 835, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 807, 809, 857, 0, 789, 0, 0, 0, 0,
	325, 327, 334, 0, 856, 328, 836, 793, 817, 818,
	819, 820, 837, 0, 794, 0, 335, 858, 859, 336,
	337, 338, 860, 821, 822, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 838, 861, 346, 347, 862, 0,
	348, 349, 0, 0, 350, 0, 351, 738, 737, 352,
	353, 355, 782, 354, 863, 357, 358, 360, 359, 733,
	0, 864, 766, 808, 361, 839, 362, 363, 0, 791,
	792, 0, 0, 366, 367, 0, 0, 368, 239, 865,
	369, 866, 840, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 841, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 842, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 867, 400, 401, 402, 403, 742, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 783,
	784, 785, 786, 416, 422, 423, 803, 424, 405, 406,
	425, 868, 426, 843, 787, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 823, 433, 434, 435, 844, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 781, 448, 0, 845, 846, 847, 824, 0, 0,
	450, 451, 848, 849, 764, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 804, 461, 0, 788, 462,
	463, 464, 252, 850, 0, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 734, 0,
	0, 0, 0, 0, 0, 0, 732, 0, 0, 0,
	0, 730, 731, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 1867, 746, 770, 758, 759,
	756, 757, 747, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 806, 750, 0, 0, 0, 261, 262,
	263, 215, 825, 790, 826, 778, 812, 827, 0, 267,
	780, 779, 270, 271, 272, 753, 805, 828, 829, 221,
	0, 273, 810, 0, 795, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 853, 286, 287, 288, 798, 796, 797, 802,
	800, 799, 801, 289, 290, 490, 291, 813, 293, 830,
	831, 736, 294, 0, 295, 0, 296, 0, 0, 814,
	298, 0, 299, 300, 0, 0, 0, 741, 304, 301,
	302, 305, 308, 303, 309, 310, 832, 833, 765, 854,
	0, 0, 0, 0, 0, 311, 312, 834, 815, 816,
	0, 315, 0, 316, 0, 0, 855, 317, 0, 318,
	835, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	807, 809, 857, 0, 789, 0, 0, 0, 0, 325,
	327, 334, 0, 856, 328, 836, 793, 817, 818, 819,
	820, 837, 0, 794, 0, 335, 858, 859, 336, 337,
	338, 860, 821, 822, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 838, 861, 346, 347, 862, 0, 348,
	349, 0, 0, 350, 0, 351, 738, 737, 352, 353,
	355, 782, 354, 863, 357, 358, 360, 359, 733, 0,
	864, 766, 808, 361, 839, 362, 363, 0, 791, 792,
	0, 0, 366, 367, 0, 0, 368, 239, 865, 369,
	866, 840, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 841, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 842, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	867, 400, 401, 402, 403, 742, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 783, 784,
	785, 786, 416, 422, 423, 803, 424, 405, 406, 425,
	868, 426, 843, 787, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 823, 433, 434, 435, 844, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	781, 448, 0, 845, 846, 847, 824, 0, 0, 450,
	451, 848, 849, 764, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 804, 461, 0, 788, 462, 463,
	464, 252, 850, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 734, 0, 0,
	0, 0, 0, 0, 0, 732, 0, 0, 0, 0,
	730, 731, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 1865, 746, 770, 758, 759, 756,
	757, 747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 806, 750, 0, 0, 0, 261, 262, 263,
	215, 825, 790, 826, 778, 812, 827, 0, 267, 780,
	779, 270, 271, 272, 753, 805, 828, 829, 221, 0,
	273, 810, 0, 795, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 853, 286, 287, 288, 798, 796, 797, 802, 800,
	799, 801, 289, 290, 490, 291, 813, 293, 830, 831,
	736, 294, 0, 295, 0, 296, 0, 0, 814, 298,
	0, 299, 300, 0, 0, 0, 741, 304, 301, 302,
	305, 308, 303, 309, 310, 832, 833, 765, 854, 0,
	0, 0, 0, 0, 311, 312, 834, 815, 816, 0,
	315, 0, 316, 0, 0, 855, 317, 0, 318, 835,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 807,
	809, 857, 0, 789, 0, 0, 0, 0, 325, 327,
	334, 0, 856, 328, 836, 793, 817, 818, 819, 820,
	837, 0, 794, 0, 335, 858, 859, 336, 337, 338,
	860, 821, 822, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 838, 861, 346, 347, 862, 0, 348, 349,
	0, 0, 350, 0, 351, 738, 737, 352, 353, 355,
	782, 354, 863, 357, 358, 360, 359, 733, 0, 864,
	766, 808, 361, 839, 362, 363, 0, 791, 792, 0,
	0, 366, 367, 0, 0, 368, 239, 865, 369, 866,
	840, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	841, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	842, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 867,
	400, 401, 402, 403, 742, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 783, 784, 785,
	786, 416, 422, 423, 803, 424, 405, 406, 425, 868,
	426, 843, 787, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 823, 433, 434, 435, 844, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 781,
	448, 0, 845, 846, 847, 824, 0, 0, 450, 451,
	848, 849, 764, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 804, 461, 0, 788, 462, 463, 464,
	252, 850, 0, 0, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 469, 470, 734, 0, 0, 0,
	0, 0, 0, 0, 732, 0, 0, 0, 0, 730,
	731, 0, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 0, 1863, 746, 770, 758, 759, 756, 757,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 806, 750, 0, 0, 0, 261, 262, 263, 215,
	825, 790, 826, 778, 812, 827, 0, 267, 780, 779,
	270, 271, 272, 753, 805, 828, 829, 221, 0, 273,
	810, 0, 795, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 798, 796, 797, 802, 800, 799,
	801, 289, 290, 490, 291, 813, 293, 830, 831, 736,
	294, 0, 295, 0, 296, 0, 0, 814, 298, 0,
	299, 300, 0, 0, 0, 741, 304, 301, 302, 305,
	308, 303, 309, 310, 832, 833, 765, 854, 0, 0,
	0, 0, 0, 311, 312, 834, 815, 816, 0, 315,
	0, 316, 0, 0, 855, 317, 0, 318, 835, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 807, 809,
	857, 0, 789, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 836, 793, 817, 818, 819, 820, 837,
	0, 794, 0, 335, 858, 859, 336, 337, 338, 860,
	821, 822, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 838, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 738, 737, 352, 353, 355, 782,
	354, 863, 357, 358, 360, 359, 733, 0, 864, 766,
	808, 361, 839, 362, 363, 0, 791, 792, 0, 0,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 840,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 841,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 842,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 742, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 783, 784, 785, 786,
	416, 422, 423, 803, 424, 405, 406, 425, 868, 426,
	843, 787, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 823, 433, 434, 435, 844, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 781, 448,
	0, 845, 846, 847, 824, 0, 0, 450, 451, 848,
	849, 764, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 804, 461, 0, 788, 462, 463, 464, 252,
	850, 0, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 734, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 730, 731,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 1860, 746, 1852, 758, 759, 756, 757, 747,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	806, 750, 0, 0, 0, 261, 262, 263, 215, 825,
	790, 826, 778, 812, 827, 0, 267, 780, 779, 270,
	271, 272, 753, 805, 828, 829, 221, 0, 273, 810,
	0, 795, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 288, 798, 796, 797, 802, 800, 799, 801,
	289, 290, 490, 291, 813, 1855, 830, 831, 736, 294,
	0, 295, 0, 296, 0, 0, 814, 298, 0, 299,
	300, 0, 0, 0, 741, 304, 301, 302, 305, 308,
	303, 309, 310, 832, 833, 765, 854, 0, 0, 0,
	0, 0, 311, 312, 834, 815, 816, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 835, 0, 230,
	0, 319, 320, 1856, 322, 323, 324, 807, 809, 857,
	0, 789, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 836, 793, 817, 818, 819, 820, 837, 0,
	794, 0, 335, 858, 859, 336, 337, 338, 860, 821,
	822, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	838, 861, 346, 347, 862, 0, 348, 349, 0, 0,
	350, 0, 351, 738, 737, 1857, 1854, 355, 782, 354,
	863, 357, 358, 360, 359, 733, 0, 864, 766, 808,
	361, 839, 362, 363, 0, 791, 792, 0, 0, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 840, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 841, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 842, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 742, 404, 0, 408, 409, 410, 411, 412,
	413, 1858, 0, 420, 421, 783, 784, 785, 786, 416,
	422, 423, 803, 424, 405, 406, 425, 868, 426, 843,
	787, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	823, 433, 434, 435, 844, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 781, 448, 0,
	845, 846, 847, 824, 0, 0, 450, 451, 848, 849,
	764, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 804, 461, 0, 788, 462, 463, 464, 252, 850,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 1853, 470, 734, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 730, 731, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	0, 1849, 746, 1852, 758, 759, 756, 757, 747, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 806,
	750, 0, 0, 0, 261, 262, 263, 215, 825, 790,
	826, 778, 812, 827, 0, 267, 780, 779, 270, 271,
	272, 753, 805, 828, 829, 221, 0, 273, 810, 0,
	795, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 853, 286,
	287, 288, 798, 796, 797, 802, 800, 799, 801, 289,
	290, 490, 291, 813, 1855, 830, 831, 736, 294, 0,
	295, 0, 296, 0, 0, 814, 298, 0, 299, 300,
	0, 0, 0, 741, 304, 301, 302, 305, 308, 303,
	309, 310, 832, 833, 765, 854, 0, 0, 0, 0,
	0, 311, 312, 834, 815, 816, 0, 315, 0, 316,
	0, 0, 855, 317, 0, 318, 835, 0, 230, 0,
	319, 320, 1856, 322, 323, 324, 807, 809, 857, 0,
	789, 0, 0, 0, 0, 325, 327, 334, 0, 856,
	328, 836, 793, 817, 818, 819, 820, 837, 0, 794,
	0, 335, 858, 859, 336, 337, 338, 860, 821, 822,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 838,
	861, 346, 347, 862, 0, 348, 349, 0, 0, 350,
	0, 351, 738, 737, 1857, 1854, 355, 782, 354, 863,
	357, 358, 360, 359, 733, 0, 864, 766, 808, 361,
	839, 362, 363, 0, 791, 792, 0, 0, 366, 367,
	0, 0, 368, 239, 865, 369, 866, 840, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 841, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 842, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 867, 400, 401, 402,
	403, 742, 404, 0, 408, 409, 410, 411, 412, 413,
	1858, 0, 420, 421, 783, 784, 785, 786, 416, 422,
	423, 803, 424, 405, 406, 425, 868, 426, 843, 787,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 823,
	433, 434, 435, 844, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 781, 448, 0, 845,
	846, 847, 824, 0, 0, 450, 451, 848, 849, 764,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	804, 461, 0, 788, 462, 463, 464, 252, 850, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 1853, 470, 734, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 0, 0, 730, 731, 770, 758,
	759, 756, 757, 747, 0, 743, 0, 0, 0, 0,
	0, 746, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 806, 750, 0, 0, 0, 261,
	262, 263, 215, 825, 790, 826, 778, 812, 827, 0,
	267, 780, 779, 270, 271, 272, 753, 805, 828, 829,
	221, 0, 273, 810, 0, 795, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 853, 286, 287, 288, 798, 796, 797,
	802, 800, 799, 801, 289, 290, 490, 291, 813, 293,
	830, 831, 736, 294, 0, 295, 0, 296, 0, 0,
	814, 298, 0, 299, 300, 0, 0, 0, 741, 304,
	301, 302, 305, 308, 303, 309, 310, 832, 833, 765,
	854, 0, 0, 0, 0, 0, 311, 312, 834, 815,
	816, 0, 315, 0, 316, 0, 0, 855, 317, 0,
	318, 835, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 807, 809, 857, 0, 789, 0, 0, 0, 0,
	325, 327, 334, 0, 856, 328, 836, 793, 817, 818,
	819, 820, 837, 0, 794, 0, 335, 858, 859, 336,
	337, 338, 860, 821, 822, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 838, 861, 346, 347, 862, 0,
	348, 349, 0, 0, 350, 0, 351, 738, 737, 352,
	353, 355, 782, 354, 863, 357, 358, 360, 359, 733,
	0, 864, 766, 808, 361, 839, 362, 363, 0, 791,
	792, 0, 0, 366, 367, 0, 0, 368, 239, 865,
	369, 866, 840, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 841, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 842, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 867, 400, 401, 402, 403, 742, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 783,
	784, 785, 786, 416, 422, 423, 803, 424, 405, 406,
	425, 868, 426, 843, 787, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 823, 433, 434, 435, 844, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 781, 448, 0, 845, 846, 847, 824, 0, 0,
	450, 451, 848, 849, 764, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 804, 461, 0, 788, 462,
	463, 464, 252, 850, 0, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 734, 0,
	0, 0, 0, 0, 0, 0, 732, 0, 0, 0,
	0, 730, 731, 0, 0, 0, 0, 0, 1348, 0,
	743, 0, 0, 0, 0, 0, 746, 770, 758, 759,
	756, 757, 747, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 1702, 260, 0,
	0, 0, 0, 806, 750, 0, 0, 0, 261, 262,
	263, 215, 825, 790, 826, 778, 812, 827, 0, 267,
	780, 779, 270, 271, 272, 753, 805, 828, 829, 221,
	0, 273, 810, 0, 795, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 853, 286, 287, 288, 798, 796, 797, 802,
	800, 799, 801, 289, 290, 490, 291, 813, 293, 830,
	831, 736, 294, 0, 295, 0, 296, 0, 0, 814,
	298, 0, 299, 300, 0, 0, 0, 741, 304, 301,
	302, 305, 308, 303, 309, 310, 832, 833, 765, 854,
	0, 0, 0, 0, 0, 311, 312, 834, 815, 816,
	0, 315, 0, 316, 0, 0, 855, 317, 0, 318,
	835, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	807, 809, 857, 0, 789, 0, 0, 0, 0, 325,
	327, 334, 0, 856, 328, 836, 793, 817, 818, 819,
	820, 837, 0, 794, 0, 335, 858, 859, 336, 337,
	338, 860, 821, 822, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 838, 861, 346, 347, 862, 0, 348,
	349, 0, 0, 350, 0, 351, 738, 737, 352, 353,
	355, 782, 354, 863, 357, 358, 360, 359, 733, 0,
	864, 766, 808, 361, 839, 362, 363, 0, 791, 792,
	0, 0, 366, 367, 0, 0, 368, 239, 865, 369,
	866, 840, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 841, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 842, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	867, 400, 401, 402, 403, 742, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 783, 784,
	785, 786, 416, 422, 423, 803, 424, 405, 406, 425,
	868, 426, 843, 787, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 823, 433, 434, 435, 844, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	781, 448, 0, 845, 846, 847, 824, 0, 0, 450,
	451, 848, 849, 764, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 804, 461, 0, 788, 462, 463,
	464, 252, 850, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 734, 0, 0,
	0, 0, 0, 0, 0, 732, 0, 0, 0, 0,
	730, 731, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 1061, 746, 770, 758, 759, 756,
	757, 747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 806, 750, 0, 0, 0, 261, 262, 263,
	215, 825, 790, 826, 778, 812, 827, 0, 267, 780,
	779, 270, 271, 272, 753, 805, 828, 829, 221, 0,
	273, 810, 0, 795, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 853, 286, 287, 288, 798, 796, 797, 802, 800,
	799, 801, 289, 290, 490, 291, 813, 293, 830, 831,
	736, 294, 0, 295, 0, 296, 0, 0, 814, 298,
	0, 299, 300, 0, 0, 0, 741, 304, 301, 302,
	305, 308, 303, 309, 310, 832, 833, 765, 854, 0,
	0, 0, 0, 0, 311, 312, 834, 815, 816, 0,
	315, 0, 316, 0, 0, 855, 317, 0, 318, 835,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 1060,
	809, 857, 0, 789, 0, 0, 0, 0, 325, 327,
	334, 0, 856, 328, 836, 793, 817, 818, 819, 820,
	837, 0, 794, 0, 335, 858, 859, 336, 337, 338,
	860, 821, 822, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 838, 861, 346, 347, 862, 0, 348, 349,
	0, 0, 350, 0, 351, 738, 737, 352, 353, 355,
	782, 354, 863, 357, 358, 360, 359, 733, 0, 864,
	766, 808, 361, 839, 362, 363, 0, 791, 792, 0,
	0, 366, 367, 0, 0, 368, 239, 865, 369, 866,
	840, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	841, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	842, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 867,
	400, 401, 402, 403, 742, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 783, 784, 785,
	786, 416, 422, 423, 803, 424, 405, 406, 425, 868,
	426, 843, 787, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 823, 433, 434, 435, 844, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 781,
	448, 0, 845, 846, 847, 824, 0, 0, 450, 451,
	848, 849, 764, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 804, 461, 0, 788, 462, 463, 464,
	252, 850, 0, 0, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 469, 470, 734, 0, 0, 0,
	0, 0, 0, 0, 732, 0, 0, 0, 0, 730,
	731, 0, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 0, 1058, 746, 770, 758, 759, 756, 757,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 806, 750, 0, 0, 0, 261, 262, 263, 215,
	825, 790, 826, 778, 812, 827, 0, 267, 780, 779,
	270, 271, 272, 753, 805, 828, 829, 221, 0, 273,
	810, 0, 795, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	853, 286, 287, 288, 798, 796, 797, 802, 800, 799,
	801, 289, 290, 490, 291, 813, 293, 830, 831, 736,
	294, 0, 295, 0, 296, 0, 0, 814, 298, 0,
	299, 300, 0, 0, 0, 741, 304, 301, 302, 305,
	308, 303, 309, 310, 832, 833, 765, 854, 0, 0,
	0, 0, 0, 311, 312, 834, 815, 816, 0, 315,
	0, 316, 0, 0, 855, 317, 0, 318, 835, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 1057, 809,
	857, 0, 789, 0, 0, 0, 0, 325, 327, 334,
	0, 856, 328, 836, 793, 817, 818, 819, 820, 837,
	0, 794, 0, 335, 858, 859, 336, 337, 338, 860,
	821, 822, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 838, 861, 346, 347, 862, 0, 348, 349, 0,
	0, 350, 0, 351, 738, 737, 352, 353, 355, 782,
	354, 863, 357, 358, 360, 359, 733, 0, 864, 766,
	808, 361, 839, 362, 363, 0, 791, 792, 0, 0,
	366, 367, 0, 0, 368, 239, 865, 369, 866, 840,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 841,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 842,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 867, 400,
	401, 402, 403, 742, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 783, 784, 785, 786,
	416, 422, 423, 803, 424, 405, 406, 425, 868, 426,
	843, 787, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 823, 433, 434, 435, 844, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 781, 448,
	0, 845, 846, 847, 824, 0, 0, 450, 451, 848,
	849, 764, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 804, 461, 0, 788, 462, 463, 464, 252,
	850, 0, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 734, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 730, 731,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 1055, 746, 770, 758, 759, 756, 757, 747,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	806, 750, 0, 0, 0, 261, 262, 263, 215, 825,
	790, 826, 778, 812, 827, 0, 267, 780, 779, 270,
	271, 272, 753, 805, 828, 829, 221, 0, 273, 810,
	0, 795, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 288, 798, 796, 797, 802, 800, 799, 801,
	289, 290, 490, 291, 813, 293, 830, 831, 736, 294,
	0, 295, 0, 296, 0, 0, 814, 298, 0, 299,
	300, 0, 0, 0, 741, 304, 301, 302, 305, 308,
	303, 309, 310, 832, 833, 765, 854, 0, 0, 0,
	0, 0, 311, 312, 834, 815, 816, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 835, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 807, 809, 857,
	0, 789, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 836, 793, 817, 818, 819, 820, 837, 0,
	794, 0, 335, 858, 859, 336, 337, 338, 860, 821,
	822, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	838, 861, 346, 347, 862, 0, 348, 349, 0, 0,
	350, 0, 351, 738, 737, 352, 353, 355, 782, 354,
	863, 357, 358, 360, 359, 733, 0, 864, 766, 808,
	361, 839, 362, 363, 0, 791, 792, 0, 0, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 840, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 841, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 842, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 742, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 783, 784, 785, 786, 416,
	422, 423, 803, 424, 405, 406, 425, 868, 426, 843,
	787, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	823, 433, 434, 435, 844, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 781, 448, 0,
	845, 846, 847, 824, 0, 0, 450, 451, 848, 849,
	764, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 804, 461, 0, 788, 462, 463, 464, 252, 850,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 734, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 730, 731, 770,
	758, 759, 756, 757, 747, 0, 743, 0, 0, 0,
	0, 0, 746, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 806, 750, 0, 0, 0,
	261, 262, 263, 215, 825, 790, 826, 778, 812, 827,
	0, 267, 780, 779, 270, 271, 272, 753, 805, 828,
	829, 221, 0, 273, 810, 0, 795, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 288, 798, 796,
	797, 802, 800, 799, 801, 289, 290, 490, 291, 813,
	293, 830, 831, 736, 294, 0, 295, 0, 296, 0,
	0, 814, 298, 0, 299, 300, 0, 0, 0, 741,
	304, 301, 302, 305, 308, 303, 309, 310, 832, 833,
	765, 854, 0, 0, 0, 0, 0, 311, 312, 834,
	815, 816, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 835, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 807, 809, 857, 0, 789, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 836, 793, 817,
	818, 819, 820, 837, 0, 794, 0, 335, 858, 859,
	336, 337, 338, 860, 821, 822, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 838, 861, 346, 347, 862,
	0, 348, 349, 0, 0, 350, 0, 351, 738, 737,
	352, 353, 355, 782, 354, 863, 357, 358, 360, 359,
	733, 0, 864, 766, 808, 361, 839, 362, 363, 0,
	791, 792, 0, 0, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 840, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 841, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 842, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 742, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	783, 784, 785, 786, 416, 422, 423, 803, 424, 405,
	406, 425, 868, 426, 843, 787, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 823, 433, 434, 435, 844,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 781, 448, 0, 845, 846, 847, 824, 0,
	0, 450, 451, 848, 849, 764, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 804, 461, 0, 788,
	462, 463, 464, 252, 850, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 734,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 0,
	0, 0, 730, 731, 770, 758, 759, 756, 757, 747,
	0, 743, 0, 0, 0, 0, 0, 746, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	806, 750, 0, 0, 0, 261, 262, 263, 215, 825,
	790, 826, 778, 812, 827, 0, 267, 780, 779, 270,
	271, 272, 753, 805, 828, 829, 221, 0, 273, 810,
	0, 795, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 3033, 798, 796, 797, 802, 800, 799, 801,
	289, 290, 490, 291, 813, 293, 830, 831, 736, 294,
	0, 295, 0, 296, 0, 0, 814, 298, 0, 299,
	300, 0, 0, 0, 741, 304, 301, 302, 305, 308,
	303, 309, 310, 832, 833, 765, 854, 0, 0, 0,
	0, 0, 311, 312, 834, 815, 816, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 835, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 807, 809, 857,
	0, 789, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 836, 793, 817, 818, 819, 820, 837, 0,
	794, 0, 335, 858, 859, 336, 337, 338, 860, 821,
	822, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	838, 861, 346, 347, 862, 0, 348, 349, 0, 0,
	350, 0, 351, 738, 737, 352, 353, 355, 782, 354,
	863, 357, 358, 360, 359, 733, 0, 864, 766, 808,
	361, 839, 362, 363, 0, 791, 792, 0, 0, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 840, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 841, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 842, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 742, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 783, 784, 785, 786, 416,
	422, 423, 803, 424, 405, 406, 425, 868, 426, 843,
	787, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	823, 433, 434, 435, 844, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 781, 448, 0,
	845, 846, 847, 824, 0, 0, 450, 451, 848, 849,
	764, 452, 453, 3032, 455, 0, 0, 456, 457, 458,
	460, 804, 461, 0, 788, 462, 463, 464, 252, 850,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 734, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 730, 731, 770,
	758, 759, 756, 757, 747, 0, 743, 0, 0, 0,
	0, 0, 746, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 806, 750, 0, 0, 0,
	261, 262, 263, 3031, 825, 790, 826, 778, 812, 827,
	0, 267, 780, 779, 270, 271, 272, 753, 805, 828,
	829, 221, 0, 273, 810, 0, 795, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 853, 286, 287, 3033, 798, 796,
	797, 802, 800, 799, 801, 289, 290, 490, 291, 813,
	293, 830, 831, 736, 294, 0, 295, 0, 296, 0,
	0, 814, 298, 0, 299, 300, 0, 0, 0, 741,
	304, 301, 302, 305, 308, 303, 309, 310, 832, 833,
	765, 854, 0, 0, 0, 0, 0, 311, 312, 834,
	815, 816, 0, 315, 0, 316, 0, 0, 855, 317,
	0, 318, 835, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 807, 809, 857, 0, 789, 0, 0, 0,
	0, 325, 327, 334, 0, 856, 328, 836, 793, 817,
	818, 819, 820, 837, 0, 794, 0, 335, 858, 859,
	336, 337, 338, 860, 821, 822, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 838, 861, 346, 347, 862,
	0, 348, 349, 0, 0, 350, 0, 351, 738, 737,
	352, 353, 355, 782, 354, 863, 357, 358, 360, 359,
	733, 0, 864, 766, 808, 361, 839, 362, 363, 0,
	791, 792, 0, 0, 366, 367, 0, 0, 368, 239,
	865, 369, 866, 840, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 841, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 842, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 867, 400, 401, 402, 403, 742, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	783, 784, 785, 786, 416, 422, 423, 803, 424, 405,
	406, 425, 868, 426, 843, 787, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 823, 433, 434, 435, 844,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 781, 448, 0, 845, 846, 847, 824, 0,
	0, 450, 451, 848, 849, 764, 452, 453, 3032, 455,
	0, 0, 456, 457, 458, 460, 804, 461, 0, 788,
	462, 463, 464, 252, 850, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 734,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 0,
	0, 0, 730, 731, 770, 758, 759, 756, 757, 747,
	0, 743, 0, 0, 0, 0, 0, 746, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	806, 750, 0, 0, 0, 261, 262, 263, 215, 825,
	790, 826, 778, 812, 827, 0, 267, 780, 779, 270,
	271, 272, 753, 805, 828, 829, 221, 0, 273, 810,
	0, 795, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 288, 798, 796, 797, 802, 800, 799, 801,
	289, 290, 490, 291, 813, 293, 830, 831, 0, 294,
	0, 295, 0, 296, 0, 0, 814, 298, 0, 299,
	300, 0, 0, 0, 741, 304, 301, 302, 305, 308,
	303, 309, 310, 832, 833, 765, 854, 0, 0, 0,
	0, 0, 311, 312, 834, 815, 816, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 835, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 807, 809, 857,
	0, 789, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 836, 793, 817, 818, 819, 820, 837, 0,
	794, 0, 335, 858, 859, 336, 337, 338, 860, 821,
	822, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	838, 861, 346, 347, 862, 0, 348, 349, 0, 0,
	350, 0, 351, 924, 923, 352, 353, 355, 782, 354,
	863, 357, 358, 360, 359, 0, 0, 864, 766, 808,
	361, 839, 362, 363, 0, 791, 792, 0, 0, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 840, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 841, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 842, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 1877, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 783, 784, 785, 786, 416,
	422, 423, 803, 424, 405, 406, 425, 868, 426, 843,
	787, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	823, 433, 434, 435, 844, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 781, 448, 0,
	845, 846, 847, 824, 0, 0, 450, 451, 848, 849,
	764, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 804, 461, 0, 788, 462, 463, 464, 252, 850,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 770, 758, 759, 756, 757, 747,
	0, 0, 1875, 0, 0, 0, 0, 1873, 1874, 0,
	256, 257, 258, 259, 0, 260, 1876, 0, 0, 0,
	806, 750, 746, 0, 0, 261, 262, 263, 0, 825,
	790, 826, 778, 812, 827, 0, 267, 780, 779, 270,
	271, 272, 753, 805, 828, 829, 221, 0, 273, 810,
	0, 795, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 3033, 798, 796, 797, 802, 800, 799, 801,
	289, 290, 490, 291, 813, 293, 830, 831, 736, 294,
	0, 295, 0, 296, 0, 0, 814, 298, 0, 299,
	300, 0, 0, 0, 741, 304, 301, 302, 305, 308,
	303, 309, 310, 832, 833, 765, 854, 0, 0, 0,
	0, 0, 311, 312, 834, 815, 816, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 835, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 807, 809, 0,
	0, 789, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 836, 793, 817, 818, 819, 820, 837, 0,
	794, 0, 335, 0, 0, 336, 337, 338, 860, 821,
	822, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	838, 861, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 738, 737, 352, 353, 355, 782, 354,
	863, 357, 358, 360, 359, 733, 0, 0, 766, 808,
	361, 839, 362, 363, 0, 791, 792, 0, 0, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 840, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 841, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 842, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 742, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 783, 784, 785, 786, 416,
	422, 423, 803, 424, 405, 406, 425, 0, 426, 843,
	787, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	823, 433, 434, 435, 844, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 781, 448, 0,
	845, 846, 847, 824, 0, 0, 450, 451, 848, 849,
	764, 452, 453, 3032, 455, 0, 0, 456, 457, 458,
	460, 804, 461, 0, 788, 462, 463, 464, 252, 850,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	718, 0, 920, 0, 0, 0, 0, 730, 731, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 256, 257,
	258, 259, 746, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 922,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 853, 286, 287,
	288, 0, 915, 916, 0, 918, 917, 919, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 832, 833, 0, 854, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 855, 317, 0, 318, 835, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 857, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 856, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 858, 859, 336, 337, 338, 860, 339, 340, 0,
	0, 341, 342, 343, 907, 345, 344, 0, 838, 861,
	346, 347, 862, 0, 348, 349, 0, 0, 350, 0,
	351, 924, 923, 352, 353, 355, 356, 354, 863, 357,
	358, 360, 359, 0, 0, 864, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 913, 366, 367, 0,
	0, 368, 239, 865, 369, 866, 840, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 841, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 867, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	171, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 868, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 844, 0, 439, 440, 173, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 848, 849, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 1133, 253, 0, 0,
	465, 254, 0, 0, 920, 165, 466, 467, 255, 468,
	469, 470, 0, 166, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 904, 0, 1434, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 922, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 288, 0, 915, 916, 0, 918, 917, 919,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 832, 833, 0, 854, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 835, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 857,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 858, 859, 336, 337, 338, 860, 339,
	340, 0, 0, 341, 342, 343, 907, 345, 344, 0,
	838, 861, 346, 347, 862, 0, 348, 349, 0, 0,
	350, 0, 351, 924, 923, 352, 353, 355, 356, 354,
	863, 357, 358, 360, 359, 0, 0, 864, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 913, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 840, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 841, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 171, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 868, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 844, 0, 439, 440, 173, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 848, 849,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 1133, 253,
	0, 0, 465, 254, 0, 0, 920, 165, 466, 467,
	255, 468, 469, 470, 0, 166, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 806, 0, 904, 0, 1434, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 805, 219, 220, 221, 0,
	273, 810, 0, 795, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 853, 286, 287, 288, 798, 796, 797, 802, 800,
	799, 801, 289, 290, 490, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 832, 833, 0, 854, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 855, 317, 0, 318, 835,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 807,
	809, 857, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 856, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 858, 859, 336, 337, 338,
	860, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 838, 861, 346, 347, 862, 0, 348, 349,
	0, 0, 350, 0, 351, 924, 923, 352, 353, 355,
	356, 354, 863, 357, 358, 360, 359, 0, 0, 864,
	0, 808, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 865, 369, 866,
	840, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	841, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 867,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 803, 424, 405, 406, 425, 868,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 844, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	848, 849, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 804, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 2261, 0, 920, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 2583, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 922, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 853, 286, 287, 288, 0, 915, 916,
	0, 918, 917, 919, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 832, 833, 0,
	854, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 855, 317, 0,
	318, 835, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 857, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 856, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 858, 859, 336,
	337, 338, 860, 339, 340, 0, 0, 341, 342, 343,
	907, 345, 344, 0, 838, 861, 346, 347, 862, 0,
	348, 349, 0, 0, 350, 0, 351, 924, 923, 352,
	353, 355, 356, 354, 863, 357, 358, 360, 359, 0,
	0, 864, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 913, 366, 367, 0, 0, 368, 239, 865,
	369, 866, 840, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 841, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 867, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 868, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 844, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 848, 849, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 0, 0, 465, 254, 903, 0,
	920, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 904, 0,
	911, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 922, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 0,
	915, 916, 0, 918, 917, 919, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 832,
	833, 0, 854, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 855,
	317, 0, 318, 835, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 857, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 858,
	859, 336, 337, 338, 860, 339, 340, 0, 0, 341,
	342, 343, 907, 345, 344, 0, 838, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 924,
	923, 352, 353, 355, 356, 354, 863, 357, 358, 360,
	359, 0, 0, 864, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 913, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 840, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 841, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 868, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	844, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 848, 849, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	0, 0, 920, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	904, 0, 911, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 922,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 853, 286, 287,
	288, 0, 915, 916, 0, 918, 917, 919, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 832, 833, 0, 854, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 855, 317, 0, 318, 835, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 857, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 856, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 858, 859, 336, 337, 338, 860, 339, 340, 0,
	0, 341, 342, 343, 907, 345, 344, 0, 838, 861,
	346, 347, 862, 0, 348, 349, 0, 0, 350, 0,
	351, 924, 923, 352, 353, 355, 356, 354, 863, 357,
	358, 360, 359, 0, 0, 864, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 913, 366, 367, 0,
	0, 368, 239, 865, 369, 866, 840, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 841, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 867, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 868, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 844, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 848, 849, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 0, 0, 920, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 904, 0, 911, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 922, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 288, 0, 915, 916, 0, 918, 917, 919,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 832, 833, 0, 854, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 835, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 857,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 858, 859, 336, 337, 338, 860, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	838, 861, 346, 347, 862, 0, 348, 349, 0, 0,
	350, 0, 351, 924, 923, 352, 353, 355, 356, 354,
	863, 357, 358, 360, 359, 0, 0, 864, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 840, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 841, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 868, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 844, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 848, 849,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	0, 0, 465, 254, 1130, 0, 945, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 1338, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 922, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 853, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 490, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 854, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 855, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 857, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 856, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 858, 859, 336, 337, 338,
	860, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 861, 346, 347, 862, 0, 348, 349,
	0, 0, 350, 0, 351, 924, 923, 352, 353, 355,
	356, 354, 863, 357, 358, 360, 359, 0, 0, 864,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 865, 369, 866,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 867,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 171, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 868,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	173, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	1133, 253, 0, 0, 465, 254, 718, 0, 487, 165,
	466, 467, 255, 468, 469, 470, 0, 166, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 138, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 171, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 173, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 1133, 253, 0, 0, 465, 254, 0, 0,
	0, 165, 466, 467, 255, 468, 469, 470, 0, 166,
	770, 758, 759, 756, 757, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	138, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 825, 790, 826, 778, 812,
	827, 0, 267, 780, 779, 270, 271, 272, 0, 0,
	828, 829, 221, 0, 273, 222, 0, 922, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	813, 293, 830, 831, 0, 294, 0, 295, 0, 296,
	0, 0, 814, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 765, 854, 0, 0, 0, 0, 0, 311, 312,
	834, 815, 816, 0, 315, 0, 316, 0, 0, 855,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 857, 0, 789, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 836, 793,
	817, 818, 819, 820, 837, 0, 794, 0, 335, 858,
	859, 336, 337, 338, 860, 821, 822, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 924,
	923, 352, 353, 355, 782, 354, 863, 357, 358, 360,
	359, 0, 0, 864, 766, 237, 361, 839, 362, 363,
	0, 791, 792, 0, 0, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 842, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 783, 784, 785, 786, 416, 422, 423, 0, 424,
	405, 406, 425, 868, 426, 843, 787, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 823, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 781, 448, 0, 845, 846, 847, 824,
	0, 0, 450, 451, 250, 251, 764, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	788, 462, 463, 464, 252, 850, 487, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 490, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 0, 0, 487, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 2058, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 0, 0, 465, 254, 0, 0,
	487, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	2495, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	1204, 0, 945, 944, 0, 0, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 1438, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 922,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 853, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 854, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 855, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 857, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 856, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 858, 859, 336, 337, 338, 860, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 861,
	346, 347, 862, 0, 348, 349, 0, 0, 350, 0,
	351, 924, 923, 352, 353, 355, 356, 354, 863, 357,
	358, 360, 359, 0, 0, 864, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 865, 369, 866, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 867, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 868, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 1126, 0, 945, 944, 0, 0, 0, 942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 922, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 854, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 1125, 232, 857,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 858, 859, 336, 337, 338, 860, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 861, 346, 347, 862, 0, 348, 349, 0, 0,
	350, 0, 351, 924, 923, 352, 353, 355, 356, 354,
	863, 357, 358, 360, 359, 0, 0, 864, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 868, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 1122, 0, 945, 944, 0, 0,
	0, 942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 922, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 853, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 490, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 854, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 855, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 1121,
	232, 857, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 856, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 858, 859, 336, 337, 338,
	860, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 861, 346, 347, 862, 0, 348, 349,
	0, 0, 350, 0, 351, 924, 923, 352, 353, 355,
	356, 354, 863, 357, 358, 360, 359, 0, 0, 864,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 865, 369, 866,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 867,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 868,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 469, 470, 1083, 0, 945, 944,
	0, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 922, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 853, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	854, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 855, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 1082, 232, 857, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 856, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 858, 859, 336,
	337, 338, 860, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 861, 346, 347, 862, 0,
	348, 349, 0, 0, 350, 0, 351, 924, 923, 352,
	353, 355, 356, 354, 863, 357, 358, 360, 359, 0,
	0, 864, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 865,
	369, 866, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 867, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 868, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 0, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 1080, 0,
	945, 944, 0, 0, 0, 942, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 922, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 854, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 855,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 1079, 232, 857, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 858,
	859, 336, 337, 338, 860, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 924,
	923, 352, 353, 355, 356, 354, 863, 357, 358, 360,
	359, 0, 0, 864, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 868, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	938, 0, 945, 944, 0, 0, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 922,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 853, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 854, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 855, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 940, 232, 857, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 856, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 858, 859, 336, 337, 338, 860, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 861,
	346, 347, 862, 0, 348, 349, 0, 0, 350, 0,
	351, 924, 923, 352, 353, 355, 356, 354, 863, 357,
	358, 360, 359, 0, 0, 864, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 865, 369, 866, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 867, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 868, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 945, 944,
	465, 254, 0, 942, 0, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 922, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 853, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	854, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 855, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 857, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 856, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 858, 859, 336,
	337, 338, 860, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 861, 346, 347, 862, 0,
	348, 349, 0, 0, 350, 0, 351, 924, 923, 352,
	353, 355, 356, 354, 863, 357, 358, 360, 359, 0,
	0, 864, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 865,
	369, 866, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 867, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 868, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 945, 944, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 922, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 853,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 854, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 855, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 857,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	856, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 858, 859, 336, 337, 338, 860, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 861, 346, 347, 862, 0, 348, 349, 0, 0,
	350, 0, 351, 924, 923, 352, 353, 355, 356, 354,
	863, 357, 358, 360, 359, 0, 0, 864, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 865, 369, 866, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 867, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 868, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	945, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 922, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 853, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 854, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 855,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 857, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 856, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 858,
	859, 336, 337, 338, 860, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 861, 346, 347,
	862, 0, 348, 349, 0, 0, 350, 0, 351, 924,
	923, 352, 353, 355, 356, 354, 863, 357, 358, 360,
	359, 0, 0, 864, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 865, 369, 866, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 867, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 868, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	587, 0, 207, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	213, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 212, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 206, 0, 207, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 473, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 213, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 212, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	207, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 473,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 213, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 1671, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 212, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 207, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 473, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 213, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	212, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 487, 0, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 473, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 487, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 473, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 1953, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 1950, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	2028, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 1956, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 2026,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 2025, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 1955, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	2027, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 487, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 1953, 273, 222,
	0, 0, 1947, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 1950, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 1956, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 1946, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 1955, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 454, 455, 0, 1954, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	0, 0, 465, 254, 593, 0, 487, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 592, 574, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	577, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 490, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 578, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 579, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 573, 0, 487, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 574, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 577, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 578,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 579, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 487, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 577, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 578, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 579, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	0, 0, 465, 254, 1101, 0, 487, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 490, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	913, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 933, 0, 487, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 935, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 913, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 0, 0, 465, 254, 930, 0,
	487, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 932, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 913, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	926, 0, 487, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 928, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 913, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 510, 0, 487, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 509, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 508, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	487, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 1933, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 487, 2417, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 490, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 487, 2417, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 2414, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 487, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 913, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 0, 0, 465, 254, 1691, 0,
	487, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	1689, 0, 487, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 1687, 0, 487, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	487, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 256, 257, 258, 259,
	1664, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	1624, 0, 487, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 1622, 0, 487, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	0, 0, 465, 254, 619, 0, 487, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 1177, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 490, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 620, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 616,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 615, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 1520, 0, 487, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 1519, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 0, 0, 465, 254, 619, 0,
	487, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 1177, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 620, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 616, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 615, 248, 249, 449,
	0, 0, 450, 1178, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	619, 0, 487, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 609, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 620, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 616, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 1151, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 615, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 1119, 0, 487, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 1118, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	0, 0, 465, 254, 1115, 0, 487, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 490, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 1114,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 1112, 0, 487, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 1111, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 0, 0, 465, 254, 1109, 0,
	487, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 1108, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	1105, 0, 487, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 1104, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 487, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 256, 257, 258, 259, 1093, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 0, 0, 465, 254, 1091, 0,
	487, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 1090, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	1085, 0, 487, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 1076, 0, 487, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 1075, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	0, 0, 465, 254, 1071, 0, 487, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 490, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 1067, 0, 487, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 1069, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 0, 0, 465, 254, 952, 0,
	487, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 954, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	949, 0, 487, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 619, 0, 487, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 609, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 608, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 620,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 610, 404, 0, 408, 409, 616, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	611, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	615, 248, 249, 449, 0, 0, 450, 613, 250, 251,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	0, 0, 465, 254, 599, 0, 487, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 490, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 600, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 595, 0, 487, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 0, 0, 465, 254, 585, 0,
	487, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	532, 0, 487, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 487, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 487, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 2318, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	487, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 2316, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 487, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 490, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 2305,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 487, 0, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	490, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 600, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 487, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 1533, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 490, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 0, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 487, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 490, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 1524, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	487, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 490, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 886, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 487, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 490, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 0, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 0, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 0, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 469, 470, 1275, 1276, 0, 1308,
	1309, 1310, 1318, 1319, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310,
	1318, 1319, 1320, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 1311, 0, 1297, 0, 0, 0, 0, 1278,
	0, 1294, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1315, 1325, 0, 1305, 1306,
	1307, 0, 1300, 1301, 1302, 1303, 0, 0, 0, 0,
	0, 1283, 0, 0, 0, 0, 0, 0, 0, 1321,
	1322, 0, 0, 0, 0, 0, 0, 1292, 1293, 0,
	0, 0, 0, 1315, 1325, 0, 1305, 1306, 1307, 0,
	1313, 0, 0, 0, 0, 0, 0, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 0,
	0, 0, 0, 1323, 0, 1292, 1293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 1313, 0,
	0, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1304, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1304, 0, 1316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 0, 0,
	1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 0, 0, 0, 1278, 0, 0, 1324, 0,
	1314, 0, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0,
	1277, 0, 0, 0, 0, 0, 0, 2197, 1297, 0,
	0, 0, 0, 0, 0, 1294, 0, 0, 1314, 0,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 2196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 1301,
	1302, 1303, 0, 0, 0, 0, 0, 1283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1275, 1276, 0,
	1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0, 1315,
	1325, 0, 1305, 1306, 1307, 1311, 0, 0, 0, 0,
	0, 0, 1278, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 0, 1313, 1297, 0, 0, 0, 0,
	0, 1298, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 1301, 1302, 1303, 0,
	0, 0, 0, 0, 1283, 0, 0, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1299, 0, 1315, 1325, 0, 1305,
	1306, 1307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 0, 0,
	1321, 1322, 0, 0, 0, 0, 0, 0, 1292, 1293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1314, 0, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 1304, 0, 0, 0, 0, 0,
	0, 2195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 0, 1316, 0, 0, 1278, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 1294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1314, 0, 0, 1289, 1290, 1296, 1295, 1291, 1317,
	0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285,
	1300, 1301, 1302, 1303, 2996, 0, 0, 0, 0, 1283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 1315, 1325, 0, 1305, 1306, 1307, 1311, 0, 0,
	0, 0, 0, 0, 1278, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 1321, 1322, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 1313, 1297, 0, 0,
	0, 0, 0, 1298, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1300, 1301, 1302,
	1303, 0, 0, 0, 0, 0, 1283, 0, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1299, 0, 1315, 1325,
	0, 1305, 1306, 1307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1316,
	0, 0, 1321, 1322, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 0, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 0, 1304, 0, 0, 2992,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 1275, 1276, 0, 1308, 1309, 1310,
	1318, 1319, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 0, 1316, 0, 0, 1278,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 0, 0, 1289, 1290, 1296, 1295,
	1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 1300, 1301, 1302, 1303, 2932, 0, 0, 0,
	0, 1283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 0, 1315, 1325, 0, 1305, 1306, 1307, 1311,
	0, 0, 0, 0, 0, 0, 1278, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 0,
	0, 0, 0, 0, 0, 1292, 1293, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 0, 1313, 1297,
	0, 0, 0, 0, 0, 1298, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	1301, 1302, 1303, 0, 0, 0, 0, 0, 1283, 0,
	0, 1304, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 0,
	1315, 1325, 0, 1305, 1306, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1316, 0, 0, 1321, 1322, 0, 0, 0, 0,
	0, 0, 1292, 1293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 0,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 1304, 0,
	0, 2881, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 1275, 1276, 0, 1308,
	1309, 1310, 1318, 1319, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 0, 1316, 0,
	0, 1278, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 0, 0, 1289, 1290,
	1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280,
	1281, 1282, 1284, 1285, 1300, 1301, 1302, 1303, 2848, 0,
	0, 0, 0, 1283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 1315, 1325, 0, 1305, 1306,
	1307, 1311, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 1321,
	1322, 0, 0, 0, 0, 0, 0, 1292, 1293, 0,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	1313, 1297, 0, 0, 0, 0, 0, 1298, 1294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 1301, 1302, 1303, 0, 0, 0, 0, 0,
	1283, 0, 0, 1304, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 0, 1315, 1325, 0, 1305, 1306, 1307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1316, 0, 0, 1321, 1322, 0, 0,
	0, 0, 0, 0, 1292, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 0, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0,
	1304, 0, 0, 2842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1299, 1275, 1276,
	0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	1316, 0, 0, 1278, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1314, 0, 0,
	1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287,
	1279, 1280, 1281, 1282, 1284, 1285, 1300, 1301, 1302, 1303,
	2836, 0, 0, 0, 0, 1283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 1315, 1325, 0,
	1305, 1306, 1307, 1311, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 0, 1277, 0, 0, 0, 0,
	0, 0, 1313, 1297, 0, 0, 0, 0, 0, 1298,
	1294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 1301, 1302, 1303, 0, 0, 0,
	0, 0, 1283, 0, 0, 1304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1299, 0, 1315, 1325, 0, 1305, 1306, 1307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 0, 0, 1321, 1322,
	0, 0, 0, 0, 0, 0, 1292, 1293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1314, 0, 0, 1289, 1290, 1296, 1295, 1291,
	1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284,
	1285, 0, 1304, 0, 0, 2753, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 1316, 0, 0, 1278, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1277, 0, 0, 0, 0, 0, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 1294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1314,
	0, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288,
	1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 1300, 1301,
	1302, 1303, 2708, 0, 0, 0, 0, 1283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1275, 1276, 0,
	1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0, 1315,
	1325, 0, 1305, 1306, 1307, 1311, 0, 0, 0, 0,
	0, 0, 1278, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 0, 1313, 1297, 0, 0, 0, 0,
	0, 1298, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 1301, 1302, 1303, 0,
	0, 0, 0, 0, 1283, 0, 0, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1299, 0, 1315, 1325, 0, 1305,
	1306, 1307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 0, 0,
	1321, 1322, 0, 0, 0, 0, 0, 0, 1292, 1293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1314, 0, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 1304, 0, 0, 2707, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 0, 1316, 0, 0, 1278, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 1294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1314, 0, 0, 1289, 1290, 1296, 1295, 1291, 1317,
	0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285,
	1300, 1301, 1302, 1303, 2679, 0, 0, 0, 0, 1283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 1315, 1325, 0, 1305, 1306, 1307, 1311, 0, 0,
	0, 0, 0, 0, 1278, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 1321, 1322, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 1313, 1297, 0, 0,
	0, 0, 0, 1298, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1300, 1301, 1302,
	1303, 0, 0, 0, 0, 0, 1283, 0, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1299, 0, 1315, 1325,
	0, 1305, 1306, 1307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1316,
	0, 0, 1321, 1322, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 0, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 0, 1304, 0, 0, 2499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 1275, 1276, 0, 1308, 1309, 1310,
	1318, 1319, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 0, 1316, 0, 0, 1278,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 0, 0, 1289, 1290, 1296, 1295,
	1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 1300, 1301, 1302, 1303, 2472, 0, 0, 0,
	0, 1283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 0, 1315, 1325, 0, 1305, 1306, 1307, 1311,
	0, 0, 0, 0, 0, 0, 1278, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 0,
	0, 0, 0, 0, 0, 1292, 1293, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 0, 1313, 1297,
	0, 0, 0, 0, 0, 1298, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	1301, 1302, 1303, 0, 0, 0, 0, 0, 1283, 0,
	0, 1304, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 0,
	1315, 1325, 0, 1305, 1306, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1316, 0, 0, 1321, 1322, 0, 0, 0, 0,
	0, 0, 1292, 1293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 0,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 1304, 0,
	0, 1801, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 1316, 0,
	0, 0, 0, 0, 1278, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 0, 0, 1289, 1290,
	1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280,
	1281, 1282, 1284, 1285, 0, 0, 2163, 1300, 1301, 1302,
	1303, 0, 0, 0, 0, 0, 1283, 3074, 0, 0,
	0, 0, 0, 0, 0, 0, 1275, 1276, 0, 1308,
	1309, 1310, 1318, 1319, 1320, 0, 0, 0, 1315, 1325,
	0, 1305, 1306, 1307, 1311, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 0, 1321, 1322, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 0, 1313, 1297, 0, 0, 0, 0, 0,
	1298, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3073, 0,
	0, 0, 0, 0, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1283, 0, 2244, 1304, 0, 2243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 1315, 1325, 0, 1305, 1306,
	1307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 0, 0, 1321,
	1322, 0, 0, 0, 0, 0, 0, 1292, 1293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 0, 0, 1289, 1290, 1296, 1295,
	1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 0, 1304, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 1316, 2136, 0, 1278, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 1294, 1902, 0, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 2137, 0, 1901, 0, 0, 1278, 0,
	1314, 1324, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 1300,
	1301, 1302, 1303, 1277, 0, 0, 0, 0, 1283, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1315, 1325, 0, 1305, 1306, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1321, 1322, 0, 0, 0, 0,
	0, 0, 1292, 1293, 0, 0, 0, 0, 0, 0,
	0, 1300, 1301, 1302, 1303, 1313, 0, 0, 0, 0,
	1283, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	0, 0, 1315, 1325, 0, 1305, 1306, 1307, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1321, 1322, 0, 0,
	0, 0, 0, 0, 1292, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 1304, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1299, 1275, 1276,
	0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	1316, 0, 0, 1278, 0, 1314, 1324, 0, 1289, 1290,
	1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280,
	1281, 1282, 1284, 1285, 0, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 1294, 0, 0, 0, 0, 0, 0,
	1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 0, 0, 0, 1278, 0, 1314, 1324, 0,
	1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287,
	1279, 1280, 1281, 1282, 1284, 1285, 1300, 1301, 1302, 1303,
	1277, 0, 0, 0, 0, 1283, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 1294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1315, 1325, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 0, 0, 0, 0, 1300, 1301,
	1302, 1303, 1313, 0, 0, 0, 0, 1283, 0, 1298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 0, 0, 1315,
	1325, 0, 1305, 1306, 1307, 0, 0, 0, 0, 1312,
	715, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1313, 1304, 0, 0, 0, 0,
	0, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1299, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 1316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1299, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 1316, 0, 0,
	1278, 0, 1314, 1324, 0, 1289, 1290, 1296, 1295, 1291,
	1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284,
	1285, 0, 0, 0, 0, 1277, 0, 0, 0, 2476,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 0, 0, 1275, 1276, 0,
	1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 2249,
	0, 0, 1278, 0, 1314, 1324, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 1300, 1301, 1302, 1303, 1277, 0, 0,
	0, 0, 1283, 0, 0, 1297, 0, 2254, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1315, 1325, 0, 1305, 1306, 1307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1321, 1322,
	0, 0, 0, 0, 0, 0, 1292, 1293, 0, 0,
	0, 0, 0, 0, 0, 1300, 1301, 1302, 1303, 1313,
	0, 0, 0, 0, 1283, 0, 1298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 1315, 1325, 0, 1305,
	1306, 1307, 0, 0, 0, 0, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1321, 1322, 0, 0, 0, 0, 0, 0, 1292, 1293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 1304, 0, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 0,
	0, 0, 1316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 0, 1316, 0, 0, 1278, 0, 1314,
	1324, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288,
	1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 1294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1314, 0, 0, 1289, 1290, 1296, 1295, 1291, 1317,
	0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285,
	1300, 1301, 1302, 1303, 0, 0, 0, 0, 0, 1283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 1315, 1325, 0, 1305, 1306, 1307, 1311, 0, 0,
	0, 2194, 0, 0, 1278, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 1321, 1322, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 1313, 1297, 0, 0,
	0, 0, 0, 1298, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2210, 0,
	0, 0, 0, 0, 0, 0, 0, 1300, 1301, 1302,
	1303, 0, 0, 0, 0, 0, 1283, 0, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1299, 0, 1315, 1325,
	0, 1305, 1306, 1307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1316,
	0, 0, 1321, 1322, 0, 0, 0, 0, 0, 0,
	1292, 1293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 0, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 1275, 1276, 0, 1308, 1309, 1310,
	1318, 1319, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 0, 1316, 0, 0, 1278,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 1275, 1276, 0, 1308,
	1309, 1310, 1318, 1319, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 0, 0, 0,
	0, 1278, 0, 1314, 1324, 0, 1289, 1290, 1296, 1295,
	1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 1300, 1301, 1302, 1303, 1277, 0, 0, 0,
	0, 1283, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1315, 1325, 0, 1305, 1306, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 0,
	0, 0, 0, 0, 0, 1292, 1293, 0, 0, 0,
	0, 0, 0, 0, 1300, 1301, 1302, 1303, 1313, 0,
	0, 0, 0, 1283, 0, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 1315, 1325, 0, 1305, 1306,
	1307, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	1322, 0, 0, 0, 0, 0, 0, 1292, 1293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1313, 1304, 0, 0, 0, 0, 0, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1304, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1316, 0, 0, 1278, 0, 1314, 1324,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 1294, 0, 0, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	1314, 1324, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 1300,
	1301, 1302, 1303, 1277, 0, 0, 0, 0, 1283, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1315, 1325, 0, 1305, 1306, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1321, 1322, 0, 0, 0, 0,
	0, 0, 1292, 1293, 0, 0, 0, 0, 0, 0,
	0, 1300, 1301, 1302, 1303, 1313, 0, 0, 0, 0,
	1283, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	0, 0, 1315, 1325, 0, 1305, 1306, 1307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1584, 0, 1292, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 1304, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 1595, 1580, 1585,
	1568, 1605, 1604, 0, 0, 1570, 1569, 0, 0, 0,
	0, 0, 1614, 1613, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 1606, 0, 1602, 1601, 0, 0, 0, 0,
	0, 0, 0, 0, 1600, 0, 0, 1299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 1599, 1597, 1598, 1314, 0, 0, 1289, 1290,
	1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280,
	1281, 1282, 1284, 1285, 0, 0, 0, 0, 0, 1579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1588, 1583, 1589, 1590, 1591, 1592, 1593, 0, 1587, 0,
	0, 0, 0, 0, 0, 0, 0, 1611, 1612, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1314, 0, 0,
	1289, 1290, 1296, 1295, 1291, 1317, 1572, 1288, 1286, 1287,
	1279, 1280, 1281, 1282, 1284, 1285, 0, 0, 0, 1603,
	0, 0, 0, 1581, 1582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1596, 0, 0, 0,
	1722, 1720, 1721, 1724, 1723, 0, 0, 0, 0, 1595,
	1580, 1585, 1568, 1605, 1604, 0, 0, 1570, 1569, 0,
	0, 0, 0, 0, 1614, 1613, 0, 0, 0, 0,
	0, 0, 0, 1573, 1574, 1575, 1576, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1594, 1577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1616, 0,
	0, 0, 0, 646, 1606, 677, 1602, 1601, 0, 0,
	0, 0, 0, 0, 0, 1571, 1600, 0, 1607, 1608,
	1609, 1610, 0, 0, 0, 653, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 0, 0,
	0, 0, 1578, 0, 1599, 1597, 1598, 1615, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 652,
	0, 0, 0, 0, 654, 0, 0, 0, 682, 0,
	0, 1579, 0, 0, 660, 661, 0, 0, 0, 672,
	0, 0, 1588, 1583, 1589, 1590, 1591, 1592, 1593, 0,
	1587, 0, 0, 678, 655, 0, 0, 0, 0, 1611,
	1612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 676,
	666, 0, 0, 0, 0, 0, 0, 0, 1572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1603, 0, 0, 0, 1581, 1582, 656, 0, 0,
	0, 0, 0, 650, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 657, 658, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 664, 0,
	0, 0, 0, 0, 0, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 663, 0,
	0, 0, 0, 0, 0, 1573, 1574, 1575, 1576, 0,
	679, 0, 0, 0, 0, 0, 0, 0, 0, 1594,
	1577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1571, 0, 0,
	1607, 1608, 1609, 1610, 0, 662, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1578, 0, 0, 0, 0, 1615,
	674, 0, 0, 0, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 648, 667, 680, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 649, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 670, 0, 0,
	668, 0, 0, 0, 683, 684, 0, 0, 0, 0,
	0, 681, 0, 0, 0, 0, 0, 0, 671, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 673,
}
var sqlPact = [...]int{

	538, -1000, 6, -1000, -1000, -1000, 265, -1000, -1000, -1000,
	-1000, 262, 261, 259, -1000, 257, 253, 250, 248, 246,
	238, 234, 232, 231, 229, 224, 223, -1000, -1000, 221,
	-1000, -1000, -1000, -1000, 217, 216, 213, -1000, 204, 1373,
	31000, 201, 200, 185, 1662, 48494, 1539, 181, 179, -1000,
	177, 1667, 35930, 1130, 1926, -1000, 176, 175, 1425, 48118,
	1538, 1908, 33644, 1371, 1886, 47736, 30618, 1872, 33262, 47354,
	-1000, -1000, 1094, -1000, -1000, 46972, 168, 167, 165, 164,
	154, -1000, 153, 46590, 152, 150, 147, 140, 135, 134,
	128, 125, -1000, 123, 122, 119, 117, 116, 115, 103,
	102, 101, 95, 93, 91, 86, 85, 80, 77, -1000,
	58481, 76, 74, 73, -1000, 1347, 72, 71, 69, 67,
	66, -1000, -1000, 65, 64, 63, 62, 61, 59, -1000,
	141, 58, 57, 55, 54, 53, -1000, 1163, 411, 2221,
	12706, 1253, 1247, 1237, 1228, 1230, 780, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51126, 48494, 52, -21, 51,
	-1000, 2327, 866, 23696, 538, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35548, 35166, 34784,
	29108, 46208, 45826, 9855, 9855, 959, -1000, -1000, -1000, -1000,
	-1000, 2, 32128, 48494, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 320, -1000, -1000, -1000, -1000, -1000, -1000, 19760,
	19341, 18922, 463, -1000, -1000, -1000, 319, -1000, -1000, -1000,
	-1000, 1282, -1000, -1000, -1000, -1000, 45444, 45062, 2153, 44680,
	28716, 28324, 44298, 1739, 1732, 43916, -1000, -1000, 43534, -1000,
	-1000, 2185, 1901, 1883, 34402, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 43158, 42776, 42394, 42012, 41630, 27932,
	27540, 616, -1000, -1000, -1000, -1000, 24842, -1000, -1000, -1000,
	-1000, -1000, 50, -1000, 49, 46, -1000, 44, 37, 36,
	35, 34, 32, 31, 26, -1000, 20, 19, -1000, 18,
	17, -1000, 14, 13, 1398, 1150, 1350, 41248, 1056, 2230,
	-1000, 1535, -30, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	48494, -1000, 20165, -1000, 615, -1000, 1861, -1000, 20165, -1000,
	1531, 194, 1395, -1000, -1000, -1000, 1344, 1061, -1000, -1000,
	48494, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2545, 1413,
	614, 40866, -1000, 1862, -1000, 739, 13516, -1000, 937, -1000,
	13516, 310, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1809, 1202,
	2477, 27148, 1415, 2350, 2148, 2542, 1647, 2138, 2116, 2064,
	2060, 2051, 2541, 1200, 2537, 1043, 884, 2536, 2019, 2006,
	2514, 1380, 877, 2532, 2528, 1967, 1860, -1000, -1000, -1000,
	-1000, 1084, -1000, -1000, -1000, -1000, -1000, -1000, 37434, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1163, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1648, 2283, 2283, 2283, 2380, 450, 445, -1000, 141,
	-1000, 1821, -1000, 1409, -1000, -1000, -1000, 57534, -1000, -1000,
	20165, 20165, 20165, 20165, 20165, 1323, -1000, -1000, -1000, 639,
	-1000, 605, 604, 11071, -1000, -1000, 2468, -1000, -1000, -1000,
	458, -1000, -1000, 20165, -1000, 309, -1000, -1000, -1000, -1000,
	603, 2517, -1000, 861, -1000, -1000, -1000, 720, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1921, 565, 563, -1000, 562,
	561, 560, -1000, -1000, -1000, 602, 600, 599, 598, 595,
	593, -1000, -1000, -1000, 1220, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 791, -1000, 791, 791,
	549, 549, 583, 582, 551, 580, -1000, -1000, 579, 549,
	578, 577, -1000, -1000, 576, 695, -1000, 692, 573, 571,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1498,
	-1000, -1000, 1498, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	958, 49998, -1000, -1000, -1000, 0, 48494, -1000, 463, 0,
	-1000, -1000, 569, -1000, 14340, 14340, 14340, -1000, -1000, 1523,
	20165, -1000, 2004, -1000, 439, -182, 568, 24460, 688, 688,
	-1000, 22550, 648, 26756, -1000, 565, 563, 562, 561, 560,
	-1000, 299, -1000, -1000, -1000, -1000, -1000, 1991, 2183, 961,
	-1000, 1190, 2181, -1000, 2328, 2178, 1169, -1000, -1000, 761,
	2164, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1346, -1000, -1000, 1591, 2161, -139, 1980, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1546, -1000, 29484, 32128, -1, -1000,
	-1000, -67, -1000, 9465, 57534, -1000, 57534, 751, -1000, 57534,
	744, -1000, 1857, 48494, 9855, 48494, 48494, -1000, 558, 1610,
	1518, -1000, -1000, 31752, 2328, 1609, -1000, -1000, 753, 1607,
	-1000, -1000, 1605, -1000, 463, -1000, -1000, 40484, 50750, 753,
	1603, -1000, -1000, -1000, 37434, -1000, 48494, -1000, 48494, -1000,
	1083, -1000, 50374, 157, 2149, -1000, -1000, 157, 2147, -1000,
	157, 2146, -1000, 144, 2143, -1000, -1000, 1474, 2134, -1000,
	-72, 2124, -1000, -1000, -72, 2122, -1000, -1000, 20165, -18,
	-1000, -1000, -1000, 866, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 40102, 29484, -1000, 31752, 48494, 34020, 786, 57534, 2438,
	58390, 29484, 57534, 31752, 48494, 1917, -1000, 39720, 39338, 2330,
	736, -1000, -1000, 48494, -1000, 20165, -1000, 2428, 1604, -15,
	-1000, -1000, -1000, -1000, -1000, 1644, 1653, 872, 1021, -1000,
	13516, 13516, 2226, -1000, 292, 9855, -1000, -1000, 1020, 1671,
	-1000, -1000, -1000, -1000, -1000, 38956, -1000, -1000, -1000, 1417,
	48494, -1000, -1000, 1910, -1000, 31376, 48494, -1000, 48494, -1000,
	48494, -1000, 48494, -1000, 48494, -1000, -1000, -1000, -1000, -1000,
	2030, 1227, 1905, -1000, 48494, -1000, 48494, -1000, -1000, -1000,
	1643, -1000, -1000, -1000, 38580, 38198, 37816, -1000, -1000, 1188,
	-1000, 1019, -1000, -1000, 161, -1000, -1000, 1648, -1000, 1418,
	1715, 18503, 1703, 20165, 141, -1000, -1000, 141, 141, 12287,
	-1000, -1000, -1000, 48494, -1000, 58148, 58390, 9855, 973, 20165,
	20165, 20165, 20165, 20165, 20165, 20165, 20165, 20165, 20165, 20165,
	20165, 20165, 20165, 20165, 20165, 20165, 20165, 20165, 20165, 20165,
	20165, 20165, 20165, 20165, 20165, 20165, 20165, 20165, 20165, 20165,
	20165, 20165, 20165, 20165, 1579, 20165, 957, 20165, 20165, 20165,
	20165, 1505, -1000, -1000, 1342, 481, 1377, -1000, 2491, 2491,
	2491, 57891, 57891, 564, 639, -1000, 20165, -1000, 129, 20165,
	445, 55194, 1, 10666, -1000, -1000, -1000, -1000, 18084, 787,
	57534, 9075, 10247, -1000, 2508, 997, 1890, 1801, 557, 746,
	742, 728, 717, 714, 20165, 20165, 20165, 20165, 20165, 20165,
	-1000, -1000, -1000, -1000, -1000, -1000, 2468, -1000, 17679, 17260,
	-1000, 2507, 16841, 16422, -1000, 16003, 21380, 15584, 971, 970,
	967, 966, 20165, 11476, -1000, -15, -1000, 49998, -1000, 48494,
	0, 2426, 20165, 146, -1000, 56113, -1000, 146, 146, 556,
	-20, 57534, 1692, 1687, 24078, 1630, 1381, 1381, 1381, -1000,
	555, 637, 688, 6716, 15165, 554, 688, 688, 195, 36306,
	1385, 36306, 317, 444, 22168, 2004, -1000, -1000, 48494, 9855,
	-12, 1286, -1000, 32880, 2329, 2297, 2243, 1065, -1000, 1036,
	2375, 37434, 2398, 129, 2307, 1855, -1000, -1000, 956, 37434,
	2328, -1000, 58390, -1000, 1768, 2374, 1051, 1075, 1051, 1051,
	1054, 37434, 955, 1300, 29484, 2305, 954, -13, 2393, 129,
	2285, 1854, 951, -1000, -1000, 48494, 9855, 2272, 1018, 684,
	-1, 32128, 48494, 284, -1000, 20165, 20165, 1032, -25, 283,
	1700, 1698, 195, -1000, 32504, 2424, 2113, 48494, 950, -1000,
	2328, 2112, -1000, 1271, -1000, 2103, 2097, 2421, 1509, 1602,
	-1000, -1000, -1000, 1506, 1599, 983, 2093, 764, 434, 2414,
	434, 25992, -1000, 48494, -1000, 48494, -1000, -1000, 48494, -1000,
	48494, -1000, 48494, -1000, 48494, 48494, -1000, 48494, 29484, 29484,
	29484, -27, 3482, 30236, 748, 949, -28, -1000, 818, 32504,
	416, -41, -1000, 1012, -1000, -1000, -1000, 242, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 791, 552, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 551,
	1220, 549, 549, 549, -1000, -1000, -1000, 695, -1000, 692,
	-1000, -1000, -1000, 791, 791, -1000, -1000, -177, 1853, -67,
	34020, 684, -1000, 684, -1000, 1884, -1000, 2320, 708, -42,
	857, -15, -1000, 1498, -1000, 1112, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2515,
	-1000, 2500, -1000, -1000, 2502, -2, -1000, -2, -1000, 9855,
	-1000, 48494, 1881, -1000, -1000, -1000, -1000, -1000, -1000, 48494,
	-1000, 48494, -1000, -1000, -1000, -1000, -1000, -1000, 308, -1000,
	1875, -1000, 3482, 281, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 48494, 48494, 48494, -1000, 37434, -1000, -1000, -1000,
	-1000, 57534, -1000, 441, -1000, -1000, 57534, 1120, 1707, -1000,
	1707, -3, -1000, 56041, 1675, 48494, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 735, 715,
	715, 953, 953, 953, 953, 2451, 219, 297, 860, 5537,
	5537, 5537, 5537, 5537, 5537, 5537, 5537, 2969, 704, 704,
	2969, 2969, 2969, 2969, 2969, 704, 704, 704, 5537, 5537,
	5537, 57891, 57606, 3015, 20165, 20165, 946, 1332, 481, 3015,
	20165, 3015, 3015, 3015, 3015, -1000, 1284, -1000, -1000, -1000,
	-1000, 1850, 546, 21380, 21380, -1000, -1000, -1000, 11071, 20165,
	-1000, -1000, -1000, -1000, 545, 20165, -1000, 55331, -231, 443,
	-171, 276, 20165, 636, -43, -1000, 1030, -1000, 20165, 273,
	-1000, -1000, -16, 20165, 20165, 20165, 442, -1000, 436, -1000,
	945, -1000, 943, 942, 940, -1000, 544, 1376, 543, 542,
	20165, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 57249, 52240, 51924, 51886, 6104, -47, -50, 430, -1000,
	1843, -171, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 429,
	-1000, 428, -52, -1000, -66, -1000, 427, -1000, 57112, -171,
	426, 3946, -1000, 21380, 21380, 21380, 11071, 537, 425, -1000,
	55756, -1000, 730, 729, 725, 712, 56827, 14746, 14746, 14746,
	421, 56755, 20165, -171, -1000, -1000, 530, -69, 764, 14340,
	23314, 9855, -1000, 764, 764, 20165, -1000, 20165, 24078, 24078,
	1592, 1685, 24078, -1000, -1000, -1000, -1000, 36306, 689, 688,
	36306, -1000, 2468, 1686, -1000, 419, -1000, 13935, 36306, 36306,
	9855, -1000, -1000, 48494, 463, -1000, -1000, 688, 418, 270,
	1168, 48494, 48494, 48494, -1000, -1000, 1598, 49622, 1596, 58390,
	48494, -1000, -1000, 528, 527, 1673, 1668, 48494, 48494, 49246,
	48870, 48494, 1263, 20165, 1508, 1695, 129, -1000, 709, 526,
	48494, 1157, -1000, -1000, -1000, -1000, -1000, 48494, -1000, -1000,
	2498, -1000, 1051, -1000, -1000, -1000, 1051, 2328, 1153, 48494,
	29484, 760, 705, 48494, 1229, 129, -1000, 703, 516, 9855,
	1222, -1000, 700, 48494, 1784, -1000, 1545, -1000, -1000, 8685,
	57534, 57534, -1000, -1000, 9855, 1781, 1781, 414, -4, -1000,
	-1000, -1000, -1000, -1000, -1000, 1730, 48494, 626, 48494, 129,
	48494, 143, 2519, 48494, 29484, 29484, 29484, 129, 48494, 2090,
	48494, 2080, 2068, 660, 48494, 1387, 20165, 1218, -1000, 25224,
	808, 48494, 1118, 127, -1000, -1000, -1000, 29, 48494, -1000,
	-1000, 157, 157, 157, -1000, 144, 1474, -1000, -72, -72,
	-1000, -1000, -1000, 1838, 37058, 48494, 2449, 29484, -71, -1000,
	821, 922, 919, -1000, 58390, -1000, 627, 924, -1000, 2496,
	514, 2468, -1000, 748, 48494, 97, -1000, 759, 1519, -1000,
	13516, 13516, -1000, 1498, -1000, -1000, 1154, -1000, 1204, -1000,
	-1000, -1000, -1000, 13516, -1000, -1000, 1017, -67, -67, -1000,
	-1000, 295, -1000, 48494, -1000, -1000, -1000, -1000, 1120, -1000,
	20165, -1000, -1000, -1000, 12287, -1000, -1000, -1000, 48494, -150,
	20165, 3015, 3015, 20165, 21380, 21380, -1000, 3015, -1000, -1000,
	-1000, -1000, -1000, 1837, 513, 20165, 58390, 3871, 3733, -74,
	2969, 20165, -7, -1000, 20165, -1000, 8295, 54909, -1000, -1000,
	531, 2033, -1000, 20165, 56470, 7905, 408, 13111, -1000, 56398,
	-33, -33, -1000, 2513, 1623, 1314, 1203, 1073, 2488, -1000,
	26374, 766, 1387, 54772, 58148, 58390, 20165, 20165, 20165, -1000,
	-1000, 2468, -1000, 20165, -1000, -1000, -1000, -1000, -1000, 1832,
	20165, -1000, 58148, 58390, 21380, 21380, 21380, 21380, 21380, 21380,
	21380, 21380, 21380, 21380, 21380, 21380, 21380, 21380, 21380, 21380,
	21380, 21380, 21380, 1683, 21380, 2489, 2489, 2489, -11, 20165,
	-1000, 1873, 1832, 20165, 20165, -1000, -1000, -1000, -1000, 58390,
	399, 398, 397, -1000, 20165, -171, 416, -1000, 1798, -1000,
	-92, -1000, 2004, -1000, -1000, 1798, 1798, -79, 57534, -1000,
	1592, -1000, 512, 20165, 24078, -1000, 634, -1000, -87, -1000,
	36306, -1000, 630, -228, -1000, 678, -1000, 688, 393, -1000,
	-1000, -1000, 269, 463, -1000, 36306, -1000, 9855, -1000, -1000,
	938, 935, -1000, 2066, -1000, 1585, -1000, 812, -1000, 1161,
	20165, 22932, 511, 510, 1301, -1000, 2052, 1474, 2050, 1474,
	-1000, -1000, 745, -1000, 57534, 508, 507, -1000, -12, 1179,
	-1000, 25616, 20165, -1000, 932, -1000, -1000, -1000, 2328, 931,
	-1000, -1000, 1254, 25616, -1000, -1000, -1000, 25616, 20165, -1000,
	-13, 929, 25616, 1971, 748, 1824, 1013, -1000, -1000, -1000,
	-1000, -1000, -1000, 1724, 32504, 48494, 503, 48494, 502, -1000,
	-1000, 501, 48494, 684, 2328, -1000, 753, -1000, -1000, 816,
	9855, 499, 9855, 1654, 660, 29860, -1000, 753, 1715, -1000,
	57534, -1000, 1118, 11881, 2263, -94, -1000, 267, -1000, -1000,
	-1000, 764, 25992, 24078, 20165, 2524, -95, -1000, -1000, -1000,
	-1000, -1000, 129, -14, 497, -1000, 677, 676, -67, 1394,
	2230, 2230, -1000, 2485, -1000, 629, 392, 2468, 391, -1000,
	-67, 48494, -1000, 1392, 9855, 48494, 48494, 9855, 48494, -1000,
	-1000, -15, -1000, -1000, -1000, -1000, 48494, -1000, -1000, -1000,
	1408, 54487, -1000, 2292, 9855, 2404, 3015, 3443, 3234, 20165,
	58390, 57963, -96, 20165, 20165, -1000, 388, 20165, 619, 57534,
	-1000, -1000, -1000, -1000, -1000, 57534, 20165, 243, -1000, 2512,
	20165, 387, 385, 384, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 383, -1000, -1000, 51502, -1000, 20165, 380, -1000,
	379, 378, 5965, 54350, 54065, 376, 57534, 1873, 57534, -1000,
	-1000, 732, 732, 1045, 1045, 1045, 1045, 2489, 350, 628,
	529, 596, 596, 596, 374, 540, 540, 596, 596, 596,
	1822, 1690, 496, 4105, 20165, 371, -1000, -1000, 57534, 57534,
	356, -1000, -1000, -1000, -171, 354, 1795, 2373, -1000, 24078,
	1795, 1795, -1000, -1000, 48494, 57534, -1000, -182, -1000, 2468,
	-1000, -1000, 1686, -1000, 7120, 36306, 688, 9855, -1000, -1000,
	162, 48494, 48494, 48494, 2020, -1000, 2815, -1000, 53928, -102,
	-1000, 2346, 2346, 20165, 195, -1000, -1000, 495, 22932, 48494,
	-1000, 1710, 1716, 832, 48494, -1000, 48494, -1000, -1000, 48494,
	48494, 48494, 48494, 48494, -1000, 493, -103, 48494, 48494, 29484,
	-1000, -1000, -105, 9855, -1000, 2269, -1000, 29484, 923, 1229,
	1766, -1000, 491, 22932, 488, 48494, 32504, 2412, -1000, 748,
	-1000, -1000, 487, 1808, 1504, 22932, 1444, 1658, 660, 29860,
	-1000, 983, 1118, -1000, -1000, -17, -1000, 539, 129, 48494,
	2523, 1387, -1000, -44, 57534, -1000, 673, -1000, 36682, 36682,
	29484, 29484, -1000, 2212, 2211, 618, -1000, -1000, 353, -1000,
	-67, 1601, -1000, -1000, 1285, 1510, -1000, -1000, -1000, -1000,
	-1000, 2292, 20165, 20165, 57963, -108, -1000, 3015, 3015, -1000,
	53643, -1000, 57534, 7515, -1000, 56398, -1000, -1000, -1000, -1000,
	1316, -1000, 53506, -1000, -1000, -1000, 20165, -1000, -1000, -1000,
	-1000, 21380, 1814, 485, 58390, 53221, -1000, -1000, -1000, 747,
	20165, 20165, 2004, 747, 747, -111, 688, -1000, -1000, -1000,
	2468, -1000, 36306, 162, 9855, -1000, -1000, -1000, 48494, -1000,
	48494, -1000, 9855, 48494, 1806, 1570, -1000, -1000, 1666, 482,
	21380, 48494, 765, -1000, 1290, 22932, 2292, 9855, 2292, 53084,
	10247, -116, -118, 1560, -1000, 1556, 20165, -1000, 58390, 1474,
	1474, -119, -124, -1000, 908, 906, 20165, 902, -1000, -1000,
	-1000, 900, -1000, 698, -72, 25616, -1000, -1000, 1256, 22932,
	-126, 22932, -135, 352, 129, -1000, 22932, -1000, 48494, -137,
	48494, -1000, 660, 29860, -1000, 2068, -1000, 2194, 48494, 2238,
	-1000, -1000, -1000, 1715, 481, -1000, -140, -1000, -1000, 480,
	478, -1000, -1000, -86, -1000, 763, 750, -1000, -1000, -1000,
	9855, 988, -1000, 3015, 3015, -1000, -1000, -1000, -1000, 351,
	1387, 2371, -1000, 52799, 4406, 21380, 58390, -143, -1000, -1000,
	48494, 57534, -171, -1000, -1000, -1000, 36306, 541, -1000, -1000,
	1478, -1000, -1000, -1000, 48494, 1578, -1000, -1000, 20165, 4105,
	477, 20165, -1000, 1724, 476, -1000, -1000, -1000, -1000, -1000,
	-1000, 2346, -16, -1000, 1198, -1000, -1000, 57534, 2338, -1000,
	-1000, 475, 472, 48494, 48494, -33, 470, 469, 25616, -1000,
	48494, -146, 1290, -151, -1000, 1724, -1000, -153, 816, -1000,
	468, 29860, -1000, 1654, 969, -154, 48494, 1118, -1000, -1000,
	29484, 29484, 1601, -1000, 48494, -1000, 48494, -1000, 48494, -1000,
	1177, 20165, -1000, 4406, -156, -1000, -125, -1000, 2411, -1000,
	-1000, -1000, -1000, 2002, 52662, 1629, 48494, 52377, 1229, 48494,
	2292, 349, 48494, 815, 9855, 1285, 1285, -1000, -1000, 346,
	20165, 20165, -1000, 467, -1000, 1724, 1290, 1229, 1290, 465,
	22932, -1000, 1658, 1064, -1000, 764, -1000, -1000, -159, -164,
	-1000, -165, -170, -1000, 334, 20975, 20975, -171, -1000, 48494,
	464, 1959, -1000, 1419, 1313, 329, 826, -1000, -172, -1000,
	-1000, 463, -1000, 20165, -1000, -175, -1000, 807, -183, -1000,
	798, 2512, -185, -186, 48494, 1229, 1724, -1000, 1724, 22932,
	-193, -1000, 25992, -1000, 748, 748, -1000, -1000, -1000, -1000,
	-1000, 21770, 1353, 1105, 55619, -1000, -1000, -1000, 48494, -1000,
	1441, 1421, 1098, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1629, 57534, -1000, 1285, 1759, -1000, 1285, 1811, -1000, -1000,
	-194, -1000, 1229, 1229, -196, -1000, -188, -1000, -1000, 2443,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2199, -1000, 837,
	1468, 1468, 1419, -1000, 461, -1000, 459, 1469, -1000, -1000,
	1290, -1000, 20570, -1000, 2452, -1000, -1000, 1711, -1000, -1000,
	20165, 20165, -1000, -1000, -1000, 1724, -1000, -1000, -1000, -1000,
	-199, -201, 1229, 1229, 879, -1000, -1000, 457, 20165, -210,
	1229, -1000,
}
var sqlPgo = [...]int{

	0, 3047, 3046, 1893, 3042, 2412, 3041, 3037, 3032, 3030,
	3021, 2379, 3019, 3017, 3016, 3014, 3012, 3002, 3000, 2999,
	2998, 2996, 2995, 2992, 2991, 2988, 2987, 2986, 2977, 2976,
	2975, 2973, 2371, 2971, 2362, 2968, 2966, 2965, 2964, 2961,
	2960, 2959, 2958, 23, 2957, 2954, 2952, 2945, 2346, 2944,
	2940, 2338, 2935, 2934, 2323, 2932, 2931, 2930, 2314, 2276,
	2928, 2926, 2273, 2923, 2920, 2270, 2918, 2254, 2916, 2915,
	2252, 2910, 100, 122, 2906, 2250, 2905, 2899, 2241, 2232,
	2220, 2898, 2218, 2897, 2896, 2213, 2200, 2892, 119, 2889,
	2884, 2883, 2879, 2155, 2145, 2876, 2874, 2870, 178, 2869,
	2054, 2868, 2864, 2863, 2862, 2860, 2858, 2856, 2855, 2854,
	2853, 2850, 2846, 2841, 2840, 2836, 2833, 2827, 2826, 2825,
	2824, 2821, 2819, 2818, 2817, 2815, 2814, 188, 115, 2812,
	2811, 1988, 1898, 2810, 2806, 42, 52, 19, 59, 134,
	180, 3920, 169, 2805, 2803, 2794, 2793, 2792, 2791, 43,
	126, 128, 125, 116, 2789, 64, 2787, 2786, 61, 38,
	24, 20, 75, 2785, 2782, 2777, 2119, 83, 2776, 2775,
	175, 168, 2774, 435, 37, 93, 104, 95, 103, 45,
	2770, 98, 17, 2766, 123, 118, 2765, 56, 36, 26,
	3734, 147, 72, 117, 176, 174, 155, 150, 130, 192,
	2764, 181, 73, 152, 2763, 2761, 2760, 54, 145, 3,
	2, 140, 10, 2759, 9, 2757, 11, 2755, 2754, 2751,
	2750, 32, 109, 44, 50, 2745, 81, 78, 137, 2738,
	153, 2737, 65, 179, 148, 1, 97, 2736, 94, 15,
	79, 2732, 2729, 88, 164, 2728, 31, 135, 82, 91,
	191, 160, 87, 151, 162, 2727, 2719, 2716, 129, 2714,
	144, 96, 2713, 2711, 111, 27, 2709, 34, 165, 35,
	2708, 2707, 106, 2697, 149, 2693, 2690, 187, 108, 136,
	5, 58, 85, 7, 159, 102, 77, 68, 2689, 3290,
	1476, 1264, 57, 2686, 121, 62, 30, 90, 101, 172,
	33, 2684, 2683, 163, 2682, 2673, 2672, 2671, 2666, 131,
	2658, 2657, 2654, 89, 47, 154, 2652, 105, 39, 190,
	157, 141, 184, 124, 2643, 138, 80, 146, 2636, 51,
	2630, 1200, 2621, 143, 2615, 2612, 2611, 2607, 92, 2606,
	2605, 2598, 442, 2593, 99, 2592, 139, 133, 127, 107,
	114, 171, 177, 55, 2591, 142, 25, 2589, 161, 21,
	0, 3688, 3272, 2588, 156, 86, 2586, 2585, 2584, 2583,
	29, 13, 6, 8, 14, 12, 110, 40, 74, 2582,
	2581, 71, 112, 2580, 186, 158, 2579, 2578, 2576, 48,
	2575, 18, 2569, 16, 2567, 2564, 22, 4, 2563, 2562,
	170, 2561, 2560, 2558, 2397, 2557, 185, 2556, 2552, 2551,
	1998, 2549, 2548, 49, 28, 132,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 406, 406, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 151,
	151, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 405,
	405, 153, 153, 152, 148, 148, 155, 155, 155, 157,
	157, 154, 154, 147, 147, 32, 32, 86, 86, 86,
	138, 79, 79, 79, 74, 74, 358, 358, 359, 359,
	134, 134, 135, 135, 135, 135, 136, 136, 137, 137,
	137, 46, 34, 34, 34, 34, 34, 34, 34, 35,
	35, 36, 36, 36, 37, 37, 37, 44, 44, 128,
	128, 47, 47, 47, 47, 47, 47, 47, 47, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 58, 58, 56, 59, 59, 60, 60,
	60, 60, 60, 60, 61, 61, 61, 61, 61, 61,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	68, 68, 68, 69, 69, 69, 66, 66, 66, 64,
	64, 64, 63, 63, 63, 67, 67, 67, 65, 65,
	65, 234, 234, 70, 70, 70, 70, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 73, 73, 73, 73, 73, 73, 73,
	73, 328, 328, 71, 71, 301, 301, 75, 75, 259,
	259, 76, 76, 76, 76, 76, 77, 77, 77, 77,
	87, 87, 87, 87, 404, 404, 228, 228, 170, 170,
	170, 170, 82, 82, 82, 82, 83, 83, 83, 84,
	84, 133, 133, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 38, 38, 38, 39, 39, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 43, 43, 94,
	94, 94, 96, 93, 93, 93, 95, 95, 95, 95,
	97, 97, 98, 98, 98, 98, 98, 98, 99, 99,
	352, 352, 237, 237, 350, 350, 351, 351, 205, 205,
	205, 205, 205, 206, 206, 206, 357, 357, 357, 357,
	357, 357, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 118, 118, 118, 127, 127, 127, 127,
	127, 127, 127, 120, 120, 120, 111, 111, 101, 101,
	107, 107, 107, 107, 107, 102, 102, 108, 108, 110,
	110, 112, 112, 112, 112, 112, 112, 103, 103, 103,
	103, 114, 114, 114, 114, 113, 113, 123, 123, 123,
	123, 123, 123, 123, 316, 316, 119, 119, 119, 119,
	122, 122, 122, 122, 117, 117, 117, 121, 121, 124,
	124, 124, 124, 104, 104, 105, 105, 106, 106, 125,
	125, 116, 116, 126, 126, 126, 126, 126, 126, 126,
	115, 115, 115, 407, 407, 109, 402, 402, 400, 400,
	400, 400, 400, 400, 400, 401, 401, 403, 403, 80,
	80, 52, 52, 53, 53, 207, 207, 208, 208, 282,
	282, 282, 282, 209, 209, 156, 156, 156, 212, 213,
	213, 210, 210, 211, 211, 211, 215, 215, 214, 217,
	217, 216, 281, 368, 368, 369, 369, 369, 369, 369,
	369, 369, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 366, 366, 366, 367, 364, 364, 365, 365,
	365, 365, 408, 408, 280, 280, 221, 221, 371, 371,
	371, 371, 372, 372, 372, 372, 372, 375, 374, 373,
	373, 373, 373, 373, 312, 312, 312, 57, 57, 57,
	248, 248, 247, 247, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 130, 130, 54,
	54, 54, 162, 162, 51, 51, 51, 55, 55, 50,
	50, 50, 50, 50, 265, 265, 263, 263, 226, 226,
	318, 318, 318, 174, 174, 149, 149, 149, 20, 22,
	22, 16, 16, 16, 16, 16, 16, 29, 29, 30,
	30, 26, 26, 264, 264, 266, 266, 81, 81, 85,
	85, 91, 91, 129, 129, 129, 129, 129, 129, 129,
	33, 33, 33, 33, 45, 45, 45, 45, 89, 411,
	411, 411, 90, 90, 410, 410, 169, 169, 169, 169,
	171, 171, 277, 277, 278, 278, 412, 412, 279, 279,
	279, 164, 163, 165, 165, 49, 49, 49, 158, 158,
	159, 159, 160, 160, 161, 161, 413, 413, 78, 78,
	78, 132, 132, 201, 201, 274, 274, 274, 222, 222,
	179, 179, 276, 276, 275, 275, 275, 246, 246, 246,
	131, 131, 231, 231, 239, 239, 240, 240, 324, 324,
	241, 88, 88, 141, 141, 139, 139, 139, 139, 139,
	139, 140, 140, 140, 142, 142, 142, 142, 142, 142,
	142, 145, 145, 145, 145, 146, 146, 146, 144, 144,
	382, 382, 382, 384, 384, 385, 381, 381, 383, 383,
	409, 409, 250, 250, 250, 219, 220, 218, 218, 414,
	414, 224, 224, 223, 225, 225, 317, 317, 317, 244,
	244, 244, 244, 269, 269, 267, 267, 268, 268, 270,
	270, 271, 271, 271, 272, 272, 273, 273, 243, 243,
	297, 297, 143, 143, 143, 230, 230, 230, 232, 232,
	287, 287, 287, 288, 288, 286, 286, 286, 286, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 398, 398, 398, 399, 399, 315, 315, 320,
	320, 320, 320, 320, 320, 313, 313, 314, 314, 325,
	326, 326, 253, 253, 253, 253, 251, 251, 252, 252,
	321, 321, 321, 321, 245, 245, 322, 322, 322, 283,
	283, 329, 329, 329, 344, 344, 229, 229, 229, 339,
	339, 330, 330, 330, 330, 330, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 333, 333,
	333, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 343,
	343, 343, 343, 343, 334, 334, 340, 341, 335, 336,
	342, 342, 342, 342, 346, 346, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 338, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	261, 261, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 291, 291, 291, 291, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 376,
	376, 376, 376, 376, 376, 376, 376, 379, 379, 380,
	380, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 386, 386, 387, 387,
	389, 389, 390, 390, 391, 392, 392, 392, 393, 394,
	394, 388, 388, 395, 395, 395, 396, 396, 397, 397,
	397, 397, 397, 303, 303, 304, 305, 311, 311, 311,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 172, 172, 172, 172,
	172, 236, 236, 235, 235, 300, 300, 298, 298, 302,
	302, 254, 254, 345, 345, 345, 345, 345, 345, 345,
	255, 255, 255, 262, 256, 256, 257, 257, 257, 257,
	257, 294, 295, 258, 258, 258, 296, 296, 306, 310,
	310, 309, 308, 308, 307, 307, 284, 284, 285, 285,
	242, 242, 415, 415, 238, 238, 323, 323, 323, 323,
	203, 203, 233, 233, 202, 202, 196, 196, 197, 197,
	197, 197, 227, 227, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 347, 347, 347, 348, 349,
	299, 189, 188, 176, 177, 187, 186, 185, 175, 178,
	182, 183, 184, 180, 181, 192, 191, 190, 327, 198,
	198, 199, 199, 199, 200, 200, 200, 200, 173, 173,
	193, 193, 194, 195, 195, 166, 166, 166, 167, 167,
	168, 168, 356, 356, 354, 354, 354, 355, 355, 355,
	355, 353, 353, 353, 353, 353, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 2, 0, 7, 2, 5, 6, 2,
	1, 12, 12, 2, 7, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 5, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 3, 5, 3, 3, 5, 3, 6, 6, 1,
	1, 1, 2, 1, 2, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 1, 7, 3, 8, 8, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 2, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 3, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 3, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 2, 1, 3, 1, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 5, 7, 3, 3, 3, 3, 3,
	4, 4, 3, 4, 4, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 2, 3, 3, 3, 2, 3, 5, 4, 6,
	4, 5, 6, 5, 1, 0, 2, 3, 3, 3,
	6, 4, 2, 3, 4, 2, 3, 3, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 4, 4, 2,
	3, 2, 3, 7, 7, 8, 10, 7, 4, 5,
	5, 5, 3, 1, 1, 5, 2, 0, 1, 1,
	1, 1, 3, 2, 2, 2, 1, 2, 0, 3,
	2, 8, 11, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 2, 1,
	0, 1, 0, 9, 9, 3, 1, 3, 7, 1,
	3, 11, 3, 2, 0, 3, 1, 2, 2, 3,
	2, 6, 2, 1, 1, 2, 4, 2, 5, 5,
	5, 2, 8, 9, 6, 5, 3, 1, 4, 7,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 7, 3,
	1, 0, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 4, 2, 4,
	7, 3, 3, 0, 3, 6, 3, 6, 3, 13,
	16, 9, 12, 4, 2, 0, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 0, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 4, 3, 0, 2, 2, 0,
	10, 3, 2, 0, 1, 3, 1, 1, 3, 3,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 5, 1, 0, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 7, 3, 4, 3, 4, 3, 4, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 3, 2, 1, 0, 5,
	1, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 5, 2, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 1, 1, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	5, 5, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 8, 6, 6, 4, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 5, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	1, 2, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 3, 1, 1, 1, 1, 5,
	3, 1, 1, 3, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 7, 1, 7, 5, 3, 1, 1,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 419, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 76, 64, -54, -51, -48,
	-58, 78, 99, -383, 103, -62, -65, -67, 107, 116,
	121, 122, 145, 154, 254, 261, 282, 284, 286, 295,
	-40, -39, 117, -139, -141, 280, -83, -84, -93, -94,
	-95, -96, -133, 313, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	316, -33, -45, -90, -89, 361, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-382, -63, -64, -66, -68, -69, -142, -140, 416, 281,
	370, 37, 325, 65, 111, 290, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 387, 395, -145, -143, -144,
	-146, 302, 378, 338, 420, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 2, 338, 381, 303,
	371, 92, 165, 266, 252, -400, 2, 4, -362, -360,
	-197, -196, 338, 92, 30, 38, 39, 41, 44, 54,
	55, 56, 59, 96, 97, 114, 123, 124, 134, 147,
	149, 157, 158, 172, 178, 180, 200, 229, 231, 244,
	248, 258, 260, 268, 292, 319, 334, 350, 351, 352,
	358, 359, 378, 379, 383, 390, 20, 21, 22, 23,
	25, 35, 36, 37, 40, 42, 43, 46, 47, 48,
	49, 50, 51, 58, 63, 64, 65, 66, 67, 72,
	69, 70, 71, 74, 76, 77, 80, 81, 82, 90,
	91, 93, 94, 95, 99, 101, 103, 106, 107, 109,
	110, 116, 117, 120, 115, 118, 344, 346, 119, 121,
	122, 132, 133, 135, 136, 138, 140, 144, 146, 151,
	152, 153, 154, 155, 156, 166, 161, 167, 171, 174,
	173, 175, 176, 177, 168, 182, 185, 186, 187, 189,
	190, 193, 194, 195, 198, 197, 202, 203, 206, 207,
	210, 212, 215, 216, 219, 217, 218, 221, 222, 224,
	223, 230, 232, 233, 235, 236, 239, 240, 243, 246,
	249, 250, 251, 252, 253, 254, 255, 257, 259, 261,
	263, 264, 265, 266, 267, 269, 270, 272, 273, 274,
	275, 276, 280, 278, 279, 281, 282, 283, 284, 286,
	288, 289, 290, 291, 293, 314, 315, 327, 295, 296,
	297, 298, 299, 300, 301, 305, 309, 306, 307, 308,
	303, 304, 310, 311, 313, 316, 318, 320, 321, 324,
	325, 326, 328, 331, 332, 333, 329, 330, 323, 336,
	337, 339, 340, 341, 342, 343, 345, 347, 348, 353,
	356, 357, 361, 362, 363, 364, 367, 368, 369, 374,
	370, 372, 375, 376, 377, 382, 388, 389, 391, 392,
	393, -195, -166, 409, -194, 419, 419, 419, 2, 186,
	265, 310, -190, -193, -194, -195, -166, 4, -360, -362,
	92, 237, 419, 419, 419, 2, 338, 326, 115, 303,
	371, 288, 381, -263, 182, 92, 366, -166, 261, 24,
	2, 101, 171, 369, 368, 24, 257, 304, 340, 342,
	2, 419, 419, 2, 381, 303, 338, 165, 92, 371,
	288, -184, 2, -166, -73, 2, 416, -72, -5, -48,
	-58, -62, -75, -70, -11, -32, -34, -54, -51, -59,
	-65, -67, -79, -78, -80, -82, -86, -85, -88, -93,
	-94, -100, -131, -132, 78, 25, 107, 313, 117, 181,
	2, -404, -228, 2, 24, -170, -166, 78, 145, 302,
	338, 2, 186, 2, -184, 2, -400, 2, 186, 2,
	-404, -228, 23, 2, -166, 2, 299, 316, -171, 2,
	295, -166, 419, 419, 419, 419, 419, 419, 207, 58,
	292, 310, -98, 357, -97, 350, 297, -99, -352, 2,
	219, -166, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 2, -127, 310, 326,
	152, 36, 58, 24, 63, 93, 146, 165, 166, 194,
	73, 74, 264, 207, 187, -316, 119, 311, 339, 298,
	336, 357, 78, 372, 289, -407, 118, 4, 92, 219,
	312, 350, 67, 343, 344, 419, 419, 419, -409, 2,
	338, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, -140, -142, -141, 419, 419, 419, 419, 419,
	-223, -224, 365, 179, 113, 242, -139, -141, 2, -382,
	-127, 310, 2, 58, 24, -350, 2, -289, 237, -291,
	407, 408, 402, 225, 394, -303, 98, 214, 213, -293,
	-306, 114, 292, 416, -200, -292, 422, 9, -379, -141,
	31, -304, -305, 52, -198, -166, 7, 8, 5, 6,
	-173, -331, -299, -338, 360, 125, 228, -376, -377, -199,
	4, -360, -354, -332, -341, -336, -337, -339, 42, 48,
	47, 347, 218, 305, 306, 307, 308, 320, 374, 161,
	40, 235, 236, 173, 180, 61, 84, 85, 83, 88,
	87, 89, 86, 312, 371, 53, 30, 157, 229, 158,
	59, -378, 43, 94, 106, 135, 136, 174, 175, 176,
	177, 189, 190, 330, 353, 39, 41, 44, 54, 55,
	96, 97, 123, 124, 134, 147, 172, 178, 200, 231,
	248, 258, 268, 319, 334, 350, 351, 352, 358, 359,
	379, -361, -342, 79, 126, 143, 170, 159, 183, 184,
	188, 201, 204, 220, 227, 245, 247, 287, 317, -410,
	2, 357, 357, 2, -410, 2, -410, 2, -169, 2,
	357, 354, -411, 357, 390, -384, 269, -385, -184, -384,
	419, 419, 421, 419, -218, -219, -220, 2, 24, 104,
	416, 2, -319, 2, 414, -321, -173, 196, -378, -141,
	-320, 416, -190, 238, -199, 84, 85, 88, 87, 89,
	4, -166, 61, 214, 213, -3, 2, -321, 157, -190,
	2, -321, 157, 2, -191, 157, -321, -193, 2, -358,
	157, -356, 9, -355, 5, 4, -360, -362, -361, 2,
	-175, -166, 2, -202, 157, -190, -187, -353, 4, -360,
	-362, -361, -363, 24, 26, 27, 28, 29, 31, 32,
	33, 34, 45, 52, 53, 57, 60, 62, 73, 78,
	83, 84, 86, 85, 87, 88, 89, 98, 100, 102,
	104, 105, 108, 111, 113, 125, 127, 139, 141, 142,
	145, 148, 150, 160, 165, 169, 179, 181, 196, 199,
	205, 208, 209, 225, 226, 228, 234, 237, 238, 241,
	242, 256, 262, 271, 285, 302, 312, 322, 335, 338,
	349, 354, 355, 360, 365, 366, 371, 373, 380, 381,
	384, 385, 386, 387, -188, -353, 354, 421, -233, -196,
	-197, -227, -166, 418, -289, 2, -289, 157, 2, -289,
	157, 2, -221, 416, 418, 338, 62, 2, -190, 157,
	-180, 2, -166, 109, -191, 157, 2, -193, -358, 157,
	2, -358, 157, 2, -192, 2, -190, 165, 165, -175,
	157, 2, -166, 24, 142, 2, 181, 2, 181, 2,
	-322, 2, -321, -234, 157, 2, -190, -234, 157, 2,
	-234, 157, 2, -203, 157, 2, -202, -175, 157, 2,
	-359, 157, 2, -358, -359, 157, 2, -259, 416, -328,
	2, -327, -355, 378, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 310, -138, 80, 237, 354, 421, -190, -289, -301,
	416, 142, -289, 237, 142, 239, 2, 92, 338, 393,
	24, -166, 2, 314, 2, 416, -98, 56, 357, -278,
	2, -279, -163, -164, -165, 185, 263, 267, 393, -350,
	354, 399, 142, -350, -237, 418, -127, 2, 139, 373,
	2, 7, 2, -358, 2, 314, 2, 264, 311, 58,
	142, 2, 2, -402, 2, 237, 142, 2, 142, 2,
	142, 2, 142, 2, 142, 2, 2, 264, 311, 2,
	356, 195, 356, 2, 142, 2, 142, 2, 5, 2,
	185, 263, 327, 2, 338, 381, 303, 2, 2, 142,
	2, 142, 393, 2, -245, -321, -223, -224, -244, -267,
	-268, 205, 127, 234, -250, 24, 104, -250, -250, 46,
	417, 417, -127, 314, 2, 10, 11, 60, 35, 407,
	408, 409, 410, 137, 411, 412, 405, 406, 404, 397,
	398, 401, 191, 192, 75, 400, 399, 68, 211, 294,
	128, 129, 130, 131, 277, 162, 163, 164, 13, 14,
	15, 28, 241, 204, 394, 159, 317, 402, 16, 17,
	18, 183, 184, 227, 38, 160, -172, -204, -289, -289,
	-289, -289, -289, 247, -242, -284, 414, -141, 416, 416,
	-141, -289, -235, 416, -349, 7, -141, -298, 414, -307,
	-289, 418, 416, 5, 416, 5, -386, 388, 139, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	260, -346, 382, -346, -346, -333, 416, -333, 416, 416,
	-334, 416, 416, 416, -333, 416, 416, 416, 389, 395,
	389, 395, 416, 416, -277, -278, -277, 354, -171, 421,
	-384, -221, 416, -238, -323, -289, 409, -238, -238, 237,
	-235, -289, 79, -253, 188, 220, 143, 201, 287, 170,
	-349, -73, -286, 422, 416, -173, -378, -141, -166, -315,
	395, -315, -141, -320, 416, -319, 409, -190, 416, 418,
	-151, 278, -150, 22, 25, 107, 376, 120, -211, 167,
	252, 114, 323, -406, 117, 296, 345, 346, 278, 114,
	-247, -249, 32, 90, 222, 249, 49, 155, 213, 214,
	325, 114, 278, 387, 114, 117, 278, -153, 323, -406,
	117, 296, 278, -152, -211, 114, 422, 117, 232, -358,
	-233, 421, 421, -353, 409, 114, 114, 142, -227, -353,
	-190, -198, -166, -199, 416, -221, 225, 237, -400, -248,
	-247, 225, -162, -381, 387, 225, 225, -221, -177, 157,
	2, -167, -166, -177, 157, -381, 225, -322, -201, -190,
	-201, 313, -184, 32, -155, 421, 51, 283, 114, -155,
	114, -155, 114, -155, 421, 114, -155, 114, 421, 114,
	114, -235, 417, 421, -358, -400, -227, -170, 78, 416,
	32, -300, -329, -330, -331, -340, -335, -338, 42, 48,
	47, 347, 218, 305, 306, 307, 308, 320, 374, 161,
	40, 235, 236, 173, 4, 41, -342, 180, 172, 174,
	175, 176, 177, 178, 319, 39, 268, 135, 136, 134,
	106, 97, 96, 231, 44, 43, 94, 350, 351, 352,
	353, 189, 190, 55, 54, 379, 330, -359, -400, -227,
	139, -175, 2, -190, 2, 69, 70, 393, -352, -235,
	32, -278, 2, -412, 421, 203, -206, 210, 224, 151,
	238, 391, -357, 5, 4, -299, -312, 98, 207, -338,
	8, 408, -347, 7, 407, -351, -350, -351, 82, 418,
	-353, 338, 189, -352, 24, 315, 2, -190, -403, 139,
	-401, 288, -400, -190, -190, -190, -190, -190, 139, 2,
	356, 2, 139, -166, -166, 203, -190, 2, -192, 2,
	-191, 2, 338, 165, 338, -155, 421, -244, -268, -267,
	-270, -289, 24, -273, 133, 221, -289, -291, -140, -140,
	-140, -225, -317, -289, 262, 165, -352, -344, -329, -343,
	273, 274, 272, 276, 275, -329, -189, -353, 350, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, 204, 159, 317, 38, 160, -289,
	354, -289, -289, -289, -289, 217, 225, 228, 360, 125,
	367, 104, 232, -415, 335, 34, -296, -141, 416, -311,
	29, 322, 24, -303, 292, 416, -284, -289, -285, -236,
	-235, 417, 421, -236, -302, -298, -310, -309, 384, -353,
	409, 417, -235, 380, 24, 104, 409, 2, 7, -260,
	392, 216, 95, 153, 215, -261, 301, -387, 132, 148,
	416, 417, 2, 417, 2, 417, 2, 417, 2, 417,
	2, -289, -289, -289, -289, -289, -235, -349, -254, 2,
	-345, -235, 4, 392, 216, 95, 153, 215, 301, -254,
	2, 7, -235, 2, -235, 2, -255, 2, -289, -235,
	-256, -290, -291, 407, 408, 402, 416, 292, -257, 2,
	-289, -236, 350, 350, 350, 350, -289, 45, 199, 355,
	-258, -289, 142, -235, -171, -385, 32, -235, -230, 421,
	142, 32, 4, -230, -230, 416, 417, 421, 188, 188,
	-319, -253, 188, -251, 245, -251, -251, -398, 416, 415,
	-315, -176, 414, 423, -353, -236, 2, 416, -315, -315,
	418, -314, -313, 32, -184, 243, -314, 417, -190, -353,
	421, 354, -264, 73, 62, -281, 157, 62, -364, -178,
	73, -365, -166, 57, 366, 262, 141, -264, 73, -264,
	73, 73, 313, 326, 46, -321, 35, -88, 71, 142,
	354, -321, -249, -329, 90, 213, 214, 46, -348, -347,
	408, -348, 46, -348, -348, -348, 387, -191, -321, 354,
	253, -358, 71, 354, 421, 35, -88, 71, 142, 354,
	-202, -176, 71, 338, -326, -325, 396, -196, -166, 418,
	-289, -289, 328, 417, 418, 183, 183, -207, -208, -166,
	-282, -281, -366, -367, -364, 182, 165, 366, 126, 32,
	114, -227, 354, 114, 253, 114, 114, 32, 237, 225,
	237, 225, -158, 341, 114, -283, 385, -274, -88, 416,
	98, 32, -274, -239, -240, -324, -241, -178, 416, -184,
	-190, -234, -234, -234, -202, -203, -175, -358, -359, -359,
	417, -73, -327, -137, 387, 354, 387, 373, -208, -72,
	25, 78, 107, 417, 421, -229, 31, 414, -260, 416,
	-346, 416, -137, -325, 142, -228, -326, -326, 139, 70,
	399, 354, 417, 357, -279, -205, 267, 321, 279, 309,
	8, 7, 7, 421, -353, -190, 139, -227, -227, 310,
	-73, 139, -73, 418, -190, -202, -190, -321, -271, -347,
	416, -272, 292, 293, 421, -149, 33, 102, 193, -190,
	393, -289, -289, 354, -415, 335, -296, -289, 217, 228,
	360, 125, 367, 104, 232, 142, 416, -290, -290, -235,
	-289, 416, -235, 415, 425, 417, 418, -289, 415, 415,
	421, -308, -309, 108, -289, 418, -414, 421, -223, -289,
	-235, -235, 417, 417, 354, 354, 354, 354, 416, -392,
	246, 416, 416, -289, 32, 421, 421, 421, 421, 417,
	417, 421, 417, 142, 417, 417, 417, 417, 417, -262,
	256, 417, 10, 11, 407, 408, 409, 410, 137, 411,
	412, 405, 406, 404, 397, 398, 399, 68, 211, 294,
	13, 14, 15, 183, 160, -290, -290, -290, -235, 416,
	417, -294, -295, 142, 139, 393, 393, 393, 393, 32,
	-258, -258, -258, 417, 142, -235, 416, 417, -283, -323,
	-232, 2, -319, -186, -353, -283, -283, -235, -289, -319,
	-319, -252, 373, 237, 188, -319, -313, 417, -399, -349,
	-315, -314, -349, -288, -287, 140, 223, 417, -236, 2,
	-314, -314, -353, -184, -221, -315, 417, 418, -150, -190,
	-178, -185, -166, 225, -281, 157, -157, 225, -329, -185,
	416, 416, 193, 193, -178, -185, 157, -178, 157, -185,
	-185, -405, 267, 233, -289, 206, 266, 226, -151, 278,
	-88, 393, 416, -192, 278, -198, -348, -348, -247, 278,
	-191, -358, 387, 393, -175, -152, -88, 393, 416, -176,
	-153, 278, 393, -190, -134, 156, 232, 409, -353, -128,
	5, 228, -128, 417, 421, 165, -177, 165, -183, -167,
	-88, -190, 142, 4, -191, -358, -358, -358, -88, -190,
	114, -190, 114, -159, 110, -413, 399, -175, -224, -223,
	-289, -246, -276, 285, 237, -222, -179, -178, 378, -184,
	-246, -231, 421, 142, 399, 418, -222, -155, -155, -155,
	-155, -155, 142, -136, 240, -135, -166, 5, -227, 23,
	-358, 417, -329, 414, 415, 7, 7, 416, -349, -137,
	-227, 142, -41, 387, 266, 92, 338, 252, 165, -350,
	-350, -278, 364, 66, 267, -350, 338, 310, -73, -166,
	-272, -289, -317, -190, 422, -289, -289, -290, -290, 142,
	416, -289, -300, 28, 28, 417, -236, 421, -285, -289,
	409, -353, 417, -298, 111, -289, 349, -353, 409, 417,
	380, -414, -414, -414, 5, 216, 153, 215, -261, 215,
	-261, -261, 7, -393, -181, 416, -166, 385, -223, 417,
	-344, -329, -289, -289, -289, -349, -289, -294, -289, -344,
	-329, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	104, 225, 232, -290, 421, -236, -295, -294, -289, -289,
	-329, 417, 417, 417, -235, -72, -243, 148, -326, 421,
	-243, -243, 417, -252, 416, -289, -319, 415, 417, 421,
	-314, 415, 421, 424, 399, -315, 417, 418, -221, -313,
	-353, 354, 354, 114, 225, 375, -368, -365, -289, -226,
	-318, -178, -380, 416, -166, -376, -377, -173, 416, 416,
	-148, 107, 313, -266, 114, -155, 114, -155, 391, 416,
	416, 354, -264, 73, -292, -173, -235, 354, 354, 253,
	-292, -292, -235, 354, -292, 117, -137, 142, 337, -209,
	168, -282, -167, 416, -177, 416, 416, -221, -190, -326,
	-248, -162, -265, 373, -176, 416, -176, -160, 198, -413,
	-356, -381, -269, -267, -246, -238, 226, 72, 417, 421,
	418, -283, -240, -232, -289, 2, 417, -88, 421, 416,
	399, 399, 239, -138, -138, 7, 415, 417, -349, 417,
	-227, 240, -187, -175, -190, -188, -202, -190, 238, 417,
	-149, -176, 28, 28, -289, -300, 417, -289, -289, 417,
	-289, 415, -289, 418, 5, -289, 417, 417, 417, 417,
	-394, -166, -289, 417, 417, 417, 421, 417, 417, 417,
	-295, 142, 104, 232, 416, -289, 417, 417, 417, -297,
	150, 46, -319, -297, -297, -227, -286, -349, -287, -176,
	414, -314, -315, -353, 418, -178, -185, -281, 114, -369,
	73, -370, 60, 126, 78, 225, 228, 366, 262, 57,
	98, 271, 32, 417, 417, 421, -174, 60, -174, -289,
	416, -226, -227, 225, 98, 225, 98, 91, 362, -178,
	-185, -227, -227, -190, -178, -185, 416, 417, -192, -191,
	-358, 417, -176, 71, -359, 350, -210, -211, 160, 416,
	-226, 416, -227, -207, 32, -137, 416, 144, 237, -226,
	237, -161, 197, -413, -356, -158, -246, -275, 416, 237,
	-88, -179, 2, -224, 399, -135, -136, -358, -358, 91,
	91, 415, 417, -42, -43, 165, 73, 255, -213, -212,
	252, 232, -149, -289, -289, 417, 417, -353, 409, -414,
	-388, 252, 417, -289, -290, 142, 416, -300, 417, -389,
	386, -289, -235, -389, -389, 417, -315, -349, -314, -281,
	-185, -189, -182, -166, 126, 157, 228, 193, 416, -290,
	-190, 416, 2, -280, -408, 77, 333, -318, -149, -189,
	-149, 417, -235, 417, 417, 228, 228, -289, -329, -155,
	-155, 417, 417, 354, 354, -235, 354, 354, 393, -292,
	250, -226, 417, -226, 417, 417, -88, -226, -190, 417,
	-190, -413, -356, -159, 105, -227, 73, -269, -296, 417,
	416, 416, 421, 24, 416, 24, 416, -188, 338, 417,
	-224, 46, 417, -290, -300, 417, -390, -391, -181, -314,
	415, -370, -182, 225, -289, -168, 416, -289, -209, 416,
	-174, -414, 271, -154, 60, 416, 416, -178, -185, -414,
	416, 416, -292, -190, 417, -280, 417, -209, 417, -265,
	416, -356, -160, 368, 226, 417, -185, -246, -359, -359,
	-43, -227, -227, -190, -395, 266, 293, -235, 417, 421,
	32, 114, 417, -371, 212, -166, 417, -210, -227, -149,
	417, -190, -147, 373, -189, -215, -214, -212, -217, -216,
	-212, 417, -235, -235, 416, -209, -280, -210, -280, 416,
	-226, -161, 313, -283, 417, 417, 417, 417, 417, -396,
	-397, 38, 363, 82, -289, -396, -391, -393, 126, -372,
	-375, -374, 237, 143, 251, 318, 417, 332, 383, 417,
	-221, -289, 417, 421, 378, 417, 421, 378, 417, 417,
	-227, -210, -209, -209, -226, 417, -239, -137, -137, -397,
	259, 138, 292, 259, 138, -182, -374, 237, -375, 237,
	368, 101, -371, -214, 160, -216, 142, 417, -210, -210,
	417, -283, 28, -373, 222, 283, 51, 313, -373, -372,
	416, 416, -156, 51, 283, -280, -397, 21, 228, 98,
	-235, -235, -209, 417, 417, -210, -210, 354, 416, -235,
	417, -210,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 182, 184, 186, 0, 0, 0, 201, 203, 205,
	206, -2, 0, 0, 0, 234, 235, 237, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	373, 374, 0, 841, -2, 0, 352, 354, 363, 365,
	367, 369, 370, 0, 432, 434, 436, 438, 440, 442,
	444, 446, 448, 449, 451, 453, 455, 457, 459, 461,
	463, 465, 467, 469, 471, 473, 475, 477, 479, 481,
	-2, 753, 755, 757, 759, -2, 62, 64, 66, 68,
	70, 72, 87, 209, 211, 213, 215, 218, 220, 222,
	878, 240, 242, 244, 246, 248, -2, 892, 0, 0,
	0, -2, 0, -2, -2, -2, 771, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 854, 856, 858,
	860, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 156, -2, -2, -2,
	-2, 0, 0, 1511, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520,
	1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530,
	1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,
	1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
	1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
	1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640,
	1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650,
	1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660,
	1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
	1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
	1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690,
	1691, 1398, 1452, 1401, 1396, 183, 185, 187, 188, 0,
	0, 0, 657, 1437, 1450, 1451, 1452, 1455, 1456, 1457,
	1511, 0, 202, 204, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 716, 331, 1600, 333,
	335, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	233, 236, 238, 239, 0, 0, 0, 0, 0, 0,
	0, 330, 328, 1432, 273, 274, 0, 313, 314, 315,
	316, 317, 318, 320, 277, 279, 281, 282, 284, 286,
	288, 290, 292, 294, 296, 298, 299, 301, 303, 304,
	306, 308, 309, 311, 717, 0, 0, 0, 0, 0,
	165, 0, 345, 339, 344, 346, 348, 349, 350, 351,
	0, 163, 0, 590, 326, 324, 0, 159, 0, 750,
	0, 345, 1479, 343, 751, 752, 0, 0, 747, 748,
	1629, 781, 353, 355, 364, 366, 368, 371, -2, -2,
	1722, -2, 394, -2, 402, 1725, 1631, 405, 0, 407,
	-2, 410, 433, 435, 437, 439, 441, 443, 445, 447,
	450, 452, 454, 456, 458, 460, 462, 464, 466, 468,
	470, 472, 474, 476, 478, 480, 482, 483, 0, 0,
	0, 0, 0, 487, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, -2,
	0, 0, 0, -2, -2, 0, 0, 486, 488, 489,
	490, 0, 534, 573, 574, 754, 756, 758, 0, 698,
	880, 63, 65, 67, 69, 71, 210, 212, 214, 216,
	219, 221, -2, 852, 853, 241, 243, 245, 247, 249,
	-2, 0, 884, 884, 884, 0, 0, 853, 851, 0,
	356, 0, 358, 0, 487, 361, 362, 414, 415, 1092,
	0, 0, 0, 0, 0, 0, 1170, -2, -2, 1202,
	1204, 1703, 1722, 0, 1206, 1207, 0, 1209, 1213, 1214,
	0, 1217, 1218, 1375, 1444, 1439, 1404, 1405, 1406, 1407,
	0, 0, 1410, 0, 1412, 1413, 1414, 1277, 1228, -2,
	-2, -2, 1448, 1006, 1007, 1008, 1009, 1010, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1734, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 0, 1692, 1709, 1715, 1710,
	1700, 1247, -2, -2, 1518, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1704, 1705, -2, 1707, -2, -2, 1714, -2,
	1718, 1719, -2, -2, 1724, -2, -2, -2, 1728, 1729,
	-2, 1466, 1059, 1735, 1736, 1737, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1747, 1748, 1749, 1750, 1751, 1752, 783,
	761, 774, 783, 763, 764, 765, 766, 767, 772, 773,
	776, 0, 768, 769, 770, 870, 1606, 873, 657, 871,
	855, 857, 0, 859, 0, 0, 0, 864, 887, 885,
	0, 923, 868, 869, 879, 938, 0, 0, 958, 958,
	949, 0, 980, 0, 1449, 0, 0, 0, 0, 0,
	-2, 1452, 1734, 1745, 1746, 2, 79, 0, 1709, 980,
	81, 0, 1709, 84, 0, 1709, 0, -2, 88, 0,
	1709, 166, 167, 1462, 1463, 1467, 1468, 1469, 1470, 91,
	0, 1428, 99, 0, 1709, 1395, 0, 1425, 1471, 1472,
	1473, 1474, 1475, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
	1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 0, 1422, 0, 0, 583, 1392,
	1397, 584, 1402, 0, 189, 190, 191, 1709, 193, 194,
	1709, 196, 0, 0, 0, 0, 0, 217, 657, 1709,
	0, 224, 1433, 0, 681, 1709, 679, 1436, -2, 1709,
	701, 704, 1709, 706, 657, 708, 1435, -2, 1459, 877,
	1709, 797, 332, 334, 0, 227, 0, 810, 0, 812,
	0, 831, 986, 148, 1709, 252, 271, 148, 1709, 255,
	148, 1709, 258, 148, 1709, 261, 1390, 148, 1709, 264,
	265, 1709, 267, 168, 268, 1709, 270, 327, 0, 0,
	-2, 321, 1438, -2, 319, 278, 280, 283, 285, 287,
	289, 291, 293, 295, 297, 300, 302, 305, 307, 310,
	312, -2, 0, 160, 0, 0, 0, 0, 589, 0,
	0, 0, 749, 0, 0, 0, 375, 0, 0, 0,
	0, 780, 372, 0, 391, 0, 393, 1699, -2, -2,
	397, 784, 788, 789, 790, 0, 0, 0, 0, 404,
	0, 0, 0, 408, 411, 0, 484, 485, 0, 0,
	495, 496, 497, 498, 499, 0, 502, 523, 538, 0,
	0, 506, 508, 588, 510, 0, 0, 512, 0, 514,
	0, 516, 0, 518, 0, 520, 522, 524, 539, 526,
	0, 0, 0, 537, 0, 543, 0, 546, 547, 548,
	0, 550, 551, 552, 0, 0, 0, 560, 562, 0,
	572, 0, 491, 492, 148, 984, -2, 0, 847, 901,
	902, 0, 0, 0, 0, 882, 883, 0, 0, 0,
	843, 844, 357, 0, 360, 0, 0, 0, 0, 1310,
	1311, 1312, 1313, 1314, 1315, 1318, 1319, 1316, 1317, 1320,
	1321, 0, 0, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 1324,
	1325, 0, 0, 1327, 0, 1329, 0, 0, 0, 0,
	0, 0, 1149, 1151, 1383, 0, 0, 1326, 1097, 1098,
	1099, 1134, 1135, 0, 1203, 1380, 1379, 1205, 0, 1332,
	-2, 1333, 0, 0, 1208, 1419, 1215, 1216, 1332, 0,
	1374, 0, 0, 1409, 0, 1089, 1279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1043, 1057, 1064, 1061, 1060, 1045, 0, 1044, 0, 0,
	1042, 0, 0, 0, 1046, 0, 1355, -2, 0, 0,
	0, 0, 0, 0, 760, -2, 762, 0, 778, 0,
	872, 0, 0, 927, 1384, 1388, 1389, 927, 927, 0,
	0, 1333, 0, 0, 0, 0, 977, 977, 977, 975,
	952, 0, 958, 0, -2, 0, 958, 958, 0, 968,
	0, 968, -2, 949, 0, 0, 981, 982, 0, 0,
	100, 744, 119, 0, 744, 744, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 115, 107, 108, 0, 0,
	85, 682, 0, 685, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	0, 117, 0, 141, 143, 0, 0, 0, 0, 971,
	582, 0, 0, 1453, 1400, 0, 0, 0, 0, 1453,
	0, 0, 1439, 1440, 596, 0, 0, 0, 0, 677,
	680, 0, 699, 0, 876, 0, 0, 0, 0, 1709,
	713, 1424, 1458, 0, 1709, 799, 0, 990, 0, 813,
	0, 0, 987, 0, 250, 0, 146, 147, 0, 253,
	0, 256, 0, 259, 0, 0, 262, 0, 0, 0,
	0, 0, 879, 0, 180, 0, 337, 347, 0, 0,
	879, 0, 1335, 998, 1001, 1002, 1003, 1089, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1065, 1059, 1075, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1055,
	0, 1030, 1030, 1030, 1047, 1048, 1066, 1067, 1069, 1071,
	1073, 999, 1000, 1065, 1065, 1062, 1063, 180, 0, 341,
	0, 971, 377, 971, 379, 0, 568, 0, 0, 0,
	0, -2, 399, 0, 786, 0, 791, 423, 424, 425,
	793, 794, 403, 426, 427, 428, 429, 430, 431, 0,
	674, 0, 676, 1415, 0, 400, 416, 401, 406, 0,
	412, 0, 0, 500, 501, 503, 504, 505, 509, 0,
	576, 1621, 586, 511, 513, 515, 517, 519, 879, 528,
	0, 530, 879, 541, 544, 549, 553, 554, 555, 556,
	557, 558, 0, 0, 0, 697, 0, 850, 899, 900,
	905, 909, 910, 913, 916, 917, 907, 1092, 865, 866,
	867, 893, 894, 727, 0, 0, 359, 1093, 994, 995,
	1049, 1050, 1051, 1052, 1053, 1094, 1095, 1421, 0, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, -2,
	-2, -2, -2, -2, -2, -2, -2, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, -2, -2,
	-2, 1132, 1133, -2, 1328, 1330, 0, 1383, 0, -2,
	0, -2, -2, -2, -2, 1146, 0, 1148, 1153, 1155,
	1157, 0, 0, 0, 0, 1382, 1167, 1366, 0, 0,
	1307, 1308, 1309, 1152, 0, 0, 1381, 1378, 0, 0,
	1331, 1212, 0, 0, 0, 1339, 1373, 1369, 0, 1441,
	1447, 1219, 890, 0, 0, 0, 0, 1226, 0, 1420,
	1076, 1077, 1078, 1079, 1080, 1081, 1090, 1287, 0, 0,
	0, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 0, 0, 0, 0, 0, 0, 0, 0, 1259,
	0, 1342, -2, -2, -2, -2, -2, -2, -2, 0,
	1261, 0, 0, 1273, 0, 1275, 0, 1263, 1333, 1352,
	0, 0, 1173, 0, 0, 0, 0, 1722, 0, 1266,
	1333, 1360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 0, 1365, 777, 874, 0, 0, 990, 0,
	0, 0, 1387, 990, 990, 0, 922, 0, 0, 0,
	0, 0, 0, 972, 976, 973, 974, 0, 0, 958,
	968, 935, 0, 0, 1423, 0, 943, -2, 968, 968,
	0, 945, 967, 0, 657, 957, 947, -2, 0, -2,
	0, 0, 0, 0, 743, 121, 1709, 0, 150, 0,
	0, 647, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 683, 684, 686, 692, 694, 0, 688, 1418,
	0, 689, 0, 691, 693, 695, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 1394, 0, 0, 171, 970, 0, 1393, 1403, 0,
	192, 195, 181, 656, 0, 0, 0, 0, 595, -2,
	597, 599, 600, 601, 602, 1556, 1459, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 801, 807, 0, 892, 0, 829, 815, 0,
	0, 0, 829, 833, 834, 836, 837, 0, 0, 988,
	272, 148, 148, 148, 1391, 148, 148, 169, 266, 269,
	329, 275, 322, 0, 0, 0, 0, 0, 0, 323,
	0, 0, 0, 325, 0, 991, 993, 0, 1004, 0,
	1057, 0, 157, 180, 0, 0, 376, 381, 0, 569,
	0, 0, 392, 0, 785, 792, 0, 420, 0, 422,
	675, 1417, 1416, 0, 413, 493, 0, 587, 585, 527,
	531, 879, 533, 0, 570, 571, 575, 985, 0, 911,
	0, 908, 914, 915, 0, 896, 725, 726, 0, 0,
	0, -2, -2, 0, 0, 0, 1168, -2, 1147, 1150,
	1154, 1156, 1158, 0, 0, 0, 0, 0, 0, 0,
	1169, 1332, 0, 1376, 1379, -2, 0, 1334, 1337, 1338,
	0, 0, 1370, 0, 0, 0, 0, 0, 889, 890,
	890, 890, 1225, 0, 0, 0, 0, 0, 0, 1227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1246,
	1028, 0, 1258, 0, 1260, 1054, 1272, 1274, 1262, 0,
	0, 1264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1176, 1177, 1178, 0, 1332,
	1265, 1358, 1359, 0, 0, 1068, 1070, 1072, 1074, 0,
	0, 0, 0, 1271, 0, 1364, 879, 924, 919, 1385,
	971, 926, 928, 1386, 1426, 919, 919, 0, 1334, 960,
	0, 962, 0, 0, 0, 964, 0, 953, 0, 955,
	968, 940, 0, 0, 933, 0, 932, 958, 0, 944,
	946, 948, 1441, 657, 966, 0, 983, 0, 120, 731,
	0, 0, 1427, 0, 123, 1709, 131, 0, 624, 0,
	0, 0, 0, 0, 746, 132, 1709, 148, 1709, 148,
	133, 136, 0, 140, 138, 0, 0, 615, 101, 744,
	104, 0, 0, 737, 0, 687, 690, 696, 86, 0,
	739, 729, 0, 0, 728, 142, 105, 0, 0, 741,
	103, 0, 0, 0, 180, 0, 0, 1399, 1454, 197,
	199, 200, 198, 604, 0, 1459, 0, 1459, 0, 1431,
	593, 657, 0, 971, 681, 702, -2, 705, 707, 715,
	0, 0, 0, 803, 807, 0, 806, 877, 904, 891,
	989, 808, 829, 0, 0, 0, 818, 820, 817, 814,
	811, 990, 0, 0, 0, 0, 0, 251, 254, 257,
	260, 263, 0, 178, 1588, 176, 173, 175, 336, 0,
	0, 0, 1336, 0, 996, 0, 0, 0, 0, 158,
	340, 0, 378, 0, 0, 0, 0, 0, 0, 389,
	390, -2, 418, 419, 421, 417, 0, 529, 532, 540,
	0, 0, 895, 727, 0, 1096, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1367, 0, 0, 0, 1378,
	1210, 1211, -2, 1340, 1368, 1372, 0, 1442, 1446, 1220,
	0, 0, 0, 0, 1411, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 0, 1285, 1286, 1290, 1434, 0, 0, 1231,
	0, 0, 0, 0, 0, 0, 1341, 1351, 1353, 1174,
	1175, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, -2, -2, -2, 1192, 1193, 1194, -2, -2, -2,
	0, 0, 0, 1354, 0, 0, 1356, 1357, 1361, 1362,
	0, 1268, 1269, 1270, 1363, 0, 921, 0, 925, 0,
	921, 921, 886, 961, 0, 979, 963, 938, 954, 0,
	951, 936, 0, 937, 0, 968, 958, 0, 965, 950,
	-2, 0, 0, 0, 0, 149, 622, 646, 0, 0,
	718, 724, 724, 0, 1429, 1229, 1230, 0, 0, 0,
	125, 0, 0, 0, 0, 129, 0, 135, 139, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	111, 114, 0, 0, 110, 0, 155, 0, 0, 612,
	0, 598, 0, 0, 0, 0, 596, 0, 223, 180,
	678, 700, 0, 0, 0, 0, 0, 805, 807, 0,
	798, 799, 829, 903, 809, 827, 828, 826, 0, 0,
	0, 892, 835, 832, 838, 839, 0, 164, 0, 0,
	0, 0, 338, 0, 0, 0, 997, 1005, 0, 1058,
	342, 0, 563, 564, 610, 0, 567, 494, 906, 912,
	897, 727, 0, 0, -2, 0, 1161, -2, -2, 1303,
	1334, 1377, 1371, 0, 1408, 890, 1221, 1223, 1224, 1091,
	1292, 1289, 0, 1276, 1241, 1242, 0, 1244, 1245, 1029,
	1350, 0, 0, 0, 0, 1334, 1305, 1267, 875, 1281,
	0, 0, 929, 1281, 1281, 0, 958, 956, 934, 930,
	0, 941, 968, 1442, 0, 733, 735, 122, 0, 623,
	0, 626, 0, 0, 0, 0, 633, 634, 0, 0,
	0, 0, 0, 648, 655, 0, 727, 0, 727, 0,
	0, 0, 0, 0, 145, 0, 0, 745, 0, 148,
	148, 0, 0, 732, 0, 0, 0, 0, 738, 740,
	730, 0, 742, 0, 170, 0, 591, 611, 0, 0,
	0, 0, 0, 0, 0, 225, 0, 714, 0, 0,
	0, 795, 807, 0, 800, 801, 226, 0, 0, 0,
	816, 819, 821, 904, 0, 177, 0, 172, 174, 0,
	0, 992, 1056, 380, 382, 0, 0, 388, 565, 609,
	0, 0, 898, -2, -2, 1162, 1304, 1443, 1445, 0,
	892, 0, 1278, 0, -2, 0, 0, 0, 1306, 861,
	0, 920, 918, 862, 863, 978, 968, 0, 942, 124,
	0, 627, 628, 1430, 630, 0, 632, 635, 0, 637,
	1461, 0, 641, 604, 0, 652, 653, 719, 720, 723,
	721, 724, 890, 650, 0, 126, 127, 144, 152, 128,
	134, 0, 0, 0, 0, 890, 0, 0, 0, 969,
	0, 0, 655, 0, 645, 604, 594, 0, 715, 711,
	0, 0, 802, 803, 0, 0, 0, 829, 840, 179,
	0, 0, 0, 384, 0, 386, 0, 608, 0, 1222,
	1295, 0, 1243, -2, 0, 1200, 1280, 1282, 0, 939,
	931, 625, 629, 0, 0, 661, 0, 0, 612, 0,
	727, 0, 0, 154, 0, 0, 0, 734, 736, 0,
	0, 0, 113, 0, 644, 604, 655, 612, 655, 0,
	0, 804, 805, 0, 823, 990, 825, 830, 0, 0,
	383, 0, 0, 566, 0, 0, 0, 1291, 1201, 0,
	0, 0, 636, 666, 0, 0, 0, 649, 0, 722,
	1220, 657, 130, 0, 151, 0, 616, 0, 0, 619,
	0, 0, 0, 0, 0, 612, 604, 592, 604, 0,
	0, 796, 0, 824, 180, 180, 385, 387, 1288, 1293,
	1296, -2, 1675, 1508, 0, 1294, 1283, 1284, 0, 638,
	662, 663, 0, 658, 659, 660, 1460, 639, 640, 654,
	661, 153, 613, 0, 0, 614, 0, 0, 116, 118,
	0, 642, 612, 612, 0, 712, 990, 161, 162, 0,
	1298, 1299, 1300, 1301, 1302, 631, 664, 0, 665, 0,
	0, 0, 666, 617, 0, 620, 0, 607, 643, 709,
	655, 822, 0, 667, 0, 670, 671, 0, 668, 651,
	0, 0, 603, 605, 606, 604, 1297, 669, 672, 673,
	0, 0, 612, 612, 0, 710, 618, 0, 0, 0,
	612, 621,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 405, 3, 411, 406, 3,
	416, 417, 409, 407, 421, 408, 418, 410, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 425, 420,
	397, 399, 398, 401, 422, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 414, 3, 415, 412, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 423, 404, 424, 402,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 400,
	57740, 403, 57741, 413, 57742, 419, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1006
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1012
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1029
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1045
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1046
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1048
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1049
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1061
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1077
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1078
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1079
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1080
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1081
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1118
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1129
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1144
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1236
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1246
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1252
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1261
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1270
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1279
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1291
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1362
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1385
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1499
		{
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return unimplemented(sqllex, "alter using")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1503
		{
		}
	case 155:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.str = "CSV"
		}
	case 161:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1687
		{
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1747
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1751
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1755
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.str = ""
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			return helpWith(sqllex, "CREATE")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1777
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1779
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1782
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1784
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1802
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1806
		{
			/* SKIP DOC */
			// TODO(dan): This reuses the `AS OF SYSTEM TIME` syntax for convenience,
			// but it means something different here than SELECT and BACKUP. On the
			// other hand, RESTORE already stretches the definition a bit. Revisit.
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets:  sqlDollar[4].union.targetList(),
				SinkType: sqlDollar[6].str,
				AsOf:     sqlDollar[7].union.asOfClause(),
				Options:  sqlDollar[8].union.kvOptions(),
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1837
		{
			return helpWith(sqllex, "DELETE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			return helpWith(sqllex, "DROP")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1866
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1884
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1899
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1960
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2031
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2035
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2039
		{
			return helpWith(sqllex, "DELETE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2040
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2041
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2042
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2043
		{
			return helpWith(sqllex, "INSERT")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2047
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2052
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2053
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2055
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2056
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2064
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{ /* SKIP DOC */
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2090
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "GRANT")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2211
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2220
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "RESET")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2265
		{
			return helpWith(sqllex, "RESET")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "USE")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2297
		{ /* SKIP DOC */
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "USE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			return unimplemented(sqllex, "set local")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2315
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2333
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2359
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2417
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2467
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2472
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			return unimplemented(sqllex, "set from current")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2512
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2516
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = tree.Low
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = tree.Normal
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = tree.High
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2630
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2631
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2632
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2634
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2635
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2639
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2640
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2641
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2642
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2643
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2646
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2648
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2649
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2650
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2651
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2652
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2653
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2655
		{
			return helpWith(sqllex, "SHOW")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.str = "client_encoding"
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.str = "timezone"
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2679
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2700
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2711
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2719
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2730
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2747
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2752
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2787
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2795
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2806
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2811
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2816
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2832
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2862
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2875
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2880
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2890
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = true
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = false
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2907
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2944
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2958
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2976
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2987
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2998
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3009
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3019
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3030
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3045
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3049
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3053
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3059
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3066
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3072
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3076
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3094
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3102
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3108
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3241
		{
			// This sub-rule is meant to support both ROLE and other keywords
			// used as table name without the TABLE prefix. The keyword ROLE
			// here can have two meanings:
			//
			// - for all statements except SHOW GRANTS, it must be interpreted
			//   as a plain table name.
			// - for SHOW GRANTS specifically, it must be handled as an ON ROLE
			//   specifier without a name list (the rule with a name list is separate,
			//   see above).
			//
			// Yet we want to use a single "targets" non-terminal for all
			// statements that use targets, to share the code. This action
			// achieves this as follows:
			//
			// - for all statements (including SHOW GRANTS), it populates the
			//   Tables list in TargetList{} with the given name. This will
			//   include the given keyword as table pattern in all cases,
			//   including when the keyword was ROLE.
			//
			// - if ROLE was specified, it remembers this fact in the ForRoles
			//   field.  This distinguishes `ON ROLE` (where "role" is
			//   specified as keyword), which triggers the special case in
			//   SHOW GRANTS, from `ON "role"` (where "role" is specified as
			//   identifier), which is always handled as a table name.
			//
			//   Both `ON ROLE` and `ON "role"` populate the Tables list in the same way,
			//   so that other statements than SHOW GRANTS don't observe any difference.
			//
			// Arguably this code is a bit too clever. Future work should aim
			// to remove the special casing of SHOW GRANTS altogether instead
			// of increasing (or attempting to modify) the grey magic occurring
			// here.
			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role", // backdoor for "SHOW GRANTS ON ROLE" (no name list)
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3326
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.str = ""
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 621:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3551
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3650
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3654
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 642:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			return unimplemented(sqllex, "match full")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3787
		{
			return unimplemented(sqllex, "match partial")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3788
		{
			return unimplemented(sqllex, "match simple")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3789
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3880
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 678:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3888
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3896
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3907
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3908
		{ /* SKIP DOC */
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3911
		{ /* SKIP DOC */
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3913
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3917
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3920
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3925
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3952
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = nil
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4055
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = true
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = false
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = true
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = false
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4097
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4100
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4101
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = tree.Descending
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4152
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4154
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = true
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = false
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4197
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4198
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4209
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4220
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4231
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4235
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4237
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4256
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4261
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4274
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4279
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4288
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4290
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4298
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4305
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4308
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4309
		{
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.str = ""
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.str = ""
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4355
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4368
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4370
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 795:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4434
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.str = ""
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.str = ""
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.str = ""
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4477
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4478
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4504
		{
			return helpWith(sqllex, "INSERT")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4522
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4578
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4592
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4596
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4604
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 830:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4641
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4645
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4646
		{
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4670
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4769
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4804
		{
			return helpWith(sqllex, "SELECT")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4805
		{
			return helpWith(sqllex, "VALUES")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4806
		{
			return helpWith(sqllex, "TABLE")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4867
		{
			return helpWith(sqllex, "SELECT")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4911
		{
			return helpWith(sqllex, "TABLE")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4926
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4927
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 875:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4950
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4957
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4960
		{
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4961
		{
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = true
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = false
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = false
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = true
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4990
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4991
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4994
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4995
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5042
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5066
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5118
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5119
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5122
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5123
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5181
		{
			return helpWith(sqllex, "VALUES")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5183
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5198
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5220
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5236
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5298
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5318
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5320
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5325
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5330
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = nil
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = true
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = false
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5475
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5476
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5550
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5564
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5572
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5596
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5621
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5671
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5703
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = nil
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5782
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5866
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5883
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5918
		{
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5919
		{
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = tree.Year
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = tree.Month
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = tree.Day
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = tree.Month
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = nil
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = tree.Second
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6030
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6065
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6170
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6178
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6194
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6198
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6214
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6218
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6226
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6230
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6234
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6238
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6242
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6246
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6250
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6254
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6258
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6262
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6266
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6270
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6274
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6278
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6282
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6286
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6290
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6293
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6295
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6299
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6303
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6307
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6311
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6315
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6319
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6323
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6339
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6343
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6359
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6380
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6384
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6415
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6419
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6423
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6427
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6431
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6435
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6439
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6443
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6447
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6451
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6455
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6459
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6463
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6467
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6471
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6475
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6479
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6483
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6487
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6491
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6495
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6499
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6503
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6507
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6521
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6529
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6565
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6570
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6579
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6584
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), Star: true}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6588
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6592
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6597
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6601
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6605
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6609
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6613
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6621
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6625
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6628
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6629
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6631
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6635
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6639
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6642
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6653
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6660
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6669
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6670
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6674
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6676
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6680
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6686
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6690
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6694
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6698
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6704
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6708
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6712
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6716
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6720
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6724
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6728
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6732
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6736
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6743
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6746
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6748
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6751
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6753
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6756
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6758
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6761
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6763
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6766
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6768
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6771
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6773
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6776
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6778
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6781
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6783
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6787
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6790
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6791
		{
			return unimplemented(sqllex, "treat")
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6793
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6797
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6801
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6805
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6809
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6812
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6814
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6817
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6822
		{
			return unimplemented(sqllex, "within group")
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6823
		{
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6827
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6831
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6838
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6842
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6848
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6858
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6866
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6870
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6874
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6881
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6900
		{
			sqlVAL.str = ""
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6906
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6910
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6920
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6921
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6922
		{
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6925
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6926
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6932
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6933
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6934
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6935
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6936
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6947
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6951
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6957
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6963
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6969
		{
			sqlVAL.union.val = tree.Any
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6973
		{
			sqlVAL.union.val = tree.Some
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6977
		{
			sqlVAL.union.val = tree.All
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6982
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6983
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6984
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6985
		{
			sqlVAL.union.val = tree.Div
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6986
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6987
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6988
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6989
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6990
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6991
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6992
		{
			sqlVAL.union.val = tree.LT
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6993
		{
			sqlVAL.union.val = tree.GT
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6994
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6995
		{
			sqlVAL.union.val = tree.LE
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6996
		{
			sqlVAL.union.val = tree.GE
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6997
		{
			sqlVAL.union.val = tree.NE
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7001
		{
			sqlVAL.union.val = tree.Like
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7002
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7003
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7004
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7016
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7022
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7032
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7042
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7046
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7052
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7056
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7062
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7066
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7088
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7092
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7096
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7102
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7109
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7113
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7130
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7134
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7138
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7142
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7146
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7152
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7158
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7164
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7168
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7172
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7178
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7182
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7193
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7200
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7210
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7216
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7220
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7227
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7233
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7237
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7244
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7250
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7254
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7259
		{
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7260
		{
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7264
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7268
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7274
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7283
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7287
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7291
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7299
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7303
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7309
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7313
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7319
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7326
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7354
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7358
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7362
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7368
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7372
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7379
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7383
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7387
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7391
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7394
		{
			return unimplemented(sqllex, "func const")
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7396
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7400
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7403
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7405
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7409
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7413
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7420
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7424
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7433
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7444
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7454
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7550
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7557
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7561
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7565
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7579
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7583
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7587
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7600
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7618
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7628
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7632
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7646
		{
			sqlVAL.str = ""
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7652
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7656
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
