// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:594
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9676

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1064,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 894,
	199, 894,
	214, 249,
	294, 249,
	302, 734,
	329, 249,
	338, 734,
	377, 734,
	401, 249,
	425, 734,
	-2, 0,
	-1, 74,
	214, 253,
	-2, 0,
	-1, 75,
	109, 1064,
	188, 1064,
	411, 1064,
	412, 1064,
	-2, 0,
	-1, 87,
	122, 1038,
	138, 1038,
	196, 1038,
	225, 1038,
	258, 1038,
	268, 1038,
	406, 1038,
	-2, 1016,
	-1, 117,
	128, 655,
	213, 655,
	296, 635,
	347, 635,
	394, 655,
	-2, 0,
	-1, 118,
	4, 1066,
	21, 1066,
	22, 1066,
	23, 1066,
	24, 1066,
	25, 1066,
	27, 1066,
	33, 1066,
	38, 1066,
	39, 1066,
	40, 1066,
	41, 1066,
	42, 1066,
	43, 1066,
	44, 1066,
	45, 1066,
	46, 1066,
	47, 1066,
	48, 1066,
	49, 1066,
	51, 1066,
	52, 1066,
	53, 1066,
	54, 1066,
	55, 1066,
	56, 1066,
	59, 1066,
	60, 1066,
	61, 1066,
	62, 1066,
	64, 1066,
	65, 1066,
	69, 1066,
	70, 1066,
	71, 1066,
	72, 1066,
	73, 1066,
	74, 1066,
	76, 1066,
	77, 1066,
	78, 1066,
	79, 1066,
	81, 1066,
	83, 1066,
	84, 1066,
	85, 1066,
	88, 1066,
	89, 1066,
	97, 1066,
	98, 1066,
	99, 1066,
	100, 1066,
	101, 1066,
	102, 1066,
	103, 1066,
	104, 1066,
	106, 1066,
	108, 1066,
	109, 1066,
	111, 1066,
	114, 1066,
	115, 1066,
	116, 1066,
	118, 1066,
	120, 1066,
	121, 1066,
	123, 1066,
	124, 1066,
	125, 1066,
	126, 1066,
	127, 1066,
	128, 1066,
	129, 1066,
	130, 1066,
	131, 1066,
	132, 1066,
	133, 1066,
	134, 1066,
	135, 1066,
	137, 1066,
	143, 1066,
	144, 1066,
	145, 1066,
	146, 1066,
	147, 1066,
	148, 1066,
	150, 1066,
	152, 1066,
	156, 1066,
	157, 1066,
	159, 1066,
	160, 1066,
	162, 1066,
	163, 1066,
	165, 1066,
	166, 1066,
	167, 1066,
	168, 1066,
	169, 1066,
	170, 1066,
	171, 1066,
	172, 1066,
	174, 1066,
	175, 1066,
	177, 1066,
	178, 1066,
	179, 1066,
	182, 1066,
	183, 1066,
	184, 1066,
	185, 1066,
	188, 1066,
	189, 1066,
	190, 1066,
	191, 1066,
	192, 1066,
	193, 1066,
	194, 1066,
	195, 1066,
	197, 1066,
	199, 1066,
	201, 1066,
	203, 1066,
	204, 1066,
	205, 1066,
	207, 1066,
	208, 1066,
	211, 1066,
	212, 1066,
	213, 1066,
	214, 1066,
	216, 1066,
	217, 1066,
	219, 1066,
	220, 1066,
	222, 1066,
	223, 1066,
	226, 1066,
	227, 1066,
	230, 1066,
	231, 1066,
	232, 1066,
	234, 1066,
	235, 1066,
	236, 1066,
	237, 1066,
	238, 1066,
	239, 1066,
	240, 1066,
	241, 1066,
	242, 1066,
	243, 1066,
	245, 1066,
	246, 1066,
	247, 1066,
	248, 1066,
	250, 1066,
	252, 1066,
	254, 1066,
	255, 1066,
	256, 1066,
	257, 1066,
	259, 1066,
	260, 1066,
	261, 1066,
	263, 1066,
	264, 1066,
	265, 1066,
	266, 1066,
	269, 1066,
	270, 1066,
	271, 1066,
	273, 1066,
	275, 1066,
	276, 1066,
	277, 1066,
	278, 1066,
	279, 1066,
	280, 1066,
	281, 1066,
	282, 1066,
	283, 1066,
	284, 1066,
	286, 1066,
	287, 1066,
	288, 1066,
	289, 1066,
	290, 1066,
	291, 1066,
	293, 1066,
	295, 1066,
	296, 1066,
	297, 1066,
	298, 1066,
	299, 1066,
	300, 1066,
	301, 1066,
	302, 1066,
	303, 1066,
	305, 1066,
	306, 1066,
	307, 1066,
	308, 1066,
	309, 1066,
	311, 1066,
	312, 1066,
	313, 1066,
	314, 1066,
	315, 1066,
	316, 1066,
	317, 1066,
	318, 1066,
	320, 1066,
	322, 1066,
	323, 1066,
	324, 1066,
	325, 1066,
	326, 1066,
	327, 1066,
	329, 1066,
	330, 1066,
	331, 1066,
	332, 1066,
	333, 1066,
	334, 1066,
	335, 1066,
	336, 1066,
	338, 1066,
	339, 1066,
	340, 1066,
	341, 1066,
	342, 1066,
	343, 1066,
	344, 1066,
	345, 1066,
	346, 1066,
	347, 1066,
	349, 1066,
	350, 1066,
	351, 1066,
	352, 1066,
	353, 1066,
	355, 1066,
	356, 1066,
	357, 1066,
	358, 1066,
	359, 1066,
	361, 1066,
	362, 1066,
	363, 1066,
	364, 1066,
	365, 1066,
	366, 1066,
	367, 1066,
	368, 1066,
	369, 1066,
	370, 1066,
	371, 1066,
	372, 1066,
	374, 1066,
	375, 1066,
	376, 1066,
	378, 1066,
	379, 1066,
	380, 1066,
	381, 1066,
	382, 1066,
	383, 1066,
	384, 1066,
	386, 1066,
	387, 1066,
	388, 1066,
	389, 1066,
	390, 1066,
	392, 1066,
	394, 1066,
	395, 1066,
	396, 1066,
	397, 1066,
	398, 1066,
	400, 1066,
	401, 1066,
	402, 1066,
	404, 1066,
	405, 1066,
	408, 1066,
	409, 1066,
	410, 1066,
	411, 1066,
	412, 1066,
	413, 1066,
	415, 1066,
	417, 1066,
	418, 1066,
	419, 1066,
	420, 1066,
	421, 1066,
	422, 1066,
	423, 1066,
	425, 1066,
	426, 1066,
	427, 1066,
	432, 1066,
	433, 1066,
	434, 1066,
	435, 1066,
	436, 1066,
	437, 1066,
	-2, 0,
	-1, 119,
	1, 947,
	203, 947,
	293, 947,
	300, 947,
	440, 947,
	463, 947,
	-2, 0,
	-1, 121,
	1, 947,
	463, 947,
	-2, 0,
	-1, 122,
	1, 947,
	463, 947,
	-2, 0,
	-1, 123,
	1, 951,
	463, 951,
	-2, 0,
	-1, 148,
	122, 1037,
	138, 1037,
	196, 1037,
	225, 1037,
	258, 1037,
	268, 1037,
	406, 1037,
	-2, 1025,
	-1, 181,
	4, 1073,
	5, 1073,
	6, 1073,
	7, 1073,
	8, 1073,
	9, 1073,
	10, 1073,
	21, 1073,
	22, 1073,
	23, 1073,
	24, 1073,
	25, 1073,
	27, 1073,
	33, 1073,
	34, 1073,
	38, 1073,
	39, 1073,
	40, 1073,
	41, 1073,
	42, 1073,
	43, 1073,
	44, 1073,
	45, 1073,
	46, 1073,
	47, 1073,
	48, 1073,
	49, 1073,
	51, 1073,
	52, 1073,
	53, 1073,
	54, 1073,
	55, 1073,
	56, 1073,
	57, 1073,
	58, 1073,
	59, 1073,
	60, 1073,
	61, 1073,
	62, 1073,
	64, 1073,
	65, 1073,
	67, 1073,
	69, 1073,
	70, 1073,
	71, 1073,
	72, 1073,
	73, 1073,
	74, 1073,
	76, 1073,
	77, 1073,
	78, 1073,
	79, 1073,
	81, 1073,
	83, 1073,
	84, 1073,
	85, 1073,
	87, 1073,
	88, 1073,
	89, 1073,
	90, 1073,
	91, 1073,
	92, 1073,
	93, 1073,
	94, 1073,
	95, 1073,
	96, 1073,
	97, 1073,
	98, 1073,
	99, 1073,
	100, 1073,
	101, 1073,
	102, 1073,
	103, 1073,
	104, 1073,
	105, 1073,
	106, 1073,
	108, 1073,
	109, 1073,
	111, 1073,
	114, 1073,
	115, 1073,
	116, 1073,
	118, 1073,
	120, 1073,
	121, 1073,
	123, 1073,
	124, 1073,
	125, 1073,
	126, 1073,
	127, 1073,
	128, 1073,
	129, 1073,
	130, 1073,
	131, 1073,
	132, 1073,
	133, 1073,
	134, 1073,
	135, 1073,
	136, 1073,
	137, 1073,
	143, 1073,
	144, 1073,
	145, 1073,
	146, 1073,
	147, 1073,
	148, 1073,
	150, 1073,
	152, 1073,
	155, 1073,
	156, 1073,
	157, 1073,
	159, 1073,
	160, 1073,
	162, 1073,
	163, 1073,
	165, 1073,
	166, 1073,
	167, 1073,
	168, 1073,
	169, 1073,
	170, 1073,
	171, 1073,
	172, 1073,
	173, 1073,
	174, 1073,
	175, 1073,
	177, 1073,
	178, 1073,
	179, 1073,
	182, 1073,
	183, 1073,
	184, 1073,
	185, 1073,
	187, 1073,
	188, 1073,
	189, 1073,
	190, 1073,
	191, 1073,
	192, 1073,
	193, 1073,
	194, 1073,
	195, 1073,
	197, 1073,
	199, 1073,
	200, 1073,
	201, 1073,
	202, 1073,
	203, 1073,
	204, 1073,
	205, 1073,
	206, 1073,
	207, 1073,
	208, 1073,
	211, 1073,
	212, 1073,
	213, 1073,
	214, 1073,
	216, 1073,
	217, 1073,
	219, 1073,
	220, 1073,
	221, 1073,
	222, 1073,
	223, 1073,
	224, 1073,
	226, 1073,
	227, 1073,
	230, 1073,
	231, 1073,
	232, 1073,
	234, 1073,
	235, 1073,
	236, 1073,
	237, 1073,
	238, 1073,
	239, 1073,
	240, 1073,
	241, 1073,
	242, 1073,
	243, 1073,
	244, 1073,
	245, 1073,
	246, 1073,
	247, 1073,
	248, 1073,
	249, 1073,
	250, 1073,
	251, 1073,
	252, 1073,
	253, 1073,
	254, 1073,
	255, 1073,
	256, 1073,
	257, 1073,
	259, 1073,
	260, 1073,
	261, 1073,
	264, 1073,
	265, 1073,
	266, 1073,
	269, 1073,
	270, 1073,
	271, 1073,
	272, 1073,
	273, 1073,
	274, 1073,
	275, 1073,
	276, 1073,
	277, 1073,
	278, 1073,
	279, 1073,
	280, 1073,
	281, 1073,
	282, 1073,
	283, 1073,
	284, 1073,
	286, 1073,
	287, 1073,
	288, 1073,
	289, 1073,
	290, 1073,
	291, 1073,
	293, 1073,
	295, 1073,
	296, 1073,
	297, 1073,
	298, 1073,
	299, 1073,
	300, 1073,
	301, 1073,
	302, 1073,
	303, 1073,
	305, 1073,
	306, 1073,
	307, 1073,
	308, 1073,
	309, 1073,
	311, 1073,
	312, 1073,
	313, 1073,
	314, 1073,
	315, 1073,
	316, 1073,
	317, 1073,
	318, 1073,
	320, 1073,
	321, 1073,
	322, 1073,
	323, 1073,
	324, 1073,
	325, 1073,
	326, 1073,
	327, 1073,
	329, 1073,
	330, 1073,
	331, 1073,
	332, 1073,
	333, 1073,
	334, 1073,
	335, 1073,
	336, 1073,
	338, 1073,
	339, 1073,
	340, 1073,
	341, 1073,
	342, 1073,
	343, 1073,
	344, 1073,
	345, 1073,
	346, 1073,
	347, 1073,
	348, 1073,
	349, 1073,
	350, 1073,
	351, 1073,
	352, 1073,
	353, 1073,
	354, 1073,
	355, 1073,
	356, 1073,
	357, 1073,
	358, 1073,
	359, 1073,
	361, 1073,
	362, 1073,
	363, 1073,
	364, 1073,
	365, 1073,
	366, 1073,
	367, 1073,
	368, 1073,
	369, 1073,
	370, 1073,
	371, 1073,
	372, 1073,
	374, 1073,
	375, 1073,
	376, 1073,
	378, 1073,
	379, 1073,
	380, 1073,
	381, 1073,
	382, 1073,
	383, 1073,
	384, 1073,
	386, 1073,
	387, 1073,
	388, 1073,
	389, 1073,
	390, 1073,
	392, 1073,
	394, 1073,
	395, 1073,
	396, 1073,
	397, 1073,
	398, 1073,
	399, 1073,
	400, 1073,
	401, 1073,
	402, 1073,
	404, 1073,
	405, 1073,
	407, 1073,
	408, 1073,
	409, 1073,
	410, 1073,
	411, 1073,
	412, 1073,
	413, 1073,
	414, 1073,
	415, 1073,
	417, 1073,
	418, 1073,
	419, 1073,
	420, 1073,
	421, 1073,
	422, 1073,
	423, 1073,
	425, 1073,
	426, 1073,
	427, 1073,
	432, 1073,
	433, 1073,
	434, 1073,
	435, 1073,
	436, 1073,
	437, 1073,
	438, 1073,
	444, 1073,
	451, 1073,
	452, 1073,
	453, 1073,
	460, 1073,
	464, 1073,
	-2, 0,
	-1, 557,
	154, 1746,
	391, 1746,
	443, 1746,
	462, 1746,
	-2, 0,
	-1, 558,
	154, 1824,
	391, 1824,
	443, 1824,
	462, 1824,
	-2, 0,
	-1, 559,
	154, 1735,
	391, 1735,
	443, 1735,
	462, 1735,
	-2, 0,
	-1, 561,
	154, 1915,
	391, 1915,
	443, 1915,
	462, 1915,
	-2, 0,
	-1, 563,
	154, 1945,
	391, 1945,
	443, 1945,
	462, 1945,
	-2, 0,
	-1, 570,
	154, 1835,
	391, 1835,
	443, 1835,
	462, 1835,
	-2, 506,
	-1, 587,
	462, 1693,
	465, 1693,
	-2, 703,
	-1, 588,
	462, 1695,
	465, 1695,
	-2, 704,
	-1, 589,
	462, 1694,
	465, 1694,
	-2, 705,
	-1, 590,
	465, 1640,
	-2, 706,
	-1, 738,
	296, 636,
	347, 636,
	-2, 0,
	-1, 739,
	296, 635,
	347, 635,
	-2, 586,
	-1, 742,
	1, 665,
	459, 665,
	461, 665,
	463, 665,
	-2, 0,
	-1, 743,
	1, 702,
	151, 702,
	459, 702,
	461, 702,
	463, 702,
	-2, 0,
	-1, 751,
	1, 639,
	459, 639,
	461, 639,
	463, 639,
	-2, 0,
	-1, 754,
	1, 665,
	459, 665,
	461, 665,
	463, 665,
	-2, 0,
	-1, 755,
	1, 667,
	459, 667,
	461, 667,
	463, 667,
	-2, 0,
	-1, 756,
	1, 670,
	459, 670,
	461, 670,
	463, 670,
	-2, 0,
	-1, 760,
	1, 684,
	459, 684,
	461, 684,
	463, 684,
	-2, 0,
	-1, 761,
	1, 686,
	459, 686,
	461, 686,
	463, 686,
	-2, 0,
	-1, 804,
	138, 1075,
	225, 1075,
	258, 1075,
	-2, 1025,
	-1, 820,
	138, 1074,
	225, 1074,
	258, 1074,
	-2, 1025,
	-1, 844,
	462, 1692,
	-2, 514,
	-1, 873,
	460, 1684,
	-2, 1675,
	-1, 879,
	5, 1209,
	-2, 1726,
	-1, 880,
	5, 1210,
	-2, 1730,
	-1, 881,
	5, 1211,
	-2, 1729,
	-1, 882,
	5, 1212,
	-2, 1942,
	-1, 883,
	5, 1213,
	-2, 1837,
	-1, 884,
	5, 1214,
	-2, 1907,
	-1, 885,
	5, 1215,
	-2, 1909,
	-1, 886,
	5, 1216,
	-2, 1922,
	-1, 887,
	5, 1217,
	-2, 1910,
	-1, 888,
	5, 1218,
	-2, 1911,
	-1, 889,
	5, 1219,
	-2, 1725,
	-1, 890,
	5, 1220,
	-2, 1958,
	-1, 891,
	5, 1221,
	-2, 1799,
	-1, 892,
	5, 1222,
	-2, 1846,
	-1, 893,
	5, 1223,
	-2, 1848,
	-1, 894,
	5, 1224,
	-2, 1803,
	-1, 895,
	5, 1225,
	460, 1702,
	-2, 1693,
	-1, 896,
	5, 1281,
	460, 1281,
	-2, 1993,
	-1, 901,
	460, 1703,
	-2, 1694,
	-1, 903,
	5, 1229,
	-2, 1991,
	-1, 904,
	5, 1230,
	-2, 1992,
	-1, 905,
	5, 1231,
	-2, 1802,
	-1, 906,
	5, 1232,
	-2, 2004,
	-1, 907,
	5, 1233,
	-2, 1804,
	-1, 908,
	5, 1234,
	-2, 1805,
	-1, 909,
	5, 1235,
	-2, 1806,
	-1, 910,
	5, 1236,
	-2, 1973,
	-1, 911,
	5, 1237,
	-2, 2002,
	-1, 912,
	5, 1238,
	-2, 1782,
	-1, 913,
	5, 1239,
	-2, 1783,
	-1, 914,
	5, 1253,
	-2, 1985,
	-1, 916,
	5, 1228,
	-2, 1981,
	-1, 917,
	5, 1228,
	-2, 1980,
	-1, 918,
	5, 1228,
	-2, 1997,
	-1, 919,
	5, 1245,
	-2, 1975,
	-1, 920,
	5, 1246,
	-2, 1727,
	-1, 921,
	5, 1256,
	-2, 1974,
	-1, 922,
	5, 1258,
	-2, 2013,
	-1, 924,
	5, 1269,
	-2, 1756,
	-1, 925,
	5, 1280,
	-2, 2006,
	-1, 926,
	5, 1272,
	-2, 2007,
	-1, 927,
	5, 1280,
	-2, 2008,
	-1, 928,
	5, 1276,
	-2, 2009,
	-1, 929,
	5, 1195,
	-2, 1812,
	-1, 930,
	5, 1196,
	-2, 1813,
	-1, 931,
	462, 1690,
	-2, 1674,
	-1, 932,
	460, 2033,
	-2, 1691,
	-1, 952,
	5, 1264,
	-2, 1933,
	-1, 969,
	5, 1263,
	-2, 2014,
	-1, 979,
	5, 1265,
	426, 1265,
	-2, 1976,
	-1, 980,
	5, 1266,
	426, 1266,
	-2, 1977,
	-1, 1016,
	460, 1702,
	-2, 1693,
	-1, 1043,
	154, 1945,
	391, 1945,
	443, 1945,
	462, 1945,
	-2, 0,
	-1, 1046,
	1, 492,
	463, 492,
	-2, 959,
	-1, 1166,
	311, 1671,
	453, 1671,
	-2, 1670,
	-1, 1189,
	464, 1671,
	-2, 1672,
	-1, 1224,
	302, 734,
	425, 734,
	-2, 248,
	-1, 1244,
	282, 1062,
	-2, 867,
	-1, 1253,
	262, 1697,
	-2, 0,
	-1, 1317,
	1, 367,
	459, 367,
	461, 367,
	463, 367,
	-2, 1036,
	-1, 1320,
	4, 2012,
	11, 2012,
	12, 2012,
	14, 2012,
	15, 2012,
	16, 2012,
	17, 2012,
	18, 2012,
	19, 2012,
	21, 2012,
	22, 2012,
	23, 2012,
	24, 2012,
	25, 2012,
	27, 2012,
	30, 2012,
	31, 2012,
	33, 2012,
	35, 2012,
	38, 2012,
	39, 2012,
	40, 2012,
	41, 2012,
	42, 2012,
	43, 2012,
	44, 2012,
	45, 2012,
	46, 2012,
	47, 2012,
	48, 2012,
	49, 2012,
	51, 2012,
	52, 2012,
	53, 2012,
	54, 2012,
	55, 2012,
	56, 2012,
	59, 2012,
	60, 2012,
	61, 2012,
	62, 2012,
	64, 2012,
	65, 2012,
	66, 2012,
	69, 2012,
	70, 2012,
	71, 2012,
	72, 2012,
	73, 2012,
	74, 2012,
	75, 2012,
	76, 2012,
	77, 2012,
	78, 2012,
	79, 2012,
	81, 2012,
	82, 2012,
	83, 2012,
	84, 2012,
	85, 2012,
	87, 2012,
	88, 2012,
	89, 2012,
	97, 2012,
	98, 2012,
	99, 2012,
	100, 2012,
	101, 2012,
	102, 2012,
	103, 2012,
	104, 2012,
	106, 2012,
	108, 2012,
	109, 2012,
	111, 2012,
	114, 2012,
	115, 2012,
	116, 2012,
	118, 2012,
	120, 2012,
	121, 2012,
	123, 2012,
	124, 2012,
	125, 2012,
	126, 2012,
	127, 2012,
	128, 2012,
	129, 2012,
	130, 2012,
	131, 2012,
	132, 2012,
	133, 2012,
	134, 2012,
	135, 2012,
	139, 2012,
	140, 2012,
	141, 2012,
	142, 2012,
	143, 2012,
	144, 2012,
	145, 2012,
	146, 2012,
	147, 2012,
	148, 2012,
	149, 2012,
	150, 2012,
	152, 2012,
	155, 2012,
	156, 2012,
	157, 2012,
	159, 2012,
	160, 2012,
	162, 2012,
	163, 2012,
	165, 2012,
	166, 2012,
	167, 2012,
	168, 2012,
	169, 2012,
	170, 2012,
	171, 2012,
	172, 2012,
	173, 2012,
	174, 2012,
	175, 2012,
	176, 2012,
	177, 2012,
	178, 2012,
	179, 2012,
	180, 2012,
	181, 2012,
	183, 2012,
	184, 2012,
	185, 2012,
	187, 2012,
	188, 2012,
	189, 2012,
	190, 2012,
	191, 2012,
	192, 2012,
	193, 2012,
	194, 2012,
	195, 2012,
	197, 2012,
	199, 2012,
	200, 2012,
	201, 2012,
	202, 2012,
	203, 2012,
	204, 2012,
	205, 2012,
	206, 2012,
	207, 2012,
	208, 2012,
	209, 2012,
	210, 2012,
	211, 2012,
	212, 2012,
	213, 2012,
	214, 2012,
	216, 2012,
	217, 2012,
	219, 2012,
	220, 2012,
	221, 2012,
	222, 2012,
	223, 2012,
	224, 2012,
	226, 2012,
	227, 2012,
	230, 2012,
	231, 2012,
	232, 2012,
	233, 2012,
	234, 2012,
	235, 2012,
	236, 2012,
	237, 2012,
	238, 2012,
	239, 2012,
	240, 2012,
	241, 2012,
	242, 2012,
	243, 2012,
	244, 2012,
	245, 2012,
	246, 2012,
	247, 2012,
	248, 2012,
	251, 2012,
	252, 2012,
	254, 2012,
	255, 2012,
	256, 2012,
	257, 2012,
	259, 2012,
	260, 2012,
	261, 2012,
	264, 2012,
	265, 2012,
	266, 2012,
	267, 2012,
	269, 2012,
	270, 2012,
	271, 2012,
	273, 2012,
	275, 2012,
	276, 2012,
	277, 2012,
	278, 2012,
	279, 2012,
	280, 2012,
	281, 2012,
	282, 2012,
	283, 2012,
	284, 2012,
	286, 2012,
	287, 2012,
	288, 2012,
	289, 2012,
	290, 2012,
	291, 2012,
	293, 2012,
	295, 2012,
	296, 2012,
	297, 2012,
	298, 2012,
	299, 2012,
	300, 2012,
	301, 2012,
	302, 2012,
	303, 2012,
	305, 2012,
	306, 2012,
	307, 2012,
	308, 2012,
	309, 2012,
	310, 2012,
	311, 2012,
	312, 2012,
	313, 2012,
	314, 2012,
	315, 2012,
	316, 2012,
	317, 2012,
	318, 2012,
	320, 2012,
	321, 2012,
	322, 2012,
	323, 2012,
	324, 2012,
	325, 2012,
	326, 2012,
	327, 2012,
	328, 2012,
	329, 2012,
	330, 2012,
	331, 2012,
	332, 2012,
	333, 2012,
	334, 2012,
	335, 2012,
	336, 2012,
	338, 2012,
	339, 2012,
	340, 2012,
	341, 2012,
	342, 2012,
	343, 2012,
	344, 2012,
	345, 2012,
	346, 2012,
	347, 2012,
	349, 2012,
	350, 2012,
	351, 2012,
	352, 2012,
	353, 2012,
	354, 2012,
	355, 2012,
	356, 2012,
	357, 2012,
	358, 2012,
	359, 2012,
	361, 2012,
	362, 2012,
	363, 2012,
	364, 2012,
	365, 2012,
	366, 2012,
	367, 2012,
	368, 2012,
	369, 2012,
	370, 2012,
	371, 2012,
	372, 2012,
	374, 2012,
	375, 2012,
	376, 2012,
	378, 2012,
	379, 2012,
	380, 2012,
	381, 2012,
	382, 2012,
	383, 2012,
	384, 2012,
	386, 2012,
	387, 2012,
	388, 2012,
	389, 2012,
	390, 2012,
	392, 2012,
	394, 2012,
	395, 2012,
	396, 2012,
	397, 2012,
	398, 2012,
	400, 2012,
	401, 2012,
	402, 2012,
	404, 2012,
	405, 2012,
	408, 2012,
	409, 2012,
	410, 2012,
	411, 2012,
	412, 2012,
	413, 2012,
	415, 2012,
	417, 2012,
	418, 2012,
	419, 2012,
	420, 2012,
	421, 2012,
	422, 2012,
	423, 2012,
	425, 2012,
	426, 2012,
	427, 2012,
	432, 2012,
	433, 2012,
	434, 2012,
	435, 2012,
	436, 2012,
	437, 2012,
	438, 2012,
	439, 2012,
	441, 2012,
	442, 2012,
	443, 2012,
	444, 2012,
	445, 2012,
	446, 2012,
	448, 2012,
	449, 2012,
	450, 2012,
	451, 2012,
	452, 2012,
	453, 2012,
	454, 2012,
	455, 2012,
	456, 2012,
	458, 2012,
	461, 2012,
	462, 2012,
	464, 2012,
	465, 2012,
	-2, 0,
	-1, 1325,
	154, 1915,
	391, 1915,
	443, 1915,
	462, 1915,
	-2, 0,
	-1, 1354,
	296, 636,
	347, 636,
	-2, 0,
	-1, 1377,
	1, 631,
	459, 631,
	461, 631,
	463, 631,
	-2, 0,
	-1, 1378,
	1, 656,
	459, 656,
	461, 656,
	463, 656,
	-2, 0,
	-1, 1379,
	1, 638,
	459, 638,
	461, 638,
	463, 638,
	-2, 0,
	-1, 1381,
	1, 642,
	459, 642,
	461, 642,
	463, 642,
	-2, 0,
	-1, 1406,
	1, 1965,
	459, 1965,
	461, 1965,
	462, 1965,
	463, 1965,
	-2, 682,
	-1, 1407,
	1, 1912,
	459, 1912,
	461, 1912,
	462, 1912,
	463, 1912,
	-2, 683,
	-1, 1420,
	1, 954,
	463, 954,
	-2, 959,
	-1, 1425,
	138, 1074,
	225, 1074,
	258, 1074,
	-2, 1025,
	-1, 1523,
	122, 1038,
	138, 1038,
	196, 1038,
	225, 1038,
	258, 1038,
	268, 1038,
	406, 1038,
	-2, 1437,
	-1, 1576,
	461, 1575,
	-2, 0,
	-1, 1618,
	122, 1038,
	138, 1038,
	196, 1038,
	225, 1038,
	258, 1038,
	268, 1038,
	406, 1038,
	-2, 1146,
	-1, 1667,
	460, 1268,
	-2, 1256,
	-1, 1711,
	1, 494,
	463, 494,
	-2, 959,
	-1, 1909,
	1, 633,
	459, 633,
	461, 633,
	463, 633,
	-2, 0,
	-1, 1910,
	1, 658,
	459, 658,
	461, 658,
	463, 658,
	-2, 0,
	-1, 1998,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1317,
	-1, 1999,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1318,
	-1, 2000,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1319,
	-1, 2001,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1320,
	-1, 2002,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1321,
	-1, 2003,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1322,
	-1, 2004,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1323,
	-1, 2005,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1324,
	-1, 2017,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1336,
	-1, 2018,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1337,
	-1, 2019,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1338,
	-1, 2022,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1343,
	-1, 2028,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1347,
	-1, 2030,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1355,
	-1, 2031,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1356,
	-1, 2032,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1357,
	-1, 2033,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1358,
	-1, 2127,
	5, 1225,
	154, 1586,
	460, 1702,
	-2, 1693,
	-1, 2128,
	154, 1587,
	-2, 1969,
	-1, 2129,
	154, 1588,
	-2, 1834,
	-1, 2130,
	154, 1589,
	-2, 1757,
	-1, 2131,
	154, 1590,
	-2, 1793,
	-1, 2132,
	154, 1591,
	-2, 1832,
	-1, 2133,
	154, 1592,
	-2, 1906,
	-1, 2209,
	1, 1147,
	2, 1147,
	87, 1147,
	122, 1147,
	138, 1147,
	151, 1147,
	155, 1147,
	161, 1147,
	164, 1147,
	187, 1147,
	196, 1147,
	206, 1147,
	221, 1147,
	225, 1147,
	244, 1147,
	258, 1147,
	262, 1147,
	268, 1147,
	319, 1147,
	321, 1147,
	406, 1147,
	416, 1147,
	429, 1147,
	430, 1147,
	431, 1147,
	440, 1147,
	459, 1147,
	461, 1147,
	463, 1147,
	465, 1147,
	-2, 1146,
	-1, 2214,
	460, 1676,
	-2, 1688,
	-1, 2235,
	460, 1267,
	-2, 1257,
	-1, 2475,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1345,
	-1, 2476,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1349,
	-1, 2482,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1351,
	-1, 2664,
	203, 959,
	293, 959,
	300, 959,
	440, 959,
	-2, 491,
	-1, 2756,
	282, 1062,
	-2, 867,
	-1, 2838,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1353,
	-1, 2845,
	200, 0,
	202, 0,
	251, 0,
	-2, 1372,
	-1, 2908,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1401,
	-1, 2909,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1402,
	-1, 2910,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1403,
	-1, 2914,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1407,
	-1, 2915,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1408,
	-1, 2916,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1409,
	-1, 2960,
	460, 1677,
	-2, 1689,
	-1, 3048,
	462, 2115,
	-2, 1002,
	-1, 3095,
	200, 0,
	202, 0,
	251, 0,
	-2, 1373,
	-1, 3098,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1376,
	-1, 3099,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1378,
	-1, 3258,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1377,
	-1, 3259,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1379,
	-1, 3269,
	200, 0,
	-2, 1410,
	-1, 3375,
	200, 0,
	-2, 1411,
	-1, 3491,
	43, 0,
	173, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1972,
}

const sqlPrivate = 57344

const sqlLast = 76274

var sqlAct = [...]int{

	901, 3490, 3585, 3326, 3299, 3302, 3500, 3201, 3575, 2598,
	2158, 3460, 3469, 3457, 2743, 3444, 3501, 3333, 3502, 2980,
	1017, 3288, 2374, 3379, 2876, 3489, 3538, 3081, 3225, 830,
	2599, 1309, 1985, 3040, 1052, 3035, 3249, 3338, 1170, 213,
	3157, 213, 213, 2681, 213, 213, 213, 213, 213, 2045,
	2765, 213, 2772, 1642, 2739, 1305, 1438, 2264, 821, 589,
	3230, 3022, 568, 1759, 2981, 2767, 1521, 2340, 1071, 3273,
	2407, 1613, 2201, 2338, 2363, 2409, 2343, 213, 2640, 1195,
	2417, 589, 1009, 2626, 1885, 2613, 3129, 1842, 2584, 1611,
	2468, 1845, 3080, 2406, 1863, 2400, 2398, 2322, 2375, 2602,
	1585, 1361, 1834, 2096, 1835, 2931, 2266, 2202, 829, 141,
	2503, 1982, 2323, 1643, 1163, 2604, 1768, 3380, 2076, 2583,
	2058, 1531, 1549, 1978, 2464, 686, 3327, 4, 1182, 1797,
	2416, 1793, 1786, 2341, 897, 1746, 1744, 1059, 2645, 2176,
	1420, 1586, 2088, 2741, 2042, 86, 1179, 2155, 2299, 1172,
	1001, 817, 1318, 1831, 1302, 1238, 1292, 2410, 2368, 1048,
	2070, 2200, 207, 590, 2204, 591, 2298, 1004, 2166, 1544,
	2184, 983, 2059, 2256, 206, 1595, 213, 213, 32, 1512,
	148, 536, 1439, 2123, 141, 1437, 149, 552, 585, 1830,
	562, 1851, 661, 1268, 630, 1316, 1192, 1758, 857, 539,
	1006, 1443, 37, 680, 36, 522, 981, 34, 25, 544,
	23, 21, 1419, 733, 749, 1250, 2949, 2499, 2950, 1886,
	1312, 594, 1865, 2600, 1865, 1451, 1452, 547, 1056, 1865,
	3615, 3606, 3605, 597, 2175, 2175, 2175, 858, 3584, 825,
	205, 2782, 1802, 594, 3567, 1482, 3565, 3524, 3171, 825,
	3171, 3525, 1454, 2422, 3522, 597, 1056, 3520, 2175, 2781,
	820, 2175, 3517, 3514, 3511, 2175, 3518, 3515, 1802, 696,
	3440, 3487, 3486, 3363, 1380, 1802, 1802, 1213, 3485, 3482,
	1453, 2935, 1877, 1877, 3481, 1522, 3439, 3429, 1877, 923,
	2228, 3171, 2662, 3428, 3422, 2168, 826, 3171, 1802, 998,
	3416, 3414, 3377, 1877, 3171, 3171, 2228, 1207, 3360, 3357,
	3316, 3315, 1802, 3171, 1802, 1802, 3308, 3307, 2518, 3279,
	1802, 3171, 805, 1802, 2519, 3260, 3247, 3238, 804, 2228,
	1877, 2795, 3198, 3188, 3170, 3097, 2175, 2175, 3171, 2228,
	984, 984, 3056, 2141, 3050, 3020, 2811, 2955, 2811, 3021,
	2945, 2956, 2935, 2938, 2946, 2556, 2557, 2175, 2869, 2167,
	2857, 812, 1802, 1459, 2175, 2810, 2802, 2734, 2597, 2811,
	2803, 1877, 2175, 2595, 2594, 2548, 2531, 2175, 2175, 2175,
	2532, 2520, 2396, 985, 2395, 2175, 1881, 2241, 1881, 2224,
	1033, 2175, 2227, 2073, 1481, 1483, 2228, 2222, 2216, 2174,
	1880, 2175, 1802, 2175, 1881, 3189, 1451, 1452, 75, 1484,
	1485, 1486, 1494, 1495, 1496, 1028, 987, 1802, 988, 2803,
	181, 2313, 2255, 1802, 1763, 1487, 1482, 1717, 2795, 2350,
	2467, 1864, 1801, 1454, 2253, 1581, 2175, 1191, 1500, 1612,
	3007, 2833, 2820, 1796, 1212, 2783, 2502, 1474, 2195, 1363,
	2194, 2193, 1451, 1452, 2192, 2191, 989, 986, 811, 2074,
	183, 1453, 1737, 181, 2784, 2114, 810, 809, 808, 807,
	1473, 803, 802, 801, 1206, 800, 799, 1470, 798, 1454,
	2446, 3507, 797, 1866, 796, 1866, 795, 1522, 794, 1029,
	1866, 1451, 1452, 2562, 793, 792, 791, 731, 730, 729,
	728, 727, 726, 183, 182, 725, 724, 1453, 723, 722,
	721, 1482, 720, 900, 175, 719, 718, 717, 1454, 716,
	715, 714, 176, 713, 712, 711, 710, 213, 709, 708,
	2075, 2072, 707, 706, 1476, 1477, 1478, 1479, 705, 695,
	694, 652, 1475, 150, 1459, 651, 1453, 182, 610, 609,
	3488, 608, 2781, 600, 599, 213, 2556, 2557, 598, 2574,
	2575, 2576, 213, 575, 574, 573, 572, 556, 1491, 203,
	202, 1501, 201, 200, 199, 1481, 1483, 2572, 213, 1074,
	213, 213, 1175, 213, 1074, 213, 150, 198, 197, 3146,
	1459, 196, 2371, 213, 213, 1497, 1058, 1498, 195, 194,
	1063, 2356, 193, 1029, 1468, 1469, 2167, 192, 191, 181,
	190, 189, 181, 188, 181, 2556, 2557, 187, 213, 1489,
	2571, 186, 185, 184, 3108, 2953, 2812, 2077, 1474, 1459,
	117, 1873, 213, 1864, 1175, 1175, 213, 213, 1953, 213,
	1185, 2643, 181, 2525, 2514, 2328, 1499, 2217, 2208, 183,
	1742, 213, 183, 2112, 183, 2110, 2108, 2106, 1614, 213,
	1481, 1483, 1488, 1462, 1463, 1455, 1456, 1457, 1458, 1460,
	1461, 1628, 2573, 213, 213, 213, 213, 213, 1175, 1175,
	1450, 3410, 183, 1175, 1538, 1533, 213, 1175, 213, 213,
	1197, 2556, 2557, 182, 2562, 1888, 182, 1012, 182, 1065,
	1382, 1029, 213, 175, 1046, 1480, 175, 1019, 175, 3370,
	1313, 176, 1552, 1474, 176, 3366, 176, 3298, 1551, 1552,
	3364, 1451, 1452, 1475, 3239, 1551, 182, 2071, 1067, 3234,
	1160, 1165, 150, 3382, 3150, 150, 175, 150, 1175, 1555,
	1072, 1482, 3128, 2318, 176, 1183, 1550, 856, 1454, 1492,
	3127, 2233, 1041, 2562, 3115, 594, 1194, 3114, 1193, 3113,
	213, 3112, 3106, 1887, 1201, 150, 2806, 597, 3105, 3104,
	3019, 2969, 2968, 213, 2966, 2959, 1453, 2928, 2572, 2357,
	2927, 2926, 1200, 2853, 1205, 1255, 1211, 2849, 213, 2638,
	2556, 2557, 141, 141, 2566, 2558, 2559, 2560, 2561, 2563,
	2564, 2591, 1168, 2582, 2555, 1807, 2552, 1805, 1475, 2551,
	3005, 1321, 1323, 2549, 2538, 1451, 1452, 1534, 2537, 1532,
	997, 1166, 2536, 1306, 181, 1189, 2533, 1335, 826, 2562,
	1296, 1299, 1319, 1490, 2285, 2530, 1465, 1466, 1472, 1493,
	1471, 1467, 1454, 1464, 1462, 1463, 1455, 1456, 1457, 1458,
	1460, 1461, 1252, 828, 1244, 1247, 1390, 2508, 2507, 1459,
	3116, 181, 2500, 1426, 183, 2397, 2209, 2081, 1450, 1839,
	1453, 1331, 1533, 2573, 1520, 1449, 1251, 1251, 1334, 3613,
	3583, 3582, 3523, 1018, 2878, 3477, 3475, 3407, 3404, 3401,
	1481, 1483, 1455, 1456, 1457, 1458, 1460, 1461, 3400, 3399,
	3395, 183, 1451, 1452, 3389, 1738, 2300, 1327, 182, 3361,
	3356, 3355, 2048, 2572, 2463, 1425, 1189, 3294, 175, 3271,
	3244, 3243, 1482, 1418, 2113, 3223, 176, 3233, 2562, 1454,
	1381, 1455, 1456, 1457, 1458, 1460, 1461, 3220, 3214, 2230,
	2619, 2355, 3145, 1474, 3126, 182, 3070, 2370, 1340, 3067,
	2996, 2995, 181, 1459, 1355, 175, 1424, 1453, 1347, 2984,
	2983, 2941, 2844, 176, 2556, 2557, 2813, 2796, 2759, 873,
	2728, 2706, 1436, 2684, 2683, 1423, 2658, 2656, 2596, 2529,
	2528, 2513, 2491, 213, 150, 2337, 2568, 2569, 2570, 1556,
	1553, 1421, 183, 2567, 2565, 2566, 2558, 2559, 2560, 2561,
	2563, 2564, 2556, 2557, 1545, 1583, 2054, 1592, 2573, 213,
	805, 826, 2572, 1542, 2237, 2236, 804, 2212, 2189, 213,
	1074, 213, 213, 213, 2173, 1446, 1447, 1427, 589, 213,
	213, 2104, 1516, 589, 213, 1637, 182, 1627, 1475, 213,
	1459, 1451, 1452, 1584, 2684, 1175, 175, 1580, 1579, 1578,
	1554, 1709, 1577, 1576, 176, 2558, 2559, 2560, 2561, 2563,
	2564, 1575, 2556, 2557, 3283, 1574, 1074, 1602, 1454, 1889,
	1573, 1481, 1483, 1572, 1570, 150, 1569, 1568, 1622, 1567,
	1566, 1565, 1564, 1714, 1563, 1562, 1561, 1546, 1547, 1740,
	1560, 1559, 1589, 1590, 1558, 1535, 1453, 1517, 1630, 181,
	1515, 1708, 2562, 1510, 1040, 1031, 1024, 2573, 1639, 141,
	3191, 3219, 2111, 1706, 2109, 2107, 2105, 3147, 3101, 2965,
	2948, 1621, 2944, 2517, 1474, 2190, 2571, 3149, 2567, 2565,
	2566, 2558, 2559, 2560, 2561, 2563, 2564, 2964, 1623, 183,
	2562, 1565, 1534, 1565, 2654, 1513, 3402, 984, 1060, 3367,
	1737, 826, 2768, 1015, 3365, 834, 2709, 1634, 1464, 1462,
	1463, 1455, 1456, 1457, 1458, 1460, 1461, 1632, 1062, 3237,
	3190, 2556, 2557, 1619, 1737, 3297, 1737, 1763, 2951, 1607,
	2798, 1631, 2797, 182, 1711, 1056, 1614, 1416, 181, 1582,
	594, 1175, 213, 175, 1752, 594, 1053, 3339, 1074, 1712,
	2562, 176, 597, 1610, 1616, 1609, 1736, 597, 1608, 1606,
	2535, 1605, 1604, 2534, 3030, 2473, 1638, 2302, 2287, 1475,
	1061, 1705, 150, 1056, 2572, 1057, 1354, 1743, 183, 1640,
	2558, 2559, 2560, 2561, 2563, 2564, 1552, 213, 213, 1540,
	1723, 2994, 1551, 1783, 213, 1056, 1785, 1391, 789, 1790,
	2745, 1362, 2744, 1886, 213, 3334, 1729, 1457, 1458, 1460,
	1461, 1363, 1836, 213, 3011, 213, 1047, 213, 2998, 1648,
	2818, 213, 182, 2722, 1781, 3274, 3586, 2600, 996, 2880,
	2089, 2523, 175, 213, 2572, 2235, 1054, 790, 1571, 1548,
	176, 3508, 2737, 1055, 1840, 1733, 1827, 1767, 1228, 3519,
	3516, 2777, 2976, 3454, 3036, 2404, 2367, 3554, 1344, 3553,
	1747, 150, 1794, 2460, 1748, 3421, 2666, 3181, 3610, 2573,
	1216, 1669, 783, 1175, 1226, 1175, 213, 1175, 785, 1519,
	213, 2268, 781, 1175, 1435, 1388, 1175, 213, 779, 213,
	213, 1463, 1455, 1456, 1457, 1458, 1460, 1461, 3509, 1175,
	1175, 1175, 1823, 213, 594, 1194, 2242, 1193, 213, 1803,
	1848, 1857, 3325, 2231, 3318, 3013, 597, 589, 213, 1433,
	213, 1941, 213, 1939, 213, 2259, 213, 3009, 3008, 2573,
	2259, 2973, 776, 1789, 2668, 1062, 2100, 2257, 1800, 770,
	213, 1868, 2257, 213, 1870, 213, 1227, 1872, 2073, 1389,
	1053, 1875, 2972, 1749, 213, 2512, 2560, 2561, 2563, 2564,
	2511, 1798, 1724, 824, 2510, 1905, 1751, 2509, 1817, 1816,
	1387, 2271, 2477, 213, 576, 2320, 2312, 2309, 2655, 213,
	1760, 647, 213, 1056, 2290, 1855, 1062, 1061, 2223, 2029,
	2565, 2566, 2558, 2559, 2560, 2561, 2563, 2564, 1728, 1727,
	1422, 1190, 1737, 1734, 1074, 1891, 1850, 1342, 1853, 899,
	1756, 2708, 1893, 2099, 2074, 1987, 2364, 1053, 826, 773,
	826, 1753, 1319, 1280, 1319, 1434, 3420, 1337, 1826, 3570,
	2819, 1761, 1762, 1022, 1951, 1896, 1461, 823, 1061, 1900,
	1054, 1957, 2249, 1261, 824, 1260, 1966, 1055, 3255, 2567,
	2565, 2566, 2558, 2559, 2560, 2561, 2563, 2564, 1222, 1757,
	648, 1763, 1952, 2215, 1020, 840, 1041, 1012, 1882, 1012,
	1883, 582, 1259, 819, 1258, 2278, 1895, 2060, 2061, 594,
	1963, 2289, 1908, 2044, 1432, 2075, 2072, 2044, 1747, 1074,
	3177, 597, 1748, 3304, 1960, 2060, 2086, 1884, 2986, 1731,
	1239, 3571, 1623, 1798, 1429, 1921, 1894, 1054, 3479, 825,
	2270, 3192, 1950, 1914, 1055, 1983, 1984, 1754, 823, 1902,
	1903, 1904, 3505, 2306, 1338, 2277, 1401, 1955, 1854, 2822,
	2821, 2122, 213, 2126, 2126, 2139, 1237, 2060, 1961, 1964,
	2159, 2161, 2089, 1738, 2300, 2165, 1815, 642, 2702, 1356,
	855, 1386, 2052, 2443, 584, 1353, 1909, 1039, 2050, 3553,
	1954, 1594, 1956, 1074, 213, 1986, 2564, 1738, 2300, 1738,
	2300, 1965, 1415, 213, 805, 1236, 213, 805, 805, 1074,
	1974, 1749, 2077, 1975, 1976, 2077, 3573, 1056, 2213, 3590,
	825, 1670, 2221, 1011, 1751, 1949, 1915, 3543, 1959, 2665,
	1377, 2774, 3578, 1224, 2098, 2719, 2085, 1910, 2714, 2102,
	2103, 826, 534, 1780, 2863, 1763, 2860, 641, 2465, 2466,
	2245, 1732, 1765, 3437, 826, 2269, 1363, 2026, 826, 1598,
	1363, 703, 2247, 2196, 3175, 3600, 529, 2206, 2207, 1648,
	1648, 2056, 3396, 3254, 2488, 2210, 3506, 822, 2997, 1753,
	2090, 1378, 578, 2258, 1056, 1747, 1750, 2083, 213, 1748,
	2197, 1601, 2181, 1754, 2248, 777, 1175, 787, 2486, 2696,
	583, 786, 1343, 1865, 2667, 777, 2288, 1543, 2775, 2246,
	1596, 778, 2071, 650, 649, 2180, 1621, 2861, 1239, 2449,
	679, 1669, 1669, 1074, 1792, 1599, 984, 3542, 213, 2150,
	141, 1754, 1279, 2163, 1714, 1769, 213, 2134, 2171, 2172,
	580, 2077, 2695, 1940, 1791, 1938, 826, 213, 1597, 2225,
	2186, 2187, 3504, 2182, 1773, 777, 3572, 1398, 822, 1645,
	213, 2987, 2731, 1175, 1013, 2774, 2615, 1221, 1619, 2652,
	2214, 3251, 1021, 3010, 1787, 1754, 213, 1074, 1749, 577,
	1175, 2352, 213, 213, 2310, 3176, 3210, 2024, 3435, 2232,
	2027, 1751, 1754, 3082, 3265, 1761, 1762, 1770, 2260, 640,
	1554, 639, 2452, 2483, 3560, 3465, 2671, 3406, 213, 3305,
	213, 2325, 2324, 213, 2077, 2484, 581, 3436, 2489, 2080,
	1948, 1913, 3576, 1788, 774, 1600, 2240, 579, 213, 643,
	2527, 2321, 1339, 1509, 2205, 213, 2185, 213, 2023, 213,
	1546, 1547, 3591, 825, 3218, 213, 1753, 1399, 213, 2479,
	213, 2961, 213, 2043, 213, 213, 2243, 213, 1175, 1175,
	1175, 1907, 1175, 2293, 2292, 3076, 3541, 213, 213, 2239,
	213, 213, 601, 3250, 2307, 1738, 1735, 1774, 1784, 3085,
	1034, 213, 1428, 1365, 2254, 2263, 2280, 3503, 3552, 2347,
	2391, 2392, 2378, 3577, 213, 213, 213, 2291, 3550, 213,
	2451, 213, 2272, 2274, 213, 3344, 213, 2421, 213, 2387,
	2308, 2324, 3222, 2324, 1750, 2361, 2051, 2284, 2448, 1400,
	2614, 2301, 2303, 2304, 2305, 3579, 3601, 530, 2418, 213,
	213, 213, 213, 1352, 213, 1038, 704, 1775, 1776, 2763,
	2359, 3211, 1754, 1829, 594, 1194, 1771, 2326, 2317, 1591,
	2698, 2434, 2335, 1015, 1598, 1015, 597, 2420, 1032, 2423,
	2424, 2485, 213, 1027, 1866, 2330, 2351, 2332, 2025, 141,
	2487, 521, 1635, 1745, 2700, 3252, 1772, 3024, 2436, 531,
	2437, 1442, 1441, 2311, 2917, 2454, 1601, 1648, 2393, 2425,
	3124, 2426, 2373, 2403, 2431, 3083, 1764, 2450, 1725, 1594,
	1166, 2380, 1431, 2389, 2384, 2183, 2385, 3595, 2386, 2388,
	2369, 1319, 2369, 2405, 2394, 3310, 1189, 3168, 2646, 532,
	1599, 533, 2699, 3309, 2447, 3292, 3386, 2975, 2764, 2679,
	3180, 1722, 2675, 2459, 2360, 2342, 2339, 3179, 1849, 1669,
	1838, 2433, 1837, 1811, 3408, 3165, 1970, 2859, 3158, 2040,
	2438, 2177, 2439, 3445, 2440, 2505, 2506, 2480, 1509, 2294,
	1441, 213, 3156, 1777, 931, 1945, 1718, 1598, 3160, 1440,
	2515, 3041, 3226, 2038, 602, 603, 2336, 2455, 2390, 3332,
	1282, 1750, 3330, 1901, 2457, 2628, 3293, 3166, 2458, 2943,
	1012, 2686, 1379, 2441, 1189, 1189, 2685, 1720, 2462, 1601,
	2501, 2471, 1442, 209, 1962, 524, 525, 2220, 540, 524,
	540, 550, 555, 1721, 1012, 571, 2612, 2179, 1596, 3159,
	1600, 2918, 2178, 209, 2611, 2219, 700, 1778, 2919, 1341,
	2218, 765, 1253, 1599, 3125, 765, 1189, 2349, 823, 693,
	2516, 690, 3391, 1366, 3300, 209, 1971, 1440, 2593, 1254,
	1074, 2478, 3202, 816, 3168, 3594, 1597, 816, 1267, 2629,
	2807, 2607, 2608, 1847, 2609, 2733, 605, 604, 1265, 213,
	1189, 3557, 3328, 702, 826, 3290, 3130, 213, 2034, 1645,
	1645, 3178, 3165, 2932, 213, 3448, 2035, 213, 213, 1074,
	2036, 2094, 3409, 2041, 3559, 3521, 3392, 1413, 1074, 2295,
	2296, 2627, 3403, 1395, 213, 2633, 3270, 3291, 3123, 3015,
	2522, 2585, 2843, 2816, 2550, 2490, 606, 607, 2346, 213,
	2319, 2631, 2286, 3301, 3166, 1393, 766, 1376, 1374, 1372,
	766, 3161, 2238, 1600, 1629, 3162, 2621, 213, 213, 213,
	524, 524, 2622, 213, 1626, 2624, 213, 1370, 209, 2623,
	2663, 3449, 2642, 213, 213, 213, 213, 213, 1414, 2634,
	2635, 2637, 3393, 2669, 1368, 1332, 2647, 1360, 2586, 213,
	213, 213, 1358, 1937, 3164, 2641, 2618, 819, 213, 2617,
	2588, 2589, 2590, 2650, 1263, 2445, 3167, 2444, 2093, 2601,
	213, 1175, 2428, 213, 2672, 2673, 2630, 2688, 2661, 2692,
	2693, 1074, 2616, 1947, 1918, 1707, 1557, 3499, 1336, 1074,
	2687, 2606, 2690, 2676, 213, 1243, 3197, 213, 213, 3187,
	2659, 2660, 2653, 3442, 3154, 2711, 3039, 213, 698, 699,
	1175, 213, 2992, 1175, 1175, 1175, 2037, 2990, 2648, 2649,
	213, 691, 692, 2974, 2748, 2039, 213, 2713, 2632, 1412,
	2636, 213, 2762, 213, 1266, 1394, 2770, 2747, 2680, 2644,
	213, 1525, 1752, 2664, 1264, 1530, 2492, 2493, 3161, 701,
	767, 2670, 3162, 2746, 767, 2742, 2365, 1392, 2354, 1375,
	1373, 1371, 2353, 2333, 1175, 1175, 814, 1752, 765, 3163,
	1879, 1878, 213, 213, 2871, 3539, 213, 2701, 2729, 1369,
	1876, 1874, 1871, 1175, 2720, 2707, 2779, 1869, 2418, 1867,
	816, 3164, 2715, 2752, 1858, 1808, 1367, 2418, 1806, 1359,
	1794, 2718, 1936, 3167, 1357, 2724, 1795, 213, 1794, 1074,
	213, 213, 1074, 213, 2730, 1782, 1262, 1779, 2292, 2723,
	2703, 2704, 1766, 1011, 2705, 1011, 1648, 2771, 815, 2716,
	1755, 775, 213, 2717, 2766, 3349, 1444, 2469, 1636, 2787,
	2788, 2789, 2794, 2790, 2791, 993, 3554, 2579, 2580, 2581,
	2644, 3471, 3246, 2725, 2726, 768, 3241, 2727, 3240, 768,
	2805, 2776, 1648, 766, 141, 141, 2814, 2809, 2828, 994,
	2785, 2419, 2769, 1741, 1218, 1074, 826, 1645, 1669, 3351,
	2827, 2259, 2276, 2792, 2793, 3049, 1074, 2259, 213, 2259,
	1189, 2721, 1763, 2257, 769, 1911, 1935, 2778, 769, 2275,
	3398, 2273, 1410, 1411, 1934, 2846, 3163, 1916, 3372, 3131,
	1826, 2470, 2815, 2297, 1669, 2279, 1448, 1451, 1452, 1451,
	1452, 535, 1445, 2855, 2856, 1715, 1015, 2316, 2283, 2314,
	2753, 2281, 3441, 2755, 2756, 2757, 3413, 2824, 3411, 2315,
	2282, 3574, 3028, 2651, 1454, 211, 2829, 3023, 2958, 2372,
	1015, 2831, 2164, 780, 782, 995, 2825, 1710, 1973, 1641,
	3593, 2556, 2557, 2929, 1013, 3102, 1013, 546, 1451, 1452,
	1183, 1025, 1453, 1072, 1453, 2251, 2250, 1522, 2097, 2963,
	2851, 1346, 2866, 213, 2800, 2801, 2251, 1345, 2657, 2862,
	2864, 2865, 2252, 2101, 2095, 2068, 2882, 2324, 213, 1035,
	2881, 2870, 2962, 1798, 1074, 2877, 571, 767, 1397, 2858,
	1520, 1396, 2886, 2952, 1983, 2887, 2883, 1518, 3602, 3383,
	2884, 3322, 209, 213, 209, 209, 3284, 1180, 2896, 209,
	1983, 2897, 2921, 2894, 3282, 3213, 2868, 209, 1196, 3148,
	3073, 3066, 1012, 3055, 3034, 3018, 3017, 2874, 3016, 2989,
	2786, 2760, 2758, 1189, 2430, 2947, 2429, 1012, 2382, 2358,
	2334, 2925, 1220, 2055, 2922, 141, 1933, 1932, 1931, 213,
	1930, 1861, 1860, 2936, 2937, 2934, 1242, 2999, 1859, 1841,
	209, 209, 1819, 1180, 2930, 1818, 1012, 2939, 2940, 1648,
	1814, 2142, 1813, 1812, 1810, 209, 1809, 844, 1409, 3012,
	1408, 1291, 2970, 1278, 1290, 2954, 213, 213, 213, 1289,
	813, 1288, 768, 1287, 1286, 1285, 1284, 209, 209, 209,
	209, 1180, 2967, 1074, 213, 1283, 1281, 1276, 1175, 1275,
	571, 3003, 209, 209, 3004, 3006, 1274, 1273, 1648, 1648,
	1272, 1669, 213, 1235, 3031, 2991, 690, 2993, 2978, 1234,
	3051, 769, 1233, 1232, 1648, 1648, 213, 213, 1175, 1175,
	1175, 1231, 213, 213, 213, 2960, 3043, 213, 213, 1230,
	1229, 213, 213, 1223, 1175, 1217, 1215, 3014, 3032, 1214,
	213, 1074, 2839, 2840, 1037, 1648, 3046, 1036, 968, 3045,
	1669, 1669, 3042, 878, 1074, 2292, 1716, 788, 634, 2378,
	772, 3303, 1403, 73, 209, 3074, 1669, 1669, 1225, 621,
	67, 2988, 3453, 2694, 1917, 1364, 2680, 209, 1919, 3033,
	3037, 3100, 3027, 2620, 2188, 3434, 3109, 2526, 3378, 2418,
	3264, 2092, 555, 1539, 3044, 3047, 69, 1669, 866, 213,
	3052, 1012, 3053, 951, 3209, 3062, 3208, 3155, 2977, 2408,
	3206, 3057, 3072, 3058, 3068, 3205, 833, 3065, 3096, 3069,
	1077, 1726, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905,
	2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915,
	2916, 3084, 2920, 3087, 872, 3079, 1739, 3063, 3064, 2234,
	2125, 3088, 1649, 875, 1646, 877, 3071, 876, 1647, 1541,
	874, 1644, 213, 2348, 2376, 1270, 753, 1730, 2049, 2087,
	2521, 1536, 1074, 846, 1074, 868, 2084, 1030, 845, 2625,
	2773, 2957, 3232, 1969, 2461, 637, 2553, 2069, 1023, 2147,
	2140, 2136, 2366, 213, 213, 213, 1645, 1417, 1511, 2377,
	1648, 1064, 849, 3122, 2047, 213, 1527, 2495, 1826, 1430,
	2780, 213, 2639, 213, 2229, 3075, 213, 213, 213, 3468,
	1977, 1828, 992, 3173, 991, 990, 3459, 3456, 1074, 213,
	213, 1175, 1645, 3139, 1074, 2740, 1175, 1719, 3059, 3060,
	3061, 3136, 213, 3133, 3134, 2053, 3135, 2244, 1503, 2749,
	3151, 3152, 1669, 3140, 3138, 3144, 3183, 213, 862, 2641,
	1074, 1188, 2605, 1175, 1525, 3153, 2808, 3200, 3182, 3141,
	1240, 3132, 3397, 1502, 784, 3388, 1011, 1051, 1050, 3137,
	1049, 2678, 3599, 2985, 3174, 180, 1958, 524, 818, 177,
	179, 213, 178, 3172, 3001, 3184, 3185, 2732, 90, 3203,
	1011, 3228, 1648, 1074, 35, 3194, 16, 3242, 209, 116,
	209, 2146, 115, 209, 114, 3216, 113, 3204, 112, 111,
	3215, 110, 3231, 1196, 109, 1180, 209, 3227, 108, 1074,
	3236, 3199, 209, 1196, 540, 3143, 107, 209, 1196, 3229,
	106, 105, 104, 571, 3195, 1012, 1012, 103, 102, 101,
	100, 99, 98, 97, 1669, 96, 95, 3224, 1015, 94,
	93, 92, 3276, 91, 567, 564, 49, 1074, 48, 89,
	3245, 3253, 844, 1015, 88, 213, 844, 213, 15, 1074,
	213, 33, 3261, 13, 1158, 53, 54, 12, 213, 1158,
	1892, 28, 29, 79, 78, 27, 14, 26, 24, 3256,
	3272, 10, 1015, 8, 7, 30, 1603, 11, 146, 145,
	213, 3287, 72, 144, 71, 143, 142, 1013, 2142, 2142,
	3286, 70, 3212, 3277, 3278, 22, 9, 3217, 138, 3281,
	3280, 213, 3337, 3029, 66, 213, 140, 139, 63, 137,
	3321, 1013, 136, 213, 64, 3285, 135, 134, 1175, 3235,
	3336, 3196, 3331, 65, 213, 133, 3306, 20, 5, 1645,
	3341, 52, 6, 3343, 1072, 3248, 2817, 83, 84, 31,
	1826, 61, 3319, 3340, 60, 213, 213, 3323, 59, 19,
	51, 18, 170, 3358, 3359, 3329, 3346, 1635, 169, 3335,
	3262, 168, 2742, 167, 162, 213, 209, 3313, 3314, 161,
	3347, 213, 166, 3348, 164, 163, 165, 3353, 1645, 1645,
	160, 213, 3345, 3231, 132, 3312, 1012, 3352, 172, 2142,
	2142, 2142, 171, 174, 1645, 1645, 158, 154, 3262, 153,
	3394, 3369, 3385, 3350, 157, 159, 156, 155, 152, 173,
	1986, 209, 209, 3371, 3354, 3376, 131, 3384, 209, 130,
	56, 129, 3362, 128, 127, 1645, 126, 1015, 1846, 125,
	55, 3405, 17, 2, 1, 213, 1175, 209, 0, 209,
	0, 209, 213, 3381, 0, 524, 1175, 1175, 0, 0,
	0, 0, 1175, 3427, 1648, 0, 213, 1862, 213, 0,
	0, 0, 3340, 0, 0, 3412, 0, 0, 3415, 0,
	0, 3419, 0, 3438, 3418, 0, 0, 3425, 3426, 0,
	213, 0, 0, 3430, 0, 3423, 213, 213, 3450, 1074,
	3431, 0, 0, 0, 0, 3424, 0, 213, 213, 0,
	571, 0, 3462, 0, 690, 3466, 1669, 0, 3472, 1648,
	3474, 209, 3476, 1180, 209, 0, 0, 3458, 3461, 0,
	0, 3455, 3463, 0, 3484, 3483, 0, 571, 0, 0,
	0, 213, 209, 0, 0, 3432, 0, 3433, 3478, 1012,
	0, 209, 209, 3480, 209, 3510, 209, 1012, 209, 0,
	209, 0, 3495, 3496, 3497, 3470, 3498, 3269, 0, 0,
	1012, 1669, 0, 3512, 1942, 3451, 3526, 1943, 0, 1944,
	213, 0, 3528, 0, 3530, 0, 0, 3535, 209, 0,
	1645, 3527, 3536, 3540, 0, 3529, 1189, 3531, 0, 0,
	213, 0, 3532, 0, 0, 0, 0, 555, 0, 1648,
	3295, 0, 0, 571, 0, 0, 209, 0, 0, 3551,
	3549, 3548, 3546, 3547, 213, 0, 213, 0, 3555, 3556,
	3558, 0, 3564, 0, 3566, 0, 0, 2378, 3562, 0,
	3569, 3563, 3568, 3458, 0, 0, 3461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2146, 2146,
	1986, 1669, 3581, 3580, 0, 0, 3533, 3534, 0, 3588,
	3537, 3587, 0, 3589, 0, 0, 3592, 0, 0, 0,
	0, 1015, 1015, 3470, 0, 0, 3596, 0, 0, 0,
	3473, 0, 1645, 3597, 3598, 3603, 0, 3604, 0, 0,
	0, 0, 0, 3561, 0, 1158, 0, 3607, 3608, 3609,
	3611, 3612, 0, 0, 3375, 0, 0, 0, 0, 3616,
	0, 0, 0, 0, 3614, 0, 0, 0, 1011, 0,
	0, 0, 0, 0, 2142, 2142, 0, 0, 0, 0,
	0, 0, 0, 1011, 0, 844, 0, 0, 0, 0,
	0, 1158, 0, 0, 0, 0, 0, 0, 0, 2146,
	2146, 2146, 0, 0, 0, 0, 524, 0, 0, 0,
	0, 0, 1011, 2556, 2557, 0, 2574, 2575, 2576, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3093, 0, 0, 0, 0, 0, 524, 0,
	0, 0, 0, 0, 0, 209, 0, 524, 0, 0,
	209, 0, 0, 1593, 2142, 2142, 2142, 2142, 2142, 2142,
	2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
	2142, 2142, 2142, 0, 2142, 0, 0, 2571, 1451, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1015, 0, 0, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 1454, 0, 0, 0, 1013,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1158, 1013, 0, 0, 0, 0, 0,
	0, 0, 540, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 0, 0, 1470,
	0, 2562, 0, 1013, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1011, 0, 0,
	0, 0, 2267, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 3091, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2577, 0, 209, 832, 1476, 1477, 1478, 1479,
	0, 0, 0, 0, 1645, 0, 1459, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 209, 2327, 0, 0,
	0, 0, 0, 0, 0, 2572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1015, 0, 1481, 1483, 0,
	0, 0, 209, 1015, 1196, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 1015, 0, 0, 1645,
	0, 0, 1846, 0, 0, 0, 1468, 1469, 0, 2267,
	0, 524, 0, 2381, 0, 0, 0, 0, 0, 209,
	0, 0, 209, 0, 209, 0, 209, 0, 209, 209,
	1474, 1180, 0, 0, 0, 0, 0, 0, 1013, 0,
	0, 2401, 690, 0, 2267, 2267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	2573, 0, 0, 0, 2146, 2146, 0, 0, 209, 1180,
	209, 0, 0, 1196, 0, 1196, 0, 0, 1180, 0,
	1180, 0, 1180, 0, 0, 0, 0, 681, 0, 1645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 209, 1180, 209, 1480, 209, 1158,
	0, 0, 57, 684, 683, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	62, 1011, 1011, 0, 2146, 2146, 2146, 2146, 2146, 2146,
	2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146, 2146,
	2146, 2146, 2146, 0, 2146, 0, 0, 0, 0, 0,
	0, 68, 0, 2568, 2569, 2570, 0, 0, 0, 0,
	2567, 2565, 2566, 2558, 2559, 2560, 2561, 2563, 2564, 0,
	0, 0, 0, 0, 1158, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 75, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1196, 2556, 2557, 0, 2574,
	2575, 2576, 1471, 1467, 0, 1464, 1462, 1463, 1455, 1456,
	1457, 1458, 1460, 1461, 0, 3092, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 1158, 0,
	0, 0, 0, 0, 0, 0, 0, 1451, 1452, 0,
	0, 0, 1013, 1013, 1158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	2571, 0, 0, 0, 1454, 0, 0, 0, 0, 0,
	0, 0, 1011, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 209, 0,
	0, 1473, 0, 524, 0, 0, 0, 0, 0, 2142,
	832, 524, 0, 0, 832, 0, 0, 0, 524, 0,
	0, 524, 524, 0, 0, 0, 0, 209, 77, 0,
	0, 0, 0, 0, 2562, 0, 0, 0, 1196, 0,
	0, 0, 0, 0, 0, 0, 1198, 0, 1202, 0,
	1208, 0, 2142, 1196, 0, 0, 0, 0, 1158, 0,
	147, 80, 0, 81, 0, 1476, 1477, 1478, 1479, 0,
	0, 2267, 2267, 209, 0, 1459, 0, 2267, 0, 0,
	2682, 0, 181, 0, 0, 2577, 0, 2267, 2682, 2267,
	2682, 2682, 0, 0, 685, 0, 0, 0, 117, 0,
	0, 0, 0, 209, 209, 209, 1481, 1483, 0, 0,
	0, 0, 1158, 1013, 0, 0, 0, 0, 2572, 0,
	0, 0, 183, 0, 209, 1011, 0, 1180, 0, 0,
	0, 0, 0, 1011, 0, 1330, 0, 0, 0, 0,
	0, 0, 1333, 0, 0, 118, 1011, 0, 2736, 0,
	0, 2738, 2267, 0, 0, 0, 2142, 0, 151, 1474,
	0, 209, 0, 0, 0, 209, 182, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 175, 0, 0, 0,
	1180, 0, 209, 0, 176, 2267, 0, 524, 0, 0,
	0, 0, 0, 0, 2267, 0, 1383, 0, 0, 0,
	0, 0, 0, 0, 0, 682, 0, 0, 0, 0,
	0, 0, 0, 2573, 0, 0, 0, 0, 0, 0,
	1451, 1452, 0, 0, 0, 0, 209, 1846, 0, 0,
	1846, 0, 0, 0, 0, 0, 1480, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 2823, 0, 0, 1180, 209, 1013, 209, 0, 0,
	0, 0, 0, 0, 1013, 1453, 0, 0, 0, 1504,
	1505, 1506, 1507, 1508, 1473, 0, 209, 1013, 0, 0,
	0, 1470, 1451, 1452, 0, 1484, 1485, 1486, 1494, 1495,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 1524,
	0, 1487, 1482, 0, 0, 1537, 0, 0, 0, 1454,
	0, 0, 0, 0, 1500, 0, 2568, 2569, 2570, 0,
	2842, 0, 0, 2567, 2565, 2566, 2558, 2559, 2560, 2561,
	2563, 2564, 2879, 0, 0, 0, 0, 1453, 1476, 1477,
	1478, 1479, 0, 0, 0, 0, 1473, 0, 1459, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 2146,
	0, 0, 0, 0, 1464, 1462, 1463, 1455, 1456, 1457,
	1458, 1460, 1461, 0, 0, 0, 0, 0, 0, 1481,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2146, 0, 0, 0, 0, 0, 1468, 1469,
	1476, 1477, 1478, 1479, 0, 0, 209, 209, 0, 0,
	1459, 0, 0, 0, 1587, 1587, 1587, 524, 0, 0,
	0, 0, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 524, 0, 1491, 0, 0, 1501, 0, 0,
	0, 1481, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1196, 0, 0,
	0, 1497, 0, 1498, 0, 1158, 0, 0, 0, 0,
	1468, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 0, 2146, 0, 0, 1480,
	0, 0, 0, 571, 1158, 0, 0, 0, 0, 0,
	0, 0, 1499, 1158, 0, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 0, 0, 0, 0, 844, 0, 0, 0,
	3025, 209, 209, 0, 0, 0, 0, 0, 0, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 2267, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1475,
	2401, 2401, 0, 0, 0, 0, 690, 690, 2267, 0,
	0, 1846, 1846, 0, 0, 690, 2267, 0, 0, 0,
	0, 0, 0, 0, 209, 1492, 1158, 0, 0, 0,
	0, 0, 0, 0, 1158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 1467, 0, 1464, 1462, 1463,
	1455, 1456, 1457, 1458, 1460, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2556, 2557, 0, 2574,
	2575, 2576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3110, 0, 2848, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 1465, 1466, 1472, 1493, 1471, 1467, 0, 1464,
	1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461, 0, 0,
	2571, 0, 3118, 0, 0, 0, 3117, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 1196, 0, 209, 0,
	0, 0, 0, 0, 1158, 0, 0, 1158, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2267, 2267, 2267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1196,
	0, 0, 0, 0, 0, 2267, 0, 2682, 0, 0,
	1196, 1196, 209, 0, 2562, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 209, 0, 0, 0, 0, 0,
	1158, 0, 0, 0, 0, 0, 2267, 0, 0, 0,
	0, 1158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1968, 1196, 1972, 0, 0, 0,
	0, 0, 1979, 0, 0, 0, 0, 0, 2572, 1988,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
	2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,
	2019, 2020, 2021, 2022, 0, 2028, 0, 2030, 2031, 2032,
	2033, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 0, 0, 0, 0, 0, 0, 2057, 0, 1158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2267,
	0, 2682, 1524, 653, 3289, 0, 2082, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2573, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 571, 0, 654, 2115, 2116, 2117,
	2118, 2119, 2120, 2121, 0, 655, 1451, 1452, 2138, 0,
	2149, 2151, 2156, 0, 0, 3289, 0, 0, 0, 2267,
	0, 656, 0, 0, 0, 0, 1482, 209, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 676, 1196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 0, 0, 0, 0, 0, 0, 209,
	209, 1453, 932, 0, 0, 0, 0, 0, 1158, 0,
	1473, 658, 0, 0, 0, 0, 0, 1470, 0, 2879,
	0, 0, 0, 0, 0, 524, 0, 0, 0, 0,
	0, 659, 0, 0, 660, 3289, 2568, 2569, 2570, 0,
	0, 210, 0, 2567, 2565, 2566, 2558, 2559, 2560, 2561,
	2563, 2564, 0, 0, 0, 0, 2837, 0, 0, 0,
	675, 210, 0, 0, 0, 0, 1158, 0, 0, 0,
	0, 0, 0, 0, 1476, 1477, 1478, 1479, 0, 1158,
	0, 0, 0, 210, 1459, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 2682, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1196, 0, 1196, 0, 0, 1481, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3446, 0, 0, 0, 0, 0,
	1196, 209, 0, 57, 1468, 1469, 0, 0, 0, 0,
	0, 209, 2267, 0, 0, 662, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1474, 0,
	0, 62, 679, 663, 0, 0, 0, 0, 0, 2329,
	0, 2331, 0, 0, 0, 2879, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1158, 0, 1158,
	678, 0, 68, 0, 0, 0, 0, 664, 0, 0,
	665, 0, 0, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 666, 2267, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 3289, 1480, 0, 75, 82, 0,
	0, 0, 0, 1158, 667, 674, 0, 0, 0, 1158,
	0, 0, 668, 1475, 0, 0, 0, 0, 1196, 0,
	2267, 0, 0, 0, 0, 670, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 1158, 1451, 1452, 0, 0,
	0, 76, 677, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 672, 0, 0, 1482, 0, 0, 2442,
	0, 1451, 1452, 1454, 1484, 1485, 1486, 1494, 1495, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 1158, 0,
	1487, 1482, 0, 0, 0, 0, 0, 0, 1454, 0,
	0, 1453, 0, 1500, 0, 0, 0, 0, 0, 0,
	1473, 0, 0, 0, 1158, 0, 0, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 0, 0,
	1471, 1467, 1470, 1464, 1462, 1463, 1455, 1456, 1457, 1458,
	1460, 1461, 1158, 0, 0, 0, 2836, 2475, 2476, 77,
	0, 0, 0, 2482, 1158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1476, 1477, 1478, 1479, 0, 0,
	0, 0, 2496, 2497, 1459, 0, 0, 0, 2082, 0,
	0, 147, 80, 0, 81, 0, 844, 2504, 0, 1476,
	1477, 1478, 1479, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 181, 0, 1481, 1483, 0, 0, 0,
	0, 0, 0, 2524, 0, 685, 0, 0, 0, 117,
	0, 0, 0, 1491, 0, 0, 1501, 0, 2539, 0,
	1481, 1483, 0, 0, 1468, 1469, 0, 0, 0, 0,
	0, 0, 0, 183, 0, 1451, 1452, 0, 0, 0,
	1497, 0, 1498, 0, 0, 0, 0, 0, 1474, 1468,
	1469, 0, 0, 0, 0, 1482, 118, 0, 0, 0,
	0, 0, 1454, 0, 1489, 0, 2156, 2156, 2156, 151,
	0, 0, 0, 1474, 0, 0, 0, 182, 0, 0,
	0, 1587, 0, 0, 0, 0, 0, 175, 0, 2610,
	1453, 1499, 0, 0, 0, 176, 0, 0, 0, 1473,
	0, 0, 0, 0, 0, 0, 1470, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	210, 1079, 210, 210, 1079, 1480, 1079, 210, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 1475, 0, 2481, 0, 0, 0, 0,
	1480, 0, 0, 0, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 1476, 1477, 1478, 1479, 832, 1475, 0,
	0, 0, 0, 1459, 0, 0, 1079, 1079, 210, 210,
	0, 0, 0, 0, 1158, 0, 0, 0, 844, 0,
	0, 0, 2697, 210, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 210, 210, 210, 0,
	1079, 1079, 0, 0, 0, 1079, 0, 0, 57, 1079,
	210, 210, 0, 1468, 1469, 0, 2556, 2557, 0, 2574,
	2575, 2576, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2847, 62, 1474, 0, 0,
	1471, 1467, 0, 1464, 1462, 1463, 1455, 1456, 1457, 1458,
	1460, 1461, 0, 0, 0, 0, 0, 0, 1490, 0,
	1079, 1465, 1466, 1472, 1493, 1471, 1467, 68, 1464, 1462,
	1463, 1455, 1456, 1457, 1458, 1460, 1461, 0, 0, 0,
	2571, 2544, 210, 0, 0, 2545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 75, 82, 1480, 0, 0, 57, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 2562, 0, 76, 2830, 0, 0,
	0, 1979, 0, 0, 0, 0, 0, 2834, 2835, 0,
	0, 2838, 0, 0, 0, 2841, 68, 0, 0, 0,
	0, 0, 2556, 2557, 2845, 2574, 2575, 2576, 0, 0,
	0, 0, 0, 2852, 0, 0, 2610, 0, 0, 0,
	0, 0, 0, 0, 0, 2577, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 2872, 0, 0,
	0, 75, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2888, 2889, 2572, 2890,
	2891, 2892, 0, 0, 2893, 2226, 2571, 0, 2895, 1471,
	1467, 0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460,
	1461, 0, 0, 0, 77, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2923,
	2924, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2933, 0, 147, 80, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2942,
	0, 0, 0, 0, 0, 0, 0, 0, 181, 0,
	2562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	685, 210, 0, 2573, 117, 0, 0, 0, 0, 0,
	0, 0, 1079, 0, 210, 210, 0, 2578, 0, 0,
	210, 0, 0, 0, 0, 210, 0, 0, 183, 0,
	0, 0, 2971, 0, 1451, 1452, 0, 1079, 0, 0,
	0, 2577, 0, 77, 0, 0, 0, 2979, 2982, 0,
	0, 118, 0, 0, 1482, 898, 0, 0, 1079, 0,
	0, 1454, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 3000, 182, 0, 2572, 147, 80, 0, 81, 0,
	0, 0, 175, 0, 0, 0, 0, 0, 0, 1453,
	176, 0, 0, 0, 208, 0, 0, 181, 1473, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 685,
	0, 150, 0, 117, 595, 0, 2568, 2569, 2570, 0,
	0, 0, 0, 2567, 2565, 2566, 2558, 2559, 2560, 2561,
	2563, 2564, 0, 0, 0, 0, 595, 183, 1587, 0,
	0, 0, 0, 0, 2474, 0, 0, 3054, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 1476, 1477, 1478, 1479, 0, 0, 0, 2573,
	0, 0, 1459, 151, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 1079, 210, 0, 0, 0, 0, 0,
	1079, 175, 0, 0, 0, 0, 0, 0, 0, 176,
	3089, 3090, 0, 1481, 1483, 0, 3094, 3095, 0, 0,
	0, 3098, 3099, 0, 0, 0, 0, 0, 3103, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	210, 0, 1468, 1469, 0, 0, 210, 3107, 0, 1014,
	0, 0, 214, 0, 3111, 1451, 1452, 0, 1484, 1485,
	1486, 1494, 1495, 1496, 0, 210, 1474, 210, 0, 210,
	0, 0, 0, 0, 1487, 1482, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 2568, 2569, 2570, 0, 0, 0, 0, 2567,
	2565, 2566, 2558, 2559, 2560, 2561, 2563, 2564, 0, 0,
	1453, 588, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 0, 1079, 1470, 1079, 0, 1079,
	0, 0, 0, 588, 0, 1079, 0, 0, 1079, 210,
	0, 0, 210, 1480, 0, 0, 0, 0, 0, 0,
	0, 1079, 1079, 1079, 0, 0, 0, 2982, 0, 0,
	210, 1475, 0, 0, 0, 0, 0, 0, 0, 210,
	210, 0, 210, 0, 210, 0, 210, 0, 210, 0,
	0, 0, 0, 1476, 1477, 1478, 1479, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 0,
	1501, 0, 0, 0, 1481, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 2982, 0, 0, 1497, 0, 1498, 0, 0, 0,
	0, 0, 0, 1468, 1469, 0, 1079, 0, 0, 0,
	0, 0, 0, 0, 0, 3257, 3258, 3259, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 1474, 1471, 1467,
	0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461,
	3267, 3268, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 3275, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	0, 1079, 0, 0, 0, 2982, 0, 0, 0, 0,
	0, 0, 0, 3311, 1480, 0, 0, 0, 0, 0,
	0, 3317, 0, 0, 832, 0, 0, 0, 0, 0,
	0, 3324, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 1452, 2982, 0, 0, 2982, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 0, 0, 1079, 0, 2982, 2982, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 208, 208, 1453, 0, 0,
	208, 0, 0, 0, 0, 0, 1473, 0, 595, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 3387, 0,
	0, 3390, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 1465, 1466, 1472, 1493, 1471,
	1467, 0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460,
	1461, 208, 208, 0, 0, 2078, 0, 0, 0, 2079,
	0, 0, 0, 0, 0, 0, 208, 0, 1079, 0,
	1476, 1477, 1478, 1479, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 208, 208,
	208, 208, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 0, 208, 208, 0, 57, 0, 210, 0,
	0, 1481, 1483, 0, 0, 0, 0, 0, 0, 210,
	58, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 0, 210, 0, 62, 1079, 0, 0, 0, 0,
	1468, 1469, 0, 0, 0, 0, 0, 0, 210, 1079,
	0, 0, 1079, 0, 210, 0, 0, 0, 0, 3494,
	3494, 3494, 0, 0, 1474, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 3513, 0,
	210, 1075, 0, 0, 1176, 210, 1075, 0, 208, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 2982,
	0, 2982, 0, 0, 0, 85, 0, 0, 0, 0,
	75, 82, 0, 0, 0, 3494, 0, 210, 0, 0,
	210, 0, 210, 0, 210, 0, 210, 210, 0, 0,
	1079, 1079, 1079, 0, 1079, 0, 1176, 1176, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 76, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 210, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1176, 1176, 0, 0, 0, 1176, 0, 0, 0, 1176,
	0, 0, 0, 0, 0, 0, 0, 0, 3494, 0,
	0, 210, 210, 0, 210, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	1176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 1467, 0, 1464,
	1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461, 0, 0,
	0, 0, 0, 0, 147, 80, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 1617,
	0, 1014, 0, 0, 208, 0, 0, 0, 685, 0,
	0, 0, 117, 0, 0, 0, 0, 208, 1617, 0,
	0, 0, 0, 595, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 1177, 0, 1076, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 1079, 1177, 1177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 1451, 1452, 0, 1484,
	1485, 1486, 1494, 1495, 1496, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 1487, 1482, 1177, 1177, 0,
	1079, 0, 1177, 1454, 0, 0, 1177, 0, 1500, 0,
	0, 0, 0, 0, 0, 2556, 2557, 0, 2574, 2575,
	2576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1453, 0, 0, 0, 0, 0, 595, 0, 0,
	1473, 210, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 1075, 0, 0, 0, 0, 1177, 0, 0,
	588, 0, 0, 0, 0, 588, 0, 0, 0, 0,
	0, 210, 210, 210, 0, 0, 0, 1176, 0, 2571,
	210, 0, 208, 208, 0, 867, 87, 0, 0, 208,
	0, 0, 210, 1079, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 1079, 1476, 1477, 1478, 1479, 208, 0,
	208, 1079, 208, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 1079, 210, 0, 1079, 1079, 1079, 1491, 0,
	0, 1501, 210, 0, 0, 1481, 1483, 0, 0, 0,
	0, 0, 0, 2562, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 1497, 0, 1498, 0, 0,
	0, 0, 0, 0, 1468, 1469, 0, 0, 0, 0,
	0, 0, 208, 0, 0, 208, 1079, 1079, 0, 1489,
	0, 0, 0, 0, 210, 0, 0, 0, 1474, 0,
	0, 0, 0, 208, 2577, 1079, 0, 0, 0, 0,
	0, 0, 595, 208, 0, 208, 1499, 208, 0, 208,
	0, 208, 0, 1176, 0, 0, 0, 806, 0, 0,
	1075, 1079, 1488, 210, 1079, 210, 827, 2572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1002,
	0, 0, 0, 0, 0, 1480, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2573, 0, 0, 0, 0, 0, 0, 1076,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1176, 0, 1176, 0, 1176,
	0, 0, 0, 0, 1177, 1176, 0, 0, 1176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1176, 1176, 1176, 0, 1076, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 588,
	0, 0, 0, 1490, 0, 0, 1465, 1466, 1472, 1493,
	1471, 1467, 0, 1464, 1462, 1463, 1455, 1456, 1457, 1458,
	1460, 1461, 0, 0, 0, 0, 1079, 0, 0, 0,
	2850, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1014, 0, 0, 2568, 2569, 2570, 0, 0,
	0, 0, 2567, 2565, 2566, 2558, 2559, 2560, 2561, 2563,
	2564, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1177, 0, 0, 0, 0, 0, 0, 1076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 210, 0, 0, 0,
	1079, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 1079, 1079, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 208, 210, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 0, 1007, 1079, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 1177, 0, 1177, 1075, 1177, 595, 0, 0,
	0, 0, 1177, 0, 204, 1177, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 1177, 1177,
	1177, 0, 0, 208, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 87, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 0, 0, 208, 0, 208, 0, 208, 0, 208,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 0, 1079, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 1176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 208, 0, 0, 0, 0, 0, 0, 827, 87,
	87, 0, 0, 1076, 0, 1075, 0, 0, 87, 0,
	210, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	1079, 210, 210, 1079, 208, 208, 1079, 208, 1079, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1176, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 1079, 0, 208, 0, 1075,
	0, 0, 1176, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 1451, 1452, 0, 1484, 1485, 1486, 1494, 1495,
	1496, 0, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 1487, 1482, 0, 0, 1079, 0, 0, 0, 1454,
	0, 0, 0, 0, 1500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 0, 0, 0,
	1176, 1176, 1176, 1470, 1176, 806, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 1076, 1514, 0, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 1076, 0,
	210, 1523, 0, 0, 0, 1529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 1477, 1478, 1479, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1491, 210, 0, 1501, 0, 0,
	1079, 1481, 1483, 0, 1014, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1014,
	0, 1497, 0, 1498, 0, 1177, 0, 210, 210, 0,
	1468, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 1617, 0,
	0, 0, 1076, 0, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 87, 0, 0, 1615,
	0, 1618, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 1177, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1076, 0, 0, 1177,
	0, 0, 0, 0, 0, 0, 0, 210, 1079, 0,
	0, 0, 0, 0, 208, 208, 208, 0, 1079, 1079,
	0, 1480, 0, 1617, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 1079, 0, 0, 0, 1492, 0, 0, 0, 210,
	0, 0, 208, 1069, 0, 0, 208, 1177, 1177, 1177,
	1187, 1177, 1075, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 1271, 0, 0, 1490,
	0, 0, 1465, 1466, 1472, 1493, 1471, 1467, 0, 1464,
	1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461, 1295, 1295,
	1295, 1187, 3447, 0, 0, 0, 208, 0, 208, 0,
	0, 0, 0, 1328, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1402, 0, 0, 0, 0,
	0, 0, 1176, 0, 0, 1176, 1176, 1176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 0, 0, 57, 0, 0, 0, 827, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 58, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 1176, 1176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 121, 0,
	0, 0, 0, 0, 0, 1176, 0, 1014, 1014, 0,
	0, 38, 0, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1075, 0, 41, 1075, 0, 0, 0, 42, 1076,
	0, 0, 0, 74, 0, 0, 122, 0, 0, 0,
	0, 0, 40, 85, 0, 0, 0, 0, 75, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1076, 806,
	0, 0, 806, 806, 0, 43, 0, 1076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1075, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2046, 0, 0,
	0, 0, 208, 208, 0, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 1523, 0, 0, 0, 1523, 0,
	0, 0, 0, 0, 1624, 0, 0, 0, 1014, 0,
	1177, 0, 0, 0, 0, 0, 0, 1633, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 208, 0, 0, 44, 1177,
	0, 0, 1177, 1177, 1177, 0, 1075, 0, 0, 0,
	0, 0, 1002, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 147, 80, 0, 81, 0, 45, 0, 0,
	0, 123, 0, 0, 0, 0, 1618, 46, 0, 0,
	0, 0, 0, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 1177, 1177, 0, 50, 87, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 1177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 1076, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 1014, 0, 0, 0, 0, 0, 0, 0, 1014,
	151, 0, 0, 0, 0, 1075, 0, 0, 182, 0,
	1176, 0, 1617, 0, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1176, 1176, 1176, 0, 1076, 0, 0, 150, 0, 0,
	3, 0, 0, 208, 87, 1076, 1176, 0, 0, 0,
	0, 0, 1821, 1075, 208, 208, 0, 0, 0, 1833,
	0, 0, 0, 0, 1451, 1452, 1075, 1484, 1485, 1486,
	1494, 1495, 1496, 0, 0, 87, 0, 0, 1271, 0,
	1852, 0, 1852, 1487, 1482, 0, 0, 0, 0, 0,
	0, 1454, 87, 0, 87, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 1470, 0, 87, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1833, 0, 0, 1898, 0, 0, 0, 0,
	0, 0, 0, 1076, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 1912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1922, 1075, 1924, 1075, 1926, 0, 1928,
	0, 1929, 1476, 1477, 1478, 1479, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 1946,
	87, 0, 0, 0, 0, 0, 1491, 0, 0, 1501,
	0, 0, 0, 1481, 1483, 0, 0, 0, 0, 0,
	1075, 0, 0, 1176, 0, 0, 1075, 1295, 1176, 0,
	0, 0, 0, 1497, 0, 1498, 0, 0, 0, 0,
	0, 0, 1468, 1469, 0, 0, 0, 0, 208, 0,
	0, 0, 1075, 0, 0, 1176, 0, 1489, 0, 0,
	0, 0, 1076, 0, 0, 0, 1474, 1177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 208, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 2046, 0, 1075, 0, 1177, 1177, 1177,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1177, 1523, 0, 0, 0, 0, 0,
	1076, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1451, 1452, 1076, 1484, 1485, 1486, 1494, 1495, 1496,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	1487, 1482, 0, 0, 0, 0, 0, 0, 1454, 1075,
	0, 1475, 0, 1500, 0, 0, 0, 0, 0, 0,
	208, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1453, 1492, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 0, 0,
	0, 0, 1470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2211, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 1002, 0, 0, 0, 0, 0,
	1176, 0, 0, 0, 0, 0, 0, 0, 0, 1002,
	0, 1076, 0, 1076, 0, 0, 0, 0, 0, 1476,
	1477, 1478, 1479, 0, 0, 0, 0, 0, 0, 1459,
	0, 1490, 0, 0, 1465, 1466, 1472, 1493, 1471, 1467,
	0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461,
	0, 0, 0, 1491, 0, 0, 1501, 0, 2547, 0,
	1481, 1483, 0, 0, 0, 0, 0, 1076, 0, 0,
	1177, 0, 0, 1076, 0, 1177, 0, 0, 0, 0,
	1497, 0, 1498, 0, 0, 0, 0, 0, 0, 1468,
	1469, 0, 0, 0, 0, 0, 0, 0, 0, 1076,
	0, 0, 1177, 0, 1489, 0, 0, 87, 87, 0,
	0, 87, 0, 1474, 0, 0, 0, 0, 1176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1176, 1176,
	0, 1499, 0, 0, 1176, 0, 0, 0, 0, 0,
	87, 87, 1076, 0, 87, 0, 0, 1488, 0, 0,
	0, 1187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2345, 0, 0, 0, 0, 1833, 0,
	1480, 0, 0, 1002, 0, 0, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1076, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1076, 0,
	2383, 87, 87, 1295, 0, 1295, 0, 1295, 0, 1187,
	1187, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2432,
	0, 2435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2453, 1187, 0, 2456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1490, 0,
	0, 1465, 1466, 1472, 1493, 1471, 1467, 0, 1464, 1462,
	1463, 1455, 1456, 1457, 1458, 1460, 1461, 2472, 0, 0,
	0, 0, 0, 0, 0, 2546, 0, 0, 1451, 1452,
	0, 1484, 1485, 1486, 1494, 1495, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1487, 1482, 0,
	0, 0, 0, 0, 0, 1454, 0, 0, 0, 0,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1453, 0, 1177, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 1177, 1177, 0, 0, 1470,
	0, 1177, 87, 0, 0, 0, 0, 0, 1451, 1452,
	0, 1484, 1485, 1486, 1494, 1495, 1496, 1002, 1002, 0,
	0, 0, 0, 0, 0, 0, 0, 1487, 1482, 0,
	0, 0, 0, 0, 0, 1454, 0, 0, 1076, 0,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1476, 1477, 1478, 1479,
	0, 0, 0, 1453, 0, 0, 1459, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 0, 1501, 0, 0, 0, 1481, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 1498,
	0, 0, 0, 0, 0, 0, 1468, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 1476, 1477, 1478, 1479,
	0, 1489, 0, 0, 0, 0, 1459, 0, 0, 0,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1499, 0,
	1491, 0, 0, 1501, 0, 0, 0, 1481, 1483, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 1002, 0,
	0, 0, 0, 0, 2674, 0, 0, 1497, 0, 1498,
	0, 0, 0, 0, 0, 0, 1468, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 87, 0, 2710, 2712, 2345, 1480, 0, 0,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2750, 0, 0, 0, 2754, 0, 0, 0,
	0, 0, 0, 0, 0, 2761, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1002, 0, 0, 0, 0, 0, 2804, 0, 1002,
	0, 1492, 0, 0, 0, 1490, 0, 0, 1465, 1466,
	1472, 1493, 1471, 1467, 0, 1464, 1462, 1463, 1455, 1456,
	1457, 1458, 1460, 1461, 0, 0, 0, 0, 0, 0,
	0, 0, 2543, 0, 0, 0, 2826, 0, 1187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1451, 1452, 2832, 1484, 1485,
	1486, 1494, 1495, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 1482, 0, 0, 0, 87,
	0, 0, 1454, 0, 87, 1490, 0, 1500, 1465, 1466,
	1472, 1493, 1471, 1467, 0, 1464, 1462, 1463, 1455, 1456,
	1457, 1458, 1460, 1461, 0, 0, 87, 0, 0, 0,
	1453, 0, 2542, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 1451, 1452, 0, 1484, 1485,
	1486, 1494, 1495, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 1482, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1476, 1477, 1478, 1479, 0, 0, 0,
	1453, 0, 0, 1459, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 0,
	1501, 0, 0, 0, 1481, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 1498, 0, 0, 0,
	0, 0, 0, 1468, 1469, 0, 0, 0, 0, 0,
	0, 0, 0, 1476, 1477, 1478, 1479, 0, 1489, 0,
	0, 0, 0, 1459, 0, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2046, 0, 1499, 0, 1491, 0, 0,
	1501, 0, 0, 0, 1481, 1483, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 1498, 0, 0, 0,
	0, 0, 3026, 1468, 1469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 3038,
	0, 0, 0, 0, 1480, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 3077, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 1490, 0, 0, 1465, 1466, 1472, 1493, 1471,
	1467, 0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 2541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1451, 1452, 611,
	1484, 1485, 1486, 1494, 1495, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1487, 1482, 0, 0,
	0, 0, 612, 0, 1454, 0, 0, 0, 0, 1500,
	0, 0, 1490, 0, 0, 1465, 1466, 1472, 1493, 1471,
	1467, 0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460,
	1461, 0, 1453, 3186, 0, 613, 632, 0, 0, 2079,
	0, 1473, 0, 0, 2345, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	615, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 638, 0, 0, 0,
	0, 0, 616, 0, 0, 0, 0, 0, 0, 0,
	0, 636, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 1477, 1478, 1479, 0,
	617, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	618, 0, 0, 619, 642, 0, 0, 0, 645, 1491,
	0, 0, 1501, 0, 0, 0, 1481, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 1498, 0,
	0, 0, 0, 0, 0, 1468, 1469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 3296, 641, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 0, 0, 1499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 623, 0, 0, 0, 3342, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 624, 0, 0, 0, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3368, 1187, 0, 0, 1475, 0, 0, 0, 0, 644,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 626, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 631, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 640, 0, 639, 0,
	0, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 0, 0, 635,
	3417, 0, 0, 0, 646, 0, 643, 0, 0, 0,
	0, 633, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1490, 0, 0, 1465, 1466, 1472,
	1493, 1471, 1467, 0, 1464, 1462, 1463, 1455, 1456, 1457,
	1458, 1460, 1461, 0, 0, 0, 1073, 3443, 0, 0,
	0, 0, 3452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3467, 218, 219, 220, 221, 222, 1080, 223,
	1081, 1082, 1083, 0, 1084, 475, 1085, 1086, 1087, 1088,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 1089, 232, 233, 234, 235, 236, 237, 1090,
	1091, 238, 480, 481, 482, 1092, 239, 483, 1093, 1078,
	1094, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 1095, 250, 0, 251, 252, 253, 1096, 953,
	254, 255, 1097, 1098, 1100, 1099, 1101, 1102, 1103, 256,
	257, 258, 259, 260, 261, 484, 485, 1104, 262, 1105,
	264, 263, 1106, 265, 1107, 1108, 266, 267, 268, 1109,
	269, 1110, 270, 271, 1111, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 1112, 215,
	1113, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 1114, 289, 1115, 1116, 954, 290, 291,
	1117, 292, 490, 1118, 491, 293, 1119, 294, 295, 296,
	297, 492, 493, 494, 347, 956, 298, 299, 1120, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 1121, 955,
	305, 495, 307, 306, 308, 309, 310, 496, 1122, 497,
	1123, 312, 957, 498, 958, 313, 314, 315, 959, 316,
	317, 0, 0, 318, 319, 320, 321, 1124, 323, 322,
	1125, 324, 499, 960, 325, 326, 961, 1126, 327, 328,
	1127, 1128, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 962, 342, 343, 345,
	344, 1129, 217, 963, 346, 1130, 500, 501, 348, 349,
	1131, 350, 351, 352, 1132, 1133, 354, 355, 356, 1134,
	1135, 357, 358, 502, 964, 359, 965, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 1136, 368, 369,
	504, 370, 505, 371, 1137, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 1138, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 1139, 394, 966, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 1140,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	1141, 421, 401, 402, 422, 423, 967, 424, 425, 508,
	426, 427, 1142, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 1143, 439, 440, 438, 1144,
	441, 442, 443, 444, 445, 277, 446, 1145, 447, 510,
	511, 512, 513, 1146, 454, 1147, 448, 449, 514, 450,
	515, 1148, 451, 452, 453, 0, 455, 456, 1149, 1150,
	457, 458, 459, 460, 461, 463, 1151, 464, 1152, 462,
	465, 466, 467, 516, 517, 518, 1153, 469, 468, 519,
	1154, 1155, 1156, 1157, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 0,
	2198, 0, 0, 0, 0, 0, 0, 0, 2199, 218,
	219, 220, 221, 222, 1080, 223, 1081, 1082, 1083, 0,
	1084, 475, 1085, 1086, 1087, 1088, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 1089, 232,
	233, 234, 235, 236, 237, 1090, 1091, 238, 480, 481,
	482, 1092, 239, 483, 1093, 1078, 1094, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 1095, 250,
	0, 251, 252, 253, 1096, 953, 254, 255, 1097, 1098,
	1100, 1099, 1101, 1102, 1103, 256, 257, 258, 259, 260,
	261, 484, 485, 1104, 262, 1105, 264, 263, 1106, 265,
	1107, 1108, 266, 267, 268, 1109, 269, 1110, 270, 271,
	1111, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 1112, 215, 1113, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 1114,
	289, 1115, 1116, 954, 290, 291, 1117, 292, 490, 1118,
	491, 293, 1119, 294, 295, 296, 297, 492, 493, 494,
	347, 956, 298, 299, 1120, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 1121, 955, 305, 495, 307, 306,
	308, 309, 310, 496, 1122, 497, 1123, 312, 957, 498,
	958, 313, 314, 315, 959, 316, 317, 0, 0, 318,
	319, 320, 321, 1124, 323, 322, 1125, 324, 499, 960,
	325, 326, 961, 1126, 327, 328, 1127, 1128, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 962, 342, 343, 345, 344, 1129, 217, 963,
	346, 1130, 500, 501, 348, 349, 1131, 350, 351, 352,
	1132, 1133, 354, 355, 356, 1134, 1135, 357, 358, 502,
	964, 359, 965, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 1136, 368, 369, 504, 370, 505, 371,
	1137, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 1138, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 1139, 394, 966,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 1140, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 1141, 421, 401, 402,
	422, 423, 967, 424, 425, 508, 426, 427, 1142, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 1143, 439, 440, 438, 1144, 441, 442, 443, 444,
	445, 277, 446, 1145, 447, 510, 511, 512, 513, 1146,
	454, 1147, 448, 449, 514, 450, 515, 1148, 451, 452,
	453, 0, 455, 456, 1149, 1150, 457, 458, 459, 460,
	461, 463, 1151, 464, 1152, 462, 465, 466, 467, 516,
	517, 518, 1153, 469, 468, 519, 1154, 1155, 1156, 1157,
	470, 471, 520, 472, 473, 474, 0, 0, 0, 0,
	1073, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3142, 218, 219, 220,
	221, 222, 1080, 223, 1081, 1082, 1083, 0, 1084, 475,
	1085, 1086, 1087, 1088, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 1089, 232, 233, 234,
	235, 236, 237, 1090, 1091, 238, 480, 481, 482, 1092,
	239, 483, 1093, 1078, 1094, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 1095, 250, 0, 251,
	252, 253, 1096, 953, 254, 255, 1097, 1098, 1100, 1099,
	1101, 1102, 1103, 256, 257, 258, 259, 260, 261, 484,
	485, 1104, 262, 1105, 264, 263, 1106, 265, 1107, 1108,
	266, 267, 268, 1109, 269, 1110, 270, 271, 1111, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 1112, 215, 1113, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 1114, 289, 1115,
	1116, 954, 290, 291, 1117, 292, 490, 1118, 491, 293,
	1119, 294, 295, 296, 297, 492, 493, 494, 347, 956,
	298, 299, 1120, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 1121, 955, 305, 495, 307, 306, 308, 309,
	310, 496, 1122, 497, 1123, 312, 957, 498, 958, 313,
	314, 315, 959, 316, 317, 0, 0, 318, 319, 320,
	321, 1124, 323, 322, 1125, 324, 499, 960, 325, 326,
	961, 1126, 327, 328, 1127, 1128, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	962, 342, 343, 345, 344, 1129, 217, 963, 346, 1130,
	500, 501, 348, 349, 1131, 350, 351, 352, 1132, 1133,
	354, 355, 356, 1134, 1135, 357, 358, 502, 964, 359,
	965, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 1136, 368, 369, 504, 370, 505, 371, 1137, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	1138, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 1139, 394, 966, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 1140, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 1141, 421, 401, 402, 422, 423,
	967, 424, 425, 508, 426, 427, 1142, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 1143,
	439, 440, 438, 1144, 441, 442, 443, 444, 445, 277,
	446, 1145, 447, 510, 511, 512, 513, 1146, 454, 1147,
	448, 449, 514, 450, 515, 1148, 451, 452, 453, 0,
	455, 456, 1149, 1150, 457, 458, 459, 460, 461, 463,
	1151, 464, 1152, 462, 465, 466, 467, 516, 517, 518,
	1153, 469, 468, 519, 1154, 1155, 1156, 1157, 470, 471,
	520, 472, 473, 474, 1073, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3263,
	0, 218, 219, 220, 221, 222, 1080, 223, 1081, 1082,
	1083, 0, 1084, 475, 1085, 1086, 1087, 1088, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	1089, 232, 233, 234, 235, 236, 237, 1090, 1091, 238,
	480, 481, 482, 1092, 239, 483, 1093, 1078, 1094, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	1095, 250, 0, 251, 252, 253, 1096, 953, 254, 255,
	1097, 1098, 1100, 1099, 1101, 1102, 1103, 256, 257, 258,
	259, 260, 261, 484, 485, 1104, 262, 1105, 264, 263,
	1106, 265, 1107, 1108, 266, 267, 268, 1109, 269, 1110,
	270, 271, 1111, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 1112, 215, 1113, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 1114, 289, 1115, 1116, 954, 290, 291, 1117, 292,
	490, 1118, 491, 293, 1119, 294, 295, 296, 297, 492,
	493, 494, 347, 956, 298, 299, 1120, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 1121, 955, 305, 495,
	307, 306, 308, 309, 310, 496, 1122, 497, 1123, 312,
	957, 498, 958, 313, 314, 315, 959, 316, 317, 0,
	0, 318, 319, 320, 321, 1124, 323, 322, 1125, 324,
	499, 960, 325, 326, 961, 1126, 327, 328, 1127, 1128,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 962, 342, 343, 345, 344, 1129,
	217, 963, 346, 1130, 500, 501, 348, 349, 1131, 350,
	351, 352, 1132, 1133, 354, 355, 356, 1134, 1135, 357,
	358, 502, 964, 359, 965, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 1136, 368, 369, 504, 370,
	505, 371, 1137, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 1138, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 1139,
	394, 966, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 1140, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 1141, 421,
	401, 402, 422, 423, 967, 424, 425, 508, 426, 427,
	1142, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 1143, 439, 440, 438, 1144, 441, 442,
	443, 444, 445, 277, 446, 1145, 447, 510, 511, 512,
	513, 1146, 454, 1147, 448, 449, 514, 450, 515, 1148,
	451, 452, 453, 0, 455, 456, 1149, 1150, 457, 458,
	459, 460, 461, 463, 1151, 464, 1152, 462, 465, 466,
	467, 516, 517, 518, 1153, 469, 468, 519, 1154, 1155,
	1156, 1157, 470, 471, 520, 472, 473, 474, 1073, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3193, 0, 218, 219, 220, 221, 222,
	1080, 223, 1081, 1082, 1083, 0, 1084, 475, 1085, 1086,
	1087, 1088, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 1089, 232, 233, 234, 235, 236,
	237, 1090, 1091, 238, 480, 481, 482, 1092, 239, 483,
	1093, 1078, 1094, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 1095, 250, 0, 251, 252, 253,
	1096, 953, 254, 255, 1097, 1098, 1100, 1099, 1101, 1102,
	1103, 256, 257, 258, 259, 260, 261, 484, 485, 1104,
	262, 1105, 264, 263, 1106, 265, 1107, 1108, 266, 267,
	268, 1109, 269, 1110, 270, 271, 1111, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	1112, 215, 1113, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 1114, 289, 1115, 1116, 954,
	290, 291, 1117, 292, 490, 1118, 491, 293, 1119, 294,
	295, 296, 297, 492, 493, 494, 347, 956, 298, 299,
	1120, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	1121, 955, 305, 495, 307, 306, 308, 309, 310, 496,
	1122, 497, 1123, 312, 957, 498, 958, 313, 314, 315,
	959, 316, 317, 0, 0, 318, 319, 320, 321, 1124,
	323, 322, 1125, 324, 499, 960, 325, 326, 961, 1126,
	327, 328, 1127, 1128, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 962, 342,
	343, 345, 344, 1129, 217, 963, 346, 1130, 500, 501,
	348, 349, 1131, 350, 351, 352, 1132, 1133, 354, 355,
	356, 1134, 1135, 357, 358, 502, 964, 359, 965, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 1136,
	368, 369, 504, 370, 505, 371, 1137, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 1138, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 1139, 394, 966, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 1140, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 1141, 421, 401, 402, 422, 423, 967, 424,
	425, 508, 426, 427, 1142, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 1143, 439, 440,
	438, 1144, 441, 442, 443, 444, 445, 277, 446, 1145,
	447, 510, 511, 512, 513, 1146, 454, 1147, 448, 449,
	514, 450, 515, 1148, 451, 452, 453, 0, 455, 456,
	1149, 1150, 457, 458, 459, 460, 461, 463, 1151, 464,
	1152, 462, 465, 466, 467, 516, 517, 518, 1153, 469,
	468, 519, 1154, 1155, 1156, 1157, 470, 471, 520, 472,
	473, 474, 1073, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3078, 0, 218,
	219, 220, 221, 222, 1080, 223, 1081, 1082, 1083, 0,
	1084, 475, 1085, 1086, 1087, 1088, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 1089, 232,
	233, 234, 235, 236, 237, 1090, 1091, 238, 480, 481,
	482, 1092, 239, 483, 1093, 1078, 1094, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 1095, 250,
	0, 251, 252, 253, 1096, 953, 254, 255, 1097, 1098,
	1100, 1099, 1101, 1102, 1103, 256, 257, 258, 259, 260,
	261, 484, 485, 1104, 262, 1105, 264, 263, 1106, 265,
	1107, 1108, 266, 267, 268, 1109, 269, 1110, 270, 271,
	1111, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 1112, 215, 1113, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 1114,
	289, 1115, 1116, 954, 290, 291, 1117, 292, 490, 1118,
	491, 293, 1119, 294, 295, 296, 297, 492, 493, 494,
	347, 956, 298, 299, 1120, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 1121, 955, 305, 495, 307, 306,
	308, 309, 310, 496, 1122, 497, 1123, 312, 957, 498,
	958, 313, 314, 315, 959, 316, 317, 0, 0, 318,
	319, 320, 321, 1124, 323, 322, 1125, 324, 499, 960,
	325, 326, 961, 1126, 327, 328, 1127, 1128, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 962, 342, 343, 345, 344, 1129, 217, 963,
	346, 1130, 500, 501, 348, 349, 1131, 350, 351, 352,
	1132, 1133, 354, 355, 356, 1134, 1135, 357, 358, 502,
	964, 359, 965, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 1136, 368, 369, 504, 370, 505, 371,
	1137, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 1138, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 1139, 394, 966,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 1140, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 1141, 421, 401, 402,
	422, 423, 967, 424, 425, 508, 426, 427, 1142, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 1143, 439, 440, 438, 1144, 441, 442, 443, 444,
	445, 277, 446, 1145, 447, 510, 511, 512, 513, 1146,
	454, 1147, 448, 449, 514, 450, 515, 1148, 451, 452,
	453, 0, 455, 456, 1149, 1150, 457, 458, 459, 460,
	461, 463, 1151, 464, 1152, 462, 465, 466, 467, 516,
	517, 518, 1153, 469, 468, 519, 1154, 1155, 1156, 1157,
	470, 471, 520, 472, 473, 474, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2875, 0, 218, 219, 220, 221, 222, 1080, 223,
	1081, 1082, 1083, 0, 1084, 475, 1085, 1086, 1087, 1088,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 1089, 232, 233, 234, 235, 236, 237, 1090,
	1091, 238, 480, 481, 482, 1092, 239, 483, 1093, 1078,
	1094, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 1095, 250, 0, 251, 252, 253, 1096, 953,
	254, 255, 1097, 1098, 1100, 1099, 1101, 1102, 1103, 256,
	257, 258, 259, 260, 261, 484, 485, 1104, 262, 1105,
	264, 263, 1106, 265, 1107, 1108, 266, 267, 268, 1109,
	269, 1110, 270, 271, 1111, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 1112, 215,
	1113, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 1114, 289, 1115, 1116, 954, 290, 291,
	1117, 292, 490, 1118, 491, 293, 1119, 294, 295, 296,
	297, 492, 493, 494, 347, 956, 298, 299, 1120, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 1121, 955,
	305, 495, 307, 306, 308, 309, 310, 496, 1122, 497,
	1123, 312, 957, 498, 958, 313, 314, 315, 959, 316,
	317, 0, 0, 318, 319, 320, 321, 1124, 323, 322,
	1125, 324, 499, 960, 325, 326, 961, 1126, 327, 328,
	1127, 1128, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 962, 342, 343, 345,
	344, 1129, 217, 963, 346, 1130, 500, 501, 348, 349,
	1131, 350, 351, 352, 1132, 1133, 354, 355, 356, 1134,
	1135, 357, 358, 502, 964, 359, 965, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 1136, 368, 369,
	504, 370, 505, 371, 1137, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 1138, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 1139, 394, 966, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 1140,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	1141, 421, 401, 402, 422, 423, 967, 424, 425, 508,
	426, 427, 1142, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 1143, 439, 440, 438, 1144,
	441, 442, 443, 444, 445, 277, 446, 1145, 447, 510,
	511, 512, 513, 1146, 454, 1147, 448, 449, 514, 450,
	515, 1148, 451, 452, 453, 0, 455, 456, 1149, 1150,
	457, 458, 459, 460, 461, 463, 1151, 464, 1152, 462,
	465, 466, 467, 516, 517, 518, 1153, 469, 468, 519,
	1154, 1155, 1156, 1157, 470, 471, 520, 472, 473, 474,
	1073, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2867, 0, 218, 219, 220,
	221, 222, 1080, 223, 1081, 1082, 1083, 0, 1084, 475,
	1085, 1086, 1087, 1088, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 1089, 232, 233, 234,
	235, 236, 237, 1090, 1091, 238, 480, 481, 482, 1092,
	239, 483, 1093, 1078, 1094, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 1095, 250, 0, 251,
	252, 253, 1096, 953, 254, 255, 1097, 1098, 1100, 1099,
	1101, 1102, 1103, 256, 257, 258, 259, 260, 261, 484,
	485, 1104, 262, 1105, 264, 263, 1106, 265, 1107, 1108,
	266, 267, 268, 1109, 269, 1110, 270, 271, 1111, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 1112, 215, 1113, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 1114, 289, 1115,
	1116, 954, 290, 291, 1117, 292, 490, 1118, 491, 293,
	1119, 294, 295, 296, 297, 492, 493, 494, 347, 956,
	298, 299, 1120, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 1121, 955, 305, 495, 307, 306, 308, 309,
	310, 496, 1122, 497, 1123, 312, 957, 498, 958, 313,
	314, 315, 959, 316, 317, 0, 0, 318, 319, 320,
	321, 1124, 323, 322, 1125, 324, 499, 960, 325, 326,
	961, 1126, 327, 328, 1127, 1128, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	962, 342, 343, 345, 344, 1129, 217, 963, 346, 1130,
	500, 501, 348, 349, 1131, 350, 351, 352, 1132, 1133,
	354, 355, 356, 1134, 1135, 357, 358, 502, 964, 359,
	965, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 1136, 368, 369, 504, 370, 505, 371, 1137, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	1138, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 1139, 394, 966, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 1140, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 1141, 421, 401, 402, 422, 423,
	967, 424, 425, 508, 426, 427, 1142, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 1143,
	439, 440, 438, 1144, 441, 442, 443, 444, 445, 277,
	446, 1145, 447, 510, 511, 512, 513, 1146, 454, 1147,
	448, 449, 514, 450, 515, 1148, 451, 452, 453, 0,
	455, 456, 1149, 1150, 457, 458, 459, 460, 461, 463,
	1151, 464, 1152, 462, 465, 466, 467, 516, 517, 518,
	1153, 469, 468, 519, 1154, 1155, 1156, 1157, 470, 471,
	520, 472, 473, 474, 1073, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2735,
	0, 218, 219, 220, 221, 222, 1080, 223, 1081, 1082,
	1083, 0, 1084, 475, 1085, 1086, 1087, 1088, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	1089, 232, 233, 234, 235, 236, 237, 1090, 1091, 238,
	480, 481, 482, 1092, 239, 483, 1093, 1078, 1094, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	1095, 250, 0, 251, 252, 253, 1096, 953, 254, 255,
	1097, 1098, 1100, 1099, 1101, 1102, 1103, 256, 257, 258,
	259, 260, 261, 484, 485, 1104, 262, 1105, 264, 263,
	1106, 265, 1107, 1108, 266, 267, 268, 1109, 269, 1110,
	270, 271, 1111, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 1112, 215, 1113, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 1114, 289, 1115, 1116, 954, 290, 291, 1117, 292,
	490, 1118, 491, 293, 1119, 294, 295, 296, 297, 492,
	493, 494, 347, 956, 298, 299, 1120, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 1121, 955, 305, 495,
	307, 306, 308, 309, 310, 496, 1122, 497, 1123, 312,
	957, 498, 958, 313, 314, 315, 959, 316, 317, 0,
	0, 318, 319, 320, 321, 1124, 323, 322, 1125, 324,
	499, 960, 325, 326, 961, 1126, 327, 328, 1127, 1128,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 962, 342, 343, 345, 344, 1129,
	217, 963, 346, 1130, 500, 501, 348, 349, 1131, 350,
	351, 352, 1132, 1133, 354, 355, 356, 1134, 1135, 357,
	358, 502, 964, 359, 965, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 1136, 368, 369, 504, 370,
	505, 371, 1137, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 1138, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 1139,
	394, 966, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 1140, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 1141, 421,
	401, 402, 422, 423, 967, 424, 425, 508, 426, 427,
	1142, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 1143, 439, 440, 438, 1144, 441, 442,
	443, 444, 445, 277, 446, 1145, 447, 510, 511, 512,
	513, 1146, 454, 1147, 448, 449, 514, 450, 515, 1148,
	451, 452, 453, 0, 455, 456, 1149, 1150, 457, 458,
	459, 460, 461, 463, 1151, 464, 1152, 462, 465, 466,
	467, 516, 517, 518, 1153, 469, 468, 519, 1154, 1155,
	1156, 1157, 470, 471, 520, 472, 473, 474, 1073, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2091, 0, 218, 219, 220, 221, 222,
	1080, 223, 1081, 1082, 1083, 0, 1084, 475, 1085, 1086,
	1087, 1088, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 1089, 232, 233, 234, 235, 236,
	237, 1090, 1091, 238, 480, 481, 482, 1092, 239, 483,
	1093, 1078, 1094, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 1095, 250, 0, 251, 252, 253,
	1096, 953, 254, 255, 1097, 1098, 1100, 1099, 1101, 1102,
	1103, 256, 257, 258, 259, 260, 261, 484, 485, 1104,
	262, 1105, 264, 263, 1106, 265, 1107, 1108, 266, 267,
	268, 1109, 269, 1110, 270, 271, 1111, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	1112, 215, 1113, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 1114, 289, 1115, 1116, 954,
	290, 291, 1117, 292, 490, 1118, 491, 293, 1119, 294,
	295, 296, 297, 492, 493, 494, 347, 956, 298, 299,
	1120, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	1121, 955, 305, 495, 307, 306, 308, 309, 310, 496,
	1122, 497, 1123, 312, 957, 498, 958, 313, 314, 315,
	959, 316, 317, 0, 0, 318, 319, 320, 321, 1124,
	323, 322, 1125, 324, 499, 960, 325, 326, 961, 1126,
	327, 328, 1127, 1128, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 962, 342,
	343, 345, 344, 1129, 217, 963, 346, 1130, 500, 501,
	348, 349, 1131, 350, 351, 352, 1132, 1133, 354, 355,
	356, 1134, 1135, 357, 358, 502, 964, 359, 965, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 1136,
	368, 369, 504, 370, 505, 371, 1137, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 1138, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 1139, 394, 966, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 1140, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 1141, 421, 401, 402, 422, 423, 967, 424,
	425, 508, 426, 427, 1142, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 1143, 439, 440,
	438, 1144, 441, 442, 443, 444, 445, 277, 446, 1145,
	447, 510, 511, 512, 513, 1146, 454, 1147, 448, 449,
	514, 450, 515, 1148, 451, 452, 453, 0, 455, 456,
	1149, 1150, 457, 458, 459, 460, 461, 463, 1151, 464,
	1152, 462, 465, 466, 467, 516, 517, 518, 1153, 469,
	468, 519, 1154, 1155, 1156, 1157, 470, 471, 520, 472,
	473, 474, 1181, 0, 1073, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1804, 0, 0,
	0, 218, 219, 220, 221, 222, 1080, 223, 1081, 1082,
	1083, 0, 1084, 475, 1085, 1086, 1087, 1088, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	1089, 232, 233, 234, 235, 236, 237, 1090, 1091, 238,
	480, 481, 482, 1092, 239, 483, 1093, 1078, 1094, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	1095, 250, 0, 251, 252, 253, 1096, 953, 254, 255,
	1097, 1098, 1100, 1099, 1101, 1102, 1103, 256, 257, 258,
	259, 260, 261, 484, 485, 1104, 262, 1105, 264, 263,
	1106, 265, 1107, 1108, 266, 267, 268, 1109, 269, 1110,
	270, 271, 1111, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 1112, 215, 1113, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 1114, 289, 1115, 1116, 954, 290, 291, 1117, 292,
	490, 1118, 491, 293, 1119, 294, 295, 296, 297, 492,
	493, 494, 347, 956, 298, 299, 1120, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 1121, 955, 305, 495,
	307, 306, 308, 309, 310, 496, 1122, 497, 1123, 312,
	957, 498, 958, 313, 314, 315, 959, 316, 317, 0,
	0, 318, 319, 320, 321, 1124, 323, 322, 1125, 324,
	499, 960, 325, 326, 961, 1126, 327, 328, 1127, 1128,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 962, 342, 343, 345, 344, 1129,
	217, 963, 346, 1130, 500, 501, 348, 349, 1131, 350,
	351, 352, 1132, 1133, 354, 355, 356, 1134, 1135, 357,
	358, 502, 964, 359, 965, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 1136, 368, 369, 504, 370,
	505, 371, 1137, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 1138, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 1139,
	394, 966, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 1140, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 1141, 421,
	401, 402, 422, 423, 967, 424, 425, 508, 426, 427,
	1142, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 1143, 439, 440, 438, 1144, 441, 442,
	443, 444, 445, 277, 446, 1145, 447, 510, 511, 512,
	513, 1146, 454, 1147, 448, 449, 514, 450, 515, 1148,
	451, 452, 453, 0, 455, 456, 1149, 1150, 457, 458,
	459, 460, 461, 463, 1151, 464, 1152, 462, 465, 466,
	467, 516, 517, 518, 1153, 469, 468, 519, 1154, 1155,
	1156, 1157, 470, 471, 520, 472, 473, 474, 1070, 0,
	1073, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 1080, 223, 1081, 1082, 1083, 0, 1084, 475,
	1085, 1086, 1087, 1088, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 1089, 232, 233, 234,
	235, 236, 237, 1090, 1091, 238, 480, 481, 482, 1092,
	239, 483, 1093, 1078, 1094, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 1095, 250, 0, 251,
	252, 253, 1096, 953, 254, 255, 1097, 1098, 1100, 1099,
	1101, 1102, 1103, 256, 257, 258, 259, 260, 261, 484,
	485, 1104, 262, 1105, 264, 263, 1106, 265, 1107, 1108,
	266, 267, 268, 1109, 269, 1110, 270, 271, 1111, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 1112, 215, 1113, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 1114, 289, 1115,
	1116, 954, 290, 291, 1117, 292, 490, 1118, 491, 293,
	1119, 294, 295, 296, 297, 492, 493, 494, 347, 956,
	298, 299, 1120, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 1121, 955, 305, 495, 307, 306, 308, 309,
	310, 496, 1122, 497, 1123, 312, 957, 498, 958, 313,
	314, 315, 959, 316, 317, 0, 0, 318, 319, 320,
	321, 1124, 323, 322, 1125, 324, 499, 960, 325, 326,
	961, 1126, 327, 328, 1127, 1128, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	962, 342, 343, 345, 344, 1129, 217, 963, 346, 1130,
	500, 501, 348, 349, 1131, 350, 351, 352, 1132, 1133,
	354, 355, 356, 1134, 1135, 357, 358, 502, 964, 359,
	965, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 1136, 368, 369, 504, 370, 505, 371, 1137, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	1138, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 1139, 394, 966, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 1140, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 1141, 421, 401, 402, 422, 423,
	967, 424, 425, 508, 426, 427, 1142, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 1143,
	439, 440, 438, 1144, 441, 442, 443, 444, 445, 277,
	446, 1145, 447, 510, 511, 512, 513, 1146, 454, 1147,
	448, 449, 514, 450, 515, 1148, 451, 452, 453, 0,
	455, 456, 1149, 1150, 457, 458, 459, 460, 461, 463,
	1151, 464, 1152, 462, 465, 466, 467, 516, 517, 518,
	1153, 469, 468, 519, 1154, 1155, 1156, 1157, 470, 471,
	520, 472, 473, 474, 1073, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 1080, 223, 1081, 1082,
	1083, 0, 1084, 475, 1085, 1086, 1087, 1088, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	1089, 232, 233, 234, 235, 236, 237, 1090, 1091, 238,
	480, 481, 482, 1092, 239, 483, 1093, 1078, 1094, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	1095, 250, 0, 251, 252, 253, 1096, 953, 254, 255,
	1097, 1098, 1100, 1099, 1101, 1102, 1103, 256, 257, 258,
	259, 260, 261, 484, 485, 1104, 262, 1105, 264, 263,
	1106, 265, 1107, 1108, 266, 267, 268, 1109, 269, 1110,
	270, 271, 1111, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 1112, 215, 1113, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 1114, 289, 1115, 1116, 954, 290, 291, 1117, 292,
	490, 1118, 491, 293, 1119, 294, 295, 296, 297, 492,
	493, 494, 347, 956, 298, 299, 1120, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 1121, 955, 305, 495,
	307, 306, 308, 309, 310, 496, 1122, 497, 1123, 312,
	957, 498, 958, 313, 314, 315, 959, 316, 317, 0,
	0, 318, 319, 320, 321, 1124, 323, 322, 1125, 324,
	499, 960, 325, 326, 961, 1126, 327, 328, 1127, 1128,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 962, 342, 343, 345, 344, 1129,
	217, 963, 346, 1130, 500, 501, 348, 349, 1131, 350,
	351, 352, 1132, 1133, 354, 355, 356, 1134, 1135, 357,
	358, 502, 964, 359, 965, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 1136, 368, 369, 504, 370,
	505, 371, 1137, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 1138, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 1139,
	394, 966, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 1140, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 1141, 421,
	401, 402, 422, 423, 967, 424, 425, 508, 426, 427,
	1142, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 1143, 439, 440, 438, 1144, 441, 442,
	443, 444, 445, 277, 446, 1145, 447, 510, 511, 512,
	513, 1146, 454, 1147, 448, 449, 514, 450, 515, 1148,
	451, 452, 453, 0, 455, 456, 1149, 1150, 457, 458,
	459, 460, 461, 463, 1151, 464, 1152, 462, 465, 466,
	467, 516, 517, 518, 1153, 469, 468, 519, 1154, 1155,
	1156, 1157, 470, 471, 520, 472, 473, 474, 2067, 0,
	895, 852, 853, 854, 850, 851, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 2064, 223, 0, 0, 0, 0, 0, 944,
	869, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	910, 889, 921, 879, 920, 919, 0, 232, 881, 880,
	235, 236, 237, 871, 943, 238, 979, 980, 482, 0,
	239, 950, 0, 933, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 953, 254, 255, 936, 934, 935, 940,
	938, 937, 939, 256, 257, 258, 259, 924, 261, 917,
	916, 841, 262, 0, 264, 263, 0, 265, 2065, 0,
	266, 915, 268, 0, 269, 0, 270, 271, 0, 272,
	847, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	970, 971, 860, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 914, 912, 913, 0, 288, 0, 289, 0,
	0, 954, 290, 291, 0, 292, 977, 0, 870, 293,
	0, 294, 295, 296, 297, 945, 946, 949, 347, 956,
	298, 299, 0, 300, 301, 891, 0, 0, 216, 302,
	304, 311, 0, 955, 305, 903, 894, 905, 907, 908,
	909, 904, 0, 896, 0, 312, 957, 947, 958, 313,
	314, 315, 959, 929, 930, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 978, 960, 325, 326,
	961, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 883, 339,
	962, 342, 343, 345, 344, 838, 217, 963, 346, 861,
	948, 918, 348, 349, 0, 892, 351, 893, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 964, 359,
	965, 972, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 973, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 911, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 966, 395, 396,
	397, 398, 848, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 884, 885, 887, 888,
	412, 418, 419, 420, 941, 421, 401, 402, 422, 423,
	967, 424, 425, 906, 886, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 952, 433, 434, 435, 974, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	882, 0, 447, 925, 926, 927, 928, 0, 454, 0,
	448, 449, 975, 450, 976, 859, 451, 452, 453, 0,
	455, 456, 0, 842, 457, 458, 459, 460, 461, 463,
	942, 464, 0, 890, 465, 466, 467, 516, 922, 969,
	2063, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 839, 0, 0, 0, 0, 0,
	837, 0, 0, 0, 0, 0, 0, 835, 836, 2066,
	0, 0, 0, 0, 0, 0, 865, 2062, 0, 828,
	863, 895, 852, 853, 854, 850, 851, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	944, 869, 0, 0, 0, 224, 226, 225, 227, 228,
	476, 910, 889, 921, 879, 920, 919, 0, 232, 881,
	880, 235, 236, 237, 871, 943, 238, 979, 980, 482,
	0, 239, 950, 0, 933, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 953, 254, 255, 936, 934, 935,
	940, 938, 937, 939, 256, 257, 258, 259, 924, 261,
	917, 916, 841, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 915, 268, 0, 269, 0, 270, 271, 0,
	272, 847, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 970, 971, 860, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 914, 912, 913, 0, 288, 0, 289,
	0, 0, 954, 290, 291, 0, 292, 977, 0, 870,
	293, 0, 294, 295, 296, 297, 945, 946, 949, 347,
	956, 298, 299, 0, 300, 301, 891, 0, 0, 216,
	302, 304, 311, 0, 955, 305, 903, 894, 905, 907,
	908, 909, 904, 0, 896, 0, 312, 957, 947, 958,
	313, 314, 315, 959, 929, 930, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 978, 960, 325,
	326, 961, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 883,
	339, 962, 342, 343, 345, 344, 838, 217, 963, 346,
	861, 948, 918, 348, 349, 0, 892, 351, 893, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 964,
	359, 965, 972, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 973, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 911, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 966, 395,
	396, 397, 398, 848, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 181, 416, 417, 884, 885, 887,
	888, 412, 418, 419, 420, 941, 421, 401, 402, 422,
	423, 967, 424, 425, 906, 886, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 952, 433, 434, 435, 974,
	0, 439, 440, 438, 183, 441, 442, 443, 444, 445,
	277, 882, 0, 447, 925, 926, 927, 928, 0, 454,
	0, 448, 449, 975, 450, 976, 859, 451, 452, 453,
	0, 455, 456, 0, 842, 457, 458, 459, 460, 461,
	463, 942, 464, 0, 890, 465, 466, 467, 1320, 922,
	969, 0, 469, 468, 519, 0, 0, 0, 175, 470,
	471, 520, 472, 473, 474, 839, 176, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 835, 836,
	895, 852, 853, 854, 850, 851, 864, 1528, 1526, 0,
	0, 863, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 944,
	869, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	910, 889, 921, 879, 920, 919, 0, 232, 881, 880,
	235, 236, 237, 871, 943, 238, 979, 980, 482, 0,
	239, 950, 0, 933, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 953, 254, 255, 936, 934, 935, 940,
	938, 937, 939, 256, 257, 258, 259, 924, 261, 917,
	916, 841, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 915, 268, 0, 269, 0, 270, 271, 0, 272,
	847, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	970, 971, 860, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 914, 912, 913, 0, 288, 0, 289, 0,
	0, 954, 290, 291, 0, 292, 977, 0, 870, 293,
	0, 294, 295, 296, 297, 945, 946, 949, 347, 956,
	298, 299, 0, 300, 301, 891, 0, 0, 216, 302,
	304, 311, 0, 955, 305, 903, 894, 905, 907, 908,
	909, 904, 0, 896, 0, 312, 957, 947, 958, 313,
	314, 315, 959, 929, 930, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 978, 960, 325, 326,
	961, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 883, 339,
	962, 342, 343, 345, 344, 838, 217, 963, 346, 861,
	948, 918, 348, 349, 0, 892, 351, 893, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 964, 359,
	965, 972, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 973, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 911, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 966, 395, 396,
	397, 398, 848, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 181, 416, 417, 884, 885, 887, 888,
	412, 418, 419, 420, 941, 421, 401, 402, 422, 423,
	967, 424, 425, 906, 886, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 952, 433, 434, 435, 974, 0,
	439, 440, 438, 183, 441, 442, 443, 444, 445, 277,
	882, 0, 447, 925, 926, 927, 928, 0, 454, 0,
	448, 449, 975, 450, 976, 859, 451, 452, 453, 0,
	455, 456, 0, 842, 457, 458, 459, 460, 461, 463,
	942, 464, 0, 890, 465, 466, 467, 1320, 922, 969,
	0, 469, 468, 519, 0, 0, 0, 175, 470, 471,
	520, 472, 473, 474, 839, 176, 0, 0, 0, 0,
	837, 0, 0, 0, 0, 0, 0, 835, 836, 895,
	852, 853, 854, 850, 851, 864, 1528, 2494, 0, 0,
	863, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 944, 869,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 910,
	889, 921, 879, 920, 919, 0, 232, 881, 880, 235,
	236, 237, 871, 943, 238, 979, 980, 482, 0, 239,
	950, 0, 933, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 953, 254, 255, 936, 934, 935, 940, 938,
	937, 939, 256, 257, 258, 259, 924, 261, 917, 916,
	841, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	915, 268, 0, 269, 0, 270, 271, 0, 272, 847,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 970,
	971, 860, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 914, 912, 913, 0, 288, 0, 289, 0, 0,
	954, 290, 291, 0, 292, 977, 0, 870, 293, 0,
	294, 295, 296, 297, 945, 946, 949, 347, 956, 298,
	299, 0, 300, 301, 891, 0, 0, 216, 302, 304,
	311, 0, 955, 305, 903, 894, 905, 907, 908, 909,
	904, 0, 896, 0, 312, 957, 947, 958, 313, 314,
	315, 959, 929, 930, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 978, 960, 325, 326, 961,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 883, 339, 962,
	342, 343, 345, 344, 838, 217, 963, 346, 861, 948,
	918, 348, 349, 0, 892, 351, 893, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 964, 359, 965,
	972, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 973, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 911, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 966, 395, 396, 397,
	398, 848, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 181, 416, 417, 884, 885, 887, 888, 412,
	418, 419, 420, 941, 421, 401, 402, 422, 423, 967,
	424, 425, 906, 886, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 952, 433, 434, 435, 974, 0, 439,
	440, 438, 183, 441, 442, 443, 444, 445, 277, 882,
	0, 447, 925, 926, 927, 928, 0, 454, 0, 448,
	449, 975, 450, 976, 859, 451, 452, 453, 0, 455,
	456, 0, 842, 457, 458, 459, 460, 461, 463, 942,
	464, 0, 890, 465, 466, 467, 1320, 922, 969, 0,
	469, 468, 519, 0, 0, 0, 175, 470, 471, 520,
	472, 473, 474, 839, 176, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 0, 0, 835, 836, 895, 852,
	853, 854, 850, 851, 864, 1528, 1526, 0, 0, 863,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 944, 869, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 910, 889,
	921, 879, 920, 919, 2152, 232, 881, 880, 235, 236,
	237, 871, 943, 238, 979, 980, 482, 0, 239, 950,
	0, 933, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 953, 254, 255, 936, 934, 935, 940, 938, 937,
	939, 256, 257, 258, 259, 924, 261, 917, 916, 841,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 915,
	268, 0, 269, 0, 270, 271, 0, 272, 847, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 970, 971,
	860, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	914, 912, 913, 0, 288, 0, 289, 0, 2157, 954,
	290, 291, 0, 292, 977, 0, 870, 293, 0, 294,
	295, 296, 297, 945, 946, 949, 347, 956, 298, 299,
	0, 300, 301, 891, 0, 0, 216, 302, 304, 311,
	0, 955, 305, 903, 894, 905, 907, 908, 909, 904,
	0, 896, 0, 312, 957, 947, 958, 313, 314, 315,
	959, 929, 930, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 2153, 324, 978, 960, 325, 326, 961, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 883, 339, 962, 342,
	343, 345, 344, 838, 217, 963, 346, 861, 948, 918,
	348, 349, 0, 892, 351, 893, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 964, 359, 965, 972,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 973, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 911, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 966, 395, 396, 397, 398,
	848, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 884, 885, 887, 888, 412, 418,
	419, 420, 941, 421, 401, 402, 422, 423, 967, 424,
	425, 906, 886, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 952, 433, 434, 435, 974, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 882, 0,
	447, 925, 926, 927, 928, 0, 454, 2154, 448, 449,
	975, 450, 976, 859, 451, 452, 453, 0, 455, 456,
	0, 842, 457, 458, 459, 460, 461, 463, 942, 464,
	0, 890, 465, 466, 467, 516, 922, 969, 0, 469,
	468, 519, 0, 0, 0, 0, 470, 471, 520, 472,
	473, 474, 839, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 835, 836, 0, 0, 0,
	0, 0, 0, 0, 865, 0, 0, 1385, 863, 895,
	852, 853, 854, 850, 851, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 944, 869,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 910,
	889, 921, 879, 920, 919, 0, 232, 881, 880, 235,
	236, 237, 871, 943, 238, 979, 980, 482, 0, 239,
	950, 0, 933, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 953, 254, 255, 936, 934, 935, 940, 938,
	937, 939, 256, 257, 258, 259, 924, 261, 917, 916,
	841, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	915, 268, 0, 269, 0, 270, 271, 0, 272, 847,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 970,
	971, 860, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 914, 912, 913, 0, 288, 0, 289, 0, 0,
	954, 290, 291, 0, 292, 977, 0, 870, 293, 0,
	294, 295, 296, 297, 945, 946, 949, 347, 956, 298,
	299, 0, 300, 301, 891, 0, 0, 216, 302, 304,
	311, 0, 955, 305, 903, 894, 905, 907, 908, 909,
	904, 0, 896, 0, 312, 957, 947, 958, 313, 314,
	315, 959, 929, 930, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 978, 960, 325, 326, 961,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 883, 339, 962,
	342, 343, 345, 344, 838, 217, 963, 346, 861, 948,
	918, 348, 349, 0, 892, 351, 893, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 964, 359, 965,
	972, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 973, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 911, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 966, 395, 396, 397,
	398, 848, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 884, 885, 887, 888, 412,
	418, 419, 420, 941, 421, 401, 402, 422, 423, 967,
	424, 425, 906, 886, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 952, 433, 434, 435, 974, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 882,
	0, 447, 925, 926, 927, 928, 0, 454, 0, 448,
	449, 975, 450, 976, 859, 451, 452, 453, 0, 455,
	456, 0, 842, 457, 458, 459, 460, 461, 463, 942,
	464, 0, 890, 465, 466, 467, 516, 922, 969, 0,
	469, 468, 519, 1384, 0, 0, 0, 470, 471, 520,
	472, 473, 474, 839, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 0, 0, 835, 836, 0, 0,
	0, 0, 0, 0, 0, 865, 0, 0, 831, 863,
	895, 852, 853, 854, 850, 851, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 944,
	869, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	910, 889, 921, 879, 920, 919, 0, 232, 881, 880,
	235, 236, 237, 871, 943, 238, 979, 980, 482, 0,
	239, 950, 0, 933, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 953, 254, 255, 936, 934, 935, 940,
	938, 937, 939, 256, 257, 258, 259, 924, 261, 917,
	916, 841, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 915, 268, 0, 269, 0, 270, 271, 0, 272,
	847, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	970, 971, 860, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 914, 912, 913, 0, 288, 0, 289, 0,
	0, 954, 290, 291, 0, 292, 977, 0, 870, 293,
	0, 294, 295, 296, 297, 945, 946, 949, 347, 956,
	298, 299, 0, 300, 301, 891, 0, 0, 216, 302,
	304, 311, 0, 955, 305, 903, 894, 905, 907, 908,
	909, 904, 0, 896, 0, 312, 957, 947, 958, 313,
	314, 315, 959, 929, 930, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 978, 960, 325, 326,
	961, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 883, 339,
	962, 342, 343, 345, 344, 838, 217, 963, 346, 861,
	948, 918, 348, 349, 0, 892, 351, 893, 843, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 964, 359,
	965, 972, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 973, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 911, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 966, 395, 396,
	397, 398, 848, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 884, 885, 887, 888,
	412, 418, 419, 420, 941, 421, 401, 402, 422, 423,
	967, 424, 425, 906, 886, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 952, 433, 434, 435, 974, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	882, 0, 447, 925, 926, 927, 928, 0, 454, 0,
	448, 449, 975, 450, 976, 859, 451, 452, 453, 0,
	455, 456, 0, 842, 457, 458, 459, 460, 461, 463,
	942, 464, 0, 890, 465, 466, 467, 516, 922, 969,
	0, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 839, 0, 0, 0, 0, 0,
	837, 0, 0, 0, 0, 0, 0, 835, 836, 895,
	852, 853, 854, 850, 851, 864, 865, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 944, 869,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 910,
	889, 921, 879, 920, 919, 0, 232, 881, 880, 235,
	236, 237, 871, 943, 238, 979, 980, 482, 0, 239,
	950, 0, 933, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 3464,
	253, 0, 953, 254, 255, 936, 934, 935, 940, 938,
	937, 939, 256, 257, 258, 259, 924, 261, 917, 916,
	841, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	915, 268, 0, 269, 0, 270, 271, 0, 272, 847,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 970,
	971, 860, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 914, 912, 913, 0, 288, 0, 289, 0, 0,
	954, 290, 291, 0, 292, 977, 0, 870, 293, 0,
	294, 295, 296, 297, 945, 946, 949, 347, 956, 298,
	299, 0, 300, 301, 891, 0, 0, 216, 302, 304,
	311, 0, 955, 305, 903, 894, 905, 907, 908, 909,
	904, 0, 896, 0, 312, 957, 947, 958, 313, 314,
	315, 959, 929, 930, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 978, 960, 325, 326, 961,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 883, 339, 962,
	342, 343, 345, 344, 838, 217, 963, 346, 861, 948,
	918, 348, 349, 0, 892, 351, 893, 843, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 964, 359, 965,
	972, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 973, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 911, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 966, 395, 396, 397,
	398, 848, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 884, 885, 887, 888, 412,
	418, 419, 420, 941, 421, 401, 402, 422, 423, 967,
	424, 425, 906, 886, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 952, 433, 434, 435, 974, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 882,
	0, 447, 925, 926, 927, 928, 0, 454, 0, 448,
	449, 975, 450, 976, 859, 451, 452, 453, 0, 455,
	456, 0, 842, 457, 458, 459, 460, 461, 463, 942,
	464, 0, 890, 465, 466, 467, 516, 922, 969, 0,
	469, 468, 519, 0, 0, 0, 0, 470, 471, 520,
	472, 473, 474, 839, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 0, 0, 835, 836, 895, 852,
	853, 854, 850, 851, 864, 865, 0, 0, 0, 863,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 944, 869, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 910, 889,
	921, 879, 920, 919, 0, 232, 881, 880, 235, 236,
	237, 871, 943, 238, 979, 980, 482, 0, 239, 950,
	0, 933, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 3320, 253,
	0, 953, 254, 255, 936, 934, 935, 940, 938, 937,
	939, 256, 257, 258, 259, 924, 261, 917, 916, 841,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 915,
	268, 0, 269, 0, 270, 271, 0, 272, 847, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 970, 971,
	860, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	914, 912, 913, 0, 288, 0, 289, 0, 0, 954,
	290, 291, 0, 292, 977, 0, 870, 293, 0, 294,
	295, 296, 297, 945, 946, 949, 347, 956, 298, 299,
	0, 300, 301, 891, 0, 0, 216, 302, 304, 311,
	0, 955, 305, 903, 894, 905, 907, 908, 909, 904,
	0, 896, 0, 312, 957, 947, 958, 313, 314, 315,
	959, 929, 930, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 978, 960, 325, 326, 961, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 883, 339, 962, 342,
	343, 345, 344, 838, 217, 963, 346, 861, 948, 918,
	348, 349, 0, 892, 351, 893, 843, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 964, 359, 965, 972,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 973, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 911, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 966, 395, 396, 397, 398,
	848, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 884, 885, 887, 888, 412, 418,
	419, 420, 941, 421, 401, 402, 422, 423, 967, 424,
	425, 906, 886, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 952, 433, 434, 435, 974, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 882, 0,
	447, 925, 926, 927, 928, 0, 454, 0, 448, 449,
	975, 450, 976, 859, 451, 452, 453, 0, 455, 456,
	0, 842, 457, 458, 459, 460, 461, 463, 942, 464,
	0, 890, 465, 466, 467, 516, 922, 969, 0, 469,
	468, 519, 0, 0, 0, 0, 470, 471, 520, 472,
	473, 474, 839, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 835, 836, 895, 852, 853,
	854, 850, 851, 864, 865, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 944, 869, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 910, 889, 921,
	879, 920, 919, 0, 232, 881, 880, 235, 236, 237,
	871, 943, 238, 979, 980, 482, 0, 239, 950, 0,
	933, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	953, 254, 255, 936, 934, 935, 940, 938, 937, 939,
	256, 257, 258, 259, 924, 261, 917, 916, 841, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 915, 268,
	0, 269, 0, 270, 271, 0, 272, 847, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 970, 971, 860,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 914,
	912, 913, 0, 288, 0, 289, 0, 0, 954, 290,
	291, 0, 292, 977, 0, 870, 293, 0, 294, 295,
	296, 297, 945, 946, 949, 347, 956, 298, 299, 0,
	300, 301, 891, 0, 0, 216, 302, 304, 311, 0,
	955, 305, 903, 894, 905, 907, 908, 909, 904, 0,
	896, 0, 312, 957, 947, 958, 313, 314, 315, 959,
	929, 930, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 978, 960, 325, 326, 961, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 883, 339, 962, 342, 343,
	345, 344, 838, 3048, 963, 346, 861, 948, 918, 348,
	349, 0, 892, 351, 893, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 964, 359, 965, 972, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 973, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 911, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 966, 395, 396, 397, 398, 848,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 884, 885, 887, 888, 412, 418, 419,
	420, 941, 421, 401, 402, 422, 423, 967, 424, 425,
	906, 886, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 952, 433, 434, 435, 974, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 882, 0, 447,
	925, 926, 927, 928, 0, 454, 0, 448, 449, 975,
	450, 976, 859, 451, 452, 453, 0, 455, 456, 0,
	842, 457, 458, 459, 460, 461, 463, 942, 464, 0,
	890, 465, 466, 467, 516, 922, 969, 0, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 839, 0, 0, 0, 0, 0, 837, 0, 0,
	0, 0, 0, 0, 835, 836, 1588, 0, 0, 0,
	0, 0, 0, 865, 0, 0, 0, 863, 895, 852,
	853, 854, 850, 851, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 944, 869, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 910, 889,
	921, 879, 920, 919, 0, 232, 881, 880, 235, 236,
	237, 871, 943, 238, 979, 980, 482, 0, 239, 950,
	0, 933, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 953, 254, 255, 936, 934, 935, 940, 938, 937,
	939, 256, 257, 258, 259, 924, 261, 917, 916, 841,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 915,
	268, 0, 269, 0, 270, 271, 0, 272, 847, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 970, 971,
	860, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	914, 912, 913, 0, 288, 0, 289, 0, 0, 954,
	290, 291, 0, 292, 977, 0, 870, 293, 0, 294,
	295, 296, 297, 945, 946, 949, 347, 956, 298, 299,
	0, 300, 301, 891, 0, 0, 216, 302, 304, 311,
	0, 955, 305, 903, 894, 905, 907, 908, 909, 904,
	0, 896, 0, 312, 957, 947, 958, 313, 314, 315,
	959, 929, 930, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 978, 960, 325, 326, 961, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 883, 339, 962, 342,
	343, 345, 344, 838, 217, 963, 346, 861, 948, 918,
	348, 349, 0, 892, 351, 893, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 964, 359, 965, 972,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 973, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 911, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 966, 395, 396, 397, 398,
	848, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 884, 885, 887, 888, 412, 418,
	419, 420, 941, 421, 401, 402, 422, 423, 967, 424,
	425, 906, 886, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 952, 433, 434, 435, 974, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 882, 0,
	447, 925, 926, 927, 928, 0, 454, 0, 448, 449,
	975, 450, 976, 859, 451, 452, 453, 0, 455, 456,
	0, 842, 457, 458, 459, 460, 461, 463, 942, 464,
	0, 890, 465, 466, 467, 516, 922, 969, 2854, 469,
	468, 519, 0, 0, 0, 0, 470, 471, 520, 472,
	473, 474, 839, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 835, 836, 895, 852, 853,
	854, 850, 851, 864, 865, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 944, 869, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 910, 889, 921,
	879, 920, 919, 0, 232, 881, 880, 235, 236, 237,
	871, 943, 238, 979, 980, 482, 0, 239, 950, 0,
	933, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	953, 254, 255, 936, 934, 935, 940, 938, 937, 939,
	256, 257, 258, 259, 924, 261, 917, 916, 841, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 915, 268,
	0, 269, 0, 270, 271, 0, 272, 847, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 970, 971, 860,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 914,
	912, 913, 0, 288, 0, 289, 0, 0, 954, 290,
	291, 0, 292, 977, 0, 870, 293, 0, 294, 295,
	296, 297, 945, 946, 949, 347, 956, 298, 299, 0,
	300, 301, 891, 0, 0, 1981, 302, 304, 311, 0,
	955, 305, 903, 894, 905, 907, 908, 909, 904, 0,
	896, 0, 312, 957, 947, 958, 313, 314, 315, 959,
	929, 930, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 978, 960, 325, 326, 961, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 883, 339, 962, 342, 343,
	345, 344, 838, 217, 963, 346, 861, 948, 918, 348,
	349, 0, 892, 351, 893, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 964, 359, 965, 972, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 973, 370, 505, 371, 1980, 372, 0, 373, 374,
	375, 376, 377, 378, 911, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 966, 395, 396, 397, 398, 848,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 884, 885, 887, 888, 412, 418, 419,
	420, 941, 421, 401, 402, 422, 423, 967, 424, 425,
	906, 886, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 952, 433, 434, 435, 974, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 882, 0, 447,
	925, 926, 927, 928, 0, 454, 0, 448, 449, 975,
	450, 976, 859, 451, 452, 453, 0, 455, 456, 0,
	842, 457, 458, 459, 460, 461, 463, 942, 464, 0,
	890, 465, 466, 467, 516, 922, 969, 0, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 839, 0, 0, 0, 0, 0, 837, 0, 0,
	0, 0, 0, 0, 835, 836, 895, 852, 853, 854,
	850, 851, 864, 865, 0, 0, 0, 863, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 944, 869, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 910, 889, 921, 879,
	920, 919, 0, 232, 881, 880, 235, 236, 237, 871,
	943, 238, 979, 980, 482, 0, 239, 950, 0, 933,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 953,
	254, 255, 936, 934, 935, 940, 938, 937, 939, 256,
	257, 258, 259, 924, 261, 917, 916, 841, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 915, 268, 0,
	269, 0, 270, 271, 0, 272, 847, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 970, 971, 860, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 914, 912,
	913, 0, 288, 0, 289, 0, 0, 954, 290, 291,
	0, 292, 977, 0, 870, 293, 0, 294, 295, 296,
	297, 945, 946, 949, 347, 956, 298, 299, 0, 300,
	301, 891, 0, 0, 216, 302, 304, 311, 0, 955,
	305, 903, 894, 905, 907, 908, 909, 904, 0, 896,
	0, 312, 957, 947, 958, 313, 314, 315, 959, 929,
	930, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 978, 960, 325, 326, 961, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 883, 339, 962, 342, 343, 345,
	344, 838, 217, 963, 346, 861, 948, 918, 348, 349,
	0, 892, 351, 893, 843, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 964, 359, 965, 972, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	973, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 911, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 966, 395, 396, 397, 398, 848, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 884, 885, 887, 888, 412, 418, 419, 420,
	941, 421, 401, 402, 422, 423, 967, 424, 425, 906,
	886, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	952, 433, 434, 435, 974, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 882, 0, 447, 925,
	926, 927, 928, 0, 454, 0, 448, 449, 975, 450,
	976, 859, 451, 452, 453, 0, 455, 456, 0, 842,
	457, 458, 459, 460, 461, 463, 942, 464, 0, 890,
	465, 466, 467, 516, 922, 969, 0, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	839, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 0, 0, 835, 836, 895, 852, 853, 854, 850,
	851, 864, 865, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 944, 869, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 910, 889, 921, 879, 920,
	919, 0, 232, 881, 880, 235, 236, 237, 871, 943,
	238, 979, 980, 482, 0, 239, 950, 0, 933, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 953, 254,
	255, 936, 934, 935, 940, 938, 937, 939, 256, 257,
	258, 259, 924, 261, 917, 916, 841, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 915, 268, 0, 269,
	0, 270, 271, 0, 272, 847, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 970, 971, 860, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 914, 912, 913,
	0, 288, 0, 289, 0, 0, 954, 290, 291, 0,
	292, 977, 0, 870, 293, 0, 294, 295, 296, 297,
	945, 946, 949, 347, 956, 298, 299, 0, 300, 301,
	891, 0, 0, 216, 302, 304, 311, 0, 955, 305,
	903, 894, 905, 907, 908, 909, 904, 0, 896, 0,
	312, 957, 947, 958, 313, 314, 315, 959, 929, 930,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 978, 960, 325, 326, 961, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 883, 339, 962, 342, 343, 345, 344,
	838, 217, 963, 346, 861, 948, 918, 348, 349, 0,
	892, 351, 893, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 964, 359, 965, 972, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 973,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 911, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 966, 395, 396, 397, 398, 848, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 884, 885, 887, 888, 412, 418, 419, 420, 941,
	421, 401, 402, 422, 423, 967, 424, 425, 906, 886,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 952,
	433, 434, 435, 974, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 882, 0, 447, 925, 926,
	927, 928, 0, 454, 0, 448, 449, 975, 450, 976,
	859, 451, 452, 453, 0, 455, 456, 0, 842, 457,
	458, 459, 460, 461, 463, 942, 464, 0, 890, 465,
	466, 467, 516, 922, 969, 0, 469, 468, 519, 0,
	0, 0, 0, 470, 471, 520, 472, 473, 474, 839,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 835, 836, 1588, 0, 0, 0, 0, 0,
	0, 865, 0, 0, 0, 863, 895, 852, 853, 854,
	850, 851, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 944, 869, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 910, 889, 921, 879,
	920, 919, 0, 232, 881, 880, 235, 236, 237, 871,
	943, 238, 979, 980, 482, 0, 239, 950, 0, 933,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 953,
	254, 255, 936, 934, 935, 940, 938, 937, 939, 256,
	257, 258, 259, 924, 261, 917, 916, 841, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 915, 268, 0,
	269, 0, 270, 271, 0, 272, 847, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 970, 971, 860, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 914, 912,
	913, 0, 288, 0, 289, 0, 2157, 954, 290, 291,
	0, 292, 977, 0, 870, 293, 0, 294, 295, 296,
	297, 945, 946, 949, 347, 956, 298, 299, 0, 300,
	301, 891, 0, 0, 216, 302, 304, 311, 0, 955,
	305, 903, 894, 905, 907, 908, 909, 904, 0, 896,
	0, 312, 957, 947, 958, 313, 314, 315, 959, 929,
	930, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 978, 960, 325, 326, 961, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 883, 339, 962, 342, 343, 345,
	344, 838, 217, 963, 346, 861, 948, 918, 348, 349,
	0, 892, 351, 893, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 964, 359, 965, 972, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	973, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 911, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 966, 395, 396, 397, 398, 848, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 884, 885, 887, 888, 412, 418, 419, 420,
	941, 421, 401, 402, 422, 423, 967, 424, 425, 906,
	886, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	952, 433, 434, 435, 974, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 882, 0, 447, 925,
	926, 927, 928, 0, 454, 0, 448, 449, 975, 450,
	976, 859, 451, 452, 453, 0, 455, 456, 0, 842,
	457, 458, 459, 460, 461, 463, 942, 464, 0, 890,
	465, 466, 467, 516, 922, 969, 0, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	839, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 0, 0, 835, 836, 895, 852, 853, 854, 850,
	851, 864, 865, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 944, 869, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 910, 889, 921, 879, 920,
	919, 0, 232, 881, 880, 235, 236, 237, 871, 943,
	238, 979, 980, 482, 0, 239, 950, 0, 933, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 953, 254,
	255, 936, 934, 935, 940, 938, 937, 939, 256, 257,
	258, 259, 924, 261, 917, 916, 841, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 915, 268, 0, 269,
	0, 270, 271, 0, 272, 847, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 970, 971, 860, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 914, 912, 913,
	0, 288, 0, 289, 0, 0, 954, 290, 291, 0,
	292, 977, 0, 870, 293, 0, 294, 295, 296, 297,
	945, 946, 949, 347, 956, 298, 299, 0, 300, 301,
	891, 0, 0, 216, 302, 304, 311, 0, 955, 305,
	903, 894, 905, 907, 908, 909, 904, 0, 896, 0,
	312, 957, 947, 958, 313, 314, 315, 959, 929, 930,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 978, 960, 325, 326, 961, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 883, 339, 962, 342, 343, 345, 344,
	838, 217, 963, 346, 861, 948, 918, 348, 349, 0,
	892, 351, 893, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 964, 359, 965, 972, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 973,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 911, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 966, 395, 396, 397, 398, 848, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 884, 885, 887, 888, 412, 418, 419, 420, 941,
	421, 401, 402, 422, 423, 967, 424, 425, 906, 886,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 952,
	433, 434, 435, 974, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 882, 0, 447, 925, 926,
	927, 928, 0, 454, 0, 448, 449, 975, 450, 976,
	859, 451, 452, 453, 0, 455, 456, 0, 842, 457,
	458, 459, 460, 461, 463, 942, 464, 0, 890, 465,
	466, 467, 516, 922, 969, 0, 469, 468, 519, 0,
	0, 0, 0, 470, 471, 520, 472, 473, 474, 839,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 835, 836, 0, 0, 0, 0, 0, 0,
	0, 865, 1526, 0, 2162, 863, 895, 852, 853, 854,
	850, 851, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 944, 869, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 910, 889, 921, 879,
	920, 919, 0, 232, 881, 880, 235, 236, 237, 871,
	943, 238, 979, 980, 482, 0, 239, 950, 0, 933,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 953,
	254, 255, 936, 934, 935, 940, 938, 937, 939, 256,
	257, 258, 259, 924, 261, 917, 916, 841, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 915, 268, 0,
	269, 0, 270, 271, 0, 272, 847, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 970, 971, 860, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 914, 912,
	913, 0, 288, 0, 289, 0, 0, 954, 290, 291,
	0, 292, 977, 0, 870, 293, 0, 294, 295, 296,
	297, 945, 946, 949, 347, 956, 298, 299, 0, 300,
	301, 891, 0, 0, 216, 302, 304, 311, 0, 955,
	305, 903, 894, 905, 907, 908, 909, 904, 0, 896,
	0, 312, 957, 947, 958, 313, 314, 315, 959, 929,
	930, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 978, 960, 325, 326, 961, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 883, 339, 962, 342, 343, 345,
	344, 838, 217, 963, 346, 861, 948, 918, 348, 349,
	0, 892, 351, 893, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 964, 359, 965, 972, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	973, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 911, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 966, 395, 396, 397, 398, 848, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 884, 885, 887, 888, 412, 418, 419, 420,
	941, 421, 401, 402, 422, 423, 967, 424, 425, 906,
	886, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	952, 433, 434, 435, 974, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 882, 0, 447, 925,
	926, 927, 928, 0, 454, 0, 448, 449, 975, 450,
	976, 859, 451, 452, 453, 0, 455, 456, 0, 842,
	457, 458, 459, 460, 461, 463, 942, 464, 0, 890,
	465, 466, 467, 516, 922, 969, 0, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	839, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 0, 0, 835, 836, 0, 0, 0, 0, 0,
	0, 0, 865, 0, 0, 2160, 863, 895, 852, 853,
	854, 850, 851, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 944, 869, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 910, 889, 921,
	879, 920, 919, 0, 232, 881, 880, 235, 236, 237,
	871, 943, 238, 979, 980, 482, 0, 239, 950, 0,
	933, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	953, 254, 255, 936, 934, 935, 940, 938, 937, 939,
	256, 257, 258, 259, 924, 261, 917, 916, 841, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 915, 268,
	0, 269, 0, 270, 271, 0, 272, 847, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 970, 971, 860,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 914,
	912, 913, 0, 288, 0, 289, 0, 0, 954, 290,
	291, 0, 292, 977, 0, 870, 293, 0, 294, 295,
	296, 297, 945, 946, 949, 347, 956, 298, 299, 0,
	300, 301, 891, 0, 0, 216, 302, 304, 311, 0,
	955, 305, 903, 894, 905, 907, 908, 909, 904, 0,
	896, 0, 312, 957, 947, 958, 313, 314, 315, 959,
	929, 930, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 978, 960, 325, 326, 961, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 883, 339, 962, 342, 343,
	345, 344, 838, 217, 963, 346, 861, 948, 918, 348,
	349, 0, 892, 351, 893, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 964, 359, 965, 972, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 973, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 911, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 966, 395, 396, 397, 398, 848,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 884, 885, 887, 888, 412, 418, 419,
	420, 941, 421, 401, 402, 422, 423, 967, 424, 425,
	906, 886, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 952, 433, 434, 435, 974, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 882, 0, 447,
	925, 926, 927, 928, 0, 454, 0, 448, 449, 975,
	450, 976, 859, 451, 452, 453, 0, 455, 456, 0,
	842, 457, 458, 459, 460, 461, 463, 942, 464, 0,
	890, 465, 466, 467, 516, 922, 969, 0, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 839, 0, 0, 0, 0, 0, 837, 0, 0,
	0, 0, 0, 0, 835, 836, 0, 0, 0, 0,
	0, 0, 0, 865, 0, 0, 2148, 863, 895, 852,
	853, 854, 850, 851, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 944, 869, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 910, 889,
	921, 879, 920, 919, 0, 232, 881, 880, 235, 236,
	237, 871, 943, 238, 979, 980, 482, 0, 239, 950,
	0, 933, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 953, 254, 255, 936, 934, 935, 940, 938, 937,
	939, 256, 257, 258, 259, 924, 261, 917, 916, 841,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 915,
	268, 0, 269, 0, 270, 271, 0, 272, 847, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 970, 971,
	860, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	914, 912, 913, 0, 288, 0, 289, 0, 0, 954,
	290, 291, 0, 292, 977, 0, 870, 293, 0, 294,
	295, 296, 297, 945, 946, 949, 347, 956, 298, 299,
	0, 300, 301, 891, 0, 0, 216, 302, 304, 311,
	0, 955, 305, 903, 894, 905, 907, 908, 909, 904,
	0, 896, 0, 312, 957, 947, 958, 313, 314, 315,
	959, 929, 930, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 978, 960, 325, 326, 961, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 883, 339, 962, 342,
	343, 345, 344, 838, 217, 963, 346, 861, 948, 918,
	348, 349, 0, 892, 351, 893, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 964, 359, 965, 972,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 973, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 911, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 966, 395, 396, 397, 398,
	848, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 884, 885, 887, 888, 412, 418,
	419, 420, 941, 421, 401, 402, 422, 423, 967, 424,
	425, 906, 886, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 952, 433, 434, 435, 974, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 882, 0,
	447, 925, 926, 927, 928, 0, 454, 0, 448, 449,
	975, 450, 976, 859, 451, 452, 453, 0, 455, 456,
	0, 842, 457, 458, 459, 460, 461, 463, 942, 464,
	0, 890, 465, 466, 467, 516, 922, 969, 0, 469,
	468, 519, 0, 0, 0, 0, 470, 471, 520, 472,
	473, 474, 839, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 835, 836, 0, 0, 0,
	0, 0, 0, 0, 865, 0, 0, 2137, 863, 895,
	852, 853, 854, 850, 851, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 944, 869,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 910,
	889, 921, 879, 920, 919, 0, 232, 881, 880, 235,
	236, 237, 871, 943, 238, 979, 980, 482, 0, 239,
	950, 0, 933, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 953, 254, 255, 936, 934, 935, 940, 938,
	937, 939, 256, 257, 258, 259, 924, 261, 917, 916,
	841, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	915, 268, 0, 269, 0, 270, 271, 0, 272, 847,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 970,
	971, 860, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 914, 912, 913, 0, 288, 0, 289, 0, 0,
	954, 290, 291, 0, 292, 977, 0, 870, 293, 0,
	294, 295, 296, 297, 945, 946, 949, 347, 956, 298,
	299, 0, 300, 301, 891, 0, 0, 216, 302, 304,
	311, 0, 955, 305, 903, 894, 905, 907, 908, 909,
	904, 0, 896, 0, 312, 957, 947, 958, 313, 314,
	315, 959, 929, 930, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 978, 960, 325, 326, 961,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 883, 339, 962,
	342, 343, 345, 344, 838, 217, 963, 346, 861, 948,
	918, 348, 349, 0, 892, 351, 893, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 964, 359, 965,
	972, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 973, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 911, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 966, 395, 396, 397,
	398, 848, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 884, 885, 887, 888, 412,
	418, 419, 420, 941, 421, 401, 402, 422, 423, 967,
	424, 425, 906, 886, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 952, 433, 434, 435, 974, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 882,
	0, 447, 925, 926, 927, 928, 0, 454, 0, 448,
	449, 975, 450, 976, 859, 451, 452, 453, 0, 455,
	456, 0, 842, 457, 458, 459, 460, 461, 463, 942,
	464, 0, 890, 465, 466, 467, 516, 922, 969, 0,
	469, 468, 519, 0, 0, 0, 0, 470, 471, 520,
	472, 473, 474, 839, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 0, 0, 835, 836, 0, 0,
	0, 0, 0, 0, 0, 865, 0, 0, 2135, 863,
	2127, 852, 853, 854, 850, 851, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 944,
	869, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	910, 889, 921, 879, 920, 919, 0, 232, 881, 880,
	235, 236, 237, 871, 943, 238, 979, 980, 482, 0,
	239, 950, 0, 933, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 953, 254, 255, 936, 934, 935, 940,
	938, 937, 939, 256, 257, 258, 259, 924, 2130, 917,
	916, 841, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 915, 268, 0, 269, 0, 270, 271, 0, 272,
	847, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	970, 971, 860, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 914, 912, 913, 0, 288, 0, 289, 0,
	0, 954, 290, 291, 0, 292, 977, 0, 870, 293,
	0, 294, 295, 296, 2131, 945, 946, 949, 347, 956,
	298, 299, 0, 300, 301, 891, 0, 0, 216, 302,
	304, 311, 0, 955, 305, 903, 894, 905, 907, 908,
	909, 904, 0, 896, 0, 312, 957, 947, 958, 313,
	314, 315, 959, 929, 930, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 978, 960, 325, 326,
	961, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 2132, 2129, 340, 883, 339,
	962, 342, 343, 345, 344, 838, 217, 963, 346, 861,
	948, 918, 348, 349, 0, 892, 351, 893, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 964, 359,
	965, 972, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 973, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 911, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 966, 395, 396,
	397, 398, 848, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 2133, 0, 416, 417, 884, 885, 887, 888,
	412, 418, 419, 420, 941, 421, 401, 402, 422, 423,
	967, 424, 425, 906, 886, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 952, 433, 434, 435, 974, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	882, 0, 447, 925, 926, 927, 928, 0, 454, 0,
	448, 449, 975, 450, 976, 859, 451, 452, 453, 0,
	455, 456, 0, 842, 457, 458, 459, 460, 461, 463,
	942, 464, 0, 890, 465, 466, 467, 516, 922, 969,
	0, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 2128, 474, 839, 0, 0, 0, 0, 0,
	837, 0, 0, 0, 0, 0, 0, 835, 836, 0,
	0, 0, 0, 0, 0, 0, 865, 0, 0, 2124,
	863, 2127, 852, 853, 854, 850, 851, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	944, 869, 0, 0, 0, 224, 226, 225, 227, 228,
	476, 910, 889, 921, 879, 920, 919, 0, 232, 881,
	880, 235, 236, 237, 871, 943, 238, 979, 980, 482,
	0, 239, 950, 0, 933, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 953, 254, 255, 936, 934, 935,
	940, 938, 937, 939, 256, 257, 258, 259, 924, 2130,
	917, 916, 841, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 915, 268, 0, 269, 0, 270, 271, 0,
	272, 847, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 970, 971, 860, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 914, 912, 913, 0, 288, 0, 289,
	0, 0, 954, 290, 291, 0, 292, 977, 0, 870,
	293, 0, 294, 295, 296, 2131, 945, 946, 949, 347,
	956, 298, 299, 0, 300, 301, 891, 0, 0, 216,
	302, 304, 311, 0, 955, 305, 903, 894, 905, 907,
	908, 909, 904, 0, 896, 0, 312, 957, 947, 958,
	313, 314, 315, 959, 929, 930, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 978, 960, 325,
	326, 961, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 2132, 2129, 340, 883,
	339, 962, 342, 343, 345, 344, 838, 217, 963, 346,
	861, 948, 918, 348, 349, 0, 892, 351, 893, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 964,
	359, 965, 972, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 973, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 911, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 966, 395,
	396, 397, 398, 848, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 2133, 0, 416, 417, 884, 885, 887,
	888, 412, 418, 419, 420, 941, 421, 401, 402, 422,
	423, 967, 424, 425, 906, 886, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 952, 433, 434, 435, 974,
	0, 439, 440, 438, 0, 441, 442, 443, 444, 445,
	277, 882, 0, 447, 925, 926, 927, 928, 0, 454,
	0, 448, 449, 975, 450, 976, 859, 451, 452, 453,
	0, 455, 456, 0, 842, 457, 458, 459, 460, 461,
	463, 942, 464, 0, 890, 465, 466, 467, 516, 922,
	969, 0, 469, 468, 519, 0, 0, 0, 0, 470,
	471, 520, 472, 2128, 474, 839, 0, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 835, 836,
	895, 852, 853, 854, 850, 851, 864, 865, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 944,
	869, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	910, 889, 921, 879, 920, 919, 0, 232, 881, 880,
	235, 236, 237, 871, 943, 238, 979, 980, 482, 0,
	239, 950, 0, 933, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 953, 254, 255, 936, 934, 935, 940,
	938, 937, 939, 256, 257, 258, 259, 924, 261, 917,
	916, 841, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 915, 268, 0, 269, 0, 270, 271, 0, 272,
	847, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	970, 971, 860, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 914, 912, 913, 0, 288, 0, 289, 0,
	0, 954, 290, 291, 0, 292, 977, 0, 870, 293,
	0, 294, 295, 296, 297, 945, 946, 949, 347, 956,
	298, 299, 0, 300, 301, 891, 0, 0, 216, 302,
	304, 311, 0, 955, 305, 903, 894, 905, 907, 908,
	909, 904, 0, 896, 0, 312, 957, 947, 958, 313,
	314, 315, 959, 929, 930, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 978, 960, 325, 326,
	961, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 883, 339,
	962, 342, 343, 345, 344, 838, 217, 963, 346, 861,
	948, 918, 348, 349, 0, 892, 351, 893, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 964, 359,
	965, 972, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 973, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 911, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 966, 395, 396,
	397, 398, 848, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 884, 885, 887, 888,
	412, 418, 419, 420, 941, 421, 401, 402, 422, 423,
	967, 424, 425, 906, 886, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 952, 433, 434, 435, 974, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	882, 0, 447, 925, 926, 927, 928, 0, 454, 0,
	448, 449, 975, 450, 976, 859, 451, 452, 453, 0,
	455, 456, 0, 842, 457, 458, 459, 460, 461, 463,
	942, 464, 0, 890, 465, 466, 467, 516, 922, 969,
	0, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 839, 0, 0, 0, 0, 0,
	837, 0, 0, 0, 0, 0, 0, 835, 836, 0,
	0, 0, 0, 0, 1534, 0, 865, 0, 0, 0,
	863, 895, 852, 853, 854, 850, 851, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 1967, 223, 0, 0, 0, 0, 0,
	944, 869, 0, 0, 0, 224, 226, 225, 227, 228,
	476, 910, 889, 921, 879, 920, 919, 0, 232, 881,
	880, 235, 236, 237, 871, 943, 238, 979, 980, 482,
	0, 239, 950, 0, 933, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 953, 254, 255, 936, 934, 935,
	940, 938, 937, 939, 256, 257, 258, 259, 924, 261,
	917, 916, 841, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 915, 268, 0, 269, 0, 270, 271, 0,
	272, 847, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 970, 971, 860, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 914, 912, 913, 0, 288, 0, 289,
	0, 0, 954, 290, 291, 0, 292, 977, 0, 870,
	293, 0, 294, 295, 296, 297, 945, 946, 949, 347,
	956, 298, 299, 0, 300, 301, 891, 0, 0, 216,
	302, 304, 311, 0, 955, 305, 903, 894, 905, 907,
	908, 909, 904, 0, 896, 0, 312, 957, 947, 958,
	313, 314, 315, 959, 929, 930, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 978, 960, 325,
	326, 961, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 883,
	339, 962, 342, 343, 345, 344, 838, 217, 963, 346,
	861, 948, 918, 348, 349, 0, 892, 351, 893, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 964,
	359, 965, 972, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 973, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 911, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 966, 395,
	396, 397, 398, 848, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 0, 416, 417, 884, 885, 887,
	888, 412, 418, 419, 420, 941, 421, 401, 402, 422,
	423, 967, 424, 425, 906, 886, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 952, 433, 434, 435, 974,
	0, 439, 440, 438, 0, 441, 442, 443, 444, 445,
	277, 882, 0, 447, 925, 926, 927, 928, 0, 454,
	0, 448, 449, 975, 450, 976, 859, 451, 452, 453,
	0, 455, 456, 0, 842, 457, 458, 459, 460, 461,
	463, 942, 464, 0, 890, 465, 466, 467, 516, 922,
	969, 0, 469, 468, 519, 0, 0, 0, 0, 470,
	471, 520, 472, 473, 474, 839, 0, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 835, 836,
	0, 0, 0, 0, 0, 0, 0, 865, 0, 0,
	1210, 863, 895, 852, 853, 854, 850, 851, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 944, 869, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 910, 889, 921, 879, 920, 919, 0, 232,
	881, 880, 235, 236, 237, 871, 943, 238, 979, 980,
	482, 0, 239, 950, 0, 933, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 953, 254, 255, 936, 934,
	935, 940, 938, 937, 939, 256, 257, 258, 259, 924,
	261, 917, 916, 841, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 915, 268, 0, 269, 0, 270, 271,
	0, 272, 847, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 970, 971, 860, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 914, 912, 913, 0, 288, 0,
	289, 0, 0, 954, 290, 291, 0, 292, 977, 0,
	870, 293, 0, 294, 295, 296, 297, 1209, 946, 949,
	347, 956, 298, 299, 0, 300, 301, 891, 0, 0,
	216, 302, 304, 311, 0, 955, 305, 903, 894, 905,
	907, 908, 909, 904, 0, 896, 0, 312, 957, 947,
	958, 313, 314, 315, 959, 929, 930, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 978, 960,
	325, 326, 961, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	883, 339, 962, 342, 343, 345, 344, 838, 217, 963,
	346, 861, 948, 918, 348, 349, 0, 892, 351, 893,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	964, 359, 965, 972, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 973, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 911,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 966,
	395, 396, 397, 398, 848, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 884, 885,
	887, 888, 412, 418, 419, 420, 941, 421, 401, 402,
	422, 423, 967, 424, 425, 906, 886, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 952, 433, 434, 435,
	974, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 882, 0, 447, 925, 926, 927, 928, 0,
	454, 0, 448, 449, 975, 450, 976, 859, 451, 452,
	453, 0, 455, 456, 0, 842, 457, 458, 459, 460,
	461, 463, 942, 464, 0, 890, 465, 466, 467, 516,
	922, 969, 0, 469, 468, 519, 0, 0, 0, 0,
	470, 471, 520, 472, 473, 474, 839, 0, 0, 0,
	0, 0, 837, 0, 0, 0, 0, 0, 0, 835,
	836, 0, 0, 0, 0, 0, 0, 0, 865, 0,
	0, 1204, 863, 895, 852, 853, 854, 850, 851, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 944, 869, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 910, 889, 921, 879, 920, 919, 0,
	232, 881, 880, 235, 236, 237, 871, 943, 238, 979,
	980, 482, 0, 239, 950, 0, 933, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 953, 254, 255, 936,
	934, 935, 940, 938, 937, 939, 256, 257, 258, 259,
	924, 261, 917, 916, 841, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 915, 268, 0, 269, 0, 270,
	271, 0, 272, 847, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 970, 971, 860, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 914, 912, 913, 0, 288,
	0, 289, 0, 0, 954, 290, 291, 0, 292, 977,
	0, 870, 293, 0, 294, 295, 296, 297, 1203, 946,
	949, 347, 956, 298, 299, 0, 300, 301, 891, 0,
	0, 216, 302, 304, 311, 0, 955, 305, 903, 894,
	905, 907, 908, 909, 904, 0, 896, 0, 312, 957,
	947, 958, 313, 314, 315, 959, 929, 930, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 978,
	960, 325, 326, 961, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 883, 339, 962, 342, 343, 345, 344, 838, 217,
	963, 346, 861, 948, 918, 348, 349, 0, 892, 351,
	893, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 964, 359, 965, 972, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 973, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	911, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	966, 395, 396, 397, 398, 848, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 884,
	885, 887, 888, 412, 418, 419, 420, 941, 421, 401,
	402, 422, 423, 967, 424, 425, 906, 886, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 952, 433, 434,
	435, 974, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 882, 0, 447, 925, 926, 927, 928,
	0, 454, 0, 448, 449, 975, 450, 976, 859, 451,
	452, 453, 0, 455, 456, 0, 842, 457, 458, 459,
	460, 461, 463, 942, 464, 0, 890, 465, 466, 467,
	516, 922, 969, 0, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 839, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	835, 836, 0, 0, 0, 0, 0, 0, 0, 865,
	0, 0, 1199, 863, 895, 852, 853, 854, 850, 851,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 944, 869, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 910, 889, 921, 879, 920, 919,
	0, 232, 881, 880, 235, 236, 237, 871, 943, 238,
	979, 980, 482, 0, 239, 950, 0, 933, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 953, 254, 255,
	936, 934, 935, 940, 938, 937, 939, 256, 257, 258,
	259, 924, 261, 917, 916, 841, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 915, 268, 0, 269, 0,
	270, 271, 0, 272, 847, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 970, 971, 860, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 914, 912, 913, 0,
	288, 0, 289, 0, 0, 954, 290, 291, 0, 292,
	977, 0, 870, 293, 0, 294, 295, 296, 297, 945,
	946, 949, 347, 956, 298, 299, 0, 300, 301, 891,
	0, 0, 216, 302, 304, 311, 0, 955, 305, 903,
	894, 905, 907, 908, 909, 904, 0, 896, 0, 312,
	957, 947, 958, 313, 314, 315, 959, 929, 930, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	978, 960, 325, 326, 961, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 883, 339, 962, 342, 343, 345, 344, 838,
	217, 963, 346, 861, 948, 918, 348, 349, 0, 892,
	351, 893, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 964, 359, 965, 972, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 973, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 911, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 966, 395, 396, 397, 398, 848, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	884, 885, 887, 888, 412, 418, 419, 420, 941, 421,
	401, 402, 422, 423, 967, 424, 425, 906, 886, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 952, 433,
	434, 435, 974, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 882, 0, 447, 925, 926, 927,
	928, 0, 454, 0, 448, 449, 975, 450, 976, 859,
	451, 452, 453, 0, 455, 456, 0, 842, 457, 458,
	459, 460, 461, 463, 942, 464, 0, 890, 465, 466,
	467, 516, 922, 969, 0, 469, 468, 519, 0, 0,
	0, 0, 470, 471, 520, 472, 473, 474, 839, 0,
	0, 0, 0, 0, 837, 0, 0, 0, 0, 0,
	0, 835, 836, 895, 852, 853, 854, 850, 851, 864,
	865, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 944, 869, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 910, 889, 921, 879, 920, 919, 0,
	232, 881, 880, 235, 236, 237, 871, 943, 238, 979,
	980, 482, 0, 239, 950, 0, 933, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 953, 254, 255, 936,
	934, 935, 940, 938, 937, 939, 256, 257, 258, 259,
	924, 261, 917, 916, 841, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 915, 268, 0, 269, 0, 270,
	271, 0, 272, 847, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 970, 971, 860, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 914, 912, 913, 0, 288,
	0, 289, 0, 0, 954, 290, 291, 0, 292, 977,
	0, 870, 293, 0, 294, 295, 296, 297, 945, 946,
	949, 347, 956, 298, 299, 0, 300, 301, 891, 0,
	0, 216, 302, 304, 311, 0, 955, 305, 903, 894,
	905, 907, 908, 909, 904, 0, 896, 0, 312, 957,
	947, 958, 313, 314, 315, 959, 929, 930, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 978,
	960, 325, 326, 961, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 883, 339, 962, 342, 343, 345, 344, 838, 217,
	963, 346, 861, 948, 918, 348, 349, 0, 892, 351,
	893, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 964, 359, 965, 972, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 973, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	911, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	966, 395, 396, 397, 398, 848, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 884,
	885, 887, 888, 412, 418, 419, 420, 941, 421, 401,
	402, 422, 423, 967, 424, 425, 906, 886, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 952, 433, 434,
	435, 974, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 882, 0, 447, 925, 926, 927, 928,
	0, 454, 0, 448, 449, 975, 450, 976, 859, 451,
	452, 453, 0, 455, 456, 0, 842, 457, 458, 459,
	460, 461, 463, 942, 464, 0, 890, 465, 466, 467,
	516, 922, 969, 0, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 839, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	835, 836, 895, 852, 853, 854, 850, 851, 864, 865,
	0, 0, 0, 863, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 944, 869, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 910, 889, 921, 879, 920, 919, 0, 232,
	881, 880, 235, 236, 237, 871, 943, 238, 979, 980,
	482, 0, 239, 950, 0, 933, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 953, 254, 3493, 936, 934,
	935, 940, 938, 937, 939, 256, 257, 258, 259, 924,
	261, 917, 916, 841, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 915, 268, 0, 269, 0, 270, 271,
	0, 272, 847, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 970, 971, 860, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 914, 912, 913, 0, 288, 0,
	289, 0, 0, 954, 290, 291, 0, 292, 977, 0,
	870, 293, 0, 294, 295, 296, 297, 945, 946, 949,
	347, 956, 298, 299, 0, 300, 301, 891, 0, 0,
	216, 302, 304, 311, 0, 955, 305, 903, 894, 905,
	907, 908, 909, 904, 0, 896, 0, 312, 957, 947,
	958, 313, 314, 315, 959, 929, 930, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 978, 960,
	325, 326, 961, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	883, 339, 962, 342, 343, 345, 344, 838, 217, 963,
	346, 861, 948, 918, 348, 349, 0, 892, 351, 893,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	964, 359, 965, 972, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 973, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 911,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 966,
	395, 396, 397, 398, 848, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 884, 885,
	887, 888, 412, 418, 419, 420, 941, 421, 401, 402,
	422, 423, 967, 424, 425, 906, 886, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 952, 433, 434, 435,
	974, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 882, 0, 447, 925, 926, 927, 928, 0,
	454, 0, 448, 449, 975, 450, 976, 859, 451, 452,
	453, 0, 3492, 456, 0, 842, 457, 458, 459, 460,
	461, 463, 942, 464, 0, 890, 465, 466, 467, 516,
	922, 969, 0, 469, 468, 519, 0, 0, 0, 0,
	470, 471, 520, 472, 473, 474, 839, 0, 0, 0,
	0, 0, 837, 0, 0, 0, 0, 0, 0, 835,
	836, 895, 852, 853, 854, 850, 851, 864, 865, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	944, 869, 0, 0, 0, 224, 226, 225, 227, 228,
	3491, 910, 889, 921, 879, 920, 919, 0, 232, 881,
	880, 235, 236, 237, 871, 943, 238, 979, 980, 482,
	0, 239, 950, 0, 933, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 953, 254, 3493, 936, 934, 935,
	940, 938, 937, 939, 256, 257, 258, 259, 924, 261,
	917, 916, 841, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 915, 268, 0, 269, 0, 270, 271, 0,
	272, 847, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 970, 971, 860, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 914, 912, 913, 0, 288, 0, 289,
	0, 0, 954, 290, 291, 0, 292, 977, 0, 870,
	293, 0, 294, 295, 296, 297, 945, 946, 949, 347,
	956, 298, 299, 0, 300, 301, 891, 0, 0, 216,
	302, 304, 311, 0, 955, 305, 903, 894, 905, 907,
	908, 909, 904, 0, 896, 0, 312, 957, 947, 958,
	313, 314, 315, 959, 929, 930, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 978, 960, 325,
	326, 961, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 883,
	339, 962, 342, 343, 345, 344, 838, 217, 963, 346,
	861, 948, 918, 348, 349, 0, 892, 351, 893, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 964,
	359, 965, 972, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 973, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 911, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 966, 395,
	396, 397, 398, 848, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 0, 416, 417, 884, 885, 887,
	888, 412, 418, 419, 420, 941, 421, 401, 402, 422,
	423, 967, 424, 425, 906, 886, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 952, 433, 434, 435, 974,
	0, 439, 440, 438, 0, 441, 442, 443, 444, 445,
	277, 882, 0, 447, 925, 926, 927, 928, 0, 454,
	0, 448, 449, 975, 450, 976, 859, 451, 452, 453,
	0, 3492, 456, 0, 842, 457, 458, 459, 460, 461,
	463, 942, 464, 0, 890, 465, 466, 467, 516, 922,
	969, 0, 469, 468, 519, 0, 0, 0, 0, 470,
	471, 520, 472, 473, 474, 839, 0, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 835, 836,
	895, 852, 853, 854, 850, 851, 864, 865, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 944,
	869, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	910, 889, 921, 879, 920, 919, 0, 232, 881, 880,
	235, 236, 237, 871, 943, 238, 979, 980, 482, 0,
	239, 950, 0, 933, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 953, 254, 255, 936, 934, 935, 940,
	938, 937, 939, 256, 257, 258, 259, 924, 261, 917,
	916, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 915, 268, 0, 269, 0, 270, 271, 0, 272,
	847, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	970, 971, 860, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 914, 912, 913, 0, 288, 0, 289, 0,
	0, 954, 290, 291, 0, 292, 977, 0, 870, 293,
	0, 294, 295, 296, 297, 945, 946, 949, 347, 956,
	298, 299, 0, 300, 301, 891, 0, 0, 216, 302,
	304, 311, 0, 955, 305, 903, 894, 905, 907, 908,
	909, 904, 0, 896, 0, 312, 957, 947, 958, 313,
	314, 315, 959, 929, 930, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 978, 960, 325, 326,
	961, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 883, 339,
	962, 342, 343, 345, 344, 0, 217, 963, 346, 861,
	948, 918, 348, 349, 0, 892, 351, 893, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 964, 359,
	965, 972, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 973, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 911, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 966, 395, 396,
	397, 398, 848, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 884, 885, 887, 888,
	412, 418, 419, 420, 941, 421, 401, 402, 422, 423,
	967, 424, 425, 906, 886, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 952, 433, 434, 435, 974, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	882, 0, 447, 925, 926, 927, 928, 0, 454, 0,
	448, 449, 975, 450, 976, 859, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	942, 464, 0, 890, 465, 466, 467, 516, 922, 969,
	0, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	2145, 0, 0, 0, 0, 0, 0, 2143, 2144, 895,
	852, 853, 854, 850, 851, 864, 865, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 944, 869,
	0, 0, 0, 224, 226, 225, 227, 228, 0, 910,
	889, 921, 879, 920, 919, 0, 232, 881, 880, 235,
	236, 237, 871, 943, 238, 979, 980, 482, 0, 239,
	950, 0, 933, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 953, 254, 3493, 936, 934, 935, 940, 938,
	937, 939, 256, 257, 258, 259, 924, 261, 917, 916,
	841, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	915, 268, 0, 269, 0, 270, 271, 0, 272, 847,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 970,
	971, 860, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 914, 912, 913, 0, 288, 0, 289, 0, 0,
	954, 290, 291, 0, 292, 977, 0, 870, 293, 0,
	294, 295, 296, 297, 945, 946, 949, 347, 0, 298,
	299, 0, 300, 301, 891, 0, 0, 216, 302, 304,
	311, 0, 955, 305, 903, 894, 905, 907, 908, 909,
	904, 0, 896, 0, 312, 0, 947, 0, 313, 314,
	315, 959, 929, 930, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 978, 960, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 883, 339, 962,
	342, 343, 345, 344, 838, 217, 0, 346, 861, 948,
	918, 348, 349, 0, 892, 351, 893, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 964, 359, 965,
	972, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 973, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 911, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 966, 395, 396, 397,
	398, 848, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 884, 885, 887, 888, 412,
	418, 419, 420, 941, 421, 401, 402, 422, 423, 0,
	424, 425, 906, 886, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 952, 433, 434, 435, 974, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 882,
	0, 447, 925, 926, 927, 928, 0, 454, 0, 448,
	449, 975, 450, 976, 859, 451, 452, 453, 0, 3492,
	456, 0, 842, 457, 458, 459, 460, 461, 463, 942,
	464, 0, 890, 465, 466, 467, 516, 922, 969, 0,
	469, 468, 519, 0, 0, 0, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 0, 1016, 0, 0, 835, 836, 0, 0,
	0, 0, 0, 0, 0, 865, 0, 0, 0, 863,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 943, 238, 480,
	481, 482, 0, 239, 950, 0, 933, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 953, 254, 255, 936,
	934, 935, 940, 938, 937, 939, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 970, 971, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 954, 290, 291, 0, 292, 977,
	0, 491, 293, 0, 294, 295, 296, 297, 945, 946,
	949, 347, 956, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 955, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 957,
	947, 958, 313, 314, 315, 959, 316, 317, 0, 0,
	318, 319, 320, 321, 1003, 323, 322, 0, 324, 978,
	960, 325, 326, 961, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 962, 342, 343, 345, 344, 0, 217,
	963, 346, 0, 948, 501, 348, 349, 0, 350, 351,
	352, 0, 1008, 354, 355, 356, 0, 0, 357, 358,
	502, 964, 359, 965, 972, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 973, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	966, 395, 396, 397, 398, 507, 1010, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 181, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 941, 421, 401,
	402, 422, 423, 967, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 974, 0, 439, 440, 438, 183, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 975, 450, 976, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 942, 464, 0, 462, 465, 466, 467,
	1320, 517, 518, 0, 469, 468, 519, 1016, 0, 0,
	175, 470, 471, 520, 472, 473, 474, 0, 176, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 944, 1000, 0, 1620,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 943, 238, 480, 481, 482, 0, 239, 950, 0,
	933, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	953, 254, 255, 936, 934, 935, 940, 938, 937, 939,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 970, 971, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 954, 290,
	291, 0, 292, 977, 0, 491, 293, 0, 294, 295,
	296, 297, 945, 946, 949, 347, 956, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	955, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 957, 947, 958, 313, 314, 315, 959,
	316, 317, 0, 0, 318, 319, 320, 321, 1003, 323,
	322, 0, 324, 978, 960, 325, 326, 961, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 962, 342, 343,
	345, 344, 0, 217, 963, 346, 0, 948, 501, 348,
	349, 0, 350, 351, 352, 0, 1008, 354, 355, 356,
	0, 0, 357, 358, 502, 964, 359, 965, 972, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 973, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 966, 395, 396, 397, 398, 507,
	1010, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	181, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 941, 421, 401, 402, 422, 423, 967, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 974, 0, 439, 440, 438,
	183, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 975,
	450, 976, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 942, 464, 0,
	462, 465, 466, 467, 1320, 517, 518, 0, 469, 468,
	519, 2603, 0, 1016, 175, 470, 471, 520, 472, 473,
	474, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 1000, 944, 1620, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 943, 238, 480,
	481, 482, 0, 239, 950, 0, 933, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 953, 254, 255, 936,
	934, 935, 940, 938, 937, 939, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 970, 971, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 954, 290, 291, 0, 292, 977,
	0, 491, 293, 0, 294, 295, 296, 297, 945, 946,
	949, 347, 956, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 955, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 957,
	947, 958, 313, 314, 315, 959, 316, 317, 0, 0,
	318, 319, 320, 321, 1003, 323, 322, 0, 324, 978,
	960, 325, 326, 961, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 962, 342, 343, 345, 344, 0, 217,
	963, 346, 0, 948, 501, 348, 349, 0, 350, 351,
	352, 0, 1008, 354, 355, 356, 0, 0, 357, 358,
	502, 964, 359, 965, 972, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 973, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	966, 395, 396, 397, 398, 507, 1010, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 941, 421, 401,
	402, 422, 423, 967, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 974, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 975, 450, 976, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 942, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 469, 468, 519, 999, 0, 1016,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 1000, 944, 1005,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 943, 238, 480, 481, 482, 0, 239,
	950, 0, 933, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 953, 254, 255, 936, 934, 935, 940, 938,
	937, 939, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 970,
	971, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	954, 290, 291, 0, 292, 977, 0, 491, 293, 0,
	294, 295, 296, 297, 945, 946, 949, 347, 956, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 955, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 957, 947, 958, 313, 314,
	315, 959, 316, 317, 0, 0, 318, 319, 320, 321,
	1003, 323, 322, 0, 324, 978, 960, 325, 326, 961,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 962,
	342, 343, 345, 344, 0, 217, 963, 346, 0, 948,
	501, 348, 349, 0, 350, 351, 352, 0, 1008, 354,
	355, 356, 0, 0, 357, 358, 502, 964, 359, 965,
	972, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 973, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 966, 395, 396, 397,
	398, 507, 1010, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 941, 421, 401, 402, 422, 423, 967,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 974, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 975, 450, 976, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 942,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 1016, 0, 0, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 944, 1000, 0, 1005, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 943, 238, 480,
	481, 482, 0, 239, 950, 0, 933, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 953, 254, 255, 936,
	934, 935, 940, 938, 937, 939, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 970, 971, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 954, 290, 291, 0, 292, 977,
	0, 491, 293, 0, 294, 295, 296, 297, 945, 946,
	949, 347, 956, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 955, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 957,
	947, 958, 313, 314, 315, 959, 316, 317, 0, 0,
	318, 319, 320, 321, 1003, 323, 322, 0, 324, 978,
	960, 325, 326, 961, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 962, 342, 343, 345, 344, 0, 217,
	963, 346, 0, 948, 501, 348, 349, 0, 350, 351,
	352, 0, 1008, 354, 355, 356, 0, 0, 357, 358,
	502, 964, 359, 965, 972, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 973, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	966, 395, 396, 397, 398, 507, 1010, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 941, 421, 401,
	402, 422, 423, 967, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 974, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 975, 450, 976, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 942, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 469, 468, 519, 1016, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 944, 1000, 0, 1005,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 943, 238, 480, 481, 482, 0, 239, 950, 0,
	933, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	953, 254, 255, 936, 934, 935, 940, 938, 937, 939,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 970, 971, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 954, 290,
	291, 0, 292, 977, 0, 491, 293, 0, 294, 295,
	296, 297, 945, 946, 949, 347, 956, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	955, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 957, 947, 958, 313, 314, 315, 959,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 978, 960, 325, 326, 961, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 962, 342, 343,
	345, 344, 0, 217, 963, 346, 0, 948, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 964, 359, 965, 972, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 973, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 966, 395, 396, 397, 398, 507,
	1010, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 941, 421, 401, 402, 422, 423, 967, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 974, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 975,
	450, 976, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 942, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 0, 469, 468,
	519, 828, 0, 1174, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 1515, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 1078, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 953, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 954, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 956, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 955, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 957,
	498, 958, 313, 314, 315, 959, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	960, 325, 326, 961, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 962, 342, 343, 345, 344, 0, 0,
	963, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 964, 359, 965, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	966, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 181, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 967, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 183, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	1320, 517, 518, 0, 469, 468, 519, 1317, 0, 1174,
	175, 470, 471, 520, 472, 473, 474, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 150,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 1078, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 953, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	954, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 492, 493, 494, 347, 956, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 955, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 957, 498, 958, 313, 314,
	315, 959, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 960, 325, 326, 961,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 962,
	342, 343, 345, 344, 0, 0, 963, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 964, 359, 965,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 966, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 181, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 967,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 183, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 1320, 517, 518, 0,
	469, 468, 519, 0, 0, 0, 175, 470, 471, 520,
	472, 473, 474, 0, 176, 0, 0, 0, 0, 1174,
	1173, 0, 0, 0, 0, 1171, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 1078, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 953, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	954, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 492, 493, 494, 347, 956, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 955, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 957, 498, 958, 313, 314,
	315, 959, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 960, 325, 326, 961,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 962,
	342, 343, 345, 344, 0, 0, 963, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 964, 359, 965,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 966, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 967,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 0, 0, 0, 0, 470, 471, 520,
	472, 473, 474, 1174, 1173, 0, 0, 0, 0, 1171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 1799, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 1078, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 953, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 954, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 956, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 955, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 957,
	498, 958, 313, 314, 315, 959, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	960, 325, 326, 961, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 962, 342, 343, 345, 344, 0, 0,
	963, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 964, 359, 965, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	966, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 967, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 1174, 1173, 0,
	0, 0, 0, 1171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 2799,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	1078, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	953, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 954, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 956, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	955, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 957, 498, 958, 313, 314, 315, 959,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 960, 325, 326, 961, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 962, 342, 343,
	345, 344, 0, 0, 963, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 964, 359, 965, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 966, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 967, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 0, 469, 468,
	519, 1016, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	944, 0, 0, 1326, 0, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 0, 232, 233,
	234, 235, 236, 237, 0, 943, 238, 480, 481, 482,
	0, 239, 950, 0, 933, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 953, 254, 255, 936, 934, 935,
	940, 938, 937, 939, 256, 257, 258, 259, 260, 261,
	484, 485, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 970, 971, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 0, 289,
	0, 0, 954, 290, 291, 0, 292, 977, 0, 491,
	293, 0, 294, 295, 296, 297, 945, 946, 949, 347,
	956, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 955, 305, 495, 307, 306, 308,
	309, 310, 496, 0, 497, 0, 312, 957, 947, 958,
	313, 314, 315, 959, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 978, 960, 325,
	326, 961, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 962, 342, 343, 345, 344, 0, 217, 963, 346,
	0, 948, 501, 348, 349, 0, 350, 351, 352, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 964,
	359, 965, 972, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 973, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 966, 395,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 0, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 941, 421, 401, 402, 422,
	423, 967, 424, 425, 508, 426, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 974,
	0, 439, 440, 438, 0, 441, 442, 443, 444, 445,
	277, 446, 0, 447, 510, 511, 512, 513, 0, 454,
	0, 448, 449, 975, 450, 976, 0, 451, 452, 453,
	0, 455, 456, 0, 0, 457, 458, 459, 460, 461,
	463, 942, 464, 0, 462, 465, 466, 467, 516, 517,
	518, 0, 469, 468, 519, 828, 0, 212, 0, 470,
	471, 520, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	181, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	183, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 1320, 517, 518, 0, 469, 468,
	519, 212, 0, 0, 175, 470, 471, 520, 472, 473,
	474, 0, 176, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	475, 0, 0, 150, 0, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 480, 481, 482,
	0, 239, 483, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	484, 485, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 487, 488, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 490, 0, 491,
	293, 0, 294, 295, 296, 297, 492, 493, 494, 347,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 495, 307, 306, 308,
	309, 310, 496, 0, 497, 0, 312, 0, 498, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 499, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 0, 342, 343, 345, 344, 0, 217, 0, 346,
	0, 500, 501, 348, 349, 0, 350, 351, 352, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 0,
	359, 0, 503, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 504, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 0, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 0, 421, 401, 402, 422,
	423, 0, 424, 425, 508, 426, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 509,
	0, 439, 440, 438, 0, 441, 442, 443, 444, 445,
	277, 446, 0, 447, 510, 511, 512, 513, 0, 454,
	0, 448, 449, 514, 450, 515, 0, 451, 452, 453,
	0, 455, 456, 0, 0, 457, 458, 459, 460, 461,
	463, 0, 464, 0, 462, 465, 466, 467, 516, 517,
	518, 0, 469, 468, 519, 212, 0, 0, 0, 470,
	471, 520, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 475, 0, 0, 1625, 0, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 480, 481, 482, 0, 239, 483, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 484, 485, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 490, 0, 491, 293, 0, 294, 295, 296, 297,
	492, 493, 494, 347, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	495, 307, 306, 308, 309, 310, 496, 0, 497, 0,
	312, 0, 498, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 499, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 0, 342, 343, 345, 344,
	0, 217, 0, 346, 0, 500, 501, 348, 349, 0,
	350, 351, 352, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 0, 359, 0, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 504,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 0,
	421, 401, 402, 422, 423, 0, 424, 425, 508, 426,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 446, 0, 447, 510, 511,
	512, 513, 0, 454, 0, 448, 449, 514, 450, 515,
	0, 451, 452, 453, 0, 455, 456, 0, 0, 457,
	458, 459, 460, 461, 463, 0, 464, 0, 462, 465,
	466, 467, 516, 517, 518, 0, 469, 468, 519, 212,
	0, 0, 0, 470, 471, 520, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 2751,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 492, 493, 494, 347, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 0, 498, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 0,
	342, 343, 345, 344, 0, 0, 0, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 0, 359, 0,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 0,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 212, 0, 0, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 2379, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 0,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 469, 468, 519, 212, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 2878,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 0, 469, 468,
	519, 697, 0, 587, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 1890, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 593, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 217,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 592, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 469, 468, 519, 0, 586, 0,
	587, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 596, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 593, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 217, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 592, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 587, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 596,
	0, 0, 0, 475, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	480, 481, 482, 0, 239, 483, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 593,
	259, 260, 261, 484, 485, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	490, 0, 491, 293, 0, 294, 295, 296, 297, 492,
	493, 494, 347, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 495,
	307, 306, 308, 309, 310, 496, 0, 497, 0, 312,
	0, 498, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	499, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 0, 342, 343, 345, 344, 0,
	217, 0, 346, 0, 500, 501, 348, 349, 0, 350,
	351, 352, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 0, 359, 0, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 504, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 0, 1920, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 0, 421,
	401, 402, 422, 423, 0, 424, 425, 508, 426, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 0, 439, 440, 438, 592, 441, 442,
	443, 444, 445, 277, 446, 0, 447, 510, 511, 512,
	513, 0, 454, 0, 448, 449, 514, 450, 515, 0,
	451, 452, 453, 0, 455, 456, 0, 0, 457, 458,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 516, 517, 518, 0, 469, 468, 519, 587, 0,
	0, 0, 470, 471, 520, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 596, 0, 0, 0, 475, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 480, 481, 482, 0, 239, 483,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 593, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 490, 0, 491, 293, 0, 294,
	295, 296, 297, 492, 493, 494, 347, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 0, 498, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 499, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 0, 342,
	343, 345, 344, 0, 217, 0, 346, 0, 500, 501,
	348, 349, 0, 350, 351, 352, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 0, 359, 0, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 504, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 0, 421, 401, 402, 422, 423, 0, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 0, 439, 440,
	438, 592, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 510, 511, 512, 513, 0, 454, 0, 448, 449,
	514, 450, 515, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 0, 469,
	468, 519, 212, 0, 0, 0, 470, 471, 520, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 596, 0, 0,
	0, 475, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 492, 493, 494,
	347, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 0, 312, 0, 498,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 0, 342, 343, 345, 344, 0, 217, 0,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	0, 359, 0, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 0, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 0, 469, 468, 519, 0, 0, 0, 0,
	470, 471, 520, 472, 473, 474, 1351, 0, 1174, 1173,
	0, 0, 0, 0, 1171, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 480, 481, 482, 0, 239, 483,
	0, 1078, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 953, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	0, 215, 0, 0, 0, 0, 0, 1350, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 954,
	290, 291, 0, 292, 490, 0, 491, 293, 0, 294,
	295, 296, 297, 492, 493, 494, 347, 956, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 955, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 957, 498, 958, 313, 314, 315,
	959, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 499, 960, 325, 326, 961, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 962, 342,
	343, 345, 344, 0, 0, 963, 346, 0, 500, 501,
	348, 349, 0, 350, 351, 352, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 964, 359, 965, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 504, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 1349, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 966, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 1348, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 0, 421, 401, 402, 422, 423, 967, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 510, 511, 512, 513, 0, 454, 0, 448, 449,
	514, 450, 515, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 0, 469,
	468, 519, 0, 0, 0, 0, 470, 471, 520, 472,
	473, 474, 1315, 0, 1174, 1173, 0, 0, 0, 0,
	1171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	480, 481, 482, 0, 239, 483, 0, 1078, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 953, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 484, 485, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 0, 289, 0, 0, 954, 290, 291, 0, 292,
	490, 0, 491, 293, 0, 294, 295, 296, 297, 1314,
	493, 494, 347, 956, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 955, 305, 495,
	307, 306, 308, 309, 310, 496, 0, 497, 0, 312,
	957, 498, 958, 313, 314, 315, 959, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	499, 960, 325, 326, 961, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 962, 342, 343, 345, 344, 0,
	0, 963, 346, 0, 500, 501, 348, 349, 0, 350,
	351, 352, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 964, 359, 965, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 504, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 966, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 0, 421,
	401, 402, 422, 423, 967, 424, 425, 508, 426, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 446, 0, 447, 510, 511, 512,
	513, 0, 454, 0, 448, 449, 514, 450, 515, 0,
	451, 452, 453, 0, 455, 456, 0, 0, 457, 458,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 516, 517, 518, 0, 469, 468, 519, 0, 0,
	0, 0, 470, 471, 520, 472, 473, 474, 1311, 0,
	1174, 1173, 0, 0, 0, 0, 1171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 1078, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 953, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 954, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 1310, 493, 494, 347, 956,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 955, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 957, 498, 958, 313,
	314, 315, 959, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 960, 325, 326,
	961, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	962, 342, 343, 345, 344, 0, 0, 963, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 964, 359,
	965, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 966, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	967, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 1249, 0, 1174, 1173, 0, 0,
	0, 0, 1171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 1078,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 953,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 954, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 1248, 493, 494, 347, 956, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 955,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 957, 498, 958, 313, 314, 315, 959, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 960, 325, 326, 961, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 962, 342, 343, 345,
	344, 0, 0, 963, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 964, 359, 965, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 966, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 967, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 0, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	1246, 0, 1174, 1173, 0, 0, 0, 0, 1171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 1078, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 953, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 954, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 1245, 493, 494,
	347, 956, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 955, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 0, 312, 957, 498,
	958, 313, 314, 315, 959, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 960,
	325, 326, 961, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 962, 342, 343, 345, 344, 0, 0, 963,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	964, 359, 965, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 966,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 967, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 0, 469, 468, 519, 0, 0, 0, 0,
	470, 471, 520, 472, 473, 474, 1167, 0, 1174, 1173,
	0, 0, 0, 0, 1171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 480, 481, 482, 0, 239, 483,
	0, 1078, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 953, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 954,
	290, 291, 0, 292, 490, 0, 491, 293, 0, 294,
	295, 296, 297, 1169, 493, 494, 347, 956, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 955, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 957, 498, 958, 313, 314, 315,
	959, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 499, 960, 325, 326, 961, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 962, 342,
	343, 345, 344, 0, 0, 963, 346, 0, 500, 501,
	348, 349, 0, 350, 351, 352, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 964, 359, 965, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 504, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 966, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 0, 421, 401, 402, 422, 423, 967, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 510, 511, 512, 513, 0, 454, 0, 448, 449,
	514, 450, 515, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 0, 469,
	468, 519, 0, 0, 0, 0, 470, 471, 520, 472,
	473, 474, 1174, 1173, 0, 0, 0, 0, 1171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 1078, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 953, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 954, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 492, 493, 494,
	347, 956, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 955, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 0, 312, 957, 498,
	958, 313, 314, 315, 959, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 960,
	325, 326, 961, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 962, 342, 343, 345, 344, 0, 0, 963,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	964, 359, 965, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 966,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 967, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 0, 469, 468, 519, 1174, 1173, 0, 0,
	470, 471, 520, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 1078,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 953,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 1713, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 954, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 956, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 955,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 957, 498, 958, 313, 314, 315, 959, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 960, 325, 326, 961, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 962, 342, 343, 345,
	344, 0, 0, 963, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 964, 359, 965, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 966, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 967, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 0, 469, 468, 519,
	1174, 1173, 0, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 1078, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 953, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 954, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 956,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 955, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 957, 498, 958, 313,
	314, 315, 959, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 960, 325, 326,
	961, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	962, 342, 343, 345, 344, 0, 0, 963, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 964, 359,
	965, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 966, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	967, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	1174, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 1078, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 953, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 954, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 956,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 955, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 957, 498, 958, 313,
	314, 315, 959, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 960, 325, 326,
	961, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	962, 342, 343, 345, 344, 0, 0, 963, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 964, 359,
	965, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 966, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	967, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 2268,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 2265, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 2415, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 2271,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 2412, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 2414, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	2411, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 2270, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 2413, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 2268,
	239, 483, 0, 0, 2262, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 2265, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 2271,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 2261, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 2270, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 2269, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 1404, 0, 212, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 217, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	1407, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 1405,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 0, 1406, 468, 519,
	1162, 0, 212, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 1164, 493, 494,
	347, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 0, 312, 0, 498,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 0, 342, 343, 345, 344, 0, 217, 0,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 1008, 354, 355, 356, 0, 0, 357, 358, 502,
	0, 359, 0, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 0, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 0, 469, 468, 519, 1159, 0, 212, 0,
	470, 471, 520, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 480, 481, 482, 0, 239, 483,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 490, 0, 491, 293, 0, 294,
	295, 296, 297, 1161, 493, 494, 347, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 0, 498, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 499, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 0, 342,
	343, 345, 344, 0, 217, 0, 346, 0, 500, 501,
	348, 349, 0, 350, 351, 352, 0, 1008, 354, 355,
	356, 0, 0, 357, 358, 502, 0, 359, 0, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 504, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 0, 421, 401, 402, 422, 423, 0, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 510, 511, 512, 513, 0, 454, 0, 448, 449,
	514, 450, 515, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 0, 469,
	468, 519, 1066, 0, 212, 0, 470, 471, 520, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	480, 481, 482, 0, 239, 483, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 484, 485, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	490, 0, 491, 293, 0, 294, 295, 296, 297, 1068,
	493, 494, 347, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 495,
	307, 306, 308, 309, 310, 496, 0, 497, 0, 312,
	0, 498, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	499, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 0, 342, 343, 345, 344, 0,
	217, 0, 346, 0, 500, 501, 348, 349, 0, 350,
	351, 352, 0, 1008, 354, 355, 356, 0, 0, 357,
	358, 502, 0, 359, 0, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 504, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 0, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 0, 421,
	401, 402, 422, 423, 0, 424, 425, 508, 426, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 446, 0, 447, 510, 511, 512,
	513, 0, 454, 0, 448, 449, 514, 450, 515, 0,
	451, 452, 453, 0, 455, 456, 0, 0, 457, 458,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 516, 517, 518, 0, 469, 468, 519, 549, 0,
	212, 0, 470, 471, 520, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	548, 222, 538, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 541, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 542, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 543, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 537, 0, 212, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 538, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 541, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	542, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 0, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 543,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 212, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 217, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 1008, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 0, 469, 468, 519,
	2344, 0, 212, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 492, 493, 494,
	347, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 0, 312, 0, 498,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 0, 342, 343, 345, 344, 0, 217, 0,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	0, 359, 0, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 0, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 0, 469, 468, 519, 1899, 0, 212, 0,
	470, 471, 520, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 480, 481, 482, 0, 239, 483,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 490, 0, 491, 293, 0, 294,
	295, 296, 297, 492, 493, 494, 347, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 0, 498, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 499, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 0, 342,
	343, 345, 344, 0, 217, 0, 346, 0, 500, 501,
	348, 349, 0, 350, 351, 352, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 0, 359, 0, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 504, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 0, 421, 401, 402, 422, 423, 0, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 510, 511, 512, 513, 0, 454, 0, 448, 449,
	514, 450, 515, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 212, 469,
	468, 519, 0, 0, 0, 0, 470, 471, 520, 472,
	473, 474, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 480, 481, 482, 0, 239, 483,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 490, 0, 491, 293, 0, 294,
	295, 296, 297, 492, 493, 494, 347, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 0, 498, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 499, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 0, 342,
	343, 345, 344, 0, 217, 0, 346, 0, 500, 501,
	348, 349, 0, 350, 351, 352, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 0, 359, 0, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 504, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 0, 421, 401, 402, 422, 423, 0, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 0, 439, 440,
	438, 1832, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 510, 511, 512, 513, 0, 454, 0, 448, 449,
	514, 450, 515, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 0, 469,
	468, 519, 1825, 0, 212, 0, 470, 471, 520, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	480, 481, 482, 0, 239, 483, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 484, 485, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	490, 0, 491, 293, 0, 294, 295, 296, 297, 1824,
	493, 494, 347, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 495,
	307, 306, 308, 309, 310, 496, 0, 497, 0, 312,
	0, 498, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	499, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 0, 342, 343, 345, 344, 0,
	217, 0, 346, 0, 500, 501, 348, 349, 0, 350,
	351, 352, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 0, 359, 0, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 504, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 0, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 0, 421,
	401, 402, 422, 423, 0, 424, 425, 508, 426, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 446, 0, 447, 510, 511, 512,
	513, 0, 454, 0, 448, 449, 514, 450, 515, 0,
	451, 452, 453, 0, 455, 456, 0, 0, 457, 458,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 516, 517, 518, 0, 469, 468, 519, 1820, 0,
	212, 0, 470, 471, 520, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 1822, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 217, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 1304, 0, 212, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 1303, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 217, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 0, 469, 468, 519,
	1301, 0, 212, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 1300, 493, 494,
	347, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 0, 312, 0, 498,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 0, 342, 343, 345, 344, 0, 217, 0,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	0, 359, 0, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 0, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 0, 469, 468, 519, 1298, 0, 212, 0,
	470, 471, 520, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 480, 481, 482, 0, 239, 483,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 490, 0, 491, 293, 0, 294,
	295, 296, 297, 1297, 493, 494, 347, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 0, 498, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 499, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 0, 342,
	343, 345, 344, 0, 217, 0, 346, 0, 500, 501,
	348, 349, 0, 350, 351, 352, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 0, 359, 0, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 504, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 0, 421, 401, 402, 422, 423, 0, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 510, 511, 512, 513, 0, 454, 0, 448, 449,
	514, 450, 515, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 0, 469,
	468, 519, 1294, 0, 212, 0, 470, 471, 520, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	480, 481, 482, 0, 239, 483, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 484, 485, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	490, 0, 491, 293, 0, 294, 295, 296, 297, 1293,
	493, 494, 347, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 495,
	307, 306, 308, 309, 310, 496, 0, 497, 0, 312,
	0, 498, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	499, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 0, 342, 343, 345, 344, 0,
	217, 0, 346, 0, 500, 501, 348, 349, 0, 350,
	351, 352, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 0, 359, 0, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 504, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 0, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 0, 421,
	401, 402, 422, 423, 0, 424, 425, 508, 426, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 446, 0, 447, 510, 511, 512,
	513, 0, 454, 0, 448, 449, 514, 450, 515, 0,
	451, 452, 453, 0, 455, 456, 0, 0, 457, 458,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 516, 517, 518, 0, 469, 468, 519, 1269, 0,
	212, 0, 470, 471, 520, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 217, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 1184, 0, 212, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 1186, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 217, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 212, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 217, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 212, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 541, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	542, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 0, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 543,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 212, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 1927, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 217, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 212, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 1925, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 217, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 212, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 1923, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 217, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 0, 469, 468, 519,
	689, 0, 212, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 492, 493, 494,
	347, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 688, 312, 0, 498,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 0, 342, 343, 345, 344, 0, 0, 0,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	0, 359, 0, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 0, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 687, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 212, 469, 468, 519, 0, 0, 0, 0,
	470, 471, 520, 472, 473, 474, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 2415, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 492, 493, 494,
	347, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 0, 312, 0, 498,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 0, 342, 343, 345, 344, 0, 0, 0,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	0, 359, 0, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	3207, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 0, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 0, 469, 468, 519, 528, 0, 212, 0,
	470, 471, 520, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	527, 223, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 480, 481, 482, 0, 239, 483,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 490, 0, 491, 293, 0, 294,
	295, 296, 297, 492, 493, 494, 347, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 0, 498, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 499, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 0, 342,
	343, 345, 344, 0, 0, 0, 346, 0, 500, 501,
	348, 349, 0, 350, 351, 352, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 0, 359, 0, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 504, 370, 505, 526, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 0, 421, 401, 402, 422, 423, 0, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 510, 511, 512, 513, 0, 454, 0, 448, 449,
	514, 450, 515, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 212, 469,
	468, 519, 0, 0, 0, 0, 470, 471, 520, 472,
	473, 474, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 475, 0, 2203,
	0, 0, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 480, 481, 482, 0, 239, 483,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 490, 0, 491, 293, 0, 294,
	295, 296, 297, 492, 493, 494, 347, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 0, 498, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 499, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 0, 342,
	343, 345, 344, 0, 0, 0, 346, 0, 500, 501,
	348, 349, 0, 350, 351, 352, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 0, 359, 0, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 504, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 0, 421, 401, 402, 422, 423, 0, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 510, 511, 512, 513, 0, 454, 0, 448, 449,
	514, 450, 515, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 0, 469,
	468, 519, 212, 2402, 0, 0, 470, 471, 520, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 492, 493, 494,
	347, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 0, 312, 0, 498,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 0, 342, 343, 345, 344, 0, 0, 0,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	0, 359, 0, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 0, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 212, 469, 468, 519, 0, 0, 0, 0,
	470, 471, 520, 472, 473, 474, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 3002, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 492, 493, 494,
	347, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 0, 312, 0, 498,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 0, 342, 343, 345, 344, 0, 0, 0,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	0, 359, 0, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 0, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 0, 469, 468, 519, 212, 2402, 0, 0,
	470, 471, 520, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 0, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 2399, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 212, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 218, 219, 220, 221, 222, 1906, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 0, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 0, 469, 468, 519,
	1897, 0, 212, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 492, 493, 494,
	347, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 0, 312, 0, 498,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 0, 342, 343, 345, 344, 0, 0, 0,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	0, 359, 0, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 0, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 0, 469, 468, 519, 569, 0, 212, 0,
	470, 471, 520, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 224, 1044, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 480, 481, 1042, 0, 239, 483,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 490, 0, 491, 293, 0, 294,
	295, 296, 297, 492, 493, 494, 347, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 0, 498, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 499, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 570, 0, 342,
	343, 345, 344, 0, 0, 0, 346, 0, 500, 501,
	348, 349, 0, 350, 351, 352, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 0, 359, 0, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 504, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 566, 407, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	1045, 420, 0, 421, 401, 402, 422, 423, 0, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 565, 511, 512, 513, 0, 454, 0, 448, 449,
	514, 450, 515, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 0, 469,
	468, 519, 1844, 0, 212, 0, 470, 471, 520, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	480, 481, 482, 0, 239, 483, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 484, 485, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	490, 0, 491, 293, 0, 294, 295, 296, 297, 1843,
	493, 494, 347, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 495,
	307, 306, 308, 309, 310, 496, 0, 497, 0, 312,
	0, 498, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	499, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 0, 342, 343, 345, 344, 0,
	0, 0, 346, 0, 500, 501, 348, 349, 0, 350,
	351, 352, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 0, 359, 0, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 504, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 0, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 0, 421,
	401, 402, 422, 423, 0, 424, 425, 508, 426, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 446, 0, 447, 510, 511, 512,
	513, 0, 454, 0, 448, 449, 514, 450, 515, 0,
	451, 452, 453, 0, 455, 456, 0, 0, 457, 458,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 516, 517, 518, 0, 469, 468, 519, 569, 0,
	212, 0, 470, 471, 520, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	559, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 570,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 566, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 1325, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 565, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 1308, 0, 212, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 1307, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 0, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 0, 469, 468, 519,
	1257, 0, 212, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 1256, 493, 494,
	347, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 0, 312, 0, 498,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 0, 342, 343, 345, 344, 0, 0, 0,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	0, 359, 0, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 0, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 0, 469, 468, 519, 1241, 0, 212, 0,
	470, 471, 520, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 480, 481, 482, 0, 239, 483,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 490, 0, 491, 293, 0, 294,
	295, 296, 297, 492, 493, 494, 347, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 0, 498, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 499, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 0, 342,
	343, 345, 344, 0, 0, 0, 346, 0, 500, 501,
	348, 349, 0, 350, 351, 352, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 0, 359, 0, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 504, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 0, 421, 401, 402, 422, 423, 0, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 510, 511, 512, 513, 0, 454, 0, 448, 449,
	514, 450, 515, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 0, 469,
	468, 519, 1178, 0, 212, 0, 470, 471, 520, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	480, 481, 482, 0, 239, 483, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 484, 485, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	490, 0, 491, 293, 0, 294, 295, 296, 297, 492,
	493, 494, 347, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 495,
	307, 306, 308, 309, 310, 496, 0, 497, 0, 312,
	0, 498, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	499, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 0, 342, 343, 345, 344, 0,
	0, 0, 346, 0, 500, 501, 348, 349, 0, 350,
	351, 352, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 0, 359, 0, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 504, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 0, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 0, 421,
	401, 402, 422, 423, 0, 424, 425, 508, 426, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 446, 0, 447, 510, 511, 512,
	513, 0, 454, 0, 448, 449, 514, 450, 515, 0,
	451, 452, 453, 0, 455, 456, 0, 0, 457, 458,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 516, 517, 518, 0, 469, 468, 519, 569, 0,
	212, 0, 470, 471, 520, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 1044, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 1042, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 570,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 566, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 1045, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 565, 511, 512, 513, 0, 454, 0,
	448, 1043, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 1026, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 569, 0, 212, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 559, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 557, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 558,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 570, 0, 342, 343, 345,
	344, 0, 0, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 560, 399,
	0, 400, 404, 405, 566, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 561, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 565,
	511, 512, 513, 0, 454, 0, 448, 563, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 0, 469, 468, 519,
	553, 0, 212, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 492, 493, 494,
	347, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 0, 312, 0, 498,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 0, 342, 343, 345, 344, 0, 0, 0,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	0, 359, 0, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 507, 399, 0, 400, 554, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 0, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 0, 469, 468, 519, 551, 0, 212, 0,
	470, 471, 520, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 480, 481, 482, 0, 239, 483,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 490, 0, 491, 293, 0, 294,
	295, 296, 297, 492, 493, 494, 347, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 0, 498, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 499, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 0, 342,
	343, 345, 344, 0, 0, 0, 346, 0, 500, 501,
	348, 349, 0, 350, 351, 352, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 0, 359, 0, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 504, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 0, 421, 401, 402, 422, 423, 0, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 510, 511, 512, 513, 0, 454, 0, 448, 449,
	514, 450, 515, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 0, 469,
	468, 519, 545, 0, 212, 0, 470, 471, 520, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	480, 481, 482, 0, 239, 483, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 484, 485, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	490, 0, 491, 293, 0, 294, 295, 296, 297, 492,
	493, 494, 347, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 495,
	307, 306, 308, 309, 310, 496, 0, 497, 0, 312,
	0, 498, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	499, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 0, 342, 343, 345, 344, 0,
	0, 0, 346, 0, 500, 501, 348, 349, 0, 350,
	351, 352, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 0, 359, 0, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 504, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 0, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 0, 421,
	401, 402, 422, 423, 0, 424, 425, 508, 426, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 446, 0, 447, 510, 511, 512,
	513, 0, 454, 0, 448, 449, 514, 450, 515, 0,
	451, 452, 453, 0, 455, 456, 0, 0, 457, 458,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 516, 517, 518, 0, 469, 468, 519, 523, 0,
	212, 0, 470, 471, 520, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 2691, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 2689, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 2677, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 2362, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 554, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 1856, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 0, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 1277, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 1219, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 982, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	212, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 0,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 0, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 0, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 0, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 1451, 1452, 0, 1484, 1485, 1486,
	1494, 1495, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 1482, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1451, 1452, 0, 1484, 1485, 1486, 1494, 1495, 1496, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 1487,
	1482, 0, 0, 0, 0, 1470, 0, 1454, 0, 0,
	0, 0, 1500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 1473, 0, 0, 0, 0, 0,
	0, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1476, 1477, 1478, 1479, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 0, 0, 1501,
	0, 0, 0, 1481, 1483, 0, 0, 0, 1476, 1477,
	1478, 1479, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 1497, 0, 1498, 0, 0, 0, 0,
	0, 0, 1468, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 1491, 0, 0, 1501, 0, 1489, 0, 1481,
	1483, 0, 0, 0, 0, 0, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 1498, 0, 0, 1499, 0, 0, 0, 1468, 1469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 1489, 0, 0, 0, 0, 0, 0,
	0, 0, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 1452, 0, 1484, 1485, 1486,
	1494, 1495, 1496, 0, 0, 0, 0, 1492, 0, 1480,
	0, 0, 0, 1487, 1482, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 1500, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 0, 1492, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 1465, 1466, 1472, 1493, 1471, 1467,
	0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461,
	0, 0, 0, 0, 3374, 0, 0, 0, 0, 0,
	0, 0, 1476, 1477, 1478, 1479, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 1490, 0, 0,
	1465, 1466, 1472, 1493, 1471, 1467, 0, 1464, 1462, 1463,
	1455, 1456, 1457, 1458, 1460, 1461, 1491, 0, 0, 1501,
	3373, 0, 0, 1481, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 1498, 0, 0, 0, 0,
	0, 0, 1468, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 1452,
	0, 1484, 1485, 1486, 1494, 1495, 1496, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 1487, 1482, 0,
	0, 0, 0, 0, 0, 1454, 0, 0, 0, 0,
	1500, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 1452, 0, 1484, 1485, 1486,
	1494, 1495, 1496, 1453, 0, 0, 0, 1492, 0, 0,
	0, 0, 1473, 1487, 1482, 0, 0, 0, 0, 1470,
	0, 1454, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1476, 1477, 1478, 1479,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 1490, 0, 0, 1465, 1466, 1472, 1493, 1471, 1467,
	0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461,
	1491, 0, 0, 1501, 3266, 0, 0, 1481, 1483, 0,
	0, 0, 1476, 1477, 1478, 1479, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 1497, 0, 1498,
	0, 0, 0, 0, 0, 0, 1468, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 0, 0, 1501,
	0, 1489, 0, 1481, 1483, 0, 0, 0, 0, 0,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 1498, 0, 0, 1499, 0,
	0, 0, 1468, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 1452,
	0, 1484, 1485, 1486, 1494, 1495, 1496, 0, 0, 0,
	0, 1492, 0, 1480, 0, 0, 0, 1487, 1482, 0,
	0, 0, 0, 0, 0, 1454, 0, 0, 0, 0,
	1500, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1453, 0, 0, 0, 1492, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 1465, 1466,
	1472, 1493, 1471, 1467, 0, 1464, 1462, 1463, 1455, 1456,
	1457, 1458, 1460, 1461, 0, 0, 0, 0, 3169, 0,
	0, 0, 0, 0, 0, 0, 1476, 1477, 1478, 1479,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 1490, 0, 0, 1465, 1466, 1472, 1493, 1471, 1467,
	0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461,
	1491, 0, 0, 1501, 3121, 0, 0, 1481, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 1498,
	0, 0, 0, 0, 0, 0, 1468, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 1452, 0, 1484, 1485, 1486, 1494, 1495,
	1496, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	0, 1487, 1482, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 0, 0, 1500, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 1452,
	0, 1484, 1485, 1486, 1494, 1495, 1496, 1453, 0, 0,
	0, 1492, 0, 0, 0, 0, 1473, 1487, 1482, 0,
	0, 0, 0, 1470, 0, 1454, 0, 0, 0, 0,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 1477, 1478, 1479, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 1490, 0, 0, 1465, 1466,
	1472, 1493, 1471, 1467, 0, 1464, 1462, 1463, 1455, 1456,
	1457, 1458, 1460, 1461, 1491, 0, 0, 1501, 3120, 0,
	0, 1481, 1483, 0, 0, 0, 1476, 1477, 1478, 1479,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 1497, 0, 1498, 0, 0, 0, 0, 0, 0,
	1468, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 0, 1501, 0, 1489, 0, 1481, 1483, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 1498,
	0, 0, 1499, 0, 0, 0, 1468, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 1452, 0, 1484, 1485, 1486, 1494, 1495,
	1496, 0, 0, 0, 0, 1492, 0, 1480, 0, 0,
	0, 1487, 1482, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 0, 0, 1500, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1453, 0, 0,
	0, 1492, 0, 0, 0, 0, 1473, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 1465, 1466, 1472, 1493, 1471, 1467, 0, 1464,
	1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461, 0, 0,
	0, 0, 3119, 0, 0, 0, 0, 0, 0, 0,
	1476, 1477, 1478, 1479, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 1490, 0, 0, 1465, 1466,
	1472, 1493, 1471, 1467, 0, 1464, 1462, 1463, 1455, 1456,
	1457, 1458, 1460, 1461, 1491, 0, 0, 1501, 3086, 0,
	0, 1481, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 1498, 0, 0, 0, 0, 0, 0,
	1468, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 1452, 0, 1484,
	1485, 1486, 1494, 1495, 1496, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 1487, 1482, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 1500, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 1452, 0, 1484, 1485, 1486, 1494, 1495,
	1496, 1453, 0, 0, 0, 1492, 0, 0, 0, 0,
	1473, 1487, 1482, 0, 0, 0, 0, 1470, 0, 1454,
	0, 0, 0, 0, 1500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1476, 1477, 1478, 1479, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 1490,
	0, 0, 1465, 1466, 1472, 1493, 1471, 1467, 0, 1464,
	1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461, 1491, 0,
	0, 1501, 2885, 0, 0, 1481, 1483, 0, 0, 0,
	1476, 1477, 1478, 1479, 0, 0, 0, 0, 0, 0,
	1459, 3545, 0, 0, 0, 1497, 0, 1498, 0, 0,
	0, 0, 0, 0, 1468, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 1491, 0, 0, 1501, 0, 1489,
	0, 1481, 1483, 0, 0, 0, 0, 0, 1474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 1498, 0, 0, 1499, 0, 0, 0,
	1468, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	3544, 0, 0, 0, 0, 0, 1451, 1452, 0, 1484,
	1485, 1486, 1494, 1495, 1496, 0, 0, 0, 0, 1492,
	0, 1480, 0, 0, 0, 1487, 1482, 0, 0, 0,
	0, 2469, 0, 1454, 0, 0, 0, 0, 1500, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1453, 0, 0, 0, 1492, 0, 0, 0, 0,
	1473, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 2470, 1465, 1466, 1472, 1493,
	1471, 1467, 0, 1464, 1462, 1463, 1455, 1456, 1457, 1458,
	1460, 1461, 0, 0, 2498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1476, 1477, 1478, 1479, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 1490,
	0, 0, 1465, 1466, 1472, 1493, 1471, 1467, 0, 1464,
	1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461, 1491, 0,
	0, 1501, 0, 0, 0, 1481, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 0, 1498, 0, 0,
	0, 0, 0, 0, 1468, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 1474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 1451, 1452, 0, 1484, 1485,
	1486, 1494, 1495, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 1482, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 1475, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1476, 1477, 1478, 1479, 0, 0, 0,
	0, 0, 0, 1459, 0, 2586, 0, 0, 2585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 0,
	1501, 0, 0, 1490, 1481, 1483, 1465, 1466, 1472, 1493,
	1471, 1467, 0, 1464, 1462, 1463, 1455, 1456, 1457, 1458,
	1460, 1461, 0, 0, 1497, 0, 1498, 0, 0, 0,
	0, 0, 0, 1468, 1469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2170, 0, 0,
	0, 1488, 0, 0, 1451, 1452, 0, 1484, 1485, 1486,
	1494, 1495, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 1482, 0, 0, 0, 2169, 0,
	0, 1454, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 1475, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 1470, 1451, 1452, 0, 1484,
	1485, 1486, 1494, 1495, 1496, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 1487, 1482, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1453, 1476, 1477, 1478, 1479, 0, 0, 0, 0,
	1473, 0, 1459, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 0, 0, 1501,
	0, 0, 1490, 1481, 1483, 1465, 1466, 1472, 1493, 1471,
	1467, 0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460,
	1461, 0, 0, 1497, 0, 1498, 0, 0, 0, 0,
	0, 0, 1468, 1469, 1476, 1477, 1478, 1479, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1491, 0,
	0, 1501, 0, 0, 1499, 1481, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 1497, 0, 1498, 0, 0,
	0, 0, 0, 0, 1468, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 1474, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 825, 0, 1451, 1452, 0, 1484, 1485,
	1486, 1494, 1495, 1496, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 1487, 1482, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 1475, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 1465, 1466, 1472, 1493, 1471, 1467,
	0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1476, 1477, 1478, 1479, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 0,
	1501, 0, 0, 1490, 1481, 1483, 1465, 1466, 1472, 1493,
	1471, 1467, 0, 1464, 1462, 1463, 1455, 1456, 1457, 1458,
	1460, 1461, 0, 0, 1497, 0, 1498, 0, 0, 0,
	0, 0, 0, 1468, 1469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 1451, 1452, 0, 1484, 1485, 1486,
	1494, 1495, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 1482, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 1475, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1476, 1477, 1478, 1479, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 2592, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 0, 0, 1501,
	0, 0, 1490, 1481, 1483, 1465, 1466, 1472, 1493, 1471,
	1467, 0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460,
	1461, 0, 0, 1497, 0, 1498, 0, 0, 0, 0,
	0, 0, 1468, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 1451, 1452, 0, 1484, 1485, 1486, 1494,
	1495, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 1482, 0, 0, 0, 2587, 0, 0,
	1454, 0, 0, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1453, 0,
	0, 1475, 0, 0, 0, 0, 0, 1473, 0, 0,
	0, 0, 0, 0, 1470, 1451, 1452, 0, 1484, 1485,
	1486, 1494, 1495, 1496, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 1487, 1482, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 1476, 1477, 1478, 1479, 0, 0, 0, 0, 1473,
	0, 1459, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1491, 0, 0, 1501, 0,
	0, 1490, 1481, 1483, 1465, 1466, 1472, 1493, 1471, 1467,
	0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461,
	0, 0, 1497, 0, 1498, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1476, 1477, 1478, 1479, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 0,
	1501, 0, 0, 1499, 1481, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 1497, 0, 1498, 0, 0, 0,
	0, 0, 0, 1468, 1469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 1480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 1451, 1452, 0, 1484, 1485, 1486,
	1494, 1495, 1496, 0, 0, 0, 1492, 0, 0, 2554,
	0, 0, 0, 1487, 1482, 0, 0, 0, 2540, 0,
	0, 1454, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 1475, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 1465, 1466, 1472, 1493, 1471, 1467, 0,
	1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1476, 1477, 1478, 1479, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 0, 0, 1501,
	0, 0, 1490, 1481, 1483, 1465, 1466, 1472, 1493, 1471,
	1467, 0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460,
	1461, 0, 0, 1497, 0, 1498, 0, 0, 0, 0,
	0, 0, 1468, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 1451, 1452, 0, 1484, 1485, 1486, 1494,
	1495, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 1482, 0, 0, 0, 0, 0, 0,
	1454, 0, 0, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1453, 0,
	0, 1475, 0, 0, 0, 0, 0, 1473, 0, 0,
	0, 0, 0, 0, 1470, 1451, 1452, 0, 1484, 1485,
	1486, 1494, 1495, 1496, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 1487, 1482, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 1476, 1477, 1478, 1479, 0, 0, 0, 0, 1473,
	0, 1459, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1491, 0, 0, 1501, 0,
	0, 1490, 1481, 1483, 1465, 1466, 1472, 1493, 1471, 1467,
	0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461,
	0, 0, 1497, 0, 1498, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1476, 1477, 1478, 1479, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 0,
	1501, 0, 0, 1499, 1481, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 1497, 0, 1498, 0, 0, 0,
	0, 0, 0, 1468, 1469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 1480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 1452, 0, 1484, 1485, 1486,
	1494, 1495, 1496, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 1475, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 1465, 1466, 1472, 1493, 1471, 1467, 0,
	1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1476, 1477, 1478, 1479, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 0, 0, 1501,
	0, 0, 1490, 1481, 1483, 1465, 1466, 1472, 1493, 1471,
	1467, 0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460,
	1461, 0, 0, 1497, 0, 1498, 0, 0, 0, 0,
	0, 0, 1468, 1469, 1451, 1452, 0, 1484, 1485, 1486,
	1494, 1495, 1496, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 1482, 0, 1474, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 1452, 0, 0, 0, 1453,
	1494, 1495, 1496, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 1482, 1470, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 1475, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 1476, 1477, 1478, 1479, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 0, 0, 1501,
	0, 0, 0, 1481, 1483, 0, 0, 0, 0, 0,
	0, 0, 1476, 1477, 1478, 1479, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1666, 0, 1491, 1489, 0, 1501,
	0, 0, 0, 1481, 1483, 0, 1474, 0, 0, 0,
	0, 1490, 0, 0, 1465, 1466, 1472, 1493, 1471, 1467,
	0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461,
	0, 0, 1468, 1469, 1683, 1660, 1667, 1650, 1693, 1692,
	0, 0, 1652, 1651, 0, 0, 0, 1489, 0, 0,
	1703, 1704, 0, 0, 0, 0, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	765, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 1694, 0, 1690, 1689, 0, 0, 0, 0, 0,
	0, 1475, 739, 0, 0, 1688, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 750, 737, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 1480, 0, 0, 1687, 1685, 1686, 0,
	738, 0, 0, 0, 0, 740, 0, 0, 0, 771,
	0, 1475, 0, 0, 0, 0, 747, 748, 0, 0,
	0, 0, 759, 0, 0, 0, 0, 0, 0, 1662,
	0, 0, 0, 0, 0, 766, 742, 1492, 0, 1676,
	1665, 1678, 1680, 1681, 1682, 1677, 0, 1670, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1699, 1700, 0,
	0, 0, 0, 764, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 1465, 1466, 1472, 1493, 1471, 1467,
	0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461,
	0, 0, 1654, 0, 0, 743, 0, 0, 0, 0,
	0, 0, 0, 736, 0, 1691, 0, 0, 0, 1663,
	0, 1664, 0, 0, 0, 0, 0, 0, 744, 745,
	0, 1490, 0, 0, 0, 0, 0, 1493, 1471, 1467,
	0, 1464, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 1461,
	752, 751, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 1684, 0, 0, 0, 1673, 1671, 1672, 1675, 1674,
	0, 0, 0, 770, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1655, 1656, 1658, 1659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1679, 1657, 0,
	0, 0, 0, 0, 0, 0, 0, 741, 1702, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1653, 763, 0, 1695, 1696, 1697,
	1698, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 761,
	0, 0, 0, 0, 0, 0, 0, 1661, 0, 755,
	0, 0, 1668, 1701, 0, 756, 0, 0, 0, 0,
	0, 0, 734, 0, 768, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	735, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	757, 0, 0, 0, 754, 0, 0, 0, 0, 0,
	0, 0, 0, 769, 0, 0, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 762,
}
var sqlPact = [...]int{

	8937, -1000, -1000, -1000, -1000, -1000, -1000, 160, 159, 158,
	154, 150, 148, 147, 145, -1000, -1000, -1000, 144, -1000,
	-1000, 139, -1000, 136, 135, 128, 125, -1000, 124, 111,
	110, -1000, -1000, -1000, -1000, 109, 107, 106, 54382, 1729,
	65826, 57334, 1660, 48862, 65400, 48436, 64974, 64548, 104, -1000,
	64122, 103, 102, 101, -1000, -1000, 100, 1422, 39876, 95,
	91, 90, 1890, 88, 86, -1000, 85, -1000, 11117, 1322,
	-1000, 82, 78, -1000, 5218, 4015, 56488, 2157, 77, 76,
	39449, 2144, 2191, -1000, -1000, 1622, -1000, -1000, 75, 70,
	69, 66, 65, 63, 62, 61, 60, -1000, 58, 57,
	56, 54, 53, 52, 49, 47, 46, 45, 43, 42,
	39, 38, 37, 36, 35, 34, -1000, 75836, 1467, 1380,
	1336, 1330, 1320, 1326, 853, 33, 32, 31, 25, 23,
	21, 19, -1000, -1000, 15, 13, 12, 10, -1000, 9,
	8, 126, 6, 5, 4, 3, -5, 2404, 2146, 1291,
	851, 19956, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 70026, 66246, -6, -47, -7,
	-1000, 2483, 818, 33045, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 423, -1000, -1000, -1000, 245, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1415, 646, -1000, -1000, -1000, 63696, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1721, 24, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 645, -1000, 1716, 236, 1635, -1000,
	-1000, -1000, -1000, -1000, 66246, -1000, -1000, 2825, 2822, 1605,
	644, 63276, -1000, 1264, -1000, 788, 22662, -1000, 994, -1000,
	22662, 237, -1000, -1000, -1000, -1000, -1000, 48010, 16356, 47584,
	47158, 43764, 62850, 15920, 53962, 1060, -1000, -1000, -1000, -1000,
	-1000, -28, 41148, 66246, -1000, 228, -1000, -1000, -1000, -1000,
	-1000, -1000, 29080, 762, 28619, 305, 28158, 275, -1000, -1000,
	-1000, -1000, 2817, 2814, 923, 2813, 2431, 69606, 1410, 2811,
	1340, 995, 873, 2808, 2807, 2799, 2791, 2790, 2787, 2781,
	1248, 62424, 2184, 43328, 42892, 54382, 54382, 1970, 61998, -1000,
	-1000, 1143, 1114, -1000, -1000, -1000, -1000, 2302, 2186, 2176,
	53536, -1000, -1000, 2778, 2775, 2774, 2767, 2765, 69186, 1375,
	2764, 1886, 2763, 2754, 2753, 2752, 2751, 2749, 2747, 2742,
	2739, -1000, 53110, 52684, 52258, 51832, 61572, 42456, 42020, -1000,
	-1000, -1000, 34745, 7069, 6110, 61146, 36053, 54382, 54382, -1000,
	-1000, 29529, 83, -1000, -1000, -1000, 2131, -1000, 29529, 83,
	-1000, 66246, -1000, 2177, 1475, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2147, 1306, 2619, 41584, 1603, 1162,
	2290, 2285, 1249, 1901, 2282, 2265, 2247, 2246, 2245, 1354,
	1907, 272, 19495, 1207, 1245, 2243, 2221, 2646, 1574, 46732,
	2738, 2736, 2466, 2215, 2124, -1000, -1000, -1000, -1000, 1185,
	-1000, -1000, 49282, -1000, -1000, 993, -1000, -1000, 993, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1059, 68346, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1372, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2151, -1000, 1552, -1000, -1000, 1766, 1123,
	2146, 1864, 2450, 2450, 2450, 2505, 414, 407, -1000, 126,
	-1000, -1000, 75002, -1000, -1000, 29529, 29529, 29529, 29529, 29529,
	1579, -1000, 643, -1000, -1000, 687, -1000, 640, 572, -1000,
	-1000, -1000, -1000, -1000, -1000, 637, 2652, -1000, 869, -1000,
	-1000, -1000, -1000, 2609, -1000, 18585, -1000, -1000, -1000, 359,
	635, 29529, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 222, 807,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 553, 1437, 544, 544, 544, -1000,
	-1000, 863, -1000, -1000, -1000, 286, 530, 279, 529, -1000,
	-1000, -1000, -1000, 2175, 634, 631, -1000, 630, 626, 625,
	-1000, -1000, -1000, 624, 622, 621, 620, 619, 617, 616,
	614, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 862, -1000,
	613, 610, 605, 601, 593, 592, 589, 588, 587, -1000,
	-1000, -30, 66246, -1000, 423, -30, -1000, -1000, 583, -1000,
	23111, 23111, 23111, -1000, -1000, 1707, 29529, -1000, 1932, -1000,
	277, -25, 747, 33893, -1000, 32193, 747, 685, 37327, -1000,
	2110, -1000, -1000, 577, 209, -1000, -1000, 2100, 66246, 16790,
	66246, 54382, 54382, 2367, 29529, -1000, -1000, 40724, 66246, 54802,
	2564, 75750, 40724, 66246, 2174, -1000, -1000, -1000, 66246, -1000,
	29529, -1000, 2562, 1197, 44622, 2526, -38, -1000, -1000, -1000,
	-1000, -1000, -1000, 1863, 1885, 977, 1762, 1444, -1000, 22662,
	2424, -1000, -1000, -1000, 188, 16790, -1000, 1682, 2346, 1099,
	-1000, 1760, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1361, 2338, -1000, 1720, 2333, 1352, -1000, -1000, 843, 2331,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1587,
	-1000, -1000, 2454, -1000, -1000, 1433, 2322, -21, -1000, -1000,
	35185, 41148, -33, -1000, -1000, -48, -1000, 15484, 75002, -1000,
	-1000, -1000, 75002, 683, -1000, -1000, 2314, -1000, 75002, 681,
	-1000, -1000, 2311, -1000, -1000, -1000, 2734, -1000, 2732, 1814,
	2731, 2730, 2728, -1000, 1440, 1446, 2723, -1000, 2720, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 51406, 50980, 871, -1000,
	1701, -1000, -1000, 50554, 831, 1813, -1000, -1000, 1811, -1000,
	834, -1000, 2717, 60720, 2001, 831, 1809, -1000, -1000, -1000,
	-1000, -1000, 54382, -1000, 54382, -1000, 54382, -1000, 1229, -1000,
	68766, -25, -1000, -1000, -1000, -1000, -1000, 2310, 2716, 2710,
	2709, -1000, 66246, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 168, 2305, -1000, -1000, 168, 2303, -1000, 168,
	2298, -1000, 166, 2297, -1000, -1000, 1667, 2296, -1000, -162,
	2287, -1000, -1000, -162, 2286, -1000, -61, -1000, -1000, -1000,
	818, -1000, 34319, -1000, 34319, 60294, 44198, 822, 609, 39023,
	75002, -1000, 35185, 75002, -1000, 44198, 50554, -1000, 59868, 50134,
	-1000, -1000, 1112, 1896, -1000, -1000, -1000, -1000, 44198, 44198,
	44198, -1000, 59442, -1000, 1530, 1310, 2458, 54382, -1000, 1464,
	-1000, -1000, -1000, 2477, 2173, -1000, 40300, 56062, -1000, 55642,
	-1000, 55222, -1000, 54382, -1000, 54382, -1000, 2708, 2706, 2705,
	-1000, 2704, 2470, 75002, 2462, -1000, 2291, 1371, 1369, 66246,
	-1000, -1000, 66246, -1000, 66246, -1000, -1000, -1000, 1862, -1000,
	-1000, -1000, -1000, 54382, -1000, -1000, -1000, -1000, -1000, -1000,
	2172, -1000, 1463, -1000, 1107, -1000, -1000, 173, -1000, -1000,
	-38, -1000, 68346, -1000, -1000, 2146, 1864, -1000, 66246, -1000,
	1292, 54382, -1000, 1913, -1000, 1178, -1000, 2146, 1743, 1942,
	27697, 1921, 29529, 126, -1000, -1000, 126, 126, 22213, -1000,
	-1000, 75750, 75750, 16790, 1078, 29529, 29529, 29529, 29529, 29529,
	29529, 29529, 29529, 29529, 29529, 29529, 29529, 29529, 29529, 29529,
	29529, 29529, 29529, 29529, 29529, 29529, 29529, 29529, 29529, 29529,
	29529, 29529, 29529, 29529, 29529, 29529, 29529, 29529, 29529, 29529,
	1634, 29529, 1048, 29529, 29529, 29529, 29529, 1957, -1000, -1000,
	1500, 452, 1576, -1000, 2597, 2597, 2597, 75333, 75333, 546,
	2701, 687, -1000, 29529, -1000, 83, 29529, 17226, -1000, 2627,
	1296, -1000, -1000, 407, 6584, 1804, -1000, 406, 17687, -1000,
	-1000, -1000, 18585, 572, 27236, 29529, 852, 75002, 15050, 2164,
	2050, -1000, 2626, -1000, -1000, 2610, -1000, -1000, -1000, -1000,
	2610, 1076, 999, 2625, -1000, 2610, 2610, 571, 655, 654,
	653, 651, 463, 29529, 29529, 29529, 29529, 29529, 29529, 29529,
	29529, -1000, 26787, 26326, 25865, 30876, 25404, 29529, 19034, 24943,
	24482, 66246, -30, 2557, 29529, 141, -1000, 73563, -1000, 141,
	141, 564, -62, 75002, 1906, 1906, 33469, 1819, 1584, 1584,
	1584, -1000, 558, 666, -8, -9, -12, -1000, -1000, -13,
	-15, 747, 11562, 57754, 1585, 747, 747, 186, 219, 405,
	31769, 1932, 57754, -1000, -1000, 54382, 557, 17226, 16790, 1147,
	-63, 185, 1950, 1945, 1927, -1000, 1315, -64, 1047, -42,
	-1000, 6001, -69, -1000, 905, -1000, -1000, -1000, 291, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 859, 555, 554,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 553, 1437, 544,
	544, 544, -1000, -1000, -1000, 286, 530, 279, 529, -1000,
	-1000, -1000, -1000, -1000, -1000, 2098, -48, 54802, 777, -74,
	961, -38, -1000, -1000, -1000, 44622, 993, -1000, 1370, -1000,
	-1000, -1000, -1000, -1000, -1000, 1117, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2645, -1000, 2607, -1000, -1000, 2624, -31,
	-1000, -1000, 16790, -1000, -43, 1312, -1000, 46306, 2461, 2459,
	2442, 1226, -1000, 1161, 2504, 49282, 2533, 2542, 615, -1000,
	2088, -1000, -1000, 781, 1349, 1043, 49282, 1720, -1000, 75750,
	-1000, 1982, 2502, 1168, 1166, 1168, 1168, 1142, -1000, 49282,
	1036, 1522, 44198, -1000, 1035, -1000, -44, 2531, 2541, 524,
	-1000, 2086, 1034, -1000, -1000, 54382, 16790, 745, -1000, 44198,
	-33, 41148, 66246, 183, -1000, 29529, 83, 29529, 83, -1000,
	-1000, 2279, -1000, -1000, -1000, 2698, 1436, 1882, -1000, -1000,
	-1000, 525, 1807, 1720, 1806, -1000, -1000, 49708, 2084, 66246,
	1959, -36, 54382, -1000, -1000, 1519, -1000, 2278, 2274, 481,
	2697, -1000, 1698, 1805, -1000, -1000, -1000, 67926, 1086, 2272,
	890, 487, 2554, 487, 38175, -1000, 66246, -1000, 66246, -1000,
	-1000, -1000, 2696, -1000, 54382, -1000, -1000, 54382, -1000, 54382,
	-1000, 54382, -1000, 54382, 54382, -1000, 66246, 44198, 44198, 44198,
	5456, 45466, -77, -79, 404, -1000, 59022, 66246, 889, 45886,
	66246, 2413, -212, -1000, 822, 822, 745, -1000, 745, -1000,
	54382, 2161, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2694,
	2692, -1000, 830, 54382, 66246, 54382, -1000, -1000, 66246, -1000,
	66246, -1000, -1000, 66246, -1000, 66246, -1000, 66246, -1000, -1000,
	-1000, -1000, -1000, -1000, 83, 29529, 1257, -1000, 2156, -1000,
	2154, -1000, 18, -1000, -1000, -1000, -1000, 1640, 54382, 54382,
	66246, 54382, -1000, 49282, -1000, -1000, 2146, -1000, -1000, 1823,
	-1000, -34, 902, -1000, -1000, -1000, -1000, -1000, 75002, 454,
	-1000, -1000, 75002, 1342, 1962, -1000, 1962, -35, -1000, 73045,
	1910, 54382, -1000, -1000, -1000, -1000, -1000, 778, 804, 804,
	1030, 1030, 1030, 1030, 2546, 891, 480, 214, 75583, 75583,
	4196, 4196, 4196, 4196, 4196, 75583, 710, 441, 441, 710,
	710, 710, 710, 710, 441, 441, 441, 75583, 75583, 75583,
	75333, 75074, 6373, 29529, 29529, 1031, 1496, 452, 5824, 29529,
	6921, 6921, 6921, 6921, -1000, 1582, -1000, -1000, -1000, -1000,
	2081, 522, 30876, 30876, -1000, -1000, -1000, -1000, 18136, 29529,
	-1000, -1000, -1000, -1000, 24021, -1000, -1000, 72715, -251, 401,
	-200, -19, -1000, 29529, 29529, 29529, 397, -1000, 396, -1000,
	-1000, 1026, -1000, 1023, 1019, 1014, -1000, 521, 182, 29529,
	66246, -1000, 10714, 664, -141, -1000, -80, 1164, -1000, 29529,
	181, -1000, 1577, 520, 519, 374, -85, -1000, 365, 776,
	773, 361, 357, 353, 29529, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 74743, 10634, 10237, 10157, 5640,
	9700, 9413, -86, 352, -1000, 2080, -200, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 348, -1000, 345, -1000, 74484, -200,
	343, 6191, -1000, 30876, 30876, 30876, -1000, 342, -1000, 73304,
	-1000, 74412, 23572, 23572, 23572, 340, 74153, 29529, -200, -87,
	-1000, -88, -1000, -1000, 518, -93, 848, 23111, 32619, 16790,
	-1000, 848, 848, 29529, -1000, 29529, 1938, -1000, -1000, -1000,
	1930, 1524, 1906, 33469, -1000, -1000, -1000, -1000, 57754, 479,
	747, -1000, -1000, -1000, -1000, -1000, 57754, -1000, 2609, 2069,
	-1000, -1000, -1000, 66246, 423, -1000, 57754, 57754, 16790, 747,
	-1000, 328, 36477, -19, 179, -1000, -1000, 16790, 2033, 2033,
	2033, -1000, -1000, 66246, 2559, -1000, 1503, -1000, 75750, -1000,
	686, 969, -1000, 2620, 516, -1000, 2610, 2610, 66246, 138,
	22662, -1000, 993, -1000, -1000, 1244, -1000, 1424, -1000, 997,
	-1000, -1000, -1000, 22662, -1000, 1515, 66246, 66246, 54382, -1000,
	-1000, 1803, 67506, 1800, 75750, 66246, -1000, -1000, 514, 513,
	1905, 1900, 66246, 66246, 67086, 66666, 66246, 1462, 29529, 1744,
	1287, 83, 83, -1000, -1000, 83, 511, 1045, 54382, 54382,
	54382, 1347, -1000, -1000, -1000, -1000, -1000, 54382, -1000, -1000,
	2618, -1000, 1168, -1000, -1000, -1000, 1168, 1720, 1344, 54382,
	44198, 842, 66246, 1532, 83, 83, -1000, -1000, 83, 510,
	16790, 1471, -1000, 2007, -1000, -94, -1000, -1000, 14616, 75002,
	-1000, 75002, -1000, 66246, -1000, 867, 66246, 45886, 819, 2269,
	-1000, 1720, 2253, 423, -1000, -1000, 37751, -48, 822, 44198,
	54382, -36, 44198, 44198, 44198, 2690, 508, 2689, -1000, 54382,
	2248, 1697, 1799, 2356, 709, 66246, 848, 33469, 1466, -1000,
	36903, 880, 66246, 1332, 87, -1000, -1000, -1000, 2, 66246,
	-1000, 2688, -1000, -1000, 168, 168, 168, -1000, 166, 1667,
	-1000, -162, -162, -1000, -1000, 5456, 5456, 822, -37, 507,
	-1000, 739, 737, 35619, 44198, -95, -1000, -1000, -1000, -1000,
	-1000, 54382, 66246, 584, 1998, 66246, -96, -1000, 164, 506,
	-1000, 822, 35185, 2079, -1000, -1000, 839, -1000, 1103, -1000,
	-1000, -1000, -1000, -1000, -1000, -22, -48, -48, -1000, -1000,
	-1000, -1000, 75002, -1000, 1234, 1233, 66246, -1000, 16790, 66246,
	54382, 16790, 54382, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1342, -1000, 29529, -1000, -1000, -1000, 22213, -1000, -1000,
	-1000, 54382, -23, 29529, 29529, 5615, 5275, 29529, 30876, 30876,
	-1000, 29529, 4479, -1000, -1000, -1000, -1000, -1000, 2078, 502,
	29529, 75750, 6025, 4935, -1000, 326, 7525, 710, -1000, 29529,
	-1000, 322, 21764, -1000, 73635, -29, -101, -1000, 2644, 1827,
	1498, 1425, 1299, 2614, 14182, -200, -103, -1000, -1000, 684,
	-1000, 2295, -1000, 29529, 73894, 13748, -1000, 38599, 850, 1595,
	-1000, -1000, 2610, 803, -1000, -1000, -1000, 803, -1000, 72431,
	75750, 75750, 29529, 29529, -1000, 29529, 29529, 29529, -1000, -1000,
	29529, -1000, -1000, 2077, 29529, -1000, 75750, 75750, 30876, 30876,
	30876, 30876, 30876, 30876, 30876, 30876, 30876, 30876, 30876, 30876,
	30876, 30876, 30876, 30876, 30876, 30876, 30876, 1892, 30876, 2590,
	2590, 2590, -1000, 2137, 2077, 29529, 29529, 75750, 320, 319,
	316, -1000, 29529, -200, -1000, -1000, 5456, -1000, 2042, -1000,
	29529, -1000, -184, -1000, 1932, -1000, -1000, 2042, 2042, -108,
	75002, 33469, 33469, -1000, 501, 29529, 1903, -1000, 663, -1000,
	-111, -1000, 57754, -1000, 661, -249, -1000, 735, -1000, -1000,
	-1000, -1000, 423, -1000, -1000, -1000, 163, 57754, -1000, -114,
	-1000, 2553, 314, 16790, -1000, -1000, -1000, -1000, -1000, -1000,
	-48, 1606, 2637, -1000, 2611, 679, 660, 313, 2610, 311,
	310, -48, 66246, -1000, -38, -1000, -1000, -1000, 29529, -1000,
	-1000, 2453, 1011, 990, -1000, 2239, -1000, 1798, -1000, 884,
	-1000, 1268, -1000, 29529, 29529, 500, 499, 1432, 2687, 2233,
	1667, 2228, 1667, -1000, -1000, 806, -1000, 75002, 491, 490,
	-1000, -43, 1307, 837, -1000, -1000, 29529, 29529, 58598, -1000,
	346, 2454, -24, -1000, 987, -1000, -1000, -1000, 1720, 986,
	-1000, -1000, 1511, -1000, -1000, 833, -1000, -1000, 29529, -1000,
	-44, 974, 822, 2075, -1000, -1000, 2686, 2684, 2683, 309,
	-116, -46, 75750, 2552, 1737, 66246, 54382, 54382, 2547, 783,
	-1000, 2609, -1000, -1000, -1000, -1000, 831, -1000, -1000, 2682,
	-1000, 888, 16790, 54382, 2222, 1874, 709, 45046, -1000, 831,
	1595, -113, -1000, 1332, 21303, 2446, -117, -1000, -1000, -1000,
	848, 38175, 33469, 29529, 2681, -119, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 58178, 58178, 44198, 44198, 44198,
	822, 66246, 66246, 45886, 2679, 489, 66246, 66246, 486, -1000,
	66246, 66246, 2678, 44198, -1000, -1000, 83, -1000, 1619, 54382,
	13314, -1000, -1000, 830, -1000, -1000, 1533, 1759, 1533, 1636,
	72147, -1000, 2441, 16790, 2548, 6921, 29529, 29529, 3727, 4155,
	3662, 6921, 29529, 29529, 75750, 75533, -126, 29529, 29529, -1000,
	29529, 659, 75002, 2600, 29529, 308, 307, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 301, -1000, -1000, -1000,
	-1000, -1000, 75002, 29529, 162, -1000, -1000, -1000, 70446, -1000,
	29529, 300, 298, -1000, -1000, -1000, 296, 293, 395, 4551,
	72101, 71817, 71533, 75002, 2137, 75002, -1000, -1000, 953, 953,
	1160, 1160, 1160, 1160, 2590, 344, 779, 991, 1051, 1051,
	1051, 680, 604, 604, 1051, 1051, 1051, 2074, 1898, 484,
	7564, -1000, -1000, 75002, 75002, 289, -1000, -1000, -1000, -200,
	281, 2032, 2498, 75002, -1000, 33469, 2032, 2032, -1000, -1000,
	1524, 66246, 75002, 33469, -25, -1000, 2609, -1000, -1000, 2069,
	-1000, 12008, -1000, 16790, -1000, -1000, 36477, -1000, 482, -1000,
	127, -1000, -1000, 658, 2677, 669, -1000, 273, -1000, -1000,
	-48, 75002, 66246, 66246, 66246, 2220, -1000, 2002, -1000, 71487,
	-127, -1000, 73045, 29529, 66246, -1000, 1435, 1952, 915, -1000,
	66246, -1000, 66246, -1000, -1000, 66246, 66246, 54382, 2209, -128,
	75002, -60, -1000, 727, -1000, 1108, -1000, 12880, 54382, 54382,
	44198, 2206, -129, 16790, -1000, 44198, -1000, -1000, -1000, 1987,
	-1000, 56908, 1669, 83, -1000, 2673, 478, 1720, 83, -1000,
	1598, -1000, 652, -1000, -1000, 477, 66246, 1670, 465, 16790,
	1876, 709, 45046, -1000, 1086, 1942, -1000, -106, -1000, 467,
	83, 1595, -1000, -113, 75002, -1000, 726, -1000, -134, -1000,
	-1000, 263, -1000, 2400, 2398, -1000, -1000, 29529, 461, 460,
	66246, 2394, -1000, -1000, -135, -1000, 1711, -1000, -1000, -1000,
	-1000, -1000, 16790, 1316, -1000, -1000, -1000, -1000, 2441, 6921,
	6921, 29529, 29529, 29529, 6921, 75533, -136, -1000, 6921, 6921,
	-200, -1000, -1000, 73635, -1000, -1000, -1000, 75002, 12446, 1534,
	-1000, 71203, -1000, -1000, -1000, -1000, 29529, 29529, -1000, -1000,
	-1000, -1000, -1000, 30876, 2072, 459, 75750, -1000, -1000, 845,
	29529, 29529, 1932, 845, 845, -1000, -142, -1000, 747, -1000,
	-1000, -1000, 2609, 127, -1000, 2672, 16790, 606, -1000, 2664,
	-1000, -1000, -1000, -1000, 66246, -1000, 66246, -1000, 16790, 66246,
	2058, 1792, -1000, -1000, 1895, 457, 30876, 54382, 715, 2057,
	1458, 29529, -1000, -144, -145, 1790, -1000, -1000, 1782, 29529,
	-1000, 75750, 1667, 1667, -150, -151, -1000, 29529, 973, 66246,
	20854, -1000, 2659, 2454, -1000, -1000, -1000, 29529, 971, -1000,
	-162, 1532, 2016, -1000, -1000, -1000, -1000, 1891, -1000, -1000,
	66246, 1888, 824, -1000, 45886, 819, -1000, -1000, 805, -1000,
	29529, -1000, 54382, 29529, 1663, -1000, 709, 45046, -1000, 2356,
	1332, -1000, 2362, 66246, 2439, -1000, 1942, 452, -1000, 822,
	451, 450, -152, 29529, 29529, -153, 449, 822, -192, -1000,
	694, 689, -1000, -1000, 54382, 54382, -1000, 6921, 6921, 6921,
	-1000, 248, -1000, -1000, 1595, 2497, -1000, 70919, 70873, 545,
	30876, 75750, -159, -1000, 66246, 75002, -200, -1000, -1000, -1000,
	57754, 274, -1000, 2657, -1000, -1000, 2139, -1000, -1000, -1000,
	66246, 1797, -1000, -1000, 29529, 7564, 444, 29529, -1000, -1000,
	1976, 2108, 1987, 440, -1000, -1000, -1000, -1000, 1388, -1000,
	-1000, 75002, 2474, -1000, -1000, 439, 438, 75002, 429, 703,
	2068, -1000, -1000, -1000, 75002, 428, 819, -1000, 1549, 1669,
	427, -1000, -1000, -1000, 1966, 220, 2543, 805, -1000, 2567,
	-1000, -160, 888, -161, 54382, 45046, -1000, 1874, -1000, 1065,
	-167, 66246, 1332, -1000, -1000, 44198, 44198, 1458, -168, -174,
	-1000, 44198, -1000, 1711, -1000, 66246, -1000, 66246, -1000, -1000,
	-1000, 1510, 29529, -1000, -1000, 545, -175, -1000, -195, -1000,
	2537, -1000, -1000, -1000, -1000, -1000, 2219, 11106, 1839, 66246,
	8391, 2097, -1000, -1000, 1532, 66246, 54382, 887, 16790, 1533,
	1533, 29529, 20405, 1547, 29529, -1000, 54382, 66246, -1000, 2393,
	1987, 83, -1000, -1000, 1458, 426, 1458, 425, -1000, 1876,
	1209, -1000, 848, -1000, -1000, -177, -182, 1987, 1458, -1000,
	-183, -1000, -189, -190, 89, 30427, 30427, 30427, -200, -1000,
	66246, 424, 2190, -1000, 1645, 1417, 20, 921, -1000, -1000,
	2057, -197, 423, -1000, 29529, -1000, -198, -1000, 879, -199,
	-1000, 878, -204, -1000, 2061, -1000, -207, 422, -214, -1000,
	-1000, -1000, 1532, 824, 1987, 29529, 1987, 29529, -1000, 38175,
	-1000, 822, 822, 1532, 1987, 822, -1000, -1000, -1000, 2292,
	-1000, 31325, 1597, 1321, 72761, 2292, 2292, -1000, -1000, 66246,
	-1000, 1656, 1646, 1198, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1839, 75002, -1000, 1533, 2015, -1000, 1533, 2060,
	-1000, 1546, -1000, 66246, -1000, 66246, 819, -1000, 1532, -215,
	1532, -217, -206, -1000, -1000, -1000, 1532, -1000, -1000, 1390,
	2551, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2377, -1000, 898, 1596, 1596, 1645, -1000, 421, -1000, 420,
	-1000, -223, -1000, -1000, 847, 1458, 847, 1458, -1000, -1000,
	1313, -1000, -1000, 1592, 29978, -1000, 2578, -1000, -1000, 1922,
	-1000, 2057, 29529, 29529, 1629, -1000, 2656, 1987, -1000, 1987,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -229, -230, -1000,
	-1000, -1000, -1000, 1532, 1532, 1532, 927, 847, 847, -1000,
	419, -1000, -1000, 29529, -231, 1532, -1000,
}
var sqlPgo = [...]int{

	0, 3344, 3343, 3342, 3340, 3339, 3336, 3334, 3333, 3331,
	3330, 3329, 3326, 3319, 3318, 3317, 3316, 3315, 3314, 3309,
	3307, 3306, 3303, 3302, 3298, 3294, 3290, 3286, 3285, 3284,
	3282, 3279, 3274, 3273, 3271, 3268, 3262, 3261, 3260, 3259,
	3258, 3254, 3251, 3249, 3248, 3247, 3246, 3245, 36, 3242,
	3241, 3238, 3237, 3235, 3233, 3227, 3226, 3224, 3222, 3219,
	3218, 3217, 3216, 3214, 3213, 3212, 37, 3208, 211, 3206,
	3205, 3201, 3196, 3195, 3194, 3193, 3192, 3189, 3188, 210,
	3187, 127, 3186, 3185, 3184, 3183, 3181, 208, 3178, 3177,
	3176, 3175, 3174, 3173, 3172, 3171, 129, 3170, 3167, 178,
	3166, 3165, 3163, 3161, 3158, 3154, 3149, 3148, 3146, 3145,
	190, 3144, 207, 3143, 3141, 3140, 3139, 3136, 3135, 3133,
	3132, 3131, 3130, 3129, 3128, 3127, 3122, 3121, 3120, 3116,
	3108, 3104, 3101, 3099, 3098, 3096, 3094, 3092, 3089, 213,
	138, 3086, 3084, 204, 202, 3078, 3077, 95, 96, 84,
	3074, 125, 145, 186, 7645, 180, 3072, 3070, 3069, 151,
	3068, 3066, 3065, 3063, 90, 135, 136, 131, 132, 94,
	3062, 3061, 74, 50, 33, 28, 102, 3060, 3058, 3057,
	2084, 91, 3055, 3054, 199, 187, 3053, 1600, 3052, 146,
	97, 87, 57, 80, 3050, 117, 21, 3046, 164, 43,
	3042, 128, 68, 32, 6405, 8175, 3041, 114, 215, 76,
	240, 174, 162, 165, 163, 134, 969, 3038, 191, 3029,
	55, 154, 3028, 3027, 3017, 54, 143, 73, 3015, 7,
	3, 126, 27, 92, 13, 3007, 11, 3006, 3005, 3004,
	3002, 20, 130, 3001, 110, 58, 3000, 19, 2999, 79,
	181, 2994, 168, 99, 2992, 2990, 196, 153, 156, 2989,
	10, 172, 2987, 2986, 2984, 2982, 2981, 100, 22, 98,
	2979, 2978, 105, 185, 2977, 52, 2972, 133, 67, 116,
	201, 101, 170, 85, 175, 139, 183, 2971, 2970, 2969,
	147, 2968, 2967, 118, 160, 2966, 2965, 214, 35, 56,
	182, 60, 2964, 124, 2963, 158, 2962, 2961, 2960, 212,
	140, 159, 5, 70, 93, 30, 9, 179, 120, 89,
	83, 2959, 3713, 343, 1155, 2958, 119, 88, 49, 86,
	121, 198, 53, 2957, 2956, 1515, 2955, 2953, 2951, 2950,
	142, 2949, 2948, 2947, 107, 72, 71, 2946, 123, 64,
	12, 115, 200, 78, 167, 150, 193, 2945, 141, 2944,
	34, 112, 2943, 152, 195, 113, 2941, 747, 122, 2940,
	169, 2939, 2938, 2937, 2935, 237, 2934, 2933, 289, 2932,
	111, 2930, 2929, 148, 103, 166, 66, 29, 2926, 62,
	161, 2924, 149, 38, 2901, 220, 31, 0, 6879, 5342,
	6592, 2900, 2585, 2896, 157, 106, 2895, 2890, 2889, 75,
	2888, 61, 2887, 2886, 40, 2884, 15, 6, 8, 18,
	16, 1459, 513, 2883, 2878, 82, 104, 108, 2876, 206,
	171, 2873, 2871, 2870, 69, 2868, 23, 2867, 24, 2866,
	2865, 25, 1, 26, 2864, 2863, 188, 2858, 189, 2855,
	2854, 2561, 2853, 197, 63, 2852, 137, 173, 2851, 2850,
	2849, 2848, 192, 2843, 194, 2842, 14, 17, 4, 2841,
	2840, 2838, 155, 2, 2471, 2837, 2836, 65, 2833, 2828,
	144,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 453,
	453, 19, 31, 20, 32, 13, 454, 454, 454, 454,
	24, 21, 33, 22, 22, 22, 22, 22, 150, 150,
	150, 150, 18, 18, 27, 27, 166, 166, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 452,
	452, 168, 168, 167, 163, 163, 455, 455, 169, 169,
	169, 171, 171, 37, 37, 95, 95, 95, 96, 96,
	97, 97, 151, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 83, 83, 395, 395, 396, 396, 146, 146,
	147, 147, 147, 147, 148, 148, 149, 149, 149, 51,
	39, 39, 39, 39, 39, 39, 39, 40, 40, 40,
	40, 41, 41, 41, 41, 41, 41, 42, 42, 42,
	42, 42, 42, 49, 49, 49, 140, 140, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 460, 460,
	461, 461, 462, 462, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 63,
	63, 243, 243, 219, 219, 64, 64, 64, 65, 65,
	66, 66, 53, 53, 448, 448, 257, 257, 362, 362,
	68, 68, 276, 276, 69, 69, 69, 69, 69, 69,
	70, 70, 70, 70, 70, 70, 70, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 77, 77, 77,
	78, 78, 78, 75, 75, 75, 73, 73, 73, 72,
	72, 72, 76, 76, 76, 74, 74, 74, 258, 258,
	79, 79, 79, 79, 79, 79, 79, 79, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 364, 364, 80, 80, 80, 333, 333,
	84, 84, 84, 291, 291, 85, 85, 85, 85, 85,
	86, 86, 86, 86, 98, 98, 98, 98, 451, 451,
	250, 250, 184, 184, 184, 184, 91, 91, 91, 91,
	92, 92, 92, 93, 93, 145, 145, 104, 104, 104,
	104, 104, 103, 103, 103, 103, 103, 103, 43, 43,
	43, 44, 44, 45, 45, 46, 46, 47, 47, 48,
	48, 48, 48, 48, 106, 106, 456, 456, 108, 105,
	105, 105, 107, 107, 107, 107, 109, 110, 110, 110,
	110, 110, 110, 110, 110, 111, 111, 389, 389, 266,
	266, 387, 387, 403, 403, 388, 388, 223, 223, 223,
	223, 223, 224, 224, 224, 394, 394, 394, 394, 394,
	394, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 130, 130, 130, 139, 139, 139, 139, 139,
	139, 139, 132, 132, 132, 121, 121, 113, 113, 113,
	113, 113, 117, 117, 117, 117, 117, 114, 114, 123,
	123, 123, 123, 123, 118, 118, 120, 120, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 115, 115, 115,
	115, 125, 125, 125, 125, 297, 297, 297, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 135, 135,
	135, 135, 135, 135, 347, 347, 131, 131, 131, 131,
	134, 134, 134, 134, 281, 281, 128, 128, 128, 129,
	129, 129, 133, 133, 136, 136, 136, 136, 116, 116,
	116, 465, 465, 465, 137, 137, 127, 127, 138, 138,
	138, 138, 138, 138, 138, 138, 126, 126, 126, 126,
	119, 449, 449, 446, 446, 446, 446, 446, 446, 446,
	447, 447, 450, 450, 89, 89, 89, 58, 58, 466,
	466, 466, 59, 59, 467, 467, 467, 464, 464, 464,
	464, 464, 464, 464, 464, 225, 225, 226, 226, 314,
	314, 314, 314, 314, 229, 229, 170, 170, 170, 232,
	233, 233, 230, 230, 231, 231, 231, 235, 235, 234,
	237, 237, 236, 313, 410, 410, 412, 412, 412, 412,
	412, 412, 412, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 408, 408, 408, 409, 404, 404, 405,
	405, 405, 405, 227, 227, 228, 228, 228, 228, 406,
	407, 248, 248, 350, 411, 411, 413, 413, 415, 468,
	468, 468, 468, 468, 468, 469, 469, 312, 312, 241,
	241, 416, 416, 416, 416, 417, 417, 417, 417, 417,
	420, 419, 418, 418, 418, 418, 418, 343, 343, 343,
	62, 62, 62, 278, 278, 277, 277, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 142, 142, 60, 60, 60, 176, 176, 57, 57,
	57, 471, 471, 61, 61, 61, 472, 472, 67, 67,
	67, 67, 67, 67, 56, 56, 56, 56, 56, 473,
	473, 298, 298, 296, 296, 247, 247, 349, 188, 188,
	164, 164, 164, 23, 25, 25, 17, 17, 34, 34,
	35, 35, 30, 30, 457, 457, 458, 458, 90, 90,
	94, 94, 94, 102, 102, 141, 141, 141, 141, 141,
	141, 141, 38, 38, 38, 38, 50, 50, 50, 50,
	100, 475, 475, 475, 101, 101, 474, 474, 183, 183,
	183, 183, 185, 185, 309, 309, 310, 310, 476, 476,
	311, 311, 311, 311, 178, 177, 179, 179, 55, 55,
	55, 172, 172, 173, 173, 174, 174, 175, 175, 477,
	477, 87, 87, 87, 144, 144, 218, 218, 305, 305,
	305, 242, 242, 193, 193, 308, 308, 306, 306, 306,
	306, 275, 275, 275, 143, 143, 255, 255, 268, 268,
	269, 269, 359, 359, 270, 99, 99, 154, 154, 152,
	152, 152, 152, 152, 152, 159, 159, 259, 259, 160,
	160, 160, 160, 161, 161, 161, 153, 153, 153, 155,
	155, 155, 155, 155, 155, 155, 158, 158, 158, 158,
	162, 162, 162, 157, 157, 427, 427, 427, 429, 429,
	430, 426, 426, 428, 428, 470, 470, 280, 280, 280,
	239, 240, 238, 238, 245, 245, 244, 246, 246, 348,
	348, 348, 273, 273, 273, 273, 301, 301, 299, 299,
	299, 300, 300, 302, 302, 302, 303, 303, 304, 304,
	272, 272, 329, 329, 156, 156, 156, 252, 252, 252,
	253, 253, 320, 320, 320, 320, 320, 320, 321, 321,
	319, 319, 319, 319, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 352, 352, 254, 254, 353, 307, 307,
	444, 444, 444, 445, 445, 346, 346, 354, 354, 354,
	354, 354, 354, 344, 344, 345, 345, 360, 361, 361,
	284, 284, 284, 284, 282, 282, 285, 285, 285, 285,
	283, 283, 355, 355, 355, 355, 274, 274, 356, 356,
	356, 357, 315, 316, 316, 365, 365, 365, 365, 380,
	251, 251, 251, 251, 251, 478, 478, 366, 366, 366,
	366, 366, 366, 366, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 370, 370, 370, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 379, 379, 379,
	379, 379, 371, 371, 376, 376, 377, 377, 377, 372,
	373, 378, 378, 378, 378, 479, 479, 382, 382, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 368, 368,
	368, 375, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 292, 292, 293, 293, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 324, 324, 324, 324, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 421, 421, 421, 421, 421, 421, 421,
	421, 424, 424, 425, 425, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 431, 431, 432, 432, 434, 434,
	435, 435, 436, 437, 437, 437, 438, 439, 439, 433,
	433, 440, 440, 440, 440, 441, 441, 442, 442, 442,
	442, 442, 443, 443, 443, 443, 443, 335, 335, 336,
	336, 342, 342, 342, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	186, 186, 186, 186, 186, 264, 264, 262, 262, 262,
	265, 265, 263, 263, 261, 261, 260, 260, 332, 332,
	330, 330, 334, 334, 286, 286, 381, 381, 381, 381,
	381, 381, 381, 287, 287, 287, 295, 288, 288, 289,
	289, 289, 289, 289, 326, 327, 290, 290, 290, 328,
	328, 337, 341, 341, 340, 339, 339, 338, 338, 317,
	317, 318, 318, 271, 271, 480, 480, 267, 267, 358,
	358, 358, 358, 221, 221, 256, 256, 220, 220, 213,
	213, 214, 214, 214, 214, 249, 249, 383, 383, 383,
	384, 385, 386, 331, 203, 202, 190, 191, 201, 200,
	199, 189, 192, 196, 197, 198, 194, 195, 209, 208,
	207, 205, 206, 363, 215, 215, 216, 216, 216, 217,
	217, 217, 217, 187, 187, 210, 210, 211, 212, 212,
	204, 204, 204, 180, 180, 180, 181, 181, 182, 182,
	393, 393, 391, 391, 391, 392, 392, 392, 392, 390,
	390, 390, 390, 390, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 399, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 402, 402,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 2, 0, 1, 1,
	0, 2, 0, 7, 2, 5, 6, 2, 1, 3,
	1, 3, 1, 6, 4, 9, 7, 12, 12, 12,
	9, 2, 7, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 5,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 6, 6, 6, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 3, 3, 4,
	3, 4, 7, 4, 4, 4, 3, 5, 7, 4,
	3, 3, 4, 3, 3, 3, 3, 3, 2, 0,
	1, 0, 1, 0, 3, 3, 3, 3, 3, 6,
	4, 4, 4, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 1, 1, 2, 1, 2, 7,
	3, 2, 0, 1, 3, 3, 1, 0, 1, 2,
	2, 1, 6, 5, 1, 2, 1, 3, 2, 0,
	9, 3, 2, 0, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 3, 5, 3, 1, 3,
	2, 2, 5, 3, 3, 6, 6, 3, 1, 1,
	2, 1, 1, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	2, 1, 2, 1, 3, 5, 7, 2, 3, 0,
	3, 5, 2, 3, 0, 2, 3, 2, 3, 2,
	6, 4, 7, 2, 6, 4, 7, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 5, 4, 6, 4, 3, 0, 1, 3, 2,
	4, 2, 4, 1, 6, 3, 1, 1, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 1, 3, 2,
	3, 3, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 5, 7, 3, 3, 3, 3, 4, 4,
	4, 3, 4, 4, 3, 4, 4, 5, 3, 5,
	5, 5, 7, 3, 3, 3, 4, 3, 4, 3,
	5, 4, 5, 3, 4, 5, 3, 4, 3, 4,
	3, 3, 4, 4, 5, 0, 1, 1, 3, 2,
	4, 3, 3, 5, 4, 3, 5, 3, 5, 4,
	6, 4, 6, 4, 1, 0, 3, 4, 4, 5,
	7, 5, 3, 3, 2, 0, 4, 2, 3, 4,
	2, 3, 3, 3, 4, 3, 3, 3, 3, 4,
	3, 1, 1, 1, 2, 3, 2, 3, 6, 6,
	7, 9, 7, 9, 3, 4, 5, 5, 5, 3,
	5, 2, 0, 1, 1, 1, 1, 3, 2, 2,
	2, 1, 2, 0, 3, 3, 2, 10, 13, 0,
	2, 3, 9, 12, 0, 2, 3, 1, 1, 2,
	2, 2, 2, 1, 0, 1, 0, 1, 3, 1,
	1, 1, 1, 3, 8, 0, 1, 1, 0, 2,
	1, 0, 1, 0, 9, 9, 3, 1, 3, 7,
	1, 3, 11, 3, 2, 0, 3, 1, 2, 2,
	3, 2, 6, 2, 1, 1, 2, 4, 2, 5,
	5, 5, 2, 8, 9, 6, 5, 3, 1, 5,
	8, 5, 11, 3, 0, 2, 4, 3, 3, 1,
	5, 1, 3, 1, 2, 0, 1, 2, 2, 0,
	1, 3, 3, 2, 2, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	5, 8, 4, 1, 0, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 2, 2, 2, 2, 2, 3,
	1, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 1, 1, 8, 7, 5, 0, 1, 6, 7,
	6, 5, 3, 4, 14, 17, 14, 17, 4, 0,
	2, 2, 0, 1, 0, 1, 3, 2, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 1, 3, 1, 3, 8, 5, 3, 4, 3,
	0, 2, 2, 0, 10, 3, 2, 0, 1, 3,
	1, 1, 3, 3, 5, 1, 1, 3, 3, 2,
	3, 4, 3, 4, 5, 0, 3, 0, 2, 2,
	4, 2, 3, 0, 2, 1, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 5, 1, 0, 1, 0, 3, 1, 3, 2,
	4, 5, 2, 2, 1, 1, 1, 0, 2, 2,
	5, 2, 3, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 1, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 3, 4, 1, 5,
	3, 4, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 5, 6,
	4, 6, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 1, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 2, 1, 0, 2, 5, 7, 2, 1,
	2, 4, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 4, 1, 2, 1, 4,
	1, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	2, 5, 1, 4, 2, 5, 1, 4, 3, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 3, 3, 3, 3,
	4, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 1, 5, 5, 3, 1, 1, 1, 2,
	2, 2, 4, 3, 5, 6, 8, 6, 5, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 3, 3, 3, 0, 1, 4, 2, 2, 2,
	2, 2, 3, 2, 2, 3, 0, 4, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 1, 2, 3,
	2, 3, 2, 3, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	1, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 1, 2, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 3, 1, 1,
	1, 1, 5, 3, 1, 1, 3, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 7, 1,
	7, 5, 3, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 463, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -141, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -142, -143, -144, 84, 70,
	125, 106, 111, 158, 291, 320, 330, 314, -107, -108,
	349, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -459, 86, -428,
	-71, -74, -76, -463, 116, 131, 175, 283, -92, -93,
	316, 318, 132, -45, -44, 126, -152, -154, -105, -106,
	-145, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, 353, 400, 42,
	363, 71, 119, 324, 21, -5, -6, -7, -8, -9,
	-11, -12, -25, -53, -55, -56, -58, -59, -67, -61,
	-62, -427, -72, -73, -75, -77, -78, 315, -155, -153,
	460, 413, -14, -19, -20, -15, -16, -18, -21, -17,
	-26, -31, -32, -28, -29, -27, -30, -33, -34, -35,
	-36, -23, -24, -13, -22, 431, 439, -158, -156, -157,
	-162, 337, 421, 377, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, -205, -210, -211, -212, -204, -180,
	-399, -402, 4, -397, -400, 137, 182, 250, 21, 22,
	23, 24, 25, 27, 38, 40, 39, 41, 42, 45,
	47, 48, 51, 52, 53, 54, 55, 56, 59, 64,
	69, 70, 71, 72, 73, 74, 79, 76, 77, 78,
	81, 83, 84, 85, 88, 89, 97, 98, 99, 100,
	101, 102, 106, 109, 108, 111, 114, 115, 116, 118,
	120, 121, 123, 125, 126, 129, 127, 383, 128, 130,
	131, 132, 133, 143, 144, 145, 147, 148, 150, 152,
	156, 157, 159, 163, 165, 166, 167, 168, 174, 175,
	177, 178, 183, 179, 184, 188, 191, 190, 192, 193,
	194, 185, 199, 203, 204, 205, 207, 208, 211, 212,
	213, 214, 217, 216, 219, 222, 223, 226, 227, 230,
	231, 232, 234, 235, 238, 236, 239, 237, 240, 243,
	241, 242, 245, 246, 248, 247, 252, 172, 256, 257,
	259, 260, 261, 277, 264, 265, 266, 269, 270, 273,
	276, 278, 279, 280, 281, 282, 283, 284, 286, 287,
	289, 291, 293, 295, 296, 297, 298, 299, 300, 302,
	303, 305, 306, 307, 308, 309, 314, 311, 312, 313,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 327,
	329, 350, 351, 365, 330, 331, 332, 333, 334, 335,
	336, 340, 344, 341, 342, 343, 338, 339, 345, 346,
	347, 349, 352, 353, 355, 356, 358, 359, 361, 362,
	363, 364, 366, 369, 370, 371, 367, 368, 376, 374,
	375, 378, 379, 380, 381, 382, 384, 386, 394, 395,
	397, 400, 401, 402, 392, 404, 405, 408, 409, 410,
	411, 412, 417, 413, 415, 418, 419, 420, 426, 425,
	432, 433, 435, 436, 437, 33, 43, 44, 46, 49,
	60, 61, 62, 65, 103, 104, 124, 134, 135, 146,
	160, 162, 169, 170, 171, 189, 195, 197, 201, 220,
	254, 255, 271, 275, 288, 290, 301, 326, 357, 372,
	387, 388, 389, 390, 396, 398, 421, 422, 423, 427,
	434, 262, -198, 2, -180, -180, 291, 26, 2, 26,
	287, 339, 379, 381, 2, -451, -250, 2, 26, -184,
	-180, 86, 158, 337, -198, 2, -451, -250, 24, 2,
	-180, 2, -185, 2, 330, -180, 463, 81, 227, 64,
	326, 346, -110, 395, -109, 387, 332, -111, -389, 2,
	243, -180, 463, 463, 463, 463, 2, 377, 280, 425,
	338, 414, 99, 298, 182, -446, 2, 4, -400, -397,
	-214, -213, 377, 99, -212, -204, 453, -211, 463, 463,
	463, 2, 204, 205, 297, 296, 346, 347, 463, 463,
	463, 2, 25, 58, 80, 83, 105, 133, 153, 156,
	267, -460, 235, 277, 295, 332, 345, 376, 384, 397,
	-464, 364, 59, 414, -471, 402, 114, -296, 99, 381,
	379, 227, 157, 409, 322, 161, 407, 109, 188, 412,
	411, 463, 463, 25, 58, 67, 83, 114, 133, 153,
	156, -462, 277, 295, 329, 332, 345, 376, 384, 402,
	397, 2, 425, 338, 377, 182, 99, 414, 322, 294,
	-81, 2, 460, 29, 28, 349, -151, 377, 198, 2,
	-180, 204, 205, 2, 463, 463, -446, 2, 204, 205,
	2, 198, 2, 59, 334, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 2, -139, 346, 364, 167, 41, 64, 26,
	69, 281, 100, 159, 182, 183, 212, 80, 81, -297,
	40, 205, 204, -347, 378, 333, 339, 374, 395, 86,
	415, 323, 437, 299, 127, 4, 99, 243, 348, 387,
	227, 73, -470, 2, 377, -474, 2, 395, 395, 2,
	-474, 2, -474, 2, -183, 2, 395, 391, -475, 395,
	434, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, -153, -155, -154, 463, 463, 463,
	463, 463, -139, 346, 2, 64, 26, -159, -160, 151,
	-244, -245, 406, 196, 122, 268, -152, -154, 2, -427,
	-387, 2, -322, -403, -324, 451, 452, 444, 249, 438,
	-335, 105, 407, 262, -402, -325, -337, 124, 326, -265,
	8, 9, 5, 6, 7, -187, -367, -331, -375, 399,
	136, 253, -217, 464, 10, 460, -424, -154, -336, 34,
	162, 57, -391, -216, -369, -377, -373, -374, -478, 47,
	53, 52, 384, 242, 340, 341, 358, 342, 343, 45,
	417, 179, 259, 261, 190, 4, 197, -215, -204, -421,
	-422, -397, -398, 189, 195, 191, 357, 192, 193, 194,
	44, 301, 147, 148, 146, 115, 104, 103, 255, 49,
	48, 46, 422, -378, 101, 387, 388, 389, 390, 207,
	208, -180, -399, 67, 91, 92, 90, 95, 94, 96,
	93, 348, 414, 58, 33, 169, 170, 201, 254, 171,
	65, -423, 368, 87, 155, 187, 173, 200, 202, 206,
	221, 224, 244, 251, 272, 274, 321, 354, -479, 423,
	134, 135, 275, 288, 372, 396, 398, 160, 220, 60,
	61, -429, 302, -430, -198, -429, 463, 463, 465, 463,
	-238, -239, -240, 2, 26, 112, 460, 2, -351, 2,
	458, -355, -154, 215, -354, 460, -352, -205, 263, -425,
	327, -421, -422, -187, -204, -216, 4, -241, 460, 462,
	99, 377, 68, -291, 460, -180, 26, 262, 391, 465,
	-333, 460, 262, 154, 265, -180, 2, 2, 350, 2,
	460, -110, 62, 395, 39, 346, -310, 2, -311, -177,
	-178, -179, -360, 203, 293, 300, 440, 437, -387, -456,
	154, 443, 391, -387, -266, 462, 2, -355, 169, -205,
	2, -202, -390, 4, -397, -400, -398, -401, 67, -399,
	26, 28, 29, 30, 32, 34, 35, 36, 37, 50,
	57, 58, 63, 66, 68, 80, 86, 90, 91, 93,
	92, 94, 95, 96, 105, 107, 110, 112, 113, 117,
	119, 122, 136, 138, 151, 153, 154, 158, 161, 164,
	176, 186, 196, 198, 215, 218, 225, 228, 229, 249,
	253, 258, 262, 263, 267, 268, 285, 292, 304, 319,
	337, 348, 360, 373, 377, 385, 391, 393, 399, 406,
	407, 414, 416, 424, 428, 429, 430, 431, -402, 2,
	-355, 169, 2, -207, 169, -355, -210, 2, -395, 169,
	-393, 10, -392, 5, 4, -397, -400, -398, 2, -189,
	-180, 2, -201, -390, 2, -220, 169, -205, -206, -210,
	391, 465, -256, -213, -214, -249, -180, 462, -322, 2,
	-99, 2, -322, 169, 2, -99, 169, 2, -322, 169,
	2, -99, 169, 2, 2, 2, 397, 2, 83, 169,
	-180, 377, 98, 2, 313, -461, 329, 401, 425, 2,
	2, 2, 2, 2, 2, 2, 377, 338, -472, 302,
	-194, 2, -180, 151, -395, 169, 2, -395, 169, 2,
	-208, -210, -208, 182, 199, -189, 169, 2, 381, 379,
	381, 379, 154, 2, 198, 2, 198, 2, -356, 2,
	-357, -205, 2, 2, 2, 2, 2, 169, -180, 377,
	98, 2, 214, 2, 2, 2, 2, 2, 2, 2,
	2, 2, -258, 169, 2, -205, -258, 169, 2, -258,
	169, 2, -221, 169, 2, -220, -189, 169, 2, -396,
	169, 2, -395, -396, 169, 2, -364, 2, -363, -392,
	421, -81, 460, -81, 460, 346, 460, -395, -205, -205,
	-322, -99, 154, -322, -99, -151, 151, 2, 99, 377,
	-139, 2, 151, 416, 2, 8, 2, -395, 333, 299,
	143, 2, 350, 2, 64, -297, 437, 154, 2, 154,
	2, -281, 2, 431, -449, 2, 262, 154, 2, 154,
	2, 154, 2, 154, 2, 154, 2, 296, 347, 205,
	2, -99, 428, -322, 428, 2, 394, 213, 128, 154,
	-281, 2, 154, 2, 154, 2, 5, 2, 203, 293,
	365, 2, -205, -465, 2, 377, 425, 338, 2, 2,
	76, 77, 154, 2, 154, 437, 2, -274, -355, -309,
	-310, -309, 391, -185, -159, -244, -245, -139, 350, 2,
	-259, 256, 411, 246, 352, 211, -159, -273, -299, -300,
	225, 138, 258, -280, 26, 112, -280, -280, 51, 461,
	461, 11, 12, 66, 38, 451, 452, 453, 454, 149,
	455, 456, 449, 450, 448, 441, 442, 446, 209, 210,
	82, 445, 443, 75, 233, 328, 139, 140, 141, 142,
	310, 180, 31, 181, 14, 15, 16, 30, 267, 224,
	438, 173, 354, 444, 17, 18, 19, 200, 202, 251,
	43, 176, -186, -222, -322, -322, -322, -322, -322, 274,
	460, -271, -317, 458, -154, 460, 460, 460, 5, 460,
	5, -386, 8, -154, -322, -335, 461, -263, 460, -154,
	-335, -330, 460, 326, 458, 460, -338, -322, 462, -431,
	432, -371, 460, 290, -370, 460, -370, -370, 426, -368,
	460, 439, 433, 460, -368, 460, 460, 151, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 426, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 465, -429, -241, 460, -267, -358, -322, 453, -267,
	-267, 262, -260, -322, 87, -284, 206, 244, 155, 221,
	321, 187, -386, -82, -68, -79, -87, -99, -112, -143,
	-144, -319, 464, -346, 439, -154, -352, -204, -154, -354,
	460, -351, -346, 453, -205, 460, 154, 460, 462, 154,
	-249, -390, -189, -205, -215, -216, 111, -260, -446, -249,
	-184, 35, -332, -365, -366, -367, -376, -372, -375, -379,
	47, 53, 52, 384, 242, 340, 341, 358, 342, 343,
	45, 417, 179, 259, 261, 190, 4, 46, 422, -378,
	197, 306, 307, 305, 309, 308, 189, 195, 191, 357,
	192, 193, 194, 44, 301, 147, 148, 146, 115, 104,
	103, 255, 49, 48, 101, 387, 388, 389, 390, 207,
	208, 423, 368, 60, 61, -446, -249, 151, -389, -260,
	35, -310, 2, 105, -393, 39, -476, 465, 223, -224,
	232, 248, 166, 263, 435, 256, -394, 5, 4, -331,
	-343, 105, 227, -375, 9, 452, -383, 8, 451, -388,
	-387, 89, 462, -390, -166, 311, -165, 23, 27, 116,
	419, 129, -231, 184, 280, 124, 361, 410, -453, -454,
	331, 382, 383, 78, 256, 311, 124, -277, -279, 35,
	97, 246, 276, 54, 177, 237, 238, 363, 427, 124,
	311, 431, 124, -454, 311, -454, -168, 361, 410, -453,
	-454, 331, 311, -167, -231, 124, 464, -96, -395, 460,
	-256, 465, 465, -390, 453, 124, 124, 124, 124, 2,
	2, 249, 2, 2, 2, 156, -464, -462, 2, 2,
	2, -205, 169, -207, 169, 2, -210, 425, -243, 262,
	-448, -257, 377, -205, -176, -426, 431, 249, 249, 35,
	460, 2, -191, 169, 2, -181, -180, 182, -426, 249,
	-356, -218, -205, -218, 349, -198, 35, -319, 124, 2,
	2, 2, -180, -169, 465, 56, 317, 124, -169, 124,
	-169, 124, -169, 465, 124, -169, 124, 465, 124, 124,
	461, 465, -364, -364, -395, -149, 431, 154, 86, 460,
	460, -151, -97, -96, -395, -448, -189, 2, -205, 2,
	377, 207, -395, -395, -395, -389, 26, 351, 2, 296,
	347, 77, -205, 377, 99, 182, 70, -450, 151, -447,
	322, -446, -205, 99, -205, 99, -205, 99, -205, -205,
	2, 2, 2, 2, 74, 74, 151, 2, 394, 2,
	394, 2, -180, -180, -180, 223, -205, 151, 377, 182,
	99, 377, -169, 465, -185, -159, -273, -389, -161, 356,
	252, -258, 211, 352, -159, -300, -299, 26, -322, -304,
	145, 245, -322, -324, -153, -153, -153, -246, -348, -322,
	292, 182, -380, -365, -365, -203, -390, 387, -322, -322,
	-322, -322, -322, -322, -322, -322, -322, -322, -322, -322,
	-322, -322, -322, -322, -322, -322, -322, -322, -322, -322,
	-322, -322, -322, -322, -322, -322, -322, -322, -322, -322,
	-322, -322, -322, 224, 173, 354, 43, 176, -322, 391,
	-322, -322, -322, -322, 241, 249, 253, 399, 136, 408,
	112, 256, -480, 373, 37, -328, -154, -264, 460, -342,
	32, 360, 26, -335, 460, 2, -317, -322, -318, -261,
	-260, -260, 461, 424, 26, 112, 453, 2, 8, -292,
	-294, 436, 240, 102, 168, 239, -293, 336, 461, 465,
	35, 461, -322, -261, -334, -330, -260, -341, -340, 428,
	-390, 453, -432, 144, 161, 8, -384, 8, -384, 387,
	387, 8, -384, -384, 460, 461, 2, 461, 2, 461,
	2, 461, 2, 461, 2, -322, -322, -322, -322, -322,
	-322, -322, -260, -286, 2, -381, -260, 4, 436, 240,
	102, 168, 239, 336, -286, 2, -287, 2, -322, -260,
	-288, -323, -324, 451, 452, 444, -335, -289, 2, -322,
	-261, -322, 50, 218, 393, -290, -322, 154, -260, -260,
	2, -260, 2, -430, 35, -260, -252, 465, 154, 35,
	4, -252, -252, 460, 461, 465, -285, 165, 236, 231,
	-285, -351, -284, 206, -282, 272, -282, -282, -444, 460,
	459, 463, 463, 463, 463, 463, -346, -190, 458, 466,
	-390, -345, -344, 35, -198, 269, -346, -346, 462, 461,
	-345, -205, 460, -260, -390, 366, 461, 462, 200, 200,
	200, 327, 461, 391, 431, -81, 264, 461, 465, -251,
	34, 458, -294, 460, -382, 426, 460, 460, 154, -250,
	-456, 461, 395, -311, -223, 300, 359, 312, 344, 375,
	9, 8, 8, 465, -390, 465, -457, 80, 391, 68,
	-313, 169, 68, -404, -192, 80, -405, -180, 63, 407,
	292, 153, -457, 80, -457, 80, 80, 349, 364, 51,
	-355, 38, 38, 26, -99, 219, 154, 437, 377, 182,
	391, -355, -279, -365, 97, 237, 238, 51, -385, -383,
	452, -385, 51, -385, -385, -385, 431, -207, -355, 391,
	282, -395, 391, 465, 38, 38, 26, -99, 219, 154,
	391, -220, -190, -361, -360, -396, -213, -180, 462, -322,
	-99, -322, -99, 124, 2, -472, 214, 460, -227, 249,
	-278, -277, 249, -209, 2, -205, 154, -249, -362, 198,
	465, -257, 282, 124, 124, 460, 120, 298, 2, 262,
	249, -191, 169, -172, 380, 124, -276, 416, -305, -99,
	460, 105, 35, -305, -268, -269, -359, -270, -192, 460,
	-198, -180, 2, -205, -258, -258, -258, -220, -221, -189,
	-395, -396, -396, -81, -363, 461, 461, 461, -148, 266,
	-147, -180, 5, -151, 416, -226, -314, -313, -408, -409,
	-404, 224, 182, 407, 199, 137, -242, -193, -192, 98,
	-149, -360, 465, -149, -149, -361, -361, -205, 151, 2,
	2, -281, -205, -189, -220, -205, -249, -249, -189, -189,
	-189, -99, -322, 346, 151, 151, 462, -281, 298, 99,
	377, 280, 182, -205, -220, -189, -205, -355, -159, 230,
	411, -302, -383, 460, -303, 326, 327, 465, -164, 36,
	110, 211, -205, 437, 121, -322, -322, 391, -480, 373,
	-328, 121, -322, 241, 253, 399, 136, 408, 112, 256,
	154, 460, -323, -323, 461, -262, -322, -322, 459, 468,
	461, -245, 465, -244, -322, -260, -260, 461, 461, 391,
	391, 391, 391, 460, 462, -260, -249, 459, 459, 465,
	461, -339, -340, 117, -322, 462, -437, 273, 460, 460,
	461, 461, 465, 461, 437, 437, 461, 461, 461, -322,
	35, 465, 465, 465, 461, 465, 465, 465, 461, 461,
	154, 461, 461, -295, 285, 461, 11, 12, 451, 452,
	453, 454, 149, 455, 456, 449, 450, 448, 441, 442,
	443, 75, 233, 328, 14, 15, 16, 200, 176, -323,
	-323, -323, 461, -326, -327, 154, 151, 35, -290, -290,
	-290, 461, 154, -260, 461, 461, 460, 461, -316, -315,
	429, -358, -253, 2, -351, -200, -390, -316, -316, -260,
	-322, 206, 206, -283, 416, 262, -285, -351, -344, 461,
	-445, -386, -346, -345, -386, -321, -320, 152, 36, 110,
	247, 172, -198, -241, -345, -345, -390, -346, 461, -254,
	-353, -425, -245, 462, -390, -140, 5, 253, -140, -140,
	-249, 24, 286, -365, 458, 459, 8, 8, 460, -384,
	-384, -249, 154, -387, -310, 405, 72, 300, 387, -387,
	-165, 311, -192, -192, -205, 249, -313, 169, -171, 249,
	-365, -199, -180, 460, 460, 211, 211, -192, -199, 169,
	-192, 169, -199, -199, -452, 300, 257, -322, 226, 298,
	250, -166, 311, -99, -99, -99, 460, -456, 416, 111,
	-205, -220, -205, -209, 311, -215, -385, -385, -277, 311,
	-207, -395, 431, -189, -167, -99, -99, -99, 460, -190,
	-168, 311, -146, 178, 461, 453, -180, 425, -180, -225,
	-228, -226, -192, -466, 433, 431, 124, 124, -241, -219,
	-205, 458, -149, -395, -205, -395, -395, -395, 2, 460,
	2, -205, 124, 262, 249, -173, 118, -477, 443, -189,
	-316, -253, -275, -308, 319, 262, -242, 421, -198, -275,
	-255, 465, 154, 443, 462, -242, 2, -169, -169, -169,
	-169, -169, -81, -81, -149, 465, 460, 443, 443, 460,
	-395, -395, 461, 465, -205, -191, 182, 182, -197, -181,
	461, 465, 462, 460, -149, -96, 154, -46, 431, 377,
	464, 346, 346, -180, -201, -189, -205, -202, -220, -303,
	-322, -348, -205, 464, -322, -322, 121, 121, -322, -323,
	-323, -322, 121, 154, 460, -322, -332, 30, 30, 461,
	465, -318, -322, 461, 424, -245, -245, 461, 5, 240,
	168, 239, -293, 239, -293, -293, 8, 453, -390, 461,
	-330, 119, -322, 385, -390, 453, -438, -195, 460, -180,
	429, -244, -384, -368, -368, 461, -380, -365, -322, -322,
	-322, -322, -322, -322, -326, -322, -380, -365, -323, -323,
	-323, -323, -323, -323, -323, -323, -323, -323, -323, -323,
	-323, -323, -323, -323, -323, -323, -323, 112, 249, 256,
	-323, -327, -326, -322, -322, -365, 461, 461, 461, -260,
	-81, -272, 161, -322, -361, 465, -272, -272, 461, -351,
	-351, 460, -322, 206, 459, 461, 465, -345, 459, 465,
	467, 443, -241, 462, -344, 461, 465, -307, 35, 461,
	-390, 265, 5, 8, 458, 459, 461, -384, 461, 461,
	-249, -322, 391, 391, 124, 249, 418, -410, -405, -322,
	-247, -349, -322, 460, 460, -163, 116, 349, -458, 2,
	124, -169, 124, -169, 435, 460, 460, 391, 431, -260,
	-322, -150, 105, -389, -454, 464, -454, 464, 391, 391,
	282, 431, -260, 391, -149, 154, 2, 2, 2, 461,
	461, 465, -411, 35, 260, -180, -205, -207, 35, -64,
	431, -360, -386, -176, 2, -298, 416, -190, -205, 124,
	-174, 217, -477, -393, -426, -245, -275, -267, 250, 79,
	461, -316, -269, -253, -322, 2, 461, -147, -148, -395,
	-395, -395, -149, -151, -151, -314, 2, 460, -191, -181,
	460, -151, -193, 2, -396, -99, 266, -205, 453, -281,
	-233, -232, 280, 256, -233, 263, 461, -164, -190, -322,
	-322, 121, 30, 30, -322, -322, -332, 461, -322, -322,
	-260, 459, 5, -322, 461, 461, 461, -322, 462, -439,
	-180, -322, 461, 461, 461, 461, 465, 465, 461, 461,
	461, 461, -327, 154, 112, 256, 460, 461, 461, -329,
	164, 51, -351, -329, -329, -283, -249, -351, -319, -386,
	-320, -190, 458, -390, -353, 460, 462, 459, 2, 458,
	461, -192, -192, -313, 124, -412, 80, -414, 66, 137,
	86, 249, 253, 407, 292, 63, 105, 304, 35, 461,
	461, 465, -164, -247, -249, 249, 370, 105, 249, 105,
	98, 402, -192, -199, -249, -249, -205, 130, 461, 465,
	443, 2, 453, 453, -209, -207, -395, 130, 461, -190,
	-396, -229, 185, -192, -409, -406, -407, 292, -413, -415,
	137, 292, -99, 2, 460, -227, -278, -99, 266, 459,
	460, -180, 262, 460, -190, -175, 216, -477, -393, -172,
	-301, -299, -306, 460, 262, -99, -245, 443, 461, 461,
	98, 98, -247, 460, 460, -249, 98, 461, -47, -48,
	182, 80, 284, -202, 377, 182, -164, -322, -322, -322,
	461, -245, -390, 453, -433, 280, 461, -322, -322, -323,
	154, 460, -332, -434, 430, -322, -260, -434, -434, 461,
	-346, -386, 2, 458, 2, -313, -199, -203, -196, -180,
	137, 169, 253, 211, 460, -323, -205, 460, 2, -468,
	107, 186, -312, -469, 85, 371, -349, 461, 461, 253,
	253, -322, -365, -169, -169, 461, 461, -322, 391, -389,
	84, -387, 2, -454, -322, 391, -230, -231, 176, -411,
	211, -196, 211, -467, 431, -225, -466, -65, -66, 392,
	-360, -247, -205, -247, 262, -477, -393, -173, -275, 113,
	-249, 80, -301, -328, -149, 460, 460, 461, -247, -247,
	461, 460, -149, 465, 26, 460, 26, 460, -205, -220,
	461, -245, 51, 461, 461, -323, -332, 461, -435, -436,
	-195, -345, 459, 2, -414, -196, 249, -322, -182, 460,
	-322, 186, 108, 174, -229, 460, 304, -188, 66, 460,
	460, 460, 443, 154, 460, -466, 278, 460, 98, 246,
	461, 35, -66, 9, 461, -298, 461, -205, -393, -174,
	411, 250, 461, -199, -275, -396, -396, -312, 461, 461,
	-396, -48, -249, -249, -440, 298, 327, 163, -260, 461,
	465, 35, 124, 461, -416, 234, -180, 461, 108, 174,
	-230, -249, -205, -455, 416, -203, -235, -234, -232, -237,
	-236, -232, -260, -387, 84, 278, -260, -205, -248, -350,
	-192, 98, -229, -99, -312, 460, -312, 460, -175, 349,
	-315, 461, 461, -229, -312, 461, 461, 461, 461, -441,
	-442, 43, 404, 89, -322, -441, -441, -436, -438, 137,
	-417, -420, -419, 262, 355, 155, 279, 461, 370, 427,
	-468, 461, -241, -322, 461, 465, 421, 461, 465, 421,
	461, 154, 461, 460, 461, 465, -230, -467, -229, -247,
	-229, -247, -268, -149, -149, -230, -229, -149, -443, 123,
	-442, 289, 150, 326, 289, 150, -443, -443, -196, -419,
	262, -420, 262, 411, 109, -416, -234, 176, -236, 154,
	278, -249, -350, -466, -230, 461, -230, 461, -316, -230,
	89, 161, 386, 246, 30, -418, 246, 317, 56, 349,
	-418, -417, 460, 460, 461, -473, 429, -312, -473, -312,
	326, 270, -442, 22, 253, 105, -468, -260, -260, -170,
	56, 317, 2, -229, -229, 461, 461, -230, -230, -230,
	391, -473, -473, 460, -260, 461, -230,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 368, 369, 371,
	372, 373, 375, 376, 378, 380, 382, 384, 385, 387,
	389, 391, 392, 393, 394, 395, 397, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 457, 459,
	0, 925, 927, 929, 931, 25, 26, 0, 0, 190,
	192, 194, 0, 218, 220, 222, 223, 225, -2, 0,
	320, 321, 323, 325, -2, -2, 0, 0, 446, 448,
	0, 0, 0, 468, 469, 0, 1015, -2, 462, 464,
	466, 531, 533, 535, 537, 539, 541, 543, 544, 546,
	548, 550, 552, 554, 556, 558, 560, 562, 564, 566,
	568, 570, 572, 574, 576, 578, 580, -2, -2, -2,
	0, -2, -2, -2, 943, 29, 31, 33, 35, 37,
	39, 41, 61, 274, 275, 277, 279, 281, 284, 285,
	287, 1063, 327, 329, 331, 333, 335, 0, -2, 1075,
	0, 0, 43, 44, 45, 46, 47, 48, 49, 50,
	68, 69, 70, 71, 72, 73, 74, 75, 54, 56,
	57, 63, 64, 66, 52, 0, 0, 1039, 1041, 1043,
	1045, -2, 0, 0, 7, 9, 11, 13, 15, 17,
	19, 21, 370, 374, 377, 379, 381, 383, 386, 388,
	390, 396, 398, 400, 820, 1671, 1685, 1686, 1687, 1690,
	1691, 1692, 1693, 1694, 1695, 2034, 2114, 2115, 1714, 1715,
	1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735,
	1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755,
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
	1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
	1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,
	1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
	1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
	1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
	2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
	2016, 0, 424, 422, 1665, 425, 1867, 427, 429, 314,
	315, 316, 317, 318, 319, 0, 439, 433, 438, 440,
	442, 443, 444, 445, 419, 417, 0, 439, 1717, 437,
	923, 924, 918, 919, 1900, 953, 458, -2, -2, -2,
	2003, -2, 490, -2, 497, 2006, 1902, 502, 0, 504,
	-2, 507, 926, 928, 930, 27, 28, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, -2, -2, -2,
	-2, 0, 0, 1754, 1641, 1687, 1644, 1639, 191, 193,
	195, 196, 0, 0, 0, 0, 0, 0, 219, 221,
	224, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	728, 0, 0, 733, 871, 872, 893, 0, 0, 0,
	0, 322, 324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 0, 0, 0, 0, 0, 252,
	360, 361, 0, 1064, 1064, 0, 0, 0, 0, 171,
	162, 0, 0, 716, 447, 449, 0, 157, 0, 0,
	922, 0, 173, 0, 0, 463, 465, 467, 532, 534,
	536, 538, 540, 542, 545, 547, 549, 551, 553, 555,
	557, 559, 561, 563, 565, 567, 569, 571, 573, 575,
	577, 579, 581, 582, 0, 0, 0, 0, -2, -2,
	0, 0, -2, -2, 0, 0, 0, 0, 0, 0,
	0, -2, 0, 0, -2, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 0, 585, 587, 588, 589, 0,
	637, 654, 0, 862, 1065, 955, 933, 946, 955, 935,
	936, 937, 938, 939, 944, 945, 948, 0, 940, 941,
	942, 30, 32, 34, 36, 38, 40, 42, 276, 278,
	280, 282, 286, 288, -2, 1037, 1038, 328, 330, 332,
	334, 336, 450, 0, 452, 0, 586, 1019, 1027, 0,
	-2, 0, 1069, 1069, 1069, 0, 0, 1038, 1036, 0,
	455, 456, 511, 512, 1299, 0, 0, 0, 0, 0,
	1539, 1383, 0, 513, -2, 1414, 1416, 1982, 2003, 1538,
	1418, 1419, 1420, 1421, 1422, 0, 0, 1425, 0, 1427,
	1428, 1429, 1430, 0, 1432, 0, 1436, 1437, 1438, 0,
	1987, 1618, 1683, -2, 1204, 1205, 1206, 1207, 1208, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1679, 0, 1505,
	1452, -2, 1704, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1763, -2, -2, -2, -2,
	-2, -2, -2, 1260, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 2017, 1456, 1457, 1458, 1459, 1460, 1461,
	1462, 1463, 1464, 0, 1971, 1988, 1989, 1994, 1996, 1990,
	1979, 1475, -2, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 1261, -2,
	1983, 1984, 1999, 2000, 2005, 2010, 2011, 1986, 1995, -2,
	-2, 1055, 1875, 1058, 820, 1056, 1040, 1042, 0, 1044,
	0, 0, 0, 1049, 1072, 1070, 0, 1105, 1053, 1054,
	1064, 1123, 1146, 0, 1128, 0, 1146, 1172, 0, 1133,
	1895, 1453, 1454, 0, 1687, 1684, -2, 0, 0, 0,
	0, 0, 0, 420, 0, 426, 428, 0, 0, 0,
	0, 0, 0, 0, 0, 952, 460, 461, 0, 485,
	0, 489, 1978, -2, 1722, 1915, -2, 493, 956, 960,
	961, 962, 963, 0, 0, 0, 0, 0, 499, 0,
	0, 486, 487, 505, 508, 0, 51, 0, 1988, 1172,
	53, 0, 1655, 1709, 1710, 1711, 1712, 1713, 2017, 2033,
	2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
	2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054,
	2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
	2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
	2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084,
	2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
	2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104,
	2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 55,
	0, 1988, 58, 0, 1988, 0, -2, 62, 0, 1988,
	174, 175, 1700, 1701, 1705, 1706, 1707, 1708, 65, 0,
	1661, 67, 0, 1658, 76, 0, 1988, 0, 1638, -2,
	0, 0, 708, 1635, 1640, 709, 1645, 0, 197, 198,
	199, 200, 201, 1988, 203, 204, 0, 206, 207, 1988,
	209, 210, 0, 212, 227, 228, 0, 230, 0, 1988,
	0, 0, 0, 236, -2, 253, 0, 250, 0, 240,
	241, 243, 244, 245, 246, 247, 0, 0, 0, 877,
	292, 290, 1666, 0, -2, 1988, 865, 868, 1988, 870,
	882, 1669, 0, -2, 0, 1062, 1988, 970, 729, 730,
	731, 732, 0, 311, 0, 983, 0, 985, 0, 1005,
	1178, 1123, 254, 255, 256, 257, 258, 1988, 0, 0,
	0, 263, 0, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 150, 1988, 339, 358, 150, 1988, 342, 150,
	1988, 345, 150, 1988, 348, 1633, 150, 1988, 351, 352,
	1988, 354, 176, 355, 1988, 357, 0, -2, 413, 1673,
	-2, 363, 0, 364, 0, -2, 0, 188, 0, 0,
	714, 715, 0, 920, 921, 0, 0, 470, 0, 0,
	583, 584, 0, 0, 594, 595, 596, 597, 1903, 1873,
	1779, 601, 0, 604, -2, 0, 0, 0, 608, 0,
	613, 614, 615, 0, 713, 617, 0, 0, 619, 0,
	623, 0, 626, 0, 628, 0, 630, -2, -2, -2,
	641, -2, 0, 645, 0, 647, 0, 0, 0, 0,
	662, 663, 0, 668, 0, 671, 672, 673, 0, 675,
	676, 677, 678, 0, 680, 681, -2, -2, 685, 687,
	0, 694, 0, 699, 0, 590, 591, 150, 1176, 932,
	-2, 934, 0, 950, 1022, -2, 0, 451, 0, 454,
	1033, 0, 1029, 0, 1031, 0, 1020, 1025, 1084, 1085,
	0, 0, 0, 0, 1067, 1068, 0, 0, 0, 1017,
	1018, 0, 0, 0, 0, 1544, 1545, 1546, 1547, 1548,
	1549, 1552, 1553, 1550, 1551, 1554, 1555, 0, 0, 0,
	0, 0, 1556, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1557, 1558, 1559, 0, 0, 1561,
	0, 1563, 0, 0, 0, 0, 0, 0, 1362, 1364,
	1626, 0, 0, 1560, 1304, 1305, 1306, 1341, 1342, 0,
	0, 1415, 1623, 1622, 1417, 0, 1575, 0, 1424, 0,
	1296, 1431, 1652, -2, 0, 1539, 1570, 0, 0, 1439,
	1440, 1441, 0, 0, 1575, 0, 0, 1617, 0, 1507,
	0, 1240, 0, 1241, 1242, 0, 1243, 1244, 1257, 1270,
	0, 0, 0, 0, 1274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1262, 0, 0, 0, 1598, -2, 0, 0, 0,
	0, 0, 1057, 0, 0, 1109, 1627, 1631, 1632, 1109,
	1109, 0, 0, 1576, 1169, 1169, 0, 0, 1165, 1165,
	1165, 1163, 1140, 0, 401, 403, 405, 407, 408, 409,
	411, 1146, 0, 1156, 0, 1146, 1146, 0, -2, 1128,
	0, 0, 1156, 1173, 1174, 0, 0, 0, 0, 0,
	0, 1688, 0, 0, 0, 1675, 0, 0, 0, 431,
	441, 1064, 0, 1578, 1194, 1197, 1198, 1199, 1200, 1203,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, -2, 1258, 1260,
	1281, 1247, 1248, 1249, 1250, 1251, 1229, 1230, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1253, 0, 1228,
	1228, 1228, 1245, 1246, 1269, 1280, 1272, 1280, 1276, 1195,
	1196, 1263, 1264, 1265, 1266, 0, 435, 0, 0, 0,
	0, -2, 495, 500, 501, 0, 0, 958, 0, 964,
	522, 523, 524, 966, 967, 0, 498, 525, 526, 527,
	528, 529, 530, 0, 837, 0, 839, 1647, 0, 496,
	515, 503, 0, 509, 77, 915, 116, 0, 915, 915,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 101,
	112, 89, 90, 0, 0, 0, 0, 59, 845, 0,
	848, 0, 0, 0, 0, 0, 0, 0, 860, 0,
	0, 0, 0, 100, 0, 95, 79, 0, 0, 0,
	102, 114, 0, 141, 143, 0, 0, 1159, 158, 0,
	707, 0, 0, 1688, 1643, 0, 0, 0, 0, 229,
	231, 0, 233, 234, 235, 0, 876, 0, 242, 239,
	283, 794, 1988, 844, 1988, 842, 1670, 0, 0, 0,
	309, 304, 0, 306, 863, 0, 1061, 0, 0, 0,
	0, 883, 0, 1988, 888, 1657, 1696, 1697, 972, 0,
	313, 0, 986, 0, 0, 1179, 0, 1181, 0, 260,
	261, 262, 0, 337, 0, 148, 149, 0, 340, 0,
	343, 0, 346, 0, 0, 349, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 164, 0, 0, 0, 0,
	0, 0, 188, 160, 188, 188, 1159, 472, 1159, 474,
	0, 0, 598, 599, 600, 602, 603, 605, 606, -2,
	-2, 695, 665, 0, 0, 0, 664, 616, 0, 701,
	1891, 711, 618, 1754, 621, 1754, 624, 1754, 627, 629,
	632, 657, 640, 644, 0, 0, 0, 649, 0, 651,
	0, 653, 665, 666, 669, 674, 679, 0, 0, 0,
	0, 0, 861, 0, 949, 1023, 1025, 453, 1026, 0,
	1035, 1028, 0, 1032, 1021, 1082, 1083, 1088, 1089, 1095,
	1098, 1099, 1091, 1299, 1050, 1051, 1052, 1076, 1077, 902,
	0, 2114, 1300, 1189, 1301, 1302, 1654, 0, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, -2, -2,
	-2, -2, -2, -2, -2, -2, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, -2, -2, -2,
	1339, 1340, -2, 1562, 1564, 0, 1626, 0, -2, 0,
	-2, -2, -2, -2, 1359, 0, 1361, 1366, 1368, 1370,
	0, 0, 0, 0, 1625, 1380, 1609, 1610, 0, 0,
	1541, 1542, 1543, 1365, 0, 1384, 1624, 1621, 0, 0,
	1574, 1075, 1443, 0, 0, 0, 0, 1450, 0, 1653,
	1295, 1282, 1283, 1284, 1285, 1286, 1287, 1297, 1435, 1572,
	0, 1571, 0, 0, 0, 1582, 0, 1616, 1612, 0,
	1676, 1682, 1515, 0, 0, 0, 0, 1650, 0, 0,
	0, 0, 0, 0, 0, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 0, 1585, -2, -2, -2,
	-2, -2, -2, -2, 0, 1489, 0, 1491, 1576, 1595,
	0, 0, 1385, 0, 0, 0, 1539, 0, 1494, 1576,
	1603, 0, 0, 0, 0, 0, 1576, 0, 1608, 0,
	1501, 0, 1503, 1059, 0, 0, 1184, 0, 0, 0,
	1630, 1184, 1184, 0, 1104, 0, 0, 1166, 1167, 1168,
	0, 0, 1169, 0, 1160, 1164, 1161, 1162, 0, 0,
	1146, 402, 404, 406, 410, 412, 1156, 1120, 0, 0,
	1656, 1126, 1155, 0, 820, 1145, 1156, 1156, 0, -2,
	1130, 0, 0, 1075, -2, 189, 819, 0, 0, 0,
	0, 421, 423, 0, 0, 415, 0, 418, 0, 1185,
	1188, 0, 1201, 0, 0, -2, 0, 0, 0, 0,
	0, 488, 0, 957, 965, 0, 519, 0, 521, 0,
	838, 1649, 1648, 0, 510, 0, 0, 0, 0, 914,
	120, 1988, 0, 152, 0, 0, 788, 1662, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 91, 0, 0, 0, 0, 0,
	0, 0, 846, 847, 849, 855, 857, 0, 851, 1651,
	0, 852, 0, 854, 856, 858, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 92, 0, 0,
	0, 0, 1637, 179, 1158, 0, 1636, 1646, 0, 202,
	205, 208, 211, 0, 237, 0, 0, 736, 719, 0,
	840, 843, 0, 820, 875, 1668, 0, 291, 188, 0,
	0, 305, 0, 0, 0, 0, 0, 0, 881, 0,
	0, 0, 1988, 974, 980, 0, 1184, 0, 1003, 988,
	0, 0, 0, 1003, 1007, 1008, 1010, 1011, 0, 0,
	1180, 0, 264, 359, 150, 150, 150, 1634, 150, 150,
	177, 353, 356, 362, 414, 1064, 1064, 188, 186, 1852,
	184, 181, 183, 0, 0, 0, 737, 739, 740, 741,
	742, 0, 1697, 0, 1808, 1697, 0, 991, 993, 0,
	155, 188, 0, 0, 303, 471, 476, 592, 0, 634,
	659, 607, 609, 610, 611, 0, 712, 710, 620, 622,
	625, 643, 646, 648, 0, 0, 0, 661, 0, 0,
	0, 0, 0, 696, 697, 698, 700, 1177, 1024, 1034,
	1030, 0, 1093, 0, 1092, 1096, 1097, 0, 1079, 900,
	901, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	1381, 0, -2, 1360, 1363, 1367, 1369, 1371, 0, 0,
	0, 0, 0, 0, 1565, 0, 1567, 1382, 1619, 1622,
	1537, 0, 0, 1074, 1075, 1075, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1573, 0, 1580, 1581, 0,
	1442, 0, 1613, 0, 0, 0, 1451, 0, 0, 0,
	1252, 1226, 0, 1280, 1278, 1279, 1273, 1280, 1277, 0,
	0, 0, 0, 0, 1470, 0, 0, 0, 1474, 1486,
	0, 1488, 1490, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1388,
	1389, 1390, 1493, 1601, 1602, 0, 0, 0, 0, 0,
	0, 1499, 0, 1607, 1500, 1502, 1064, 1106, 1101, 1183,
	0, 1628, 1159, 1108, 1110, 1629, 1659, 1101, 1101, 0,
	1577, 0, 0, 1150, 0, 0, 0, 1152, 0, 1141,
	0, 1143, 1156, 1125, 0, 0, 1118, 0, 1114, 1115,
	1116, 1117, 820, 1154, 1127, 1131, 1676, 0, 1175, 0,
	1135, 1138, 0, 0, 1689, 213, 216, 217, 214, 215,
	430, 0, 0, 1579, 0, 1190, 0, 0, 0, 0,
	0, 434, 0, 484, -2, 517, 518, 520, 0, 516,
	117, 915, 0, 0, 906, 0, 122, 1988, 131, 0,
	765, 0, 1660, 0, 0, 0, 0, 917, 0, 1988,
	150, 1988, 150, 133, 136, 0, 140, 138, 0, 0,
	756, 78, 915, 81, 85, 93, 0, 0, 0, 99,
	0, 0, 0, 908, 0, 850, 853, 859, 60, 0,
	910, 904, 0, 903, 142, 83, 87, 94, 0, 912,
	80, 0, 188, 0, 159, 1642, 0, 0, 0, 0,
	0, 735, 805, 0, 0, 0, 0, 0, 0, 297,
	293, 0, 302, 308, 307, 866, -2, 869, 878, 0,
	880, 892, 0, 0, 0, 976, 980, 0, 979, 1062,
	1075, 312, 981, 1003, 0, 0, 0, 990, 987, 984,
	1184, 0, 0, 0, 0, 0, 259, 338, 341, 344,
	347, 350, 365, 366, 163, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 1697, 1697, 0, 1664,
	0, 0, 0, 0, 156, 161, 0, 473, 0, 0,
	0, 650, 652, 665, 688, 689, 751, 0, 751, 0,
	0, 1078, 902, 0, 1303, 1344, 0, 0, -2, 0,
	0, 1348, 0, 0, 0, -2, 0, 0, 0, 1566,
	1568, 0, 1621, 1444, 0, 0, 0, 1448, 1426, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 0, 1433, 1434, 1540,
	1583, 1611, 1615, 0, 1677, 1681, 1513, 1514, 1518, 1667,
	0, 0, 0, 1271, 1275, 1455, 0, 0, 0, 0,
	0, 0, 0, 1584, 1594, 1596, 1386, 1387, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, -2, -2,
	-2, 1404, 1405, 1406, -2, -2, -2, 0, 0, 0,
	1597, 1599, 1600, 1604, 1605, 0, 1496, 1497, 1498, 1606,
	0, 1103, 0, 1182, 1107, 0, 1103, 1103, 1071, 1148,
	0, 0, 1171, 0, 1123, 1142, 0, 1132, 1121, 0,
	1122, 0, 1153, 0, 1129, 1134, 0, 1137, 0, 1444,
	-2, 432, 416, 0, 0, 1192, 1202, 0, 1255, 1259,
	436, 1157, 0, 0, 0, 0, 151, 763, 787, 0,
	0, 895, 902, 0, 0, 124, 0, 0, 0, 132,
	0, 129, 0, 135, 139, 0, 0, 0, 0, 0,
	96, 97, 98, 0, 103, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 153, 0, 232, 874, 238, 745,
	793, 0, 795, 0, 720, 0, 794, 844, 0, 289,
	0, 296, 0, 864, 879, 0, 0, 0, 0, 0,
	978, 980, 0, 971, 972, 1087, 982, 1001, -2, 1000,
	0, 1075, 1009, 1006, 1012, 1013, 0, 185, 0, 180,
	182, 0, 166, 0, 0, 738, 743, 0, 0, 0,
	0, 0, 992, 994, 0, 172, 0, 593, 612, 660,
	690, 750, 0, 0, 692, 1090, 1094, 1080, 902, 1346,
	1350, 0, 0, 0, 1352, -2, 0, 1374, -2, -2,
	1569, 1620, 1423, 1075, 1445, 1447, 1298, 1614, 0, 1520,
	1517, 0, 1504, 1227, 1465, 1466, 0, 0, 1469, 1471,
	1472, 1473, 1593, 0, 0, 0, 0, 1495, 1060, 1509,
	0, 0, 1111, 1509, 1509, 1149, 0, 1151, 1146, 1144,
	1119, 1112, 0, 1677, 1136, 0, 0, 1186, 1191, 0,
	1254, 118, 119, 121, 0, 764, 0, 767, 0, 0,
	0, 0, 774, 775, 0, 0, 0, 0, 0, 809,
	818, 0, 897, 0, 0, 0, 126, 145, 0, 0,
	916, 0, 150, 150, 0, 0, 907, 0, 0, 0,
	0, 106, 0, 0, 909, 911, 905, 0, 0, 913,
	178, 753, 0, 805, 797, 798, 799, 0, 804, 806,
	0, 0, 724, 721, 736, 719, 841, 873, 0, 294,
	0, 891, 0, 0, 0, 968, 980, 0, 973, 974,
	1003, 1086, 0, 0, 0, 989, 1087, 0, 187, 188,
	0, 0, 0, 0, 0, 0, 0, 188, 475, 477,
	0, 0, 483, 749, 0, 0, 1081, 1354, -2, -2,
	1375, 0, 1678, 1680, 1075, 0, 1506, 0, 0, -2,
	0, 0, 0, 1046, 0, 1102, 1100, 1047, 1048, 1170,
	1156, 0, 1139, 0, 1193, 123, 0, 768, 769, 1663,
	771, 0, 773, 776, 0, 778, 1699, 0, 782, 789,
	810, 0, 745, 0, 815, 816, 896, 791, 0, 125,
	127, 144, 899, 128, 134, 0, 0, 82, 0, 0,
	1748, 109, 107, 105, 84, 0, 719, 752, 0, 796,
	0, 807, 808, 722, 0, 0, 0, 295, 298, 0,
	301, 0, 892, 0, 0, 0, 975, 976, 310, 0,
	0, 0, 1003, 1014, 165, 0, 0, 818, 0, 0,
	786, 0, 170, 0, 479, 0, 481, 0, 691, 693,
	1446, 1524, 0, 1467, 1468, -2, 0, 1412, 1508, 1510,
	0, 1124, 1113, 1187, 766, 770, 0, 0, 824, 0,
	0, 0, 813, 814, 753, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 717, 0, 0, 725, 0,
	745, 0, 299, 300, 818, 0, 818, 0, 977, 978,
	0, 996, 997, 999, 1004, 0, 0, 745, 818, 785,
	0, 478, 0, 0, 0, 0, 0, 0, 1519, 1413,
	0, 0, 0, 777, 829, 0, 0, 0, 811, 812,
	809, 0, 820, 130, 0, 898, 0, 757, 0, 0,
	760, 0, 0, 110, 1748, 108, 0, 0, 0, 801,
	803, 726, 753, 724, 745, 0, 745, 0, 969, 0,
	998, 188, 188, 753, 745, 188, 480, 482, 1516, 1536,
	1525, -2, 1951, 1751, 0, 1536, 1536, 1511, 1512, 0,
	779, 825, 826, 0, 821, 822, 823, 1698, 780, 781,
	790, 817, 824, 146, 754, 0, 0, 755, 0, 0,
	113, 0, 115, 0, 800, 0, 719, 723, 753, 0,
	753, 0, 1184, 167, 168, 783, 753, 169, 1521, 0,
	0, 1527, 1528, 1529, 1530, 1531, 1522, 1523, 772, 827,
	0, 828, 0, 0, 0, 829, 758, 0, 761, 0,
	111, 0, 802, 718, 889, 818, 889, 818, 995, 784,
	0, 1533, 1534, 0, 0, 830, 0, 833, 834, 0,
	831, 809, 0, 0, 748, 884, 0, 745, 886, 745,
	1532, 1535, 1526, 832, 835, 836, 792, 0, 0, 744,
	746, 747, 890, 753, 753, 753, 0, 889, 889, 759,
	0, 885, 887, 0, 0, 753, 762,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 449, 3, 455, 450, 3,
	460, 461, 453, 451, 465, 452, 462, 454, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 468, 3,
	441, 443, 442, 446, 464, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 458, 3, 459, 456, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 466, 448, 467, 444,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 445, 57784, 447,
	57785, 457, 57786, 463, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1080
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1093
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1094
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1095
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1096
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1100
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1109
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1110
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1113
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1114
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1115
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1116
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1117
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1118
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1119
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1172
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1198
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1209
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1224
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1228
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1232
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1243
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1255
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1274
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1306
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1310
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1314
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1320
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1324
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1330
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1339
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1350
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1354
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1360
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1368
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1378
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1382
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1392
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1403
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1410
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1422
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1429
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1437
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1442
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1446
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1451
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1457
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1465
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1476
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1486
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1496
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1505
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1516
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1522
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1530
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1534
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1538
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1542
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1548
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1553
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1564
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1568
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1574
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1578
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1585
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1610
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1615
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1625
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1635
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1644
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1673
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1683
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1692
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1701
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1706
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1713
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1721
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1722
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1726
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1730
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1736
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1744
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1748
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1754
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1758
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1765
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1769
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1773
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1779
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1783
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1809
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1812
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1835
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1839
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1842
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1846
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1850
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1856
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1903
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1908
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1912
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1918
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1923
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1928
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1933
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1938
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1942
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1961
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1965
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1969
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1977
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1981
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1987
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1991
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1997
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2001
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2005
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2009
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2015
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2025
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2029
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2033
		{
			sqlVAL.union.val = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2039
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2052
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2053
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2054
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2055
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2065
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2073
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2075
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2088
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2097
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2105
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2107
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2111
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2114
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2124
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2133
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2141
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2143
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2147
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2150
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2154
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2158
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2162
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2179
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2184
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2196
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2197
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2199
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2200
		{
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2201
		{
			return helpWith(sqllex, "CREATE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2204
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2205
		{
			return unimplemented(sqllex, "create cast")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2206
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2207
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2208
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2209
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2210
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2211
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2212
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2213
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2214
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2215
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2216
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2217
		{
			return unimplemented(sqllex, "create operator")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2218
		{
			return unimplemented(sqllex, "create publication")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2219
		{
			return unimplemented(sqllex, "create rule")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2220
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2221
		{
			return unimplemented(sqllex, "create server")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2222
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2223
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2224
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2227
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2228
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2231
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2232
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2235
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2236
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2239
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2240
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2241
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2242
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2243
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2244
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2245
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2246
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2247
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2248
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2249
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2252
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2253
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2254
		{
			return unimplemented(sqllex, "drop server")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2255
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2256
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2258
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2262
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2263
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2264
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2265
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2267
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2268
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2269
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2270
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2280
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2288
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2292
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2296
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2306
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2315
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2322
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2328
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2334
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2338
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2349
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2361
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2369
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2377
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2387
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2391
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2397
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2401
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2408
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2412
		{

			sqlVAL.union.val = nil
		}
	case 310:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2426
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2436
		{
			return helpWith(sqllex, "DELETE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2439
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2440
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2451
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2452
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2453
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2454
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2455
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2464
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2465
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2466
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2467
		{
			return helpWith(sqllex, "DROP")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2470
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2471
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2472
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2473
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2474
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2482
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2486
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2489
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2497
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2501
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2504
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2512
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2516
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2519
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2527
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2535
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2542
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2550
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2558
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2565
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2573
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2577
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2580
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2588
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2592
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2595
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2599
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2604
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2630
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2632
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2636
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2640
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2644
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2648
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2655
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2659
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2662
		{
			return helpWith(sqllex, "DELETE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2664
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2665
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2666
		{
			return helpWith(sqllex, "INSERT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2667
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2669
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2670
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2671
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2674
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2679
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2680
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2681
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "DELETE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "INSERT")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2690
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2694
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2695
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2699
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2703
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2713
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2721
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2729
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2733
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2737
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2747
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2754
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2762
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2766
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2770
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2780
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2784
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2788
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2792
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2795
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2815
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2819
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2823
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2826
		{
			return helpWith(sqllex, "GRANT")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2846
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2850
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2854
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2857
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2862
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2866
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2876
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2894
		{
			return helpWith(sqllex, "RESET")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2895
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2903
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2907
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2910
		{
			return helpWith(sqllex, "RESET")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2921
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2932
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2935
		{
			return helpWith(sqllex, "USE")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2939
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2940
		{
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2941
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2942
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2946
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2947
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2948
		{
			return helpWith(sqllex, "USE")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2964
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2979
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2982
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3000
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3008
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3012
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3016
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3022
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3032
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3036
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3040
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3044
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3048
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3059
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3062
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3072
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3088
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3092
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3097
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3114
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3117
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3119
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3122
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3126
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3145
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3152
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3157
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3162
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3167
		{
			return unimplemented(sqllex, "set from current")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3168
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3176
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3181
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3188
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3192
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3198
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3202
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3209
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3230
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3240
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3244
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3248
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3252
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3256
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3262
		{
			sqlVAL.union.val = tree.Low
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3266
		{
			sqlVAL.union.val = tree.Normal
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3270
		{
			sqlVAL.union.val = tree.High
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3281
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3285
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3289
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3294
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3298
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3311
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3312
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3313
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3314
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3315
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3316
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3318
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3319
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3320
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3321
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3322
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3323
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3324
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3325
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3326
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3327
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3328
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3329
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3330
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3331
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3332
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3333
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3334
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3344
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3345
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3346
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3357
		{
			sqlVAL.str = "client_encoding"
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3360
		{
			sqlVAL.str = "timezone"
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3361
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3375
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3379
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3383
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3394
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3402
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3410
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3417
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3425
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3433
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3440
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3450
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3454
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3457
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3459
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3462
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3470
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3473
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3481
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3485
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3489
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3493
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3496
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3504
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3507
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3520
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3528
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3536
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3539
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3541
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3545
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3549
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3552
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3554
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3558
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3561
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3569
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3572
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3574
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3577
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3585
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3588
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3590
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3593
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3597
		{
			sqlVAL.union.val = true
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3599
		{
			sqlVAL.union.val = true
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3601
		{
			sqlVAL.union.val = false
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3611
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3615
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3618
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3619
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3625
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3628
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3630
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3638
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3646
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3655
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3658
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3660
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3663
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3665
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3669
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3672
		{
			sqlVAL.union.val = true
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3673
		{
			sqlVAL.union.val = false
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3681
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3684
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3686
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3689
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3697
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3707
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3717
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3720
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3723
		{
			sqlVAL.union.val = true
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3724
		{
			sqlVAL.union.val = false
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3731
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3735
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3738
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3745
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3749
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3752
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3759
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3763
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3771
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3776
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3781
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3785
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3793
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3797
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3801
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3814
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3817
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3825
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3828
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3832
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3836
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3840
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3848
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3856
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3863
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3870
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3874
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3885
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3890
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3894
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3897
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3901
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3908
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3913
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4033
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4037
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4041
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4080
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4084
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4089
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4093
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4102
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4109
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4113
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4125
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4134
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4137
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4173
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4185
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4198
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4199
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4200
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4204
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4215
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4227
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4228
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4229
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4243
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4244
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4245
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4246
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4247
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4248
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4249
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4250
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4255
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4261
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4265
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4271
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4277
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4280
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4284
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4293
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4300
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4305
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4316
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4323
		{
			sqlVAL.str = ""
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4330
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4336
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4343
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4350
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4356
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4360
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 759:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4366
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4376
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 762:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4386
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4400
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4411
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4415
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4421
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4433
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4437
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4441
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4445
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4463
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4467
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4471
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4479
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4483
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4487
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4497
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4501
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4505
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 783:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4512
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4522
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4534
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4544
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4556
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4561
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4567
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4573
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4584
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4594
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4608
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4618
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4628
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4643
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4650
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4656
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4667
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4671
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4677
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4683
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4687
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4693
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4697
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4703
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4708
		{
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4709
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4710
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4711
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4712
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4713
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4730
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4734
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4740
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4744
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4764
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4768
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4772
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4776
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4785
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4789
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4797
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4801
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4807
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4813
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4821
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4825
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4829
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4833
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4837
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4843
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4847
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4853
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4872
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4877
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4881
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4885
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4888
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4889
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4892
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4893
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4895
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4896
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4897
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4900
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4902
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4904
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4906
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4907
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4909
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4910
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4912
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4914
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4922
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4925
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4933
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4937
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4940
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4944
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4948
		{
			sqlVAL.union.val = nil
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4958
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4962
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4965
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4970
		{
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4971
		{
		}
	case 873:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4979
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4987
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4988
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4991
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4992
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4998
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 879:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5000
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 880:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5002
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 881:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5004
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5006
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5008
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5024
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5038
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5053
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5067
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5081
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5084
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5085
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5089
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5104
		{
			sqlVAL.union.val = false
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5110
		{
			sqlVAL.union.val = true
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5114
		{
			sqlVAL.union.val = false
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5120
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5124
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5133
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5144
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5145
		{
			sqlVAL.str = ""
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5149
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5153
		{
			sqlVAL.union.val = tree.Descending
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5157
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 903:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5163
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5170
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5174
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5180
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5186
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5194
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5200
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5208
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5214
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5222
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5226
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5231
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5232
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5235
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5236
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5244
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5247
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5257
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5266
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5269
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5277
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5280
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5284
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5285
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5286
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5302
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5305
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5307
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5310
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5320
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5323
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5325
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5328
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5332
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5337
		{
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5338
		{
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5339
		{
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5347
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5354
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5357
		{
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5358
		{
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5362
		{
			sqlVAL.str = ""
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5366
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5370
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5374
		{
			sqlVAL.str = ""
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5380
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5384
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5390
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5394
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5400
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5404
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5417
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5419
		{
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5423
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5428
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5432
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5436
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5442
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5448
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5454
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5458
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 968:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5468
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5478
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5488
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5492
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5496
		{
			sqlVAL.str = ""
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5502
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5506
		{
			sqlVAL.str = ""
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5512
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5516
		{
			sqlVAL.str = ""
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5522
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5526
		{
			sqlVAL.str = ""
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5531
		{
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5532
		{
		}
	case 981:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5544
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5551
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5558
		{
			return helpWith(sqllex, "INSERT")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5569
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5576
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5580
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5589
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5596
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5600
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5604
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5610
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5614
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5634
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 995:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5638
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5642
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5648
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5651
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5652
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5654
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5660
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5665
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5669
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5686
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5698
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5701
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5704
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5710
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5714
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5727
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5730
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5734
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5777
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5783
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5787
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5806
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5810
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5814
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5818
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5822
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5827
		{
			sqlVAL.union.val = tree.ForLocked{}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5829
		{
			sqlVAL.union.val = tree.ForLocked{Strength: sqlDollar[1].union.lockingStrength(), Targets: sqlDollar[2].union.tableNames()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5834
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5835
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5838
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5839
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5840
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5841
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5844
		{
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5846
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5847
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5852
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5887
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5888
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5889
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5911
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5924
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5938
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5950
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5954
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5963
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5972
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5987
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5994
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6006
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6010
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6014
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6018
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6028
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6036
		{
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6037
		{
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6041
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6045
		{
			sqlVAL.union.val = nil
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6050
		{
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6051
		{
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6055
		{
			sqlVAL.union.val = true
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6059
		{
			sqlVAL.union.val = false
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6063
		{
			sqlVAL.union.val = false
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6069
		{
			sqlVAL.union.val = true
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6075
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6080
		{
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6081
		{
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6085
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6089
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6095
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6101
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6105
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6111
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6115
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6120
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6135
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6144
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6156
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6160
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6164
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6173
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6179
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6186
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6195
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6199
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6203
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6209
		{
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6210
		{
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6213
		{
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6214
		{
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6231
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6241
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6245
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6264
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6267
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6269
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6281
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6284
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6286
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6292
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6296
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6302
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6306
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6311
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6316
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6322
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6327
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6334
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6339
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6350
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6354
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6358
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6366
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6397
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6411
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6429
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6438
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6442
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6446
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6457
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6481
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6487
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6491
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6497
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6503
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6509
		{
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6511
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6514
		{
			sqlVAL.union.val = nil
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6515
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6520
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6524
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6530
		{
			sqlVAL.union.val = true
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6534
		{
			sqlVAL.union.val = false
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6554
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6558
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6562
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6566
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6570
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6574
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6580
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6584
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6591
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6597
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6604
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6610
		{
			sqlVAL.str = tree.AstFull
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6614
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6618
		{
			sqlVAL.str = tree.AstRight
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6622
		{
			sqlVAL.str = tree.AstInner
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6628
		{
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6629
		{
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6650
		{
			sqlVAL.str = tree.AstHash
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6658
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6662
		{
			sqlVAL.str = ""
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6675
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6684
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6685
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6686
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6687
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6691
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6696
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6710
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6714
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6720
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6728
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6738
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6745
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6757
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6770
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6778
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6779
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6789
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6796
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6797
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6799
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6807
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6819
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6820
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6838
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6842
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6846
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6850
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6854
		{
			sqlVAL.union.val = types.String
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6858
		{
			sqlVAL.union.val = types.Name
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6862
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6871
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6875
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6879
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6883
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6887
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6891
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = types.INet
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6899
		{
			sqlVAL.union.val = types.Oid
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6903
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6907
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6911
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6942
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6950
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6958
		{
			sqlVAL.union.val = nil
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6965
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6969
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6973
		{
			sqlVAL.union.val = types.Int2
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6977
		{
			sqlVAL.union.val = types.Int2
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6981
		{
			sqlVAL.union.val = types.Int4
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6985
		{
			sqlVAL.union.val = types.Int
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6989
		{
			sqlVAL.union.val = types.Int
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6993
		{
			sqlVAL.union.val = types.Int
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = types.Float4
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.union.val = types.Float4
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = types.Float
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7013
		{
			sqlVAL.union.val = types.Float
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7017
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7025
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7033
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7041
		{
			sqlVAL.union.val = types.Bool
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = types.Bool
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7052
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7056
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7060
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7064
		{
			sqlVAL.union.val = types.RegType
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7068
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7074
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7087
		{
			sqlVAL.union.val = types.Float
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7093
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7099
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7111
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7121
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7133
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = types.String
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7160
		{
			sqlVAL.union.val = true
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7161
		{
			sqlVAL.union.val = false
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7166
		{
			sqlVAL.union.val = types.Date
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7170
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7175
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7182
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7183
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7185
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7193
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7205
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7209
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7218
		{
			sqlVAL.union.val = true
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7219
		{
			sqlVAL.union.val = false
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7220
		{
			sqlVAL.union.val = false
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7224
		{
			sqlVAL.union.val = types.Interval
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7230
		{
			sqlVAL.union.val = tree.Year
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7234
		{
			sqlVAL.union.val = tree.Month
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7238
		{
			sqlVAL.union.val = tree.Day
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7242
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7246
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7250
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7256
		{
			sqlVAL.union.val = tree.Month
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7260
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7264
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7268
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7272
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7276
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7280
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7287
		{
			sqlVAL.union.val = nil
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7293
		{
			sqlVAL.union.val = tree.Second
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7296
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7324
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7328
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7343
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7348
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7352
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7372
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7472
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7476
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7480
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7484
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7488
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7504
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7508
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7512
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7516
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7520
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7524
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7528
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7532
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7536
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7540
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7544
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7548
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7568
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7572
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7576
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7580
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7587
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7589
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7597
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7605
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7609
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7613
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7617
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7621
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7637
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7645
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7649
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7653
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7675
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7687
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7695
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7715
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7719
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7731
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7735
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7739
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7743
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7755
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7759
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7763
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7767
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7771
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7775
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7779
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7783
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7787
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7791
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7795
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7809
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7817
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7861
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7865
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7869
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7874
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7883
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7885
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7889
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7893
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7901
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7910
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7917
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7921
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7925
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7930
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7934
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7938
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7949
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7960
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7961
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7963
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7969
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7973
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7976
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7987
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7994
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8003
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8004
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8009
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8023
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8031
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8041
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8057
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8073
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8081
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8096
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8099
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8101
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8104
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8109
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8111
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8114
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8116
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8119
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8121
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8124
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8129
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8131
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8134
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8136
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8140
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8143
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8144
		{
			return unimplemented(sqllex, "treat")
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8158
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8165
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8167
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8170
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8175
		{
			return unimplemented(sqllex, "within group")
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8176
		{
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8180
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8184
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8191
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8195
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8201
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8211
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8234
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8254
		{
			sqlVAL.str = ""
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8260
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8264
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8278
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8286
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8300
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8313
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8349
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8353
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8360
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8369
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8373
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8377
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8381
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8403
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8410
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = tree.Any
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = tree.Some
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8430
		{
			sqlVAL.union.val = tree.All
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8435
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8436
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8437
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8438
		{
			sqlVAL.union.val = tree.Div
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8439
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8440
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8441
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8442
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8443
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8444
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8445
		{
			sqlVAL.union.val = tree.LT
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8446
		{
			sqlVAL.union.val = tree.GT
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8447
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8448
		{
			sqlVAL.union.val = tree.LE
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8449
		{
			sqlVAL.union.val = tree.GE
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8450
		{
			sqlVAL.union.val = tree.NE
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8454
		{
			sqlVAL.union.val = tree.Like
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8455
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8456
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8457
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8480
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8484
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8494
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8498
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8509
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8513
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8519
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8523
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8530
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8536
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8540
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8546
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8556
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8560
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8566
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8570
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8576
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8580
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8602
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8606
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8610
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8616
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8623
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8627
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8644
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8648
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8652
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8656
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8660
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8666
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8672
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8678
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8682
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8686
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8692
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8704
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8711
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8721
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8727
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8731
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8738
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8744
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8748
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8755
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8761
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8765
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8770
		{
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8771
		{
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8775
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8779
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8785
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8794
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8798
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8802
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8810
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8814
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8820
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8824
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8843
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8851
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8874
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8883
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8887
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8891
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8895
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8901
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8905
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8913
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8917
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8926
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8937
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8946
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8954
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9051
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9058
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9062
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9066
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9080
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9084
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9088
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9101
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9119
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9132
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9139
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9164
		{
			sqlVAL.str = ""
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9170
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9174
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
