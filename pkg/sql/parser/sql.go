// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:550
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:8034

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 55,
	418, 55,
	-2, 875,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 50,
	164, 713,
	-2, 0,
	-1, 59,
	101, 875,
	170, 875,
	366, 875,
	367, 875,
	-2, 0,
	-1, 72,
	113, 849,
	126, 849,
	178, 849,
	204, 849,
	233, 849,
	241, 849,
	363, 849,
	-2, 838,
	-1, 108,
	194, 531,
	354, 531,
	-2, 0,
	-1, 113,
	4, 877,
	20, 877,
	21, 877,
	22, 877,
	23, 877,
	25, 877,
	30, 877,
	35, 877,
	36, 877,
	37, 877,
	38, 877,
	39, 877,
	40, 877,
	41, 877,
	42, 877,
	43, 877,
	44, 877,
	46, 877,
	47, 877,
	48, 877,
	49, 877,
	50, 877,
	51, 877,
	54, 877,
	55, 877,
	56, 877,
	58, 877,
	59, 877,
	63, 877,
	64, 877,
	65, 877,
	66, 877,
	67, 877,
	69, 877,
	70, 877,
	71, 877,
	72, 877,
	74, 877,
	76, 877,
	77, 877,
	80, 877,
	81, 877,
	82, 877,
	90, 877,
	91, 877,
	92, 877,
	93, 877,
	94, 877,
	95, 877,
	96, 877,
	97, 877,
	99, 877,
	101, 877,
	103, 877,
	106, 877,
	107, 877,
	109, 877,
	110, 877,
	114, 877,
	115, 877,
	116, 877,
	117, 877,
	118, 877,
	119, 877,
	120, 877,
	121, 877,
	122, 877,
	123, 877,
	131, 877,
	132, 877,
	133, 877,
	134, 877,
	135, 877,
	137, 877,
	139, 877,
	143, 877,
	145, 877,
	146, 877,
	148, 877,
	150, 877,
	151, 877,
	152, 877,
	153, 877,
	154, 877,
	155, 877,
	156, 877,
	157, 877,
	160, 877,
	165, 877,
	166, 877,
	167, 877,
	170, 877,
	171, 877,
	172, 877,
	173, 877,
	174, 877,
	175, 877,
	176, 877,
	177, 877,
	179, 877,
	181, 877,
	184, 877,
	185, 877,
	186, 877,
	188, 877,
	189, 877,
	192, 877,
	193, 877,
	194, 877,
	196, 877,
	197, 877,
	199, 877,
	201, 877,
	202, 877,
	205, 877,
	206, 877,
	209, 877,
	211, 877,
	214, 877,
	215, 877,
	216, 877,
	217, 877,
	218, 877,
	220, 877,
	221, 877,
	222, 877,
	223, 877,
	228, 877,
	229, 877,
	230, 877,
	231, 877,
	232, 877,
	234, 877,
	235, 877,
	237, 877,
	238, 877,
	239, 877,
	242, 877,
	243, 877,
	245, 877,
	247, 877,
	248, 877,
	249, 877,
	250, 877,
	251, 877,
	252, 877,
	253, 877,
	254, 877,
	256, 877,
	257, 877,
	258, 877,
	259, 877,
	260, 877,
	262, 877,
	263, 877,
	264, 877,
	265, 877,
	266, 877,
	267, 877,
	268, 877,
	269, 877,
	271, 877,
	272, 877,
	273, 877,
	274, 877,
	275, 877,
	277, 877,
	278, 877,
	279, 877,
	280, 877,
	281, 877,
	282, 877,
	283, 877,
	285, 877,
	287, 877,
	288, 877,
	289, 877,
	290, 877,
	291, 877,
	292, 877,
	294, 877,
	295, 877,
	296, 877,
	297, 877,
	298, 877,
	299, 877,
	300, 877,
	302, 877,
	303, 877,
	304, 877,
	305, 877,
	306, 877,
	307, 877,
	308, 877,
	309, 877,
	310, 877,
	312, 877,
	313, 877,
	314, 877,
	315, 877,
	317, 877,
	318, 877,
	319, 877,
	320, 877,
	322, 877,
	323, 877,
	324, 877,
	325, 877,
	326, 877,
	327, 877,
	328, 877,
	329, 877,
	330, 877,
	332, 877,
	333, 877,
	335, 877,
	336, 877,
	338, 877,
	339, 877,
	340, 877,
	341, 877,
	342, 877,
	343, 877,
	344, 877,
	345, 877,
	346, 877,
	347, 877,
	349, 877,
	350, 877,
	351, 877,
	354, 877,
	355, 877,
	356, 877,
	357, 877,
	359, 877,
	360, 877,
	361, 877,
	362, 877,
	365, 877,
	366, 877,
	367, 877,
	368, 877,
	370, 877,
	372, 877,
	373, 877,
	374, 877,
	375, 877,
	376, 877,
	377, 877,
	380, 877,
	381, 877,
	386, 877,
	387, 877,
	388, 877,
	389, 877,
	390, 877,
	391, 877,
	-2, 0,
	-1, 134,
	113, 848,
	126, 848,
	178, 848,
	204, 848,
	233, 848,
	241, 848,
	363, 848,
	-2, 841,
	-1, 139,
	1, 771,
	184, 771,
	262, 771,
	266, 771,
	417, 771,
	418, 771,
	-2, 0,
	-1, 141,
	1, 771,
	417, 771,
	418, 771,
	-2, 0,
	-1, 142,
	1, 771,
	417, 771,
	418, 771,
	-2, 0,
	-1, 143,
	1, 775,
	417, 775,
	418, 775,
	-2, 0,
	-1, 169,
	4, 884,
	5, 884,
	6, 884,
	7, 884,
	8, 884,
	9, 884,
	20, 884,
	21, 884,
	22, 884,
	23, 884,
	25, 884,
	30, 884,
	31, 884,
	35, 884,
	36, 884,
	37, 884,
	38, 884,
	39, 884,
	40, 884,
	41, 884,
	42, 884,
	43, 884,
	44, 884,
	46, 884,
	47, 884,
	48, 884,
	49, 884,
	50, 884,
	51, 884,
	52, 884,
	53, 884,
	54, 884,
	55, 884,
	56, 884,
	58, 884,
	59, 884,
	61, 884,
	63, 884,
	64, 884,
	65, 884,
	66, 884,
	67, 884,
	69, 884,
	70, 884,
	71, 884,
	72, 884,
	74, 884,
	76, 884,
	77, 884,
	79, 884,
	80, 884,
	81, 884,
	82, 884,
	83, 884,
	84, 884,
	85, 884,
	86, 884,
	88, 884,
	89, 884,
	90, 884,
	91, 884,
	92, 884,
	93, 884,
	94, 884,
	95, 884,
	96, 884,
	97, 884,
	98, 884,
	99, 884,
	101, 884,
	103, 884,
	106, 884,
	107, 884,
	109, 884,
	110, 884,
	114, 884,
	115, 884,
	116, 884,
	117, 884,
	118, 884,
	119, 884,
	120, 884,
	121, 884,
	122, 884,
	123, 884,
	124, 884,
	125, 884,
	131, 884,
	132, 884,
	133, 884,
	134, 884,
	135, 884,
	137, 884,
	139, 884,
	142, 884,
	143, 884,
	145, 884,
	146, 884,
	148, 884,
	150, 884,
	151, 884,
	152, 884,
	153, 884,
	154, 884,
	155, 884,
	156, 884,
	157, 884,
	158, 884,
	160, 884,
	165, 884,
	166, 884,
	167, 884,
	169, 884,
	170, 884,
	171, 884,
	172, 884,
	173, 884,
	174, 884,
	175, 884,
	176, 884,
	177, 884,
	179, 884,
	181, 884,
	182, 884,
	183, 884,
	184, 884,
	185, 884,
	186, 884,
	187, 884,
	188, 884,
	189, 884,
	192, 884,
	193, 884,
	194, 884,
	196, 884,
	197, 884,
	199, 884,
	200, 884,
	201, 884,
	202, 884,
	203, 884,
	205, 884,
	206, 884,
	209, 884,
	211, 884,
	212, 884,
	213, 884,
	214, 884,
	215, 884,
	216, 884,
	217, 884,
	218, 884,
	219, 884,
	220, 884,
	221, 884,
	222, 884,
	223, 884,
	224, 884,
	226, 884,
	227, 884,
	228, 884,
	229, 884,
	230, 884,
	231, 884,
	232, 884,
	234, 884,
	235, 884,
	238, 884,
	239, 884,
	242, 884,
	243, 884,
	244, 884,
	245, 884,
	246, 884,
	247, 884,
	248, 884,
	249, 884,
	250, 884,
	251, 884,
	252, 884,
	253, 884,
	254, 884,
	256, 884,
	257, 884,
	258, 884,
	259, 884,
	260, 884,
	262, 884,
	263, 884,
	264, 884,
	265, 884,
	266, 884,
	267, 884,
	268, 884,
	269, 884,
	271, 884,
	272, 884,
	273, 884,
	274, 884,
	275, 884,
	277, 884,
	278, 884,
	279, 884,
	280, 884,
	281, 884,
	282, 884,
	283, 884,
	285, 884,
	286, 884,
	287, 884,
	288, 884,
	289, 884,
	290, 884,
	291, 884,
	292, 884,
	294, 884,
	295, 884,
	296, 884,
	297, 884,
	298, 884,
	299, 884,
	300, 884,
	302, 884,
	303, 884,
	304, 884,
	305, 884,
	306, 884,
	307, 884,
	308, 884,
	309, 884,
	310, 884,
	311, 884,
	312, 884,
	313, 884,
	314, 884,
	315, 884,
	316, 884,
	317, 884,
	318, 884,
	319, 884,
	320, 884,
	322, 884,
	323, 884,
	324, 884,
	325, 884,
	326, 884,
	327, 884,
	328, 884,
	329, 884,
	330, 884,
	332, 884,
	333, 884,
	335, 884,
	336, 884,
	338, 884,
	339, 884,
	340, 884,
	341, 884,
	342, 884,
	343, 884,
	344, 884,
	345, 884,
	346, 884,
	347, 884,
	349, 884,
	350, 884,
	351, 884,
	354, 884,
	355, 884,
	356, 884,
	357, 884,
	358, 884,
	359, 884,
	360, 884,
	361, 884,
	362, 884,
	365, 884,
	366, 884,
	367, 884,
	368, 884,
	369, 884,
	370, 884,
	372, 884,
	373, 884,
	374, 884,
	375, 884,
	376, 884,
	377, 884,
	380, 884,
	381, 884,
	386, 884,
	387, 884,
	388, 884,
	389, 884,
	390, 884,
	391, 884,
	392, 884,
	400, 884,
	405, 884,
	406, 884,
	407, 884,
	414, 884,
	420, 884,
	-2, 0,
	-1, 172,
	1, 55,
	418, 55,
	-2, 875,
	-1, 204,
	416, 1442,
	419, 1442,
	-2, 574,
	-1, 205,
	416, 1444,
	419, 1444,
	-2, 575,
	-1, 206,
	416, 1443,
	419, 1443,
	-2, 576,
	-1, 207,
	419, 1384,
	-2, 577,
	-1, 600,
	141, 1556,
	352, 1556,
	397, 1556,
	416, 1556,
	-2, 0,
	-1, 601,
	141, 1480,
	352, 1480,
	397, 1480,
	416, 1480,
	-2, 0,
	-1, 603,
	141, 1629,
	352, 1629,
	397, 1629,
	416, 1629,
	-2, 0,
	-1, 605,
	141, 1657,
	352, 1657,
	397, 1657,
	416, 1657,
	-2, 0,
	-1, 612,
	141, 1561,
	352, 1561,
	397, 1561,
	416, 1561,
	-2, 405,
	-1, 647,
	1, 503,
	413, 503,
	415, 503,
	417, 503,
	418, 503,
	-2, 0,
	-1, 648,
	1, 573,
	138, 573,
	413, 573,
	415, 573,
	417, 573,
	418, 573,
	-2, 0,
	-1, 654,
	1, 517,
	413, 517,
	415, 517,
	417, 517,
	418, 517,
	-2, 0,
	-1, 656,
	1, 521,
	413, 521,
	415, 521,
	417, 521,
	418, 521,
	-2, 0,
	-1, 659,
	1, 532,
	413, 532,
	415, 532,
	417, 532,
	418, 532,
	-2, 0,
	-1, 660,
	1, 538,
	413, 538,
	415, 538,
	417, 538,
	418, 538,
	-2, 0,
	-1, 661,
	1, 541,
	413, 541,
	415, 541,
	417, 541,
	418, 541,
	-2, 0,
	-1, 665,
	1, 555,
	413, 555,
	415, 555,
	417, 555,
	418, 555,
	-2, 0,
	-1, 666,
	1, 557,
	413, 557,
	415, 557,
	417, 557,
	418, 557,
	-2, 0,
	-1, 694,
	126, 886,
	204, 886,
	233, 886,
	-2, 844,
	-1, 702,
	126, 885,
	204, 885,
	233, 885,
	-2, 842,
	-1, 729,
	414, 1729,
	-2, 1163,
	-1, 730,
	414, 1730,
	-2, 1164,
	-1, 761,
	414, 1436,
	-2, 1427,
	-1, 762,
	5, 1021,
	414, 1451,
	-2, 1442,
	-1, 763,
	414, 1452,
	-2, 1443,
	-1, 770,
	5, 1005,
	-2, 1472,
	-1, 771,
	5, 1006,
	-2, 1476,
	-1, 772,
	5, 1007,
	-2, 1475,
	-1, 773,
	5, 1008,
	-2, 1653,
	-1, 774,
	5, 1009,
	-2, 1563,
	-1, 775,
	5, 1010,
	-2, 1622,
	-1, 776,
	5, 1011,
	-2, 1624,
	-1, 777,
	5, 1012,
	-2, 1625,
	-1, 778,
	5, 1013,
	-2, 1626,
	-1, 779,
	5, 1014,
	-2, 1634,
	-1, 780,
	5, 1015,
	-2, 1665,
	-1, 781,
	5, 1016,
	-2, 1533,
	-1, 782,
	5, 1017,
	-2, 1471,
	-1, 783,
	5, 1018,
	-2, 1571,
	-1, 784,
	5, 1019,
	-2, 1572,
	-1, 785,
	5, 1020,
	-2, 1537,
	-1, 786,
	5, 1067,
	414, 1067,
	-2, 1698,
	-1, 803,
	5, 1042,
	-2, 1473,
	-1, 804,
	5, 1060,
	-2, 1500,
	-1, 806,
	5, 1034,
	-2, 1520,
	-1, 807,
	5, 1035,
	-2, 1521,
	-1, 808,
	5, 1026,
	-2, 1536,
	-1, 809,
	5, 1027,
	-2, 1538,
	-1, 810,
	5, 1028,
	-2, 1539,
	-1, 811,
	5, 1029,
	-2, 1540,
	-1, 812,
	5, 993,
	-2, 1546,
	-1, 813,
	5, 994,
	-2, 1547,
	-1, 814,
	5, 1057,
	-2, 1643,
	-1, 815,
	5, 1065,
	-2, 1655,
	-1, 816,
	5, 1032,
	-2, 1679,
	-1, 817,
	5, 1059,
	-2, 1680,
	-1, 818,
	5, 1041,
	-2, 1681,
	-1, 819,
	5, 1059,
	-2, 1682,
	-1, 820,
	5, 1059,
	-2, 1683,
	-1, 821,
	5, 1024,
	-2, 1686,
	-1, 822,
	5, 1024,
	-2, 1687,
	-1, 825,
	5, 1049,
	-2, 1691,
	-1, 827,
	5, 1025,
	-2, 1696,
	-1, 828,
	5, 1030,
	-2, 1697,
	-1, 830,
	5, 1024,
	-2, 1701,
	-1, 833,
	5, 1033,
	-2, 1706,
	-1, 834,
	5, 1031,
	-2, 1708,
	-1, 836,
	5, 1061,
	-2, 1710,
	-1, 837,
	5, 1063,
	-2, 1711,
	-1, 840,
	5, 1056,
	-2, 1715,
	-1, 909,
	414, 1451,
	-2, 1442,
	-1, 926,
	277, 1424,
	407, 1424,
	-2, 1423,
	-1, 1068,
	252, 873,
	-2, 699,
	-1, 1077,
	236, 1446,
	-2, 0,
	-1, 1120,
	1, 272,
	413, 272,
	415, 272,
	417, 272,
	418, 272,
	-2, 847,
	-1, 1123,
	4, 1714,
	10, 1714,
	11, 1714,
	13, 1714,
	14, 1714,
	15, 1714,
	16, 1714,
	17, 1714,
	18, 1714,
	20, 1714,
	21, 1714,
	22, 1714,
	23, 1714,
	25, 1714,
	28, 1714,
	30, 1714,
	32, 1714,
	35, 1714,
	36, 1714,
	37, 1714,
	38, 1714,
	39, 1714,
	40, 1714,
	41, 1714,
	42, 1714,
	43, 1714,
	44, 1714,
	46, 1714,
	47, 1714,
	48, 1714,
	49, 1714,
	50, 1714,
	51, 1714,
	54, 1714,
	55, 1714,
	56, 1714,
	58, 1714,
	59, 1714,
	60, 1714,
	63, 1714,
	64, 1714,
	65, 1714,
	66, 1714,
	67, 1714,
	68, 1714,
	69, 1714,
	70, 1714,
	71, 1714,
	72, 1714,
	74, 1714,
	75, 1714,
	76, 1714,
	77, 1714,
	79, 1714,
	80, 1714,
	81, 1714,
	82, 1714,
	90, 1714,
	91, 1714,
	92, 1714,
	93, 1714,
	94, 1714,
	95, 1714,
	96, 1714,
	97, 1714,
	99, 1714,
	101, 1714,
	103, 1714,
	106, 1714,
	107, 1714,
	109, 1714,
	110, 1714,
	114, 1714,
	115, 1714,
	116, 1714,
	117, 1714,
	118, 1714,
	119, 1714,
	120, 1714,
	121, 1714,
	122, 1714,
	123, 1714,
	127, 1714,
	128, 1714,
	129, 1714,
	130, 1714,
	131, 1714,
	132, 1714,
	133, 1714,
	134, 1714,
	135, 1714,
	136, 1714,
	137, 1714,
	139, 1714,
	142, 1714,
	143, 1714,
	145, 1714,
	146, 1714,
	148, 1714,
	150, 1714,
	151, 1714,
	152, 1714,
	153, 1714,
	154, 1714,
	155, 1714,
	156, 1714,
	157, 1714,
	158, 1714,
	159, 1714,
	160, 1714,
	161, 1714,
	162, 1714,
	163, 1714,
	165, 1714,
	166, 1714,
	167, 1714,
	169, 1714,
	170, 1714,
	171, 1714,
	172, 1714,
	173, 1714,
	174, 1714,
	175, 1714,
	176, 1714,
	177, 1714,
	179, 1714,
	181, 1714,
	182, 1714,
	183, 1714,
	184, 1714,
	185, 1714,
	186, 1714,
	187, 1714,
	188, 1714,
	189, 1714,
	190, 1714,
	191, 1714,
	192, 1714,
	193, 1714,
	194, 1714,
	196, 1714,
	197, 1714,
	199, 1714,
	200, 1714,
	201, 1714,
	202, 1714,
	203, 1714,
	205, 1714,
	206, 1714,
	209, 1714,
	210, 1714,
	211, 1714,
	214, 1714,
	215, 1714,
	216, 1714,
	217, 1714,
	218, 1714,
	219, 1714,
	220, 1714,
	221, 1714,
	222, 1714,
	223, 1714,
	226, 1714,
	228, 1714,
	229, 1714,
	230, 1714,
	231, 1714,
	232, 1714,
	234, 1714,
	235, 1714,
	238, 1714,
	239, 1714,
	240, 1714,
	242, 1714,
	243, 1714,
	245, 1714,
	247, 1714,
	248, 1714,
	249, 1714,
	250, 1714,
	251, 1714,
	252, 1714,
	253, 1714,
	254, 1714,
	256, 1714,
	257, 1714,
	258, 1714,
	259, 1714,
	260, 1714,
	262, 1714,
	263, 1714,
	264, 1714,
	265, 1714,
	266, 1714,
	267, 1714,
	268, 1714,
	269, 1714,
	271, 1714,
	272, 1714,
	273, 1714,
	274, 1714,
	275, 1714,
	276, 1714,
	277, 1714,
	278, 1714,
	279, 1714,
	280, 1714,
	281, 1714,
	282, 1714,
	283, 1714,
	285, 1714,
	286, 1714,
	287, 1714,
	288, 1714,
	289, 1714,
	290, 1714,
	291, 1714,
	292, 1714,
	293, 1714,
	294, 1714,
	295, 1714,
	296, 1714,
	297, 1714,
	298, 1714,
	299, 1714,
	300, 1714,
	302, 1714,
	303, 1714,
	304, 1714,
	305, 1714,
	306, 1714,
	307, 1714,
	308, 1714,
	309, 1714,
	310, 1714,
	312, 1714,
	313, 1714,
	314, 1714,
	315, 1714,
	316, 1714,
	317, 1714,
	318, 1714,
	319, 1714,
	320, 1714,
	322, 1714,
	323, 1714,
	324, 1714,
	325, 1714,
	326, 1714,
	327, 1714,
	328, 1714,
	329, 1714,
	330, 1714,
	332, 1714,
	333, 1714,
	335, 1714,
	336, 1714,
	338, 1714,
	339, 1714,
	340, 1714,
	341, 1714,
	342, 1714,
	343, 1714,
	344, 1714,
	345, 1714,
	346, 1714,
	347, 1714,
	349, 1714,
	350, 1714,
	351, 1714,
	354, 1714,
	355, 1714,
	356, 1714,
	357, 1714,
	359, 1714,
	360, 1714,
	361, 1714,
	362, 1714,
	365, 1714,
	366, 1714,
	367, 1714,
	368, 1714,
	370, 1714,
	372, 1714,
	373, 1714,
	374, 1714,
	375, 1714,
	376, 1714,
	377, 1714,
	380, 1714,
	381, 1714,
	386, 1714,
	387, 1714,
	388, 1714,
	389, 1714,
	390, 1714,
	391, 1714,
	392, 1714,
	393, 1714,
	395, 1714,
	396, 1714,
	397, 1714,
	398, 1714,
	399, 1714,
	400, 1714,
	402, 1714,
	403, 1714,
	404, 1714,
	405, 1714,
	406, 1714,
	407, 1714,
	408, 1714,
	409, 1714,
	410, 1714,
	412, 1714,
	415, 1714,
	416, 1714,
	419, 1714,
	420, 1714,
	-2, 0,
	-1, 1141,
	141, 1629,
	352, 1629,
	397, 1629,
	416, 1629,
	-2, 0,
	-1, 1166,
	141, 1657,
	352, 1657,
	397, 1657,
	416, 1657,
	-2, 0,
	-1, 1167,
	184, 783,
	262, 783,
	266, 783,
	-2, 392,
	-1, 1244,
	126, 885,
	204, 885,
	233, 885,
	-2, 845,
	-1, 1328,
	113, 849,
	126, 849,
	178, 849,
	204, 849,
	233, 849,
	241, 849,
	363, 849,
	-2, 1204,
	-1, 1374,
	415, 1319,
	-2, 0,
	-1, 1381,
	184, 783,
	262, 783,
	266, 783,
	-2, 778,
	-1, 1410,
	415, 1319,
	-2, 0,
	-1, 1418,
	113, 849,
	126, 849,
	178, 849,
	204, 849,
	233, 849,
	241, 849,
	363, 849,
	-2, 952,
	-1, 1615,
	184, 783,
	262, 783,
	266, 783,
	-2, 394,
	-1, 1723,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	395, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1102,
	-1, 1724,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	395, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1103,
	-1, 1725,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	395, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1104,
	-1, 1726,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	395, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1105,
	-1, 1727,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	395, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1106,
	-1, 1728,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	395, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1107,
	-1, 1729,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	395, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1108,
	-1, 1730,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	395, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1109,
	-1, 1742,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	395, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1121,
	-1, 1743,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	395, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1122,
	-1, 1744,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	395, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1123,
	-1, 1747,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1128,
	-1, 1753,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1130,
	-1, 1755,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1134,
	-1, 1756,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1135,
	-1, 1757,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1136,
	-1, 1758,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1137,
	-1, 1834,
	5, 1021,
	141, 1330,
	414, 1451,
	-2, 1442,
	-1, 1835,
	141, 1331,
	-2, 1675,
	-1, 1836,
	141, 1332,
	-2, 1560,
	-1, 1837,
	141, 1333,
	-2, 1501,
	-1, 1838,
	141, 1334,
	-2, 1528,
	-1, 1839,
	141, 1335,
	-2, 1559,
	-1, 1840,
	141, 1336,
	-2, 1621,
	-1, 1908,
	415, 1319,
	-2, 0,
	-1, 1918,
	1, 953,
	79, 953,
	113, 953,
	126, 953,
	142, 953,
	147, 953,
	149, 953,
	169, 953,
	178, 953,
	187, 953,
	200, 953,
	204, 953,
	219, 953,
	233, 953,
	236, 953,
	241, 953,
	284, 953,
	286, 953,
	363, 953,
	371, 953,
	383, 953,
	384, 953,
	394, 953,
	413, 953,
	415, 953,
	417, 953,
	418, 953,
	419, 953,
	-2, 952,
	-1, 1920,
	414, 1428,
	-2, 1440,
	-1, 2000,
	415, 1389,
	419, 1389,
	-2, 1416,
	-1, 2121,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1129,
	-1, 2122,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1131,
	-1, 2127,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1132,
	-1, 2145,
	246, 1290,
	-2, 1292,
	-1, 2354,
	252, 873,
	-2, 699,
	-1, 2417,
	184, 783,
	262, 783,
	266, 783,
	-2, 391,
	-1, 2432,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1133,
	-1, 2437,
	182, 0,
	183, 0,
	226, 0,
	-2, 1151,
	-1, 2446,
	246, 1291,
	-2, 1293,
	-1, 2495,
	13, 0,
	14, 0,
	15, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1181,
	-1, 2496,
	13, 0,
	14, 0,
	15, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1182,
	-1, 2497,
	13, 0,
	14, 0,
	15, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1183,
	-1, 2501,
	13, 0,
	14, 0,
	15, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1187,
	-1, 2502,
	13, 0,
	14, 0,
	15, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1188,
	-1, 2503,
	13, 0,
	14, 0,
	15, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1189,
	-1, 2544,
	414, 1429,
	-2, 1441,
	-1, 2658,
	182, 0,
	183, 0,
	226, 0,
	-2, 1152,
	-1, 2661,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1155,
	-1, 2662,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1157,
	-1, 2807,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1156,
	-1, 2808,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1158,
	-1, 2818,
	182, 0,
	-2, 1190,
	-1, 2907,
	182, 0,
	-2, 1191,
	-1, 3005,
	38, 0,
	158, 0,
	203, 0,
	316, 0,
	392, 0,
	400, 0,
	-2, 1678,
}

const sqlPrivate = 57344

const sqlLast = 56941

var sqlAct = [...]int{

	763, 1784, 2760, 2593, 3004, 2847, 3013, 2026, 3067, 2980,
	2981, 2983, 3015, 2967, 2034, 3014, 2836, 2071, 2467, 3003,
	2911, 2775, 1710, 1110, 930, 2115, 2798, 760, 2611, 1052,
	2606, 2715, 737, 1034, 2730, 1546, 2554, 2361, 2403, 1770,
	206, 2616, 2363, 2823, 2401, 482, 2373, 2002, 1074, 1247,
	2368, 1998, 482, 1408, 1106, 2023, 1912, 1547, 2632, 482,
	1332, 482, 2262, 2555, 482, 206, 945, 482, 482, 1499,
	1498, 2221, 2693, 1902, 482, 2238, 2001, 2035, 1507, 1923,
	1495, 1389, 482, 1932, 1504, 939, 1447, 1809, 2220, 2249,
	2520, 1913, 1701, 1985, 1783, 711, 128, 703, 902, 2157,
	2912, 1782, 1640, 1696, 531, 1335, 759, 802, 477, 2337,
	2553, 1381, 2372, 2111, 746, 1463, 1496, 1469, 1390, 1428,
	923, 528, 1426, 552, 27, 1791, 1767, 1960, 1986, 1169,
	2761, 1360, 1803, 1362, 1417, 1999, 932, 1959, 1093, 1103,
	564, 895, 1121, 476, 2028, 1894, 2005, 900, 71, 1399,
	479, 610, 877, 207, 1871, 128, 1248, 208, 590, 1323,
	1246, 1879, 727, 1830, 482, 482, 1915, 1639, 604, 567,
	1038, 754, 202, 1439, 761, 1514, 1421, 2144, 1090, 134,
	639, 1252, 875, 1380, 135, 2536, 2027, 707, 2537, 3094,
	465, 1522, 707, 1888, 478, 482, 482, 482, 935, 482,
	482, 948, 948, 1113, 1522, 752, 1522, 583, 3088, 2073,
	482, 482, 1888, 172, 1409, 465, 3087, 2279, 1987, 3064,
	1888, 2407, 2379, 2729, 3061, 525, 2430, 3039, 1478, 3033,
	576, 2729, 3032, 1888, 468, 702, 1888, 578, 3029, 1987,
	3026, 717, 3030, 1534, 3027, 3023, 3001, 3000, 1472, 1478,
	1478, 1478, 1484, 2999, 942, 2380, 2998, 1534, 2962, 468,
	1534, 2949, 2063, 2942, 2523, 1478, 2940, 2729, 128, 2938,
	2729, 2909, 2895, 2729, 2883, 2063, 2640, 2878, 2729, 898,
	2876, 1478, 2866, 2865, 2729, 708, 1478, 1478, 2858, 881,
	2857, 882, 1478, 918, 2729, 144, 27, 2829, 944, 2809,
	38, 1478, 2755, 2063, 1888, 926, 1888, 2963, 695, 2055,
	2751, 39, 139, 694, 1888, 2728, 2660, 2630, 712, 2729,
	2063, 2623, 2350, 2148, 2622, 43, 2191, 2192, 2623, 2149,
	878, 878, 2191, 2192, 2896, 1881, 916, 920, 925, 45,
	141, 2532, 1143, 1478, 1152, 2533, 904, 879, 892, 1534,
	2526, 44, 2441, 50, 1888, 2392, 1888, 2191, 2192, 2342,
	465, 1478, 2235, 1040, 2186, 1888, 1888, 1039, 1888, 2185,
	2156, 2179, 2178, 1888, 51, 2180, 1888, 896, 53, 2082,
	169, 2062, 57, 1888, 2206, 2063, 142, 1806, 2031, 1263,
	1264, 58, 70, 2051, 1520, 1994, 59, 1888, 1887, 1478,
	2523, 928, 1888, 1538, 468, 1880, 1618, 1539, 710, 1144,
	2640, 1975, 1921, 2508, 1266, 2443, 171, 2342, 2114, 60,
	2093, 1477, 1523, 1385, 1786, 1037, 2381, 1140, 61, 169,
	1139, 1138, 1637, 1137, 1136, 1523, 1135, 1523, 1134, 1265,
	1133, 1132, 1131, 1130, 1807, 2382, 1822, 1129, 1128, 1127,
	1126, 1125, 2197, 1124, 883, 170, 2191, 2192, 2197, 2209,
	2210, 2211, 880, 1041, 163, 171, 701, 700, 2191, 2192,
	699, 698, 164, 697, 2657, 693, 692, 691, 690, 689,
	688, 687, 686, 2197, 685, 684, 683, 679, 678, 677,
	637, 482, 482, 136, 482, 935, 935, 482, 636, 1144,
	482, 635, 634, 482, 170, 633, 1808, 1805, 632, 482,
	631, 630, 629, 628, 2206, 1271, 627, 626, 625, 482,
	482, 482, 482, 482, 935, 935, 2207, 624, 62, 623,
	622, 935, 2207, 2379, 621, 63, 620, 619, 1263, 1264,
	618, 617, 136, 616, 615, 1333, 614, 599, 1114, 598,
	559, 597, 596, 595, 73, 137, 64, 2207, 65, 1530,
	66, 39, 482, 1266, 143, 594, 516, 1905, 515, 67,
	1820, 488, 1521, 482, 1680, 43, 169, 487, 486, 471,
	470, 469, 2197, 192, 191, 1079, 190, 81, 1265, 1058,
	108, 169, 1810, 482, 2197, 1076, 189, 188, 2708, 140,
	1478, 187, 1067, 558, 482, 186, 185, 184, 1107, 2208,
	183, 1911, 171, 1880, 1064, 2208, 182, 1096, 1096, 1096,
	944, 181, 1144, 180, 179, 178, 177, 171, 2212, 176,
	175, 174, 560, 173, 113, 2667, 2624, 2541, 2275, 2154,
	2208, 58, 562, 138, 935, 2103, 59, 1995, 1990, 1643,
	1092, 170, 1416, 1818, 1816, 1425, 2207, 1339, 1097, 1100,
	163, 1183, 1054, 1043, 1271, 3020, 170, 1122, 164, 3002,
	2985, 1145, 2974, 2903, 1259, 163, 2879, 2792, 61, 708,
	2899, 482, 1804, 164, 2692, 559, 2691, 2897, 2690, 136,
	3092, 2783, 4, 2846, 2683, 2679, 39, 2678, 1068, 1071,
	2677, 2673, 2191, 2192, 2030, 755, 2068, 169, 2672, 2671,
	43, 1177, 2191, 2192, 2670, 1181, 2663, 1167, 2202, 2200,
	2201, 2193, 2194, 2195, 2196, 2198, 2199, 2193, 2194, 2195,
	2196, 2198, 2199, 2639, 2637, 2540, 2517, 1330, 558, 2208,
	2516, 2515, 2453, 171, 2341, 2274, 2345, 2265, 2231, 2202,
	2200, 2201, 2193, 2194, 2195, 2196, 2198, 2199, 2219, 2190,
	2187, 2184, 1778, 2183, 2181, 2162, 2161, 560, 946, 1035,
	2145, 1918, 1164, 1259, 891, 1258, 58, 562, 62, 1263,
	1264, 59, 170, 1543, 1267, 1268, 1269, 1270, 1272, 1273,
	1482, 163, 1245, 1343, 1244, 1336, 3075, 1326, 3074, 164,
	1053, 2469, 2993, 2988, 1266, 137, 64, 2944, 65, 2935,
	2934, 2930, 2929, 61, 1481, 2923, 2920, 2894, 2893, 1772,
	136, 1184, 1243, 2842, 2820, 2770, 169, 2765, 2197, 1265,
	1638, 1961, 2763, 2750, 2423, 2734, 2688, 561, 2197, 2110,
	108, 2203, 2204, 2205, 2641, 2609, 2600, 1191, 2202, 2200,
	2201, 2193, 2194, 2195, 2196, 2198, 2199, 2599, 2914, 1821,
	1336, 2597, 171, 2193, 2194, 2195, 2196, 2198, 2199, 2782,
	2574, 2573, 482, 2563, 2562, 1263, 1264, 482, 2528, 2436,
	2398, 1306, 1307, 1308, 708, 1779, 2396, 1255, 1256, 2326,
	2310, 695, 1396, 2289, 1260, 2288, 694, 2234, 2218, 842,
	1266, 170, 2207, 1312, 482, 1271, 2171, 2170, 1387, 2167,
	163, 2141, 2136, 62, 1363, 1368, 2070, 1908, 164, 1899,
	1263, 1264, 1886, 1814, 1490, 1265, 1350, 1349, 1348, 1347,
	1293, 1294, 1295, 1285, 1410, 1269, 1270, 1272, 1273, 136,
	137, 64, 2791, 65, 1388, 1266, 1379, 1378, 1374, 1358,
	1373, 1372, 1361, 2255, 1370, 1406, 1364, 1369, 1366, 1365,
	1356, 169, 1355, 1354, 1371, 1353, 1352, 1393, 1394, 2099,
	1265, 1351, 561, 1340, 1327, 108, 1326, 1163, 1148, 1286,
	1118, 2065, 2665, 1819, 2636, 2208, 2535, 2531, 2147, 1900,
	128, 2394, 1288, 1289, 1290, 1291, 2289, 171, 1324, 2191,
	2192, 1271, 1423, 1422, 1637, 1412, 2081, 2364, 2788, 898,
	1637, 1440, 2643, 1637, 2642, 2538, 1407, 1987, 1416, 1376,
	1158, 2872, 2330, 1303, 1313, 1377, 1293, 1294, 1295, 2325,
	1384, 1180, 2321, 1415, 1241, 2309, 170, 935, 482, 2226,
	1446, 2225, 2572, 878, 948, 163, 1382, 1434, 2224, 1419,
	708, 2080, 1963, 164, 482, 948, 482, 482, 2120, 1386,
	1611, 1176, 1287, 1624, 206, 1375, 1817, 1815, 1301, 1345,
	2900, 2073, 904, 1470, 136, 1286, 904, 2898, 482, 482,
	873, 1500, 2409, 2320, 1459, 482, 2027, 482, 1491, 482,
	1353, 2824, 2471, 482, 1792, 2200, 2201, 2193, 2194, 2195,
	2196, 2198, 2199, 1411, 1503, 2845, 2152, 896, 1359, 2195,
	2196, 2198, 2199, 874, 1353, 3031, 1465, 3021, 3028, 1544,
	1537, 2375, 2549, 2977, 1234, 1806, 2607, 2056, 524, 505,
	753, 197, 3055, 3054, 2742, 495, 2948, 2419, 2083, 1219,
	522, 1292, 482, 206, 482, 482, 869, 1188, 867, 1511,
	935, 865, 206, 482, 1486, 1665, 482, 482, 1287, 1232,
	1934, 863, 482, 1509, 1220, 1613, 860, 3022, 3091, 2871,
	2870, 1487, 1925, 1601, 1267, 1268, 1269, 1270, 1272, 1273,
	2868, 1304, 1807, 2577, 948, 1515, 890, 1515, 465, 1441,
	2867, 1040, 2587, 2024, 482, 1039, 2582, 2581, 506, 482,
	1677, 1233, 1342, 2546, 206, 482, 2545, 482, 1476, 482,
	523, 482, 521, 482, 465, 1625, 1438, 494, 2166, 1925,
	2165, 1429, 2164, 482, 1430, 482, 1092, 2163, 2123, 2054,
	1924, 1489, 468, 482, 482, 482, 1494, 2013, 1442, 1443,
	1475, 1605, 1178, 1937, 1808, 1805, 1056, 1628, 1627, 1980,
	1637, 1634, 1974, 1970, 1951, 1607, 1754, 1302, 468, 1518,
	1383, 1036, 482, 1513, 1516, 1305, 948, 1276, 1274, 1275,
	1267, 1268, 1269, 1270, 1272, 1273, 721, 2947, 1615, 2759,
	489, 1866, 1672, 1186, 1865, 1864, 1712, 1179, 2902, 2422,
	1984, 706, 2395, 465, 1678, 1645, 2592, 1651, 1683, 1218,
	1993, 1422, 465, 1657, 1636, 1658, 1431, 1659, 681, 1660,
	1164, 1661, 1944, 1612, 1542, 1540, 589, 2191, 2192, 1433,
	1273, 1702, 1709, 573, 1602, 2996, 1943, 588, 1517, 2849,
	1810, 1670, 1076, 1330, 2565, 524, 1769, 468, 1154, 2460,
	948, 1631, 1796, 1067, 589, 1647, 468, 1641, 1629, 3017,
	519, 1810, 1769, 1215, 465, 1674, 705, 1650, 1828, 2112,
	2113, 2463, 2066, 1262, 1936, 1435, 3046, 1833, 1833, 2370,
	499, 1844, 1846, 1676, 1851, 2317, 1656, 1162, 1776, 3077,
	1792, 1874, 1967, 1774, 482, 520, 482, 1157, 2959, 2312,
	1878, 2371, 1458, 492, 508, 507, 1541, 3054, 468, 2199,
	1216, 2461, 1638, 1961, 1682, 1603, 1681, 1444, 1638, 1961,
	948, 1638, 1961, 1700, 2301, 2960, 482, 523, 482, 707,
	1804, 2926, 1572, 1240, 1829, 482, 948, 518, 1155, 1853,
	482, 1787, 695, 2418, 1436, 695, 695, 1692, 482, 2370,
	1693, 1694, 1789, 2197, 1461, 2420, 482, 1810, 2300, 1632,
	1436, 3045, 1522, 1357, 517, 2583, 2015, 3018, 482, 498,
	2329, 935, 2575, 1971, 1436, 2804, 2815, 1935, 2874, 1863,
	1321, 2169, 482, 948, 1917, 708, 2307, 1926, 482, 482,
	708, 1185, 1780, 669, 1777, 1895, 198, 1810, 1916, 707,
	2645, 482, 1525, 1930, 482, 1527, 871, 2631, 1529, 870,
	1194, 861, 1532, 716, 861, 1906, 1954, 1664, 898, 1922,
	1938, 1940, 1153, 2652, 862, 3016, 1187, 2207, 482, 861,
	482, 1055, 482, 1919, 3019, 482, 1981, 482, 898, 482,
	1841, 482, 482, 1953, 482, 935, 935, 935, 1876, 2566,
	935, 704, 1875, 1901, 522, 482, 1982, 1909, 1910, 1896,
	1897, 1892, 878, 1202, 1930, 1884, 1885, 1251, 199, 2049,
	2050, 193, 3053, 1948, 2805, 495, 926, 2411, 1419, 708,
	944, 670, 3044, 1432, 1231, 904, 1929, 1891, 1968, 1946,
	493, 2038, 669, 1953, 2850, 2045, 3051, 1952, 2774, 1977,
	1466, 1962, 1964, 1965, 1966, 904, 472, 2334, 2772, 1969,
	2208, 3070, 716, 491, 1462, 482, 896, 1751, 1930, 1429,
	3078, 1479, 1430, 2021, 2019, 490, 521, 1493, 2800, 2047,
	2041, 1429, 1485, 1096, 1430, 1096, 896, 1096, 465, 944,
	944, 1040, 499, 2303, 128, 1988, 2125, 1679, 2029, 2414,
	2029, 128, 500, 682, 948, 201, 482, 494, 1638, 1635,
	2058, 198, 1768, 2305, 482, 492, 482, 496, 572, 200,
	2052, 2033, 1398, 2042, 1972, 2043, 1616, 2044, 1395, 1649,
	670, 2046, 468, 1156, 1261, 1775, 1122, 482, 482, 482,
	2057, 482, 2053, 1523, 1151, 2067, 2040, 1142, 1161, 485,
	1474, 1402, 2860, 2304, 1431, 2338, 196, 671, 2859, 2076,
	482, 2077, 2069, 2840, 1173, 1623, 1431, 1433, 2917, 2799,
	2504, 2201, 2193, 2194, 2195, 2196, 2198, 2199, 1405, 1433,
	1364, 498, 1371, 199, 1436, 1402, 2413, 1749, 1752, 1361,
	2072, 194, 2105, 2738, 3083, 714, 1893, 669, 2048, 524,
	2410, 2686, 1250, 2086, 2095, 2075, 2012, 2084, 2548, 1403,
	1468, 1644, 1405, 1435, 519, 2088, 1228, 716, 128, 2285,
	2281, 1195, 128, 197, 1621, 1435, 2022, 2020, 1467, 2263,
	1400, 3068, 1748, 195, 2139, 2104, 944, 2106, 1622, 473,
	1512, 2142, 1174, 1403, 2100, 2089, 1175, 1203, 2102, 520,
	672, 715, 2126, 2968, 1502, 1464, 671, 2087, 2119, 2801,
	2159, 2160, 1401, 1501, 1497, 1492, 2459, 514, 1196, 1688,
	201, 1193, 2412, 1955, 1669, 2109, 1619, 1442, 1443, 2251,
	1249, 523, 2107, 1398, 200, 670, 2612, 495, 673, 509,
	2505, 518, 3069, 1711, 1229, 1404, 2776, 2506, 1436, 2841,
	1250, 2291, 493, 2290, 2741, 2118, 1646, 2252, 1173, 1251,
	1436, 2740, 2264, 1890, 1552, 1889, 1448, 1997, 474, 2737,
	2217, 196, 3071, 3082, 1427, 491, 581, 1996, 2687, 1404,
	1874, 1874, 1874, 1452, 705, 2233, 575, 490, 2124, 2594,
	2343, 1168, 1633, 948, 1078, 1750, 1402, 2236, 2245, 672,
	1077, 3058, 2243, 2244, 2155, 2762, 194, 1689, 1230, 482,
	1089, 2333, 482, 475, 500, 2694, 2097, 1793, 2098, 494,
	482, 482, 948, 1405, 1449, 482, 2151, 2339, 1249, 496,
	2521, 708, 2838, 482, 482, 482, 1174, 673, 197, 482,
	1175, 1400, 482, 1813, 2771, 1956, 1957, 1087, 195, 482,
	482, 482, 482, 482, 1403, 2272, 2223, 1238, 3060, 557,
	35, 671, 482, 2839, 2250, 556, 34, 2819, 2259, 482,
	2257, 1432, 2685, 1401, 2260, 1812, 2268, 2269, 2591, 1552,
	1552, 482, 935, 1432, 3, 482, 2282, 2739, 1453, 2222,
	2435, 948, 2182, 555, 31, 482, 2133, 2278, 2286, 898,
	2254, 948, 1930, 1920, 554, 77, 948, 898, 898, 2237,
	2311, 898, 2292, 2266, 2295, 2101, 2131, 708, 482, 2135,
	482, 1225, 482, 2074, 1223, 482, 935, 935, 935, 1213,
	482, 2277, 482, 2228, 2229, 2230, 482, 1979, 553, 76,
	1404, 482, 1950, 482, 1211, 2258, 1454, 1455, 859, 2096,
	482, 2276, 713, 1209, 672, 1450, 1483, 1239, 1571, 580,
	1076, 1149, 1434, 2273, 2327, 482, 904, 935, 2240, 574,
	2322, 510, 1663, 1173, 904, 904, 2247, 2248, 904, 2306,
	2253, 2308, 1451, 2313, 482, 482, 1207, 1434, 1088, 1067,
	2078, 2271, 673, 2331, 2377, 2316, 1237, 896, 2347, 1666,
	2400, 2318, 2344, 2323, 2374, 896, 896, 2328, 2128, 896,
	2324, 2314, 1653, 2374, 482, 2315, 1470, 2340, 511, 2129,
	2349, 2365, 1470, 2134, 1604, 1086, 550, 22, 2357, 482,
	2359, 2393, 35, 1067, 2366, 1346, 747, 3012, 34, 551,
	23, 2399, 2589, 1489, 2348, 2352, 549, 29, 548, 20,
	1473, 1174, 2356, 2965, 512, 1175, 513, 914, 1456, 2287,
	1224, 2712, 2383, 1222, 1552, 948, 31, 2293, 1212, 2297,
	2298, 2726, 2570, 1571, 1571, 2568, 466, 77, 546, 19,
	482, 480, 2438, 1210, 2448, 2319, 547, 18, 501, 708,
	864, 866, 1208, 2415, 2416, 527, 2723, 568, 2362, 2547,
	527, 466, 1205, 568, 586, 2417, 2421, 128, 1662, 2376,
	593, 76, 536, 15, 537, 16, 1199, 2360, 613, 2358,
	2025, 2094, 2017, 1085, 2016, 1206, 2014, 2429, 2428, 2353,
	2354, 2355, 2426, 2424, 545, 56, 2011, 2724, 544, 55,
	1536, 1702, 2475, 1535, 2518, 1533, 2442, 535, 54, 1531,
	2130, 2479, 1528, 2888, 543, 12, 2444, 2132, 1526, 1702,
	2484, 1524, 2462, 2464, 2465, 2447, 2455, 2456, 2457, 482,
	2391, 1471, 1765, 534, 49, 1460, 2474, 541, 46, 1457,
	2468, 2472, 1063, 1445, 482, 1437, 948, 2481, 2116, 1549,
	542, 47, 1763, 3055, 2483, 2514, 1253, 533, 48, 22,
	527, 527, 2510, 540, 7, 539, 6, 2790, 910, 2789,
	1642, 2542, 23, 538, 37, 532, 36, 2389, 2633, 29,
	2511, 20, 2580, 2509, 2890, 2534, 1942, 2560, 1925, 2621,
	2757, 480, 480, 480, 1983, 940, 480, 2406, 2586, 1941,
	128, 1204, 2522, 2079, 2524, 2525, 466, 1042, 2527, 2519,
	1978, 19, 2578, 482, 482, 1198, 482, 2117, 1571, 18,
	2590, 482, 1084, 2719, 2584, 1973, 2720, 1925, 2585, 948,
	898, 948, 1949, 2588, 935, 2543, 1254, 2928, 1939, 887,
	2731, 2551, 1609, 1610, 1759, 15, 1197, 16, 2905, 2601,
	482, 563, 1760, 2695, 1958, 1761, 2625, 2576, 2614, 1766,
	2722, 888, 1945, 1257, 1549, 1549, 2559, 56, 1976, 2725,
	2539, 55, 2964, 1953, 1947, 2613, 1930, 2768, 482, 2032,
	54, 948, 482, 482, 948, 482, 2617, 12, 2018, 2595,
	2618, 2010, 2596, 482, 1877, 2605, 1614, 904, 1545, 2530,
	2598, 948, 2608, 2604, 2610, 2615, 49, 2384, 2385, 2386,
	46, 2387, 2388, 2038, 3066, 2603, 2390, 2649, 582, 2602,
	2242, 2634, 2619, 47, 3081, 2654, 2627, 2626, 896, 2638,
	48, 1333, 1263, 1264, 904, 2635, 7, 2466, 6, 2650,
	482, 889, 2659, 2397, 1263, 1264, 37, 2646, 36, 2270,
	2191, 2192, 1263, 1264, 904, 2091, 2090, 1266, 898, 1190,
	2091, 2092, 1843, 2721, 1189, 2561, 904, 2647, 1802, 1227,
	904, 2668, 1226, 2458, 2655, 904, 1343, 1341, 2351, 2786,
	2629, 2648, 1265, 944, 1236, 2579, 1762, 1235, 1221, 1217,
	1214, 2651, 1200, 1764, 1265, 1160, 1617, 2579, 1691, 482,
	872, 2579, 680, 2848, 667, 2299, 2579, 1652, 1201, 948,
	482, 1654, 948, 2256, 1898, 2958, 482, 482, 482, 2674,
	2168, 2910, 2814, 2684, 1811, 904, 1344, 2240, 2336, 52,
	2556, 740, 2713, 2336, 482, 2550, 2004, 2003, 951, 482,
	1626, 482, 764, 1832, 482, 482, 482, 482, 482, 1549,
	1703, 766, 482, 482, 935, 2700, 896, 1550, 948, 769,
	2560, 2732, 935, 768, 2701, 2711, 2705, 2697, 2698, 2702,
	482, 482, 767, 1551, 1367, 765, 1548, 1119, 2036, 2709,
	657, 1930, 2703, 1630, 935, 2758, 1773, 480, 1062, 1790,
	480, 2769, 2150, 480, 482, 2560, 940, 1337, 732, 1082,
	2752, 898, 2743, 744, 743, 480, 1552, 2560, 2778, 1788,
	2748, 482, 482, 935, 935, 480, 480, 480, 480, 940,
	1854, 1147, 2767, 731, 2261, 2777, 2369, 2781, 1687, 2803,
	2644, 2756, 2108, 1684, 1930, 2567, 497, 2780, 948, 2559,
	2785, 2779, 2188, 2735, 2747, 2706, 1117, 1860, 1852, 2793,
	1076, 2806, 1848, 1242, 1322, 2037, 2794, 2374, 613, 1182,
	2569, 1067, 2571, 2378, 2064, 1695, 886, 2826, 904, 480,
	2696, 885, 884, 2753, 2559, 2982, 2979, 482, 2764, 948,
	2802, 1620, 2085, 482, 1315, 482, 2559, 948, 482, 1159,
	2773, 736, 2451, 2787, 2821, 2241, 482, 2346, 1060, 896,
	613, 1314, 948, 868, 2919, 1172, 2856, 904, 1171, 2835,
	1170, 2827, 2828, 2284, 3076, 2927, 2784, 2564, 2976, 168,
	165, 167, 2869, 166, 2853, 2332, 2852, 2560, 2854, 80,
	2833, 33, 32, 2832, 2710, 2831, 2851, 2813, 2561, 1552,
	107, 106, 904, 482, 105, 482, 1930, 104, 935, 103,
	102, 2699, 101, 482, 904, 100, 99, 2754, 2744, 98,
	97, 2560, 2873, 2560, 96, 2749, 95, 94, 2560, 93,
	2862, 92, 2886, 2561, 91, 948, 90, 480, 89, 88,
	87, 86, 85, 84, 83, 2561, 2736, 2887, 82, 2885,
	609, 606, 79, 78, 2844, 482, 2745, 2746, 2892, 2891,
	1571, 482, 30, 25, 111, 2830, 2559, 2617, 2901, 482,
	112, 24, 1552, 2544, 75, 74, 2795, 2796, 28, 17,
	11, 2922, 2766, 21, 133, 2916, 2908, 132, 131, 130,
	129, 14, 13, 126, 127, 125, 2915, 124, 482, 482,
	2559, 2882, 2559, 2884, 2875, 482, 2877, 2559, 123, 1552,
	1552, 2881, 2939, 2941, 122, 121, 935, 2913, 10, 8,
	2924, 482, 2880, 110, 935, 935, 9, 1552, 1552, 482,
	2797, 482, 2408, 482, 904, 2936, 68, 2961, 69, 26,
	2945, 42, 2904, 2943, 41, 40, 2946, 2952, 2953, 109,
	159, 482, 158, 2954, 482, 2971, 157, 482, 156, 948,
	152, 2931, 2834, 1552, 904, 2561, 2986, 2987, 904, 155,
	904, 2984, 2951, 2989, 2991, 904, 2990, 153, 2992, 154,
	2973, 2978, 151, 120, 2925, 161, 160, 2997, 149, 146,
	148, 150, 147, 1571, 482, 2579, 145, 2933, 2995, 2561,
	162, 2561, 2560, 2937, 119, 118, 2561, 117, 946, 116,
	3009, 1035, 115, 3011, 3010, 114, 5, 2, 1, 482,
	0, 0, 3035, 0, 3036, 0, 3037, 482, 593, 0,
	0, 2957, 0, 527, 0, 3024, 0, 0, 0, 0,
	3043, 3040, 0, 482, 0, 0, 3041, 3042, 0, 0,
	0, 2560, 0, 0, 1414, 2975, 0, 3050, 910, 3049,
	480, 3052, 0, 0, 0, 2889, 1571, 3057, 3056, 3062,
	3063, 2984, 3059, 0, 1854, 1854, 0, 904, 3065, 0,
	0, 2559, 0, 0, 0, 2994, 0, 0, 0, 0,
	2038, 1549, 0, 3073, 3072, 0, 0, 0, 0, 0,
	3079, 3080, 0, 1571, 1571, 0, 3084, 3085, 2579, 0,
	0, 0, 0, 3086, 0, 0, 2932, 0, 0, 3089,
	3090, 1571, 1571, 0, 3093, 0, 0, 3095, 0, 0,
	2559, 0, 0, 2726, 3038, 0, 0, 0, 2950, 2707,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 904,
	0, 2191, 2192, 0, 2209, 2210, 2211, 1571, 2723, 0,
	0, 2716, 1854, 1854, 1854, 0, 0, 0, 2863, 2864,
	0, 0, 1552, 0, 2714, 0, 0, 0, 0, 2718,
	2561, 2955, 0, 2956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 466, 0, 0, 0, 904, 2724,
	0, 0, 0, 0, 0, 0, 2972, 0, 0, 2206,
	1042, 0, 480, 1488, 0, 0, 0, 0, 0, 0,
	466, 0, 0, 0, 1549, 0, 2717, 2137, 2138, 2561,
	0, 0, 0, 0, 1508, 1508, 0, 0, 0, 0,
	0, 480, 0, 480, 0, 480, 0, 0, 0, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2811, 0, 0, 0, 0,
	0, 3034, 0, 0, 0, 0, 0, 2197, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1549, 613, 466,
	1042, 568, 0, 0, 0, 0, 2811, 0, 466, 1042,
	0, 0, 940, 480, 1711, 2214, 2215, 2216, 613, 0,
	0, 0, 1263, 1264, 0, 2719, 0, 0, 2720, 1711,
	0, 0, 0, 0, 1549, 1549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1266, 0, 0,
	613, 2207, 1549, 1549, 0, 480, 0, 0, 0, 0,
	466, 480, 2722, 480, 0, 480, 1571, 480, 0, 480,
	0, 2725, 1265, 0, 0, 0, 0, 0, 0, 1667,
	1285, 1668, 0, 0, 0, 0, 0, 0, 1549, 480,
	480, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1035, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 0, 0, 0, 1552, 0, 0, 0, 0, 0,
	0, 1854, 1854, 0, 2208, 0, 0, 0, 0, 1288,
	1289, 1290, 1291, 0, 0, 0, 0, 0, 1271, 0,
	0, 0, 0, 0, 1333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2721, 0, 0, 0, 0,
	0, 0, 559, 1293, 1294, 1295, 0, 0, 1552, 0,
	0, 0, 0, 39, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854,
	1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 0,
	1854, 0, 1286, 0, 0, 558, 1711, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2203, 2204, 2205, 0,
	593, 0, 527, 2202, 2200, 2201, 2193, 2194, 2195, 2196,
	2198, 2199, 0, 0, 560, 0, 1552, 910, 1263, 1264,
	0, 0, 0, 58, 562, 0, 0, 0, 59, 0,
	0, 0, 527, 0, 527, 0, 0, 910, 0, 841,
	0, 480, 0, 1266, 2433, 2434, 1933, 0, 1292, 0,
	0, 0, 0, 0, 480, 0, 0, 1549, 0, 0,
	61, 0, 480, 0, 0, 1287, 0, 0, 1265, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 1571, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 0, 466, 1989, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2000, 0, 0,
	1042, 0, 0, 2485, 2486, 2487, 2488, 2489, 2490, 2491,
	2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501,
	2502, 2503, 1571, 2507, 1933, 0, 527, 0, 480, 0,
	0, 480, 0, 480, 1271, 480, 0, 480, 480, 0,
	940, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 1933, 0, 0, 0, 0, 0, 0, 0, 1293,
	1294, 1295, 0, 0, 1276, 1274, 1275, 1267, 1268, 1269,
	1270, 1272, 1273, 0, 0, 0, 0, 137, 64, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	1571, 0, 0, 0, 0, 0, 0, 0, 1286, 561,
	0, 568, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	950, 950, 0, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 0, 0, 0,
	1042, 0, 1042, 0, 0, 0, 0, 0, 0, 1263,
	1264, 0, 0, 170, 0, 0, 0, 0, 483, 0,
	0, 0, 163, 480, 480, 480, 0, 480, 0, 0,
	164, 1287, 0, 0, 1266, 0, 0, 0, 0, 1549,
	0, 0, 0, 0, 0, 0, 480, 0, 0, 1263,
	1264, 136, 1296, 1297, 1298, 1306, 1307, 1308, 205, 1265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1266, 0, 0, 1312, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1549, 0, 1397, 0, 0, 0, 1265,
	0, 0, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 1282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1271, 2191, 2192, 0, 2209,
	2210, 2211, 1275, 1267, 1268, 1269, 1270, 1272, 1273, 0,
	0, 0, 0, 0, 2656, 0, 0, 0, 0, 0,
	1293, 1294, 1295, 0, 0, 0, 1288, 1289, 1290, 1291,
	0, 1549, 0, 0, 0, 1271, 529, 0, 0, 0,
	0, 0, 1854, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2206, 0, 0, 1303, 1313, 559,
	1293, 1294, 1295, 0, 0, 0, 0, 0, 0, 1286,
	39, 0, 0, 0, 0, 0, 936, 0, 0, 949,
	949, 1854, 0, 0, 43, 0, 0, 0, 910, 1280,
	1281, 0, 0, 0, 719, 0, 910, 910, 0, 0,
	910, 0, 1301, 0, 0, 527, 0, 0, 527, 1286,
	0, 0, 558, 0, 0, 0, 527, 527, 0, 0,
	0, 527, 2197, 0, 937, 937, 0, 0, 0, 480,
	1933, 2280, 0, 0, 0, 1933, 0, 0, 2280, 0,
	0, 560, 0, 0, 0, 1933, 2280, 1933, 2280, 2280,
	58, 562, 1287, 937, 937, 59, 0, 0, 480, 0,
	937, 0, 0, 0, 0, 1488, 0, 0, 2212, 0,
	0, 0, 0, 0, 0, 1292, 1854, 480, 0, 0,
	0, 940, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 480, 1287, 0, 559, 2818, 2207, 0, 0, 0,
	0, 0, 0, 0, 0, 39, 0, 0, 0, 0,
	0, 0, 0, 0, 1508, 1304, 1508, 0, 480, 43,
	0, 480, 0, 0, 0, 0, 480, 0, 480, 0,
	0, 0, 940, 0, 2843, 0, 0, 1933, 0, 527,
	0, 0, 0, 0, 0, 0, 1933, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1042, 1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273,
	0, 0, 0, 937, 0, 0, 560, 0, 0, 2208,
	2404, 1042, 0, 0, 0, 58, 562, 62, 0, 0,
	59, 1302, 0, 0, 1277, 1278, 1284, 1283, 1279, 1305,
	0, 1276, 1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273,
	2425, 0, 0, 0, 137, 64, 0, 65, 0, 0,
	0, 0, 61, 0, 0, 480, 0, 0, 0, 2907,
	0, 0, 0, 0, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 2059, 0, 561, 0, 0, 108,
	0, 0, 0, 0, 0, 39, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 43,
	0, 171, 0, 936, 936, 0, 2470, 0, 0, 0,
	0, 2203, 2204, 2205, 0, 0, 0, 0, 2202, 2200,
	2201, 2193, 2194, 2195, 2196, 2198, 2199, 2060, 0, 0,
	0, 0, 936, 936, 0, 0, 0, 0, 0, 936,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	0, 0, 62, 0, 0, 0, 2061, 164, 0, 1044,
	1046, 1049, 0, 0, 0, 0, 562, 0, 0, 2191,
	2192, 0, 2209, 2210, 2211, 0, 0, 0, 530, 137,
	64, 0, 65, 0, 0, 0, 0, 2440, 0, 910,
	0, 0, 0, 0, 0, 527, 0, 0, 0, 0,
	169, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	527, 561, 0, 0, 108, 0, 0, 0, 0, 2191,
	2192, 0, 2209, 2210, 2211, 0, 2558, 2206, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 2439, 0, 0,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	0, 0, 936, 0, 0, 0, 0, 0, 1414, 0,
	1146, 0, 1414, 0, 0, 0, 1150, 1414, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 2206, 0, 1933,
	1508, 0, 1508, 0, 163, 0, 0, 480, 0, 0,
	0, 0, 164, 0, 719, 2197, 0, 0, 719, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 1933, 910, 0, 0,
	741, 72, 0, 0, 0, 0, 0, 0, 0, 137,
	64, 0, 65, 0, 0, 0, 0, 0, 1263, 1264,
	0, 2212, 0, 0, 1042, 2197, 0, 0, 940, 480,
	169, 480, 0, 0, 0, 0, 0, 0, 0, 480,
	0, 561, 0, 1266, 108, 0, 0, 0, 0, 2207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 171, 0, 1265, 0,
	0, 2212, 0, 0, 0, 0, 937, 0, 0, 0,
	0, 0, 0, 950, 0, 0, 2675, 0, 1316, 1317,
	1318, 1319, 1320, 0, 950, 0, 0, 0, 0, 2207,
	0, 1329, 0, 0, 0, 170, 0, 0, 0, 0,
	0, 1338, 0, 0, 163, 0, 0, 0, 0, 0,
	0, 0, 164, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 2208, 0, 0, 0, 0, 709, 0, 0,
	910, 0, 0, 136, 1271, 1042, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 527, 0, 0, 0,
	0, 0, 1933, 2280, 1933, 0, 0, 0, 0, 1293,
	1294, 1295, 899, 72, 0, 0, 0, 0, 0, 2558,
	1042, 0, 2208, 0, 0, 1933, 0, 2280, 0, 937,
	1042, 1042, 480, 1933, 2280, 0, 0, 0, 480, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2558, 0, 1042, 2000, 1286, 0,
	0, 0, 0, 950, 0, 0, 2558, 0, 0, 0,
	0, 0, 0, 0, 2203, 2204, 2205, 0, 0, 0,
	1933, 2202, 2200, 2201, 2193, 2194, 2195, 2196, 2198, 2199,
	1391, 1391, 1391, 0, 0, 0, 0, 2404, 2404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2203, 2204, 2205, 0, 0, 0,
	0, 2202, 2200, 2201, 2193, 2194, 2195, 2196, 2198, 2199,
	0, 1287, 0, 0, 0, 950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 936, 0, 0, 0, 1933,
	0, 2280, 949, 0, 2837, 0, 0, 0, 0, 0,
	0, 0, 480, 949, 0, 0, 2558, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 950,
	2558, 0, 2558, 0, 0, 0, 0, 2558, 0, 480,
	0, 480, 2191, 2192, 0, 2209, 2210, 2211, 0, 1042,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1276, 1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 936, 0,
	205, 2470, 0, 0, 0, 0, 0, 527, 0, 950,
	2206, 0, 0, 0, 0, 2837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 0, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1933, 2280, 0, 0, 0, 1414,
	0, 480, 205, 0, 0, 0, 0, 0, 0, 0,
	937, 0, 0, 0, 0, 0, 0, 2280, 0, 0,
	0, 0, 950, 0, 0, 1042, 0, 1042, 2197, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 709, 0, 0, 0, 0, 0, 2969, 0, 0,
	1042, 2213, 0, 480, 719, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 949, 0, 0, 0, 0, 0,
	0, 2558, 0, 0, 2212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 937, 937, 937, 0, 0, 937,
	2470, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1042, 0, 0, 0, 0,
	2558, 0, 0, 1933, 0, 1685, 0, 1690, 0, 0,
	0, 0, 0, 1697, 0, 0, 0, 0, 949, 2837,
	0, 0, 0, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 0, 1753,
	0, 1755, 1756, 1757, 1758, 2208, 0, 0, 0, 0,
	0, 1263, 1264, 950, 1296, 1297, 1298, 1306, 1307, 1308,
	1781, 0, 0, 0, 0, 0, 0, 1329, 949, 1299,
	0, 0, 0, 0, 0, 0, 1266, 0, 0, 1312,
	0, 0, 696, 0, 949, 0, 0, 1823, 1824, 1825,
	1826, 1827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 0, 0, 1325, 0, 1328, 0, 1850, 1285,
	1862, 0, 0, 1334, 1867, 1872, 1282, 0, 0, 936,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2203, 2204, 2205,
	0, 0, 0, 0, 2202, 2200, 2201, 2193, 2194, 2195,
	2196, 2198, 2199, 0, 0, 0, 0, 0, 1288, 1289,
	1290, 1291, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2191, 2192, 0,
	2209, 2210, 2211, 936, 936, 936, 0, 0, 936, 1303,
	1313, 0, 1293, 1294, 1295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1991, 1992, 0,
	0, 0, 0, 1309, 1310, 0, 0, 0, 0, 0,
	0, 1280, 1281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1301, 2206, 0, 0, 0, 0,
	0, 1286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 1311, 1413, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2197, 0, 0, 0, 1292, 0, 0,
	0, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1263, 1264, 0, 1296, 1297,
	1298, 1306, 1307, 1308, 0, 0, 0, 1304, 0, 2212,
	0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
	1266, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 2207, 0, 0,
	950, 0, 0, 0, 0, 1265, 0, 0, 0, 0,
	950, 0, 0, 1285, 0, 950, 0, 0, 0, 0,
	1282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 937, 937, 0, 0,
	0, 0, 0, 1302, 0, 0, 1277, 1278, 1284, 1283,
	1279, 1305, 0, 1276, 1274, 1275, 1267, 1268, 1269, 1270,
	1272, 1273, 0, 0, 0, 0, 0, 0, 0, 0,
	2680, 0, 1288, 1289, 1290, 1291, 937, 0, 0, 0,
	2208, 1271, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2121, 2122, 0, 0, 0, 0,
	2127, 0, 0, 1303, 1313, 0, 1293, 1294, 1295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2140,
	0, 0, 0, 0, 0, 0, 0, 1309, 1310, 0,
	0, 0, 2146, 0, 0, 1280, 1281, 0, 2153, 0,
	0, 0, 0, 2158, 0, 0, 0, 0, 1301, 0,
	0, 949, 0, 0, 0, 1286, 0, 0, 0, 0,
	2172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 950, 0, 0, 0, 0, 0,
	949, 0, 2203, 2204, 2205, 1300, 0, 0, 0, 2202,
	2200, 2201, 2193, 2194, 2195, 2196, 2198, 2199, 0, 0,
	0, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1872, 1872, 1872, 0, 0, 0,
	0, 1292, 0, 0, 0, 0, 1391, 0, 0, 0,
	0, 0, 0, 696, 2246, 0, 696, 696, 1287, 0,
	936, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	0, 1304, 0, 0, 949, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 936, 936, 936, 0, 0, 0,
	2302, 0, 0, 0, 1771, 950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 709, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1302, 0, 0,
	1277, 1278, 1284, 1283, 1279, 1305, 0, 1276, 1274, 1275,
	1267, 1268, 1269, 1270, 1272, 1273, 0, 0, 0, 0,
	0, 0, 0, 0, 2177, 0, 0, 0, 0, 0,
	0, 0, 0, 2367, 0, 0, 0, 0, 950, 0,
	950, 899, 0, 937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 949, 0, 0, 719, 719, 0, 0,
	950, 0, 0, 950, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	950, 0, 0, 0, 0, 0, 2427, 0, 0, 0,
	1697, 0, 0, 0, 0, 0, 2431, 0, 0, 2432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2437, 0, 0, 0, 0, 0, 0, 0, 0,
	2445, 0, 0, 0, 0, 72, 0, 72, 2449, 0,
	0, 0, 2246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 2476, 2477, 2478, 0, 0, 72, 0, 2480, 0,
	0, 0, 0, 0, 0, 2482, 0, 0, 0, 0,
	0, 0, 0, 0, 949, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 0,
	0, 950, 0, 0, 0, 0, 0, 0, 2512, 2513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2529, 0, 0,
	0, 0, 0, 937, 0, 0, 0, 950, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 949, 0, 949,
	0, 0, 936, 937, 2552, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 937, 937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	0, 0, 949, 0, 0, 0, 0, 950, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1391, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2628, 950, 0,
	0, 0, 0, 1771, 0, 0, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 1328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2658, 0, 0, 0, 2661, 2662, 0, 0, 2664,
	0, 0, 0, 0, 0, 0, 2666, 937, 0, 0,
	2669, 0, 0, 0, 0, 0, 0, 949, 0, 0,
	949, 0, 0, 0, 0, 0, 0, 2676, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 936, 0, 2689, 0, 949, 0, 0, 0,
	936, 0, 899, 0, 0, 0, 0, 0, 0, 0,
	899, 899, 0, 0, 899, 0, 0, 0, 0, 0,
	0, 0, 936, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2733, 0, 937, 0, 0, 0, 0,
	0, 936, 936, 937, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 949, 0, 0,
	0, 0, 0, 0, 0, 949, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 72,
	949, 0, 2807, 2808, 0, 0, 0, 0, 0, 0,
	0, 709, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2817, 0, 0, 1263,
	1264, 0, 1296, 1297, 1298, 1306, 1307, 1308, 0, 0,
	2825, 0, 0, 0, 0, 0, 936, 1299, 0, 0,
	0, 0, 0, 0, 1266, 0, 0, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 949, 0, 0, 0, 0, 0, 1265,
	0, 0, 72, 0, 0, 0, 2861, 1285, 0, 0,
	0, 0, 0, 0, 1282, 0, 0, 0, 0, 0,
	1263, 1264, 0, 1296, 1297, 1298, 1306, 1307, 1308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 0,
	0, 0, 0, 0, 0, 1266, 0, 0, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 1289, 1290, 1291,
	1265, 0, 0, 0, 936, 1271, 0, 0, 1285, 0,
	0, 0, 936, 936, 0, 1282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1303, 1313, 0,
	1293, 1294, 1295, 0, 0, 0, 0, 0, 2918, 0,
	0, 2921, 0, 0, 0, 0, 0, 949, 0, 0,
	0, 1309, 1310, 0, 0, 0, 0, 0, 0, 1280,
	1281, 0, 0, 0, 0, 72, 0, 1288, 1289, 1290,
	1291, 0, 1301, 0, 0, 0, 1271, 0, 0, 1286,
	0, 0, 0, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 1303, 1313,
	0, 1293, 1294, 1295, 0, 0, 0, 0, 0, 1300,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1309, 1310, 0, 0, 0, 0, 0, 0,
	1280, 1281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1301, 0, 1292, 0, 0, 0, 0,
	1286, 0, 0, 0, 0, 3008, 3008, 0, 0, 0,
	0, 0, 1287, 0, 0, 0, 1311, 0, 0, 0,
	0, 0, 0, 3025, 0, 0, 0, 0, 0, 0,
	1300, 0, 0, 0, 0, 1304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1569,
	0, 3008, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 0, 1292, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 1580, 1565, 1570, 1553, 1590, 1589,
	0, 0, 1555, 1554, 0, 0, 0, 0, 0, 1598,
	1597, 0, 0, 0, 0, 0, 1304, 0, 0, 0,
	0, 1302, 3008, 0, 1277, 1278, 1284, 1283, 1279, 1305,
	0, 1276, 1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273,
	0, 0, 0, 0, 0, 0, 0, 0, 2176, 1591,
	0, 1587, 1586, 0, 0, 0, 0, 0, 0, 0,
	0, 1585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1584, 1582,
	1583, 0, 1302, 0, 0, 1277, 1278, 1284, 1283, 1279,
	1305, 0, 1276, 1274, 1275, 1267, 1268, 1269, 1270, 1272,
	1273, 0, 0, 0, 899, 1564, 0, 0, 0, 2175,
	0, 0, 0, 0, 0, 0, 1573, 1568, 1574, 1575,
	1576, 1577, 1578, 0, 1572, 0, 0, 0, 0, 0,
	0, 0, 0, 1595, 1596, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1588, 0, 0, 0, 1566,
	1567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 1581, 0, 0, 0, 1706, 1704, 1705, 1708,
	1707, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1558,
	1559, 1560, 1561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1579, 1562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1600, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1556, 0, 0, 1592, 1593, 1594, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1563, 0, 0,
	0, 0, 1599, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 947, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1771,
	252, 253, 254, 255, 952, 256, 953, 954, 955, 956,
	211, 957, 958, 959, 960, 257, 258, 259, 212, 213,
	260, 214, 261, 262, 215, 961, 263, 264, 265, 266,
	267, 268, 962, 963, 216, 217, 218, 964, 269, 219,
	965, 911, 966, 270, 271, 272, 273, 274, 0, 276,
	277, 278, 275, 967, 279, 0, 280, 281, 968, 843,
	282, 283, 284, 969, 970, 972, 971, 973, 974, 975,
	285, 286, 484, 287, 288, 289, 220, 221, 976, 290,
	977, 291, 978, 292, 979, 980, 293, 294, 981, 295,
	296, 982, 0, 983, 222, 300, 297, 298, 301, 304,
	299, 305, 223, 224, 984, 844, 985, 0, 0, 0,
	0, 306, 307, 225, 308, 309, 0, 310, 986, 311,
	987, 988, 845, 312, 989, 313, 226, 990, 227, 991,
	314, 315, 316, 317, 318, 319, 228, 229, 847, 992,
	321, 0, 0, 0, 993, 320, 322, 329, 994, 846,
	323, 230, 325, 324, 326, 327, 328, 231, 995, 232,
	996, 330, 848, 849, 331, 332, 333, 850, 334, 335,
	0, 0, 336, 337, 338, 997, 340, 339, 998, 233,
	851, 341, 342, 852, 999, 343, 344, 1000, 1001, 345,
	0, 346, 913, 912, 347, 348, 350, 351, 349, 853,
	352, 353, 355, 354, 1002, 1003, 854, 1004, 234, 356,
	235, 357, 358, 1005, 359, 360, 1006, 1007, 361, 362,
	1008, 1009, 363, 236, 855, 364, 856, 237, 365, 366,
	367, 368, 369, 370, 371, 1010, 372, 238, 373, 239,
	374, 1011, 375, 376, 377, 378, 379, 240, 380, 381,
	1012, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 1013, 394, 857, 395, 396, 397,
	398, 241, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 1014, 415, 416, 410, 412, 413, 414, 411, 417,
	418, 1015, 419, 400, 401, 420, 858, 421, 242, 422,
	423, 1016, 432, 424, 425, 426, 402, 427, 430, 431,
	428, 1017, 429, 243, 1018, 433, 434, 1019, 435, 436,
	437, 438, 439, 302, 440, 303, 441, 442, 1020, 244,
	245, 443, 1021, 1022, 444, 445, 246, 247, 1023, 446,
	447, 448, 449, 1024, 1025, 450, 451, 452, 454, 1026,
	455, 1027, 453, 456, 457, 458, 248, 249, 1028, 1029,
	459, 250, 1030, 1031, 1032, 1033, 460, 461, 251, 462,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 947, 0, 0, 0,
	0, 0, 1903, 0, 0, 0, 0, 0, 0, 0,
	0, 1904, 252, 253, 254, 255, 952, 256, 953, 954,
	955, 956, 211, 957, 958, 959, 960, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 961, 263, 264,
	265, 266, 267, 268, 962, 963, 216, 217, 218, 964,
	269, 219, 965, 911, 966, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 967, 279, 0, 280, 281,
	968, 843, 282, 283, 284, 969, 970, 972, 971, 973,
	974, 975, 285, 286, 484, 287, 288, 289, 220, 221,
	976, 290, 977, 291, 978, 292, 979, 980, 293, 294,
	981, 295, 296, 982, 0, 983, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 984, 844, 985, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	986, 311, 987, 988, 845, 312, 989, 313, 226, 990,
	227, 991, 314, 315, 316, 317, 318, 319, 228, 229,
	847, 992, 321, 0, 0, 0, 993, 320, 322, 329,
	994, 846, 323, 230, 325, 324, 326, 327, 328, 231,
	995, 232, 996, 330, 848, 849, 331, 332, 333, 850,
	334, 335, 0, 0, 336, 337, 338, 997, 340, 339,
	998, 233, 851, 341, 342, 852, 999, 343, 344, 1000,
	1001, 345, 0, 346, 913, 912, 347, 348, 350, 351,
	349, 853, 352, 353, 355, 354, 1002, 1003, 854, 1004,
	234, 356, 235, 357, 358, 1005, 359, 360, 1006, 1007,
	361, 362, 1008, 1009, 363, 236, 855, 364, 856, 237,
	365, 366, 367, 368, 369, 370, 371, 1010, 372, 238,
	373, 239, 374, 1011, 375, 376, 377, 378, 379, 240,
	380, 381, 1012, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 1013, 394, 857, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 1014, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 1015, 419, 400, 401, 420, 858, 421,
	242, 422, 423, 1016, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 1017, 429, 243, 1018, 433, 434, 1019,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	1020, 244, 245, 443, 1021, 1022, 444, 445, 246, 247,
	1023, 446, 447, 448, 449, 1024, 1025, 450, 451, 452,
	454, 1026, 455, 1027, 453, 456, 457, 458, 248, 249,
	1028, 1029, 459, 250, 1030, 1031, 1032, 1033, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 947,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2704, 252, 253, 254, 255, 952,
	256, 953, 954, 955, 956, 211, 957, 958, 959, 960,
	257, 258, 259, 212, 213, 260, 214, 261, 262, 215,
	961, 263, 264, 265, 266, 267, 268, 962, 963, 216,
	217, 218, 964, 269, 219, 965, 911, 966, 270, 271,
	272, 273, 274, 0, 276, 277, 278, 275, 967, 279,
	0, 280, 281, 968, 843, 282, 283, 284, 969, 970,
	972, 971, 973, 974, 975, 285, 286, 484, 287, 288,
	289, 220, 221, 976, 290, 977, 291, 978, 292, 979,
	980, 293, 294, 981, 295, 296, 982, 0, 983, 222,
	300, 297, 298, 301, 304, 299, 305, 223, 224, 984,
	844, 985, 0, 0, 0, 0, 306, 307, 225, 308,
	309, 0, 310, 986, 311, 987, 988, 845, 312, 989,
	313, 226, 990, 227, 991, 314, 315, 316, 317, 318,
	319, 228, 229, 847, 992, 321, 0, 0, 0, 993,
	320, 322, 329, 994, 846, 323, 230, 325, 324, 326,
	327, 328, 231, 995, 232, 996, 330, 848, 849, 331,
	332, 333, 850, 334, 335, 0, 0, 336, 337, 338,
	997, 340, 339, 998, 233, 851, 341, 342, 852, 999,
	343, 344, 1000, 1001, 345, 0, 346, 913, 912, 347,
	348, 350, 351, 349, 853, 352, 353, 355, 354, 1002,
	1003, 854, 1004, 234, 356, 235, 357, 358, 1005, 359,
	360, 1006, 1007, 361, 362, 1008, 1009, 363, 236, 855,
	364, 856, 237, 365, 366, 367, 368, 369, 370, 371,
	1010, 372, 238, 373, 239, 374, 1011, 375, 376, 377,
	378, 379, 240, 380, 381, 1012, 382, 383, 384, 385,
	386, 0, 388, 389, 387, 390, 391, 392, 393, 1013,
	394, 857, 395, 396, 397, 398, 241, 399, 0, 403,
	404, 405, 406, 407, 408, 409, 1014, 415, 416, 410,
	412, 413, 414, 411, 417, 418, 1015, 419, 400, 401,
	420, 858, 421, 242, 422, 423, 1016, 432, 424, 425,
	426, 402, 427, 430, 431, 428, 1017, 429, 243, 1018,
	433, 434, 1019, 435, 436, 437, 438, 439, 302, 440,
	303, 441, 442, 1020, 244, 245, 443, 1021, 1022, 444,
	445, 246, 247, 1023, 446, 447, 448, 449, 1024, 1025,
	450, 451, 452, 454, 1026, 455, 1027, 453, 456, 457,
	458, 248, 249, 1028, 1029, 459, 250, 1030, 1031, 1032,
	1033, 460, 461, 251, 462, 463, 464, 947, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2812, 252, 253, 254, 255, 952, 256, 953,
	954, 955, 956, 211, 957, 958, 959, 960, 257, 258,
	259, 212, 213, 260, 214, 261, 262, 215, 961, 263,
	264, 265, 266, 267, 268, 962, 963, 216, 217, 218,
	964, 269, 219, 965, 911, 966, 270, 271, 272, 273,
	274, 0, 276, 277, 278, 275, 967, 279, 0, 280,
	281, 968, 843, 282, 283, 284, 969, 970, 972, 971,
	973, 974, 975, 285, 286, 484, 287, 288, 289, 220,
	221, 976, 290, 977, 291, 978, 292, 979, 980, 293,
	294, 981, 295, 296, 982, 0, 983, 222, 300, 297,
	298, 301, 304, 299, 305, 223, 224, 984, 844, 985,
	0, 0, 0, 0, 306, 307, 225, 308, 309, 0,
	310, 986, 311, 987, 988, 845, 312, 989, 313, 226,
	990, 227, 991, 314, 315, 316, 317, 318, 319, 228,
	229, 847, 992, 321, 0, 0, 0, 993, 320, 322,
	329, 994, 846, 323, 230, 325, 324, 326, 327, 328,
	231, 995, 232, 996, 330, 848, 849, 331, 332, 333,
	850, 334, 335, 0, 0, 336, 337, 338, 997, 340,
	339, 998, 233, 851, 341, 342, 852, 999, 343, 344,
	1000, 1001, 345, 0, 346, 913, 912, 347, 348, 350,
	351, 349, 853, 352, 353, 355, 354, 1002, 1003, 854,
	1004, 234, 356, 235, 357, 358, 1005, 359, 360, 1006,
	1007, 361, 362, 1008, 1009, 363, 236, 855, 364, 856,
	237, 365, 366, 367, 368, 369, 370, 371, 1010, 372,
	238, 373, 239, 374, 1011, 375, 376, 377, 378, 379,
	240, 380, 381, 1012, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 1013, 394, 857,
	395, 396, 397, 398, 241, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 1014, 415, 416, 410, 412, 413,
	414, 411, 417, 418, 1015, 419, 400, 401, 420, 858,
	421, 242, 422, 423, 1016, 432, 424, 425, 426, 402,
	427, 430, 431, 428, 1017, 429, 243, 1018, 433, 434,
	1019, 435, 436, 437, 438, 439, 302, 440, 303, 441,
	442, 1020, 244, 245, 443, 1021, 1022, 444, 445, 246,
	247, 1023, 446, 447, 448, 449, 1024, 1025, 450, 451,
	452, 454, 1026, 455, 1027, 453, 456, 457, 458, 248,
	249, 1028, 1029, 459, 250, 1030, 1031, 1032, 1033, 460,
	461, 251, 462, 463, 464, 947, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2452, 252, 253, 254, 255, 952, 256, 953, 954, 955,
	956, 211, 957, 958, 959, 960, 257, 258, 259, 212,
	213, 260, 214, 261, 262, 215, 961, 263, 264, 265,
	266, 267, 268, 962, 963, 216, 217, 218, 964, 269,
	219, 965, 911, 966, 270, 271, 272, 273, 274, 0,
	276, 277, 278, 275, 967, 279, 0, 280, 281, 968,
	843, 282, 283, 284, 969, 970, 972, 971, 973, 974,
	975, 285, 286, 484, 287, 288, 289, 220, 221, 976,
	290, 977, 291, 978, 292, 979, 980, 293, 294, 981,
	295, 296, 982, 0, 983, 222, 300, 297, 298, 301,
	304, 299, 305, 223, 224, 984, 844, 985, 0, 0,
	0, 0, 306, 307, 225, 308, 309, 0, 310, 986,
	311, 987, 988, 845, 312, 989, 313, 226, 990, 227,
	991, 314, 315, 316, 317, 318, 319, 228, 229, 847,
	992, 321, 0, 0, 0, 993, 320, 322, 329, 994,
	846, 323, 230, 325, 324, 326, 327, 328, 231, 995,
	232, 996, 330, 848, 849, 331, 332, 333, 850, 334,
	335, 0, 0, 336, 337, 338, 997, 340, 339, 998,
	233, 851, 341, 342, 852, 999, 343, 344, 1000, 1001,
	345, 0, 346, 913, 912, 347, 348, 350, 351, 349,
	853, 352, 353, 355, 354, 1002, 1003, 854, 1004, 234,
	356, 235, 357, 358, 1005, 359, 360, 1006, 1007, 361,
	362, 1008, 1009, 363, 236, 855, 364, 856, 237, 365,
	366, 367, 368, 369, 370, 371, 1010, 372, 238, 373,
	239, 374, 1011, 375, 376, 377, 378, 379, 240, 380,
	381, 1012, 382, 383, 384, 385, 386, 0, 388, 389,
	387, 390, 391, 392, 393, 1013, 394, 857, 395, 396,
	397, 398, 241, 399, 0, 403, 404, 405, 406, 407,
	408, 409, 1014, 415, 416, 410, 412, 413, 414, 411,
	417, 418, 1015, 419, 400, 401, 420, 858, 421, 242,
	422, 423, 1016, 432, 424, 425, 426, 402, 427, 430,
	431, 428, 1017, 429, 243, 1018, 433, 434, 1019, 435,
	436, 437, 438, 439, 302, 440, 303, 441, 442, 1020,
	244, 245, 443, 1021, 1022, 444, 445, 246, 247, 1023,
	446, 447, 448, 449, 1024, 1025, 450, 451, 452, 454,
	1026, 455, 1027, 453, 456, 457, 458, 248, 249, 1028,
	1029, 459, 250, 1030, 1031, 1032, 1033, 460, 461, 251,
	462, 463, 464, 947, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2335, 252,
	253, 254, 255, 952, 256, 953, 954, 955, 956, 211,
	957, 958, 959, 960, 257, 258, 259, 212, 213, 260,
	214, 261, 262, 215, 961, 263, 264, 265, 266, 267,
	268, 962, 963, 216, 217, 218, 964, 269, 219, 965,
	911, 966, 270, 271, 272, 273, 274, 0, 276, 277,
	278, 275, 967, 279, 0, 280, 281, 968, 843, 282,
	283, 284, 969, 970, 972, 971, 973, 974, 975, 285,
	286, 484, 287, 288, 289, 220, 221, 976, 290, 977,
	291, 978, 292, 979, 980, 293, 294, 981, 295, 296,
	982, 0, 983, 222, 300, 297, 298, 301, 304, 299,
	305, 223, 224, 984, 844, 985, 0, 0, 0, 0,
	306, 307, 225, 308, 309, 0, 310, 986, 311, 987,
	988, 845, 312, 989, 313, 226, 990, 227, 991, 314,
	315, 316, 317, 318, 319, 228, 229, 847, 992, 321,
	0, 0, 0, 993, 320, 322, 329, 994, 846, 323,
	230, 325, 324, 326, 327, 328, 231, 995, 232, 996,
	330, 848, 849, 331, 332, 333, 850, 334, 335, 0,
	0, 336, 337, 338, 997, 340, 339, 998, 233, 851,
	341, 342, 852, 999, 343, 344, 1000, 1001, 345, 0,
	346, 913, 912, 347, 348, 350, 351, 349, 853, 352,
	353, 355, 354, 1002, 1003, 854, 1004, 234, 356, 235,
	357, 358, 1005, 359, 360, 1006, 1007, 361, 362, 1008,
	1009, 363, 236, 855, 364, 856, 237, 365, 366, 367,
	368, 369, 370, 371, 1010, 372, 238, 373, 239, 374,
	1011, 375, 376, 377, 378, 379, 240, 380, 381, 1012,
	382, 383, 384, 385, 386, 0, 388, 389, 387, 390,
	391, 392, 393, 1013, 394, 857, 395, 396, 397, 398,
	241, 399, 0, 403, 404, 405, 406, 407, 408, 409,
	1014, 415, 416, 410, 412, 413, 414, 411, 417, 418,
	1015, 419, 400, 401, 420, 858, 421, 242, 422, 423,
	1016, 432, 424, 425, 426, 402, 427, 430, 431, 428,
	1017, 429, 243, 1018, 433, 434, 1019, 435, 436, 437,
	438, 439, 302, 440, 303, 441, 442, 1020, 244, 245,
	443, 1021, 1022, 444, 445, 246, 247, 1023, 446, 447,
	448, 449, 1024, 1025, 450, 451, 452, 454, 1026, 455,
	1027, 453, 456, 457, 458, 248, 249, 1028, 1029, 459,
	250, 1030, 1031, 1032, 1033, 460, 461, 251, 462, 463,
	464, 947, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1794, 252, 253, 254,
	255, 952, 256, 953, 954, 955, 956, 211, 957, 958,
	959, 960, 257, 258, 259, 212, 213, 260, 214, 261,
	262, 215, 961, 263, 264, 265, 266, 267, 268, 962,
	963, 216, 217, 218, 964, 269, 219, 965, 911, 966,
	270, 271, 272, 273, 274, 0, 276, 277, 278, 275,
	967, 279, 0, 280, 281, 968, 843, 282, 283, 284,
	969, 970, 972, 971, 973, 974, 975, 285, 286, 484,
	287, 288, 289, 220, 221, 976, 290, 977, 291, 978,
	292, 979, 980, 293, 294, 981, 295, 296, 982, 0,
	983, 222, 300, 297, 298, 301, 304, 299, 305, 223,
	224, 984, 844, 985, 0, 0, 0, 0, 306, 307,
	225, 308, 309, 0, 310, 986, 311, 987, 988, 845,
	312, 989, 313, 226, 990, 227, 991, 314, 315, 316,
	317, 318, 319, 228, 229, 847, 992, 321, 0, 0,
	0, 993, 320, 322, 329, 994, 846, 323, 230, 325,
	324, 326, 327, 328, 231, 995, 232, 996, 330, 848,
	849, 331, 332, 333, 850, 334, 335, 0, 0, 336,
	337, 338, 997, 340, 339, 998, 233, 851, 341, 342,
	852, 999, 343, 344, 1000, 1001, 345, 0, 346, 913,
	912, 347, 348, 350, 351, 349, 853, 352, 353, 355,
	354, 1002, 1003, 854, 1004, 234, 356, 235, 357, 358,
	1005, 359, 360, 1006, 1007, 361, 362, 1008, 1009, 363,
	236, 855, 364, 856, 237, 365, 366, 367, 368, 369,
	370, 371, 1010, 372, 238, 373, 239, 374, 1011, 375,
	376, 377, 378, 379, 240, 380, 381, 1012, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 1013, 394, 857, 395, 396, 397, 398, 241, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 1014, 415,
	416, 410, 412, 413, 414, 411, 417, 418, 1015, 419,
	400, 401, 420, 858, 421, 242, 422, 423, 1016, 432,
	424, 425, 426, 402, 427, 430, 431, 428, 1017, 429,
	243, 1018, 433, 434, 1019, 435, 436, 437, 438, 439,
	302, 440, 303, 441, 442, 1020, 244, 245, 443, 1021,
	1022, 444, 445, 246, 247, 1023, 446, 447, 448, 449,
	1024, 1025, 450, 451, 452, 454, 1026, 455, 1027, 453,
	456, 457, 458, 248, 249, 1028, 1029, 459, 250, 1030,
	1031, 1032, 1033, 460, 461, 251, 462, 463, 464, 947,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 252, 253, 254, 255, 952,
	256, 953, 954, 955, 956, 211, 957, 958, 959, 960,
	257, 258, 259, 212, 213, 260, 214, 261, 262, 215,
	961, 263, 264, 265, 266, 267, 268, 962, 963, 216,
	217, 218, 964, 269, 219, 965, 911, 966, 270, 271,
	272, 273, 274, 0, 276, 277, 278, 275, 967, 279,
	0, 280, 281, 968, 843, 282, 283, 284, 969, 970,
	972, 971, 973, 974, 975, 285, 286, 484, 287, 288,
	289, 220, 221, 976, 290, 977, 291, 978, 292, 979,
	980, 293, 294, 981, 295, 296, 982, 0, 983, 222,
	300, 297, 298, 301, 304, 299, 305, 223, 224, 984,
	844, 985, 0, 0, 0, 0, 306, 307, 225, 308,
	309, 0, 310, 986, 311, 987, 988, 845, 312, 989,
	313, 226, 990, 227, 991, 314, 315, 316, 317, 318,
	319, 228, 229, 847, 992, 321, 0, 0, 0, 993,
	320, 322, 329, 994, 846, 323, 230, 325, 324, 326,
	327, 328, 231, 995, 232, 996, 330, 848, 849, 331,
	332, 333, 850, 334, 335, 0, 0, 336, 337, 338,
	997, 340, 339, 998, 233, 851, 341, 342, 852, 999,
	343, 344, 1000, 1001, 345, 0, 346, 913, 912, 347,
	348, 350, 351, 349, 853, 352, 353, 355, 354, 1002,
	1003, 854, 1004, 234, 356, 235, 357, 358, 1005, 359,
	360, 1006, 1007, 361, 362, 1008, 1009, 363, 236, 855,
	364, 856, 237, 365, 366, 367, 368, 369, 370, 371,
	1010, 372, 238, 373, 239, 374, 1011, 375, 376, 377,
	378, 379, 240, 380, 381, 1012, 382, 383, 384, 385,
	386, 0, 388, 389, 387, 390, 391, 392, 393, 1013,
	394, 857, 395, 396, 397, 398, 241, 399, 0, 403,
	404, 405, 406, 407, 408, 409, 1014, 415, 416, 410,
	412, 413, 414, 411, 417, 418, 1015, 419, 400, 401,
	420, 858, 421, 242, 422, 423, 1016, 432, 424, 425,
	426, 402, 427, 430, 431, 428, 1017, 429, 243, 1018,
	433, 434, 1019, 435, 436, 437, 438, 439, 302, 440,
	303, 441, 442, 1020, 244, 245, 443, 1021, 1022, 444,
	445, 246, 247, 1023, 446, 447, 448, 449, 1024, 1025,
	450, 451, 452, 454, 1026, 455, 1027, 453, 456, 457,
	458, 248, 249, 1028, 1029, 459, 250, 1030, 1031, 1032,
	1033, 460, 461, 251, 462, 463, 464, 1801, 0, 762,
	750, 751, 748, 749, 739, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 1798,
	256, 0, 0, 0, 0, 797, 742, 0, 0, 0,
	257, 258, 259, 212, 816, 782, 817, 770, 803, 818,
	0, 263, 772, 771, 266, 267, 268, 745, 796, 819,
	820, 218, 0, 269, 801, 0, 787, 0, 270, 271,
	272, 273, 274, 0, 276, 277, 278, 275, 0, 279,
	0, 280, 281, 0, 843, 282, 283, 284, 790, 788,
	789, 793, 0, 791, 792, 285, 286, 484, 287, 804,
	289, 821, 822, 728, 290, 0, 291, 0, 292, 1799,
	0, 805, 294, 0, 295, 296, 0, 0, 0, 733,
	300, 297, 298, 301, 304, 299, 305, 823, 824, 757,
	844, 0, 0, 0, 0, 0, 306, 307, 825, 806,
	807, 0, 310, 0, 311, 0, 0, 845, 312, 0,
	313, 826, 0, 227, 0, 314, 315, 316, 317, 318,
	319, 798, 800, 847, 0, 781, 0, 0, 0, 0,
	320, 322, 329, 0, 846, 323, 827, 785, 808, 809,
	810, 811, 828, 0, 786, 0, 330, 848, 849, 331,
	332, 333, 850, 812, 813, 0, 0, 336, 337, 338,
	0, 340, 339, 0, 829, 851, 341, 342, 852, 0,
	343, 344, 0, 0, 345, 0, 346, 730, 729, 347,
	348, 350, 774, 349, 853, 352, 353, 355, 354, 725,
	0, 854, 758, 799, 356, 830, 357, 358, 0, 783,
	784, 0, 0, 361, 362, 0, 0, 363, 236, 855,
	364, 856, 831, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 832, 373, 239, 374, 0, 375, 376, 377,
	378, 379, 833, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 387, 390, 391, 392, 393, 0,
	394, 857, 395, 396, 397, 398, 734, 399, 0, 403,
	404, 405, 406, 407, 408, 409, 0, 415, 416, 775,
	776, 777, 778, 411, 417, 418, 794, 419, 400, 401,
	420, 858, 421, 834, 779, 423, 0, 432, 424, 425,
	426, 402, 427, 430, 814, 428, 0, 429, 835, 0,
	433, 434, 0, 435, 436, 437, 438, 439, 302, 440,
	303, 773, 442, 0, 836, 837, 815, 0, 0, 444,
	445, 838, 839, 756, 446, 447, 448, 449, 0, 0,
	450, 451, 452, 454, 795, 455, 0, 780, 456, 457,
	458, 248, 840, 1797, 0, 459, 250, 0, 0, 0,
	0, 460, 461, 251, 462, 463, 464, 726, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	722, 723, 1800, 0, 0, 0, 0, 0, 0, 735,
	1795, 0, 0, 0, 710, 738, 762, 750, 751, 748,
	749, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 797, 742, 0, 0, 0, 257, 258, 259,
	212, 816, 782, 817, 770, 803, 818, 0, 263, 772,
	771, 266, 267, 268, 745, 796, 819, 820, 218, 0,
	269, 801, 0, 787, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 843, 282, 283, 284, 790, 788, 789, 793, 0,
	791, 792, 285, 286, 484, 287, 804, 289, 821, 822,
	728, 290, 0, 291, 0, 292, 0, 0, 805, 294,
	0, 295, 296, 0, 0, 0, 733, 300, 297, 298,
	301, 304, 299, 305, 823, 824, 757, 844, 0, 0,
	0, 0, 0, 306, 307, 825, 806, 807, 0, 310,
	0, 311, 0, 0, 845, 312, 0, 313, 826, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 798, 800,
	847, 0, 781, 0, 0, 0, 0, 320, 322, 329,
	0, 846, 323, 827, 785, 808, 809, 810, 811, 828,
	0, 786, 0, 330, 848, 849, 331, 332, 333, 850,
	812, 813, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 829, 851, 341, 342, 852, 0, 343, 344, 0,
	0, 345, 0, 346, 730, 729, 347, 348, 350, 774,
	349, 853, 352, 353, 355, 354, 725, 0, 854, 758,
	799, 356, 830, 357, 358, 0, 783, 784, 0, 0,
	361, 362, 0, 0, 363, 236, 855, 364, 856, 831,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 832,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 833,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 857, 395,
	396, 397, 398, 734, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 169, 415, 416, 775, 776, 777, 778,
	411, 417, 418, 794, 419, 400, 401, 420, 858, 421,
	834, 779, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 814, 428, 0, 429, 835, 0, 433, 434, 171,
	435, 436, 437, 438, 439, 302, 440, 303, 773, 442,
	0, 836, 837, 815, 0, 0, 444, 445, 838, 839,
	756, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 795, 455, 0, 780, 456, 457, 458, 1123, 840,
	0, 0, 459, 250, 0, 0, 0, 163, 460, 461,
	251, 462, 463, 464, 726, 164, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 0, 722, 723, 762,
	750, 751, 748, 749, 739, 0, 1331, 0, 0, 0,
	0, 0, 738, 0, 0, 252, 253, 254, 255, 0,
	256, 0, 0, 0, 0, 797, 742, 0, 0, 0,
	257, 258, 259, 212, 816, 782, 817, 770, 803, 818,
	0, 263, 772, 771, 266, 267, 268, 745, 796, 819,
	820, 218, 0, 269, 801, 0, 787, 0, 270, 271,
	272, 273, 274, 0, 276, 277, 278, 275, 0, 279,
	0, 280, 281, 0, 843, 282, 283, 284, 790, 788,
	789, 793, 0, 791, 792, 285, 286, 484, 287, 804,
	289, 821, 822, 728, 290, 0, 291, 0, 292, 0,
	0, 805, 294, 0, 295, 296, 0, 0, 0, 733,
	300, 297, 298, 301, 304, 299, 305, 823, 824, 757,
	844, 0, 0, 0, 0, 0, 306, 307, 825, 806,
	807, 0, 310, 0, 311, 0, 0, 845, 312, 0,
	313, 826, 0, 227, 0, 314, 315, 316, 317, 318,
	319, 798, 800, 847, 0, 781, 0, 0, 0, 0,
	320, 322, 329, 0, 846, 323, 827, 785, 808, 809,
	810, 811, 828, 0, 786, 0, 330, 848, 849, 331,
	332, 333, 850, 812, 813, 0, 0, 336, 337, 338,
	0, 340, 339, 0, 829, 851, 341, 342, 852, 0,
	343, 344, 0, 0, 345, 0, 346, 730, 729, 347,
	348, 350, 774, 349, 853, 352, 353, 355, 354, 725,
	0, 854, 758, 799, 356, 830, 357, 358, 0, 783,
	784, 0, 0, 361, 362, 0, 0, 363, 236, 855,
	364, 856, 831, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 832, 373, 239, 374, 0, 375, 376, 377,
	378, 379, 833, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 387, 390, 391, 392, 393, 0,
	394, 857, 395, 396, 397, 398, 734, 399, 0, 403,
	404, 405, 406, 407, 408, 409, 169, 415, 416, 775,
	776, 777, 778, 411, 417, 418, 794, 419, 400, 401,
	420, 858, 421, 834, 779, 423, 0, 432, 424, 425,
	426, 402, 427, 430, 814, 428, 0, 429, 835, 0,
	433, 434, 171, 435, 436, 437, 438, 439, 302, 440,
	303, 773, 442, 0, 836, 837, 815, 0, 0, 444,
	445, 838, 839, 756, 446, 447, 448, 449, 0, 0,
	450, 451, 452, 454, 795, 455, 0, 780, 456, 457,
	458, 1123, 840, 0, 0, 459, 250, 0, 0, 0,
	163, 460, 461, 251, 462, 463, 464, 726, 164, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	722, 723, 762, 750, 751, 748, 749, 739, 0, 1331,
	0, 0, 0, 0, 0, 738, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 797, 742,
	0, 0, 0, 257, 258, 259, 212, 816, 782, 817,
	770, 803, 818, 1868, 263, 772, 771, 266, 267, 268,
	745, 796, 819, 820, 218, 0, 269, 801, 0, 787,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	284, 790, 788, 789, 793, 0, 791, 792, 285, 286,
	484, 287, 804, 289, 821, 822, 728, 290, 0, 291,
	0, 292, 0, 0, 805, 294, 0, 295, 296, 0,
	0, 0, 733, 300, 297, 298, 301, 304, 299, 305,
	823, 824, 757, 844, 0, 0, 0, 0, 0, 306,
	307, 825, 806, 807, 0, 310, 0, 311, 0, 1873,
	845, 312, 0, 313, 826, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 798, 800, 847, 0, 781, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 827,
	785, 808, 809, 810, 811, 828, 0, 786, 0, 330,
	848, 849, 331, 332, 333, 850, 812, 813, 0, 0,
	336, 337, 338, 0, 340, 339, 1869, 829, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	730, 729, 347, 348, 350, 774, 349, 853, 352, 353,
	355, 354, 725, 0, 854, 758, 799, 356, 830, 357,
	358, 0, 783, 784, 0, 0, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 831, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 832, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 833, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 734,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 775, 776, 777, 778, 411, 417, 418, 794,
	419, 400, 401, 420, 858, 421, 834, 779, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 814, 428, 0,
	429, 835, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 773, 442, 0, 836, 837, 815,
	0, 1870, 444, 445, 838, 839, 756, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 795, 455, 0,
	780, 456, 457, 458, 248, 840, 0, 0, 459, 250,
	0, 0, 0, 0, 460, 461, 251, 462, 463, 464,
	726, 0, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 0, 722, 723, 762, 750, 751, 748, 749,
	739, 0, 735, 0, 0, 0, 0, 0, 738, 0,
	0, 252, 253, 254, 255, 0, 256, 0, 0, 0,
	0, 797, 742, 0, 0, 0, 257, 258, 259, 212,
	816, 782, 817, 770, 803, 818, 0, 263, 772, 771,
	266, 267, 268, 745, 796, 819, 820, 218, 0, 269,
	801, 0, 787, 0, 270, 271, 272, 273, 274, 0,
	276, 277, 278, 275, 0, 279, 0, 280, 281, 0,
	843, 282, 283, 284, 790, 788, 789, 793, 0, 791,
	792, 285, 286, 484, 287, 804, 289, 821, 822, 728,
	290, 0, 291, 0, 292, 0, 0, 805, 294, 0,
	295, 296, 0, 0, 0, 733, 300, 297, 298, 301,
	304, 299, 305, 823, 824, 757, 844, 0, 0, 0,
	0, 0, 306, 307, 825, 806, 807, 0, 310, 0,
	311, 0, 0, 845, 312, 0, 313, 826, 0, 227,
	0, 314, 315, 316, 317, 318, 319, 798, 800, 847,
	0, 781, 0, 0, 0, 0, 320, 322, 329, 0,
	846, 323, 827, 785, 808, 809, 810, 811, 828, 0,
	786, 0, 330, 848, 849, 331, 332, 333, 850, 812,
	813, 0, 0, 336, 337, 338, 0, 340, 339, 0,
	829, 851, 341, 342, 852, 0, 343, 344, 0, 0,
	345, 0, 346, 730, 729, 347, 348, 350, 774, 349,
	853, 352, 353, 355, 354, 725, 2620, 854, 758, 799,
	356, 830, 357, 358, 0, 783, 784, 0, 0, 361,
	362, 0, 0, 363, 236, 855, 364, 856, 831, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 832, 373,
	239, 374, 0, 375, 376, 377, 378, 379, 833, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	387, 390, 391, 392, 393, 0, 394, 857, 395, 396,
	397, 398, 734, 399, 0, 403, 404, 405, 406, 407,
	408, 409, 0, 415, 416, 775, 776, 777, 778, 411,
	417, 418, 794, 419, 400, 401, 420, 858, 421, 834,
	779, 423, 0, 432, 424, 425, 426, 402, 427, 430,
	814, 428, 0, 429, 835, 0, 433, 434, 0, 435,
	436, 437, 438, 439, 302, 440, 303, 773, 442, 0,
	836, 837, 815, 0, 0, 444, 445, 838, 839, 756,
	446, 447, 448, 449, 0, 0, 450, 451, 452, 454,
	795, 455, 0, 780, 456, 457, 458, 248, 840, 0,
	0, 459, 250, 0, 0, 0, 0, 460, 461, 251,
	462, 463, 464, 726, 0, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 0, 722, 723, 1392, 762,
	750, 751, 748, 749, 739, 735, 0, 0, 0, 0,
	0, 738, 0, 0, 0, 252, 253, 254, 255, 0,
	256, 0, 0, 0, 0, 797, 742, 0, 0, 0,
	257, 258, 259, 212, 816, 782, 817, 770, 803, 818,
	0, 263, 772, 771, 266, 267, 268, 745, 796, 819,
	820, 218, 0, 269, 801, 0, 787, 0, 270, 271,
	272, 273, 274, 0, 276, 277, 278, 275, 0, 279,
	0, 280, 281, 0, 843, 282, 283, 284, 790, 788,
	789, 793, 0, 791, 792, 285, 286, 484, 287, 804,
	289, 821, 822, 728, 290, 0, 291, 0, 292, 0,
	0, 805, 294, 0, 295, 296, 0, 0, 0, 733,
	300, 297, 298, 301, 304, 299, 305, 823, 824, 757,
	844, 0, 0, 0, 0, 0, 306, 307, 825, 806,
	807, 0, 310, 0, 311, 0, 0, 845, 312, 0,
	313, 826, 0, 227, 0, 314, 315, 316, 317, 318,
	319, 798, 800, 847, 0, 781, 0, 0, 0, 1699,
	320, 322, 329, 0, 846, 323, 827, 785, 808, 809,
	810, 811, 828, 0, 786, 0, 330, 848, 849, 331,
	332, 333, 850, 812, 813, 0, 0, 336, 337, 338,
	0, 340, 339, 0, 829, 851, 341, 342, 852, 0,
	343, 344, 0, 0, 345, 0, 346, 730, 729, 347,
	348, 350, 774, 349, 853, 352, 353, 355, 354, 725,
	0, 854, 758, 799, 356, 830, 357, 358, 0, 783,
	784, 0, 0, 361, 362, 0, 0, 363, 236, 855,
	364, 856, 831, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 832, 373, 239, 374, 1698, 375, 376, 377,
	378, 379, 833, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 387, 390, 391, 392, 393, 0,
	394, 857, 395, 396, 397, 398, 734, 399, 0, 403,
	404, 405, 406, 407, 408, 409, 0, 415, 416, 775,
	776, 777, 778, 411, 417, 418, 794, 419, 400, 401,
	420, 858, 421, 834, 779, 423, 0, 432, 424, 425,
	426, 402, 427, 430, 814, 428, 0, 429, 835, 0,
	433, 434, 0, 435, 436, 437, 438, 439, 302, 440,
	303, 773, 442, 0, 836, 837, 815, 0, 0, 444,
	445, 838, 839, 756, 446, 447, 448, 449, 0, 0,
	450, 451, 452, 454, 795, 455, 0, 780, 456, 457,
	458, 248, 840, 0, 0, 459, 250, 0, 0, 0,
	0, 460, 461, 251, 462, 463, 464, 726, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	722, 723, 0, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 0, 718, 738, 762, 750, 751, 748,
	749, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 797, 742, 0, 0, 0, 257, 258, 259,
	212, 816, 782, 817, 770, 803, 818, 0, 263, 772,
	771, 266, 267, 268, 745, 796, 819, 820, 218, 0,
	269, 801, 0, 787, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 843, 282, 283, 284, 790, 788, 789, 793, 0,
	791, 792, 285, 286, 484, 287, 804, 289, 821, 822,
	728, 290, 0, 291, 0, 292, 0, 0, 805, 294,
	0, 295, 296, 0, 0, 0, 733, 300, 297, 298,
	301, 304, 299, 305, 823, 824, 757, 844, 0, 0,
	0, 0, 0, 306, 307, 825, 806, 807, 0, 310,
	0, 311, 0, 0, 845, 312, 0, 313, 826, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 798, 800,
	847, 0, 781, 0, 0, 0, 0, 320, 322, 329,
	0, 846, 323, 827, 785, 808, 809, 810, 811, 828,
	0, 786, 0, 330, 848, 849, 331, 332, 333, 850,
	812, 813, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 829, 851, 341, 342, 852, 0, 343, 344, 0,
	0, 345, 0, 346, 730, 729, 347, 348, 350, 774,
	349, 853, 352, 353, 355, 354, 725, 0, 854, 758,
	799, 356, 830, 357, 358, 0, 783, 784, 720, 0,
	361, 362, 0, 0, 363, 236, 855, 364, 856, 831,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 832,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 833,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 857, 395,
	396, 397, 398, 734, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 775, 776, 777, 778,
	411, 417, 418, 794, 419, 400, 401, 420, 858, 421,
	834, 779, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 814, 428, 0, 429, 835, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 773, 442,
	0, 836, 837, 815, 0, 0, 444, 445, 838, 839,
	756, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 795, 455, 0, 780, 456, 457, 458, 248, 840,
	0, 0, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 726, 0, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 0, 722, 723, 762,
	750, 751, 748, 749, 739, 0, 735, 0, 0, 0,
	0, 0, 738, 0, 0, 252, 253, 254, 255, 0,
	256, 0, 0, 0, 0, 797, 742, 0, 0, 0,
	257, 258, 259, 212, 816, 782, 817, 770, 803, 818,
	0, 263, 772, 771, 266, 267, 268, 745, 796, 819,
	820, 218, 0, 269, 801, 0, 787, 0, 270, 271,
	272, 273, 274, 0, 276, 277, 278, 275, 0, 279,
	0, 280, 281, 0, 843, 282, 283, 284, 790, 788,
	789, 793, 0, 791, 792, 285, 286, 484, 287, 804,
	289, 821, 822, 728, 290, 0, 291, 0, 292, 0,
	0, 805, 294, 0, 295, 296, 0, 0, 0, 733,
	300, 297, 298, 301, 304, 299, 305, 823, 824, 757,
	844, 0, 0, 0, 0, 0, 306, 307, 825, 806,
	807, 0, 310, 0, 311, 0, 0, 845, 312, 0,
	313, 826, 0, 227, 0, 314, 315, 316, 317, 318,
	319, 798, 800, 847, 0, 781, 0, 0, 0, 0,
	320, 322, 329, 0, 846, 323, 827, 785, 808, 809,
	810, 811, 828, 0, 786, 0, 330, 848, 849, 331,
	332, 333, 850, 812, 813, 0, 0, 336, 337, 338,
	0, 340, 339, 0, 829, 851, 341, 342, 852, 0,
	343, 344, 0, 0, 345, 0, 346, 730, 729, 347,
	348, 350, 774, 349, 853, 352, 353, 355, 354, 725,
	0, 854, 758, 799, 356, 830, 357, 358, 0, 783,
	784, 0, 0, 361, 362, 0, 0, 363, 236, 855,
	364, 856, 831, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 832, 373, 239, 374, 0, 375, 376, 377,
	378, 379, 833, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 387, 390, 391, 392, 393, 0,
	394, 857, 395, 396, 397, 398, 734, 399, 0, 403,
	404, 405, 406, 407, 408, 409, 0, 415, 416, 775,
	776, 777, 778, 411, 417, 418, 794, 419, 400, 401,
	420, 858, 421, 834, 779, 423, 0, 432, 424, 425,
	426, 402, 427, 430, 814, 428, 0, 429, 835, 0,
	433, 434, 0, 435, 436, 437, 438, 439, 302, 440,
	303, 773, 442, 0, 836, 837, 815, 0, 0, 444,
	445, 838, 839, 756, 446, 447, 448, 449, 0, 0,
	450, 451, 452, 454, 795, 455, 0, 780, 456, 457,
	458, 248, 840, 2454, 0, 459, 250, 0, 0, 0,
	0, 460, 461, 251, 462, 463, 464, 726, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	722, 723, 762, 750, 751, 748, 749, 739, 0, 735,
	0, 0, 0, 0, 0, 738, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 797, 742,
	0, 0, 0, 257, 258, 259, 212, 816, 782, 817,
	770, 803, 818, 0, 263, 772, 771, 266, 267, 268,
	745, 796, 819, 820, 218, 0, 269, 801, 0, 787,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	284, 790, 788, 789, 793, 0, 791, 792, 285, 286,
	484, 287, 804, 289, 821, 822, 728, 290, 0, 291,
	0, 292, 0, 0, 805, 294, 0, 295, 296, 0,
	0, 0, 733, 300, 297, 298, 301, 304, 299, 305,
	823, 824, 757, 844, 0, 0, 0, 0, 0, 306,
	307, 825, 806, 807, 0, 310, 0, 311, 0, 0,
	845, 312, 0, 313, 826, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 798, 800, 847, 0, 781, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 827,
	785, 808, 809, 810, 811, 828, 0, 786, 0, 330,
	848, 849, 331, 332, 333, 850, 812, 813, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 829, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	730, 729, 347, 348, 350, 774, 349, 853, 352, 353,
	355, 354, 725, 0, 854, 758, 799, 356, 830, 357,
	358, 0, 783, 784, 720, 0, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 831, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 832, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 833, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 734,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 775, 776, 777, 778, 411, 417, 418, 794,
	419, 400, 401, 420, 858, 421, 834, 779, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 814, 428, 0,
	429, 835, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 773, 442, 0, 836, 837, 815,
	0, 0, 444, 445, 838, 839, 756, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 795, 455, 0,
	780, 456, 457, 458, 248, 840, 0, 0, 459, 250,
	0, 0, 0, 0, 460, 461, 251, 462, 463, 464,
	726, 0, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 0, 722, 723, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 2267, 738, 762,
	750, 751, 748, 749, 739, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 0,
	256, 0, 0, 0, 0, 797, 742, 0, 0, 0,
	257, 258, 259, 212, 816, 782, 817, 770, 803, 818,
	0, 263, 772, 771, 266, 267, 268, 745, 796, 819,
	820, 218, 0, 269, 801, 0, 787, 0, 270, 271,
	272, 273, 274, 0, 276, 277, 278, 275, 0, 279,
	0, 280, 281, 0, 843, 282, 283, 284, 790, 788,
	789, 793, 0, 791, 792, 285, 286, 484, 287, 804,
	289, 821, 822, 728, 290, 0, 291, 0, 292, 0,
	0, 805, 294, 0, 295, 296, 0, 0, 0, 733,
	300, 297, 298, 301, 304, 299, 305, 823, 824, 757,
	844, 0, 0, 0, 0, 0, 306, 307, 825, 806,
	807, 0, 310, 0, 311, 0, 0, 845, 312, 0,
	313, 826, 0, 227, 0, 314, 315, 316, 317, 318,
	319, 798, 800, 847, 0, 781, 0, 0, 0, 0,
	320, 322, 329, 0, 846, 323, 827, 785, 808, 809,
	810, 811, 828, 0, 786, 0, 330, 848, 849, 331,
	332, 333, 850, 812, 813, 0, 0, 336, 337, 338,
	0, 340, 339, 0, 829, 851, 341, 342, 852, 0,
	343, 344, 0, 0, 345, 0, 346, 730, 729, 347,
	348, 350, 774, 349, 853, 352, 353, 355, 354, 725,
	0, 854, 758, 799, 356, 830, 357, 358, 0, 783,
	784, 0, 0, 361, 362, 0, 0, 363, 236, 855,
	364, 856, 831, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 832, 373, 239, 374, 0, 375, 376, 377,
	378, 379, 833, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 387, 390, 391, 392, 393, 0,
	394, 857, 395, 396, 397, 398, 734, 399, 0, 403,
	404, 405, 406, 407, 408, 409, 0, 415, 416, 775,
	776, 777, 778, 411, 417, 418, 794, 419, 400, 401,
	420, 858, 421, 834, 779, 423, 0, 432, 424, 425,
	426, 402, 427, 430, 814, 428, 0, 429, 835, 0,
	433, 434, 0, 435, 436, 437, 438, 439, 302, 440,
	303, 773, 442, 0, 836, 837, 815, 0, 0, 444,
	445, 838, 839, 756, 446, 447, 448, 449, 0, 0,
	450, 451, 452, 454, 795, 455, 0, 780, 456, 457,
	458, 248, 840, 0, 0, 459, 250, 0, 0, 0,
	0, 460, 461, 251, 462, 463, 464, 726, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	722, 723, 762, 750, 751, 748, 749, 739, 0, 735,
	0, 0, 0, 0, 0, 738, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 797, 742,
	0, 0, 0, 257, 258, 259, 212, 816, 782, 817,
	770, 803, 818, 0, 263, 772, 771, 266, 267, 268,
	745, 796, 819, 820, 218, 0, 269, 801, 0, 787,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	284, 790, 788, 789, 793, 0, 791, 792, 285, 286,
	484, 287, 804, 289, 821, 822, 728, 290, 0, 291,
	0, 292, 0, 0, 805, 294, 0, 295, 296, 0,
	0, 0, 733, 300, 297, 298, 301, 304, 299, 305,
	823, 824, 757, 844, 0, 0, 0, 0, 0, 306,
	307, 825, 806, 807, 0, 310, 0, 311, 0, 0,
	845, 312, 0, 313, 826, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 798, 800, 847, 0, 781, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 827,
	785, 808, 809, 810, 811, 828, 0, 786, 0, 330,
	848, 849, 331, 332, 333, 850, 812, 813, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 829, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	730, 729, 347, 348, 350, 774, 349, 853, 352, 353,
	355, 354, 725, 0, 854, 758, 799, 356, 830, 357,
	358, 0, 783, 784, 0, 0, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 831, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 832, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 833, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 734,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 775, 776, 777, 778, 411, 417, 418, 794,
	419, 400, 401, 420, 858, 421, 834, 779, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 814, 428, 0,
	429, 835, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 773, 442, 0, 836, 837, 815,
	0, 0, 444, 445, 838, 839, 756, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 795, 455, 0,
	780, 456, 457, 458, 248, 840, 0, 0, 459, 250,
	0, 0, 0, 0, 460, 461, 251, 462, 463, 464,
	726, 0, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 0, 722, 723, 1392, 762, 750, 751, 748,
	749, 739, 735, 0, 0, 0, 0, 0, 738, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 797, 742, 0, 0, 0, 257, 258, 259,
	212, 816, 782, 817, 770, 803, 818, 0, 263, 772,
	771, 266, 267, 268, 745, 796, 819, 820, 218, 0,
	269, 801, 0, 787, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 843, 282, 283, 284, 790, 788, 789, 793, 0,
	791, 792, 285, 286, 484, 287, 804, 289, 821, 822,
	728, 290, 0, 291, 0, 292, 0, 0, 805, 294,
	0, 295, 296, 0, 0, 0, 733, 300, 297, 298,
	301, 304, 299, 305, 823, 824, 757, 844, 0, 0,
	0, 0, 0, 306, 307, 825, 806, 807, 0, 310,
	0, 311, 0, 1873, 845, 312, 0, 313, 826, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 798, 800,
	847, 0, 781, 0, 0, 0, 0, 320, 322, 329,
	0, 846, 323, 827, 785, 808, 809, 810, 811, 828,
	0, 786, 0, 330, 848, 849, 331, 332, 333, 850,
	812, 813, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 829, 851, 341, 342, 852, 0, 343, 344, 0,
	0, 345, 0, 346, 730, 729, 347, 348, 350, 774,
	349, 853, 352, 353, 355, 354, 725, 0, 854, 758,
	799, 356, 830, 357, 358, 0, 783, 784, 0, 0,
	361, 362, 0, 0, 363, 236, 855, 364, 856, 831,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 832,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 833,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 857, 395,
	396, 397, 398, 734, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 775, 776, 777, 778,
	411, 417, 418, 794, 419, 400, 401, 420, 858, 421,
	834, 779, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 814, 428, 0, 429, 835, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 773, 442,
	0, 836, 837, 815, 0, 0, 444, 445, 838, 839,
	756, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 795, 455, 0, 780, 456, 457, 458, 248, 840,
	0, 0, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 726, 0, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 0, 722, 723, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 0, 0,
	0, 1907, 738, 762, 750, 751, 748, 749, 739, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 0, 256, 0, 0, 0, 0, 797,
	742, 0, 0, 0, 257, 258, 259, 212, 816, 782,
	817, 770, 803, 818, 0, 263, 772, 771, 266, 267,
	268, 745, 796, 819, 820, 218, 0, 269, 801, 0,
	787, 0, 270, 271, 272, 273, 274, 0, 276, 277,
	278, 275, 0, 279, 0, 280, 281, 0, 843, 282,
	283, 284, 790, 788, 789, 793, 0, 791, 792, 285,
	286, 484, 287, 804, 289, 821, 822, 728, 290, 0,
	291, 0, 292, 0, 0, 805, 294, 0, 295, 296,
	0, 0, 0, 733, 300, 297, 298, 301, 304, 299,
	305, 823, 824, 757, 844, 0, 0, 0, 0, 0,
	306, 307, 825, 806, 807, 0, 310, 0, 311, 0,
	0, 845, 312, 0, 313, 826, 0, 227, 0, 314,
	315, 316, 317, 318, 319, 798, 800, 847, 0, 781,
	0, 0, 0, 0, 320, 322, 329, 0, 846, 323,
	827, 785, 808, 809, 810, 811, 828, 0, 786, 0,
	330, 848, 849, 331, 332, 333, 850, 812, 813, 0,
	0, 336, 337, 338, 0, 340, 339, 0, 829, 851,
	341, 342, 852, 0, 343, 344, 0, 0, 345, 0,
	346, 730, 729, 347, 348, 350, 774, 349, 853, 352,
	353, 355, 354, 725, 0, 854, 758, 799, 356, 830,
	357, 358, 0, 783, 784, 0, 0, 361, 362, 0,
	0, 363, 236, 855, 364, 856, 831, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 832, 373, 239, 374,
	0, 375, 376, 377, 378, 379, 833, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 387, 390,
	391, 392, 393, 0, 394, 857, 395, 396, 397, 398,
	734, 399, 0, 403, 404, 405, 406, 407, 408, 409,
	0, 415, 416, 775, 776, 777, 778, 411, 417, 418,
	794, 419, 400, 401, 420, 858, 421, 834, 779, 423,
	0, 432, 424, 425, 426, 402, 427, 430, 814, 428,
	0, 429, 835, 0, 433, 434, 0, 435, 436, 437,
	438, 439, 302, 440, 303, 773, 442, 0, 836, 837,
	815, 0, 0, 444, 445, 838, 839, 756, 446, 447,
	448, 449, 0, 0, 450, 451, 452, 454, 795, 455,
	0, 780, 456, 457, 458, 248, 840, 0, 0, 459,
	250, 0, 0, 0, 0, 460, 461, 251, 462, 463,
	464, 726, 0, 0, 0, 0, 0, 0, 0, 724,
	0, 0, 0, 0, 722, 723, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 0, 0, 1861, 738,
	762, 750, 751, 748, 749, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	0, 256, 0, 0, 0, 0, 797, 742, 0, 0,
	0, 257, 258, 259, 212, 816, 782, 817, 770, 803,
	818, 0, 263, 772, 771, 266, 267, 268, 745, 796,
	819, 820, 218, 0, 269, 801, 0, 787, 0, 270,
	271, 272, 273, 274, 0, 276, 277, 278, 275, 0,
	279, 0, 280, 281, 0, 843, 282, 283, 284, 790,
	788, 789, 793, 0, 791, 792, 285, 286, 484, 287,
	804, 289, 821, 822, 728, 290, 0, 291, 0, 292,
	0, 0, 805, 294, 0, 295, 296, 0, 0, 0,
	733, 300, 297, 298, 301, 304, 299, 305, 823, 824,
	757, 844, 0, 0, 0, 0, 0, 306, 307, 825,
	806, 807, 0, 310, 0, 311, 0, 0, 845, 312,
	0, 313, 826, 0, 227, 0, 314, 315, 316, 317,
	318, 319, 798, 800, 847, 0, 781, 0, 0, 0,
	0, 320, 322, 329, 0, 846, 323, 827, 785, 808,
	809, 810, 811, 828, 0, 786, 0, 330, 848, 849,
	331, 332, 333, 850, 812, 813, 0, 0, 336, 337,
	338, 0, 340, 339, 0, 829, 851, 341, 342, 852,
	0, 343, 344, 0, 0, 345, 0, 346, 730, 729,
	347, 348, 350, 774, 349, 853, 352, 353, 355, 354,
	725, 0, 854, 758, 799, 356, 830, 357, 358, 0,
	783, 784, 0, 0, 361, 362, 0, 0, 363, 236,
	855, 364, 856, 831, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 832, 373, 239, 374, 0, 375, 376,
	377, 378, 379, 833, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	0, 394, 857, 395, 396, 397, 398, 734, 399, 0,
	403, 404, 405, 406, 407, 408, 409, 0, 415, 416,
	775, 776, 777, 778, 411, 417, 418, 794, 419, 400,
	401, 420, 858, 421, 834, 779, 423, 0, 432, 424,
	425, 426, 402, 427, 430, 814, 428, 0, 429, 835,
	0, 433, 434, 0, 435, 436, 437, 438, 439, 302,
	440, 303, 773, 442, 0, 836, 837, 815, 0, 0,
	444, 445, 838, 839, 756, 446, 447, 448, 449, 0,
	0, 450, 451, 452, 454, 795, 455, 0, 780, 456,
	457, 458, 248, 840, 0, 0, 459, 250, 0, 0,
	0, 0, 460, 461, 251, 462, 463, 464, 726, 0,
	0, 0, 0, 0, 0, 0, 724, 0, 0, 0,
	0, 722, 723, 0, 0, 0, 0, 0, 0, 0,
	735, 0, 0, 0, 0, 1849, 738, 762, 750, 751,
	748, 749, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 0, 256, 0,
	0, 0, 0, 797, 742, 0, 0, 0, 257, 258,
	259, 212, 816, 782, 817, 770, 803, 818, 0, 263,
	772, 771, 266, 267, 268, 745, 796, 819, 820, 218,
	0, 269, 801, 0, 787, 0, 270, 271, 272, 273,
	274, 0, 276, 277, 278, 275, 0, 279, 0, 280,
	281, 0, 843, 282, 283, 284, 790, 788, 789, 793,
	0, 791, 792, 285, 286, 484, 287, 804, 289, 821,
	822, 728, 290, 0, 291, 0, 292, 0, 0, 805,
	294, 0, 295, 296, 0, 0, 0, 733, 300, 297,
	298, 301, 304, 299, 305, 823, 824, 757, 844, 0,
	0, 0, 0, 0, 306, 307, 825, 806, 807, 0,
	310, 0, 311, 0, 0, 845, 312, 0, 313, 826,
	0, 227, 0, 314, 315, 316, 317, 318, 319, 798,
	800, 847, 0, 781, 0, 0, 0, 0, 320, 322,
	329, 0, 846, 323, 827, 785, 808, 809, 810, 811,
	828, 0, 786, 0, 330, 848, 849, 331, 332, 333,
	850, 812, 813, 0, 0, 336, 337, 338, 0, 340,
	339, 0, 829, 851, 341, 342, 852, 0, 343, 344,
	0, 0, 345, 0, 346, 730, 729, 347, 348, 350,
	774, 349, 853, 352, 353, 355, 354, 725, 0, 854,
	758, 799, 356, 830, 357, 358, 0, 783, 784, 0,
	0, 361, 362, 0, 0, 363, 236, 855, 364, 856,
	831, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	832, 373, 239, 374, 0, 375, 376, 377, 378, 379,
	833, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 857,
	395, 396, 397, 398, 734, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 0, 415, 416, 775, 776, 777,
	778, 411, 417, 418, 794, 419, 400, 401, 420, 858,
	421, 834, 779, 423, 0, 432, 424, 425, 426, 402,
	427, 430, 814, 428, 0, 429, 835, 0, 433, 434,
	0, 435, 436, 437, 438, 439, 302, 440, 303, 773,
	442, 0, 836, 837, 815, 0, 0, 444, 445, 838,
	839, 756, 446, 447, 448, 449, 0, 0, 450, 451,
	452, 454, 795, 455, 0, 780, 456, 457, 458, 248,
	840, 0, 0, 459, 250, 0, 0, 0, 0, 460,
	461, 251, 462, 463, 464, 726, 0, 0, 0, 0,
	0, 0, 0, 724, 0, 0, 0, 0, 722, 723,
	0, 0, 0, 0, 0, 0, 0, 735, 0, 0,
	0, 0, 1847, 738, 762, 750, 751, 748, 749, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 0, 256, 0, 0, 0, 0,
	797, 742, 0, 0, 0, 257, 258, 259, 212, 816,
	782, 817, 770, 803, 818, 0, 263, 772, 771, 266,
	267, 268, 745, 796, 819, 820, 218, 0, 269, 801,
	0, 787, 0, 270, 271, 272, 273, 274, 0, 276,
	277, 278, 275, 0, 279, 0, 280, 281, 0, 843,
	282, 283, 284, 790, 788, 789, 793, 0, 791, 792,
	285, 286, 484, 287, 804, 289, 821, 822, 728, 290,
	0, 291, 0, 292, 0, 0, 805, 294, 0, 295,
	296, 0, 0, 0, 733, 300, 297, 298, 301, 304,
	299, 305, 823, 824, 757, 844, 0, 0, 0, 0,
	0, 306, 307, 825, 806, 807, 0, 310, 0, 311,
	0, 0, 845, 312, 0, 313, 826, 0, 227, 0,
	314, 315, 316, 317, 318, 319, 798, 800, 847, 0,
	781, 0, 0, 0, 0, 320, 322, 329, 0, 846,
	323, 827, 785, 808, 809, 810, 811, 828, 0, 786,
	0, 330, 848, 849, 331, 332, 333, 850, 812, 813,
	0, 0, 336, 337, 338, 0, 340, 339, 0, 829,
	851, 341, 342, 852, 0, 343, 344, 0, 0, 345,
	0, 346, 730, 729, 347, 348, 350, 774, 349, 853,
	352, 353, 355, 354, 725, 0, 854, 758, 799, 356,
	830, 357, 358, 0, 783, 784, 0, 0, 361, 362,
	0, 0, 363, 236, 855, 364, 856, 831, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 832, 373, 239,
	374, 0, 375, 376, 377, 378, 379, 833, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 0, 394, 857, 395, 396, 397,
	398, 734, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 415, 416, 775, 776, 777, 778, 411, 417,
	418, 794, 419, 400, 401, 420, 858, 421, 834, 779,
	423, 0, 432, 424, 425, 426, 402, 427, 430, 814,
	428, 0, 429, 835, 0, 433, 434, 0, 435, 436,
	437, 438, 439, 302, 440, 303, 773, 442, 0, 836,
	837, 815, 0, 0, 444, 445, 838, 839, 756, 446,
	447, 448, 449, 0, 0, 450, 451, 452, 454, 795,
	455, 0, 780, 456, 457, 458, 248, 840, 0, 0,
	459, 250, 0, 0, 0, 0, 460, 461, 251, 462,
	463, 464, 726, 0, 0, 0, 0, 0, 0, 0,
	724, 0, 0, 0, 0, 722, 723, 0, 0, 0,
	0, 0, 0, 0, 735, 0, 0, 0, 0, 1845,
	738, 762, 750, 751, 748, 749, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 0, 256, 0, 0, 0, 0, 797, 742, 0,
	0, 0, 257, 258, 259, 212, 816, 782, 817, 770,
	803, 818, 0, 263, 772, 771, 266, 267, 268, 745,
	796, 819, 820, 218, 0, 269, 801, 0, 787, 0,
	270, 271, 272, 273, 274, 0, 276, 277, 278, 275,
	0, 279, 0, 280, 281, 0, 843, 282, 283, 284,
	790, 788, 789, 793, 0, 791, 792, 285, 286, 484,
	287, 804, 289, 821, 822, 728, 290, 0, 291, 0,
	292, 0, 0, 805, 294, 0, 295, 296, 0, 0,
	0, 733, 300, 297, 298, 301, 304, 299, 305, 823,
	824, 757, 844, 0, 0, 0, 0, 0, 306, 307,
	825, 806, 807, 0, 310, 0, 311, 0, 0, 845,
	312, 0, 313, 826, 0, 227, 0, 314, 315, 316,
	317, 318, 319, 798, 800, 847, 0, 781, 0, 0,
	0, 0, 320, 322, 329, 0, 846, 323, 827, 785,
	808, 809, 810, 811, 828, 0, 786, 0, 330, 848,
	849, 331, 332, 333, 850, 812, 813, 0, 0, 336,
	337, 338, 0, 340, 339, 0, 829, 851, 341, 342,
	852, 0, 343, 344, 0, 0, 345, 0, 346, 730,
	729, 347, 348, 350, 774, 349, 853, 352, 353, 355,
	354, 725, 0, 854, 758, 799, 356, 830, 357, 358,
	0, 783, 784, 0, 0, 361, 362, 0, 0, 363,
	236, 855, 364, 856, 831, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 832, 373, 239, 374, 0, 375,
	376, 377, 378, 379, 833, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 857, 395, 396, 397, 398, 734, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 415,
	416, 775, 776, 777, 778, 411, 417, 418, 794, 419,
	400, 401, 420, 858, 421, 834, 779, 423, 0, 432,
	424, 425, 426, 402, 427, 430, 814, 428, 0, 429,
	835, 0, 433, 434, 0, 435, 436, 437, 438, 439,
	302, 440, 303, 773, 442, 0, 836, 837, 815, 0,
	0, 444, 445, 838, 839, 756, 446, 447, 448, 449,
	0, 0, 450, 451, 452, 454, 795, 455, 0, 780,
	456, 457, 458, 248, 840, 0, 0, 459, 250, 0,
	0, 0, 0, 460, 461, 251, 462, 463, 464, 726,
	0, 0, 0, 0, 0, 0, 0, 724, 0, 0,
	0, 0, 722, 723, 0, 0, 0, 0, 0, 0,
	0, 735, 0, 0, 0, 0, 1842, 738, 1834, 750,
	751, 748, 749, 739, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 0, 256,
	0, 0, 0, 0, 797, 742, 0, 0, 0, 257,
	258, 259, 212, 816, 782, 817, 770, 803, 818, 0,
	263, 772, 771, 266, 267, 268, 745, 796, 819, 820,
	218, 0, 269, 801, 0, 787, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 0, 843, 282, 283, 284, 790, 788, 789,
	793, 0, 791, 792, 285, 286, 484, 287, 804, 1837,
	821, 822, 728, 290, 0, 291, 0, 292, 0, 0,
	805, 294, 0, 295, 296, 0, 0, 0, 733, 300,
	297, 298, 301, 304, 299, 305, 823, 824, 757, 844,
	0, 0, 0, 0, 0, 306, 307, 825, 806, 807,
	0, 310, 0, 311, 0, 0, 845, 312, 0, 313,
	826, 0, 227, 0, 314, 315, 1838, 317, 318, 319,
	798, 800, 847, 0, 781, 0, 0, 0, 0, 320,
	322, 329, 0, 846, 323, 827, 785, 808, 809, 810,
	811, 828, 0, 786, 0, 330, 848, 849, 331, 332,
	333, 850, 812, 813, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 829, 851, 341, 342, 852, 0, 343,
	344, 0, 0, 345, 0, 346, 730, 729, 1839, 1836,
	350, 774, 349, 853, 352, 353, 355, 354, 725, 0,
	854, 758, 799, 356, 830, 357, 358, 0, 783, 784,
	0, 0, 361, 362, 0, 0, 363, 236, 855, 364,
	856, 831, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 832, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 833, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	857, 395, 396, 397, 398, 734, 399, 0, 403, 404,
	405, 406, 407, 408, 1840, 0, 415, 416, 775, 776,
	777, 778, 411, 417, 418, 794, 419, 400, 401, 420,
	858, 421, 834, 779, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 814, 428, 0, 429, 835, 0, 433,
	434, 0, 435, 436, 437, 438, 439, 302, 440, 303,
	773, 442, 0, 836, 837, 815, 0, 0, 444, 445,
	838, 839, 756, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 795, 455, 0, 780, 456, 457, 458,
	248, 840, 0, 0, 459, 250, 0, 0, 0, 0,
	460, 461, 251, 462, 1835, 464, 726, 0, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 0, 722,
	723, 0, 0, 0, 0, 0, 0, 0, 735, 0,
	0, 0, 0, 1831, 738, 1834, 750, 751, 748, 749,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 0, 256, 0, 0, 0,
	0, 797, 742, 0, 0, 0, 257, 258, 259, 212,
	816, 782, 817, 770, 803, 818, 0, 263, 772, 771,
	266, 267, 268, 745, 796, 819, 820, 218, 0, 269,
	801, 0, 787, 0, 270, 271, 272, 273, 274, 0,
	276, 277, 278, 275, 0, 279, 0, 280, 281, 0,
	843, 282, 283, 284, 790, 788, 789, 793, 0, 791,
	792, 285, 286, 484, 287, 804, 1837, 821, 822, 728,
	290, 0, 291, 0, 292, 0, 0, 805, 294, 0,
	295, 296, 0, 0, 0, 733, 300, 297, 298, 301,
	304, 299, 305, 823, 824, 757, 844, 0, 0, 0,
	0, 0, 306, 307, 825, 806, 807, 0, 310, 0,
	311, 0, 0, 845, 312, 0, 313, 826, 0, 227,
	0, 314, 315, 1838, 317, 318, 319, 798, 800, 847,
	0, 781, 0, 0, 0, 0, 320, 322, 329, 0,
	846, 323, 827, 785, 808, 809, 810, 811, 828, 0,
	786, 0, 330, 848, 849, 331, 332, 333, 850, 812,
	813, 0, 0, 336, 337, 338, 0, 340, 339, 0,
	829, 851, 341, 342, 852, 0, 343, 344, 0, 0,
	345, 0, 346, 730, 729, 1839, 1836, 350, 774, 349,
	853, 352, 353, 355, 354, 725, 0, 854, 758, 799,
	356, 830, 357, 358, 0, 783, 784, 0, 0, 361,
	362, 0, 0, 363, 236, 855, 364, 856, 831, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 832, 373,
	239, 374, 0, 375, 376, 377, 378, 379, 833, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	387, 390, 391, 392, 393, 0, 394, 857, 395, 396,
	397, 398, 734, 399, 0, 403, 404, 405, 406, 407,
	408, 1840, 0, 415, 416, 775, 776, 777, 778, 411,
	417, 418, 794, 419, 400, 401, 420, 858, 421, 834,
	779, 423, 0, 432, 424, 425, 426, 402, 427, 430,
	814, 428, 0, 429, 835, 0, 433, 434, 0, 435,
	436, 437, 438, 439, 302, 440, 303, 773, 442, 0,
	836, 837, 815, 0, 0, 444, 445, 838, 839, 756,
	446, 447, 448, 449, 0, 0, 450, 451, 452, 454,
	795, 455, 0, 780, 456, 457, 458, 248, 840, 0,
	0, 459, 250, 0, 0, 0, 0, 460, 461, 251,
	462, 1835, 464, 726, 0, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 0, 722, 723, 762, 750,
	751, 748, 749, 739, 0, 735, 0, 0, 0, 0,
	0, 738, 0, 0, 252, 253, 254, 255, 0, 256,
	0, 0, 0, 0, 797, 742, 0, 0, 0, 257,
	258, 259, 212, 816, 782, 817, 770, 803, 818, 0,
	263, 772, 771, 266, 267, 268, 745, 796, 819, 820,
	218, 0, 269, 801, 0, 787, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 0, 843, 282, 283, 284, 790, 788, 789,
	793, 0, 791, 792, 285, 286, 484, 287, 804, 289,
	821, 822, 728, 290, 0, 291, 0, 292, 0, 0,
	805, 294, 0, 295, 296, 0, 0, 0, 733, 300,
	297, 298, 301, 304, 299, 305, 823, 824, 757, 844,
	0, 0, 0, 0, 0, 306, 307, 825, 806, 807,
	0, 310, 0, 311, 0, 0, 845, 312, 0, 313,
	826, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	798, 800, 847, 0, 781, 0, 0, 0, 0, 320,
	322, 329, 0, 846, 323, 827, 785, 808, 809, 810,
	811, 828, 0, 786, 0, 330, 848, 849, 331, 332,
	333, 850, 812, 813, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 829, 851, 341, 342, 852, 0, 343,
	344, 0, 0, 345, 0, 346, 730, 729, 347, 348,
	350, 774, 349, 853, 352, 353, 355, 354, 725, 0,
	854, 758, 799, 356, 830, 357, 358, 0, 783, 784,
	0, 0, 361, 362, 0, 0, 363, 236, 855, 364,
	856, 831, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 832, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 833, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	857, 395, 396, 397, 398, 734, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 415, 416, 775, 776,
	777, 778, 411, 417, 418, 794, 419, 400, 401, 420,
	858, 421, 834, 779, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 814, 428, 0, 429, 835, 0, 433,
	434, 0, 435, 436, 437, 438, 439, 302, 440, 303,
	773, 442, 0, 836, 837, 815, 0, 0, 444, 445,
	838, 839, 756, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 795, 455, 0, 780, 456, 457, 458,
	248, 840, 0, 0, 459, 250, 0, 0, 0, 0,
	460, 461, 251, 462, 463, 464, 726, 0, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 0, 722,
	723, 0, 0, 0, 0, 0, 1336, 0, 735, 0,
	0, 0, 0, 0, 738, 762, 750, 751, 748, 749,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 1686, 256, 0, 0, 0,
	0, 797, 742, 0, 0, 0, 257, 258, 259, 212,
	816, 782, 817, 770, 803, 818, 0, 263, 772, 771,
	266, 267, 268, 745, 796, 819, 820, 218, 0, 269,
	801, 0, 787, 0, 270, 271, 272, 273, 274, 0,
	276, 277, 278, 275, 0, 279, 0, 280, 281, 0,
	843, 282, 283, 284, 790, 788, 789, 793, 0, 791,
	792, 285, 286, 484, 287, 804, 289, 821, 822, 728,
	290, 0, 291, 0, 292, 0, 0, 805, 294, 0,
	295, 296, 0, 0, 0, 733, 300, 297, 298, 301,
	304, 299, 305, 823, 824, 757, 844, 0, 0, 0,
	0, 0, 306, 307, 825, 806, 807, 0, 310, 0,
	311, 0, 0, 845, 312, 0, 313, 826, 0, 227,
	0, 314, 315, 316, 317, 318, 319, 798, 800, 847,
	0, 781, 0, 0, 0, 0, 320, 322, 329, 0,
	846, 323, 827, 785, 808, 809, 810, 811, 828, 0,
	786, 0, 330, 848, 849, 331, 332, 333, 850, 812,
	813, 0, 0, 336, 337, 338, 0, 340, 339, 0,
	829, 851, 341, 342, 852, 0, 343, 344, 0, 0,
	345, 0, 346, 730, 729, 347, 348, 350, 774, 349,
	853, 352, 353, 355, 354, 725, 0, 854, 758, 799,
	356, 830, 357, 358, 0, 783, 784, 0, 0, 361,
	362, 0, 0, 363, 236, 855, 364, 856, 831, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 832, 373,
	239, 374, 0, 375, 376, 377, 378, 379, 833, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	387, 390, 391, 392, 393, 0, 394, 857, 395, 396,
	397, 398, 734, 399, 0, 403, 404, 405, 406, 407,
	408, 409, 0, 415, 416, 775, 776, 777, 778, 411,
	417, 418, 794, 419, 400, 401, 420, 858, 421, 834,
	779, 423, 0, 432, 424, 425, 426, 402, 427, 430,
	814, 428, 0, 429, 835, 0, 433, 434, 0, 435,
	436, 437, 438, 439, 302, 440, 303, 773, 442, 0,
	836, 837, 815, 0, 0, 444, 445, 838, 839, 756,
	446, 447, 448, 449, 0, 0, 450, 451, 452, 454,
	795, 455, 0, 780, 456, 457, 458, 248, 840, 0,
	0, 459, 250, 0, 0, 0, 0, 460, 461, 251,
	462, 463, 464, 726, 0, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 0, 722, 723, 0, 0,
	0, 0, 0, 0, 0, 735, 0, 0, 0, 0,
	1051, 738, 762, 750, 751, 748, 749, 739, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 797, 742,
	0, 0, 0, 257, 258, 259, 212, 816, 782, 817,
	770, 803, 818, 0, 263, 772, 771, 266, 267, 268,
	745, 796, 819, 820, 218, 0, 269, 801, 0, 787,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	284, 790, 788, 789, 793, 0, 791, 792, 285, 286,
	484, 287, 804, 289, 821, 822, 728, 290, 0, 291,
	0, 292, 0, 0, 805, 294, 0, 295, 296, 0,
	0, 0, 733, 300, 297, 298, 301, 304, 299, 305,
	823, 824, 757, 844, 0, 0, 0, 0, 0, 306,
	307, 825, 806, 807, 0, 310, 0, 311, 0, 0,
	845, 312, 0, 313, 826, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 1050, 800, 847, 0, 781, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 827,
	785, 808, 809, 810, 811, 828, 0, 786, 0, 330,
	848, 849, 331, 332, 333, 850, 812, 813, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 829, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	730, 729, 347, 348, 350, 774, 349, 853, 352, 353,
	355, 354, 725, 0, 854, 758, 799, 356, 830, 357,
	358, 0, 783, 784, 0, 0, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 831, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 832, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 833, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 734,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 775, 776, 777, 778, 411, 417, 418, 794,
	419, 400, 401, 420, 858, 421, 834, 779, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 814, 428, 0,
	429, 835, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 773, 442, 0, 836, 837, 815,
	0, 0, 444, 445, 838, 839, 756, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 795, 455, 0,
	780, 456, 457, 458, 248, 840, 0, 0, 459, 250,
	0, 0, 0, 0, 460, 461, 251, 462, 463, 464,
	726, 0, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 0, 722, 723, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 1048, 738, 762,
	750, 751, 748, 749, 739, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 0,
	256, 0, 0, 0, 0, 797, 742, 0, 0, 0,
	257, 258, 259, 212, 816, 782, 817, 770, 803, 818,
	0, 263, 772, 771, 266, 267, 268, 745, 796, 819,
	820, 218, 0, 269, 801, 0, 787, 0, 270, 271,
	272, 273, 274, 0, 276, 277, 278, 275, 0, 279,
	0, 280, 281, 0, 843, 282, 283, 284, 790, 788,
	789, 793, 0, 791, 792, 285, 286, 484, 287, 804,
	289, 821, 822, 728, 290, 0, 291, 0, 292, 0,
	0, 805, 294, 0, 295, 296, 0, 0, 0, 733,
	300, 297, 298, 301, 304, 299, 305, 823, 824, 757,
	844, 0, 0, 0, 0, 0, 306, 307, 825, 806,
	807, 0, 310, 0, 311, 0, 0, 845, 312, 0,
	313, 826, 0, 227, 0, 314, 315, 316, 317, 318,
	319, 1047, 800, 847, 0, 781, 0, 0, 0, 0,
	320, 322, 329, 0, 846, 323, 827, 785, 808, 809,
	810, 811, 828, 0, 786, 0, 330, 848, 849, 331,
	332, 333, 850, 812, 813, 0, 0, 336, 337, 338,
	0, 340, 339, 0, 829, 851, 341, 342, 852, 0,
	343, 344, 0, 0, 345, 0, 346, 730, 729, 347,
	348, 350, 774, 349, 853, 352, 353, 355, 354, 725,
	0, 854, 758, 799, 356, 830, 357, 358, 0, 783,
	784, 0, 0, 361, 362, 0, 0, 363, 236, 855,
	364, 856, 831, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 832, 373, 239, 374, 0, 375, 376, 377,
	378, 379, 833, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 387, 390, 391, 392, 393, 0,
	394, 857, 395, 396, 397, 398, 734, 399, 0, 403,
	404, 405, 406, 407, 408, 409, 0, 415, 416, 775,
	776, 777, 778, 411, 417, 418, 794, 419, 400, 401,
	420, 858, 421, 834, 779, 423, 0, 432, 424, 425,
	426, 402, 427, 430, 814, 428, 0, 429, 835, 0,
	433, 434, 0, 435, 436, 437, 438, 439, 302, 440,
	303, 773, 442, 0, 836, 837, 815, 0, 0, 444,
	445, 838, 839, 756, 446, 447, 448, 449, 0, 0,
	450, 451, 452, 454, 795, 455, 0, 780, 456, 457,
	458, 248, 840, 0, 0, 459, 250, 0, 0, 0,
	0, 460, 461, 251, 462, 463, 464, 726, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	722, 723, 0, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 0, 1045, 738, 762, 750, 751, 748,
	749, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 797, 742, 0, 0, 0, 257, 258, 259,
	212, 816, 782, 817, 770, 803, 818, 0, 263, 772,
	771, 266, 267, 268, 745, 796, 819, 820, 218, 0,
	269, 801, 0, 787, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 843, 282, 283, 284, 790, 788, 789, 793, 0,
	791, 792, 285, 286, 484, 287, 804, 289, 821, 822,
	728, 290, 0, 291, 0, 292, 0, 0, 805, 294,
	0, 295, 296, 0, 0, 0, 733, 300, 297, 298,
	301, 304, 299, 305, 823, 824, 757, 844, 0, 0,
	0, 0, 0, 306, 307, 825, 806, 807, 0, 310,
	0, 311, 0, 0, 845, 312, 0, 313, 826, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 798, 800,
	847, 0, 781, 0, 0, 0, 0, 320, 322, 329,
	0, 846, 323, 827, 785, 808, 809, 810, 811, 828,
	0, 786, 0, 330, 848, 849, 331, 332, 333, 850,
	812, 813, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 829, 851, 341, 342, 852, 0, 343, 344, 0,
	0, 345, 0, 346, 730, 729, 347, 348, 350, 774,
	349, 853, 352, 353, 355, 354, 725, 0, 854, 758,
	799, 356, 830, 357, 358, 0, 783, 784, 0, 0,
	361, 362, 0, 0, 363, 236, 855, 364, 856, 831,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 832,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 833,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 857, 395,
	396, 397, 398, 734, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 775, 776, 777, 778,
	411, 417, 418, 794, 419, 400, 401, 420, 858, 421,
	834, 779, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 814, 428, 0, 429, 835, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 773, 442,
	0, 836, 837, 815, 0, 0, 444, 445, 838, 839,
	756, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 795, 455, 0, 780, 456, 457, 458, 248, 840,
	0, 0, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 726, 0, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 0, 722, 723, 762,
	750, 751, 748, 749, 739, 0, 735, 0, 0, 0,
	0, 0, 738, 0, 0, 252, 253, 254, 255, 0,
	256, 0, 0, 0, 0, 797, 742, 0, 0, 0,
	257, 258, 259, 212, 816, 782, 817, 770, 803, 818,
	0, 263, 772, 771, 266, 267, 268, 745, 796, 819,
	820, 218, 0, 269, 801, 0, 787, 0, 270, 271,
	272, 273, 274, 0, 276, 277, 278, 275, 0, 279,
	0, 280, 281, 0, 843, 282, 283, 284, 790, 788,
	789, 793, 0, 791, 792, 285, 286, 484, 287, 804,
	289, 821, 822, 728, 290, 0, 291, 0, 292, 0,
	0, 805, 294, 0, 295, 296, 0, 0, 0, 733,
	300, 297, 298, 301, 304, 299, 305, 823, 824, 757,
	844, 0, 0, 0, 0, 0, 306, 307, 825, 806,
	807, 0, 310, 0, 311, 0, 0, 845, 312, 0,
	313, 826, 0, 227, 0, 314, 315, 316, 317, 318,
	319, 798, 800, 847, 0, 781, 0, 0, 0, 0,
	320, 322, 329, 0, 846, 323, 827, 785, 808, 809,
	810, 811, 828, 0, 786, 0, 330, 848, 849, 331,
	332, 333, 850, 812, 813, 0, 0, 336, 337, 338,
	0, 340, 339, 0, 829, 851, 341, 342, 852, 0,
	343, 344, 0, 0, 345, 0, 346, 730, 729, 347,
	348, 350, 774, 349, 853, 352, 353, 355, 354, 725,
	0, 854, 758, 799, 356, 830, 357, 358, 0, 783,
	784, 0, 0, 361, 362, 0, 0, 363, 236, 855,
	364, 856, 831, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 832, 373, 239, 374, 0, 375, 376, 377,
	378, 379, 833, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 387, 390, 391, 392, 393, 0,
	394, 857, 395, 396, 397, 398, 734, 399, 0, 403,
	404, 405, 406, 407, 408, 409, 0, 415, 416, 775,
	776, 777, 778, 411, 417, 418, 794, 419, 400, 401,
	420, 858, 421, 834, 779, 423, 0, 432, 424, 425,
	426, 402, 427, 430, 814, 428, 0, 429, 835, 0,
	433, 434, 0, 435, 436, 437, 438, 439, 302, 440,
	303, 773, 442, 0, 836, 837, 815, 0, 0, 444,
	445, 838, 839, 756, 446, 447, 448, 449, 0, 0,
	450, 451, 452, 454, 795, 455, 0, 780, 456, 457,
	458, 248, 840, 0, 0, 459, 250, 0, 0, 0,
	0, 460, 461, 251, 462, 463, 464, 726, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	722, 723, 762, 750, 751, 748, 749, 739, 0, 735,
	0, 0, 0, 0, 0, 738, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 797, 742,
	0, 0, 0, 257, 258, 259, 212, 816, 782, 817,
	770, 803, 818, 0, 263, 772, 771, 266, 267, 268,
	745, 796, 819, 820, 218, 0, 269, 801, 0, 787,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	3007, 790, 788, 789, 793, 0, 791, 792, 285, 286,
	484, 287, 804, 289, 821, 822, 728, 290, 0, 291,
	0, 292, 0, 0, 805, 294, 0, 295, 296, 0,
	0, 0, 733, 300, 297, 298, 301, 304, 299, 305,
	823, 824, 757, 844, 0, 0, 0, 0, 0, 306,
	307, 825, 806, 807, 0, 310, 0, 311, 0, 0,
	845, 312, 0, 313, 826, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 798, 800, 847, 0, 781, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 827,
	785, 808, 809, 810, 811, 828, 0, 786, 0, 330,
	848, 849, 331, 332, 333, 850, 812, 813, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 829, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	730, 729, 347, 348, 350, 774, 349, 853, 352, 353,
	355, 354, 725, 0, 854, 758, 799, 356, 830, 357,
	358, 0, 783, 784, 0, 0, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 831, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 832, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 833, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 734,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 775, 776, 777, 778, 411, 417, 418, 794,
	419, 400, 401, 420, 858, 421, 834, 779, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 814, 428, 0,
	429, 835, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 773, 442, 0, 836, 837, 815,
	0, 0, 444, 445, 838, 839, 756, 446, 447, 3006,
	449, 0, 0, 450, 451, 452, 454, 795, 455, 0,
	780, 456, 457, 458, 248, 840, 0, 0, 459, 250,
	0, 0, 0, 0, 460, 461, 251, 462, 463, 464,
	726, 0, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 0, 722, 723, 762, 750, 751, 748, 749,
	739, 0, 735, 0, 0, 0, 0, 0, 738, 0,
	0, 252, 253, 254, 255, 0, 256, 0, 0, 0,
	0, 797, 742, 0, 0, 0, 257, 258, 259, 3005,
	816, 782, 817, 770, 803, 818, 0, 263, 772, 771,
	266, 267, 268, 745, 796, 819, 820, 218, 0, 269,
	801, 0, 787, 0, 270, 271, 272, 273, 274, 0,
	276, 277, 278, 275, 0, 279, 0, 280, 281, 0,
	843, 282, 283, 3007, 790, 788, 789, 793, 0, 791,
	792, 285, 286, 484, 287, 804, 289, 821, 822, 728,
	290, 0, 291, 0, 292, 0, 0, 805, 294, 0,
	295, 296, 0, 0, 0, 733, 300, 297, 298, 301,
	304, 299, 305, 823, 824, 757, 844, 0, 0, 0,
	0, 0, 306, 307, 825, 806, 807, 0, 310, 0,
	311, 0, 0, 845, 312, 0, 313, 826, 0, 227,
	0, 314, 315, 316, 317, 318, 319, 798, 800, 847,
	0, 781, 0, 0, 0, 0, 320, 322, 329, 0,
	846, 323, 827, 785, 808, 809, 810, 811, 828, 0,
	786, 0, 330, 848, 849, 331, 332, 333, 850, 812,
	813, 0, 0, 336, 337, 338, 0, 340, 339, 0,
	829, 851, 341, 342, 852, 0, 343, 344, 0, 0,
	345, 0, 346, 730, 729, 347, 348, 350, 774, 349,
	853, 352, 353, 355, 354, 725, 0, 854, 758, 799,
	356, 830, 357, 358, 0, 783, 784, 0, 0, 361,
	362, 0, 0, 363, 236, 855, 364, 856, 831, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 832, 373,
	239, 374, 0, 375, 376, 377, 378, 379, 833, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	387, 390, 391, 392, 393, 0, 394, 857, 395, 396,
	397, 398, 734, 399, 0, 403, 404, 405, 406, 407,
	408, 409, 0, 415, 416, 775, 776, 777, 778, 411,
	417, 418, 794, 419, 400, 401, 420, 858, 421, 834,
	779, 423, 0, 432, 424, 425, 426, 402, 427, 430,
	814, 428, 0, 429, 835, 0, 433, 434, 0, 435,
	436, 437, 438, 439, 302, 440, 303, 773, 442, 0,
	836, 837, 815, 0, 0, 444, 445, 838, 839, 756,
	446, 447, 3006, 449, 0, 0, 450, 451, 452, 454,
	795, 455, 0, 780, 456, 457, 458, 248, 840, 0,
	0, 459, 250, 0, 0, 0, 0, 460, 461, 251,
	462, 463, 464, 726, 0, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 0, 722, 723, 762, 750,
	751, 748, 749, 739, 0, 735, 0, 0, 0, 0,
	0, 738, 0, 0, 252, 253, 254, 255, 0, 256,
	0, 0, 0, 0, 797, 742, 0, 0, 0, 257,
	258, 259, 212, 816, 782, 817, 770, 803, 818, 0,
	263, 772, 771, 266, 267, 268, 745, 796, 819, 820,
	218, 0, 269, 801, 0, 787, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 0, 843, 282, 283, 284, 790, 788, 789,
	793, 0, 791, 792, 285, 286, 484, 287, 804, 289,
	821, 822, 0, 290, 0, 291, 0, 292, 0, 0,
	805, 294, 0, 295, 296, 0, 0, 0, 733, 300,
	297, 298, 301, 304, 299, 305, 823, 824, 757, 844,
	0, 0, 0, 0, 0, 306, 307, 825, 806, 807,
	0, 310, 0, 311, 0, 0, 845, 312, 0, 313,
	826, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	798, 800, 847, 0, 781, 0, 0, 0, 0, 320,
	322, 329, 0, 846, 323, 827, 785, 808, 809, 810,
	811, 828, 0, 786, 0, 330, 848, 849, 331, 332,
	333, 850, 812, 813, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 829, 851, 341, 342, 852, 0, 343,
	344, 0, 0, 345, 0, 346, 913, 912, 347, 348,
	350, 774, 349, 853, 352, 353, 355, 354, 0, 0,
	854, 758, 799, 356, 830, 357, 358, 0, 783, 784,
	0, 0, 361, 362, 0, 0, 363, 236, 855, 364,
	856, 831, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 832, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 833, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	857, 395, 396, 397, 398, 1859, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 415, 416, 775, 776,
	777, 778, 411, 417, 418, 794, 419, 400, 401, 420,
	858, 421, 834, 779, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 814, 428, 0, 429, 835, 0, 433,
	434, 0, 435, 436, 437, 438, 439, 302, 440, 303,
	773, 442, 0, 836, 837, 815, 0, 0, 444, 445,
	838, 839, 756, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 795, 455, 0, 780, 456, 457, 458,
	248, 840, 0, 0, 459, 250, 0, 0, 0, 0,
	460, 461, 251, 462, 463, 464, 762, 750, 751, 748,
	749, 739, 0, 0, 1857, 0, 0, 0, 0, 1855,
	1856, 0, 252, 253, 254, 255, 0, 256, 1858, 0,
	0, 0, 797, 742, 738, 0, 0, 257, 258, 259,
	0, 816, 782, 817, 770, 803, 818, 0, 263, 772,
	771, 266, 267, 268, 745, 796, 819, 820, 218, 0,
	269, 801, 0, 787, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 843, 282, 283, 3007, 790, 788, 789, 793, 0,
	791, 792, 285, 286, 484, 287, 804, 289, 821, 822,
	728, 290, 0, 291, 0, 292, 0, 0, 805, 294,
	0, 295, 296, 0, 0, 0, 733, 300, 297, 298,
	301, 304, 299, 305, 823, 824, 757, 844, 0, 0,
	0, 0, 0, 306, 307, 825, 806, 807, 0, 310,
	0, 311, 0, 0, 845, 312, 0, 313, 826, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 798, 800,
	0, 0, 781, 0, 0, 0, 0, 320, 322, 329,
	0, 846, 323, 827, 785, 808, 809, 810, 811, 828,
	0, 786, 0, 330, 0, 0, 331, 332, 333, 850,
	812, 813, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 829, 851, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 730, 729, 347, 348, 350, 774,
	349, 853, 352, 353, 355, 354, 725, 0, 0, 758,
	799, 356, 830, 357, 358, 0, 783, 784, 0, 0,
	361, 362, 0, 0, 363, 236, 855, 364, 856, 831,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 832,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 833,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 857, 395,
	396, 397, 398, 734, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 775, 776, 777, 778,
	411, 417, 418, 794, 419, 400, 401, 420, 0, 421,
	834, 779, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 814, 428, 0, 429, 835, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 773, 442,
	0, 836, 837, 815, 0, 0, 444, 445, 838, 839,
	756, 446, 447, 3006, 449, 0, 0, 450, 451, 452,
	454, 795, 455, 0, 780, 456, 457, 458, 248, 840,
	0, 0, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	710, 0, 909, 0, 0, 0, 0, 722, 723, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 252, 253,
	254, 255, 738, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 911,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	284, 0, 905, 906, 0, 0, 907, 908, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	823, 824, 0, 844, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	845, 312, 0, 313, 826, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 847, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	848, 849, 331, 332, 333, 850, 334, 335, 0, 0,
	336, 337, 338, 897, 340, 339, 0, 829, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	913, 912, 347, 348, 350, 351, 349, 853, 352, 353,
	355, 354, 0, 0, 854, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 903, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 831, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 832, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 169,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 858, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 835, 0, 433, 434, 171, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 838, 839, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 1123, 249, 0, 0, 459, 250,
	0, 0, 909, 163, 460, 461, 251, 462, 463, 464,
	0, 164, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	894, 0, 1420, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 911,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	284, 0, 905, 906, 0, 0, 907, 908, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	823, 824, 0, 844, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	845, 312, 0, 313, 826, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 847, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	848, 849, 331, 332, 333, 850, 334, 335, 0, 0,
	336, 337, 338, 897, 340, 339, 0, 829, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	913, 912, 347, 348, 350, 351, 349, 853, 352, 353,
	355, 354, 0, 0, 854, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 903, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 831, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 832, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 169,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 858, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 835, 0, 433, 434, 171, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 838, 839, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 1123, 249, 0, 0, 459, 250,
	0, 0, 909, 163, 460, 461, 251, 462, 463, 464,
	0, 164, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 797, 0,
	894, 0, 1420, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 796, 216, 217, 218, 0, 269, 801, 0, 787,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	284, 790, 788, 789, 793, 0, 791, 792, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	823, 824, 0, 844, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	845, 312, 0, 313, 826, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 798, 800, 847, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	848, 849, 331, 332, 333, 850, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 829, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	913, 912, 347, 348, 350, 351, 349, 853, 352, 353,
	355, 354, 0, 0, 854, 0, 799, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 831, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 832, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 794,
	419, 400, 401, 420, 858, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 835, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 838, 839, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 795, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	2239, 0, 909, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 2557, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 911,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	284, 0, 905, 906, 0, 0, 907, 908, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	823, 824, 0, 844, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	845, 312, 0, 313, 826, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 847, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	848, 849, 331, 332, 333, 850, 334, 335, 0, 0,
	336, 337, 338, 897, 340, 339, 0, 829, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	913, 912, 347, 348, 350, 351, 349, 853, 352, 353,
	355, 354, 0, 0, 854, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 903, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 831, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 832, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 858, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 835, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 838, 839, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	893, 0, 909, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	894, 0, 901, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 911,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	284, 0, 905, 906, 0, 0, 907, 908, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	823, 824, 0, 844, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	845, 312, 0, 313, 826, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 847, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	848, 849, 331, 332, 333, 850, 334, 335, 0, 0,
	336, 337, 338, 897, 340, 339, 0, 829, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	913, 912, 347, 348, 350, 351, 349, 853, 352, 353,
	355, 354, 0, 0, 854, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 903, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 831, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 832, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 858, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 835, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 838, 839, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	0, 0, 909, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	894, 0, 901, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 911,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	284, 0, 905, 906, 0, 0, 907, 908, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	823, 824, 0, 844, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	845, 312, 0, 313, 826, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 847, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	848, 849, 331, 332, 333, 850, 334, 335, 0, 0,
	336, 337, 338, 897, 340, 339, 0, 829, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	913, 912, 347, 348, 350, 351, 349, 853, 352, 353,
	355, 354, 0, 0, 854, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 903, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 831, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 832, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 858, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 835, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 838, 839, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	1120, 0, 934, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	894, 0, 901, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 911,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 844, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	845, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 847, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	848, 849, 331, 332, 333, 850, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	913, 912, 347, 348, 350, 351, 349, 853, 352, 353,
	355, 354, 0, 0, 854, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 169,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 858, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 171, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 1123, 249, 0, 0, 459, 250,
	0, 0, 909, 163, 460, 461, 251, 462, 463, 464,
	0, 164, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 136, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 911,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	284, 0, 905, 906, 0, 0, 907, 908, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	823, 824, 0, 844, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	845, 312, 0, 313, 826, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 847, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	848, 849, 331, 332, 333, 850, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 829, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	913, 912, 347, 348, 350, 351, 349, 853, 352, 353,
	355, 354, 0, 0, 854, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 831, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 832, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 858, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 835, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 838, 839, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	710, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 1326, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 169,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 171, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 1123, 249, 0, 0, 459, 250,
	0, 0, 0, 163, 460, 461, 251, 462, 463, 464,
	0, 164, 762, 750, 751, 748, 749, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 136, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 816, 782, 817,
	770, 803, 818, 0, 263, 772, 771, 266, 267, 268,
	0, 0, 819, 820, 218, 0, 269, 219, 0, 911,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 843, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 804, 289, 821, 822, 0, 290, 0, 291,
	0, 292, 0, 0, 805, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 757, 844, 0, 0, 0, 0, 0, 306,
	307, 825, 806, 807, 0, 310, 0, 311, 0, 0,
	845, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 847, 0, 781, 0,
	0, 0, 0, 320, 322, 329, 0, 846, 323, 827,
	785, 808, 809, 810, 811, 828, 0, 786, 0, 330,
	848, 849, 331, 332, 333, 850, 812, 813, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 851, 341,
	342, 852, 0, 343, 344, 0, 0, 345, 0, 346,
	913, 912, 347, 348, 350, 774, 349, 853, 352, 353,
	355, 354, 0, 0, 854, 758, 234, 356, 830, 357,
	358, 0, 783, 784, 0, 0, 361, 362, 0, 0,
	363, 236, 855, 364, 856, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 833, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 857, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 775, 776, 777, 778, 411, 417, 418, 0,
	419, 400, 401, 420, 858, 421, 834, 779, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 814, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 773, 442, 0, 836, 837, 815,
	0, 0, 444, 445, 246, 247, 756, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	780, 456, 457, 458, 248, 840, 481, 0, 459, 250,
	0, 0, 0, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 0, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 2039, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 0, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 2469, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 1192, 0, 934, 933, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 1424, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 911, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 843, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 844, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 845, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	847, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 846, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 848, 849, 331, 332, 333, 850,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 851, 341, 342, 852, 0, 343, 344, 0,
	0, 345, 0, 346, 913, 912, 347, 348, 350, 351,
	349, 853, 352, 353, 355, 354, 0, 0, 854, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 855, 364, 856, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 857, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 858, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 1116, 0, 934, 933, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 911, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 843, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 844, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 845, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 1115, 229,
	847, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 846, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 848, 849, 331, 332, 333, 850,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 851, 341, 342, 852, 0, 343, 344, 0,
	0, 345, 0, 346, 913, 912, 347, 348, 350, 351,
	349, 853, 352, 353, 355, 354, 0, 0, 854, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 855, 364, 856, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 857, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 858, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 1112, 0, 934, 933, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 911, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 843, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 844, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 845, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 1111, 229,
	847, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 846, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 848, 849, 331, 332, 333, 850,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 851, 341, 342, 852, 0, 343, 344, 0,
	0, 345, 0, 346, 913, 912, 347, 348, 350, 351,
	349, 853, 352, 353, 355, 354, 0, 0, 854, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 855, 364, 856, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 857, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 858, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 1073, 0, 934, 933, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 911, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 843, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 844, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 845, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 1072, 229,
	847, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 846, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 848, 849, 331, 332, 333, 850,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 851, 341, 342, 852, 0, 343, 344, 0,
	0, 345, 0, 346, 913, 912, 347, 348, 350, 351,
	349, 853, 352, 353, 355, 354, 0, 0, 854, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 855, 364, 856, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 857, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 858, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 1070, 0, 934, 933, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 911, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 843, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 844, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 845, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 1069, 229,
	847, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 846, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 848, 849, 331, 332, 333, 850,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 851, 341, 342, 852, 0, 343, 344, 0,
	0, 345, 0, 346, 913, 912, 347, 348, 350, 351,
	349, 853, 352, 353, 355, 354, 0, 0, 854, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 855, 364, 856, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 857, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 858, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 927, 0, 934, 933, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 911, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 843, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 844, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 845, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 929, 229,
	847, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 846, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 848, 849, 331, 332, 333, 850,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 851, 341, 342, 852, 0, 343, 344, 0,
	0, 345, 0, 346, 913, 912, 347, 348, 350, 351,
	349, 853, 352, 353, 355, 354, 0, 0, 854, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 855, 364, 856, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 857, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 858, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	934, 933, 459, 250, 0, 931, 0, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 252, 253, 254, 255,
	0, 256, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 257, 258, 259, 212, 213, 260, 214, 261, 262,
	215, 0, 263, 264, 265, 266, 267, 268, 0, 0,
	216, 217, 218, 0, 269, 219, 0, 911, 0, 270,
	271, 272, 273, 274, 0, 276, 277, 278, 275, 0,
	279, 0, 280, 281, 0, 843, 282, 283, 284, 0,
	0, 0, 0, 0, 0, 0, 285, 286, 484, 287,
	288, 289, 220, 221, 0, 290, 0, 291, 0, 292,
	0, 0, 293, 294, 0, 295, 296, 0, 0, 0,
	222, 300, 297, 298, 301, 304, 299, 305, 223, 224,
	0, 844, 0, 0, 0, 0, 0, 306, 307, 225,
	308, 309, 0, 310, 0, 311, 0, 0, 845, 312,
	0, 313, 226, 0, 227, 0, 314, 315, 316, 317,
	318, 319, 228, 229, 847, 0, 321, 0, 0, 0,
	0, 320, 322, 329, 0, 846, 323, 230, 325, 324,
	326, 327, 328, 231, 0, 232, 0, 330, 848, 849,
	331, 332, 333, 850, 334, 335, 0, 0, 336, 337,
	338, 0, 340, 339, 0, 233, 851, 341, 342, 852,
	0, 343, 344, 0, 0, 345, 0, 346, 913, 912,
	347, 348, 350, 351, 349, 853, 352, 353, 355, 354,
	0, 0, 854, 0, 234, 356, 235, 357, 358, 0,
	359, 360, 0, 0, 361, 362, 0, 0, 363, 236,
	855, 364, 856, 237, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 238, 373, 239, 374, 0, 375, 376,
	377, 378, 379, 240, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	0, 394, 857, 395, 396, 397, 398, 241, 399, 0,
	403, 404, 405, 406, 407, 408, 409, 0, 415, 416,
	410, 412, 413, 414, 411, 417, 418, 0, 419, 400,
	401, 420, 858, 421, 242, 422, 423, 0, 432, 424,
	425, 426, 402, 427, 430, 431, 428, 0, 429, 243,
	0, 433, 434, 0, 435, 436, 437, 438, 439, 302,
	440, 303, 441, 442, 0, 244, 245, 443, 0, 0,
	444, 445, 246, 247, 0, 446, 447, 448, 449, 0,
	0, 450, 451, 452, 454, 0, 455, 0, 453, 456,
	457, 458, 248, 249, 934, 933, 459, 250, 0, 0,
	0, 0, 460, 461, 251, 462, 463, 464, 0, 0,
	252, 253, 254, 255, 0, 256, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 257, 258, 259, 212, 213,
	260, 214, 261, 262, 215, 0, 263, 264, 265, 266,
	267, 268, 0, 0, 216, 217, 218, 0, 269, 219,
	0, 911, 0, 270, 271, 272, 273, 274, 0, 276,
	277, 278, 275, 0, 279, 0, 280, 281, 0, 843,
	282, 283, 284, 0, 0, 0, 0, 0, 0, 0,
	285, 286, 484, 287, 288, 289, 220, 221, 0, 290,
	0, 291, 0, 292, 0, 0, 293, 294, 0, 295,
	296, 0, 0, 0, 222, 300, 297, 298, 301, 304,
	299, 305, 223, 224, 0, 844, 0, 0, 0, 0,
	0, 306, 307, 225, 308, 309, 0, 310, 0, 311,
	0, 0, 845, 312, 0, 313, 226, 0, 227, 0,
	314, 315, 316, 317, 318, 319, 228, 229, 847, 0,
	321, 0, 0, 0, 0, 320, 322, 329, 0, 846,
	323, 230, 325, 324, 326, 327, 328, 231, 0, 232,
	0, 330, 848, 849, 331, 332, 333, 850, 334, 335,
	0, 0, 336, 337, 338, 0, 340, 339, 0, 233,
	851, 341, 342, 852, 0, 343, 344, 0, 0, 345,
	0, 346, 913, 912, 347, 348, 350, 351, 349, 853,
	352, 353, 355, 354, 0, 0, 854, 0, 234, 356,
	235, 357, 358, 0, 359, 360, 0, 0, 361, 362,
	0, 0, 363, 236, 855, 364, 856, 237, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 238, 373, 239,
	374, 0, 375, 376, 377, 378, 379, 240, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 0, 394, 857, 395, 396, 397,
	398, 241, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 415, 416, 410, 412, 413, 414, 411, 417,
	418, 0, 419, 400, 401, 420, 858, 421, 242, 422,
	423, 0, 432, 424, 425, 426, 402, 427, 430, 431,
	428, 0, 429, 243, 0, 433, 434, 0, 435, 436,
	437, 438, 439, 302, 440, 303, 441, 442, 0, 244,
	245, 443, 0, 0, 444, 445, 246, 247, 0, 446,
	447, 448, 449, 0, 0, 450, 451, 452, 454, 0,
	455, 0, 453, 456, 457, 458, 248, 249, 934, 0,
	459, 250, 0, 0, 0, 0, 460, 461, 251, 462,
	463, 464, 0, 0, 252, 253, 254, 255, 0, 256,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 257,
	258, 259, 212, 213, 260, 214, 261, 262, 215, 0,
	263, 264, 265, 266, 267, 268, 0, 0, 216, 217,
	218, 0, 269, 219, 0, 911, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 0, 843, 282, 283, 284, 0, 0, 0,
	0, 0, 0, 0, 285, 286, 484, 287, 288, 289,
	220, 221, 0, 290, 0, 291, 0, 292, 0, 0,
	293, 294, 0, 295, 296, 0, 0, 0, 222, 300,
	297, 298, 301, 304, 299, 305, 223, 224, 0, 844,
	0, 0, 0, 0, 0, 306, 307, 225, 308, 309,
	0, 310, 0, 311, 0, 0, 845, 312, 0, 313,
	226, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	228, 229, 847, 0, 321, 0, 0, 0, 0, 320,
	322, 329, 0, 846, 323, 230, 325, 324, 326, 327,
	328, 231, 0, 232, 0, 330, 848, 849, 331, 332,
	333, 850, 334, 335, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 233, 851, 341, 342, 852, 0, 343,
	344, 0, 0, 345, 0, 346, 913, 912, 347, 348,
	350, 351, 349, 853, 352, 353, 355, 354, 0, 0,
	854, 0, 234, 356, 235, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 236, 855, 364,
	856, 237, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 238, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 240, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	857, 395, 396, 397, 398, 241, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 415, 416, 410, 412,
	413, 414, 411, 417, 418, 0, 419, 400, 401, 420,
	858, 421, 242, 422, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 431, 428, 0, 429, 243, 0, 433,
	434, 0, 435, 436, 437, 438, 439, 302, 440, 303,
	441, 442, 0, 244, 245, 443, 0, 0, 444, 445,
	246, 247, 0, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 0, 455, 0, 453, 456, 457, 458,
	248, 249, 0, 0, 459, 250, 579, 0, 204, 0,
	460, 461, 251, 462, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 0, 256,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 257,
	258, 259, 212, 213, 260, 214, 261, 262, 215, 0,
	263, 264, 265, 266, 267, 268, 0, 0, 216, 217,
	218, 0, 269, 219, 0, 0, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 0, 0, 282, 283, 284, 0, 0, 0,
	0, 0, 0, 0, 285, 286, 210, 287, 288, 289,
	220, 221, 0, 290, 0, 291, 0, 292, 0, 0,
	293, 294, 0, 295, 296, 0, 0, 0, 222, 300,
	297, 298, 301, 304, 299, 305, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 306, 307, 225, 308, 309,
	0, 310, 0, 311, 0, 0, 0, 312, 0, 313,
	226, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	228, 229, 0, 0, 321, 0, 0, 0, 0, 320,
	322, 329, 0, 0, 323, 230, 325, 324, 326, 327,
	328, 231, 0, 232, 0, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 233, 0, 341, 342, 0, 0, 343,
	344, 0, 0, 345, 0, 346, 0, 0, 347, 348,
	350, 351, 349, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 234, 356, 235, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 236, 0, 364,
	0, 237, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 238, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 240, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 241, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 415, 416, 410, 412,
	413, 414, 411, 417, 418, 0, 419, 400, 401, 420,
	0, 421, 242, 422, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 431, 428, 0, 429, 243, 0, 433,
	434, 209, 435, 436, 437, 438, 439, 302, 440, 303,
	441, 442, 0, 244, 245, 443, 0, 0, 444, 445,
	246, 247, 0, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 0, 455, 0, 453, 456, 457, 458,
	248, 249, 0, 0, 459, 250, 203, 0, 204, 0,
	460, 461, 251, 462, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 0, 256,
	0, 467, 0, 0, 211, 0, 0, 0, 0, 257,
	258, 259, 212, 213, 260, 214, 261, 262, 215, 0,
	263, 264, 265, 266, 267, 268, 0, 0, 216, 217,
	218, 0, 269, 219, 0, 0, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 0, 0, 282, 283, 284, 0, 0, 0,
	0, 0, 0, 0, 285, 286, 210, 287, 288, 289,
	220, 221, 0, 290, 0, 291, 0, 292, 0, 0,
	293, 294, 0, 295, 296, 0, 0, 0, 222, 300,
	297, 298, 301, 304, 299, 305, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 306, 307, 225, 308, 309,
	0, 310, 0, 311, 0, 0, 0, 312, 0, 313,
	226, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	228, 229, 0, 0, 321, 0, 0, 0, 0, 320,
	322, 329, 0, 0, 323, 230, 325, 324, 326, 327,
	328, 231, 0, 232, 0, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 233, 0, 341, 342, 0, 0, 343,
	344, 0, 0, 345, 0, 346, 0, 0, 347, 348,
	350, 351, 349, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 234, 356, 235, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 236, 0, 364,
	0, 237, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 238, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 240, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 241, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 415, 416, 410, 412,
	413, 414, 411, 417, 418, 0, 419, 400, 401, 420,
	0, 421, 242, 422, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 431, 428, 0, 429, 243, 0, 433,
	434, 209, 435, 436, 437, 438, 439, 302, 440, 303,
	441, 442, 0, 244, 245, 443, 0, 0, 444, 445,
	246, 247, 0, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 0, 455, 0, 453, 456, 457, 458,
	248, 249, 204, 0, 459, 250, 0, 0, 0, 0,
	460, 461, 251, 462, 463, 464, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 467, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	210, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 1655, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 209, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 204, 0, 459, 250,
	0, 0, 0, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 467, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 210, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 209,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	481, 0, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 252, 253, 254, 255,
	0, 256, 0, 0, 0, 0, 211, 0, 0, 467,
	0, 257, 258, 259, 212, 213, 260, 214, 261, 262,
	215, 0, 263, 264, 265, 266, 267, 268, 0, 0,
	216, 217, 218, 0, 269, 219, 0, 0, 0, 270,
	271, 272, 273, 274, 0, 276, 277, 278, 275, 0,
	279, 0, 280, 281, 0, 0, 282, 283, 284, 0,
	0, 0, 0, 0, 0, 0, 285, 286, 484, 287,
	288, 289, 220, 221, 0, 290, 0, 291, 0, 292,
	0, 0, 293, 294, 0, 295, 296, 0, 0, 0,
	222, 300, 297, 298, 301, 304, 299, 305, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 306, 307, 225,
	308, 309, 0, 310, 0, 311, 0, 0, 0, 312,
	0, 313, 226, 0, 227, 0, 314, 315, 316, 317,
	318, 319, 228, 229, 0, 0, 321, 0, 0, 0,
	0, 320, 322, 329, 0, 0, 323, 230, 325, 324,
	326, 327, 328, 231, 0, 232, 0, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 0, 0, 336, 337,
	338, 0, 340, 339, 0, 233, 0, 341, 342, 0,
	0, 343, 344, 0, 0, 345, 0, 346, 0, 0,
	347, 348, 350, 351, 349, 0, 352, 353, 355, 354,
	0, 0, 0, 0, 234, 356, 235, 357, 358, 0,
	359, 360, 0, 0, 361, 362, 0, 0, 363, 236,
	0, 364, 0, 237, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 238, 373, 239, 374, 0, 375, 376,
	377, 378, 379, 240, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 241, 399, 0,
	403, 404, 405, 406, 407, 408, 409, 0, 415, 416,
	410, 412, 413, 414, 411, 417, 418, 0, 419, 400,
	401, 420, 0, 421, 242, 422, 423, 0, 432, 424,
	425, 426, 402, 427, 430, 431, 428, 0, 429, 243,
	0, 433, 434, 0, 435, 436, 437, 438, 439, 302,
	440, 303, 441, 442, 0, 244, 245, 443, 0, 0,
	444, 445, 246, 247, 0, 446, 447, 448, 449, 0,
	0, 450, 451, 452, 454, 0, 455, 0, 453, 456,
	457, 458, 248, 249, 481, 0, 459, 250, 0, 0,
	0, 0, 460, 461, 251, 462, 463, 464, 0, 0,
	252, 253, 254, 255, 0, 256, 0, 0, 0, 0,
	211, 0, 0, 467, 0, 257, 258, 259, 212, 213,
	260, 214, 261, 262, 215, 0, 263, 264, 265, 266,
	267, 268, 0, 0, 216, 217, 218, 1934, 269, 219,
	0, 0, 0, 270, 271, 272, 273, 274, 0, 276,
	277, 278, 275, 1931, 279, 0, 280, 281, 0, 0,
	282, 283, 284, 0, 0, 0, 0, 0, 0, 0,
	285, 286, 484, 287, 288, 289, 220, 221, 0, 290,
	0, 291, 0, 292, 0, 0, 293, 294, 0, 295,
	296, 0, 0, 0, 222, 300, 297, 298, 301, 304,
	299, 305, 223, 224, 0, 2009, 0, 0, 0, 0,
	0, 306, 307, 225, 308, 309, 0, 310, 0, 311,
	1937, 0, 0, 312, 0, 313, 226, 0, 227, 0,
	314, 315, 316, 317, 318, 319, 228, 229, 0, 0,
	321, 0, 0, 0, 2007, 320, 322, 329, 0, 0,
	323, 230, 325, 324, 326, 327, 328, 231, 0, 232,
	0, 2006, 0, 0, 331, 332, 333, 0, 334, 335,
	0, 0, 336, 337, 338, 0, 340, 339, 0, 233,
	0, 341, 342, 0, 0, 343, 344, 0, 0, 345,
	0, 346, 0, 0, 347, 348, 350, 351, 349, 0,
	352, 353, 355, 354, 0, 0, 0, 0, 234, 356,
	235, 357, 358, 0, 359, 360, 0, 0, 361, 362,
	0, 0, 363, 236, 0, 364, 0, 237, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 238, 373, 239,
	374, 1936, 375, 376, 377, 378, 379, 240, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 241, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 415, 416, 410, 412, 413, 414, 411, 417,
	418, 0, 419, 400, 401, 420, 0, 421, 242, 422,
	423, 0, 432, 424, 425, 426, 402, 427, 430, 431,
	428, 0, 429, 243, 0, 433, 434, 0, 435, 436,
	437, 438, 439, 302, 440, 303, 441, 442, 0, 244,
	245, 443, 0, 0, 444, 445, 246, 247, 0, 446,
	447, 448, 449, 0, 2008, 450, 451, 452, 454, 0,
	455, 0, 453, 456, 457, 458, 248, 249, 481, 0,
	459, 250, 0, 0, 0, 0, 460, 461, 251, 462,
	463, 464, 0, 0, 252, 253, 254, 255, 0, 256,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 257,
	258, 259, 212, 213, 260, 214, 261, 262, 215, 0,
	263, 264, 265, 266, 267, 268, 0, 0, 216, 217,
	218, 1934, 269, 219, 0, 0, 1928, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 1931, 279, 0,
	280, 281, 0, 0, 282, 283, 284, 0, 0, 0,
	0, 0, 0, 0, 285, 286, 484, 287, 288, 289,
	220, 221, 0, 290, 0, 291, 0, 292, 0, 0,
	293, 294, 0, 295, 296, 0, 0, 0, 222, 300,
	297, 298, 301, 304, 299, 305, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 306, 307, 225, 308, 309,
	0, 310, 0, 311, 1937, 0, 0, 312, 0, 313,
	226, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	1927, 229, 0, 0, 321, 0, 0, 0, 0, 320,
	322, 329, 0, 0, 323, 230, 325, 324, 326, 327,
	328, 231, 0, 232, 0, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 233, 0, 341, 342, 0, 0, 343,
	344, 0, 0, 345, 0, 346, 0, 0, 347, 348,
	350, 351, 349, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 234, 356, 235, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 236, 0, 364,
	0, 237, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 238, 373, 239, 374, 1936, 375, 376, 377, 378,
	379, 240, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 241, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 415, 416, 410, 412,
	413, 414, 411, 417, 418, 0, 419, 400, 401, 420,
	0, 421, 242, 422, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 431, 428, 0, 429, 243, 0, 433,
	434, 0, 435, 436, 437, 438, 439, 302, 440, 303,
	441, 442, 0, 244, 245, 443, 0, 0, 444, 445,
	246, 247, 0, 446, 447, 448, 449, 0, 1935, 450,
	451, 452, 454, 0, 455, 0, 453, 456, 457, 458,
	248, 249, 0, 0, 459, 250, 585, 0, 481, 0,
	460, 461, 251, 462, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 584, 566, 256,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 257,
	258, 259, 212, 213, 260, 214, 261, 262, 215, 0,
	263, 264, 265, 266, 267, 268, 0, 0, 216, 217,
	218, 0, 269, 219, 0, 0, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 569, 0, 282, 283, 284, 0, 0, 0,
	0, 0, 0, 0, 285, 286, 484, 287, 288, 289,
	220, 221, 0, 290, 0, 291, 0, 292, 0, 0,
	293, 294, 0, 295, 296, 0, 0, 0, 222, 300,
	297, 298, 301, 304, 299, 305, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 306, 307, 225, 308, 309,
	0, 310, 0, 311, 0, 0, 0, 312, 570, 313,
	226, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	228, 229, 0, 0, 321, 0, 0, 0, 0, 320,
	322, 329, 0, 0, 323, 230, 325, 324, 326, 327,
	328, 231, 0, 232, 0, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 233, 0, 341, 342, 0, 0, 343,
	344, 0, 0, 345, 0, 346, 0, 0, 347, 348,
	350, 351, 349, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 234, 356, 235, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 236, 0, 364,
	0, 237, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 238, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 240, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 241, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 571, 415, 416, 410, 412,
	413, 414, 411, 417, 418, 0, 419, 400, 401, 420,
	0, 421, 242, 422, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 431, 428, 0, 429, 243, 0, 433,
	434, 0, 435, 436, 437, 438, 439, 302, 440, 303,
	441, 442, 0, 244, 245, 443, 0, 0, 444, 445,
	246, 247, 0, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 0, 455, 0, 453, 456, 457, 458,
	248, 249, 0, 0, 459, 250, 565, 0, 481, 0,
	460, 461, 251, 462, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 566, 256,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 257,
	258, 259, 212, 213, 260, 214, 261, 262, 215, 0,
	263, 264, 265, 266, 267, 268, 0, 0, 216, 217,
	218, 0, 269, 219, 0, 0, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 569, 0, 282, 283, 284, 0, 0, 0,
	0, 0, 0, 0, 285, 286, 484, 287, 288, 289,
	220, 221, 0, 290, 0, 291, 0, 292, 0, 0,
	293, 294, 0, 295, 296, 0, 0, 0, 222, 300,
	297, 298, 301, 304, 299, 305, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 306, 307, 225, 308, 309,
	0, 310, 0, 311, 0, 0, 0, 312, 570, 313,
	226, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	228, 229, 0, 0, 321, 0, 0, 0, 0, 320,
	322, 329, 0, 0, 323, 230, 325, 324, 326, 327,
	328, 231, 0, 232, 0, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 233, 0, 341, 342, 0, 0, 343,
	344, 0, 0, 345, 0, 346, 0, 0, 347, 348,
	350, 351, 349, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 234, 356, 235, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 236, 0, 364,
	0, 237, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 238, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 240, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 241, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 571, 415, 416, 410, 412,
	413, 414, 411, 417, 418, 0, 419, 400, 401, 420,
	0, 421, 242, 422, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 431, 428, 0, 429, 243, 0, 433,
	434, 0, 435, 436, 437, 438, 439, 302, 440, 303,
	441, 442, 0, 244, 245, 443, 0, 0, 444, 445,
	246, 247, 0, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 0, 455, 0, 453, 456, 457, 458,
	248, 249, 481, 0, 459, 250, 0, 0, 0, 0,
	460, 461, 251, 462, 463, 464, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 569, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 570, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 571,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	1091, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 903, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	922, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 924, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 903, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	919, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 921, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 903, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	915, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 917, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 903, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	504, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 503, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 502, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 481, 0, 459, 250,
	0, 0, 0, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 1914, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	481, 2405, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 252, 253, 254, 255,
	0, 256, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 257, 258, 259, 212, 213, 260, 214, 261, 262,
	215, 0, 263, 264, 265, 266, 267, 268, 0, 0,
	216, 217, 218, 0, 269, 219, 0, 0, 0, 270,
	271, 272, 273, 274, 0, 276, 277, 278, 275, 0,
	279, 0, 280, 281, 0, 0, 282, 283, 284, 0,
	0, 0, 0, 0, 0, 0, 285, 286, 484, 287,
	288, 289, 220, 221, 0, 290, 0, 291, 0, 292,
	0, 0, 293, 294, 0, 295, 296, 0, 0, 0,
	222, 300, 297, 298, 301, 304, 299, 305, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 306, 307, 225,
	308, 309, 0, 310, 0, 311, 0, 0, 0, 312,
	0, 313, 226, 0, 227, 0, 314, 315, 316, 317,
	318, 319, 228, 229, 0, 0, 321, 0, 0, 0,
	0, 320, 322, 329, 0, 0, 323, 230, 325, 324,
	326, 327, 328, 231, 0, 232, 0, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 0, 0, 336, 337,
	338, 0, 340, 339, 0, 233, 0, 341, 342, 0,
	0, 343, 344, 0, 0, 345, 0, 346, 0, 0,
	347, 348, 350, 351, 349, 0, 352, 353, 355, 354,
	0, 0, 0, 0, 234, 356, 235, 357, 358, 0,
	359, 360, 0, 0, 361, 362, 0, 0, 363, 236,
	0, 364, 0, 237, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 238, 373, 239, 374, 0, 375, 376,
	377, 378, 379, 240, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 241, 399, 0,
	403, 404, 405, 406, 407, 408, 409, 0, 415, 416,
	410, 412, 413, 414, 411, 417, 418, 0, 419, 400,
	401, 420, 0, 421, 242, 422, 423, 0, 432, 424,
	425, 426, 402, 427, 430, 431, 428, 0, 429, 243,
	0, 433, 434, 0, 435, 436, 437, 438, 439, 302,
	440, 303, 441, 442, 0, 244, 245, 443, 0, 0,
	444, 445, 246, 247, 0, 446, 447, 448, 449, 0,
	0, 450, 451, 452, 454, 0, 455, 0, 453, 456,
	457, 458, 248, 249, 481, 2405, 459, 250, 0, 0,
	0, 0, 460, 461, 251, 462, 463, 464, 0, 0,
	252, 253, 254, 255, 0, 256, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 257, 258, 259, 212, 213,
	260, 214, 261, 262, 215, 0, 263, 264, 265, 266,
	267, 268, 0, 0, 216, 217, 218, 0, 269, 219,
	0, 0, 0, 270, 271, 272, 273, 274, 0, 276,
	277, 278, 275, 0, 279, 0, 280, 281, 0, 0,
	282, 283, 284, 0, 0, 0, 0, 0, 0, 0,
	285, 286, 484, 287, 288, 289, 220, 221, 0, 290,
	0, 291, 0, 292, 0, 0, 293, 294, 0, 295,
	296, 0, 0, 0, 222, 300, 297, 298, 301, 304,
	299, 305, 223, 224, 0, 0, 0, 0, 0, 0,
	0, 306, 307, 225, 308, 309, 0, 310, 0, 311,
	0, 0, 0, 312, 0, 313, 226, 0, 227, 0,
	314, 315, 316, 317, 318, 319, 228, 229, 0, 0,
	321, 0, 0, 0, 0, 320, 322, 329, 0, 0,
	323, 230, 325, 324, 326, 327, 328, 231, 0, 232,
	0, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	0, 0, 336, 337, 338, 0, 340, 339, 0, 233,
	0, 341, 342, 0, 0, 343, 344, 0, 0, 345,
	0, 346, 0, 0, 347, 348, 350, 351, 349, 0,
	352, 353, 355, 354, 0, 0, 0, 0, 234, 356,
	235, 357, 358, 0, 359, 360, 0, 0, 361, 2402,
	0, 0, 363, 236, 0, 364, 0, 237, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 238, 373, 239,
	374, 0, 375, 376, 377, 378, 379, 240, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 241, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 415, 416, 410, 412, 413, 414, 411, 417,
	418, 0, 419, 400, 401, 420, 0, 421, 242, 422,
	423, 0, 432, 424, 425, 426, 402, 427, 430, 431,
	428, 0, 429, 243, 0, 433, 434, 0, 435, 436,
	437, 438, 439, 302, 440, 303, 441, 442, 0, 244,
	245, 443, 0, 0, 444, 445, 246, 247, 0, 446,
	447, 448, 449, 0, 0, 450, 451, 452, 454, 0,
	455, 0, 453, 456, 457, 458, 248, 249, 481, 0,
	459, 250, 0, 0, 0, 0, 460, 461, 251, 462,
	463, 464, 0, 0, 252, 253, 254, 255, 0, 256,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 257,
	258, 259, 212, 213, 260, 214, 261, 262, 215, 0,
	263, 264, 265, 266, 267, 268, 0, 0, 216, 217,
	218, 0, 269, 219, 0, 0, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 0, 0, 282, 283, 284, 0, 0, 0,
	0, 0, 0, 0, 285, 286, 484, 287, 288, 289,
	220, 221, 0, 290, 0, 291, 0, 292, 0, 0,
	293, 294, 0, 295, 296, 0, 0, 0, 222, 300,
	297, 298, 301, 304, 299, 305, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 306, 307, 225, 308, 309,
	0, 310, 0, 311, 0, 0, 0, 312, 0, 313,
	226, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	228, 229, 0, 0, 321, 0, 0, 0, 0, 320,
	322, 329, 0, 0, 323, 230, 325, 324, 326, 327,
	328, 231, 0, 232, 0, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 233, 0, 341, 342, 0, 0, 343,
	344, 0, 0, 345, 0, 346, 0, 0, 347, 348,
	350, 351, 349, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 234, 356, 235, 357, 358, 0, 359, 360,
	0, 903, 361, 362, 0, 0, 363, 236, 0, 364,
	0, 237, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 238, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 240, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 241, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 415, 416, 410, 412,
	413, 414, 411, 417, 418, 0, 419, 400, 401, 420,
	0, 421, 242, 422, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 431, 428, 0, 429, 243, 0, 433,
	434, 0, 435, 436, 437, 438, 439, 302, 440, 303,
	441, 442, 0, 244, 245, 443, 0, 0, 444, 445,
	246, 247, 0, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 0, 455, 0, 453, 456, 457, 458,
	248, 249, 0, 0, 459, 250, 1675, 0, 481, 0,
	460, 461, 251, 462, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 0, 256,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 257,
	258, 259, 212, 213, 260, 214, 261, 262, 215, 0,
	263, 264, 265, 266, 267, 268, 0, 0, 216, 217,
	218, 0, 269, 219, 0, 0, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 0, 0, 282, 283, 284, 0, 0, 0,
	0, 0, 0, 0, 285, 286, 484, 287, 288, 289,
	220, 221, 0, 290, 0, 291, 0, 292, 0, 0,
	293, 294, 0, 295, 296, 0, 0, 0, 222, 300,
	297, 298, 301, 304, 299, 305, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 306, 307, 225, 308, 309,
	0, 310, 0, 311, 0, 0, 0, 312, 0, 313,
	226, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	228, 229, 0, 0, 321, 0, 0, 0, 0, 320,
	322, 329, 0, 0, 323, 230, 325, 324, 326, 327,
	328, 231, 0, 232, 0, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 233, 0, 341, 342, 0, 0, 343,
	344, 0, 0, 345, 0, 346, 0, 0, 347, 348,
	350, 351, 349, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 234, 356, 235, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 236, 0, 364,
	0, 237, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 238, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 240, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 241, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 415, 416, 410, 412,
	413, 414, 411, 417, 418, 0, 419, 400, 401, 420,
	0, 421, 242, 422, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 431, 428, 0, 429, 243, 0, 433,
	434, 0, 435, 436, 437, 438, 439, 302, 440, 303,
	441, 442, 0, 244, 245, 443, 0, 0, 444, 445,
	246, 247, 0, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 0, 455, 0, 453, 456, 457, 458,
	248, 249, 0, 0, 459, 250, 1673, 0, 481, 0,
	460, 461, 251, 462, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 0, 256,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 257,
	258, 259, 212, 213, 260, 214, 261, 262, 215, 0,
	263, 264, 265, 266, 267, 268, 0, 0, 216, 217,
	218, 0, 269, 219, 0, 0, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 0, 0, 282, 283, 284, 0, 0, 0,
	0, 0, 0, 0, 285, 286, 484, 287, 288, 289,
	220, 221, 0, 290, 0, 291, 0, 292, 0, 0,
	293, 294, 0, 295, 296, 0, 0, 0, 222, 300,
	297, 298, 301, 304, 299, 305, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 306, 307, 225, 308, 309,
	0, 310, 0, 311, 0, 0, 0, 312, 0, 313,
	226, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	228, 229, 0, 0, 321, 0, 0, 0, 0, 320,
	322, 329, 0, 0, 323, 230, 325, 324, 326, 327,
	328, 231, 0, 232, 0, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 233, 0, 341, 342, 0, 0, 343,
	344, 0, 0, 345, 0, 346, 0, 0, 347, 348,
	350, 351, 349, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 234, 356, 235, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 236, 0, 364,
	0, 237, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 238, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 240, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 241, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 415, 416, 410, 412,
	413, 414, 411, 417, 418, 0, 419, 400, 401, 420,
	0, 421, 242, 422, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 431, 428, 0, 429, 243, 0, 433,
	434, 0, 435, 436, 437, 438, 439, 302, 440, 303,
	441, 442, 0, 244, 245, 443, 0, 0, 444, 445,
	246, 247, 0, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 0, 455, 0, 453, 456, 457, 458,
	248, 249, 0, 0, 459, 250, 1671, 0, 481, 0,
	460, 461, 251, 462, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 0, 256,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 257,
	258, 259, 212, 213, 260, 214, 261, 262, 215, 0,
	263, 264, 265, 266, 267, 268, 0, 0, 216, 217,
	218, 0, 269, 219, 0, 0, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 0, 0, 282, 283, 284, 0, 0, 0,
	0, 0, 0, 0, 285, 286, 484, 287, 288, 289,
	220, 221, 0, 290, 0, 291, 0, 292, 0, 0,
	293, 294, 0, 295, 296, 0, 0, 0, 222, 300,
	297, 298, 301, 304, 299, 305, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 306, 307, 225, 308, 309,
	0, 310, 0, 311, 0, 0, 0, 312, 0, 313,
	226, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	228, 229, 0, 0, 321, 0, 0, 0, 0, 320,
	322, 329, 0, 0, 323, 230, 325, 324, 326, 327,
	328, 231, 0, 232, 0, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 233, 0, 341, 342, 0, 0, 343,
	344, 0, 0, 345, 0, 346, 0, 0, 347, 348,
	350, 351, 349, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 234, 356, 235, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 236, 0, 364,
	0, 237, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 238, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 240, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 241, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 415, 416, 410, 412,
	413, 414, 411, 417, 418, 0, 419, 400, 401, 420,
	0, 421, 242, 422, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 431, 428, 0, 429, 243, 0, 433,
	434, 0, 435, 436, 437, 438, 439, 302, 440, 303,
	441, 442, 0, 244, 245, 443, 0, 0, 444, 445,
	246, 247, 0, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 0, 455, 0, 453, 456, 457, 458,
	248, 249, 481, 0, 459, 250, 0, 0, 0, 0,
	460, 461, 251, 462, 463, 464, 0, 0, 252, 253,
	254, 255, 1648, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	1608, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	1606, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	611, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 1165, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 612, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 608, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 607, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	1506, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 1505, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	611, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 1165, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 612, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 608, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 607, 245, 443,
	0, 0, 444, 1166, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	611, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 601, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 612, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 608, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 1141, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 607, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	1109, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 1108, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	1105, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 1104, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	1102, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 1101, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	1099, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 1098, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	1095, 0, 481, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 1094, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 481, 0, 459, 250,
	0, 0, 0, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 252, 253, 254, 255, 1083, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 1081, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 1080, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 1075, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 1066, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 1065, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 1061, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 1057, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 1059, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 941, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 943, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 938, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 611, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	601, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 600, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	612, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 602, 399, 0, 403, 404, 608, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 603, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 607, 245, 443, 0, 0, 444, 605, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 591, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 592, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 587, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 577, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	0, 0, 459, 250, 526, 0, 481, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	481, 0, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 252, 253, 254, 255,
	0, 256, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 257, 258, 259, 212, 213, 260, 214, 261, 262,
	215, 0, 263, 264, 265, 266, 267, 268, 0, 0,
	216, 217, 218, 0, 269, 219, 0, 0, 0, 270,
	271, 272, 273, 274, 0, 276, 277, 278, 275, 0,
	279, 0, 280, 281, 0, 0, 282, 283, 284, 0,
	0, 0, 0, 0, 0, 0, 285, 286, 484, 287,
	288, 289, 220, 221, 0, 290, 0, 291, 0, 292,
	0, 0, 293, 294, 0, 295, 296, 0, 0, 0,
	222, 300, 297, 298, 301, 304, 299, 305, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 306, 307, 225,
	308, 309, 0, 310, 0, 311, 0, 0, 0, 312,
	0, 313, 226, 0, 227, 0, 314, 315, 316, 317,
	318, 319, 228, 229, 0, 0, 321, 0, 0, 0,
	0, 320, 322, 329, 0, 0, 323, 230, 325, 324,
	326, 327, 328, 231, 0, 232, 0, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 0, 0, 336, 337,
	338, 0, 340, 339, 0, 233, 0, 341, 342, 0,
	0, 343, 344, 0, 0, 345, 0, 346, 0, 0,
	347, 348, 350, 351, 349, 0, 352, 353, 355, 354,
	0, 0, 0, 0, 234, 356, 235, 357, 358, 0,
	359, 360, 0, 0, 361, 362, 0, 0, 363, 236,
	0, 364, 0, 237, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 238, 373, 239, 374, 0, 375, 376,
	377, 378, 379, 240, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 241, 399, 0,
	403, 404, 405, 406, 407, 408, 409, 0, 415, 416,
	410, 412, 413, 414, 411, 417, 418, 0, 419, 400,
	401, 420, 0, 421, 242, 422, 423, 0, 432, 424,
	425, 426, 402, 427, 430, 431, 428, 0, 429, 243,
	0, 433, 434, 0, 435, 436, 437, 438, 439, 302,
	440, 303, 441, 442, 0, 244, 245, 443, 0, 0,
	444, 445, 246, 247, 0, 446, 447, 448, 449, 0,
	0, 450, 451, 452, 454, 0, 455, 0, 453, 456,
	457, 458, 248, 249, 481, 0, 459, 250, 0, 0,
	0, 0, 460, 461, 251, 462, 463, 464, 0, 0,
	252, 253, 254, 255, 0, 256, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 257, 258, 259, 212, 213,
	260, 214, 261, 262, 215, 0, 263, 264, 265, 266,
	267, 268, 0, 0, 216, 217, 218, 0, 269, 219,
	0, 0, 0, 270, 271, 272, 273, 274, 0, 276,
	277, 278, 275, 0, 279, 0, 280, 281, 0, 0,
	282, 283, 284, 0, 0, 0, 0, 0, 0, 0,
	285, 286, 484, 287, 288, 289, 220, 221, 0, 290,
	0, 291, 0, 292, 0, 0, 293, 294, 0, 295,
	296, 0, 0, 0, 222, 300, 297, 298, 301, 304,
	299, 305, 223, 224, 0, 0, 0, 0, 0, 0,
	0, 306, 307, 225, 308, 309, 0, 310, 0, 311,
	0, 0, 0, 312, 0, 313, 226, 0, 227, 0,
	314, 315, 316, 317, 318, 319, 2296, 229, 0, 0,
	321, 0, 0, 0, 0, 320, 322, 329, 0, 0,
	323, 230, 325, 324, 326, 327, 328, 231, 0, 232,
	0, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	0, 0, 336, 337, 338, 0, 340, 339, 0, 233,
	0, 341, 342, 0, 0, 343, 344, 0, 0, 345,
	0, 346, 0, 0, 347, 348, 350, 351, 349, 0,
	352, 353, 355, 354, 0, 0, 0, 0, 234, 356,
	235, 357, 358, 0, 359, 360, 0, 0, 361, 362,
	0, 0, 363, 236, 0, 364, 0, 237, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 238, 373, 239,
	374, 0, 375, 376, 377, 378, 379, 240, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 241, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 415, 416, 410, 412, 413, 414, 411, 417,
	418, 0, 419, 400, 401, 420, 0, 421, 242, 422,
	423, 0, 432, 424, 425, 426, 402, 427, 430, 431,
	428, 0, 429, 243, 0, 433, 434, 0, 435, 436,
	437, 438, 439, 302, 440, 303, 441, 442, 0, 244,
	245, 443, 0, 0, 444, 445, 246, 247, 0, 446,
	447, 448, 449, 0, 0, 450, 451, 452, 454, 0,
	455, 0, 453, 456, 457, 458, 248, 249, 481, 0,
	459, 250, 0, 0, 0, 0, 460, 461, 251, 462,
	463, 464, 0, 0, 252, 253, 254, 255, 0, 256,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 257,
	258, 259, 212, 213, 260, 214, 261, 262, 215, 0,
	263, 264, 265, 266, 267, 268, 0, 0, 216, 217,
	218, 0, 269, 219, 0, 0, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 0, 0, 282, 283, 284, 0, 0, 0,
	0, 0, 0, 0, 285, 286, 484, 287, 288, 289,
	220, 221, 0, 290, 0, 291, 0, 292, 0, 0,
	293, 294, 0, 295, 296, 0, 0, 0, 222, 300,
	297, 298, 301, 304, 299, 305, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 306, 307, 225, 308, 309,
	0, 310, 0, 311, 0, 0, 0, 312, 0, 313,
	226, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	2294, 229, 0, 0, 321, 0, 0, 0, 0, 320,
	322, 329, 0, 0, 323, 230, 325, 324, 326, 327,
	328, 231, 0, 232, 0, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 233, 0, 341, 342, 0, 0, 343,
	344, 0, 0, 345, 0, 346, 0, 0, 347, 348,
	350, 351, 349, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 234, 356, 235, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 236, 0, 364,
	0, 237, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 238, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 240, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 241, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 415, 416, 410, 412,
	413, 414, 411, 417, 418, 0, 419, 400, 401, 420,
	0, 421, 242, 422, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 431, 428, 0, 429, 243, 0, 433,
	434, 0, 435, 436, 437, 438, 439, 302, 440, 303,
	441, 442, 0, 244, 245, 443, 0, 0, 444, 445,
	246, 247, 0, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 0, 455, 0, 453, 456, 457, 458,
	248, 249, 481, 0, 459, 250, 0, 0, 0, 0,
	460, 461, 251, 462, 463, 464, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 2283, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 378, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 481, 0, 459, 250,
	0, 0, 0, 0, 460, 461, 251, 462, 463, 464,
	0, 0, 252, 253, 254, 255, 0, 256, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 257, 258, 259,
	212, 213, 260, 214, 261, 262, 215, 0, 263, 264,
	265, 266, 267, 268, 0, 0, 216, 217, 218, 0,
	269, 219, 0, 0, 0, 270, 271, 272, 273, 274,
	0, 276, 277, 278, 275, 0, 279, 0, 280, 281,
	0, 0, 282, 283, 284, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 484, 287, 288, 289, 220, 221,
	0, 290, 0, 291, 0, 292, 0, 0, 293, 294,
	0, 295, 296, 0, 0, 0, 222, 300, 297, 298,
	301, 304, 299, 305, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 225, 308, 309, 0, 310,
	0, 311, 0, 0, 0, 312, 0, 313, 226, 0,
	227, 0, 314, 315, 316, 317, 318, 319, 228, 229,
	0, 0, 321, 0, 0, 0, 0, 320, 322, 329,
	0, 0, 323, 230, 325, 324, 326, 327, 328, 231,
	0, 232, 0, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 0, 0, 336, 337, 338, 0, 340, 339,
	0, 233, 0, 341, 342, 0, 0, 343, 344, 0,
	0, 345, 0, 346, 0, 0, 347, 348, 350, 351,
	349, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	234, 356, 235, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 236, 0, 364, 0, 237,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 238,
	373, 239, 374, 0, 375, 376, 377, 378, 379, 240,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 241, 399, 0, 592, 404, 405, 406,
	407, 408, 409, 0, 415, 416, 410, 412, 413, 414,
	411, 417, 418, 0, 419, 400, 401, 420, 0, 421,
	242, 422, 423, 0, 432, 424, 425, 426, 402, 427,
	430, 431, 428, 0, 429, 243, 0, 433, 434, 0,
	435, 436, 437, 438, 439, 302, 440, 303, 441, 442,
	0, 244, 245, 443, 0, 0, 444, 445, 246, 247,
	0, 446, 447, 448, 449, 0, 0, 450, 451, 452,
	454, 0, 455, 0, 453, 456, 457, 458, 248, 249,
	481, 0, 459, 250, 0, 0, 0, 0, 460, 461,
	251, 462, 463, 464, 0, 0, 252, 253, 254, 255,
	0, 256, 0, 0, 0, 0, 211, 0, 1519, 0,
	0, 257, 258, 259, 212, 213, 260, 214, 261, 262,
	215, 0, 263, 264, 265, 266, 267, 268, 0, 0,
	216, 217, 218, 0, 269, 219, 0, 0, 0, 270,
	271, 272, 273, 274, 0, 276, 277, 278, 275, 0,
	279, 0, 280, 281, 0, 0, 282, 283, 284, 0,
	0, 0, 0, 0, 0, 0, 285, 286, 484, 287,
	288, 289, 220, 221, 0, 290, 0, 291, 0, 292,
	0, 0, 293, 294, 0, 295, 296, 0, 0, 0,
	222, 300, 297, 298, 301, 304, 299, 305, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 306, 307, 225,
	308, 309, 0, 310, 0, 311, 0, 0, 0, 312,
	0, 313, 226, 0, 227, 0, 314, 315, 316, 317,
	318, 319, 228, 229, 0, 0, 321, 0, 0, 0,
	0, 320, 322, 329, 0, 0, 323, 230, 325, 324,
	326, 327, 328, 231, 0, 232, 0, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 0, 0, 336, 337,
	338, 0, 340, 339, 0, 233, 0, 341, 342, 0,
	0, 343, 344, 0, 0, 345, 0, 346, 0, 0,
	347, 348, 350, 351, 349, 0, 352, 353, 355, 354,
	0, 0, 0, 0, 234, 356, 235, 357, 358, 0,
	359, 360, 0, 0, 361, 362, 0, 0, 363, 236,
	0, 364, 0, 237, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 238, 373, 239, 374, 0, 375, 376,
	377, 378, 379, 240, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 241, 399, 0,
	403, 404, 405, 406, 407, 408, 409, 0, 415, 416,
	410, 412, 413, 414, 411, 417, 418, 0, 0, 400,
	401, 420, 0, 421, 242, 422, 423, 0, 432, 424,
	425, 426, 402, 427, 430, 431, 428, 0, 429, 243,
	0, 433, 434, 0, 435, 436, 437, 438, 439, 302,
	440, 303, 441, 442, 0, 244, 245, 443, 0, 0,
	444, 445, 246, 247, 0, 446, 447, 448, 449, 0,
	0, 450, 451, 452, 454, 0, 455, 0, 453, 456,
	457, 458, 248, 249, 481, 0, 459, 250, 0, 0,
	0, 0, 460, 461, 251, 462, 463, 464, 0, 0,
	252, 253, 254, 255, 0, 256, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 257, 258, 259, 212, 213,
	260, 214, 261, 262, 215, 0, 263, 264, 265, 266,
	267, 268, 0, 0, 216, 217, 218, 0, 269, 219,
	0, 0, 0, 270, 271, 272, 273, 274, 0, 276,
	277, 278, 275, 0, 279, 0, 280, 281, 0, 0,
	282, 283, 284, 0, 0, 0, 0, 0, 0, 0,
	285, 286, 484, 287, 288, 289, 220, 221, 0, 290,
	0, 291, 0, 292, 0, 0, 293, 294, 0, 295,
	296, 0, 0, 0, 222, 300, 297, 298, 301, 304,
	299, 305, 223, 224, 0, 0, 0, 0, 0, 0,
	0, 306, 307, 225, 308, 309, 0, 310, 0, 311,
	0, 0, 0, 312, 0, 313, 226, 0, 227, 0,
	314, 315, 316, 317, 318, 319, 1510, 229, 0, 0,
	321, 0, 0, 0, 0, 320, 322, 329, 0, 0,
	323, 230, 325, 324, 326, 327, 328, 231, 0, 232,
	0, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	0, 0, 336, 337, 338, 0, 340, 339, 0, 233,
	0, 341, 342, 0, 0, 343, 344, 0, 0, 345,
	0, 346, 0, 0, 347, 348, 350, 351, 349, 0,
	352, 353, 355, 354, 0, 0, 0, 0, 234, 356,
	235, 357, 358, 0, 359, 360, 0, 0, 361, 362,
	0, 0, 363, 236, 0, 364, 0, 237, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 238, 373, 239,
	374, 0, 375, 376, 377, 378, 379, 240, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 241, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 415, 416, 410, 412, 413, 414, 411, 417,
	418, 0, 419, 400, 401, 420, 0, 421, 242, 422,
	423, 0, 432, 424, 425, 426, 402, 427, 430, 431,
	428, 0, 429, 243, 0, 433, 434, 0, 435, 436,
	437, 438, 439, 302, 440, 303, 441, 442, 0, 244,
	245, 443, 0, 0, 444, 445, 246, 247, 0, 446,
	447, 448, 449, 0, 0, 450, 451, 452, 454, 0,
	455, 0, 453, 456, 457, 458, 248, 249, 481, 0,
	459, 250, 0, 0, 0, 0, 460, 461, 251, 462,
	463, 464, 0, 0, 252, 253, 254, 255, 0, 256,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 257,
	258, 259, 212, 213, 260, 214, 261, 262, 215, 0,
	263, 264, 265, 266, 267, 268, 0, 0, 216, 217,
	218, 0, 269, 219, 0, 0, 0, 270, 271, 272,
	273, 274, 0, 276, 277, 278, 275, 0, 279, 0,
	280, 281, 0, 0, 282, 283, 284, 0, 0, 0,
	0, 0, 0, 0, 285, 286, 484, 287, 288, 289,
	220, 221, 0, 290, 0, 291, 0, 292, 0, 0,
	293, 294, 0, 295, 296, 0, 0, 0, 222, 300,
	297, 298, 301, 304, 299, 305, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 306, 307, 225, 308, 309,
	0, 310, 0, 311, 0, 0, 0, 312, 0, 313,
	226, 0, 227, 0, 314, 315, 316, 317, 318, 319,
	228, 229, 0, 0, 321, 0, 0, 0, 0, 320,
	322, 329, 0, 0, 323, 230, 325, 324, 326, 327,
	328, 231, 0, 232, 0, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 0, 0, 336, 337, 338, 0,
	340, 339, 0, 233, 0, 341, 342, 0, 0, 343,
	344, 0, 0, 345, 0, 346, 0, 0, 347, 348,
	350, 351, 349, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 234, 356, 235, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 236, 0, 364,
	0, 237, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 238, 373, 239, 374, 0, 375, 376, 377, 378,
	379, 240, 876, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 241, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 415, 416, 410, 412,
	413, 414, 411, 417, 418, 0, 419, 400, 401, 420,
	0, 421, 242, 422, 423, 0, 432, 424, 425, 426,
	402, 427, 430, 431, 428, 0, 429, 243, 0, 433,
	434, 0, 435, 436, 437, 438, 439, 302, 440, 303,
	441, 442, 0, 244, 245, 443, 0, 0, 444, 445,
	246, 247, 0, 446, 447, 448, 449, 0, 0, 450,
	451, 452, 454, 0, 455, 0, 453, 456, 457, 458,
	248, 249, 481, 0, 459, 250, 0, 0, 0, 0,
	460, 461, 251, 462, 463, 464, 0, 0, 252, 253,
	254, 255, 0, 256, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 257, 258, 259, 212, 213, 260, 214,
	261, 262, 215, 0, 263, 264, 265, 266, 267, 268,
	0, 0, 216, 217, 218, 0, 269, 219, 0, 0,
	0, 270, 271, 272, 273, 274, 0, 276, 277, 278,
	275, 0, 279, 0, 280, 281, 0, 0, 282, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 285, 286,
	484, 287, 288, 289, 220, 221, 0, 290, 0, 291,
	0, 292, 0, 0, 293, 294, 0, 295, 296, 0,
	0, 0, 222, 300, 297, 298, 301, 304, 299, 305,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 225, 308, 309, 0, 310, 0, 311, 0, 0,
	0, 312, 0, 313, 226, 0, 227, 0, 314, 315,
	316, 317, 318, 319, 228, 229, 0, 0, 321, 0,
	0, 0, 0, 320, 322, 329, 0, 0, 323, 230,
	325, 324, 326, 327, 328, 231, 0, 232, 0, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 0, 0,
	336, 337, 338, 0, 340, 339, 0, 233, 0, 341,
	342, 0, 0, 343, 344, 0, 0, 345, 0, 346,
	0, 0, 347, 348, 350, 351, 349, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 234, 356, 235, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 236, 0, 364, 0, 237, 365, 366, 367, 0,
	369, 370, 371, 0, 372, 238, 373, 239, 374, 0,
	375, 376, 377, 0, 379, 240, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 241,
	0, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	415, 416, 410, 412, 413, 414, 411, 417, 418, 0,
	419, 400, 401, 420, 0, 421, 242, 422, 423, 0,
	432, 424, 425, 426, 402, 427, 430, 431, 428, 0,
	429, 243, 0, 433, 434, 0, 435, 436, 437, 438,
	439, 302, 440, 303, 441, 442, 0, 244, 245, 443,
	0, 0, 444, 445, 246, 247, 0, 446, 447, 448,
	449, 0, 0, 450, 451, 452, 454, 0, 455, 0,
	453, 456, 457, 458, 248, 249, 0, 0, 459, 250,
	0, 0, 0, 0, 460, 461, 251, 462, 463, 464,
	1263, 1264, 0, 1296, 1297, 1298, 1306, 1307, 1308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 0,
	0, 0, 0, 0, 0, 1266, 0, 0, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1263, 1264,
	0, 1296, 1297, 1298, 1306, 1307, 1308, 0, 0, 0,
	1265, 0, 0, 0, 0, 0, 1299, 0, 1285, 0,
	0, 0, 0, 1266, 0, 1282, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1265, 0,
	0, 0, 0, 0, 0, 0, 1285, 0, 0, 0,
	0, 0, 0, 1282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 1289, 1290,
	1291, 0, 0, 0, 0, 0, 1271, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1303, 1313,
	0, 1293, 1294, 1295, 0, 1288, 1289, 1290, 1291, 0,
	0, 0, 0, 0, 1271, 0, 0, 0, 0, 0,
	0, 0, 1309, 1310, 0, 0, 0, 0, 0, 0,
	1280, 1281, 0, 0, 0, 0, 1303, 1313, 0, 1293,
	1294, 1295, 0, 1301, 0, 0, 0, 0, 0, 0,
	1286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1309, 1310, 0, 0, 0, 0, 1311, 0, 1280, 1281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1300, 1301, 0, 0, 0, 0, 0, 0, 1286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1292, 0, 1300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1292, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 1263, 1264, 0, 1296, 1297, 1298, 1306, 1307,
	1308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 1266, 0, 0,
	1312, 0, 1302, 0, 0, 1277, 1278, 1284, 1283, 1279,
	1305, 0, 1276, 1274, 1275, 1267, 1268, 1269, 1270, 1272,
	1273, 0, 1265, 0, 0, 0, 0, 0, 0, 2174,
	1285, 0, 0, 0, 0, 0, 0, 1282, 0, 0,
	1302, 0, 0, 1277, 1278, 1284, 1283, 1279, 1305, 0,
	1276, 1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273, 0,
	0, 0, 0, 2970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	1289, 1290, 1291, 0, 0, 0, 0, 0, 1271, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1263, 1264,
	0, 1296, 1297, 1298, 1306, 1307, 1308, 0, 0, 0,
	1303, 1313, 0, 1293, 1294, 1295, 1299, 0, 0, 0,
	0, 0, 0, 1266, 0, 0, 1312, 0, 0, 0,
	0, 0, 0, 0, 1309, 1310, 0, 0, 0, 0,
	0, 0, 1280, 1281, 0, 0, 0, 0, 1265, 0,
	0, 0, 0, 0, 0, 1301, 1285, 0, 0, 0,
	0, 0, 1286, 1282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1288, 1289, 1290, 1291, 0,
	0, 0, 0, 0, 1271, 0, 0, 0, 1292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1287, 1303, 1313, 0, 1293,
	1294, 1295, 0, 0, 0, 0, 0, 0, 0, 1263,
	1264, 0, 1296, 1297, 1298, 1306, 1307, 1308, 1304, 0,
	1309, 1310, 0, 0, 0, 0, 0, 1299, 1280, 1281,
	0, 0, 0, 0, 1266, 0, 0, 1312, 0, 0,
	0, 1301, 0, 0, 0, 0, 0, 0, 1286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1265,
	0, 0, 0, 0, 1311, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 1282, 0, 0, 0, 1300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 1277, 1278, 1284,
	1283, 1279, 1305, 0, 1276, 1274, 1275, 1267, 1268, 1269,
	1270, 1272, 1273, 0, 1292, 0, 0, 2966, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 1289, 1290, 1291,
	0, 1287, 0, 0, 0, 1271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1263, 1264, 0, 1296, 1297,
	1298, 1306, 1307, 1308, 1304, 0, 0, 1303, 1313, 0,
	1293, 1294, 1295, 1299, 0, 0, 0, 0, 0, 0,
	1266, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	0, 1309, 1310, 0, 0, 0, 0, 0, 0, 1280,
	1281, 0, 0, 0, 0, 1265, 0, 0, 0, 0,
	0, 0, 1301, 1285, 0, 0, 0, 0, 0, 1286,
	1282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	1302, 0, 0, 1277, 1278, 1284, 1283, 1279, 1305, 1300,
	1276, 1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273, 0,
	0, 0, 0, 2906, 0, 0, 0, 0, 0, 0,
	0, 0, 1288, 1289, 1290, 1291, 0, 0, 0, 0,
	0, 1271, 0, 0, 0, 1292, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 1303, 1313, 0, 1293, 1294, 1295, 0,
	0, 0, 0, 0, 0, 0, 1263, 1264, 0, 1296,
	1297, 1298, 1306, 1307, 1308, 1304, 0, 1309, 1310, 0,
	0, 0, 0, 0, 1299, 1280, 1281, 0, 0, 0,
	0, 1266, 0, 0, 1312, 0, 0, 0, 1301, 0,
	0, 0, 0, 0, 0, 1286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1265, 0, 0, 0,
	0, 1311, 0, 0, 1285, 0, 0, 0, 0, 0,
	0, 1282, 0, 0, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1302, 0, 0, 1277, 1278, 1284, 1283, 1279, 1305,
	0, 1276, 1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273,
	0, 1292, 0, 0, 2855, 0, 0, 0, 0, 0,
	0, 0, 0, 1288, 1289, 1290, 1291, 0, 1287, 0,
	0, 0, 1271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1263, 1264, 0, 1296, 1297, 1298, 1306, 1307,
	1308, 1304, 0, 0, 1303, 1313, 0, 1293, 1294, 1295,
	1299, 0, 0, 0, 0, 0, 0, 1266, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 0, 1309, 1310,
	0, 0, 0, 0, 0, 0, 1280, 1281, 0, 0,
	0, 0, 1265, 0, 0, 0, 0, 0, 0, 1301,
	1285, 0, 0, 0, 0, 0, 1286, 1282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 0, 0, 1302, 0, 0,
	1277, 1278, 1284, 1283, 1279, 1305, 1300, 1276, 1274, 1275,
	1267, 1268, 1269, 1270, 1272, 1273, 0, 0, 0, 0,
	2822, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	1289, 1290, 1291, 0, 0, 0, 0, 0, 1271, 0,
	0, 0, 1292, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1287,
	1303, 1313, 0, 1293, 1294, 1295, 0, 0, 0, 0,
	0, 0, 0, 1263, 1264, 0, 1296, 1297, 1298, 1306,
	1307, 1308, 1304, 0, 1309, 1310, 0, 0, 0, 0,
	0, 1299, 1280, 1281, 0, 0, 0, 0, 1266, 0,
	0, 1312, 0, 0, 0, 1301, 0, 0, 0, 0,
	0, 0, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1265, 0, 0, 0, 0, 1311, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 1282, 0,
	0, 0, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1302, 0,
	0, 1277, 1278, 1284, 1283, 1279, 1305, 0, 1276, 1274,
	1275, 1267, 1268, 1269, 1270, 1272, 1273, 0, 1292, 0,
	0, 2816, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 1289, 1290, 1291, 0, 1287, 0, 0, 0, 1271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1263,
	1264, 0, 1296, 1297, 1298, 1306, 1307, 1308, 1304, 0,
	0, 1303, 1313, 0, 1293, 1294, 1295, 1299, 0, 0,
	0, 0, 0, 0, 1266, 0, 0, 1312, 0, 0,
	0, 0, 0, 0, 0, 1309, 1310, 0, 0, 0,
	0, 0, 0, 1280, 1281, 0, 0, 0, 0, 1265,
	0, 0, 0, 0, 0, 0, 1301, 1285, 0, 0,
	0, 0, 0, 1286, 1282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 1302, 0, 0, 1277, 1278, 1284,
	1283, 1279, 1305, 1300, 1276, 1274, 1275, 1267, 1268, 1269,
	1270, 1272, 1273, 0, 0, 0, 0, 2810, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 1289, 1290, 1291,
	0, 0, 0, 0, 0, 1271, 0, 0, 0, 1292,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1287, 1303, 1313, 0,
	1293, 1294, 1295, 0, 0, 0, 0, 0, 0, 0,
	1263, 1264, 0, 1296, 1297, 1298, 1306, 1307, 1308, 1304,
	0, 1309, 1310, 0, 0, 0, 0, 0, 1299, 1280,
	1281, 0, 0, 0, 0, 1266, 0, 0, 1312, 0,
	0, 0, 1301, 0, 0, 0, 0, 0, 0, 1286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1265, 0, 0, 0, 0, 1311, 0, 0, 1285, 0,
	0, 0, 0, 0, 0, 1282, 0, 0, 0, 1300,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1302, 0, 0, 1277, 1278,
	1284, 1283, 1279, 1305, 0, 1276, 1274, 1275, 1267, 1268,
	1269, 1270, 1272, 1273, 0, 1292, 0, 0, 2727, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 1289, 1290,
	1291, 0, 1287, 0, 0, 0, 1271, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1263, 1264, 0, 1296,
	1297, 1298, 1306, 1307, 1308, 1304, 0, 0, 1303, 1313,
	0, 1293, 1294, 1295, 1299, 0, 0, 0, 0, 0,
	0, 1266, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 0, 1309, 1310, 0, 0, 0, 0, 0, 0,
	1280, 1281, 0, 0, 0, 0, 1265, 0, 0, 0,
	0, 0, 0, 1301, 1285, 0, 0, 0, 0, 0,
	1286, 1282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	0, 1302, 0, 0, 1277, 1278, 1284, 1283, 1279, 1305,
	1300, 1276, 1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273,
	0, 0, 0, 0, 2682, 0, 0, 0, 0, 0,
	0, 0, 0, 1288, 1289, 1290, 1291, 0, 0, 0,
	0, 0, 1271, 0, 0, 0, 1292, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 1303, 1313, 0, 1293, 1294, 1295,
	0, 0, 0, 0, 0, 0, 0, 1263, 1264, 0,
	1296, 1297, 1298, 1306, 1307, 1308, 1304, 0, 1309, 1310,
	0, 0, 0, 0, 0, 1299, 1280, 1281, 0, 0,
	0, 0, 1266, 0, 0, 1312, 0, 0, 0, 1301,
	0, 0, 0, 0, 0, 0, 1286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 1311, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 1282, 0, 0, 0, 1300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1277, 1278, 1284, 1283, 1279,
	1305, 0, 1276, 1274, 1275, 1267, 1268, 1269, 1270, 1272,
	1273, 0, 1292, 0, 0, 2681, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 1289, 1290, 1291, 0, 1287,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1263, 1264, 0, 1296, 1297, 1298, 1306,
	1307, 1308, 1304, 0, 0, 1303, 1313, 0, 1293, 1294,
	1295, 1299, 0, 0, 0, 0, 0, 0, 1266, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 0, 1309,
	1310, 0, 0, 0, 0, 0, 0, 1280, 1281, 0,
	0, 0, 0, 1265, 0, 0, 0, 0, 0, 0,
	1301, 1285, 0, 0, 0, 0, 0, 1286, 1282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 1302, 0,
	0, 1277, 1278, 1284, 1283, 1279, 1305, 1300, 1276, 1274,
	1275, 1267, 1268, 1269, 1270, 1272, 1273, 0, 0, 0,
	0, 2653, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 1289, 1290, 1291, 0, 0, 0, 0, 0, 1271,
	0, 0, 0, 1292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1287, 1303, 1313, 0, 1293, 1294, 1295, 0, 0, 0,
	0, 0, 0, 0, 1263, 1264, 0, 1296, 1297, 1298,
	1306, 1307, 1308, 1304, 0, 1309, 1310, 0, 0, 0,
	0, 0, 1299, 1280, 1281, 0, 0, 0, 0, 1266,
	0, 0, 1312, 0, 0, 0, 1301, 0, 0, 0,
	0, 0, 0, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1265, 0, 0, 0, 0, 1311,
	0, 0, 1285, 0, 0, 0, 0, 0, 0, 1282,
	0, 0, 0, 1300, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 1277, 1278, 1284, 1283, 1279, 1305, 0, 1276,
	1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273, 0, 1292,
	0, 0, 2473, 0, 0, 0, 0, 0, 0, 0,
	0, 1288, 1289, 1290, 1291, 0, 1287, 0, 0, 0,
	1271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1263, 1264, 0, 1296, 1297, 1298, 1306, 1307, 1308, 1304,
	0, 0, 1303, 1313, 0, 1293, 1294, 1295, 1299, 0,
	0, 0, 0, 0, 0, 1266, 0, 0, 1312, 0,
	0, 0, 0, 0, 0, 0, 1309, 1310, 0, 0,
	0, 0, 0, 0, 1280, 1281, 0, 0, 0, 0,
	1265, 0, 0, 0, 0, 0, 0, 1301, 1285, 0,
	0, 0, 0, 0, 1286, 1282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 0, 0, 1302, 0, 0, 1277, 1278,
	1284, 1283, 1279, 1305, 1300, 1276, 1274, 1275, 1267, 1268,
	1269, 1270, 1272, 1273, 0, 0, 0, 0, 2446, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 1289, 1290,
	1291, 0, 0, 0, 0, 0, 1271, 0, 0, 0,
	1292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 1303, 1313,
	0, 1293, 1294, 1295, 0, 0, 0, 0, 0, 0,
	0, 1263, 1264, 0, 1296, 1297, 1298, 1306, 1307, 1308,
	1304, 0, 1309, 1310, 0, 0, 0, 0, 0, 1299,
	1280, 1281, 0, 0, 0, 0, 1266, 0, 0, 1312,
	0, 0, 0, 1301, 0, 0, 0, 0, 0, 0,
	1286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 0, 0, 0, 0, 1311, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 1282, 0, 0, 0,
	1300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1302, 0, 0, 1277,
	1278, 1284, 1283, 1279, 1305, 0, 1276, 1274, 1275, 1267,
	1268, 1269, 1270, 1272, 1273, 0, 1292, 0, 0, 1785,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 1289,
	1290, 1291, 0, 1287, 0, 0, 0, 1271, 3048, 0,
	0, 0, 0, 0, 0, 0, 0, 1263, 1264, 0,
	1296, 1297, 1298, 1306, 1307, 1308, 1304, 0, 0, 1303,
	1313, 0, 1293, 1294, 1295, 1299, 0, 0, 0, 0,
	0, 0, 1266, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 1309, 1310, 0, 0, 0, 0, 0,
	0, 1280, 1281, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 1301, 1285, 0, 0, 0, 0,
	0, 1286, 1282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 0, 1302, 0, 0, 1277, 1278, 1284, 1283, 1279,
	1305, 1300, 1276, 1274, 1275, 1267, 1268, 1269, 1270, 1272,
	1273, 0, 0, 2143, 0, 0, 0, 0, 0, 3047,
	0, 0, 0, 0, 1288, 1289, 1290, 1291, 0, 0,
	0, 0, 0, 1271, 0, 2223, 0, 1292, 2222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1287, 1303, 1313, 0, 1293, 1294,
	1295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1304, 0, 1309,
	1310, 0, 0, 0, 0, 0, 0, 1280, 1281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1301, 0, 0, 0, 0, 0, 0, 1286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1300, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1302, 0, 0, 1277, 1278, 1284, 1283,
	1279, 1305, 0, 1276, 1274, 1275, 1267, 1268, 1269, 1270,
	1272, 1273, 0, 1292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1287, 1263, 1264, 0, 1296, 1297, 1298, 1306, 1307, 1308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	0, 0, 0, 1304, 2116, 0, 1266, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 0, 0, 0, 0, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 1282, 1883, 0, 0,
	0, 0, 0, 1263, 1264, 0, 1296, 1297, 1298, 1306,
	1307, 1308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 0, 2117, 0, 1882, 0, 0, 1266, 1302,
	0, 1312, 1277, 1278, 1284, 1283, 1279, 1305, 0, 1276,
	1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273, 1288, 1289,
	1290, 1291, 0, 1265, 0, 0, 0, 1271, 0, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 1282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1303,
	1313, 0, 1293, 1294, 1295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1309, 1310, 0, 0, 0, 0, 0,
	0, 1280, 1281, 0, 0, 0, 0, 0, 0, 0,
	1288, 1289, 1290, 1291, 1301, 0, 0, 0, 0, 1271,
	0, 1286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 1303, 1313, 0, 1293, 1294, 1295, 0, 0, 0,
	0, 1300, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1309, 1310, 0, 0, 0,
	0, 0, 0, 1280, 1281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1301, 1292, 0, 0,
	0, 0, 0, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1287, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 0, 0, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1263, 1264, 0,
	1296, 1297, 1298, 1306, 1307, 1308, 0, 0, 0, 1292,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 1266, 0, 0, 1312, 1287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1265, 0, 1304,
	0, 0, 0, 1302, 0, 1285, 1277, 1278, 1284, 1283,
	1279, 1305, 1282, 1276, 1274, 1275, 1267, 1268, 1269, 1270,
	1272, 1273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 1289, 1290, 1291, 0, 0,
	0, 0, 0, 1271, 0, 1302, 0, 0, 1277, 1278,
	1284, 1283, 1279, 1305, 0, 1276, 1274, 1275, 1267, 1268,
	1269, 1270, 1272, 1273, 0, 1303, 1313, 0, 1293, 1294,
	1295, 0, 0, 0, 0, 0, 0, 0, 1263, 1264,
	0, 1296, 1297, 1298, 1306, 1307, 1308, 0, 0, 1309,
	1310, 0, 0, 0, 0, 0, 1299, 1280, 1281, 0,
	0, 0, 0, 1266, 0, 0, 1312, 0, 0, 0,
	1301, 0, 0, 0, 0, 0, 0, 1286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1265, 0,
	0, 0, 0, 1311, 0, 0, 1285, 0, 0, 0,
	0, 0, 0, 1282, 0, 0, 0, 1300, 707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1288, 1289, 1290, 1291, 0,
	1287, 0, 0, 0, 1271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1263, 1264, 0, 1296, 1297, 1298,
	1306, 1307, 1308, 1304, 0, 0, 1303, 1313, 0, 1293,
	1294, 1295, 1299, 0, 0, 0, 0, 0, 0, 1266,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 0,
	1309, 1310, 0, 0, 0, 0, 0, 0, 1280, 1281,
	0, 0, 0, 0, 1265, 0, 0, 0, 0, 0,
	0, 1301, 1285, 0, 0, 0, 0, 0, 1286, 1282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 0, 0, 1302,
	0, 0, 1277, 1278, 1284, 1283, 1279, 1305, 1300, 1276,
	1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1288, 1289, 1290, 1291, 0, 0, 0, 0, 0,
	1271, 0, 0, 0, 1292, 2232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 1303, 1313, 0, 1293, 1294, 1295, 0, 0,
	0, 0, 0, 0, 0, 1263, 1264, 0, 1296, 1297,
	1298, 1306, 1307, 1308, 1304, 0, 1309, 1310, 0, 0,
	0, 0, 0, 1299, 1280, 1281, 0, 2227, 0, 0,
	1266, 0, 0, 1312, 0, 0, 0, 1301, 0, 0,
	0, 0, 0, 0, 1286, 0, 2450, 0, 0, 0,
	0, 0, 0, 0, 0, 1265, 0, 0, 0, 0,
	1311, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	1282, 0, 0, 0, 1300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1277, 1278, 1284, 1283, 1279, 1305, 0,
	1276, 1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273, 0,
	1292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1288, 1289, 1290, 1291, 0, 1287, 0, 0,
	0, 1271, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1263, 1264, 0, 1296, 1297, 1298, 1306, 1307, 1308,
	1304, 0, 0, 1303, 1313, 0, 1293, 1294, 1295, 1299,
	0, 0, 0, 0, 0, 0, 1266, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 1309, 1310, 0,
	0, 0, 0, 0, 0, 1280, 1281, 0, 0, 0,
	0, 1265, 0, 0, 0, 0, 0, 0, 1301, 1285,
	0, 0, 0, 0, 0, 1286, 1282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 1302, 0, 0, 1277,
	1278, 1284, 1283, 1279, 1305, 1300, 1276, 1274, 1275, 1267,
	1268, 1269, 1270, 1272, 1273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 1289,
	1290, 1291, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 1292, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1287, 1303,
	1313, 0, 1293, 1294, 1295, 0, 0, 0, 0, 0,
	0, 0, 1263, 1264, 0, 1296, 1297, 1298, 1306, 1307,
	1308, 1304, 0, 1309, 1310, 0, 0, 0, 0, 0,
	1299, 1280, 1281, 0, 2173, 0, 0, 1266, 0, 0,
	1312, 0, 0, 0, 1301, 0, 0, 0, 0, 0,
	0, 1286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1265, 0, 0, 0, 0, 1311, 0, 0,
	1285, 0, 0, 0, 0, 0, 0, 1282, 0, 0,
	0, 1300, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2189, 1302, 0, 0,
	1277, 1278, 1284, 1283, 1279, 1305, 0, 1276, 1274, 1275,
	1267, 1268, 1269, 1270, 1272, 1273, 0, 1292, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	1289, 1290, 1291, 0, 1287, 0, 0, 0, 1271, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1263, 1264,
	0, 1296, 1297, 1298, 1306, 1307, 1308, 1304, 0, 0,
	1303, 1313, 0, 1293, 1294, 1295, 1299, 0, 0, 0,
	0, 0, 0, 1266, 0, 0, 1312, 0, 0, 0,
	0, 0, 0, 0, 1309, 1310, 0, 0, 0, 0,
	0, 0, 1280, 1281, 0, 0, 0, 0, 1265, 0,
	0, 0, 0, 0, 0, 1301, 1285, 0, 0, 0,
	0, 0, 1286, 1282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 0, 1302, 0, 0, 1277, 1278, 1284, 1283,
	1279, 1305, 1300, 1276, 1274, 1275, 1267, 1268, 1269, 1270,
	1272, 1273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1288, 1289, 1290, 1291, 0,
	0, 0, 0, 0, 1271, 0, 0, 0, 1292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1287, 1303, 1313, 0, 1293,
	1294, 1295, 0, 0, 0, 0, 0, 1263, 1264, 0,
	1296, 1297, 1298, 1306, 1307, 1308, 0, 0, 1304, 0,
	1309, 1310, 0, 0, 0, 1299, 0, 0, 1280, 1281,
	0, 0, 1266, 0, 0, 1312, 0, 0, 0, 0,
	0, 1301, 0, 0, 0, 0, 0, 0, 1286, 0,
	0, 0, 0, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 1311, 1285, 0, 0, 0, 0,
	0, 0, 1282, 0, 0, 0, 0, 0, 1300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 1277, 1278, 1284,
	1283, 1279, 1305, 0, 1276, 1274, 1275, 1267, 1268, 1269,
	1270, 1272, 1273, 0, 1292, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 1289, 1290, 1291, 0, 0,
	0, 1287, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1263, 1264, 0, 1296, 1297, 1298, 1306,
	1307, 1308, 0, 0, 1304, 1303, 1313, 0, 1293, 1294,
	1295, 0, 0, 0, 0, 0, 0, 0, 1266, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 0, 1309,
	1310, 0, 0, 0, 0, 0, 0, 1280, 1281, 0,
	0, 0, 0, 1265, 0, 0, 0, 0, 0, 0,
	1301, 1285, 0, 0, 0, 0, 0, 1286, 1282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1277, 1278, 1284, 1283, 1279, 1305, 0,
	1276, 1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 1289, 1290, 1291, 0, 0, 0, 0, 0, 1271,
	0, 0, 0, 1292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1287, 1303, 1313, 0, 1293, 1294, 1295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1304, 0, 1309, 1310, 0, 0, 0,
	0, 0, 0, 1280, 1281, 0, 0, 0, 0, 0,
	0, 1569, 0, 0, 0, 0, 1301, 0, 0, 0,
	0, 0, 0, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 1580, 1565, 1570, 1553,
	1590, 1589, 0, 0, 1555, 1554, 0, 0, 0, 0,
	0, 1598, 1597, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 1277, 1278, 1284, 1283, 1279, 1305, 0, 1276,
	1274, 1275, 1267, 1268, 1269, 1270, 1272, 1273, 0, 1292,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1591, 0, 1587, 1586, 0, 1287, 0, 0, 0,
	0, 0, 0, 1585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1584, 1582, 1583, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1573, 1568,
	1574, 1575, 1576, 1577, 1578, 0, 1572, 0, 0, 0,
	0, 0, 638, 0, 669, 1595, 1596, 0, 0, 0,
	0, 0, 0, 0, 0, 1302, 0, 0, 1277, 1278,
	1284, 1283, 1279, 1305, 645, 1276, 1274, 1275, 1267, 1268,
	1269, 1270, 1272, 1273, 1557, 0, 643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1588, 0, 0,
	0, 1566, 1567, 0, 0, 0, 0, 0, 644, 0,
	0, 0, 0, 646, 0, 0, 0, 674, 0, 0,
	0, 0, 0, 652, 653, 0, 0, 0, 664, 0,
	0, 0, 0, 0, 1581, 0, 0, 0, 0, 0,
	0, 0, 670, 647, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 668, 658,
	0, 1558, 1559, 1560, 1561, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1579, 1562, 0, 0, 0,
	0, 0, 0, 0, 0, 648, 1600, 0, 0, 0,
	0, 642, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1556, 649, 650, 1592, 1593, 1594, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 656, 0, 0, 1563,
	0, 0, 0, 651, 1599, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 655, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 654, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 666, 0,
	0, 0, 0, 0, 0, 0, 0, 661, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 640,
	659, 672, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 641, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 662, 0, 0, 660, 0,
	0, 0, 675, 676, 0, 0, 0, 0, 0, 673,
	0, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	665,
}
var sqlPact = [...]int{

	275, -1000, -205, -1000, -1000, -1000, 216, -1000, -1000, -1000,
	-1000, 214, 213, 212, -1000, 209, 208, 207, 206, 204,
	199, 193, 190, 189, 188, 184, -1000, -1000, 180, -1000,
	-1000, -1000, -1000, 179, 169, 167, -1000, 166, 1559, 31054,
	164, 163, 162, 1594, 48456, 1453, 161, 160, -1000, 154,
	1278, 35958, 1028, 1805, -1000, 151, 149, 1452, 48082, 3954,
	33684, 1321, 1874, 47702, 30674, 1864, 33304, 47322, -1000, -1000,
	1029, -1000, -1000, 46942, 148, 136, 135, 134, 132, -1000,
	130, 46562, 129, 127, 126, 124, 123, 120, 119, 117,
	-1000, 113, 112, 110, 101, 100, 99, 96, 95, 94,
	93, 91, 88, 85, 84, 81, 73, -1000, 56570, 72,
	71, 70, -1000, 1306, 69, 68, 67, 65, 64, -1000,
	-1000, 63, 62, 61, 60, 59, 58, -1000, 128, 56,
	54, 53, 50, 49, -1000, 1178, 406, 1733, 12852, 1164,
	1159, 1149, 1146, 1144, 725, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 51074, 48456, 45, -128, 37, -1000, 2367,
	772, 23788, 275, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35578, 35198, 34818, 29172, 46182, 45802,
	10015, 10015, 909, -1000, -1000, -1000, -1000, -1000, 6, 32176,
	48456, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 247, -1000, -1000, -1000,
	-1000, -1000, -1000, 19872, 19455, 19038, 386, -1000, -1000, -1000,
	246, -1000, -1000, -1000, -1000, 1184, -1000, -1000, -1000, -1000,
	45422, 45042, 2163, 44662, 28782, 28392, 44282, 1726, 1720, 43902,
	-1000, -1000, 43522, -1000, -1000, 2211, 1935, 1898, 34438, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43148, 42768,
	42388, 42008, 41628, 28002, 27612, 566, -1000, -1000, -1000, -1000,
	24548, -1000, -1000, -1000, -1000, -1000, 36, -1000, 34, 33,
	-1000, 32, 31, 30, 26, 25, 24, 23, 21, -1000,
	19, 17, -1000, 16, 14, -1000, 13, 10, 1540, 1394,
	1048, 41248, 1001, 1451, -10, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 48456, -1000, 20275, -1000, 564, -1000, 1910, -1000,
	20275, -1000, 1448, 203, 1274, -1000, -1000, -1000, 1336, 996,
	-1000, -1000, 48456, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2523, 1375, 563, 40868, -1000, 1879, -1000, 670, 13658, -1000,
	890, -1000, 13658, 245, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1479, 1145, 2487, 27222, 1498, 2318, 2204, 2520, 1551, 2190,
	2074, 2041, 2032, 2017, 2518, 1090, 2517, 945, 810, 2516,
	2012, 2009, 2497, 1572, 822, 2515, 2512, 1945, 1906, -1000,
	-1000, -1000, -1000, 1032, -1000, -1000, -1000, -1000, -1000, -1000,
	37454, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1178, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1616, 2262, 2262, 2262, 2347, 360, 358,
	-1000, 128, -1000, 1578, -1000, 1361, -1000, -1000, -1000, 55898,
	-1000, -1000, 20275, 20275, 20275, 20275, 20275, 1224, -1000, -1000,
	-1000, 586, -1000, 562, 560, 11225, -1000, -1000, 2454, -1000,
	-1000, -1000, 383, -1000, -1000, 20275, -1000, 241, -1000, -1000,
	-1000, -1000, 559, 2502, -1000, 788, -1000, -1000, -1000, 683,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1987, 515, 514,
	-1000, 513, 512, -1000, -1000, -1000, 557, 552, 551, 549,
	548, 546, -1000, -1000, -1000, 1194, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 728, -1000, 728,
	728, 500, 500, 545, 544, 501, 543, -1000, -1000, 540,
	500, 537, 536, -1000, -1000, 534, 678, 632, 533, 532,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1520,
	-1000, -1000, 1520, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	908, 49952, -1000, -1000, -1000, 4, 48456, -1000, 386, 4,
	-1000, -1000, 530, -1000, 14478, 14478, 14478, -1000, -1000, 1432,
	20275, -1000, 1744, -1000, 3417, -206, 520, 24928, 625, 625,
	-1000, 22648, 596, 26832, -1000, 515, 514, 513, 512, -1000,
	239, -1000, -1000, -1000, -1000, -1000, 1587, 2161, 894, -1000,
	1130, 2159, -1000, 1824, 2155, 1115, -1000, -1000, 699, 2151,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1327,
	-1000, -1000, 1473, 2147, -172, 2023, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1459, -1000, 29546, 32176, 2, -1000,
	-1000, -58, -1000, 9627, 55898, -1000, 55898, 700, -1000, 55898,
	676, -1000, 1905, 48456, 10015, 48456, 48456, -1000, 510, 1581,
	1381, -1000, -1000, 31802, 1824, 1580, -1000, -1000, 696, 1579,
	-1000, -1000, 1570, -1000, 386, -1000, -1000, 40488, 50700, 696,
	1556, -1000, -1000, -1000, 37454, -1000, 48456, -1000, 48456, -1000,
	1016, -1000, 50326, 153, 2137, -1000, -1000, 153, 2134, -1000,
	153, 2128, -1000, 140, 2125, -1000, -1000, 1401, 2121, -1000,
	-70, 2119, -1000, -1000, -70, 2116, -1000, -1000, 20275, -12,
	-1000, -1000, -1000, 772, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 40108, 31802, 48456, 34058, 705, 55898, 2396, 56387, 29546,
	55898, 31802, 48456, 1976, -1000, 39728, 39348, 2303, 669, -1000,
	-1000, 48456, -1000, 20275, -1000, 2394, 1664, -13, -1000, -1000,
	-1000, -1000, -1000, 1614, 1555, 826, 1243, -1000, 13658, 13658,
	2218, -1000, 233, 10015, -1000, -1000, 958, 1658, -1000, -1000,
	-1000, -1000, -1000, 38968, -1000, -1000, -1000, 1355, 48456, -1000,
	-1000, 1964, -1000, 31428, 48456, -1000, 48456, -1000, 48456, -1000,
	48456, -1000, 48456, -1000, -1000, -1000, -1000, -1000, 2060, 1153,
	1951, -1000, 48456, -1000, 48456, -1000, -1000, -1000, 1612, -1000,
	-1000, -1000, 38594, 38214, 37834, -1000, -1000, 1036, -1000, 957,
	-1000, -1000, 155, -1000, -1000, 1616, -1000, 1324, 1714, 18621,
	1677, 20275, 128, -1000, -1000, 128, 128, 12435, -1000, -1000,
	-1000, 48456, -1000, 6875, 56387, 10015, 937, 20275, 20275, 20275,
	20275, 20275, 20275, 20275, 20275, 20275, 20275, 20275, 20275, 20275,
	20275, 20275, 20275, 20275, 20275, 20275, 20275, 20275, 20275, 20275,
	20275, 20275, 20275, 20275, 20275, 20275, 20275, 20275, 20275, 20275,
	20275, 20275, 1569, 20275, 904, 20275, 20275, 20275, 20275, 2158,
	-1000, -1000, 1318, 405, 1354, -1000, 2472, 2472, 2472, 56193,
	56193, 471, 586, -1000, 20275, -1000, 79, 20275, 358, 53964,
	5, 10822, -1000, -1000, -1000, -1000, 18204, 712, 55898, 9239,
	10405, -1000, 2491, 1030, 1834, 1786, 509, 652, 651, 568,
	444, 20275, 20275, 20275, 20275, 20275, 20275, -1000, -1000, -1000,
	-1000, -1000, -1000, 2454, -1000, 17801, 17384, -1000, 2485, 16967,
	16550, -1000, 16133, 21484, 15716, 936, 935, 932, 20275, 11628,
	-1000, -13, -1000, 49952, -1000, 48456, 4, 2392, 20275, 194,
	-1000, 54753, -1000, 194, 194, 508, -17, 55898, 1668, 1666,
	24168, 1549, 1241, 1241, 1241, -1000, 505, 576, 625, 7280,
	15299, 503, 625, 625, 195, 36332, 1246, 36332, 259, 356,
	22268, 1744, -1000, -1000, 48456, 10015, -7, 1157, -1000, 32924,
	2295, 2256, 2243, 1014, -1000, 987, 2346, 37454, 2369, 79,
	2291, 1891, -1000, -1000, 902, 37454, 1824, -1000, 56387, -1000,
	1723, 2338, 1003, 1006, 1003, 1003, 997, 37454, 901, 1211,
	29546, 2284, 900, -8, 2363, 79, 2269, 1886, 897, -1000,
	-1000, 48456, 10015, 2253, 953, 623, 2, 32176, 48456, 232,
	-1000, 20275, 20275, 973, -20, 231, 1685, 1675, 195, -1000,
	32550, 2389, 2112, 48456, 885, -1000, 1824, 2102, -1000, 1204,
	-1000, 2100, 2098, 2386, 1378, 1543, -1000, -1000, -1000, 1377,
	1542, 853, 2096, 703, 290, 2377, 290, 26072, -1000, 48456,
	-1000, 48456, -1000, -1000, 48456, -1000, 48456, -1000, 48456, -1000,
	48456, 48456, -1000, 48456, 29546, 29546, 29546, -22, 4089, 30294,
	877, -76, -1000, 756, 32550, 4239, -34, -1000, 950, -1000,
	-1000, -1000, 292, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	728, 502, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 501, 1194, 500, 500, 500, -1000,
	-1000, -1000, 678, 632, -1000, -1000, -1000, 728, 728, -1000,
	-1000, -176, 1872, -58, 34058, 623, -1000, 623, -1000, 1942,
	-1000, 2263, 654, -36, 783, -13, -1000, 1520, -1000, 1477,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2501, -1000, 2478, -1000, -1000, 2484, 1,
	-1000, 1, -1000, 10015, -1000, 48456, 1901, -1000, -1000, -1000,
	-1000, -1000, -1000, 48456, -1000, 48456, -1000, -1000, -1000, -1000,
	-1000, -1000, 660, -1000, 1867, -1000, 4089, 229, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 48456, 48456, 48456, -1000,
	37454, -1000, -1000, -1000, -1000, 55898, -1000, 425, -1000, -1000,
	55898, 1068, 1696, -1000, 1696, -1, -1000, 54681, 1653, 48456,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 667, 528, 528, 910, 910, 910, 910, 2452,
	3518, 769, 3779, 865, 865, 865, 865, 865, 865, 865,
	865, 4518, 379, 379, 4518, 4518, 4518, 4518, 4518, 379,
	379, 379, 865, 865, 865, 56193, 56057, 3282, 20275, 20275,
	876, 1302, 405, 3282, 20275, 3282, 3282, 3282, 3282, -1000,
	1882, -1000, -1000, -1000, -1000, 1868, 498, 21484, 21484, -1000,
	-1000, -1000, 11225, 20275, -1000, -1000, -1000, -1000, 497, 20275,
	-1000, 54100, -246, 355, -115, -1000, 20275, 575, -90, -1000,
	998, -1000, 20275, 223, -1000, -1000, -49, 20275, 20275, 20275,
	351, -1000, 350, -1000, 875, -1000, 870, 868, 866, -1000,
	495, 1226, 493, 492, 20275, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 55762, 51830, 6620, 6549, 5475, -43, -44,
	349, -1000, 1841, -115, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 348, -1000, 346, -46, -1000, -51, -1000, 345, -1000,
	55601, -115, 344, 4892, -1000, 21484, 21484, 21484, 11225, 484,
	343, -1000, 54397, -1000, 657, 650, 648, 55465, 14882, 14882,
	14882, 333, 55304, 20275, -115, -1000, -1000, 483, -53, 703,
	14478, 23408, 10015, -1000, 703, 703, 20275, -1000, 20275, 24168,
	24168, 1583, 1660, 24168, -1000, -1000, -1000, -1000, 36332, 538,
	625, 36332, -1000, 2454, 1630, -1000, 332, -1000, 14075, 36332,
	36332, 10015, -1000, -1000, 48456, 386, -1000, -1000, 625, 330,
	222, 1599, 48456, 48456, 48456, -1000, -1000, 1536, 49578, 1535,
	56387, 48456, -1000, -1000, 481, 479, 1651, 1649, 48456, 48456,
	49204, 48830, 48456, 1182, 20275, 1428, 1199, 79, -1000, 644,
	476, 48456, 1112, -1000, -1000, -1000, -1000, -1000, 48456, -1000,
	-1000, 2483, -1000, 1003, -1000, -1000, -1000, 1003, 1824, 1098,
	48456, 29546, 698, 641, 48456, 1213, 79, -1000, 638, 475,
	10015, 1183, -1000, 631, 48456, 1746, -1000, 1366, -1000, -1000,
	8851, 55898, 55898, -1000, -1000, 10015, 1690, 1690, 329, -2,
	-1000, -1000, -1000, -1000, -1000, -1000, 1716, 48456, 582, 48456,
	79, 48456, 181, 2504, 48456, 29546, 29546, 29546, 79, 48456,
	2095, 48456, 2093, 2078, 610, 48456, 1248, 20275, 1155, -1000,
	25308, 745, 48456, 1085, 114, -1000, -1000, -1000, 29, 48456,
	-1000, -1000, 153, 153, 153, -1000, 140, 1401, -1000, -70,
	-70, -1000, -1000, -1000, 48456, 2423, 29546, -60, -1000, 762,
	848, 841, -1000, 56387, -1000, 579, 879, -1000, 2466, 466,
	2454, -1000, 686, 37080, 48456, 80, -1000, 697, 1475, -1000,
	13658, 13658, -1000, 1520, -1000, -1000, 1071, -1000, 1179, -1000,
	-1000, -1000, -1000, 13658, -1000, -1000, 952, -58, -58, -1000,
	-1000, 525, -1000, 48456, -1000, -1000, -1000, -1000, 1068, -1000,
	20275, -1000, -1000, -1000, 12435, -1000, -1000, -1000, 48456, -194,
	20275, 3282, 3282, 20275, 21484, 21484, -1000, 3282, -1000, -1000,
	-1000, -1000, -1000, 1839, 465, 20275, 56387, 4399, 4349, -63,
	4518, 20275, -4, -1000, 20275, -1000, 53803, -1000, -1000, 448,
	2063, -1000, 20275, 55168, 8463, 327, 13255, -1000, 55007, -54,
	-54, -1000, 2498, 1591, 1187, 1147, 1051, 2460, -1000, 26452,
	709, 1248, 53667, 6875, 56387, 20275, 20275, 20275, -1000, -1000,
	2454, -1000, 20275, -1000, -1000, -1000, -1000, -1000, 1838, 20275,
	-1000, 6875, 56387, 21484, 21484, 21484, 21484, 21484, 21484, 21484,
	21484, 21484, 21484, 21484, 21484, 21484, 21484, 21484, 21484, 21484,
	21484, 21484, 1606, 21484, 2470, 2470, 2470, -6, 20275, -1000,
	1808, 1838, 20275, 20275, -1000, -1000, -1000, 56387, 326, 325,
	321, -1000, 20275, -115, 4239, -1000, 1773, -1000, -155, -1000,
	1744, -1000, -1000, 1773, 1773, -65, 55898, -1000, 1583, -1000,
	464, 20275, 24168, -1000, 574, -1000, -74, -1000, 36332, -1000,
	573, -234, -1000, 618, -1000, 625, 320, -1000, -1000, -1000,
	221, 386, -1000, 36332, -1000, 10015, -1000, -1000, 854, 851,
	-1000, 2075, -1000, 1524, -1000, 749, -1000, 1103, 20275, 23028,
	460, 459, 1227, -1000, 2051, 1401, 2048, 1401, -1000, -1000,
	653, -1000, 55898, 457, 456, -1000, -7, 1110, -1000, 25698,
	20275, -1000, 845, -1000, -1000, -1000, 1824, 844, -1000, -1000,
	1203, 25698, -1000, -1000, -1000, 25698, 20275, -1000, -8, 840,
	25698, 2015, 686, 1827, 960, -1000, -1000, -1000, -1000, -1000,
	-1000, 1712, 32550, 48456, 447, 48456, 443, -1000, -1000, 432,
	48456, 623, 1824, -1000, 696, -1000, -1000, 755, 10015, 431,
	10015, 1629, 610, 29920, -1000, 696, 1714, 55898, -1000, 1085,
	12031, 2247, -91, -1000, 220, -1000, -1000, -1000, 703, 26072,
	24168, 20275, 2508, -98, -1000, -1000, -1000, -1000, -1000, -58,
	1259, 2228, 2228, -1000, 2458, -1000, 571, 319, 2454, 318,
	-1000, -9, 430, -1000, 617, 615, -58, 48456, -1000, 1251,
	10015, 48456, 48456, 10015, 48456, -1000, -1000, -13, -1000, -1000,
	-1000, -1000, 48456, -1000, -1000, -1000, 1276, 53506, -1000, 2245,
	10015, 2464, 3282, 3906, 446, 20275, 56387, 3819, -99, 20275,
	20275, -1000, 301, 20275, 569, 55898, -1000, -1000, -1000, 55898,
	20275, 219, -1000, 2496, 20275, 299, 294, 293, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 286, -1000, -1000, 51448,
	-1000, 20275, 285, -1000, 282, 280, 5181, 53370, 53209, 279,
	55898, 1808, 55898, -1000, -1000, 702, 702, 989, 989, 989,
	989, 2470, 1307, 322, 692, 316, 316, 316, 347, 458,
	458, 316, 316, 316, 1821, 1637, 422, 5317, 20275, 273,
	-1000, -1000, 55898, 55898, 271, -1000, -1000, -1000, -115, 269,
	1756, 2337, -1000, 24168, 1756, 1756, -1000, -1000, 48456, 55898,
	-1000, -206, -1000, 2454, -1000, -1000, 1630, -1000, 7682, 36332,
	625, 10015, -1000, -1000, 182, 48456, 48456, 48456, 2037, -1000,
	3071, -1000, 53073, -100, -1000, 2310, 2310, 20275, 195, -1000,
	-1000, 421, 23028, 48456, -1000, 1635, 1753, 774, 48456, -1000,
	48456, -1000, -1000, 48456, 48456, 48456, 48456, 48456, -1000, 419,
	-105, 48456, 48456, 29546, -1000, -1000, -113, 10015, -1000, 2249,
	-1000, 29546, 930, 1213, 1736, -1000, 418, 23028, 413, 48456,
	32550, 2375, -1000, 686, -1000, -1000, 411, 1791, 1362, 23028,
	1352, 1640, 610, 29920, -1000, 853, 1085, -1000, -1000, -14,
	-1000, 455, 79, 48456, 2507, 1248, -1000, -19, 55898, -1000,
	611, -1000, 2208, -1000, 2206, 529, -1000, -1000, 262, -1000,
	36706, 36706, 29546, 29546, -58, 1545, -1000, -1000, 1214, 1333,
	-1000, -1000, -1000, -1000, -1000, 2245, 20275, 20275, 3819, -116,
	-1000, 3282, 3282, -1000, 52912, -1000, 55898, 8075, -1000, 55007,
	-1000, -1000, -1000, -1000, 1215, -1000, 52776, -1000, -1000, -1000,
	20275, -1000, -1000, -1000, -1000, 21484, 1816, 410, 56387, 52615,
	-1000, -1000, -1000, 707, 20275, 20275, 1744, 707, 707, -118,
	625, -1000, -1000, -1000, 2454, -1000, 36332, 182, 10015, -1000,
	-1000, -1000, 48456, -1000, 48456, -1000, 10015, 48456, 1797, 1476,
	-1000, -1000, 1647, 409, 21484, 48456, 691, -1000, 1252, 23028,
	2245, 10015, 2245, 52479, 10405, -125, -127, 1471, -1000, 1465,
	20275, -1000, 56387, 1401, 1401, -132, -133, -1000, 838, 828,
	20275, 818, -1000, -1000, -1000, 817, -1000, 630, -70, 25698,
	-1000, -1000, 1219, 23028, -135, 23028, -138, 261, 79, -1000,
	23028, -1000, 48456, -141, 48456, -1000, 610, 29920, -1000, 2078,
	-1000, 2138, 48456, 2241, -1000, -1000, -1000, 1714, 405, 404,
	403, -1000, -1000, -1000, -143, -1000, -1000, -85, -1000, 663,
	656, -1000, -1000, -1000, 10015, 951, -1000, 3282, 3282, -1000,
	-1000, -1000, -1000, 258, 1248, 2332, -1000, 52318, 3111, 21484,
	56387, -144, -1000, -1000, 48456, 55898, -115, -1000, -1000, -1000,
	36332, 445, -1000, -1000, 2129, -1000, -1000, -1000, 48456, 1484,
	-1000, -1000, 20275, 5317, 402, 20275, -1000, 1712, 401, -1000,
	-1000, -1000, -1000, -1000, -1000, 2310, -49, -1000, 1151, -1000,
	-1000, 55898, 2307, -1000, -1000, 398, 397, 48456, 48456, -54,
	396, 395, 25698, -1000, 48456, -146, 1252, -149, -1000, 1712,
	-1000, -152, 755, -1000, 393, 29920, -1000, 1629, 911, -154,
	48456, 1085, -1000, 29546, 29546, -1000, 1545, -1000, 48456, -1000,
	48456, -1000, 48456, -1000, 1123, 20275, -1000, 3111, -157, -1000,
	-112, -1000, 2370, -1000, -1000, -1000, -1000, 2029, 52182, 1582,
	48456, 51868, 1213, 48456, 2245, 257, 48456, 752, 10015, 1214,
	1214, -1000, -1000, 255, 20275, 20275, -1000, 389, -1000, 1712,
	1252, 1213, 1252, 388, 23028, -1000, 1640, 1013, -1000, 703,
	-1000, -1000, -159, -162, -1000, -168, -169, -1000, 254, 21081,
	21081, -115, -1000, 48456, 387, 2002, -1000, 1279, 1207, 250,
	786, -1000, -170, -1000, -1000, 386, -1000, 20275, -1000, -175,
	-1000, 742, -177, -1000, 739, 2496, -183, -186, 48456, 1213,
	1712, -1000, 1712, 23028, -188, -1000, 26072, -1000, 686, 686,
	-1000, -1000, -1000, -1000, -1000, 21872, 1314, 1075, 54261, -1000,
	-1000, -1000, 48456, -1000, 1350, 1326, 1031, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1582, 55898, -1000, 1214, 1732, -1000,
	1214, 1807, -1000, -1000, -191, -1000, 1213, 1213, -196, -1000,
	-197, -1000, -1000, 2416, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2182, -1000, 767, 1550, 1550, 1279, -1000, 384, -1000,
	382, 1328, -1000, -1000, 1252, -1000, 20678, -1000, 2433, -1000,
	-1000, 1636, -1000, -1000, 20275, 20275, -1000, -1000, -1000, 1712,
	-1000, -1000, -1000, -1000, -199, -207, 1213, 1213, 816, -1000,
	-1000, 276, 20275, -226, 1213, -1000,
}
var sqlPgo = [...]int{

	0, 2988, 2987, 1974, 2986, 2305, 2985, 2982, 2979, 2977,
	2975, 2303, 2974, 2970, 2966, 2962, 2961, 2960, 2959, 2958,
	2956, 2955, 2953, 2952, 2949, 2947, 2939, 2930, 2928, 2926,
	2922, 2920, 2295, 2919, 2293, 2915, 2914, 2911, 2909, 2908,
	2906, 2902, 2900, 26, 2896, 2893, 2889, 2888, 2287, 2885,
	2884, 2280, 2878, 2867, 2267, 2865, 2864, 2863, 2263, 2244,
	2862, 2861, 2237, 2860, 2859, 2228, 2858, 2224, 2857, 2854,
	2204, 2853, 104, 121, 2202, 2850, 2849, 2176, 2168, 2138,
	2848, 2136, 2845, 2844, 2129, 2116, 2841, 123, 2840, 2834,
	2833, 2832, 2028, 1994, 2823, 2822, 2821, 168, 2820, 1983,
	2818, 2814, 2813, 2812, 2811, 2810, 2809, 2808, 2806, 2804,
	2801, 2799, 2797, 2796, 2794, 2790, 2789, 2786, 2785, 2782,
	2780, 2779, 2777, 2774, 2771, 2770, 180, 109, 2762, 2761,
	1955, 1949, 2759, 2755, 38, 44, 17, 58, 148, 184,
	4510, 179, 2753, 2751, 2750, 2749, 2748, 2747, 25, 119,
	122, 117, 115, 2745, 394, 2744, 2743, 55, 37, 28,
	21, 70, 2740, 2738, 2735, 2126, 78, 2734, 2733, 169,
	158, 2731, 205, 34, 85, 73, 84, 63, 46, 2728,
	100, 16, 2727, 166, 217, 2725, 66, 33, 22, 98,
	120, 48, 108, 194, 150, 157, 153, 114, 174, 2721,
	175, 54, 139, 2714, 2712, 2711, 51, 135, 3, 2,
	130, 10, 2710, 9, 2706, 11, 2705, 2702, 2701, 2696,
	29, 112, 99, 97, 2695, 110, 252, 140, 2694, 161,
	2693, 75, 170, 138, 1, 94, 2689, 81, 14, 77,
	2685, 2684, 90, 160, 2683, 50, 116, 80, 86, 181,
	145, 89, 149, 163, 2682, 2678, 2677, 154, 2676, 132,
	87, 2672, 2666, 79, 30, 2665, 49, 156, 41, 2663,
	2662, 113, 2658, 144, 2657, 2656, 183, 111, 129, 5,
	47, 76, 7, 159, 101, 53, 62, 2654, 3875, 1429,
	1276, 32, 2653, 88, 71, 39, 72, 105, 171, 35,
	2651, 2639, 162, 2634, 2633, 2628, 2627, 2622, 125, 2619,
	2616, 2613, 91, 56, 134, 2610, 103, 36, 176, 147,
	141, 178, 118, 2608, 128, 93, 142, 2607, 57, 2606,
	1130, 2605, 133, 2604, 2603, 2602, 2593, 705, 2589, 2587,
	2581, 899, 2580, 92, 2573, 131, 127, 137, 60, 102,
	167, 151, 567, 2572, 136, 24, 2570, 203, 23, 0,
	3549, 3798, 2568, 146, 83, 2567, 2566, 2565, 2562, 31,
	13, 6, 8, 12, 15, 106, 27, 107, 2561, 2560,
	69, 95, 2559, 182, 152, 2556, 2554, 2552, 43, 2551,
	20, 2550, 18, 2549, 2545, 19, 4, 2544, 2543, 172,
	2541, 2538, 2537, 2381, 2535, 173, 2534, 2533, 2532, 2038,
	2530, 2526, 42, 126,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	9, 9, 9, 31, 31, 11, 11, 10, 10, 10,
	12, 7, 7, 7, 7, 7, 7, 7, 14, 14,
	23, 23, 15, 25, 18, 405, 405, 27, 13, 21,
	19, 19, 28, 17, 17, 24, 24, 150, 150, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 404, 404, 152,
	152, 151, 147, 147, 154, 154, 154, 156, 156, 153,
	153, 146, 146, 32, 32, 85, 85, 85, 137, 78,
	78, 78, 357, 357, 358, 358, 133, 133, 134, 134,
	134, 134, 135, 135, 136, 136, 136, 46, 34, 34,
	34, 34, 34, 34, 34, 35, 35, 36, 36, 36,
	37, 37, 37, 44, 44, 127, 127, 47, 47, 47,
	47, 47, 47, 47, 47, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 58,
	58, 56, 59, 59, 60, 60, 60, 60, 60, 60,
	61, 61, 61, 61, 61, 61, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 68, 68, 68, 69,
	69, 69, 66, 66, 66, 64, 64, 64, 63, 63,
	63, 67, 67, 67, 65, 65, 65, 233, 233, 70,
	70, 70, 70, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 73,
	73, 73, 73, 73, 73, 73, 73, 327, 327, 71,
	71, 300, 300, 74, 74, 258, 258, 75, 75, 75,
	75, 75, 76, 76, 76, 76, 86, 86, 86, 86,
	403, 403, 227, 227, 169, 169, 169, 169, 81, 81,
	81, 81, 82, 82, 82, 83, 83, 132, 132, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 38,
	38, 38, 39, 39, 40, 40, 41, 41, 42, 42,
	43, 43, 43, 43, 43, 93, 93, 93, 95, 92,
	92, 92, 94, 94, 94, 94, 96, 96, 97, 97,
	97, 97, 97, 97, 98, 98, 351, 351, 236, 236,
	349, 349, 350, 350, 204, 204, 204, 204, 204, 205,
	205, 205, 356, 356, 356, 356, 356, 356, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 117,
	117, 117, 126, 126, 126, 126, 126, 126, 126, 119,
	119, 119, 110, 110, 100, 100, 106, 106, 106, 106,
	106, 101, 101, 107, 107, 109, 109, 111, 111, 111,
	111, 111, 111, 102, 102, 102, 102, 113, 113, 113,
	113, 112, 112, 122, 122, 122, 122, 122, 122, 122,
	315, 315, 118, 118, 118, 118, 121, 121, 121, 121,
	116, 116, 116, 120, 120, 123, 123, 123, 123, 103,
	103, 104, 104, 105, 105, 124, 124, 115, 115, 125,
	125, 125, 125, 125, 125, 125, 114, 114, 114, 406,
	406, 108, 401, 401, 399, 399, 399, 399, 399, 399,
	399, 400, 400, 402, 402, 79, 79, 52, 52, 53,
	53, 206, 206, 207, 207, 281, 281, 281, 281, 208,
	208, 155, 155, 155, 211, 212, 212, 209, 209, 210,
	210, 210, 214, 214, 213, 216, 216, 215, 280, 367,
	367, 368, 368, 368, 368, 368, 368, 368, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 365, 365,
	365, 366, 363, 363, 364, 364, 364, 364, 407, 407,
	279, 279, 220, 220, 370, 370, 370, 370, 371, 371,
	371, 371, 371, 374, 373, 372, 372, 372, 372, 372,
	311, 311, 311, 57, 57, 57, 247, 247, 246, 246,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 129, 129, 54, 54, 54, 161, 161,
	51, 51, 51, 55, 55, 50, 50, 50, 50, 50,
	264, 264, 262, 262, 225, 225, 317, 317, 317, 173,
	173, 148, 148, 148, 20, 22, 22, 16, 16, 16,
	16, 16, 16, 29, 29, 30, 30, 26, 26, 263,
	263, 265, 265, 80, 80, 84, 84, 90, 90, 128,
	128, 128, 128, 128, 128, 128, 33, 33, 33, 33,
	45, 45, 45, 45, 88, 410, 410, 410, 89, 89,
	409, 409, 168, 168, 168, 168, 170, 170, 276, 276,
	277, 277, 411, 411, 278, 278, 278, 163, 162, 164,
	164, 49, 49, 49, 157, 157, 158, 158, 159, 159,
	160, 160, 412, 412, 77, 77, 77, 131, 131, 200,
	200, 273, 273, 273, 221, 221, 178, 178, 275, 275,
	274, 274, 274, 245, 245, 245, 130, 130, 230, 230,
	238, 238, 239, 239, 323, 323, 240, 87, 87, 140,
	140, 138, 138, 138, 138, 138, 138, 139, 139, 139,
	141, 141, 141, 141, 141, 141, 141, 144, 144, 144,
	144, 145, 145, 145, 143, 143, 381, 381, 381, 383,
	383, 384, 380, 380, 382, 382, 408, 408, 249, 249,
	249, 218, 219, 217, 217, 223, 223, 222, 224, 224,
	316, 316, 316, 243, 243, 243, 243, 268, 268, 266,
	266, 267, 267, 269, 269, 270, 270, 270, 271, 271,
	272, 272, 242, 242, 296, 296, 142, 142, 142, 229,
	229, 229, 231, 231, 286, 286, 286, 287, 287, 285,
	285, 285, 285, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 397, 397, 397, 398,
	398, 314, 314, 319, 319, 319, 319, 319, 319, 312,
	312, 313, 313, 324, 325, 325, 252, 252, 252, 252,
	250, 250, 251, 251, 320, 320, 320, 320, 244, 244,
	321, 321, 321, 282, 282, 328, 328, 328, 343, 343,
	228, 228, 228, 338, 338, 329, 329, 329, 329, 329,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 332, 332, 332, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 342, 342, 342, 342, 342, 333, 333,
	339, 340, 334, 335, 341, 341, 341, 341, 345, 345,
	336, 336, 336, 336, 336, 336, 336, 337, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 260, 260, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 290, 290, 290, 290, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 375,
	375, 375, 375, 375, 375, 375, 375, 378, 378, 379,
	379, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 385, 385, 386, 386, 388, 388, 389,
	389, 390, 391, 391, 391, 392, 393, 393, 387, 387,
	394, 394, 394, 395, 395, 396, 396, 396, 396, 396,
	302, 302, 303, 304, 310, 310, 310, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 171, 171, 171, 171, 171, 235, 235,
	234, 234, 299, 299, 297, 297, 301, 301, 253, 253,
	344, 344, 344, 344, 344, 344, 344, 254, 254, 254,
	261, 255, 255, 256, 256, 256, 256, 256, 293, 294,
	257, 257, 257, 295, 295, 305, 309, 309, 308, 307,
	307, 306, 306, 283, 283, 284, 284, 241, 241, 413,
	413, 237, 237, 322, 322, 322, 322, 202, 202, 232,
	232, 201, 201, 195, 195, 196, 196, 196, 196, 226,
	226, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 346, 346, 346, 347, 348, 298, 188, 187,
	175, 176, 186, 185, 184, 174, 177, 181, 182, 183,
	179, 180, 191, 190, 189, 326, 197, 197, 198, 198,
	198, 199, 199, 199, 199, 172, 172, 192, 192, 193,
	194, 194, 165, 165, 165, 166, 166, 167, 167, 355,
	355, 353, 353, 353, 354, 354, 354, 354, 352, 352,
	352, 352, 352, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 0, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 4, 6, 1, 3, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 6, 5, 1, 1, 5, 7, 7,
	7, 10, 7, 4, 12, 4, 12, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 3,
	3, 3, 6, 4, 3, 1, 3, 2, 1, 1,
	3, 1, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 2, 5, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 5, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 3, 5, 3,
	3, 5, 3, 6, 6, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 3, 1, 2, 1, 2, 1, 7,
	3, 8, 8, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 3, 5, 3, 1, 3, 2,
	2, 5, 3, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 3, 5,
	2, 3, 0, 3, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 3, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 6, 3, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 3, 1, 3,
	2, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 5,
	7, 3, 3, 3, 3, 3, 4, 4, 3, 4,
	4, 4, 3, 2, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 5, 4, 6, 4, 5, 6, 5,
	1, 0, 2, 3, 3, 3, 6, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 2, 3, 2, 3, 7,
	7, 8, 10, 7, 4, 5, 5, 5, 3, 1,
	1, 5, 2, 0, 1, 1, 1, 1, 3, 2,
	2, 2, 1, 2, 0, 3, 2, 8, 11, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 2, 1, 0, 1, 0, 9,
	9, 3, 1, 3, 7, 1, 3, 11, 3, 2,
	0, 3, 1, 2, 2, 3, 2, 6, 2, 1,
	1, 2, 4, 2, 5, 5, 5, 2, 8, 9,
	6, 5, 3, 1, 4, 7, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 7, 3, 1, 0, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 2, 2, 2,
	2, 2, 3, 4, 2, 4, 7, 3, 3, 0,
	3, 6, 3, 6, 3, 13, 16, 9, 12, 4,
	2, 0, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 1, 3, 1, 3, 8, 5,
	4, 3, 0, 2, 2, 0, 10, 3, 2, 0,
	1, 3, 1, 1, 3, 3, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 7, 3, 4, 3,
	4, 3, 4, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 3,
	2, 1, 0, 5, 1, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	5, 2, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 6, 6, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 5, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 417, -4, -32, -34, -46, -44,
	-47, -75, -59, -60, -61, -74, -70, -76, -77, -78,
	-79, -71, -85, -84, -86, -90, -38, -87, -80, -81,
	-91, -99, -128, -129, -130, -131, -5, -11, 25, 36,
	-35, -36, -37, 50, 76, 64, -54, -51, -48, -58,
	78, 99, -382, 103, -62, -65, -67, 107, 116, 121,
	144, 153, 253, 260, 281, 283, 285, 294, -40, -39,
	117, -138, -140, 279, -82, -83, -92, -93, -94, -95,
	-132, 312, -100, -101, -102, -103, -104, -105, -106, -107,
	-108, -109, -110, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, 315, -33,
	-45, -89, -88, 359, -6, -7, -8, -9, -10, -12,
	-22, -49, -50, -52, -53, -55, -57, -56, -381, -63,
	-64, -66, -68, -69, -141, -139, 414, 280, 368, 37,
	324, 65, 111, 289, 20, -14, -18, -15, -17, -19,
	-16, -23, -27, -25, -24, -26, -28, -29, -30, -31,
	-20, -21, -13, 385, 393, -144, -142, -143, -145, 301,
	376, 337, 418, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 2, 337, 379, 302, 369, 92, 164,
	265, 251, -399, 2, 4, -361, -359, -196, -195, 337,
	92, 30, 38, 39, 41, 44, 54, 55, 56, 59,
	96, 97, 114, 122, 123, 133, 146, 148, 156, 157,
	171, 177, 179, 199, 228, 230, 243, 247, 257, 259,
	267, 291, 318, 333, 349, 350, 356, 357, 376, 377,
	381, 388, 20, 21, 22, 23, 25, 35, 36, 37,
	40, 42, 43, 46, 47, 48, 49, 50, 51, 58,
	63, 64, 65, 66, 67, 72, 69, 70, 71, 74,
	76, 77, 80, 81, 82, 90, 91, 93, 94, 95,
	99, 101, 103, 106, 107, 109, 110, 116, 117, 120,
	115, 118, 343, 345, 119, 121, 131, 132, 134, 135,
	137, 139, 143, 145, 150, 151, 152, 153, 154, 155,
	165, 160, 166, 170, 173, 172, 174, 175, 176, 167,
	181, 184, 185, 186, 188, 189, 192, 193, 194, 197,
	196, 201, 202, 205, 206, 209, 211, 214, 215, 218,
	216, 217, 220, 221, 223, 222, 229, 231, 232, 234,
	235, 238, 239, 242, 245, 248, 249, 250, 251, 252,
	253, 254, 256, 258, 260, 262, 263, 264, 265, 266,
	268, 269, 271, 272, 273, 274, 275, 279, 277, 278,
	280, 281, 282, 283, 285, 287, 288, 289, 290, 292,
	313, 314, 326, 294, 295, 296, 297, 298, 299, 300,
	304, 308, 305, 306, 307, 302, 303, 309, 310, 312,
	315, 317, 319, 320, 323, 324, 325, 327, 330, 332,
	328, 329, 322, 335, 336, 338, 339, 340, 341, 342,
	344, 346, 347, 351, 354, 355, 359, 360, 361, 362,
	365, 366, 367, 372, 368, 370, 373, 374, 375, 380,
	386, 387, 389, 390, 391, -194, -165, 407, -193, 417,
	417, 417, 2, 185, 264, 309, -189, -192, -193, -194,
	-165, 4, -359, -361, 92, 236, 417, 417, 417, 2,
	337, 325, 115, 302, 369, 287, 379, -262, 181, 92,
	364, -165, 260, 24, 2, 101, 170, 367, 366, 24,
	256, 303, 339, 341, 2, 417, 417, 2, 379, 302,
	337, 164, 92, 369, 287, -183, 2, -165, -73, 2,
	414, -72, -5, -48, -58, -62, -74, -70, -11, -32,
	-34, -54, -51, -59, -65, -67, -78, -77, -79, -81,
	-85, -84, -87, -92, -93, -99, -130, -131, 78, 25,
	107, 312, 117, -403, -227, 2, 24, -169, -165, 78,
	144, 301, 337, 2, 185, 2, -183, 2, -399, 2,
	185, 2, -403, -227, 23, 2, -165, 2, 298, 315,
	-170, 2, 294, -165, 417, 417, 417, 417, 417, 417,
	206, 58, 291, 309, -97, 355, -96, 349, 296, -98,
	-351, 2, 218, -165, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 2, -126,
	309, 325, 151, 36, 58, 24, 63, 93, 145, 164,
	165, 193, 73, 74, 263, 206, 186, -315, 119, 310,
	338, 297, 335, 355, 78, 370, 288, -406, 118, 4,
	92, 218, 311, 349, 67, 342, 343, 417, 417, 417,
	-408, 2, 337, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, -139, -141, -140, 417, 417, 417,
	417, 417, -222, -223, 363, 178, 113, 241, -138, -140,
	2, -381, -126, 309, 2, 58, 24, -349, 2, -288,
	236, -290, 405, 406, 400, 224, 392, -302, 98, 213,
	212, -292, -305, 114, 291, 414, -199, -291, 420, 9,
	-378, -140, 31, -303, -304, 52, -197, -165, 7, 8,
	5, 6, -172, -330, -298, -337, 358, 124, 227, -375,
	-376, -198, 4, -359, -353, -331, -340, -335, -336, -338,
	42, 48, 47, 346, 217, 304, 305, 306, 307, 319,
	372, 160, 40, 234, 235, 172, 179, 61, 84, 85,
	83, 88, 89, 86, 311, 369, 53, 30, 156, 228,
	157, 59, -377, 43, 94, 106, 134, 135, 173, 174,
	175, 176, 188, 189, 329, 351, 39, 41, 44, 54,
	55, 96, 97, 122, 123, 133, 146, 171, 177, 199,
	230, 247, 257, 267, 318, 333, 349, 350, 356, 357,
	377, -360, -341, 79, 125, 142, 169, 158, 182, 183,
	187, 200, 203, 219, 226, 244, 246, 286, 316, -409,
	2, 355, 355, 2, -409, 2, -409, 2, -168, 2,
	355, 352, -410, 355, 388, -383, 268, -384, -183, -383,
	417, 417, 419, 417, -217, -218, -219, 2, 24, 104,
	414, 2, -318, 2, 412, -320, -172, 195, -377, -140,
	-319, 414, -189, 237, -198, 84, 85, 88, 89, 4,
	-165, 61, 213, 212, -3, 2, -320, 156, -189, 2,
	-320, 156, 2, -190, 156, -320, -192, 2, -357, 156,
	-355, 9, -354, 5, 4, -359, -361, -360, 2, -174,
	-165, 2, -201, 156, -189, -186, -352, 4, -359, -361,
	-360, -362, 24, 26, 27, 28, 29, 31, 32, 33,
	34, 45, 52, 53, 57, 60, 62, 73, 78, 83,
	84, 86, 85, 87, 88, 89, 98, 100, 102, 104,
	105, 108, 111, 113, 124, 126, 138, 140, 141, 144,
	147, 149, 159, 164, 168, 178, 180, 195, 198, 204,
	207, 208, 224, 225, 227, 233, 236, 237, 240, 241,
	255, 261, 270, 284, 301, 311, 321, 331, 334, 337,
	348, 352, 353, 358, 363, 364, 369, 371, 378, 379,
	382, 383, 384, 385, -187, -352, 352, 419, -232, -195,
	-196, -226, -165, 416, -288, 2, -288, 156, 2, -288,
	156, 2, -220, 414, 416, 337, 62, 2, -189, 156,
	-179, 2, -165, 109, -190, 156, 2, -192, -357, 156,
	2, -357, 156, 2, -191, 2, -189, 164, 164, -174,
	156, 2, -165, 24, 141, 2, 180, 2, 180, 2,
	-321, 2, -320, -233, 156, 2, -189, -233, 156, 2,
	-233, 156, 2, -202, 156, 2, -201, -174, 156, 2,
	-358, 156, 2, -357, -358, 156, 2, -258, 414, -327,
	2, -326, -354, 376, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 309, 236, 352, 419, -189, -288, -300, 414, 141,
	-288, 236, 141, 238, 2, 92, 337, 391, 24, -165,
	2, 313, 2, 414, -97, 56, 355, -277, 2, -278,
	-162, -163, -164, 184, 262, 266, 391, -349, 352, 397,
	141, -349, -236, 416, -126, 2, 138, 371, 2, 7,
	2, -357, 2, 313, 2, 263, 310, 58, 141, 2,
	2, -401, 2, 236, 141, 2, 141, 2, 141, 2,
	141, 2, 141, 2, 2, 263, 310, 2, 354, 194,
	354, 2, 141, 2, 141, 2, 5, 2, 184, 262,
	326, 2, 337, 379, 302, 2, 2, 141, 2, 141,
	391, 2, -244, -320, -222, -223, -243, -266, -267, 204,
	126, 233, -249, 24, 104, -249, -249, 46, 415, 415,
	-126, 313, 2, 10, 11, 60, 35, 405, 406, 407,
	408, 136, 409, 410, 403, 404, 402, 395, 396, 399,
	190, 191, 75, 398, 397, 68, 210, 293, 127, 128,
	129, 130, 276, 161, 162, 163, 13, 14, 15, 28,
	240, 203, 392, 158, 316, 400, 16, 17, 18, 182,
	183, 226, 38, 159, -171, -203, -288, -288, -288, -288,
	-288, 246, -241, -283, 412, -140, 414, 414, -140, -288,
	-234, 414, -348, 7, -140, -297, 412, -306, -288, 416,
	414, 5, 414, 5, -385, 386, 138, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 259, -345, 380,
	-345, -345, -332, 414, -332, 414, 414, -333, 414, 414,
	414, -332, 414, 414, 414, 387, 387, 393, 414, 414,
	-276, -277, -276, 352, -170, 419, -383, -220, 414, -237,
	-322, -288, 407, -237, -237, 236, -234, -288, 79, -252,
	187, 219, 142, 200, 286, 169, -348, -73, -285, 420,
	414, -172, -377, -140, -165, -314, 393, -314, -140, -319,
	414, -318, 407, -189, 414, 416, -150, 277, -149, 22,
	25, 107, 374, 120, -210, 166, 251, 114, 322, -405,
	117, 295, 344, 345, 277, 114, -246, -248, 32, 90,
	221, 248, 49, 154, 212, 213, 324, 114, 277, 385,
	114, 117, 277, -152, 322, -405, 117, 295, 277, -151,
	-210, 114, 420, 117, 231, -357, -232, 419, 419, -352,
	407, 114, 114, 141, -226, -352, -189, -197, -165, -198,
	414, -220, 224, 236, -399, -247, -246, 224, -161, -380,
	385, 224, 224, -220, -176, 156, 2, -166, -165, -176,
	156, -380, 224, -321, -200, -189, -200, 312, -183, 32,
	-154, 419, 51, 282, 114, -154, 114, -154, 114, -154,
	419, 114, -154, 114, 419, 114, 114, -234, 415, 419,
	-399, -226, -169, 78, 414, 32, -299, -328, -329, -330,
	-339, -334, -337, 42, 48, 47, 346, 217, 304, 305,
	306, 307, 319, 372, 160, 40, 234, 235, 172, 4,
	41, -341, 179, 171, 173, 174, 175, 176, 177, 318,
	39, 267, 134, 135, 133, 106, 97, 96, 230, 44,
	43, 94, 349, 350, 351, 188, 189, 55, 54, 377,
	329, -358, -399, -226, 138, -174, 2, -189, 2, 69,
	70, 391, -351, -234, 32, -277, 2, -411, 419, 202,
	-205, 209, 223, 150, 237, 389, -356, 5, 4, -298,
	-311, 98, 206, -337, 8, 406, -346, 7, 405, -350,
	-349, -350, 82, 416, -352, 337, 188, -351, 24, 314,
	2, -189, -402, 138, -400, 287, -399, -189, -189, -189,
	-189, -189, 138, 2, 354, 2, 138, -165, -165, 202,
	-189, 2, -191, 2, -190, 2, 337, 164, 337, -154,
	419, -243, -267, -266, -269, -288, 24, -272, 132, 220,
	-288, -290, -139, -139, -139, -224, -316, -288, 261, 164,
	-351, -343, -328, -342, 272, 273, 271, 275, 274, -328,
	-188, -352, 349, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, 203, 158,
	316, 38, 159, -288, 352, -288, -288, -288, -288, 216,
	224, 227, 358, 124, 365, 104, 231, -413, 334, 34,
	-295, -140, 414, -310, 29, 321, 24, -302, 291, 414,
	-283, -288, -284, -235, -234, 415, 419, -235, -301, -297,
	-309, -308, 382, -352, 407, 415, -234, 378, 24, 104,
	407, 2, 7, -259, 390, 215, 95, 152, 214, -260,
	300, -386, 131, 147, 414, 415, 2, 415, 2, 415,
	2, 415, 2, -288, -288, -288, -288, -288, -234, -348,
	-253, 2, -344, -234, 4, 390, 215, 95, 152, 214,
	300, -253, 2, 7, -234, 2, -234, 2, -254, 2,
	-288, -234, -255, -289, -290, 405, 406, 400, 414, 291,
	-256, 2, -288, -235, 349, 349, 349, -288, 45, 198,
	353, -257, -288, 141, -234, -170, -384, 32, -234, -229,
	419, 141, 32, 4, -229, -229, 414, 415, 419, 187,
	187, -318, -252, 187, -250, 244, -250, -250, -397, 414,
	413, -314, -175, 412, 421, -352, -235, 2, 414, -314,
	-314, 416, -313, -312, 32, -183, 242, -313, 415, -189,
	-352, 419, 352, -263, 73, 62, -280, 156, 62, -363,
	-177, 73, -364, -165, 57, 364, 261, 140, -263, 73,
	-263, 73, 73, 312, 325, 46, -320, 35, -87, 71,
	141, 352, -320, -248, -328, 90, 212, 213, 46, -347,
	-346, 406, -347, 46, -347, -347, -347, 385, -190, -320,
	352, 252, -357, 71, 352, 419, 35, -87, 71, 141,
	352, -201, -175, 71, 337, -325, -324, 394, -195, -165,
	416, -288, -288, 327, 415, 416, 182, 182, -206, -207,
	-165, -281, -280, -365, -366, -363, 181, 164, 364, 125,
	32, 114, -226, 352, 114, 252, 114, 114, 32, 236,
	224, 236, 224, -157, 340, 114, -282, 383, -273, -87,
	414, 98, 32, -273, -238, -239, -323, -240, -177, 414,
	-183, -189, -233, -233, -233, -201, -202, -174, -357, -358,
	-358, 415, -73, -326, 352, 385, 371, -207, -72, 25,
	78, 107, 415, 419, -228, 31, 412, -259, 414, -345,
	414, -136, -324, 385, 141, -227, -325, -325, 138, 70,
	397, 352, 415, 355, -278, -204, 266, 320, 278, 308,
	8, 7, 7, 419, -352, -189, 138, -226, -226, 309,
	-73, 138, -73, 416, -189, -201, -189, -320, -270, -346,
	414, -271, 291, 292, 419, -148, 33, 102, 192, -189,
	391, -288, -288, 352, -413, 334, -295, -288, 216, 227,
	358, 124, 365, 104, 231, 141, 414, -289, -289, -234,
	-288, 414, -234, 413, 423, 415, -288, 413, 413, 419,
	-307, -308, 108, -288, 416, -223, 419, -222, -288, -234,
	-234, 415, 415, 352, 352, 352, 352, 414, -391, 245,
	414, 414, -288, 32, 419, 419, 419, 419, 415, 415,
	419, 415, 141, 415, 415, 415, 415, 415, -261, 255,
	415, 10, 11, 405, 406, 407, 408, 136, 409, 410,
	403, 404, 402, 395, 396, 397, 68, 210, 293, 13,
	14, 15, 182, 159, -289, -289, -289, -234, 414, 415,
	-293, -294, 141, 138, 391, 391, 391, 32, -257, -257,
	-257, 415, 141, -234, 414, 415, -282, -322, -231, 2,
	-318, -185, -352, -282, -282, -234, -288, -318, -318, -251,
	371, 236, 187, -318, -312, 415, -398, -348, -314, -313,
	-348, -287, -286, 139, 222, 415, -235, 2, -313, -313,
	-352, -183, -220, -314, 415, 416, -149, -189, -177, -184,
	-165, 224, -280, 156, -156, 224, -328, -184, 414, 414,
	192, 192, -177, -184, 156, -177, 156, -184, -184, -404,
	266, 232, -288, 205, 265, 225, -150, 277, -87, 391,
	414, -191, 277, -197, -347, -347, -246, 277, -190, -357,
	385, 391, -174, -151, -87, 391, 414, -175, -152, 277,
	391, -189, -133, 155, 231, 407, -352, -127, 5, 227,
	-127, 415, 419, 164, -176, 164, -182, -166, -87, -189,
	141, 4, -190, -357, -357, -357, -87, -189, 114, -189,
	114, -158, 110, -412, 397, -174, -223, -288, -245, -275,
	284, 236, -221, -178, -177, 376, -183, -245, -230, 419,
	141, 397, 416, -221, -154, -154, -154, -154, -154, -226,
	23, -357, 415, -328, 412, 413, 7, 7, 414, -348,
	-136, -135, 239, -134, -165, 5, -226, 141, -41, 385,
	265, 92, 337, 251, 164, -349, -349, -277, 362, 66,
	266, -349, 337, 309, -73, -165, -271, -288, -316, -189,
	420, -288, -288, -289, -289, 141, 414, -288, -299, 28,
	28, 415, -235, 419, -284, -288, 415, -297, 111, -288,
	348, -352, 407, 415, 378, -223, -223, -223, 5, 215,
	152, 214, -260, 214, -260, -260, 7, -392, -180, 414,
	-165, 383, -222, 415, -343, -328, -288, -288, -288, -348,
	-288, -293, -288, -343, -328, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, 104, 224, 231, -289, 419, -235,
	-294, -293, -288, -288, -328, 415, 415, 415, -234, -72,
	-242, 147, -325, 419, -242, -242, 415, -251, 414, -288,
	-318, 413, 415, 419, -313, 413, 419, 422, 397, -314,
	415, 416, -220, -312, -352, 352, 352, 114, 224, 373,
	-367, -364, -288, -225, -317, -177, -379, 414, -165, -375,
	-376, -172, 414, 414, -147, 107, 312, -265, 114, -154,
	114, -154, 389, 414, 414, 352, -263, 73, -291, -172,
	-234, 352, 352, 252, -291, -291, -234, 352, -291, 117,
	-136, 141, 336, -208, 167, -281, -166, 414, -176, 414,
	414, -220, -189, -325, -247, -161, -264, 371, -175, 414,
	-175, -159, 197, -412, -355, -380, -268, -266, -245, -237,
	225, 72, 415, 419, 416, -282, -239, -231, -288, 2,
	415, 238, -137, 80, -137, 7, 413, 415, -348, 415,
	419, 414, 397, 397, -226, 239, -186, -174, -189, -187,
	-201, -189, 237, 415, -148, -175, 28, 28, -288, -299,
	415, -288, -288, 415, -288, 413, -288, 416, 5, -288,
	415, 415, 415, 415, -393, -165, -288, 415, 415, 415,
	419, 415, 415, 415, -294, 141, 104, 231, 414, -288,
	415, 415, 415, -296, 149, 46, -318, -296, -296, -226,
	-285, -348, -286, -175, 412, -313, -314, -352, 416, -177,
	-184, -280, 114, -368, 73, -369, 60, 125, 78, 224,
	227, 364, 261, 57, 98, 270, 32, 415, 415, 419,
	-173, 60, -173, -288, 414, -225, -226, 224, 98, 224,
	98, 91, 360, -177, -184, -226, -226, -189, -177, -184,
	414, 415, -191, -190, -357, 415, -175, 71, -358, 349,
	-209, -210, 159, 414, -225, 414, -226, -206, 32, -136,
	414, 143, 236, -225, 236, -160, 196, -412, -355, -157,
	-245, -274, 414, 236, -87, -178, 2, -223, 397, 91,
	91, 413, 415, -134, -135, -357, -357, -42, -43, 164,
	73, 254, -212, -211, 251, 231, -148, -288, -288, 415,
	415, -352, 407, -223, -387, 251, 415, -288, -289, 141,
	414, -299, 415, -388, 384, -288, -234, -388, -388, 415,
	-314, -348, -313, -280, -184, -188, -181, -165, 125, 156,
	227, 192, 414, -289, -189, 414, 2, -279, -407, 77,
	332, -317, -148, -188, -148, 415, -234, 415, 415, 227,
	227, -288, -328, -154, -154, 415, 415, 352, 352, -234,
	352, 352, 391, -291, 249, -225, 415, -225, 415, 415,
	-87, -225, -189, 415, -189, -412, -355, -158, 105, -226,
	73, -268, -295, 414, 414, 415, 419, 24, 414, 24,
	414, -187, 337, 415, -223, 46, 415, -289, -299, 415,
	-389, -390, -180, -313, 413, -369, -181, 224, -288, -167,
	414, -288, -208, 414, -173, -223, 270, -153, 60, 414,
	414, -177, -184, -223, 414, 414, -291, -189, 415, -279,
	415, -208, 415, -264, 414, -355, -159, 366, 225, 415,
	-184, -245, -358, -358, -43, -226, -226, -189, -394, 265,
	292, -234, 415, 419, 32, 114, 415, -370, 211, -165,
	415, -209, -226, -148, 415, -189, -146, 371, -188, -214,
	-213, -211, -216, -215, -211, 415, -234, -234, 414, -208,
	-279, -209, -279, 414, -225, -160, 312, -282, 415, 415,
	415, 415, 415, -395, -396, 38, 361, 82, -288, -395,
	-390, -392, 125, -371, -374, -373, 236, 142, 250, 317,
	415, 331, 381, 415, -220, -288, 415, 419, 376, 415,
	419, 376, 415, 415, -226, -209, -208, -208, -225, 415,
	-238, -136, -136, -396, 258, 137, 291, 258, 137, -181,
	-373, 236, -374, 236, 366, 101, -370, -213, 159, -215,
	141, 415, -209, -209, 415, -282, 28, -372, 221, 282,
	51, 312, -372, -371, 414, 414, -155, 51, 282, -279,
	-396, 21, 227, 98, -234, -234, -208, 415, 415, -209,
	-209, 352, 414, -234, 415, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 43, 45,
	46, 47, 48, 49, 51, 53, 56, 57, 0, 0,
	178, 180, 182, 0, 0, 0, 197, 199, 201, 202,
	-2, 0, 0, 0, 230, 231, 233, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 369, 370,
	0, 837, -2, 0, 348, 350, 359, 361, 363, 365,
	366, 0, 428, 430, 432, 434, 436, 438, 440, 442,
	444, 445, 447, 449, 451, 453, 455, 457, 459, 461,
	463, 465, 467, 469, 471, 473, 475, 477, -2, 749,
	751, 753, 755, -2, 60, 62, 64, 66, 68, 70,
	85, 205, 207, 209, 211, 214, 216, 218, 874, 236,
	238, 240, 242, 244, -2, 886, 0, 0, 0, -2,
	0, -2, -2, -2, 767, 71, 72, 73, 74, 75,
	76, 91, 92, 93, 94, 95, 96, 78, 80, 81,
	87, 88, 90, 0, 0, 850, 852, 854, 856, -2,
	0, 0, -2, 7, 13, 15, 17, 20, 22, 24,
	26, 28, 30, 32, 34, 36, 38, 40, 44, 50,
	52, 54, 58, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, -2, -2, -2, -2, 0, 0,
	1498, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685,
	1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
	1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
	1716, 1717, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1499, 1500, 1501,
	1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
	1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521,
	1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531,
	1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541,
	1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571,
	1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581,
	1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
	1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601,
	1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
	1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
	1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631,
	1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641,
	1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651,
	1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661,
	1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671,
	1672, 1673, 1674, 1675, 1676, 1385, 1439, 1388, 1383, 179,
	181, 183, 184, 0, 0, 0, 653, 1424, 1437, 1438,
	1439, 1442, 1443, 1444, 1498, 0, 198, 200, 203, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	712, 327, 1586, 329, 331, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 229, 232, 234, 235, 0, 0,
	0, 0, 0, 0, 0, 326, 324, 1419, 269, 270,
	0, 309, 310, 311, 312, 313, 314, 316, 273, 275,
	277, 278, 280, 282, 284, 286, 288, 290, 292, 294,
	295, 297, 299, 300, 302, 304, 305, 307, 713, 0,
	0, 0, 0, 0, 341, 335, 340, 342, 344, 345,
	346, 347, 0, 161, 0, 586, 322, 320, 0, 157,
	0, 746, 0, 341, 1466, 339, 747, 748, 0, 0,
	743, 744, 1615, 777, 349, 351, 360, 362, 364, 367,
	-2, -2, 1707, -2, 390, -2, 398, 1710, 1617, 401,
	0, 403, -2, 406, 429, 431, 433, 435, 437, 439,
	441, 443, 446, 448, 450, 452, 454, 456, 458, 460,
	462, 464, 466, 468, 470, 472, 474, 476, 478, 479,
	0, 0, 0, 0, 0, 483, 0, -2, -2, 0,
	0, 0, 0, 0, -2, 0, -2, 0, 0, -2,
	-2, -2, 0, 0, 0, -2, -2, 0, 0, 482,
	484, 485, 486, 0, 530, 569, 570, 750, 752, 754,
	0, 694, 876, 61, 63, 65, 67, 69, 206, 208,
	210, 212, 215, 217, -2, 848, 849, 237, 239, 241,
	243, 245, -2, 0, 880, 880, 880, 0, 0, 849,
	847, 0, 352, 0, 354, 0, 483, 357, 358, 410,
	411, 1084, 0, 0, 0, 0, 0, 0, 1162, -2,
	-2, 1194, 1196, 1688, 1707, 0, 1198, 1199, 0, 1201,
	1203, 1204, 0, 1207, 1208, 1362, 1431, 1426, 1391, 1392,
	1393, 1394, 0, 0, 1397, 0, 1399, 1400, 1401, 1264,
	1218, -2, -2, -2, 1435, 1000, 1001, 1002, 1003, 1004,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1718, 1222, 1223,
	1224, 1225, 1226, 1227, 1228, 1229, 0, 1677, 1694, 1700,
	1695, 1685, 1236, -2, -2, 1505, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1689, 1690, -2, 1692, -2, -2, 1699,
	-2, 1703, 1704, -2, -2, 1709, -2, -2, 1712, 1713,
	-2, 1453, 1053, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1726, 1727, 1728, 1731, 1732, 1733, 1734, 1735, 1736, 779,
	757, 770, 779, 759, 760, 761, 762, 763, 768, 769,
	772, 0, 764, 765, 766, 866, 1592, 869, 653, 867,
	851, 853, 0, 855, 0, 0, 0, 860, 883, 881,
	0, 917, 864, 865, 875, 932, 0, 0, 952, 952,
	943, 0, 974, 0, 1436, 0, 0, 0, 0, -2,
	1439, 1718, 1729, 1730, 2, 77, 0, 1694, 974, 79,
	0, 1694, 82, 0, 1694, 0, -2, 86, 0, 1694,
	162, 163, 1449, 1450, 1454, 1455, 1456, 1457, 89, 0,
	1415, 97, 0, 1694, 1382, 0, 1412, 1458, 1459, 1460,
	1461, 1462, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 0, 1409, 0, 0, 579, 1379,
	1384, 580, 1389, 0, 185, 186, 187, 1694, 189, 190,
	1694, 192, 0, 0, 0, 0, 0, 213, 653, 1694,
	0, 220, 1420, 0, 677, 1694, 675, 1423, -2, 1694,
	697, 700, 1694, 702, 653, 704, 1422, -2, 1446, 873,
	1694, 793, 328, 330, 0, 223, 0, 806, 0, 808,
	0, 827, 980, 146, 1694, 248, 267, 146, 1694, 251,
	146, 1694, 254, 146, 1694, 257, 1377, 146, 1694, 260,
	261, 1694, 263, 164, 264, 1694, 266, 323, 0, 0,
	-2, 317, 1425, -2, 315, 274, 276, 279, 281, 283,
	285, 287, 289, 291, 293, 296, 298, 301, 303, 306,
	308, -2, 0, 0, 0, 0, 585, 0, 0, 0,
	745, 0, 0, 0, 371, 0, 0, 0, 0, 776,
	368, 0, 387, 0, 389, 1684, -2, -2, 393, 780,
	784, 785, 786, 0, 0, 0, 0, 400, 0, 0,
	0, 404, 407, 0, 480, 481, 0, 0, 491, 492,
	493, 494, 495, 0, 498, 519, 534, 0, 0, 502,
	504, 584, 506, 0, 0, 508, 0, 510, 0, 512,
	0, 514, 0, 516, 518, 520, 535, 522, 0, 0,
	0, 533, 0, 539, 0, 542, 543, 544, 0, 546,
	547, 548, 0, 0, 0, 556, 558, 0, 568, 0,
	487, 488, 146, 978, -2, 0, 843, 895, 896, 0,
	0, 0, 0, 878, 879, 0, 0, 0, 839, 840,
	353, 0, 356, 0, 0, 0, 0, 1297, 1298, 1299,
	1300, 1301, 1302, 1305, 1306, 1303, 1304, 1307, 1308, 0,
	0, 0, 0, 0, 1309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1310, 1311, 1312, 0,
	0, 1314, 0, 1316, 0, 0, 0, 0, 0, 0,
	1141, 1143, 1370, 0, 0, 1313, 1089, 1090, 1091, 1126,
	1127, 0, 1195, 1367, 1366, 1197, 0, 1319, -2, 1320,
	0, 0, 1200, 1406, 1205, 1206, 1319, 0, 1361, 0,
	0, 1396, 0, 1081, 1266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1037, 1051, 1058,
	1055, 1054, 1039, 0, 1038, 0, 0, 1036, 0, 0,
	0, 1040, 0, 1342, -2, 0, 0, 0, 0, 0,
	756, -2, 758, 0, 774, 0, 868, 0, 0, 921,
	1371, 1375, 1376, 921, 921, 0, 0, 1320, 0, 0,
	0, 0, 971, 971, 971, 969, 946, 0, 952, 0,
	-2, 0, 952, 952, 0, 962, 0, 962, -2, 943,
	0, 0, 975, 976, 0, 0, 98, 740, 117, 0,
	740, 740, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 113, 105, 106, 0, 0, 83, 678, 0, 681,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 0, 0, 115, 0, 139,
	141, 0, 0, 0, 0, 965, 578, 0, 0, 1440,
	1387, 0, 0, 0, 0, 1440, 0, 0, 1426, 1427,
	592, 0, 0, 0, 0, 673, 676, 0, 695, 0,
	872, 0, 0, 0, 0, 1694, 709, 1411, 1445, 0,
	1694, 795, 0, 984, 0, 809, 0, 0, 981, 0,
	246, 0, 144, 145, 0, 249, 0, 252, 0, 255,
	0, 0, 258, 0, 0, 0, 0, 0, 875, 0,
	0, 333, 343, 0, 0, 875, 0, 1322, 992, 995,
	996, 997, 1081, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1059, 1053, 1067, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1049, 0, 1024, 1024, 1024, 1041,
	1042, 1060, 1061, 1063, 1065, 993, 994, 1059, 1059, 1056,
	1057, 176, 0, 337, 0, 965, 373, 965, 375, 0,
	564, 0, 0, 0, 0, -2, 395, 0, 782, 0,
	787, 419, 420, 421, 789, 790, 399, 422, 423, 424,
	425, 426, 427, 0, 670, 0, 672, 1402, 0, 396,
	412, 397, 402, 0, 408, 0, 0, 496, 497, 499,
	500, 501, 505, 0, 572, 1607, 582, 507, 509, 511,
	513, 515, 875, 524, 0, 526, 875, 537, 540, 545,
	549, 550, 551, 552, 553, 554, 0, 0, 0, 693,
	0, 846, 893, 894, 899, 903, 904, 907, 910, 911,
	901, 1084, 861, 862, 863, 887, 888, 723, 0, 0,
	355, 1085, 988, 989, 1043, 1044, 1045, 1046, 1047, 1086,
	1087, 1408, 0, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, -2, -2, -2, -2, -2, -2, -2,
	-2, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, -2, -2, -2, 1124, 1125, -2, 1315, 1317,
	0, 1370, 0, -2, 0, -2, -2, -2, -2, 1138,
	0, 1140, 1145, 1147, 1149, 0, 0, 0, 0, 1369,
	1159, 1353, 0, 0, 1294, 1295, 1296, 1144, 0, 0,
	1368, 1365, 0, 0, 1318, 1202, 0, 0, 0, 1326,
	1360, 1356, 0, 1428, 1434, 1209, 886, 0, 0, 0,
	0, 1216, 0, 1407, 1068, 1069, 1070, 1071, 1072, 1073,
	1082, 1274, 0, 0, 0, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 0, 0, 0, 0, 0, 0, 0,
	0, 1246, 0, 1329, -2, -2, -2, -2, -2, -2,
	-2, 0, 1248, 0, 0, 1260, 0, 1262, 0, 1250,
	1320, 1339, 0, 0, 1165, 0, 0, 0, 0, 1707,
	0, 1253, 1320, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 1320, 0, 1352, 773, 870, 0, 0, 984,
	0, 0, 0, 1374, 984, 984, 0, 916, 0, 0,
	0, 0, 0, 0, 966, 970, 967, 968, 0, 0,
	952, 962, 929, 0, 0, 1410, 0, 937, -2, 962,
	962, 0, 939, 961, 0, 653, 951, 941, -2, 0,
	-2, 0, 0, 0, 0, 739, 119, 1694, 0, 148,
	0, 0, 643, 1416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 679, 680, 682, 688, 690, 0, 684,
	1405, 0, 685, 0, 687, 689, 691, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 1381, 0, 0, 167, 964, 0, 1380, 1390,
	0, 188, 191, 177, 652, 0, 0, 0, 0, 591,
	-2, 593, 595, 596, 597, 598, 1542, 1446, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 797, 803, 0, 886, 0, 825, 811,
	0, 0, 0, 825, 829, 830, 832, 833, 0, 0,
	982, 268, 146, 146, 146, 1378, 146, 146, 165, 262,
	265, 325, 271, 318, 0, 0, 0, 0, 319, 0,
	0, 0, 321, 0, 985, 987, 0, 998, 0, 1051,
	0, 155, 176, 0, 0, 0, 372, 377, 0, 565,
	0, 0, 388, 0, 781, 788, 0, 416, 0, 418,
	671, 1404, 1403, 0, 409, 489, 0, 583, 581, 523,
	527, 875, 529, 0, 566, 567, 571, 979, 0, 905,
	0, 902, 908, 909, 0, 890, 721, 722, 0, 0,
	0, -2, -2, 0, 0, 0, 1160, -2, 1139, 1142,
	1146, 1148, 1150, 0, 0, 0, 0, 0, 0, 0,
	1161, 1319, 0, 1363, 1366, -2, 1321, 1324, 1325, 0,
	0, 1357, 0, 0, 0, 0, 0, 885, 886, 886,
	886, 1215, 0, 0, 0, 0, 0, 0, 1217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1235, 1022,
	0, 1245, 0, 1247, 1048, 1259, 1261, 1249, 0, 0,
	1251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1168, 1169, 1170, 0, 1319, 1252,
	1345, 1346, 0, 0, 1062, 1064, 1066, 0, 0, 0,
	0, 1258, 0, 1351, 875, 918, 913, 1372, 965, 920,
	922, 1373, 1413, 913, 913, 0, 1321, 954, 0, 956,
	0, 0, 0, 958, 0, 947, 0, 949, 962, 934,
	0, 0, 927, 0, 926, 952, 0, 938, 940, 942,
	1428, 653, 960, 0, 977, 0, 118, 727, 0, 0,
	1414, 0, 121, 1694, 129, 0, 620, 0, 0, 0,
	0, 0, 742, 130, 1694, 146, 1694, 146, 131, 134,
	0, 138, 136, 0, 0, 611, 99, 740, 102, 0,
	0, 733, 0, 683, 686, 692, 84, 0, 735, 725,
	0, 0, 724, 140, 103, 0, 0, 737, 101, 0,
	0, 0, 176, 0, 0, 1386, 1441, 193, 195, 196,
	194, 600, 0, 1446, 0, 1446, 0, 1418, 589, 653,
	0, 965, 677, 698, -2, 701, 703, 711, 0, 0,
	0, 799, 803, 0, 802, 873, 898, 983, 804, 825,
	0, 0, 0, 814, 816, 813, 810, 807, 984, 0,
	0, 0, 0, 0, 247, 250, 253, 256, 259, 332,
	0, 0, 0, 1323, 0, 990, 0, 0, 0, 0,
	156, 174, 1574, 172, 169, 171, 336, 0, 374, 0,
	0, 0, 0, 0, 0, 385, 386, -2, 414, 415,
	417, 413, 0, 525, 528, 536, 0, 0, 889, 723,
	0, 1088, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 1354, 0, 0, 0, 1365, -2, 1327, 1355, 1359,
	0, 1429, 1433, 1210, 0, 0, 0, 0, 1398, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 0, 1272, 1273, 1277,
	1421, 0, 0, 1221, 0, 0, 0, 0, 0, 0,
	1328, 1338, 1340, 1166, 1167, 1171, 1172, 1173, 1174, 1175,
	1176, 1177, 1178, 1179, 1180, -2, -2, -2, 1184, 1185,
	1186, -2, -2, -2, 0, 0, 0, 1341, 0, 0,
	1343, 1344, 1348, 1349, 0, 1255, 1256, 1257, 1350, 0,
	915, 0, 919, 0, 915, 915, 882, 955, 0, 973,
	957, 932, 948, 0, 945, 930, 0, 931, 0, 962,
	952, 0, 959, 944, -2, 0, 0, 0, 0, 147,
	618, 642, 0, 0, 714, 720, 720, 0, 1416, 1219,
	1220, 0, 0, 0, 123, 0, 0, 0, 0, 127,
	0, 133, 137, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 109, 112, 0, 0, 108, 0,
	153, 0, 0, 608, 0, 594, 0, 0, 0, 0,
	592, 0, 219, 176, 674, 696, 0, 0, 0, 0,
	0, 801, 803, 0, 794, 795, 825, 897, 805, 823,
	824, 822, 0, 0, 0, 886, 831, 828, 834, 835,
	0, 334, 0, 158, 0, 0, 991, 999, 0, 1052,
	0, 0, 0, 0, 338, 0, 559, 560, 606, 0,
	563, 490, 900, 906, 891, 723, 0, 0, -2, 0,
	1153, -2, -2, 1290, 1321, 1364, 1358, 0, 1395, 886,
	1211, 1213, 1214, 1083, 1279, 1276, 0, 1263, 1230, 1231,
	0, 1233, 1234, 1023, 1337, 0, 0, 0, 0, 1321,
	1292, 1254, 871, 1268, 0, 0, 923, 1268, 1268, 0,
	952, 950, 928, 924, 0, 935, 962, 1429, 0, 729,
	731, 120, 0, 619, 0, 622, 0, 0, 0, 0,
	629, 630, 0, 0, 0, 0, 0, 644, 651, 0,
	723, 0, 723, 0, 0, 0, 0, 0, 143, 0,
	0, 741, 0, 146, 146, 0, 0, 728, 0, 0,
	0, 0, 734, 736, 726, 0, 738, 0, 166, 0,
	587, 607, 0, 0, 0, 0, 0, 0, 0, 221,
	0, 710, 0, 0, 0, 791, 803, 0, 796, 797,
	222, 0, 0, 0, 812, 815, 817, 898, 0, 0,
	0, 986, 1050, 173, 0, 168, 170, 376, 378, 0,
	0, 384, 561, 605, 0, 0, 892, -2, -2, 1154,
	1291, 1430, 1432, 0, 886, 0, 1265, 0, -2, 0,
	0, 0, 1293, 857, 0, 914, 912, 858, 859, 972,
	962, 0, 936, 122, 0, 623, 624, 1417, 626, 0,
	628, 631, 0, 633, 1448, 0, 637, 600, 0, 648,
	649, 715, 716, 719, 717, 720, 886, 646, 0, 124,
	125, 142, 150, 126, 132, 0, 0, 0, 0, 886,
	0, 0, 0, 963, 0, 0, 651, 0, 641, 600,
	590, 0, 711, 707, 0, 0, 798, 799, 0, 0,
	0, 825, 836, 0, 0, 175, 0, 380, 0, 382,
	0, 604, 0, 1212, 1282, 0, 1232, -2, 0, 1192,
	1267, 1269, 0, 933, 925, 621, 625, 0, 0, 657,
	0, 0, 608, 0, 723, 0, 0, 152, 0, 0,
	0, 730, 732, 0, 0, 0, 111, 0, 640, 600,
	651, 608, 651, 0, 0, 800, 801, 0, 819, 984,
	821, 826, 0, 0, 379, 0, 0, 562, 0, 0,
	0, 1278, 1193, 0, 0, 0, 632, 662, 0, 0,
	0, 645, 0, 718, 1210, 653, 128, 0, 149, 0,
	612, 0, 0, 615, 0, 0, 0, 0, 0, 608,
	600, 588, 600, 0, 0, 792, 0, 820, 176, 176,
	381, 383, 1275, 1280, 1283, -2, 1660, 1495, 0, 1281,
	1270, 1271, 0, 634, 658, 659, 0, 654, 655, 656,
	1447, 635, 636, 650, 657, 151, 609, 0, 0, 610,
	0, 0, 114, 116, 0, 638, 608, 608, 0, 708,
	984, 159, 160, 0, 1285, 1286, 1287, 1288, 1289, 627,
	660, 0, 661, 0, 0, 0, 662, 613, 0, 616,
	0, 603, 639, 705, 651, 818, 0, 663, 0, 666,
	667, 0, 664, 647, 0, 0, 599, 601, 602, 600,
	1284, 665, 668, 669, 0, 0, 608, 608, 0, 706,
	614, 0, 0, 0, 608, 617,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 403, 3, 409, 404, 3,
	414, 415, 407, 405, 419, 406, 416, 408, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 423, 418,
	395, 397, 396, 399, 420, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 412, 3, 413, 410, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 421, 402, 422, 400,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 398, 57738, 401, 57739, 411,
	57740, 417, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1011
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1017
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1026
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1028
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1045
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1046
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1053
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1058
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1059
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1071
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			return helpWith(sqllex, "ALTER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1075
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1076
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1077
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1078
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1079
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1116
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1142
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1173
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1234
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1244
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1250
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1259
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1268
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1277
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1289
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1360
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1383
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = nil
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1497
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			return unimplemented(sqllex, "alter using")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1501
		{
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.str = "CSV"
		}
	case 159:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1596
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1665
		{
		}
	case 177:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1681
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1710
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1729
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1733
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.str = ""
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			return helpWith(sqllex, "CREATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1760
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1761
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1780
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1784
		{
			/* SKIP DOC */
			// TODO(dan): This reuses the `AS OF SYSTEM TIME` syntax for convenience,
			// but it means something different here than SELECT and BACKUP. On the
			// other hand, RESTORE already stretches the definition a bit. Revisit.
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets:  sqlDollar[4].union.targetList(),
				SinkType: sqlDollar[6].str,
				AsOf:     sqlDollar[7].union.asOfClause(),
				Options:  sqlDollar[8].union.kvOptions(),
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1815
		{
			return helpWith(sqllex, "DELETE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1825
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1826
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1827
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			return helpWith(sqllex, "DROP")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1843
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1846
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1862
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1877
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1953
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1968
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2008
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2011
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2015
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
			return helpWith(sqllex, "DELETE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2018
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2019
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			return helpWith(sqllex, "INSERT")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2032
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2041
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{ /* SKIP DOC */
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2091
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			return helpWith(sqllex, "GRANT")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2197
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "RESET")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2242
		{
			return helpWith(sqllex, "RESET")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2253
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			return helpWith(sqllex, "USE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2272
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2273
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{ /* SKIP DOC */
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2275
		{
			return helpWith(sqllex, "USE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			return unimplemented(sqllex, "set local")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2310
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2336
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2444
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2449
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2475
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2480
		{
			return unimplemented(sqllex, "set from current")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2481
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2489
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2493
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = tree.Low
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = tree.Normal
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = tree.High
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2606
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2607
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2608
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2609
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2611
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2613
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2615
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2616
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2619
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2620
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2621
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2623
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2625
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2627
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2630
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2632
		{
			return helpWith(sqllex, "SHOW")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2641
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.str = "client_encoding"
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.str = "timezone"
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2656
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2677
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2688
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2696
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2707
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2724
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2729
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2751
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2764
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2772
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2783
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2788
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2793
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2804
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2809
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2820
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2839
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2852
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2857
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2867
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = true
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = false
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2884
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2921
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2935
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2945
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2953
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2957
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2964
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2975
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2986
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2996
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3022
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3026
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3030
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3036
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3043
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3049
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3053
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3079
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3085
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
			// This sub-rule is meant to support both ROLE and other keywords
			// used as table name without the TABLE prefix. The keyword ROLE
			// here can have two meanings:
			//
			// - for all statements except SHOW GRANTS, it must be interpreted
			//   as a plain table name.
			// - for SHOW GRANTS specifically, it must be handled as an ON ROLE
			//   specifier without a name list (the rule with a name list is separate,
			//   see above).
			//
			// Yet we want to use a single "targets" non-terminal for all
			// statements that use targets, to share the code. This action
			// achieves this as follows:
			//
			// - for all statements (including SHOW GRANTS), it populates the
			//   Tables list in TargetList{} with the given name. This will
			//   include the given keyword as table pattern in all cases,
			//   including when the keyword was ROLE.
			//
			// - if ROLE was specified, it remembers this fact in the ForRoles
			//   field.  This distinguishes `ON ROLE` (where "role" is
			//   specified as keyword), which triggers the special case in
			//   SHOW GRANTS, from `ON "role"` (where "role" is specified as
			//   identifier), which is always handled as a table name.
			//
			//   Both `ON ROLE` and `ON "role"` populate the Tables list in the same way,
			//   so that other statements than SHOW GRANTS don't observe any difference.
			//
			// Arguably this code is a bit too clever. Future work should aim
			// to remove the special casing of SHOW GRANTS altogether instead
			// of increasing (or attempting to modify) the grey magic occurring
			// here.
			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role", // backdoor for "SHOW GRANTS ON ROLE" (no name list)
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3303
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3433
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3437
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.str = ""
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 614:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 617:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3528
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3627
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3631
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 638:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3763
		{
			return unimplemented(sqllex, "match full")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3764
		{
			return unimplemented(sqllex, "match partial")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3765
		{
			return unimplemented(sqllex, "match simple")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3766
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3857
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 674:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3865
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3884
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3885
		{ /* SKIP DOC */
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{ /* SKIP DOC */
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3892
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3900
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3914
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3929
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = nil
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4032
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = true
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = false
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = true
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = false
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4073
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4074
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4077
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4078
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = tree.Descending
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4129
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4131
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = true
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = false
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4174
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4175
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4186
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4197
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4208
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4212
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4213
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4214
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4233
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4238
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4251
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4256
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4265
		{
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4266
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4267
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4275
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4282
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4286
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.str = ""
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.str = ""
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4332
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4347
		{
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 791:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4411
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.str = ""
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.str = ""
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.str = ""
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4454
		{
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4455
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4481
		{
			return helpWith(sqllex, "INSERT")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4499
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4555
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4569
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4573
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4581
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 826:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4618
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4622
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4623
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4647
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 836:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4746
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4781
		{
			return helpWith(sqllex, "SELECT")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4782
		{
			return helpWith(sqllex, "VALUES")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4783
		{
			return helpWith(sqllex, "TABLE")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4844
		{
			return helpWith(sqllex, "SELECT")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4888
		{
			return helpWith(sqllex, "TABLE")
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4903
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4904
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 871:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4926
		{
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4927
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4934
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4938
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = true
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = false
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = false
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = true
		}
	case 882:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4967
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4968
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5015
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5039
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5091
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5092
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5095
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5096
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 916:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5154
		{
			return helpWith(sqllex, "VALUES")
		}
	case 918:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5156
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5171
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5193
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5271
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5291
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5292
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5293
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5298
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5303
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = nil
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = true
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = false
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5448
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5449
		{
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5471
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5493
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5523
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5537
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5545
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5569
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5594
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5636
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5656
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5660
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5664
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5676
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5696
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = nil
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5711
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5747
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5755
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5811
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5815
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5819
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5839
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5891
		{
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5892
		{
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = tree.Year
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = tree.Month
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = tree.Day
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = tree.Month
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = nil
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = tree.Second
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5995
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6030
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6091
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6099
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6103
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6107
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6111
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6115
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6119
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6143
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6147
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6151
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6155
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6159
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6171
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6175
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6187
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6191
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6195
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6227
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6231
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6235
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6243
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6247
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6251
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6255
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6258
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6260
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6264
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6268
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6280
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6284
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6288
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6296
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6300
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6304
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6308
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6312
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6316
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6320
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6324
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6341
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6345
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6349
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6364
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6368
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6372
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6380
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6384
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6388
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6392
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6396
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6400
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6404
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6408
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6412
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6416
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6420
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6424
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6428
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6432
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6436
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6440
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6444
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6448
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6452
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6456
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6464
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6468
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6472
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6486
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6494
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6530
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6535
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6544
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6549
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6554
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6558
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6562
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6566
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6570
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6578
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6582
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6585
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6586
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6588
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6592
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6596
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6599
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6610
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6617
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6626
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6627
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6631
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6633
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6637
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6643
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6647
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6651
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6657
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6661
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6665
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6669
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6673
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6677
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6681
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6685
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6689
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6696
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6699
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6701
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6704
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6706
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6709
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6711
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6714
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6716
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6719
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6721
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6724
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6726
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6729
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6731
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6735
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6738
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6739
		{
			return unimplemented(sqllex, "treat")
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6741
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6745
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6749
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6753
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6757
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6760
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6762
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6765
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6770
		{
			return unimplemented(sqllex, "within group")
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6771
		{
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6775
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6779
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6786
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6790
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6796
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6806
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6814
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6818
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6822
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6829
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6848
		{
			sqlVAL.str = ""
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6854
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6858
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6868
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6869
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6870
		{
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6873
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6874
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6880
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6881
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6882
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6883
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6884
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6895
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6899
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6905
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6911
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6917
		{
			sqlVAL.union.val = tree.Any
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6921
		{
			sqlVAL.union.val = tree.Some
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6925
		{
			sqlVAL.union.val = tree.All
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6930
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6931
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6932
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6933
		{
			sqlVAL.union.val = tree.Div
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6934
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6935
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6936
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6937
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6938
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6939
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6940
		{
			sqlVAL.union.val = tree.LT
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6941
		{
			sqlVAL.union.val = tree.GT
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6942
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6943
		{
			sqlVAL.union.val = tree.LE
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6944
		{
			sqlVAL.union.val = tree.GE
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6945
		{
			sqlVAL.union.val = tree.NE
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6949
		{
			sqlVAL.union.val = tree.Like
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6950
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6951
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6952
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6964
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6970
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6974
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6980
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6984
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6990
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6994
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7000
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7010
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7014
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7036
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7040
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7044
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7050
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7057
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7061
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7078
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7082
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7086
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7090
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7094
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7100
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7106
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7112
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7116
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7120
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7126
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7130
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7141
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7148
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7152
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7158
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7164
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7168
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7175
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7181
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7185
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7192
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7198
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7202
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7207
		{
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7208
		{
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7212
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7216
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7222
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7231
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7235
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7239
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7247
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7251
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7257
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7261
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7267
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7274
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7302
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7306
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7310
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7316
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7320
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7327
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7331
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7335
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7339
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7342
		{
			return unimplemented(sqllex, "func const")
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7344
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7348
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7351
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7353
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7357
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7361
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7368
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7372
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7381
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7392
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7402
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7498
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7505
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7509
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7513
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7527
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7531
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7535
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7548
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7566
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7576
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7580
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7594
		{
			sqlVAL.str = ""
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7600
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7604
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
