// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:597
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9768

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1069,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 899,
	199, 899,
	214, 250,
	296, 250,
	304, 739,
	331, 250,
	340, 739,
	379, 739,
	403, 250,
	427, 739,
	-2, 0,
	-1, 74,
	214, 254,
	-2, 0,
	-1, 75,
	109, 1069,
	188, 1069,
	413, 1069,
	414, 1069,
	-2, 0,
	-1, 87,
	122, 1043,
	138, 1043,
	196, 1043,
	226, 1043,
	260, 1043,
	270, 1043,
	408, 1043,
	-2, 1021,
	-1, 118,
	128, 657,
	213, 657,
	298, 637,
	349, 637,
	396, 657,
	-2, 0,
	-1, 119,
	4, 1071,
	21, 1071,
	22, 1071,
	23, 1071,
	24, 1071,
	25, 1071,
	27, 1071,
	33, 1071,
	38, 1071,
	39, 1071,
	40, 1071,
	41, 1071,
	42, 1071,
	43, 1071,
	44, 1071,
	45, 1071,
	46, 1071,
	47, 1071,
	48, 1071,
	49, 1071,
	51, 1071,
	52, 1071,
	53, 1071,
	54, 1071,
	55, 1071,
	56, 1071,
	59, 1071,
	60, 1071,
	61, 1071,
	62, 1071,
	64, 1071,
	65, 1071,
	69, 1071,
	70, 1071,
	71, 1071,
	72, 1071,
	73, 1071,
	74, 1071,
	76, 1071,
	77, 1071,
	78, 1071,
	79, 1071,
	81, 1071,
	83, 1071,
	84, 1071,
	85, 1071,
	88, 1071,
	89, 1071,
	97, 1071,
	98, 1071,
	99, 1071,
	100, 1071,
	101, 1071,
	102, 1071,
	103, 1071,
	104, 1071,
	106, 1071,
	108, 1071,
	109, 1071,
	111, 1071,
	114, 1071,
	115, 1071,
	116, 1071,
	118, 1071,
	120, 1071,
	121, 1071,
	123, 1071,
	124, 1071,
	125, 1071,
	126, 1071,
	127, 1071,
	128, 1071,
	129, 1071,
	130, 1071,
	131, 1071,
	132, 1071,
	133, 1071,
	134, 1071,
	135, 1071,
	137, 1071,
	143, 1071,
	144, 1071,
	145, 1071,
	146, 1071,
	147, 1071,
	148, 1071,
	150, 1071,
	152, 1071,
	156, 1071,
	157, 1071,
	159, 1071,
	160, 1071,
	162, 1071,
	163, 1071,
	165, 1071,
	166, 1071,
	167, 1071,
	168, 1071,
	169, 1071,
	170, 1071,
	171, 1071,
	172, 1071,
	174, 1071,
	175, 1071,
	177, 1071,
	178, 1071,
	179, 1071,
	182, 1071,
	183, 1071,
	184, 1071,
	185, 1071,
	188, 1071,
	189, 1071,
	190, 1071,
	191, 1071,
	192, 1071,
	193, 1071,
	194, 1071,
	195, 1071,
	197, 1071,
	199, 1071,
	201, 1071,
	203, 1071,
	204, 1071,
	205, 1071,
	207, 1071,
	208, 1071,
	211, 1071,
	212, 1071,
	213, 1071,
	214, 1071,
	215, 1071,
	217, 1071,
	218, 1071,
	220, 1071,
	221, 1071,
	223, 1071,
	224, 1071,
	227, 1071,
	228, 1071,
	231, 1071,
	232, 1071,
	233, 1071,
	235, 1071,
	236, 1071,
	237, 1071,
	238, 1071,
	239, 1071,
	240, 1071,
	241, 1071,
	242, 1071,
	243, 1071,
	244, 1071,
	246, 1071,
	247, 1071,
	248, 1071,
	249, 1071,
	251, 1071,
	253, 1071,
	255, 1071,
	256, 1071,
	257, 1071,
	258, 1071,
	259, 1071,
	261, 1071,
	262, 1071,
	263, 1071,
	265, 1071,
	266, 1071,
	267, 1071,
	268, 1071,
	271, 1071,
	272, 1071,
	273, 1071,
	275, 1071,
	277, 1071,
	278, 1071,
	279, 1071,
	280, 1071,
	281, 1071,
	282, 1071,
	283, 1071,
	284, 1071,
	285, 1071,
	286, 1071,
	288, 1071,
	289, 1071,
	290, 1071,
	291, 1071,
	292, 1071,
	293, 1071,
	295, 1071,
	297, 1071,
	298, 1071,
	299, 1071,
	300, 1071,
	301, 1071,
	302, 1071,
	303, 1071,
	304, 1071,
	305, 1071,
	307, 1071,
	308, 1071,
	309, 1071,
	310, 1071,
	311, 1071,
	313, 1071,
	314, 1071,
	315, 1071,
	316, 1071,
	317, 1071,
	318, 1071,
	319, 1071,
	320, 1071,
	322, 1071,
	324, 1071,
	325, 1071,
	326, 1071,
	327, 1071,
	328, 1071,
	329, 1071,
	331, 1071,
	332, 1071,
	333, 1071,
	334, 1071,
	335, 1071,
	336, 1071,
	337, 1071,
	338, 1071,
	340, 1071,
	341, 1071,
	342, 1071,
	343, 1071,
	344, 1071,
	345, 1071,
	346, 1071,
	347, 1071,
	348, 1071,
	349, 1071,
	351, 1071,
	352, 1071,
	353, 1071,
	354, 1071,
	355, 1071,
	357, 1071,
	358, 1071,
	359, 1071,
	360, 1071,
	361, 1071,
	363, 1071,
	364, 1071,
	365, 1071,
	366, 1071,
	367, 1071,
	368, 1071,
	369, 1071,
	370, 1071,
	371, 1071,
	372, 1071,
	373, 1071,
	374, 1071,
	376, 1071,
	377, 1071,
	378, 1071,
	380, 1071,
	381, 1071,
	382, 1071,
	383, 1071,
	384, 1071,
	385, 1071,
	386, 1071,
	388, 1071,
	389, 1071,
	390, 1071,
	391, 1071,
	392, 1071,
	394, 1071,
	396, 1071,
	397, 1071,
	398, 1071,
	399, 1071,
	400, 1071,
	402, 1071,
	403, 1071,
	404, 1071,
	406, 1071,
	407, 1071,
	410, 1071,
	411, 1071,
	412, 1071,
	413, 1071,
	414, 1071,
	415, 1071,
	417, 1071,
	419, 1071,
	420, 1071,
	421, 1071,
	422, 1071,
	423, 1071,
	424, 1071,
	425, 1071,
	427, 1071,
	428, 1071,
	429, 1071,
	434, 1071,
	435, 1071,
	436, 1071,
	437, 1071,
	438, 1071,
	439, 1071,
	-2, 0,
	-1, 120,
	1, 952,
	203, 952,
	295, 952,
	302, 952,
	442, 952,
	465, 952,
	-2, 0,
	-1, 122,
	1, 952,
	465, 952,
	-2, 0,
	-1, 123,
	1, 952,
	465, 952,
	-2, 0,
	-1, 124,
	1, 956,
	465, 956,
	-2, 0,
	-1, 149,
	122, 1042,
	138, 1042,
	196, 1042,
	226, 1042,
	260, 1042,
	270, 1042,
	408, 1042,
	-2, 1030,
	-1, 182,
	4, 1078,
	5, 1078,
	6, 1078,
	7, 1078,
	8, 1078,
	9, 1078,
	10, 1078,
	21, 1078,
	22, 1078,
	23, 1078,
	24, 1078,
	25, 1078,
	27, 1078,
	33, 1078,
	34, 1078,
	38, 1078,
	39, 1078,
	40, 1078,
	41, 1078,
	42, 1078,
	43, 1078,
	44, 1078,
	45, 1078,
	46, 1078,
	47, 1078,
	48, 1078,
	49, 1078,
	51, 1078,
	52, 1078,
	53, 1078,
	54, 1078,
	55, 1078,
	56, 1078,
	57, 1078,
	58, 1078,
	59, 1078,
	60, 1078,
	61, 1078,
	62, 1078,
	64, 1078,
	65, 1078,
	67, 1078,
	69, 1078,
	70, 1078,
	71, 1078,
	72, 1078,
	73, 1078,
	74, 1078,
	76, 1078,
	77, 1078,
	78, 1078,
	79, 1078,
	81, 1078,
	83, 1078,
	84, 1078,
	85, 1078,
	87, 1078,
	88, 1078,
	89, 1078,
	90, 1078,
	91, 1078,
	92, 1078,
	93, 1078,
	94, 1078,
	95, 1078,
	96, 1078,
	97, 1078,
	98, 1078,
	99, 1078,
	100, 1078,
	101, 1078,
	102, 1078,
	103, 1078,
	104, 1078,
	105, 1078,
	106, 1078,
	108, 1078,
	109, 1078,
	111, 1078,
	114, 1078,
	115, 1078,
	116, 1078,
	118, 1078,
	120, 1078,
	121, 1078,
	123, 1078,
	124, 1078,
	125, 1078,
	126, 1078,
	127, 1078,
	128, 1078,
	129, 1078,
	130, 1078,
	131, 1078,
	132, 1078,
	133, 1078,
	134, 1078,
	135, 1078,
	136, 1078,
	137, 1078,
	143, 1078,
	144, 1078,
	145, 1078,
	146, 1078,
	147, 1078,
	148, 1078,
	150, 1078,
	152, 1078,
	155, 1078,
	156, 1078,
	157, 1078,
	159, 1078,
	160, 1078,
	162, 1078,
	163, 1078,
	165, 1078,
	166, 1078,
	167, 1078,
	168, 1078,
	169, 1078,
	170, 1078,
	171, 1078,
	172, 1078,
	173, 1078,
	174, 1078,
	175, 1078,
	177, 1078,
	178, 1078,
	179, 1078,
	182, 1078,
	183, 1078,
	184, 1078,
	185, 1078,
	187, 1078,
	188, 1078,
	189, 1078,
	190, 1078,
	191, 1078,
	192, 1078,
	193, 1078,
	194, 1078,
	195, 1078,
	197, 1078,
	199, 1078,
	200, 1078,
	201, 1078,
	202, 1078,
	203, 1078,
	204, 1078,
	205, 1078,
	206, 1078,
	207, 1078,
	208, 1078,
	211, 1078,
	212, 1078,
	213, 1078,
	214, 1078,
	215, 1078,
	217, 1078,
	218, 1078,
	220, 1078,
	221, 1078,
	222, 1078,
	223, 1078,
	224, 1078,
	225, 1078,
	227, 1078,
	228, 1078,
	231, 1078,
	232, 1078,
	233, 1078,
	235, 1078,
	236, 1078,
	237, 1078,
	238, 1078,
	239, 1078,
	240, 1078,
	241, 1078,
	242, 1078,
	243, 1078,
	244, 1078,
	245, 1078,
	246, 1078,
	247, 1078,
	248, 1078,
	249, 1078,
	250, 1078,
	251, 1078,
	252, 1078,
	253, 1078,
	254, 1078,
	255, 1078,
	256, 1078,
	257, 1078,
	258, 1078,
	259, 1078,
	261, 1078,
	262, 1078,
	263, 1078,
	266, 1078,
	267, 1078,
	268, 1078,
	271, 1078,
	272, 1078,
	273, 1078,
	274, 1078,
	275, 1078,
	276, 1078,
	277, 1078,
	278, 1078,
	279, 1078,
	280, 1078,
	281, 1078,
	282, 1078,
	283, 1078,
	284, 1078,
	285, 1078,
	286, 1078,
	288, 1078,
	289, 1078,
	290, 1078,
	291, 1078,
	292, 1078,
	293, 1078,
	295, 1078,
	297, 1078,
	298, 1078,
	299, 1078,
	300, 1078,
	301, 1078,
	302, 1078,
	303, 1078,
	304, 1078,
	305, 1078,
	307, 1078,
	308, 1078,
	309, 1078,
	310, 1078,
	311, 1078,
	313, 1078,
	314, 1078,
	315, 1078,
	316, 1078,
	317, 1078,
	318, 1078,
	319, 1078,
	320, 1078,
	322, 1078,
	323, 1078,
	324, 1078,
	325, 1078,
	326, 1078,
	327, 1078,
	328, 1078,
	329, 1078,
	331, 1078,
	332, 1078,
	333, 1078,
	334, 1078,
	335, 1078,
	336, 1078,
	337, 1078,
	338, 1078,
	340, 1078,
	341, 1078,
	342, 1078,
	343, 1078,
	344, 1078,
	345, 1078,
	346, 1078,
	347, 1078,
	348, 1078,
	349, 1078,
	350, 1078,
	351, 1078,
	352, 1078,
	353, 1078,
	354, 1078,
	355, 1078,
	356, 1078,
	357, 1078,
	358, 1078,
	359, 1078,
	360, 1078,
	361, 1078,
	363, 1078,
	364, 1078,
	365, 1078,
	366, 1078,
	367, 1078,
	368, 1078,
	369, 1078,
	370, 1078,
	371, 1078,
	372, 1078,
	373, 1078,
	374, 1078,
	376, 1078,
	377, 1078,
	378, 1078,
	380, 1078,
	381, 1078,
	382, 1078,
	383, 1078,
	384, 1078,
	385, 1078,
	386, 1078,
	388, 1078,
	389, 1078,
	390, 1078,
	391, 1078,
	392, 1078,
	394, 1078,
	396, 1078,
	397, 1078,
	398, 1078,
	399, 1078,
	400, 1078,
	401, 1078,
	402, 1078,
	403, 1078,
	404, 1078,
	406, 1078,
	407, 1078,
	409, 1078,
	410, 1078,
	411, 1078,
	412, 1078,
	413, 1078,
	414, 1078,
	415, 1078,
	416, 1078,
	417, 1078,
	419, 1078,
	420, 1078,
	421, 1078,
	422, 1078,
	423, 1078,
	424, 1078,
	425, 1078,
	427, 1078,
	428, 1078,
	429, 1078,
	434, 1078,
	435, 1078,
	436, 1078,
	437, 1078,
	438, 1078,
	439, 1078,
	440, 1078,
	446, 1078,
	453, 1078,
	454, 1078,
	455, 1078,
	462, 1078,
	466, 1078,
	-2, 0,
	-1, 560,
	154, 1755,
	393, 1755,
	445, 1755,
	464, 1755,
	-2, 0,
	-1, 561,
	154, 1834,
	393, 1834,
	445, 1834,
	464, 1834,
	-2, 0,
	-1, 562,
	154, 1744,
	393, 1744,
	445, 1744,
	464, 1744,
	-2, 0,
	-1, 564,
	154, 1926,
	393, 1926,
	445, 1926,
	464, 1926,
	-2, 0,
	-1, 566,
	154, 1956,
	393, 1956,
	445, 1956,
	464, 1956,
	-2, 0,
	-1, 573,
	154, 1845,
	393, 1845,
	445, 1845,
	464, 1845,
	-2, 507,
	-1, 590,
	464, 1702,
	467, 1702,
	-2, 708,
	-1, 591,
	464, 1704,
	467, 1704,
	-2, 709,
	-1, 592,
	464, 1703,
	467, 1703,
	-2, 710,
	-1, 593,
	467, 1649,
	-2, 711,
	-1, 741,
	298, 638,
	349, 638,
	-2, 0,
	-1, 742,
	298, 637,
	349, 637,
	-2, 588,
	-1, 745,
	1, 667,
	461, 667,
	463, 667,
	465, 667,
	-2, 0,
	-1, 746,
	1, 707,
	151, 707,
	461, 707,
	463, 707,
	465, 707,
	-2, 0,
	-1, 754,
	1, 641,
	461, 641,
	463, 641,
	465, 641,
	-2, 0,
	-1, 757,
	1, 667,
	461, 667,
	463, 667,
	465, 667,
	-2, 0,
	-1, 758,
	1, 669,
	461, 669,
	463, 669,
	465, 669,
	-2, 0,
	-1, 759,
	1, 672,
	461, 672,
	463, 672,
	465, 672,
	-2, 0,
	-1, 763,
	1, 686,
	461, 686,
	463, 686,
	465, 686,
	-2, 0,
	-1, 764,
	1, 688,
	461, 688,
	463, 688,
	465, 688,
	-2, 0,
	-1, 808,
	138, 1080,
	226, 1080,
	260, 1080,
	-2, 1030,
	-1, 824,
	138, 1079,
	226, 1079,
	260, 1079,
	-2, 1030,
	-1, 848,
	464, 1701,
	-2, 515,
	-1, 877,
	462, 1693,
	-2, 1684,
	-1, 883,
	5, 1217,
	-2, 1735,
	-1, 884,
	5, 1218,
	-2, 1739,
	-1, 885,
	5, 1219,
	-2, 1738,
	-1, 886,
	5, 1220,
	-2, 1953,
	-1, 887,
	5, 1221,
	-2, 1847,
	-1, 888,
	5, 1222,
	-2, 1918,
	-1, 889,
	5, 1223,
	-2, 1920,
	-1, 890,
	5, 1224,
	-2, 1933,
	-1, 891,
	5, 1225,
	-2, 1921,
	-1, 892,
	5, 1226,
	-2, 1922,
	-1, 893,
	5, 1227,
	-2, 1734,
	-1, 894,
	5, 1228,
	-2, 1969,
	-1, 895,
	5, 1229,
	-2, 1808,
	-1, 896,
	5, 1230,
	-2, 1857,
	-1, 897,
	5, 1231,
	-2, 1859,
	-1, 898,
	5, 1232,
	-2, 1812,
	-1, 899,
	5, 1233,
	462, 1711,
	-2, 1702,
	-1, 900,
	5, 1289,
	462, 1289,
	-2, 2004,
	-1, 905,
	462, 1712,
	-2, 1703,
	-1, 907,
	5, 1237,
	-2, 2002,
	-1, 908,
	5, 1238,
	-2, 2003,
	-1, 909,
	5, 1239,
	-2, 1811,
	-1, 910,
	5, 1240,
	-2, 2015,
	-1, 911,
	5, 1241,
	-2, 1813,
	-1, 912,
	5, 1242,
	-2, 1814,
	-1, 913,
	5, 1243,
	-2, 1815,
	-1, 914,
	5, 1244,
	-2, 1984,
	-1, 915,
	5, 1245,
	-2, 2013,
	-1, 916,
	5, 1246,
	-2, 1791,
	-1, 917,
	5, 1247,
	-2, 1792,
	-1, 918,
	5, 1261,
	-2, 1996,
	-1, 920,
	5, 1236,
	-2, 1992,
	-1, 921,
	5, 1236,
	-2, 1991,
	-1, 922,
	5, 1236,
	-2, 2008,
	-1, 923,
	5, 1253,
	-2, 1986,
	-1, 924,
	5, 1254,
	-2, 1736,
	-1, 925,
	5, 1264,
	-2, 1985,
	-1, 926,
	5, 1266,
	-2, 2024,
	-1, 928,
	5, 1277,
	-2, 1765,
	-1, 929,
	5, 1288,
	-2, 2017,
	-1, 930,
	5, 1280,
	-2, 2018,
	-1, 931,
	5, 1288,
	-2, 2019,
	-1, 932,
	5, 1284,
	-2, 2020,
	-1, 933,
	5, 1203,
	-2, 1821,
	-1, 934,
	5, 1204,
	-2, 1822,
	-1, 935,
	464, 1699,
	-2, 1683,
	-1, 936,
	462, 2044,
	-2, 1700,
	-1, 956,
	5, 1272,
	-2, 1944,
	-1, 973,
	5, 1271,
	-2, 2025,
	-1, 983,
	5, 1273,
	428, 1273,
	-2, 1987,
	-1, 984,
	5, 1274,
	428, 1274,
	-2, 1988,
	-1, 1020,
	462, 1711,
	-2, 1702,
	-1, 1048,
	154, 1956,
	393, 1956,
	445, 1956,
	464, 1956,
	-2, 0,
	-1, 1051,
	1, 493,
	465, 493,
	-2, 964,
	-1, 1171,
	313, 1680,
	455, 1680,
	-2, 1679,
	-1, 1194,
	466, 1680,
	-2, 1681,
	-1, 1229,
	304, 739,
	427, 739,
	-2, 249,
	-1, 1249,
	284, 1067,
	-2, 872,
	-1, 1258,
	264, 1706,
	-2, 0,
	-1, 1322,
	1, 368,
	461, 368,
	463, 368,
	465, 368,
	-2, 1041,
	-1, 1325,
	4, 2023,
	11, 2023,
	12, 2023,
	14, 2023,
	15, 2023,
	16, 2023,
	17, 2023,
	18, 2023,
	19, 2023,
	21, 2023,
	22, 2023,
	23, 2023,
	24, 2023,
	25, 2023,
	27, 2023,
	30, 2023,
	31, 2023,
	33, 2023,
	35, 2023,
	38, 2023,
	39, 2023,
	40, 2023,
	41, 2023,
	42, 2023,
	43, 2023,
	44, 2023,
	45, 2023,
	46, 2023,
	47, 2023,
	48, 2023,
	49, 2023,
	51, 2023,
	52, 2023,
	53, 2023,
	54, 2023,
	55, 2023,
	56, 2023,
	59, 2023,
	60, 2023,
	61, 2023,
	62, 2023,
	64, 2023,
	65, 2023,
	66, 2023,
	69, 2023,
	70, 2023,
	71, 2023,
	72, 2023,
	73, 2023,
	74, 2023,
	75, 2023,
	76, 2023,
	77, 2023,
	78, 2023,
	79, 2023,
	81, 2023,
	82, 2023,
	83, 2023,
	84, 2023,
	85, 2023,
	87, 2023,
	88, 2023,
	89, 2023,
	97, 2023,
	98, 2023,
	99, 2023,
	100, 2023,
	101, 2023,
	102, 2023,
	103, 2023,
	104, 2023,
	106, 2023,
	108, 2023,
	109, 2023,
	111, 2023,
	114, 2023,
	115, 2023,
	116, 2023,
	118, 2023,
	120, 2023,
	121, 2023,
	123, 2023,
	124, 2023,
	125, 2023,
	126, 2023,
	127, 2023,
	128, 2023,
	129, 2023,
	130, 2023,
	131, 2023,
	132, 2023,
	133, 2023,
	134, 2023,
	135, 2023,
	139, 2023,
	140, 2023,
	141, 2023,
	142, 2023,
	143, 2023,
	144, 2023,
	145, 2023,
	146, 2023,
	147, 2023,
	148, 2023,
	149, 2023,
	150, 2023,
	152, 2023,
	155, 2023,
	156, 2023,
	157, 2023,
	159, 2023,
	160, 2023,
	162, 2023,
	163, 2023,
	165, 2023,
	166, 2023,
	167, 2023,
	168, 2023,
	169, 2023,
	170, 2023,
	171, 2023,
	172, 2023,
	173, 2023,
	174, 2023,
	175, 2023,
	176, 2023,
	177, 2023,
	178, 2023,
	179, 2023,
	180, 2023,
	181, 2023,
	183, 2023,
	184, 2023,
	185, 2023,
	187, 2023,
	188, 2023,
	189, 2023,
	190, 2023,
	191, 2023,
	192, 2023,
	193, 2023,
	194, 2023,
	195, 2023,
	197, 2023,
	199, 2023,
	200, 2023,
	201, 2023,
	202, 2023,
	203, 2023,
	204, 2023,
	205, 2023,
	206, 2023,
	207, 2023,
	208, 2023,
	209, 2023,
	210, 2023,
	211, 2023,
	212, 2023,
	213, 2023,
	214, 2023,
	215, 2023,
	217, 2023,
	218, 2023,
	220, 2023,
	221, 2023,
	222, 2023,
	223, 2023,
	224, 2023,
	225, 2023,
	227, 2023,
	228, 2023,
	231, 2023,
	232, 2023,
	233, 2023,
	234, 2023,
	235, 2023,
	236, 2023,
	237, 2023,
	238, 2023,
	239, 2023,
	240, 2023,
	241, 2023,
	242, 2023,
	243, 2023,
	244, 2023,
	245, 2023,
	246, 2023,
	247, 2023,
	248, 2023,
	249, 2023,
	252, 2023,
	253, 2023,
	255, 2023,
	256, 2023,
	257, 2023,
	258, 2023,
	259, 2023,
	261, 2023,
	262, 2023,
	263, 2023,
	266, 2023,
	267, 2023,
	268, 2023,
	269, 2023,
	271, 2023,
	272, 2023,
	273, 2023,
	275, 2023,
	277, 2023,
	278, 2023,
	279, 2023,
	280, 2023,
	281, 2023,
	282, 2023,
	283, 2023,
	284, 2023,
	285, 2023,
	286, 2023,
	288, 2023,
	289, 2023,
	290, 2023,
	291, 2023,
	292, 2023,
	293, 2023,
	295, 2023,
	297, 2023,
	298, 2023,
	299, 2023,
	300, 2023,
	301, 2023,
	302, 2023,
	303, 2023,
	304, 2023,
	305, 2023,
	307, 2023,
	308, 2023,
	309, 2023,
	310, 2023,
	311, 2023,
	312, 2023,
	313, 2023,
	314, 2023,
	315, 2023,
	316, 2023,
	317, 2023,
	318, 2023,
	319, 2023,
	320, 2023,
	322, 2023,
	323, 2023,
	324, 2023,
	325, 2023,
	326, 2023,
	327, 2023,
	328, 2023,
	329, 2023,
	330, 2023,
	331, 2023,
	332, 2023,
	333, 2023,
	334, 2023,
	335, 2023,
	336, 2023,
	337, 2023,
	338, 2023,
	340, 2023,
	341, 2023,
	342, 2023,
	343, 2023,
	344, 2023,
	345, 2023,
	346, 2023,
	347, 2023,
	348, 2023,
	349, 2023,
	351, 2023,
	352, 2023,
	353, 2023,
	354, 2023,
	355, 2023,
	356, 2023,
	357, 2023,
	358, 2023,
	359, 2023,
	360, 2023,
	361, 2023,
	363, 2023,
	364, 2023,
	365, 2023,
	366, 2023,
	367, 2023,
	368, 2023,
	369, 2023,
	370, 2023,
	371, 2023,
	372, 2023,
	373, 2023,
	374, 2023,
	376, 2023,
	377, 2023,
	378, 2023,
	380, 2023,
	381, 2023,
	382, 2023,
	383, 2023,
	384, 2023,
	385, 2023,
	386, 2023,
	388, 2023,
	389, 2023,
	390, 2023,
	391, 2023,
	392, 2023,
	394, 2023,
	396, 2023,
	397, 2023,
	398, 2023,
	399, 2023,
	400, 2023,
	402, 2023,
	403, 2023,
	404, 2023,
	406, 2023,
	407, 2023,
	410, 2023,
	411, 2023,
	412, 2023,
	413, 2023,
	414, 2023,
	415, 2023,
	417, 2023,
	419, 2023,
	420, 2023,
	421, 2023,
	422, 2023,
	423, 2023,
	424, 2023,
	425, 2023,
	427, 2023,
	428, 2023,
	429, 2023,
	434, 2023,
	435, 2023,
	436, 2023,
	437, 2023,
	438, 2023,
	439, 2023,
	440, 2023,
	441, 2023,
	443, 2023,
	444, 2023,
	445, 2023,
	446, 2023,
	447, 2023,
	448, 2023,
	450, 2023,
	451, 2023,
	452, 2023,
	453, 2023,
	454, 2023,
	455, 2023,
	456, 2023,
	457, 2023,
	458, 2023,
	460, 2023,
	463, 2023,
	464, 2023,
	466, 2023,
	467, 2023,
	-2, 0,
	-1, 1330,
	154, 1926,
	393, 1926,
	445, 1926,
	464, 1926,
	-2, 0,
	-1, 1359,
	298, 638,
	349, 638,
	-2, 0,
	-1, 1382,
	1, 633,
	461, 633,
	463, 633,
	465, 633,
	-2, 0,
	-1, 1383,
	1, 658,
	461, 658,
	463, 658,
	465, 658,
	-2, 0,
	-1, 1384,
	1, 640,
	461, 640,
	463, 640,
	465, 640,
	-2, 0,
	-1, 1386,
	1, 644,
	461, 644,
	463, 644,
	465, 644,
	-2, 0,
	-1, 1411,
	1, 1976,
	461, 1976,
	463, 1976,
	464, 1976,
	465, 1976,
	-2, 684,
	-1, 1412,
	1, 1923,
	461, 1923,
	463, 1923,
	464, 1923,
	465, 1923,
	-2, 685,
	-1, 1427,
	1, 959,
	465, 959,
	-2, 964,
	-1, 1432,
	138, 1079,
	226, 1079,
	260, 1079,
	-2, 1030,
	-1, 1530,
	122, 1043,
	138, 1043,
	196, 1043,
	226, 1043,
	260, 1043,
	270, 1043,
	408, 1043,
	-2, 1445,
	-1, 1583,
	463, 1583,
	-2, 0,
	-1, 1625,
	122, 1043,
	138, 1043,
	196, 1043,
	226, 1043,
	260, 1043,
	270, 1043,
	408, 1043,
	-2, 1154,
	-1, 1675,
	462, 1276,
	-2, 1264,
	-1, 1719,
	1, 495,
	465, 495,
	-2, 964,
	-1, 1917,
	1, 635,
	461, 635,
	463, 635,
	465, 635,
	-2, 0,
	-1, 1918,
	1, 660,
	461, 660,
	463, 660,
	465, 660,
	-2, 0,
	-1, 2008,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1325,
	-1, 2009,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1326,
	-1, 2010,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1327,
	-1, 2011,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1328,
	-1, 2012,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1329,
	-1, 2013,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1330,
	-1, 2014,
	82, 0,
	209, 0,
	210, 0,
	447, 0,
	448, 0,
	-2, 1331,
	-1, 2015,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1332,
	-1, 2027,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1344,
	-1, 2028,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1345,
	-1, 2029,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1346,
	-1, 2032,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1351,
	-1, 2038,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1355,
	-1, 2040,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1363,
	-1, 2041,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1364,
	-1, 2042,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1365,
	-1, 2043,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1366,
	-1, 2137,
	5, 1233,
	154, 1594,
	462, 1711,
	-2, 1702,
	-1, 2138,
	154, 1595,
	-2, 1980,
	-1, 2139,
	154, 1596,
	-2, 1844,
	-1, 2140,
	154, 1597,
	-2, 1766,
	-1, 2141,
	154, 1598,
	-2, 1802,
	-1, 2142,
	154, 1599,
	-2, 1842,
	-1, 2143,
	154, 1600,
	-2, 1917,
	-1, 2144,
	154, 1601,
	-2, 1428,
	-1, 2220,
	1, 1155,
	2, 1155,
	87, 1155,
	122, 1155,
	138, 1155,
	151, 1155,
	155, 1155,
	161, 1155,
	164, 1155,
	187, 1155,
	196, 1155,
	206, 1155,
	222, 1155,
	226, 1155,
	245, 1155,
	260, 1155,
	264, 1155,
	270, 1155,
	321, 1155,
	323, 1155,
	408, 1155,
	418, 1155,
	431, 1155,
	432, 1155,
	433, 1155,
	442, 1155,
	461, 1155,
	463, 1155,
	465, 1155,
	467, 1155,
	-2, 1154,
	-1, 2225,
	462, 1685,
	-2, 1697,
	-1, 2247,
	462, 1275,
	-2, 1265,
	-1, 2492,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1353,
	-1, 2493,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1357,
	-1, 2499,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1359,
	-1, 2682,
	203, 964,
	295, 964,
	302, 964,
	442, 964,
	-2, 492,
	-1, 2774,
	284, 1067,
	-2, 872,
	-1, 2863,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1361,
	-1, 2870,
	200, 0,
	202, 0,
	252, 0,
	-2, 1380,
	-1, 2933,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1409,
	-1, 2934,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1410,
	-1, 2935,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1411,
	-1, 2939,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1415,
	-1, 2940,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1416,
	-1, 2941,
	14, 0,
	15, 0,
	16, 0,
	443, 0,
	444, 0,
	445, 0,
	-2, 1417,
	-1, 2985,
	462, 1686,
	-2, 1698,
	-1, 3073,
	464, 2126,
	-2, 1007,
	-1, 3124,
	200, 0,
	202, 0,
	252, 0,
	-2, 1381,
	-1, 3127,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1384,
	-1, 3128,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1386,
	-1, 3289,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1385,
	-1, 3290,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1387,
	-1, 3300,
	200, 0,
	-2, 1418,
	-1, 3409,
	200, 0,
	-2, 1419,
	-1, 3527,
	43, 0,
	173, 0,
	225, 0,
	356, 0,
	440, 0,
	446, 0,
	-2, 1983,
}

const sqlPrivate = 57344

const sqlLast = 77334

var sqlAct = [...]int{

	905, 3621, 3330, 3526, 3536, 2615, 3333, 3611, 3505, 3496,
	3537, 3230, 3538, 2169, 3358, 2761, 3480, 3493, 3319, 3574,
	3365, 2386, 2901, 1021, 3413, 2616, 3254, 1995, 2211, 3525,
	834, 3106, 3278, 1175, 3065, 3060, 3370, 3186, 2055, 214,
	1650, 214, 214, 3259, 214, 214, 214, 214, 214, 1445,
	2757, 214, 2783, 2790, 3047, 2212, 1314, 2276, 2785, 592,
	1767, 571, 2855, 1620, 1200, 3006, 825, 2485, 2421, 2699,
	2419, 1528, 1893, 3304, 1076, 1651, 2375, 214, 1057, 2352,
	1618, 592, 2350, 2643, 2355, 3005, 2630, 1310, 689, 1013,
	2657, 3158, 2429, 1850, 1853, 2387, 2410, 2418, 2412, 2601,
	904, 2619, 3105, 1842, 1168, 1592, 1843, 2278, 2956, 1992,
	2520, 3414, 2334, 1366, 2213, 2335, 1538, 833, 142, 862,
	2600, 1556, 2068, 1988, 2481, 1776, 1187, 1805, 1801, 3359,
	2086, 2310, 2428, 2353, 86, 1794, 1752, 1064, 1871, 4,
	1754, 2621, 901, 1427, 2187, 2098, 2052, 821, 2311, 2662,
	1593, 2759, 2380, 2166, 2268, 1307, 1243, 1297, 1839, 2215,
	1177, 539, 1005, 2106, 1323, 2422, 2080, 1008, 1053, 1551,
	2195, 1602, 593, 1184, 2177, 2069, 987, 214, 214, 208,
	32, 877, 2133, 1519, 149, 1446, 150, 555, 594, 1444,
	588, 1838, 565, 142, 207, 1859, 1321, 664, 206, 633,
	525, 1273, 1197, 1766, 547, 542, 861, 550, 1010, 37,
	36, 736, 985, 34, 25, 683, 23, 21, 1450, 1426,
	752, 1255, 2974, 2516, 2975, 1873, 829, 3651, 1894, 2617,
	1529, 2186, 3642, 1873, 2800, 1873, 2186, 1061, 597, 3641,
	3620, 3603, 3601, 2186, 1810, 3200, 3200, 3560, 3558, 2680,
	3556, 3561, 2186, 600, 2186, 2573, 2574, 1061, 829, 3553,
	597, 824, 2434, 3554, 3550, 2799, 3547, 2179, 3551, 3523,
	1810, 699, 3522, 1810, 3521, 600, 1810, 3518, 1885, 3517,
	3475, 1885, 2960, 1885, 2240, 1016, 830, 2186, 1458, 1459,
	1038, 1491, 1492, 1493, 1501, 1502, 1503, 3469, 3468, 3463,
	3462, 2186, 2186, 3200, 3200, 3456, 3450, 1494, 1489, 1810,
	3200, 3476, 1033, 3448, 3411, 1461, 1218, 3200, 2240, 2588,
	1507, 3392, 3395, 1885, 3389, 1810, 1002, 809, 3200, 808,
	3348, 3347, 2960, 2535, 1810, 1810, 988, 988, 3340, 2536,
	1317, 3339, 1810, 1460, 3310, 3200, 3291, 3276, 1810, 2178,
	2240, 1885, 1480, 75, 3267, 1458, 1459, 838, 2813, 1477,
	816, 3227, 3218, 3217, 3199, 2186, 1019, 2186, 3200, 3126,
	3081, 1810, 3075, 2240, 2829, 1489, 2829, 3045, 2236, 2980,
	2970, 3046, 1461, 2981, 2971, 2963, 1034, 2894, 2882, 2186,
	989, 1810, 2186, 2579, 2828, 2820, 2752, 2614, 2829, 2821,
	1885, 2186, 2612, 2611, 2565, 2548, 2186, 2186, 2186, 2549,
	1460, 2537, 1810, 2821, 2083, 2186, 1483, 1484, 1485, 1486,
	2408, 2407, 2325, 2186, 1889, 1889, 1466, 2253, 2239, 2234,
	2227, 2186, 2240, 2186, 1810, 2185, 1888, 2267, 1725, 2186,
	1889, 991, 2813, 992, 2362, 1771, 2484, 903, 1872, 1809,
	1498, 2265, 1588, 1508, 1196, 2519, 1619, 1488, 1490, 3032,
	2573, 2574, 2858, 2838, 1804, 2801, 1368, 1745, 2206, 2205,
	182, 2204, 2203, 2202, 993, 990, 182, 1504, 2589, 1505,
	2084, 815, 814, 1217, 2802, 3175, 1475, 1476, 1874, 813,
	812, 811, 807, 1466, 806, 684, 1874, 2461, 1874, 805,
	804, 803, 1496, 802, 801, 800, 799, 798, 797, 796,
	184, 1481, 795, 734, 733, 1385, 184, 732, 731, 730,
	57, 687, 686, 729, 1488, 1490, 728, 727, 726, 1506,
	214, 725, 724, 723, 58, 722, 721, 720, 719, 718,
	717, 716, 715, 1206, 714, 3137, 1495, 2799, 62, 713,
	712, 711, 2085, 2082, 183, 710, 709, 708, 214, 698,
	183, 182, 1034, 697, 176, 214, 655, 654, 613, 612,
	611, 603, 177, 602, 2590, 601, 578, 118, 1481, 68,
	2178, 214, 1079, 214, 214, 1180, 214, 1079, 214, 1487,
	577, 576, 575, 151, 559, 204, 214, 214, 2579, 151,
	1063, 184, 2978, 1034, 1068, 2383, 203, 1482, 202, 74,
	1077, 201, 200, 199, 198, 1188, 1458, 1459, 197, 85,
	196, 214, 195, 194, 75, 82, 193, 192, 191, 190,
	189, 188, 1015, 1499, 2830, 214, 1881, 1180, 1180, 214,
	214, 187, 214, 1461, 1872, 183, 1963, 186, 185, 2660,
	2087, 2542, 1529, 182, 214, 176, 2531, 2340, 1559, 2228,
	2219, 1750, 214, 177, 1558, 2368, 1635, 1545, 76, 1202,
	1070, 1460, 1023, 3543, 1482, 1190, 214, 214, 214, 214,
	214, 1180, 1180, 2589, 151, 1562, 1180, 1458, 1459, 214,
	1180, 214, 214, 184, 2584, 2582, 2583, 2575, 2576, 2577,
	2578, 2580, 2581, 1896, 859, 214, 2124, 1489, 1540, 1559,
	1051, 2330, 2122, 2120, 1461, 1558, 3524, 1497, 927, 3444,
	1472, 1473, 1479, 1500, 1478, 1474, 1621, 1471, 1469, 1470,
	1462, 1463, 1464, 1465, 1467, 1468, 1557, 183, 1318, 2297,
	3147, 1180, 1460, 1072, 3146, 1165, 1170, 176, 1457, 3404,
	2081, 3398, 2118, 3268, 1466, 177, 3179, 1046, 3396, 2116,
	3263, 3157, 3156, 214, 3329, 3144, 3143, 3142, 1199, 3141,
	3135, 1895, 3134, 3133, 2245, 597, 151, 214, 77, 2590,
	3044, 2994, 1171, 2993, 1198, 2991, 1194, 1205, 2984, 1210,
	600, 1216, 214, 1340, 1471, 1469, 1470, 1462, 1463, 1464,
	1465, 1467, 1468, 2953, 142, 142, 2952, 1001, 2951, 2878,
	148, 80, 2874, 81, 2824, 1260, 2655, 2608, 2599, 2572,
	830, 2569, 2568, 1212, 2566, 1466, 1326, 1328, 2555, 2554,
	182, 2553, 182, 3030, 1301, 1304, 2550, 1256, 1256, 182,
	1541, 2547, 1539, 1815, 688, 2369, 1324, 2525, 118, 2524,
	2517, 2409, 182, 1311, 2573, 2574, 1488, 1490, 182, 2220,
	2091, 1257, 1457, 1847, 1527, 1540, 1813, 1458, 1459, 1456,
	184, 1395, 184, 3649, 3619, 1433, 1336, 1194, 3618, 184,
	182, 3559, 1022, 1339, 2903, 3513, 3511, 1489, 3441, 1017,
	3438, 3435, 184, 3434, 1461, 119, 3433, 3429, 184, 2584,
	2582, 2583, 2575, 2576, 2577, 2578, 2580, 2581, 152, 3423,
	1481, 3416, 1746, 2312, 183, 3393, 183, 3388, 3387, 1432,
	184, 2480, 1460, 183, 176, 1173, 176, 2058, 3325, 3302,
	3286, 1480, 177, 176, 177, 1386, 183, 3285, 1477, 1425,
	3273, 177, 183, 1387, 3272, 3252, 176, 832, 3249, 1345,
	3243, 3174, 176, 151, 177, 685, 1431, 3155, 3262, 3095,
	177, 3092, 2382, 1360, 183, 3021, 3020, 3009, 2573, 2574,
	3008, 2966, 1443, 2869, 176, 151, 2831, 1249, 1252, 1430,
	2814, 151, 177, 2777, 2746, 2724, 2702, 214, 2701, 2676,
	1211, 2613, 2579, 2546, 2674, 1483, 1484, 1485, 1486, 2064,
	2545, 2530, 1428, 151, 830, 1466, 1482, 2367, 2508, 2349,
	1563, 1560, 1590, 214, 1599, 1552, 1549, 2249, 809, 2248,
	808, 2223, 2200, 214, 1079, 214, 214, 214, 214, 1434,
	1332, 2184, 2114, 592, 214, 214, 1488, 1490, 592, 214,
	1523, 1634, 1591, 1645, 214, 1587, 1453, 1454, 1586, 1585,
	1180, 1584, 1638, 1561, 1583, 1582, 1581, 1458, 1459, 1717,
	1464, 1465, 1467, 1468, 1580, 1475, 1476, 2242, 1579, 1458,
	1459, 1079, 1577, 1576, 1629, 1575, 1609, 1574, 1573, 1897,
	1572, 1352, 1571, 1722, 1461, 1570, 1569, 1637, 1568, 1489,
	1481, 1553, 1554, 1567, 2702, 1748, 1461, 1566, 1647, 1751,
	1565, 1596, 1597, 1714, 1542, 1716, 2579, 2636, 1016, 1524,
	1016, 1522, 1460, 1517, 1045, 1643, 1036, 1029, 3248, 3176,
	3130, 2990, 142, 2973, 1460, 1458, 1459, 1469, 1470, 1462,
	1463, 1464, 1465, 1467, 1468, 2969, 2534, 1630, 2201, 3314,
	3178, 2573, 2574, 2989, 830, 1489, 988, 1541, 2672, 1520,
	3220, 1628, 1461, 1745, 1065, 1061, 1656, 2573, 2574, 3436,
	182, 2786, 3266, 1745, 2152, 1745, 3219, 2123, 1487, 1641,
	1621, 1771, 2727, 2121, 2119, 2976, 2816, 1626, 1458, 1459,
	1460, 1572, 1741, 1067, 2815, 1614, 1482, 3399, 1058, 1019,
	1423, 1019, 1719, 3371, 3397, 1466, 1180, 214, 1639, 1589,
	184, 1359, 1760, 1079, 1572, 1461, 2314, 1466, 1642, 2552,
	860, 1744, 597, 2117, 1617, 1616, 1623, 597, 1615, 1613,
	2115, 1612, 1611, 1646, 3328, 3055, 1194, 600, 1713, 1367,
	1559, 1811, 600, 1460, 1061, 1066, 1558, 2551, 1488, 1490,
	1648, 1061, 214, 214, 183, 1791, 2490, 2299, 1793, 214,
	1720, 1798, 1062, 3019, 176, 2763, 1894, 2762, 1547, 214,
	1736, 1735, 177, 1466, 1745, 1742, 1731, 1000, 214, 1737,
	214, 3366, 214, 1368, 1844, 3036, 214, 793, 3023, 2579,
	1059, 2836, 2740, 151, 182, 1789, 2083, 1060, 214, 3305,
	1848, 3622, 1481, 2617, 1488, 1490, 2573, 2574, 2577, 2578,
	2580, 2581, 1775, 1478, 1474, 2905, 1471, 1469, 1470, 1462,
	1463, 1464, 1465, 1467, 1468, 2540, 794, 2099, 1396, 2247,
	1802, 1526, 1578, 3544, 184, 1555, 1052, 2755, 1180, 1835,
	1180, 214, 1180, 1233, 3555, 214, 3552, 2795, 1180, 3001,
	3490, 1180, 214, 3061, 214, 214, 2416, 1831, 1481, 2379,
	3590, 1442, 2084, 3589, 1180, 1180, 1180, 1865, 214, 3455,
	2477, 1739, 2684, 214, 2589, 774, 3210, 1856, 183, 1199,
	1231, 1349, 592, 214, 1221, 214, 597, 214, 176, 214,
	3545, 214, 3646, 2280, 650, 1198, 177, 1440, 1482, 789,
	2254, 600, 3357, 1067, 1797, 214, 3350, 1393, 214, 1808,
	214, 2573, 2574, 787, 3038, 785, 828, 151, 783, 214,
	2575, 2576, 2577, 2578, 2580, 2581, 3034, 780, 3033, 1913,
	1823, 645, 1949, 1899, 2085, 2082, 1768, 1061, 1825, 1824,
	214, 1947, 2686, 2998, 2579, 1863, 214, 2997, 1732, 214,
	1876, 1834, 1232, 1878, 1482, 1066, 1880, 2673, 3197, 2529,
	1883, 1058, 2528, 1678, 1067, 1015, 1764, 1015, 828, 2527,
	2590, 1079, 830, 651, 830, 1901, 2526, 1861, 2494, 1858,
	1394, 2332, 2324, 2283, 2321, 2302, 3194, 1769, 1770, 2726,
	827, 2235, 1392, 2039, 1740, 1429, 2110, 823, 1324, 1996,
	1324, 1195, 644, 2243, 1441, 2109, 1976, 1967, 1997, 1462,
	1463, 1464, 1465, 1467, 1468, 1765, 1066, 1266, 3284, 1265,
	1470, 1462, 1463, 1464, 1465, 1467, 1468, 1904, 3195, 2589,
	1347, 3454, 2087, 1046, 1890, 2376, 1891, 1058, 2301, 777,
	2271, 2837, 827, 1903, 1993, 1994, 1806, 2070, 2071, 2579,
	1285, 3606, 2269, 1059, 1961, 2271, 1079, 1264, 1630, 1263,
	1060, 597, 1908, 1439, 829, 2070, 2096, 2269, 2261, 2226,
	2290, 1957, 1929, 1962, 1342, 1973, 600, 1462, 1463, 1464,
	1465, 1467, 1468, 3335, 2100, 1970, 1361, 1227, 1656, 1656,
	1965, 2582, 2583, 2575, 2576, 2577, 2578, 2580, 2581, 214,
	2318, 2132, 1974, 2136, 2136, 2150, 1971, 2070, 1746, 2312,
	2170, 2172, 1436, 3221, 2581, 2176, 829, 2054, 1746, 2312,
	1746, 2312, 2062, 3607, 2282, 2590, 1244, 1964, 2060, 1059,
	1079, 214, 2081, 1966, 2589, 1468, 1060, 1422, 2099, 3515,
	214, 1975, 2289, 214, 2054, 809, 1079, 1984, 809, 809,
	1985, 1986, 1862, 1916, 2050, 643, 2843, 642, 2224, 2842,
	2464, 1960, 1242, 2458, 3589, 1917, 2087, 830, 2095, 1358,
	1368, 1343, 1044, 3190, 2225, 1391, 2233, 3191, 2048, 1026,
	830, 1922, 1892, 3626, 830, 646, 2482, 2483, 1806, 3206,
	1969, 1902, 2207, 3011, 844, 2221, 2217, 2218, 653, 652,
	1061, 1241, 826, 3579, 1910, 1911, 1912, 2683, 2888, 3609,
	1024, 3111, 2066, 1406, 1016, 3283, 1918, 3193, 3541, 1746,
	1743, 706, 1017, 3110, 1017, 2792, 214, 2093, 2737, 3196,
	2590, 2108, 1229, 579, 1180, 2300, 2112, 2113, 1016, 2281,
	1382, 1601, 2208, 2467, 1959, 2793, 1771, 2583, 2575, 2576,
	2577, 2578, 2580, 2581, 826, 2192, 1755, 2191, 988, 1368,
	1756, 1079, 3636, 2732, 1923, 1677, 214, 1722, 1956, 2161,
	1873, 1788, 830, 2145, 214, 2174, 1061, 142, 1773, 1628,
	3430, 2182, 2183, 537, 2044, 214, 2193, 2197, 2198, 2266,
	791, 1383, 2045, 1027, 790, 1019, 2046, 1348, 214, 2237,
	2051, 1180, 2792, 1244, 2685, 1626, 2087, 532, 781, 1605,
	781, 682, 3473, 782, 214, 1079, 1762, 1983, 1180, 1019,
	214, 214, 781, 1777, 1550, 3035, 1948, 2714, 2670, 2364,
	585, 1284, 3192, 2244, 3204, 1946, 2272, 1561, 2322, 1762,
	3239, 1608, 1781, 2466, 3542, 1771, 214, 2749, 214, 1757,
	3608, 214, 3107, 2575, 2576, 2577, 2578, 2580, 2581, 3578,
	1603, 2463, 1759, 2305, 2252, 3022, 214, 818, 1226, 769,
	2713, 3336, 3296, 214, 2337, 214, 1606, 214, 1553, 1554,
	2270, 3596, 3501, 214, 3440, 1778, 214, 2251, 214, 1516,
	214, 820, 214, 214, 2336, 214, 1180, 1180, 1180, 1604,
	1180, 2333, 2319, 2255, 2544, 214, 214, 1656, 214, 214,
	2196, 2304, 2359, 587, 1403, 3280, 778, 1761, 2632, 214,
	3540, 2284, 2286, 769, 2313, 2315, 2316, 2317, 3012, 819,
	2390, 2275, 214, 214, 214, 2090, 2292, 214, 3614, 214,
	2465, 1958, 214, 2047, 214, 820, 214, 2303, 2885, 3471,
	2153, 1344, 2049, 2403, 2404, 2496, 3205, 2296, 2061, 2373,
	2320, 1921, 1435, 2036, 770, 1782, 2430, 214, 214, 214,
	214, 214, 214, 3627, 214, 2216, 1755, 1607, 3472, 2399,
	1756, 1792, 2053, 2432, 3247, 2435, 2436, 829, 2329, 2433,
	1025, 2347, 1199, 2336, 2415, 2336, 1171, 3240, 707, 597,
	3577, 2448, 214, 2449, 1915, 2342, 1404, 2344, 2338, 2363,
	3101, 2986, 1194, 581, 600, 1762, 142, 3279, 770, 1357,
	2886, 2446, 1043, 1039, 2385, 3637, 1783, 1784, 3112, 2257,
	2437, 586, 2438, 1874, 2392, 1779, 3539, 3588, 2405, 3586,
	1370, 2259, 3376, 2396, 2443, 2397, 2720, 2398, 2400, 1762,
	2381, 3251, 2381, 2716, 2450, 2469, 2452, 2471, 2454, 2417,
	1324, 1015, 2781, 1755, 2406, 2371, 1780, 1756, 2401, 1757,
	533, 583, 2631, 2260, 2462, 1837, 1605, 2718, 1405, 1598,
	1800, 1037, 1759, 1032, 604, 1015, 2497, 524, 2258, 3049,
	1194, 1194, 1448, 2034, 2942, 3153, 2037, 1449, 2522, 2523,
	1799, 214, 1601, 3108, 1772, 1733, 2445, 1438, 1608, 771,
	580, 2856, 2663, 2532, 3631, 2451, 3342, 2453, 2087, 2455,
	3341, 3281, 534, 3323, 2475, 3420, 2717, 2194, 1730, 3612,
	1795, 3000, 1194, 2456, 2782, 2645, 2474, 1761, 2479, 2697,
	2693, 2323, 2372, 1606, 2472, 2033, 2354, 584, 2518, 2351,
	3481, 1769, 1770, 1785, 1758, 1857, 1757, 1846, 582, 1845,
	1819, 1980, 535, 771, 536, 2533, 1194, 3209, 1194, 1759,
	1605, 2884, 3442, 2306, 3208, 2188, 1516, 2476, 3066, 1796,
	1447, 1953, 1448, 1726, 3255, 2348, 3114, 1677, 1677, 1287,
	3364, 1079, 2610, 2495, 1909, 1728, 3362, 3324, 2624, 2625,
	2704, 3613, 1608, 830, 2703, 2488, 1972, 2968, 2626, 2646,
	214, 1729, 2629, 817, 1449, 772, 1384, 1786, 214, 2623,
	2628, 1603, 703, 2232, 1761, 214, 696, 2231, 214, 214,
	1079, 2230, 2943, 3615, 2229, 1762, 2402, 1606, 1258, 1079,
	2944, 3154, 2190, 2361, 1607, 1272, 214, 2189, 1270, 2650,
	705, 2644, 3331, 2539, 773, 1259, 3115, 1653, 2653, 827,
	1604, 214, 1981, 3630, 3425, 3231, 2689, 2661, 2825, 772,
	1447, 2648, 1855, 2640, 2751, 2639, 2035, 3593, 3360, 214,
	214, 214, 2638, 2651, 2652, 214, 605, 606, 214, 3159,
	1016, 2641, 3484, 2681, 2654, 214, 214, 214, 214, 214,
	3426, 2659, 1371, 2957, 2104, 1016, 2687, 3595, 773, 3321,
	2668, 214, 214, 214, 2307, 2308, 1420, 1418, 1017, 3207,
	214, 3443, 1762, 2658, 2635, 2679, 2671, 2605, 2606, 2607,
	3557, 3332, 214, 1180, 1016, 214, 2690, 2691, 1607, 2618,
	3437, 3322, 1017, 1079, 1400, 1398, 2634, 2647, 2633, 3301,
	3152, 1079, 2705, 1753, 2708, 2694, 214, 1381, 3485, 214,
	214, 2664, 2698, 1379, 3040, 2706, 3427, 2710, 2711, 214,
	1656, 1019, 1180, 214, 1758, 1180, 1180, 1180, 2603, 2661,
	608, 607, 214, 2602, 2649, 1346, 1019, 769, 214, 2766,
	2665, 2666, 2667, 214, 2788, 214, 1377, 2731, 2868, 2729,
	1375, 2834, 214, 2567, 1373, 2507, 1656, 1760, 2682, 820,
	1365, 1363, 2358, 2331, 1268, 1019, 2298, 2760, 2688, 2250,
	2153, 2153, 2677, 2678, 701, 702, 1180, 1180, 694, 695,
	609, 610, 1760, 1636, 214, 214, 2738, 1633, 214, 2719,
	1421, 1271, 1337, 2770, 1269, 1180, 704, 2725, 1945, 2797,
	2430, 2851, 2850, 823, 2460, 2747, 2734, 2459, 2440, 2430,
	2735, 1758, 2733, 2736, 2742, 1802, 2103, 1955, 1419, 1417,
	1926, 1715, 214, 1802, 1079, 214, 214, 1079, 214, 2748,
	2505, 1564, 770, 1341, 2721, 2722, 1248, 3535, 2723, 2304,
	1016, 2789, 2812, 3226, 3216, 3478, 1399, 1397, 3183, 214,
	3064, 1642, 1188, 3017, 2503, 1077, 1677, 779, 2741, 1380,
	1194, 3015, 2999, 2780, 2765, 1378, 2832, 2743, 2744, 2764,
	2377, 2745, 2153, 2153, 2153, 2794, 3575, 830, 2823, 2366,
	1834, 2365, 2827, 1451, 2803, 142, 142, 2345, 1887, 1886,
	1884, 1882, 1079, 935, 1879, 2805, 2806, 2807, 1376, 2808,
	2809, 2848, 1374, 1079, 2796, 214, 1372, 2810, 2811, 2871,
	1877, 2787, 1364, 1362, 1532, 2849, 1267, 1875, 1537, 1866,
	2893, 1019, 2833, 1816, 1814, 2839, 1803, 2840, 1790, 2841,
	1787, 2899, 210, 1774, 527, 528, 1763, 543, 527, 543,
	553, 558, 2896, 2784, 574, 3381, 1644, 1944, 2880, 2881,
	2845, 997, 210, 3590, 2486, 1749, 3507, 3275, 3270, 3269,
	2500, 2431, 1223, 2852, 3383, 2288, 2271, 2271, 2854, 1452,
	693, 3074, 2501, 2271, 210, 998, 2506, 771, 2269, 2287,
	784, 786, 1771, 2954, 1919, 2285, 1943, 1015, 1656, 1415,
	1416, 1942, 1924, 1993, 2912, 1458, 1459, 3432, 2846, 2876,
	214, 3406, 1015, 3160, 1458, 1459, 2309, 2291, 1455, 1993,
	2922, 538, 2328, 2895, 1723, 214, 2902, 2906, 2887, 2889,
	2890, 1079, 1461, 2739, 2327, 2326, 1194, 2911, 2487, 1653,
	1653, 1015, 2908, 2977, 2295, 2293, 2909, 1656, 1656, 3477,
	2950, 214, 3445, 2921, 3053, 3048, 2294, 2983, 2384, 2985,
	1460, 2919, 2175, 1656, 1656, 2972, 1718, 549, 2336, 1460,
	2946, 999, 2771, 1649, 3610, 2773, 2774, 2775, 2669, 3629,
	527, 527, 1529, 2907, 2573, 2574, 1458, 1459, 210, 2263,
	2262, 3447, 2947, 772, 1656, 2107, 1351, 214, 2988, 1016,
	1016, 142, 1350, 2961, 2962, 2959, 2891, 2263, 3024, 2675,
	2264, 2111, 2105, 2078, 1402, 2995, 3131, 1401, 2987, 2883,
	1527, 1525, 3638, 2955, 3417, 3354, 2818, 2819, 3315, 2502,
	3037, 3313, 773, 3242, 214, 214, 214, 3177, 2504, 2979,
	2964, 2965, 3098, 3091, 3080, 1806, 3059, 3043, 3042, 3041,
	3014, 1079, 214, 2804, 2778, 2776, 1180, 2442, 3028, 3029,
	3031, 2441, 2394, 2370, 2346, 2065, 1941, 1940, 1939, 1938,
	214, 1869, 1868, 1867, 3076, 1849, 1827, 3003, 1826, 1822,
	1019, 1019, 1821, 1820, 214, 214, 1180, 1180, 1180, 3068,
	214, 214, 214, 3039, 1818, 214, 214, 1015, 1817, 214,
	214, 1414, 1180, 1413, 1296, 1295, 2698, 1294, 214, 1079,
	2992, 3057, 1293, 3067, 1292, 3071, 3056, 3016, 1291, 3018,
	1290, 1289, 1288, 2153, 2153, 3070, 1286, 2390, 1281, 1079,
	1280, 1279, 2304, 1278, 1277, 1240, 1239, 1238, 1237, 1236,
	3052, 1235, 1234, 1228, 1222, 1220, 1219, 1042, 3058, 1041,
	1656, 972, 882, 1724, 1017, 792, 637, 2430, 3099, 3129,
	776, 3087, 3334, 3062, 3069, 3077, 1408, 73, 3072, 1017,
	1230, 1016, 3078, 624, 214, 67, 3013, 3489, 3088, 3089,
	3125, 3083, 3082, 2712, 1925, 1369, 1927, 3096, 3093, 3090,
	3094, 2637, 3097, 2199, 3470, 3116, 3138, 2543, 1017, 3412,
	3295, 2102, 1546, 2153, 2153, 2153, 2153, 2153, 2153, 2153,
	2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153,
	2153, 2153, 3109, 2153, 69, 870, 955, 3238, 3104, 1677,
	3237, 3184, 3002, 2420, 1834, 3235, 3234, 214, 837, 1082,
	1734, 3117, 876, 1747, 2246, 2135, 1657, 1079, 879, 1079,
	1654, 881, 1019, 880, 1655, 1548, 878, 1652, 1653, 1656,
	2360, 2388, 1275, 756, 1738, 1677, 2059, 2097, 214, 214,
	214, 2538, 1543, 850, 872, 2094, 1035, 3172, 849, 2642,
	214, 2791, 2982, 3261, 1979, 3100, 214, 2478, 214, 3151,
	640, 214, 214, 214, 2570, 2079, 1028, 2158, 2151, 2147,
	2378, 3165, 1424, 1079, 214, 214, 1180, 1518, 2389, 1079,
	1069, 1180, 853, 3168, 2057, 1534, 2512, 214, 1437, 2798,
	3167, 2656, 3164, 3162, 3163, 3180, 3181, 2241, 3169, 3504,
	1987, 1016, 214, 1030, 1836, 1079, 996, 995, 1180, 1016,
	3182, 2658, 3173, 3211, 3203, 3201, 1015, 1015, 994, 1600,
	3495, 3492, 1016, 2758, 1017, 3213, 3214, 3212, 1727, 3170,
	2256, 1040, 1510, 2767, 3202, 866, 214, 3229, 574, 1193,
	2622, 3257, 3161, 2826, 3232, 1245, 3431, 1509, 1079, 788,
	3166, 3422, 1056, 1055, 210, 3233, 210, 210, 3223, 1185,
	3260, 210, 1054, 2696, 3635, 3256, 3010, 181, 1968, 210,
	1201, 822, 3245, 178, 3244, 180, 1077, 179, 1079, 3224,
	3026, 2750, 1019, 3265, 90, 35, 3258, 16, 117, 116,
	1019, 3228, 115, 114, 1225, 113, 3084, 3085, 3086, 112,
	3274, 111, 110, 1019, 109, 108, 3293, 107, 1247, 106,
	105, 104, 210, 210, 3307, 1185, 1079, 3253, 3271, 103,
	102, 101, 3282, 100, 214, 3287, 214, 210, 1079, 214,
	99, 98, 97, 96, 95, 1283, 3303, 214, 94, 3292,
	93, 2063, 92, 91, 3293, 570, 567, 49, 48, 210,
	210, 210, 210, 1185, 89, 3318, 1996, 2509, 2510, 214,
	1532, 88, 574, 15, 210, 210, 33, 1677, 13, 3241,
	53, 3311, 836, 1834, 3246, 54, 3308, 3309, 693, 12,
	214, 1900, 28, 3312, 214, 29, 79, 78, 1015, 27,
	3353, 14, 214, 26, 3316, 3317, 3264, 1180, 3363, 24,
	3368, 10, 8, 214, 3338, 7, 3337, 2157, 30, 1610,
	11, 147, 146, 72, 145, 1656, 1677, 1677, 71, 144,
	3351, 143, 70, 3355, 214, 214, 3344, 3361, 22, 9,
	3378, 139, 1677, 1677, 3367, 3369, 210, 3054, 66, 3402,
	3403, 2760, 141, 140, 63, 3385, 214, 138, 137, 3384,
	210, 3379, 214, 3380, 3377, 3260, 64, 136, 135, 2596,
	2597, 2598, 214, 1677, 65, 558, 3372, 3382, 134, 20,
	1656, 5, 52, 1017, 1017, 3373, 6, 3277, 3375, 2835,
	3419, 3386, 83, 3410, 84, 3428, 31, 61, 60, 3394,
	3345, 3346, 59, 19, 51, 3418, 18, 171, 3390, 3391,
	170, 169, 3405, 168, 163, 162, 167, 3415, 165, 164,
	166, 161, 3401, 133, 3439, 173, 3225, 214, 1180, 172,
	175, 159, 155, 154, 214, 158, 160, 157, 1180, 1180,
	156, 153, 174, 132, 1180, 131, 3461, 56, 214, 130,
	214, 129, 128, 127, 126, 55, 3446, 17, 1015, 2,
	3449, 3452, 1, 0, 3453, 0, 1015, 0, 0, 0,
	3474, 0, 1656, 0, 214, 0, 0, 0, 3465, 1015,
	214, 214, 0, 1079, 0, 0, 0, 0, 3458, 0,
	0, 214, 214, 3486, 3459, 3460, 0, 0, 3372, 3498,
	3464, 1653, 3502, 3457, 0, 3510, 3508, 3512, 0, 0,
	3491, 1996, 3466, 0, 3467, 3494, 3497, 3499, 0, 3520,
	0, 0, 0, 3519, 0, 0, 0, 214, 0, 1677,
	3514, 0, 3516, 1194, 0, 0, 0, 1653, 0, 3546,
	0, 0, 0, 0, 3487, 0, 0, 0, 0, 3506,
	3534, 3533, 3531, 3532, 0, 1017, 0, 0, 0, 0,
	2153, 0, 3548, 0, 0, 0, 214, 0, 0, 0,
	527, 0, 3564, 3562, 3566, 0, 0, 0, 0, 0,
	3563, 3576, 3572, 0, 3571, 0, 214, 3568, 0, 0,
	0, 210, 0, 210, 0, 0, 210, 0, 0, 3587,
	3585, 3582, 3583, 2153, 3584, 0, 1201, 0, 1185, 210,
	214, 210, 214, 0, 3594, 3591, 210, 1201, 543, 3592,
	3598, 210, 1201, 2390, 3604, 0, 0, 574, 3599, 3600,
	0, 3602, 0, 3494, 0, 0, 3497, 3605, 1677, 0,
	3569, 3570, 0, 0, 3573, 0, 3617, 3565, 3616, 3567,
	0, 0, 0, 0, 3624, 0, 0, 0, 3623, 0,
	3625, 0, 0, 0, 3628, 0, 0, 0, 0, 3506,
	3632, 0, 0, 0, 3597, 0, 3509, 0, 0, 0,
	0, 0, 3633, 3634, 0, 3639, 0, 3640, 0, 0,
	0, 0, 0, 0, 0, 3647, 3648, 0, 0, 836,
	0, 0, 0, 836, 3643, 3644, 3645, 0, 0, 2153,
	2864, 2865, 0, 3650, 0, 1017, 3652, 0, 0, 0,
	0, 0, 0, 1017, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1203, 1017, 1207, 0, 1213,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1653,
	0, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 62, 0, 2157, 2157, 0,
	2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932,
	2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 0,
	2945, 0, 0, 0, 0, 0, 68, 0, 1653, 1653,
	0, 0, 0, 0, 1335, 210, 210, 212, 0, 0,
	0, 1338, 210, 0, 1653, 1653, 0, 1458, 1459, 0,
	0, 0, 1854, 0, 0, 0, 74, 0, 0, 0,
	0, 210, 0, 210, 0, 210, 85, 1489, 0, 527,
	0, 75, 82, 0, 1461, 1653, 0, 0, 0, 0,
	0, 1870, 3197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1388, 0, 0, 0, 2157,
	2157, 2157, 1460, 0, 0, 0, 0, 0, 0, 0,
	3194, 1480, 0, 3187, 0, 76, 0, 0, 1477, 0,
	0, 0, 0, 0, 574, 0, 0, 3185, 693, 0,
	0, 0, 0, 3189, 1677, 210, 0, 1185, 210, 0,
	0, 0, 0, 0, 1458, 1459, 0, 0, 0, 0,
	0, 574, 3195, 0, 0, 0, 210, 3120, 0, 0,
	0, 0, 0, 0, 1489, 210, 210, 0, 210, 0,
	210, 1461, 210, 0, 210, 1483, 1484, 1485, 1486, 1511,
	1512, 1513, 1514, 1515, 3188, 1466, 0, 0, 1950, 1677,
	848, 1951, 0, 1952, 0, 0, 0, 0, 0, 1460,
	0, 0, 210, 0, 0, 0, 2238, 0, 1480, 1531,
	0, 0, 0, 0, 0, 1544, 1488, 1490, 0, 0,
	0, 0, 0, 558, 0, 77, 0, 0, 0, 574,
	0, 1653, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 1476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 80, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 0, 1483, 1484, 1485, 1486, 0, 0, 0, 182,
	0, 1677, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 688, 0, 0, 0, 118, 0, 3190, 0, 0,
	0, 3191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 1490, 0, 0, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1594, 1594, 1594, 0, 0, 0,
	1653, 3193, 119, 0, 0, 0, 0, 0, 1487, 0,
	0, 0, 0, 3196, 0, 152, 0, 0, 0, 0,
	0, 0, 0, 183, 0, 0, 1482, 1481, 0, 0,
	0, 0, 0, 176, 0, 0, 0, 0, 0, 0,
	0, 177, 527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 0,
	0, 0, 151, 0, 836, 0, 0, 0, 0, 0,
	0, 0, 2573, 2574, 527, 2591, 2592, 2593, 0, 0,
	0, 210, 0, 527, 0, 0, 210, 0, 0, 0,
	0, 3122, 0, 0, 0, 0, 0, 0, 0, 0,
	2157, 2157, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3192, 0, 0, 0,
	0, 0, 0, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2588, 0, 0, 0,
	0, 0, 0, 1478, 1474, 0, 1471, 1469, 1470, 1462,
	1463, 1464, 1465, 1467, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 543,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2157, 2157, 2157, 2157, 2157, 2157, 2157, 2157, 2157, 2157,
	2157, 2157, 2157, 2157, 2157, 2157, 2157, 2157, 2157, 0,
	2157, 0, 0, 0, 0, 0, 0, 0, 0, 2279,
	2579, 0, 0, 0, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 3300, 0, 0,
	0, 210, 0, 1471, 1469, 1470, 1462, 1463, 1464, 1465,
	1467, 1468, 0, 0, 0, 0, 0, 210, 0, 0,
	0, 2594, 0, 210, 2339, 0, 0, 848, 57, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 0, 1163,
	3326, 0, 58, 0, 1163, 0, 1653, 0, 0, 210,
	0, 1201, 0, 0, 210, 2589, 62, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1854,
	0, 0, 0, 0, 0, 0, 2279, 0, 527, 0,
	2393, 0, 0, 0, 0, 0, 210, 68, 0, 210,
	0, 210, 0, 210, 0, 210, 210, 0, 1185, 0,
	0, 1653, 0, 0, 0, 0, 0, 0, 2413, 693,
	0, 2279, 2279, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 75, 82, 0, 210, 1185, 210, 0, 0,
	1201, 0, 1201, 0, 0, 1185, 3409, 1185, 0, 1185,
	0, 2590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 210, 210, 210, 1185, 210, 76, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1653, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 1978, 0, 1982,
	0, 0, 0, 0, 0, 1989, 0, 0, 0, 0,
	0, 0, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
	2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
	2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025,
	2026, 2027, 2028, 2029, 2030, 2031, 2032, 0, 2038, 0,
	2040, 2041, 2042, 2043, 2585, 2586, 2587, 0, 0, 0,
	0, 2584, 2582, 2583, 2575, 2576, 2577, 2578, 2580, 2581,
	2067, 0, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 1531, 0, 0, 0, 2092,
	0, 0, 0, 0, 1201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 80,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	2125, 2126, 2127, 2128, 2129, 2130, 2131, 0, 0, 0,
	182, 2149, 0, 2160, 2162, 2167, 0, 0, 0, 0,
	0, 0, 688, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 527, 0, 0, 152, 0, 0, 0,
	0, 527, 0, 0, 183, 0, 0, 0, 527, 0,
	0, 527, 527, 0, 176, 0, 0, 210, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 1201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 1201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1163, 2279, 2279, 210, 0, 0, 0, 2279, 0,
	0, 2700, 0, 0, 0, 0, 0, 0, 2279, 2700,
	2279, 2700, 2700, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 210, 210, 2157, 0, 0,
	0, 0, 848, 0, 0, 0, 1458, 1459, 1163, 1491,
	1492, 1493, 1501, 1502, 1503, 210, 0, 0, 1185, 0,
	0, 0, 0, 0, 0, 1494, 1489, 0, 0, 0,
	0, 0, 0, 1461, 0, 0, 0, 0, 1507, 2754,
	2157, 0, 2756, 2279, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 2341, 0, 2343, 210, 0, 0, 0,
	0, 1460, 0, 0, 0, 210, 0, 0, 0, 0,
	1480, 1185, 0, 210, 0, 0, 2279, 1477, 527, 0,
	0, 0, 0, 0, 0, 2279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 210, 1854, 0,
	0, 1854, 0, 1461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 1484, 1485, 1486, 0, 0,
	1163, 0, 0, 0, 1466, 0, 2157, 0, 0, 0,
	0, 1460, 0, 0, 0, 2844, 0, 0, 1185, 210,
	1480, 210, 0, 0, 0, 0, 0, 1477, 1498, 0,
	0, 1508, 0, 57, 0, 1488, 1490, 0, 0, 0,
	0, 0, 210, 2457, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 1505, 0, 0,
	0, 62, 0, 0, 1475, 1476, 2867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 1483, 1484, 1485, 1486, 0, 1481,
	0, 0, 68, 0, 1466, 0, 0, 0, 2904, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 1495, 1488, 1490, 0, 0, 0,
	0, 0, 85, 2492, 2493, 0, 0, 75, 82, 2499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 1476, 0, 0, 2513, 2514,
	0, 0, 0, 0, 2092, 0, 0, 1487, 0, 0,
	0, 0, 0, 2521, 0, 0, 0, 0, 0, 1481,
	0, 76, 210, 210, 0, 1482, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 0, 2541,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 1499, 0, 0, 2556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1487, 1163, 0,
	0, 0, 0, 2167, 2167, 2167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 0, 1594, 0,
	574, 0, 0, 0, 0, 0, 2627, 0, 0, 0,
	0, 77, 0, 0, 0, 1497, 0, 0, 1472, 1473,
	1479, 1500, 1478, 1474, 0, 1471, 1469, 1470, 1462, 1463,
	1464, 1465, 1467, 1468, 0, 0, 0, 3050, 210, 210,
	0, 0, 3145, 148, 80, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 1163, 0, 182, 0, 0, 0, 0,
	0, 0, 836, 2279, 210, 0, 0, 688, 0, 0,
	0, 118, 0, 0, 0, 836, 0, 2413, 2413, 0,
	0, 0, 0, 693, 693, 2279, 0, 0, 1854, 1854,
	0, 0, 693, 2279, 0, 184, 0, 1458, 1459, 0,
	2715, 210, 1478, 1474, 0, 1471, 1469, 1470, 1462, 1463,
	1464, 1465, 1467, 1468, 0, 936, 0, 1489, 119, 0,
	0, 0, 0, 0, 1461, 0, 0, 1163, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 0, 0, 183,
	0, 0, 0, 1163, 0, 0, 0, 0, 0, 176,
	0, 0, 1460, 0, 211, 0, 0, 177, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 3139, 1477, 0,
	0, 0, 0, 0, 211, 0, 0, 0, 1329, 0,
	0, 0, 0, 2573, 2574, 0, 2591, 2592, 2593, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2862, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 1483, 1484, 1485, 1486, 0,
	1201, 0, 210, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 2588, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1163, 0,
	0, 2279, 2279, 2279, 0, 0, 1488, 1490, 0, 0,
	0, 0, 0, 1201, 0, 0, 0, 0, 0, 2279,
	0, 2700, 0, 0, 1201, 1201, 210, 0, 0, 0,
	2853, 0, 0, 0, 1989, 1475, 1476, 210, 210, 0,
	2859, 2860, 0, 0, 2863, 0, 0, 0, 2866, 0,
	2279, 0, 1163, 0, 0, 0, 0, 2870, 0, 0,
	1481, 2579, 0, 0, 0, 3250, 2877, 0, 0, 2627,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2897, 0, 0, 0, 0, 0, 0, 0, 0, 1201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2913,
	2914, 0, 2915, 2916, 2917, 0, 0, 2918, 0, 0,
	0, 2920, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 0, 2589, 0, 0, 0,
	0, 0, 2948, 2949, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2958, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 2967, 0, 0, 0, 0, 2279, 0, 2700,
	0, 0, 3320, 0, 598, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 0, 0, 0,
	0, 0, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2996, 0, 0, 0,
	0, 0, 2590, 3320, 0, 0, 0, 2279, 0, 0,
	0, 3004, 3007, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1201, 0, 0, 0,
	0, 0, 0, 1478, 1474, 3025, 1471, 1469, 1470, 1462,
	1463, 1464, 1465, 1467, 1468, 0, 0, 210, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2904,
	125, 0, 0, 0, 0, 527, 57, 0, 0, 0,
	1018, 0, 0, 0, 0, 3320, 0, 0, 0, 0,
	58, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1594, 0, 62, 0, 0, 0, 0, 0,
	0, 3079, 0, 0, 0, 2585, 2586, 2587, 0, 39,
	122, 0, 2584, 2582, 2583, 2575, 2576, 2577, 2578, 2580,
	2581, 0, 0, 38, 0, 68, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 2700, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	42, 1201, 0, 1201, 0, 74, 0, 0, 123, 0,
	0, 3118, 3119, 0, 40, 85, 0, 3123, 3124, 0,
	75, 82, 3127, 3128, 0, 0, 0, 3482, 1163, 3132,
	0, 0, 0, 1201, 210, 0, 211, 1084, 211, 211,
	1084, 0, 1084, 211, 210, 2279, 0, 43, 3136, 0,
	0, 211, 0, 0, 0, 3140, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 1163, 0, 0,
	0, 0, 0, 0, 0, 0, 1163, 0, 0, 0,
	2904, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 1084, 211, 211, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 2279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	1459, 211, 211, 211, 211, 0, 1084, 1084, 0, 3320,
	0, 1084, 0, 0, 0, 1084, 211, 211, 0, 1489,
	0, 0, 0, 0, 0, 0, 1461, 0, 3007, 0,
	0, 0, 0, 1201, 0, 2279, 0, 0, 0, 0,
	0, 0, 1458, 1459, 77, 0, 0, 0, 0, 0,
	1163, 0, 44, 0, 1460, 0, 0, 0, 1163, 0,
	0, 0, 1489, 1480, 0, 0, 1084, 0, 0, 1461,
	1477, 0, 0, 0, 0, 47, 148, 80, 0, 81,
	0, 45, 0, 0, 0, 124, 0, 0, 211, 0,
	0, 46, 0, 0, 0, 0, 0, 1460, 182, 0,
	0, 0, 211, 0, 0, 0, 1480, 0, 0, 2861,
	50, 0, 3007, 1477, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 1483, 1484, 1485,
	1486, 0, 0, 0, 0, 0, 0, 1466, 184, 0,
	3288, 3289, 3290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2498, 0, 215, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 3298, 3299, 0, 1488, 1490,
	1483, 1484, 1485, 1486, 152, 0, 0, 0, 0, 3306,
	1466, 1163, 183, 0, 1163, 0, 209, 0, 209, 209,
	0, 0, 176, 209, 0, 0, 0, 1475, 1476, 0,
	177, 598, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 1490, 591, 0, 0, 0, 0, 0, 0,
	3007, 151, 1481, 0, 3, 0, 0, 0, 3343, 0,
	0, 0, 0, 0, 0, 591, 3349, 0, 0, 836,
	1475, 1476, 0, 0, 209, 209, 3356, 0, 0, 1163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	1163, 0, 0, 0, 0, 1481, 0, 0, 0, 3007,
	0, 0, 3007, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 209, 209, 209, 0, 0, 0, 0, 0,
	0, 0, 3007, 3007, 0, 0, 209, 209, 0, 0,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 906, 0, 2573,
	2574, 0, 2591, 2592, 2593, 0, 0, 0, 211, 0,
	0, 0, 0, 1487, 0, 3421, 0, 0, 3424, 1084,
	0, 211, 211, 211, 0, 0, 0, 0, 211, 0,
	0, 1482, 0, 211, 0, 0, 0, 0, 209, 0,
	0, 57, 0, 0, 0, 1084, 0, 0, 1163, 0,
	0, 0, 209, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 2588, 0, 0, 1084, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 1478, 1474, 0, 1471, 1469,
	1470, 1462, 1463, 1464, 1465, 1467, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 2579, 0, 0,
	85, 0, 0, 0, 0, 75, 82, 0, 1478, 1474,
	0, 1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468,
	0, 3530, 3530, 3530, 2595, 0, 0, 0, 1163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3549, 0, 0, 0, 0, 0, 0, 0, 2594, 76,
	0, 1084, 211, 0, 0, 0, 0, 0, 1084, 0,
	0, 3007, 0, 3007, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3530, 0, 0,
	0, 0, 2589, 0, 0, 0, 1163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 211, 0,
	0, 0, 0, 0, 211, 0, 1163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 211, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1624, 0, 1018, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	3530, 209, 1624, 209, 0, 0, 0, 0, 598, 0,
	0, 0, 0, 598, 0, 0, 0, 0, 2590, 0,
	0, 0, 0, 1084, 0, 1084, 0, 1084, 0, 0,
	0, 148, 80, 1084, 81, 0, 1084, 211, 0, 0,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	1084, 1084, 0, 182, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 0, 1163, 688, 1163, 211, 211, 118,
	211, 0, 211, 0, 211, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 1080, 0, 0, 1181,
	0, 1080, 0, 0, 0, 0, 119, 0, 0, 0,
	1163, 0, 0, 0, 0, 0, 1163, 0, 0, 152,
	0, 2585, 2586, 2587, 211, 0, 0, 183, 2584, 2582,
	2583, 2575, 2576, 2577, 2578, 2580, 2581, 176, 0, 0,
	0, 0, 1163, 0, 0, 177, 1084, 0, 0, 0,
	0, 1181, 1181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 0, 0, 0, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2573, 2574,
	0, 2591, 2592, 2593, 0, 1163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1181, 1181, 3121, 0, 0,
	1181, 0, 0, 0, 1181, 0, 0, 209, 209, 0,
	0, 0, 0, 0, 209, 1163, 0, 0, 0, 0,
	0, 1458, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 209, 0, 209, 0, 209, 0, 0,
	0, 1489, 2588, 0, 0, 0, 0, 0, 1461, 0,
	0, 0, 0, 1163, 0, 1181, 0, 0, 2573, 2574,
	0, 2591, 2592, 2593, 0, 1163, 0, 0, 0, 1081,
	0, 0, 1182, 0, 1081, 0, 1460, 2873, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 0, 1084, 0, 209, 0, 0,
	209, 0, 0, 0, 0, 0, 2579, 0, 211, 0,
	0, 1084, 2588, 0, 1182, 1182, 0, 0, 209, 0,
	0, 2491, 0, 0, 0, 0, 0, 598, 209, 0,
	209, 0, 209, 0, 209, 0, 209, 0, 0, 1483,
	1484, 1485, 1486, 2573, 2574, 0, 2591, 2592, 2593, 1466,
	0, 0, 0, 0, 0, 0, 0, 2594, 1182, 1182,
	0, 0, 2872, 1182, 209, 0, 0, 1182, 0, 0,
	0, 0, 0, 0, 0, 871, 87, 0, 0, 0,
	1488, 1490, 0, 0, 0, 0, 2579, 0, 0, 0,
	0, 2589, 0, 0, 209, 0, 0, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 2588, 0, 1475,
	1476, 0, 0, 0, 0, 0, 0, 0, 1182, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 2594, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 1084, 0, 0, 0,
	0, 2589, 0, 0, 0, 0, 0, 0, 0, 211,
	1084, 2579, 0, 1084, 0, 211, 0, 2590, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1163, 0, 0, 0, 848, 0, 0, 0, 0, 0,
	0, 211, 1487, 0, 0, 0, 211, 0, 810, 0,
	0, 0, 0, 0, 0, 0, 0, 831, 1080, 0,
	1482, 0, 2594, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 0, 211, 0,
	0, 211, 0, 211, 1181, 211, 0, 211, 211, 1018,
	1006, 1084, 1084, 1084, 0, 1084, 2589, 2590, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 1018, 211, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 211,
	2585, 2586, 2587, 0, 0, 0, 0, 2584, 2582, 2583,
	2575, 2576, 2577, 2578, 2580, 2581, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 211, 211, 211, 0, 211, 0, 211,
	2573, 2574, 0, 2591, 2592, 2593, 0, 1478, 1474, 0,
	1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 0,
	0, 0, 2590, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2585, 2586, 2587, 0, 0, 0, 0, 2584, 2582, 2583,
	2575, 2576, 2577, 2578, 2580, 2581, 0, 0, 0, 0,
	1181, 1081, 0, 0, 2588, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 1182, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2585, 2586, 2587, 2579, 0,
	0, 0, 2584, 2582, 2583, 2575, 2576, 2577, 2578, 2580,
	2581, 209, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 2594,
	0, 209, 1181, 209, 1181, 209, 1181, 209, 209, 0,
	0, 0, 1181, 0, 0, 1181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 1181, 1181,
	1181, 0, 0, 2589, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 1182, 0, 0, 591, 209, 0, 209,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 209, 209, 209, 209, 0, 209, 0, 209,
	0, 1011, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2590,
	205, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 211, 211, 0,
	0, 0, 87, 0, 87, 211, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 1084, 0,
	0, 0, 0, 0, 0, 1182, 0, 1182, 1084, 1182,
	0, 0, 0, 0, 0, 1182, 1084, 0, 1182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1182, 1182, 1182, 211, 0, 0, 1084, 211, 0,
	1084, 1084, 1084, 0, 0, 0, 0, 211, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 831, 87, 87, 0, 0, 0, 0, 0, 0,
	0, 87, 2585, 2586, 2587, 0, 0, 0, 87, 2584,
	2582, 2583, 2575, 2576, 2577, 2578, 2580, 2581, 0, 0,
	0, 1084, 1084, 0, 0, 0, 0, 0, 0, 211,
	0, 1458, 1459, 0, 0, 0, 0, 1501, 1502, 1503,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 0, 0, 1080, 0, 0, 0, 1461, 0,
	87, 0, 0, 1507, 0, 1018, 0, 0, 1081, 1084,
	1080, 211, 1084, 211, 0, 0, 0, 0, 0, 0,
	1018, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 211, 1480, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 1624,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 0, 810,
	0, 0, 0, 0, 0, 0, 0, 656, 1084, 0,
	0, 0, 0, 1081, 0, 0, 209, 1521, 1181, 1483,
	1484, 1485, 1486, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 1530, 0, 0, 0, 1536,
	657, 0, 0, 0, 0, 1080, 209, 209, 209, 658,
	0, 0, 0, 1498, 0, 1624, 1508, 0, 0, 0,
	1488, 1490, 0, 0, 0, 659, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 679, 0, 0, 0, 1181, 0, 1081, 0, 1475,
	1476, 0, 0, 0, 0, 0, 660, 0, 0, 1080,
	0, 0, 1181, 1081, 209, 1496, 0, 0, 209, 0,
	0, 0, 0, 0, 1481, 661, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 1018, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 662, 0, 0, 663, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 678, 0, 0, 0, 0, 209,
	87, 0, 0, 1622, 0, 1625, 0, 0, 0, 0,
	1181, 1181, 1181, 0, 1181, 0, 0, 0, 0, 0,
	0, 1182, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 209, 0, 209, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 211, 0, 0, 209, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 211, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 1182, 0,
	0, 665, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 1182, 0, 0, 682, 666,
	0, 1084, 1084, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 1084, 0, 1192,
	0, 0, 0, 211, 1084, 0, 681, 0, 0, 0,
	0, 0, 0, 667, 0, 0, 668, 0, 0, 0,
	1497, 0, 676, 0, 1084, 0, 1500, 1478, 1474, 669,
	1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1182, 1182, 1182, 0, 1182, 0, 0,
	670, 677, 0, 0, 0, 1276, 0, 0, 671, 0,
	0, 0, 0, 0, 1018, 1018, 0, 0, 0, 0,
	0, 673, 0, 0, 0, 0, 672, 1300, 1300, 1300,
	1192, 0, 0, 0, 0, 0, 0, 0, 680, 0,
	0, 0, 1333, 1334, 0, 0, 0, 0, 0, 675,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 1459, 0, 1491, 1492, 1493, 1501, 1502,
	1503, 0, 1084, 0, 1084, 0, 0, 0, 0, 0,
	0, 1494, 1489, 0, 0, 0, 0, 0, 0, 1461,
	0, 0, 0, 0, 1507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1407, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 211, 0,
	0, 0, 0, 831, 0, 831, 1480, 0, 1084, 211,
	211, 1084, 0, 1477, 1084, 0, 1084, 0, 0, 0,
	209, 209, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 209, 0, 0,
	1084, 0, 0, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 1484, 1485, 1486, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 1508, 0, 0,
	0, 1488, 1490, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 810, 1181, 0, 810,
	810, 1504, 0, 1505, 0, 0, 0, 1080, 0, 0,
	1475, 1476, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 1496, 0, 1081, 0,
	0, 0, 0, 1084, 0, 1481, 1181, 0, 0, 1181,
	1181, 1181, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 2056, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 831, 0,
	1495, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 1530, 0, 0, 0, 1530, 1018, 0, 0, 0,
	1181, 1181, 0, 0, 1018, 0, 0, 211, 0, 0,
	0, 0, 1084, 0, 1631, 0, 0, 1624, 0, 1181,
	0, 0, 0, 1487, 0, 0, 0, 1640, 0, 1192,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	211, 1482, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 209, 1006,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 209,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1182, 0, 0, 1625, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1182,
	0, 0, 1182, 1182, 1182, 0, 0, 1080, 0, 0,
	0, 0, 211, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 1084, 0, 0, 0, 0, 1084,
	0, 1497, 0, 0, 1472, 1473, 1479, 1500, 1478, 1474,
	0, 1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468,
	0, 0, 0, 1182, 1182, 0, 0, 0, 2875, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 1084, 0,
	0, 0, 1182, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 87, 0, 1081, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1829, 0, 1080, 0, 0, 0, 0,
	1841, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1276,
	87, 1860, 87, 1860, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 1081,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 87, 0, 209,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1841, 87, 0, 1906, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1920, 1080, 0, 0, 0, 0,
	1181, 0, 0, 0, 1930, 0, 1932, 0, 1934, 0,
	1936, 0, 1937, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	1181, 1181, 1181, 0, 0, 0, 0, 0, 0, 0,
	1954, 0, 209, 0, 0, 0, 1181, 0, 1081, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1300, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 0, 0, 1458, 1459, 0,
	1491, 1492, 1493, 1501, 1502, 1503, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 615, 209, 1489, 0, 0,
	0, 0, 0, 0, 1461, 0, 0, 0, 0, 1507,
	0, 0, 0, 2056, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 616, 635,
	0, 0, 1460, 0, 1530, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 1477, 0,
	617, 0, 0, 618, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 1182, 0, 0, 0, 0, 0, 641,
	0, 0, 0, 0, 0, 619, 0, 0, 0, 0,
	0, 1080, 0, 1080, 639, 0, 0, 0, 0, 0,
	0, 0, 0, 1182, 1182, 1182, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 1483, 1484, 1485, 1486, 1182,
	0, 0, 0, 0, 0, 1466, 1081, 0, 0, 0,
	0, 0, 0, 621, 0, 0, 622, 645, 0, 0,
	0, 648, 0, 0, 0, 0, 1081, 1080, 0, 1498,
	1181, 0, 1508, 1080, 0, 1181, 1488, 1490, 0, 0,
	0, 0, 0, 0, 2222, 1006, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 1505, 1080,
	1006, 0, 1181, 0, 0, 1475, 1476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 644, 0,
	1481, 0, 0, 0, 0, 0, 625, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 623,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 0, 0, 1081, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 0, 87,
	87, 0, 0, 87, 0, 0, 0, 0, 1487, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 647, 0, 1482, 0, 0, 0,
	0, 0, 87, 87, 628, 0, 87, 0, 0, 0,
	1081, 0, 0, 1182, 0, 0, 1081, 629, 1182, 0,
	0, 0, 1499, 0, 0, 1192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 634, 0, 0, 0,
	0, 0, 1081, 0, 0, 1182, 0, 0, 630, 0,
	0, 643, 0, 642, 0, 1006, 631, 2357, 831, 0,
	0, 1181, 1841, 0, 0, 0, 0, 0, 0, 632,
	0, 0, 0, 0, 638, 0, 0, 0, 0, 649,
	0, 646, 0, 87, 87, 1081, 636, 0, 0, 0,
	0, 0, 0, 0, 2395, 0, 0, 1300, 0, 1300,
	0, 1300, 0, 1192, 1192, 0, 1497, 0, 0, 1472,
	1473, 1479, 1500, 1478, 1474, 1081, 1471, 1469, 1470, 1462,
	1463, 1464, 1465, 1467, 1468, 0, 0, 0, 0, 0,
	2439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2444, 0, 2447, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2468, 1192,
	2470, 1192, 1181, 2473, 0, 0, 0, 0, 0, 0,
	0, 0, 1181, 1181, 0, 0, 0, 0, 1181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2489, 0, 0, 0, 0, 0, 0,
	1458, 1459, 0, 1491, 1492, 1493, 1501, 1502, 1503, 0,
	0, 0, 0, 0, 1182, 0, 0, 1080, 0, 1494,
	1489, 0, 0, 0, 0, 0, 0, 1461, 0, 0,
	0, 0, 1507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 87,
	0, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1006, 1006, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1483, 1484,
	1485, 1486, 0, 0, 0, 1182, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 1182, 1182, 0, 0, 0,
	0, 1182, 0, 1458, 1459, 0, 1491, 1492, 1493, 1501,
	1502, 1503, 1498, 0, 0, 1508, 0, 0, 0, 1488,
	1490, 0, 1494, 1489, 0, 0, 0, 0, 0, 0,
	1461, 0, 0, 0, 0, 1507, 0, 0, 0, 1504,
	1081, 1505, 0, 0, 0, 0, 0, 0, 1475, 1476,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	0, 0, 0, 0, 1496, 0, 0, 1480, 0, 0,
	0, 0, 0, 1481, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 0, 1495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2692, 0, 0, 0, 0, 0, 0, 0,
	0, 1483, 1484, 1485, 1486, 0, 0, 0, 0, 0,
	87, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1487, 2728, 2730, 2357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 0, 0, 1508, 1482,
	0, 0, 1488, 1490, 0, 0, 0, 0, 0, 0,
	735, 0, 769, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 1505, 1499, 0, 0, 0, 0,
	0, 1475, 1476, 0, 742, 0, 0, 0, 0, 0,
	2768, 0, 0, 0, 2772, 0, 0, 1496, 753, 740,
	0, 0, 0, 2779, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 741, 0, 1506, 0, 0, 743, 0, 0,
	0, 775, 0, 0, 0, 0, 0, 0, 750, 751,
	0, 1495, 0, 0, 762, 0, 1006, 0, 0, 0,
	0, 0, 0, 0, 1006, 2822, 0, 770, 745, 1497,
	0, 0, 1472, 1473, 1479, 1500, 1478, 1474, 0, 1471,
	1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 0, 0,
	0, 0, 2561, 0, 1487, 768, 2562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2847, 0, 1192,
	0, 0, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	2857, 0, 0, 0, 0, 739, 0, 0, 1499, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 87,
	747, 748, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 755, 754, 0, 0, 0, 0, 0, 0,
	749, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 774, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 1472, 1473, 1479, 1500, 1478,
	1474, 0, 1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467,
	1468, 0, 0, 0, 0, 2088, 0, 0, 0, 2089,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 766, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 758, 0, 0, 0, 0, 0, 759,
	0, 0, 0, 0, 0, 0, 737, 0, 772, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 760, 0, 0, 0, 757, 0,
	0, 0, 0, 0, 0, 0, 0, 773, 0, 0,
	0, 0, 2056, 0, 0, 761, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3051, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 1179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 3102,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 1083, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 0, 0, 0, 0, 0,
	0, 87, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 960, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 959, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 961, 501, 962, 314, 315,
	316, 963, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 3215, 326, 502, 964, 327, 328,
	965, 0, 329, 330, 0, 2357, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	966, 344, 345, 347, 346, 0, 0, 967, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 968,
	362, 969, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 970, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 182, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 971, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 184, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 3327, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 1325, 520,
	521, 0, 472, 471, 522, 0, 0, 0, 176, 473,
	474, 523, 475, 476, 477, 0, 177, 0, 0, 0,
	0, 0, 0, 3374, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3400, 1192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 3488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3503, 219, 220, 221, 222, 223, 1085, 224,
	1086, 1087, 1088, 0, 1089, 478, 1090, 1091, 1092, 1093,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 1094, 233, 234, 235, 236, 237, 238, 1095,
	1096, 239, 483, 484, 485, 1097, 240, 486, 1098, 1083,
	1099, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 1100, 251, 0, 252, 253, 254, 1101, 957,
	255, 256, 1102, 1103, 1105, 1104, 1106, 1107, 1108, 257,
	258, 259, 260, 261, 262, 487, 488, 1109, 263, 1110,
	265, 264, 1111, 266, 1112, 1113, 267, 268, 269, 1114,
	270, 1115, 271, 272, 1116, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 1117, 216,
	1118, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 1119, 290, 1120, 1121, 958, 291, 292,
	1122, 293, 493, 1123, 494, 294, 1124, 295, 296, 297,
	298, 495, 496, 497, 350, 960, 299, 300, 1125, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 1126, 959,
	306, 498, 308, 307, 309, 310, 311, 499, 1127, 500,
	1128, 313, 961, 501, 962, 314, 315, 316, 963, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 1129, 325,
	324, 1130, 326, 502, 964, 327, 328, 965, 1131, 329,
	330, 1132, 1133, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 966, 344, 345,
	347, 346, 1134, 218, 967, 348, 1135, 503, 349, 504,
	351, 352, 1136, 353, 354, 355, 1137, 1138, 357, 358,
	359, 1139, 1140, 360, 361, 505, 968, 362, 969, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1141,
	371, 372, 507, 373, 508, 374, 1142, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 1143, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 1144, 397, 970, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 1145, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 1146, 424, 404, 405, 425, 426, 971, 427,
	428, 511, 429, 430, 1147, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 1148, 442, 443,
	441, 1149, 444, 445, 446, 447, 448, 278, 449, 1150,
	450, 513, 514, 515, 516, 1151, 457, 1152, 451, 452,
	517, 453, 518, 1153, 454, 455, 456, 0, 458, 459,
	1154, 1155, 460, 461, 462, 463, 464, 466, 1156, 467,
	1157, 465, 468, 469, 470, 519, 520, 521, 1158, 472,
	471, 522, 1159, 1160, 1161, 1162, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 2209, 0, 0, 0, 0, 0, 0, 0,
	2210, 219, 220, 221, 222, 223, 1085, 224, 1086, 1087,
	1088, 0, 1089, 478, 1090, 1091, 1092, 1093, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	1094, 233, 234, 235, 236, 237, 238, 1095, 1096, 239,
	483, 484, 485, 1097, 240, 486, 1098, 1083, 1099, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1100, 251, 0, 252, 253, 254, 1101, 957, 255, 256,
	1102, 1103, 1105, 1104, 1106, 1107, 1108, 257, 258, 259,
	260, 261, 262, 487, 488, 1109, 263, 1110, 265, 264,
	1111, 266, 1112, 1113, 267, 268, 269, 1114, 270, 1115,
	271, 272, 1116, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 1117, 216, 1118, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 1119, 290, 1120, 1121, 958, 291, 292, 1122, 293,
	493, 1123, 494, 294, 1124, 295, 296, 297, 298, 495,
	496, 497, 350, 960, 299, 300, 1125, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1126, 959, 306, 498,
	308, 307, 309, 310, 311, 499, 1127, 500, 1128, 313,
	961, 501, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1129, 325, 324, 1130,
	326, 502, 964, 327, 328, 965, 1131, 329, 330, 1132,
	1133, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 346,
	1134, 218, 967, 348, 1135, 503, 349, 504, 351, 352,
	1136, 353, 354, 355, 1137, 1138, 357, 358, 359, 1139,
	1140, 360, 361, 505, 968, 362, 969, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1141, 371, 372,
	507, 373, 508, 374, 1142, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 1143, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 1144, 397, 970, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 1145,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	1146, 424, 404, 405, 425, 426, 971, 427, 428, 511,
	429, 430, 1147, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 1148, 442, 443, 441, 1149,
	444, 445, 446, 447, 448, 278, 449, 1150, 450, 513,
	514, 515, 516, 1151, 457, 1152, 451, 452, 517, 453,
	518, 1153, 454, 455, 456, 0, 458, 459, 1154, 1155,
	460, 461, 462, 463, 464, 466, 1156, 467, 1157, 465,
	468, 469, 470, 519, 520, 521, 1158, 472, 471, 522,
	1159, 1160, 1161, 1162, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3171, 219, 220, 221, 222, 223, 1085, 224, 1086, 1087,
	1088, 0, 1089, 478, 1090, 1091, 1092, 1093, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	1094, 233, 234, 235, 236, 237, 238, 1095, 1096, 239,
	483, 484, 485, 1097, 240, 486, 1098, 1083, 1099, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1100, 251, 0, 252, 253, 254, 1101, 957, 255, 256,
	1102, 1103, 1105, 1104, 1106, 1107, 1108, 257, 258, 259,
	260, 261, 262, 487, 488, 1109, 263, 1110, 265, 264,
	1111, 266, 1112, 1113, 267, 268, 269, 1114, 270, 1115,
	271, 272, 1116, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 1117, 216, 1118, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 1119, 290, 1120, 1121, 958, 291, 292, 1122, 293,
	493, 1123, 494, 294, 1124, 295, 296, 297, 298, 495,
	496, 497, 350, 960, 299, 300, 1125, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1126, 959, 306, 498,
	308, 307, 309, 310, 311, 499, 1127, 500, 1128, 313,
	961, 501, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1129, 325, 324, 1130,
	326, 502, 964, 327, 328, 965, 1131, 329, 330, 1132,
	1133, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 346,
	1134, 218, 967, 348, 1135, 503, 349, 504, 351, 352,
	1136, 353, 354, 355, 1137, 1138, 357, 358, 359, 1139,
	1140, 360, 361, 505, 968, 362, 969, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1141, 371, 372,
	507, 373, 508, 374, 1142, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 1143, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 1144, 397, 970, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 1145,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	1146, 424, 404, 405, 425, 426, 971, 427, 428, 511,
	429, 430, 1147, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 1148, 442, 443, 441, 1149,
	444, 445, 446, 447, 448, 278, 449, 1150, 450, 513,
	514, 515, 516, 1151, 457, 1152, 451, 452, 517, 453,
	518, 1153, 454, 455, 456, 0, 458, 459, 1154, 1155,
	460, 461, 462, 463, 464, 466, 1156, 467, 1157, 465,
	468, 469, 470, 519, 520, 521, 1158, 472, 471, 522,
	1159, 1160, 1161, 1162, 473, 474, 523, 475, 476, 477,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3294, 0, 219, 220, 221,
	222, 223, 1085, 224, 1086, 1087, 1088, 0, 1089, 478,
	1090, 1091, 1092, 1093, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 1094, 233, 234, 235,
	236, 237, 238, 1095, 1096, 239, 483, 484, 485, 1097,
	240, 486, 1098, 1083, 1099, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 1100, 251, 0, 252,
	253, 254, 1101, 957, 255, 256, 1102, 1103, 1105, 1104,
	1106, 1107, 1108, 257, 258, 259, 260, 261, 262, 487,
	488, 1109, 263, 1110, 265, 264, 1111, 266, 1112, 1113,
	267, 268, 269, 1114, 270, 1115, 271, 272, 1116, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 1117, 216, 1118, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 1119, 290, 1120,
	1121, 958, 291, 292, 1122, 293, 493, 1123, 494, 294,
	1124, 295, 296, 297, 298, 495, 496, 497, 350, 960,
	299, 300, 1125, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 1126, 959, 306, 498, 308, 307, 309, 310,
	311, 499, 1127, 500, 1128, 313, 961, 501, 962, 314,
	315, 316, 963, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1129, 325, 324, 1130, 326, 502, 964, 327,
	328, 965, 1131, 329, 330, 1132, 1133, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 966, 344, 345, 347, 346, 1134, 218, 967, 348,
	1135, 503, 349, 504, 351, 352, 1136, 353, 354, 355,
	1137, 1138, 357, 358, 359, 1139, 1140, 360, 361, 505,
	968, 362, 969, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1141, 371, 372, 507, 373, 508, 374,
	1142, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 1143, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 1144, 397, 970,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 1145, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 1146, 424, 404, 405,
	425, 426, 971, 427, 428, 511, 429, 430, 1147, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 1148, 442, 443, 441, 1149, 444, 445, 446, 447,
	448, 278, 449, 1150, 450, 513, 514, 515, 516, 1151,
	457, 1152, 451, 452, 517, 453, 518, 1153, 454, 455,
	456, 0, 458, 459, 1154, 1155, 460, 461, 462, 463,
	464, 466, 1156, 467, 1157, 465, 468, 469, 470, 519,
	520, 521, 1158, 472, 471, 522, 1159, 1160, 1161, 1162,
	473, 474, 523, 475, 476, 477, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3222, 0, 219, 220, 221, 222, 223, 1085, 224,
	1086, 1087, 1088, 0, 1089, 478, 1090, 1091, 1092, 1093,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 1094, 233, 234, 235, 236, 237, 238, 1095,
	1096, 239, 483, 484, 485, 1097, 240, 486, 1098, 1083,
	1099, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 1100, 251, 0, 252, 253, 254, 1101, 957,
	255, 256, 1102, 1103, 1105, 1104, 1106, 1107, 1108, 257,
	258, 259, 260, 261, 262, 487, 488, 1109, 263, 1110,
	265, 264, 1111, 266, 1112, 1113, 267, 268, 269, 1114,
	270, 1115, 271, 272, 1116, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 1117, 216,
	1118, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 1119, 290, 1120, 1121, 958, 291, 292,
	1122, 293, 493, 1123, 494, 294, 1124, 295, 296, 297,
	298, 495, 496, 497, 350, 960, 299, 300, 1125, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 1126, 959,
	306, 498, 308, 307, 309, 310, 311, 499, 1127, 500,
	1128, 313, 961, 501, 962, 314, 315, 316, 963, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 1129, 325,
	324, 1130, 326, 502, 964, 327, 328, 965, 1131, 329,
	330, 1132, 1133, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 966, 344, 345,
	347, 346, 1134, 218, 967, 348, 1135, 503, 349, 504,
	351, 352, 1136, 353, 354, 355, 1137, 1138, 357, 358,
	359, 1139, 1140, 360, 361, 505, 968, 362, 969, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1141,
	371, 372, 507, 373, 508, 374, 1142, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 1143, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 1144, 397, 970, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 1145, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 1146, 424, 404, 405, 425, 426, 971, 427,
	428, 511, 429, 430, 1147, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 1148, 442, 443,
	441, 1149, 444, 445, 446, 447, 448, 278, 449, 1150,
	450, 513, 514, 515, 516, 1151, 457, 1152, 451, 452,
	517, 453, 518, 1153, 454, 455, 456, 0, 458, 459,
	1154, 1155, 460, 461, 462, 463, 464, 466, 1156, 467,
	1157, 465, 468, 469, 470, 519, 520, 521, 1158, 472,
	471, 522, 1159, 1160, 1161, 1162, 473, 474, 523, 475,
	476, 477, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3103, 0, 219,
	220, 221, 222, 223, 1085, 224, 1086, 1087, 1088, 0,
	1089, 478, 1090, 1091, 1092, 1093, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 1094, 233,
	234, 235, 236, 237, 238, 1095, 1096, 239, 483, 484,
	485, 1097, 240, 486, 1098, 1083, 1099, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 1100, 251,
	0, 252, 253, 254, 1101, 957, 255, 256, 1102, 1103,
	1105, 1104, 1106, 1107, 1108, 257, 258, 259, 260, 261,
	262, 487, 488, 1109, 263, 1110, 265, 264, 1111, 266,
	1112, 1113, 267, 268, 269, 1114, 270, 1115, 271, 272,
	1116, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 1117, 216, 1118, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 1119,
	290, 1120, 1121, 958, 291, 292, 1122, 293, 493, 1123,
	494, 294, 1124, 295, 296, 297, 298, 495, 496, 497,
	350, 960, 299, 300, 1125, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 1126, 959, 306, 498, 308, 307,
	309, 310, 311, 499, 1127, 500, 1128, 313, 961, 501,
	962, 314, 315, 316, 963, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1129, 325, 324, 1130, 326, 502,
	964, 327, 328, 965, 1131, 329, 330, 1132, 1133, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 966, 344, 345, 347, 346, 1134, 218,
	967, 348, 1135, 503, 349, 504, 351, 352, 1136, 353,
	354, 355, 1137, 1138, 357, 358, 359, 1139, 1140, 360,
	361, 505, 968, 362, 969, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1141, 371, 372, 507, 373,
	508, 374, 1142, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 1143, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 1144,
	397, 970, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 1145, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 1146, 424,
	404, 405, 425, 426, 971, 427, 428, 511, 429, 430,
	1147, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 1148, 442, 443, 441, 1149, 444, 445,
	446, 447, 448, 278, 449, 1150, 450, 513, 514, 515,
	516, 1151, 457, 1152, 451, 452, 517, 453, 518, 1153,
	454, 455, 456, 0, 458, 459, 1154, 1155, 460, 461,
	462, 463, 464, 466, 1156, 467, 1157, 465, 468, 469,
	470, 519, 520, 521, 1158, 472, 471, 522, 1159, 1160,
	1161, 1162, 473, 474, 523, 475, 476, 477, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2900, 0, 219, 220, 221, 222, 223,
	1085, 224, 1086, 1087, 1088, 0, 1089, 478, 1090, 1091,
	1092, 1093, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 1094, 233, 234, 235, 236, 237,
	238, 1095, 1096, 239, 483, 484, 485, 1097, 240, 486,
	1098, 1083, 1099, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 1100, 251, 0, 252, 253, 254,
	1101, 957, 255, 256, 1102, 1103, 1105, 1104, 1106, 1107,
	1108, 257, 258, 259, 260, 261, 262, 487, 488, 1109,
	263, 1110, 265, 264, 1111, 266, 1112, 1113, 267, 268,
	269, 1114, 270, 1115, 271, 272, 1116, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	1117, 216, 1118, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 1119, 290, 1120, 1121, 958,
	291, 292, 1122, 293, 493, 1123, 494, 294, 1124, 295,
	296, 297, 298, 495, 496, 497, 350, 960, 299, 300,
	1125, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	1126, 959, 306, 498, 308, 307, 309, 310, 311, 499,
	1127, 500, 1128, 313, 961, 501, 962, 314, 315, 316,
	963, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	1129, 325, 324, 1130, 326, 502, 964, 327, 328, 965,
	1131, 329, 330, 1132, 1133, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 966,
	344, 345, 347, 346, 1134, 218, 967, 348, 1135, 503,
	349, 504, 351, 352, 1136, 353, 354, 355, 1137, 1138,
	357, 358, 359, 1139, 1140, 360, 361, 505, 968, 362,
	969, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1141, 371, 372, 507, 373, 508, 374, 1142, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	1143, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 1144, 397, 970, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 1145, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 1146, 424, 404, 405, 425, 426,
	971, 427, 428, 511, 429, 430, 1147, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 1148,
	442, 443, 441, 1149, 444, 445, 446, 447, 448, 278,
	449, 1150, 450, 513, 514, 515, 516, 1151, 457, 1152,
	451, 452, 517, 453, 518, 1153, 454, 455, 456, 0,
	458, 459, 1154, 1155, 460, 461, 462, 463, 464, 466,
	1156, 467, 1157, 465, 468, 469, 470, 519, 520, 521,
	1158, 472, 471, 522, 1159, 1160, 1161, 1162, 473, 474,
	523, 475, 476, 477, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2892,
	0, 219, 220, 221, 222, 223, 1085, 224, 1086, 1087,
	1088, 0, 1089, 478, 1090, 1091, 1092, 1093, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	1094, 233, 234, 235, 236, 237, 238, 1095, 1096, 239,
	483, 484, 485, 1097, 240, 486, 1098, 1083, 1099, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1100, 251, 0, 252, 253, 254, 1101, 957, 255, 256,
	1102, 1103, 1105, 1104, 1106, 1107, 1108, 257, 258, 259,
	260, 261, 262, 487, 488, 1109, 263, 1110, 265, 264,
	1111, 266, 1112, 1113, 267, 268, 269, 1114, 270, 1115,
	271, 272, 1116, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 1117, 216, 1118, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 1119, 290, 1120, 1121, 958, 291, 292, 1122, 293,
	493, 1123, 494, 294, 1124, 295, 296, 297, 298, 495,
	496, 497, 350, 960, 299, 300, 1125, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1126, 959, 306, 498,
	308, 307, 309, 310, 311, 499, 1127, 500, 1128, 313,
	961, 501, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1129, 325, 324, 1130,
	326, 502, 964, 327, 328, 965, 1131, 329, 330, 1132,
	1133, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 346,
	1134, 218, 967, 348, 1135, 503, 349, 504, 351, 352,
	1136, 353, 354, 355, 1137, 1138, 357, 358, 359, 1139,
	1140, 360, 361, 505, 968, 362, 969, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1141, 371, 372,
	507, 373, 508, 374, 1142, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 1143, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 1144, 397, 970, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 1145,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	1146, 424, 404, 405, 425, 426, 971, 427, 428, 511,
	429, 430, 1147, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 1148, 442, 443, 441, 1149,
	444, 445, 446, 447, 448, 278, 449, 1150, 450, 513,
	514, 515, 516, 1151, 457, 1152, 451, 452, 517, 453,
	518, 1153, 454, 455, 456, 0, 458, 459, 1154, 1155,
	460, 461, 462, 463, 464, 466, 1156, 467, 1157, 465,
	468, 469, 470, 519, 520, 521, 1158, 472, 471, 522,
	1159, 1160, 1161, 1162, 473, 474, 523, 475, 476, 477,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2753, 0, 219, 220, 221,
	222, 223, 1085, 224, 1086, 1087, 1088, 0, 1089, 478,
	1090, 1091, 1092, 1093, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 1094, 233, 234, 235,
	236, 237, 238, 1095, 1096, 239, 483, 484, 485, 1097,
	240, 486, 1098, 1083, 1099, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 1100, 251, 0, 252,
	253, 254, 1101, 957, 255, 256, 1102, 1103, 1105, 1104,
	1106, 1107, 1108, 257, 258, 259, 260, 261, 262, 487,
	488, 1109, 263, 1110, 265, 264, 1111, 266, 1112, 1113,
	267, 268, 269, 1114, 270, 1115, 271, 272, 1116, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 1117, 216, 1118, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 1119, 290, 1120,
	1121, 958, 291, 292, 1122, 293, 493, 1123, 494, 294,
	1124, 295, 296, 297, 298, 495, 496, 497, 350, 960,
	299, 300, 1125, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 1126, 959, 306, 498, 308, 307, 309, 310,
	311, 499, 1127, 500, 1128, 313, 961, 501, 962, 314,
	315, 316, 963, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1129, 325, 324, 1130, 326, 502, 964, 327,
	328, 965, 1131, 329, 330, 1132, 1133, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 966, 344, 345, 347, 346, 1134, 218, 967, 348,
	1135, 503, 349, 504, 351, 352, 1136, 353, 354, 355,
	1137, 1138, 357, 358, 359, 1139, 1140, 360, 361, 505,
	968, 362, 969, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1141, 371, 372, 507, 373, 508, 374,
	1142, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 1143, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 1144, 397, 970,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 1145, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 1146, 424, 404, 405,
	425, 426, 971, 427, 428, 511, 429, 430, 1147, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 1148, 442, 443, 441, 1149, 444, 445, 446, 447,
	448, 278, 449, 1150, 450, 513, 514, 515, 516, 1151,
	457, 1152, 451, 452, 517, 453, 518, 1153, 454, 455,
	456, 0, 458, 459, 1154, 1155, 460, 461, 462, 463,
	464, 466, 1156, 467, 1157, 465, 468, 469, 470, 519,
	520, 521, 1158, 472, 471, 522, 1159, 1160, 1161, 1162,
	473, 474, 523, 475, 476, 477, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2101, 0, 219, 220, 221, 222, 223, 1085, 224,
	1086, 1087, 1088, 0, 1089, 478, 1090, 1091, 1092, 1093,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 1094, 233, 234, 235, 236, 237, 238, 1095,
	1096, 239, 483, 484, 485, 1097, 240, 486, 1098, 1083,
	1099, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 1100, 251, 0, 252, 253, 254, 1101, 957,
	255, 256, 1102, 1103, 1105, 1104, 1106, 1107, 1108, 257,
	258, 259, 260, 261, 262, 487, 488, 1109, 263, 1110,
	265, 264, 1111, 266, 1112, 1113, 267, 268, 269, 1114,
	270, 1115, 271, 272, 1116, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 1117, 216,
	1118, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 1119, 290, 1120, 1121, 958, 291, 292,
	1122, 293, 493, 1123, 494, 294, 1124, 295, 296, 297,
	298, 495, 496, 497, 350, 960, 299, 300, 1125, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 1126, 959,
	306, 498, 308, 307, 309, 310, 311, 499, 1127, 500,
	1128, 313, 961, 501, 962, 314, 315, 316, 963, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 1129, 325,
	324, 1130, 326, 502, 964, 327, 328, 965, 1131, 329,
	330, 1132, 1133, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 966, 344, 345,
	347, 346, 1134, 218, 967, 348, 1135, 503, 349, 504,
	351, 352, 1136, 353, 354, 355, 1137, 1138, 357, 358,
	359, 1139, 1140, 360, 361, 505, 968, 362, 969, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1141,
	371, 372, 507, 373, 508, 374, 1142, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 1143, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 1144, 397, 970, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 1145, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 1146, 424, 404, 405, 425, 426, 971, 427,
	428, 511, 429, 430, 1147, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 1148, 442, 443,
	441, 1149, 444, 445, 446, 447, 448, 278, 449, 1150,
	450, 513, 514, 515, 516, 1151, 457, 1152, 451, 452,
	517, 453, 518, 1153, 454, 455, 456, 0, 458, 459,
	1154, 1155, 460, 461, 462, 463, 464, 466, 1156, 467,
	1157, 465, 468, 469, 470, 519, 520, 521, 1158, 472,
	471, 522, 1159, 1160, 1161, 1162, 473, 474, 523, 475,
	476, 477, 1186, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1812, 0, 0,
	0, 219, 220, 221, 222, 223, 1085, 224, 1086, 1087,
	1088, 0, 1089, 478, 1090, 1091, 1092, 1093, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	1094, 233, 234, 235, 236, 237, 238, 1095, 1096, 239,
	483, 484, 485, 1097, 240, 486, 1098, 1083, 1099, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1100, 251, 0, 252, 253, 254, 1101, 957, 255, 256,
	1102, 1103, 1105, 1104, 1106, 1107, 1108, 257, 258, 259,
	260, 261, 262, 487, 488, 1109, 263, 1110, 265, 264,
	1111, 266, 1112, 1113, 267, 268, 269, 1114, 270, 1115,
	271, 272, 1116, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 1117, 216, 1118, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 1119, 290, 1120, 1121, 958, 291, 292, 1122, 293,
	493, 1123, 494, 294, 1124, 295, 296, 297, 298, 495,
	496, 497, 350, 960, 299, 300, 1125, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1126, 959, 306, 498,
	308, 307, 309, 310, 311, 499, 1127, 500, 1128, 313,
	961, 501, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1129, 325, 324, 1130,
	326, 502, 964, 327, 328, 965, 1131, 329, 330, 1132,
	1133, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 346,
	1134, 218, 967, 348, 1135, 503, 349, 504, 351, 352,
	1136, 353, 354, 355, 1137, 1138, 357, 358, 359, 1139,
	1140, 360, 361, 505, 968, 362, 969, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1141, 371, 372,
	507, 373, 508, 374, 1142, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 1143, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 1144, 397, 970, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 1145,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	1146, 424, 404, 405, 425, 426, 971, 427, 428, 511,
	429, 430, 1147, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 1148, 442, 443, 441, 1149,
	444, 445, 446, 447, 448, 278, 449, 1150, 450, 513,
	514, 515, 516, 1151, 457, 1152, 451, 452, 517, 453,
	518, 1153, 454, 455, 456, 0, 458, 459, 1154, 1155,
	460, 461, 462, 463, 464, 466, 1156, 467, 1157, 465,
	468, 469, 470, 519, 520, 521, 1158, 472, 471, 522,
	1159, 1160, 1161, 1162, 473, 474, 523, 475, 476, 477,
	1075, 0, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 1085, 224, 1086, 1087, 1088, 0,
	1089, 478, 1090, 1091, 1092, 1093, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 1094, 233,
	234, 235, 236, 237, 238, 1095, 1096, 239, 483, 484,
	485, 1097, 240, 486, 1098, 1083, 1099, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 1100, 251,
	0, 252, 253, 254, 1101, 957, 255, 256, 1102, 1103,
	1105, 1104, 1106, 1107, 1108, 257, 258, 259, 260, 261,
	262, 487, 488, 1109, 263, 1110, 265, 264, 1111, 266,
	1112, 1113, 267, 268, 269, 1114, 270, 1115, 271, 272,
	1116, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 1117, 216, 1118, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 1119,
	290, 1120, 1121, 958, 291, 292, 1122, 293, 493, 1123,
	494, 294, 1124, 295, 296, 297, 298, 495, 496, 497,
	350, 960, 299, 300, 1125, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 1126, 959, 306, 498, 308, 307,
	309, 310, 311, 499, 1127, 500, 1128, 313, 961, 501,
	962, 314, 315, 316, 963, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1129, 325, 324, 1130, 326, 502,
	964, 327, 328, 965, 1131, 329, 330, 1132, 1133, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 966, 344, 345, 347, 346, 1134, 218,
	967, 348, 1135, 503, 349, 504, 351, 352, 1136, 353,
	354, 355, 1137, 1138, 357, 358, 359, 1139, 1140, 360,
	361, 505, 968, 362, 969, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1141, 371, 372, 507, 373,
	508, 374, 1142, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 1143, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 1144,
	397, 970, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 1145, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 1146, 424,
	404, 405, 425, 426, 971, 427, 428, 511, 429, 430,
	1147, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 1148, 442, 443, 441, 1149, 444, 445,
	446, 447, 448, 278, 449, 1150, 450, 513, 514, 515,
	516, 1151, 457, 1152, 451, 452, 517, 453, 518, 1153,
	454, 455, 456, 0, 458, 459, 1154, 1155, 460, 461,
	462, 463, 464, 466, 1156, 467, 1157, 465, 468, 469,
	470, 519, 520, 521, 1158, 472, 471, 522, 1159, 1160,
	1161, 1162, 473, 474, 523, 475, 476, 477, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	1085, 224, 1086, 1087, 1088, 0, 1089, 478, 1090, 1091,
	1092, 1093, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 1094, 233, 234, 235, 236, 237,
	238, 1095, 1096, 239, 483, 484, 485, 1097, 240, 486,
	1098, 1083, 1099, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 1100, 251, 0, 252, 253, 254,
	1101, 957, 255, 256, 1102, 1103, 1105, 1104, 1106, 1107,
	1108, 257, 258, 259, 260, 261, 262, 487, 488, 1109,
	263, 1110, 265, 264, 1111, 266, 1112, 1113, 267, 268,
	269, 1114, 270, 1115, 271, 272, 1116, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	1117, 216, 1118, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 1119, 290, 1120, 1121, 958,
	291, 292, 1122, 293, 493, 1123, 494, 294, 1124, 295,
	296, 297, 298, 495, 496, 497, 350, 960, 299, 300,
	1125, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	1126, 959, 306, 498, 308, 307, 309, 310, 311, 499,
	1127, 500, 1128, 313, 961, 501, 962, 314, 315, 316,
	963, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	1129, 325, 324, 1130, 326, 502, 964, 327, 328, 965,
	1131, 329, 330, 1132, 1133, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 966,
	344, 345, 347, 346, 1134, 218, 967, 348, 1135, 503,
	349, 504, 351, 352, 1136, 353, 354, 355, 1137, 1138,
	357, 358, 359, 1139, 1140, 360, 361, 505, 968, 362,
	969, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1141, 371, 372, 507, 373, 508, 374, 1142, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	1143, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 1144, 397, 970, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 1145, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 1146, 424, 404, 405, 425, 426,
	971, 427, 428, 511, 429, 430, 1147, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 1148,
	442, 443, 441, 1149, 444, 445, 446, 447, 448, 278,
	449, 1150, 450, 513, 514, 515, 516, 1151, 457, 1152,
	451, 452, 517, 453, 518, 1153, 454, 455, 456, 0,
	458, 459, 1154, 1155, 460, 461, 462, 463, 464, 466,
	1156, 467, 1157, 465, 468, 469, 470, 519, 520, 521,
	1158, 472, 471, 522, 1159, 1160, 1161, 1162, 473, 474,
	523, 475, 476, 477, 2077, 0, 899, 856, 857, 858,
	854, 855, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 2074, 224,
	0, 0, 0, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 983, 984, 485, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 262, 921, 920, 845, 263, 0,
	265, 264, 0, 266, 2075, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 851, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 974, 975, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 981, 0, 874, 294, 0, 295, 296, 297,
	298, 949, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 895, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 982, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 887, 341, 966, 344, 345,
	347, 346, 842, 218, 967, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 976,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 977, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 915, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	852, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 888, 889, 891, 892, 415, 421,
	422, 423, 945, 424, 404, 405, 425, 426, 971, 427,
	428, 910, 890, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 956, 436, 437, 438, 978, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 886, 0,
	450, 929, 930, 931, 932, 0, 457, 0, 451, 452,
	979, 453, 980, 863, 454, 455, 456, 0, 458, 459,
	0, 846, 460, 461, 462, 463, 464, 466, 946, 467,
	0, 894, 468, 469, 470, 519, 926, 973, 2073, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 843, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 0, 0, 839, 840, 2076, 0, 0,
	0, 0, 0, 0, 869, 2072, 0, 832, 867, 899,
	856, 857, 858, 854, 855, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 873,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 914,
	893, 925, 883, 924, 923, 0, 233, 885, 884, 236,
	237, 238, 875, 947, 239, 983, 984, 485, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 928, 262, 921, 920,
	845, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	919, 269, 0, 270, 0, 271, 272, 0, 273, 851,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 974,
	975, 864, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 918, 916, 917, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 981, 0, 874, 294, 0,
	295, 296, 297, 298, 949, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 895, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 907, 898, 909, 911, 912, 913,
	908, 0, 900, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 933, 934, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 982, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 887, 341,
	966, 344, 345, 347, 346, 842, 218, 967, 348, 865,
	952, 349, 922, 351, 352, 0, 896, 354, 897, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 968,
	362, 969, 976, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 977, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 915, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 970, 398,
	399, 400, 401, 852, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 182, 419, 420, 888, 889, 891,
	892, 415, 421, 422, 423, 945, 424, 404, 405, 425,
	426, 971, 427, 428, 910, 890, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 956, 436, 437, 438, 978,
	0, 442, 443, 441, 184, 444, 445, 446, 447, 448,
	278, 886, 0, 450, 929, 930, 931, 932, 0, 457,
	0, 451, 452, 979, 453, 980, 863, 454, 455, 456,
	0, 458, 459, 0, 846, 460, 461, 462, 463, 464,
	466, 946, 467, 0, 894, 468, 469, 470, 1325, 926,
	973, 0, 472, 471, 522, 0, 0, 0, 176, 473,
	474, 523, 475, 476, 477, 843, 177, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 839, 840,
	899, 856, 857, 858, 854, 855, 868, 1535, 1533, 0,
	0, 867, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 983, 984, 485, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 845, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	851, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	974, 975, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 981, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 982, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 346, 842, 218, 967, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	968, 362, 969, 976, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 977, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 915,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 970,
	398, 399, 400, 401, 852, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 182, 419, 420, 888, 889,
	891, 892, 415, 421, 422, 423, 945, 424, 404, 405,
	425, 426, 971, 427, 428, 910, 890, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 956, 436, 437, 438,
	978, 0, 442, 443, 441, 184, 444, 445, 446, 447,
	448, 278, 886, 0, 450, 929, 930, 931, 932, 0,
	457, 0, 451, 452, 979, 453, 980, 863, 454, 455,
	456, 0, 458, 459, 0, 846, 460, 461, 462, 463,
	464, 466, 946, 467, 0, 894, 468, 469, 470, 1325,
	926, 973, 0, 472, 471, 522, 0, 0, 0, 176,
	473, 474, 523, 475, 476, 477, 843, 177, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 839,
	840, 899, 856, 857, 858, 854, 855, 868, 1535, 2511,
	0, 0, 867, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	948, 873, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 914, 893, 925, 883, 924, 923, 0, 233, 885,
	884, 236, 237, 238, 875, 947, 239, 983, 984, 485,
	0, 240, 954, 0, 937, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 957, 255, 256, 940, 938, 939,
	944, 942, 941, 943, 257, 258, 259, 260, 928, 262,
	921, 920, 845, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 919, 269, 0, 270, 0, 271, 272, 0,
	273, 851, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 974, 975, 864, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 918, 916, 917, 0, 289, 0, 290,
	0, 0, 958, 291, 292, 0, 293, 981, 0, 874,
	294, 0, 295, 296, 297, 298, 949, 950, 953, 350,
	960, 299, 300, 0, 301, 302, 895, 0, 0, 217,
	303, 305, 312, 0, 959, 306, 907, 898, 909, 911,
	912, 913, 908, 0, 900, 0, 313, 961, 951, 962,
	314, 315, 316, 963, 933, 934, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 982, 964,
	327, 328, 965, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	887, 341, 966, 344, 345, 347, 346, 842, 218, 967,
	348, 865, 952, 349, 922, 351, 352, 0, 896, 354,
	897, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 968, 362, 969, 976, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 977, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	915, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	970, 398, 399, 400, 401, 852, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 182, 419, 420, 888,
	889, 891, 892, 415, 421, 422, 423, 945, 424, 404,
	405, 425, 426, 971, 427, 428, 910, 890, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 956, 436, 437,
	438, 978, 0, 442, 443, 441, 184, 444, 445, 446,
	447, 448, 278, 886, 0, 450, 929, 930, 931, 932,
	0, 457, 0, 451, 452, 979, 453, 980, 863, 454,
	455, 456, 0, 458, 459, 0, 846, 460, 461, 462,
	463, 464, 466, 946, 467, 0, 894, 468, 469, 470,
	1325, 926, 973, 0, 472, 471, 522, 0, 0, 0,
	176, 473, 474, 523, 475, 476, 477, 843, 177, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	839, 840, 899, 856, 857, 858, 854, 855, 868, 1535,
	1533, 0, 0, 867, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 948, 873, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 914, 893, 925, 883, 924, 923, 2163, 233,
	885, 884, 236, 237, 238, 875, 947, 239, 983, 984,
	485, 0, 240, 954, 0, 937, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 256, 940, 938,
	939, 944, 942, 941, 943, 257, 258, 259, 260, 928,
	262, 921, 920, 845, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 919, 269, 0, 270, 0, 271, 272,
	0, 273, 851, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 974, 975, 864, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 918, 916, 917, 0, 289, 0,
	290, 0, 2168, 958, 291, 292, 0, 293, 981, 0,
	874, 294, 0, 295, 296, 297, 298, 949, 950, 953,
	350, 960, 299, 300, 0, 301, 302, 895, 0, 0,
	217, 303, 305, 312, 0, 959, 306, 907, 898, 909,
	911, 912, 913, 908, 0, 900, 0, 313, 961, 951,
	962, 314, 315, 316, 963, 933, 934, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 2164, 326, 982,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 887, 341, 966, 344, 345, 347, 346, 842, 218,
	967, 348, 865, 952, 349, 922, 351, 352, 0, 896,
	354, 897, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 968, 362, 969, 976, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 977, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 915, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 970, 398, 399, 400, 401, 852, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	888, 889, 891, 892, 415, 421, 422, 423, 945, 424,
	404, 405, 425, 426, 971, 427, 428, 910, 890, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 956, 436,
	437, 438, 978, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 886, 0, 450, 929, 930, 931,
	932, 0, 457, 2165, 451, 452, 979, 453, 980, 863,
	454, 455, 456, 0, 458, 459, 0, 846, 460, 461,
	462, 463, 464, 466, 946, 467, 0, 894, 468, 469,
	470, 519, 926, 973, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 843, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 839, 840, 0, 0, 0, 0, 0, 0, 0,
	869, 0, 0, 1390, 867, 899, 856, 857, 858, 854,
	855, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 948, 873, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 914, 893, 925, 883, 924,
	923, 0, 233, 885, 884, 236, 237, 238, 875, 947,
	239, 983, 984, 485, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 928, 262, 921, 920, 845, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 919, 269, 0, 270,
	0, 271, 272, 0, 273, 851, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 974, 975, 864, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 918, 916, 917,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 981, 0, 874, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	895, 0, 0, 217, 303, 305, 312, 0, 959, 306,
	907, 898, 909, 911, 912, 913, 908, 0, 900, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 933, 934,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 982, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 887, 341, 966, 344, 345, 347,
	346, 842, 218, 967, 348, 865, 952, 349, 922, 351,
	352, 0, 896, 354, 897, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 968, 362, 969, 976, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 977, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 915, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 970, 398, 399, 400, 401, 852,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 888, 889, 891, 892, 415, 421, 422,
	423, 945, 424, 404, 405, 425, 426, 971, 427, 428,
	910, 890, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 956, 436, 437, 438, 978, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 886, 0, 450,
	929, 930, 931, 932, 0, 457, 0, 451, 452, 979,
	453, 980, 863, 454, 455, 456, 0, 458, 459, 0,
	846, 460, 461, 462, 463, 464, 466, 946, 467, 0,
	894, 468, 469, 470, 519, 926, 973, 0, 472, 471,
	522, 1389, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 843, 0, 0, 0, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 839, 840, 0, 0, 0, 0,
	0, 0, 0, 869, 0, 0, 835, 867, 899, 856,
	857, 858, 854, 855, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 948, 873, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 914, 893,
	925, 883, 924, 923, 0, 233, 885, 884, 236, 237,
	238, 875, 947, 239, 983, 984, 485, 0, 240, 954,
	0, 937, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 957, 255, 256, 940, 938, 939, 944, 942, 941,
	943, 257, 258, 259, 260, 928, 262, 921, 920, 845,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 919,
	269, 0, 270, 0, 271, 272, 0, 273, 851, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 974, 975,
	864, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	918, 916, 917, 0, 289, 0, 290, 0, 0, 958,
	291, 292, 0, 293, 981, 0, 874, 294, 0, 295,
	296, 297, 298, 949, 950, 953, 350, 960, 299, 300,
	0, 301, 302, 895, 0, 0, 217, 303, 305, 312,
	0, 959, 306, 907, 898, 909, 911, 912, 913, 908,
	0, 900, 0, 313, 961, 951, 962, 314, 315, 316,
	963, 933, 934, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 982, 964, 327, 328, 965,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 887, 341, 966,
	344, 345, 347, 346, 842, 218, 967, 348, 865, 952,
	349, 922, 351, 352, 0, 896, 354, 897, 847, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 968, 362,
	969, 976, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 977, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 915, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 970, 398, 399,
	400, 401, 852, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 888, 889, 891, 892,
	415, 421, 422, 423, 945, 424, 404, 405, 425, 426,
	971, 427, 428, 910, 890, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 956, 436, 437, 438, 978, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	886, 0, 450, 929, 930, 931, 932, 0, 457, 0,
	451, 452, 979, 453, 980, 863, 454, 455, 456, 0,
	458, 459, 0, 846, 460, 461, 462, 463, 464, 466,
	946, 467, 0, 894, 468, 469, 470, 519, 926, 973,
	0, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 843, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 0, 0, 839, 840, 899,
	856, 857, 858, 854, 855, 868, 869, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 873,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 914,
	893, 925, 883, 924, 923, 0, 233, 885, 884, 236,
	237, 238, 875, 947, 239, 983, 984, 485, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 3500,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 928, 262, 921, 920,
	845, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	919, 269, 0, 270, 0, 271, 272, 0, 273, 851,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 974,
	975, 864, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 918, 916, 917, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 981, 0, 874, 294, 0,
	295, 296, 297, 298, 949, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 895, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 907, 898, 909, 911, 912, 913,
	908, 0, 900, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 933, 934, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 982, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 887, 341,
	966, 344, 345, 347, 346, 842, 218, 967, 348, 865,
	952, 349, 922, 351, 352, 0, 896, 354, 897, 847,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 968,
	362, 969, 976, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 977, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 915, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 970, 398,
	399, 400, 401, 852, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 888, 889, 891,
	892, 415, 421, 422, 423, 945, 424, 404, 405, 425,
	426, 971, 427, 428, 910, 890, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 956, 436, 437, 438, 978,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 886, 0, 450, 929, 930, 931, 932, 0, 457,
	0, 451, 452, 979, 453, 980, 863, 454, 455, 456,
	0, 458, 459, 0, 846, 460, 461, 462, 463, 464,
	466, 946, 467, 0, 894, 468, 469, 470, 519, 926,
	973, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 843, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 839, 840,
	899, 856, 857, 858, 854, 855, 868, 869, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 983, 984, 485, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	3352, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 845, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	851, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	974, 975, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 981, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 982, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 346, 842, 218, 967, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	847, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	968, 362, 969, 976, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 977, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 915,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 970,
	398, 399, 400, 401, 852, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 888, 889,
	891, 892, 415, 421, 422, 423, 945, 424, 404, 405,
	425, 426, 971, 427, 428, 910, 890, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 956, 436, 437, 438,
	978, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 886, 0, 450, 929, 930, 931, 932, 0,
	457, 0, 451, 452, 979, 453, 980, 863, 454, 455,
	456, 0, 458, 459, 0, 846, 460, 461, 462, 463,
	464, 466, 946, 467, 0, 894, 468, 469, 470, 519,
	926, 973, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 843, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 839,
	840, 899, 856, 857, 858, 854, 855, 868, 869, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	948, 873, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 914, 893, 925, 883, 924, 923, 0, 233, 885,
	884, 236, 237, 238, 875, 947, 239, 983, 984, 485,
	0, 240, 954, 0, 937, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 957, 255, 256, 940, 938, 939,
	944, 942, 941, 943, 257, 258, 259, 260, 928, 262,
	921, 920, 845, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 919, 269, 0, 270, 0, 271, 272, 0,
	273, 851, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 974, 975, 864, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 918, 916, 917, 0, 289, 0, 290,
	0, 0, 958, 291, 292, 0, 293, 981, 0, 874,
	294, 0, 295, 296, 297, 298, 949, 950, 953, 350,
	960, 299, 300, 0, 301, 302, 895, 0, 0, 217,
	303, 305, 312, 0, 959, 306, 907, 898, 909, 911,
	912, 913, 908, 0, 900, 0, 313, 961, 951, 962,
	314, 315, 316, 963, 933, 934, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 982, 964,
	327, 328, 965, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	887, 341, 966, 344, 345, 347, 346, 842, 3073, 967,
	348, 865, 952, 349, 922, 351, 352, 0, 896, 354,
	897, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 968, 362, 969, 976, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 977, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	915, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	970, 398, 399, 400, 401, 852, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 888,
	889, 891, 892, 415, 421, 422, 423, 945, 424, 404,
	405, 425, 426, 971, 427, 428, 910, 890, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 956, 436, 437,
	438, 978, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 886, 0, 450, 929, 930, 931, 932,
	0, 457, 0, 451, 452, 979, 453, 980, 863, 454,
	455, 456, 0, 458, 459, 0, 846, 460, 461, 462,
	463, 464, 466, 946, 467, 0, 894, 468, 469, 470,
	519, 926, 973, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 843, 0, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	839, 840, 1595, 0, 0, 0, 0, 0, 0, 869,
	0, 0, 0, 867, 899, 856, 857, 858, 854, 855,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 948, 873, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 914, 893, 925, 883, 924, 923,
	0, 233, 885, 884, 236, 237, 238, 875, 947, 239,
	983, 984, 485, 0, 240, 954, 0, 937, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 256,
	940, 938, 939, 944, 942, 941, 943, 257, 258, 259,
	260, 928, 262, 921, 920, 845, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 919, 269, 0, 270, 0,
	271, 272, 0, 273, 851, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 974, 975, 864, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 918, 916, 917, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	981, 0, 874, 294, 0, 295, 296, 297, 298, 949,
	950, 953, 350, 960, 299, 300, 0, 301, 302, 895,
	0, 0, 217, 303, 305, 312, 0, 959, 306, 907,
	898, 909, 911, 912, 913, 908, 0, 900, 0, 313,
	961, 951, 962, 314, 315, 316, 963, 933, 934, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 982, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 887, 341, 966, 344, 345, 347, 346,
	842, 218, 967, 348, 865, 952, 349, 922, 351, 352,
	0, 896, 354, 897, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 968, 362, 969, 976, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	977, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 915, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 970, 398, 399, 400, 401, 852, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 888, 889, 891, 892, 415, 421, 422, 423,
	945, 424, 404, 405, 425, 426, 971, 427, 428, 910,
	890, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	956, 436, 437, 438, 978, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 886, 0, 450, 929,
	930, 931, 932, 0, 457, 0, 451, 452, 979, 453,
	980, 863, 454, 455, 456, 0, 458, 459, 0, 846,
	460, 461, 462, 463, 464, 466, 946, 467, 0, 894,
	468, 469, 470, 519, 926, 973, 2879, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	843, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 839, 840, 899, 856, 857, 858, 854,
	855, 868, 869, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 948, 873, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 914, 893, 925, 883, 924,
	923, 0, 233, 885, 884, 236, 237, 238, 875, 947,
	239, 983, 984, 485, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 928, 262, 921, 920, 845, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 919, 269, 0, 270,
	0, 271, 272, 0, 273, 851, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 974, 975, 864, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 918, 916, 917,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 981, 0, 874, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	895, 0, 0, 1991, 303, 305, 312, 0, 959, 306,
	907, 898, 909, 911, 912, 913, 908, 0, 900, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 933, 934,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 982, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 887, 341, 966, 344, 345, 347,
	346, 842, 218, 967, 348, 865, 952, 349, 922, 351,
	352, 0, 896, 354, 897, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 968, 362, 969, 976, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 977, 373, 508, 374, 1990, 375, 0, 376, 377,
	378, 379, 380, 381, 915, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 970, 398, 399, 400, 401, 852,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 888, 889, 891, 892, 415, 421, 422,
	423, 945, 424, 404, 405, 425, 426, 971, 427, 428,
	910, 890, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 956, 436, 437, 438, 978, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 886, 0, 450,
	929, 930, 931, 932, 0, 457, 0, 451, 452, 979,
	453, 980, 863, 454, 455, 456, 0, 458, 459, 0,
	846, 460, 461, 462, 463, 464, 466, 946, 467, 0,
	894, 468, 469, 470, 519, 926, 973, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 843, 0, 0, 0, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 839, 840, 899, 856, 857, 858,
	854, 855, 868, 869, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 983, 984, 485, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 262, 921, 920, 845, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 851, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 974, 975, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 981, 0, 874, 294, 0, 295, 296, 297,
	298, 949, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 895, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 982, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 887, 341, 966, 344, 345,
	347, 346, 842, 218, 967, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 847, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 976,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 977, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 915, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	852, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 888, 889, 891, 892, 415, 421,
	422, 423, 945, 424, 404, 405, 425, 426, 971, 427,
	428, 910, 890, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 956, 436, 437, 438, 978, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 886, 0,
	450, 929, 930, 931, 932, 0, 457, 0, 451, 452,
	979, 453, 980, 863, 454, 455, 456, 0, 458, 459,
	0, 846, 460, 461, 462, 463, 464, 466, 946, 467,
	0, 894, 468, 469, 470, 519, 926, 973, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 843, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 0, 0, 839, 840, 899, 856, 857,
	858, 854, 855, 868, 869, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 948, 873, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 914, 893, 925,
	883, 924, 923, 0, 233, 885, 884, 236, 237, 238,
	875, 947, 239, 983, 984, 485, 0, 240, 954, 0,
	937, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 256, 940, 938, 939, 944, 942, 941, 943,
	257, 258, 259, 260, 928, 262, 921, 920, 845, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 919, 269,
	0, 270, 0, 271, 272, 0, 273, 851, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 974, 975, 864,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 918,
	916, 917, 0, 289, 0, 290, 0, 0, 958, 291,
	292, 0, 293, 981, 0, 874, 294, 0, 295, 296,
	297, 298, 949, 950, 953, 350, 960, 299, 300, 0,
	301, 302, 895, 0, 0, 217, 303, 305, 312, 0,
	959, 306, 907, 898, 909, 911, 912, 913, 908, 0,
	900, 0, 313, 961, 951, 962, 314, 315, 316, 963,
	933, 934, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 982, 964, 327, 328, 965, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 887, 341, 966, 344,
	345, 347, 346, 842, 218, 967, 348, 865, 952, 349,
	922, 351, 352, 0, 896, 354, 897, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 968, 362, 969,
	976, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 977, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 915, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 970, 398, 399, 400,
	401, 852, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 888, 889, 891, 892, 415,
	421, 422, 423, 945, 424, 404, 405, 425, 426, 971,
	427, 428, 910, 890, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 956, 436, 437, 438, 978, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 886,
	0, 450, 929, 930, 931, 932, 0, 457, 0, 451,
	452, 979, 453, 980, 863, 454, 455, 456, 0, 458,
	459, 0, 846, 460, 461, 462, 463, 464, 466, 946,
	467, 0, 894, 468, 469, 470, 519, 926, 973, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 843, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 0, 0, 839, 840, 1595, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 0, 867,
	899, 856, 857, 858, 854, 855, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 983, 984, 485, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 845, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	851, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	974, 975, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	2168, 958, 291, 292, 0, 293, 981, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 982, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 346, 842, 218, 967, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	968, 362, 969, 976, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 977, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 915,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 970,
	398, 399, 400, 401, 852, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 888, 889,
	891, 892, 415, 421, 422, 423, 945, 424, 404, 405,
	425, 426, 971, 427, 428, 910, 890, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 956, 436, 437, 438,
	978, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 886, 0, 450, 929, 930, 931, 932, 0,
	457, 0, 451, 452, 979, 453, 980, 863, 454, 455,
	456, 0, 458, 459, 0, 846, 460, 461, 462, 463,
	464, 466, 946, 467, 0, 894, 468, 469, 470, 519,
	926, 973, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 843, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 839,
	840, 899, 856, 857, 858, 854, 855, 868, 869, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	948, 873, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 914, 893, 925, 883, 924, 923, 0, 233, 885,
	884, 236, 237, 238, 875, 947, 239, 983, 984, 485,
	0, 240, 954, 0, 937, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 957, 255, 256, 940, 938, 939,
	944, 942, 941, 943, 257, 258, 259, 260, 928, 262,
	921, 920, 845, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 919, 269, 0, 270, 0, 271, 272, 0,
	273, 851, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 974, 975, 864, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 918, 916, 917, 0, 289, 0, 290,
	0, 0, 958, 291, 292, 0, 293, 981, 0, 874,
	294, 0, 295, 296, 297, 298, 949, 950, 953, 350,
	960, 299, 300, 0, 301, 302, 895, 0, 0, 217,
	303, 305, 312, 0, 959, 306, 907, 898, 909, 911,
	912, 913, 908, 0, 900, 0, 313, 961, 951, 962,
	314, 315, 316, 963, 933, 934, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 982, 964,
	327, 328, 965, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	887, 341, 966, 344, 345, 347, 346, 842, 218, 967,
	348, 865, 952, 349, 922, 351, 352, 0, 896, 354,
	897, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 968, 362, 969, 976, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 977, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	915, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	970, 398, 399, 400, 401, 852, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 888,
	889, 891, 892, 415, 421, 422, 423, 945, 424, 404,
	405, 425, 426, 971, 427, 428, 910, 890, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 956, 436, 437,
	438, 978, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 886, 0, 450, 929, 930, 931, 932,
	0, 457, 0, 451, 452, 979, 453, 980, 863, 454,
	455, 456, 0, 458, 459, 0, 846, 460, 461, 462,
	463, 464, 466, 946, 467, 0, 894, 468, 469, 470,
	519, 926, 973, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 843, 0, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	839, 840, 0, 0, 0, 0, 0, 0, 0, 869,
	1533, 0, 2173, 867, 899, 856, 857, 858, 854, 855,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 948, 873, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 914, 893, 925, 883, 924, 923,
	0, 233, 885, 884, 236, 237, 238, 875, 947, 239,
	983, 984, 485, 0, 240, 954, 0, 937, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 256,
	940, 938, 939, 944, 942, 941, 943, 257, 258, 259,
	260, 928, 262, 921, 920, 845, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 919, 269, 0, 270, 0,
	271, 272, 0, 273, 851, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 974, 975, 864, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 918, 916, 917, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	981, 0, 874, 294, 0, 295, 296, 297, 298, 949,
	950, 953, 350, 960, 299, 300, 0, 301, 302, 895,
	0, 0, 217, 303, 305, 312, 0, 959, 306, 907,
	898, 909, 911, 912, 913, 908, 0, 900, 0, 313,
	961, 951, 962, 314, 315, 316, 963, 933, 934, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 982, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 887, 341, 966, 344, 345, 347, 346,
	842, 218, 967, 348, 865, 952, 349, 922, 351, 352,
	0, 896, 354, 897, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 968, 362, 969, 976, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	977, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 915, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 970, 398, 399, 400, 401, 852, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 888, 889, 891, 892, 415, 421, 422, 423,
	945, 424, 404, 405, 425, 426, 971, 427, 428, 910,
	890, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	956, 436, 437, 438, 978, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 886, 0, 450, 929,
	930, 931, 932, 0, 457, 0, 451, 452, 979, 453,
	980, 863, 454, 455, 456, 0, 458, 459, 0, 846,
	460, 461, 462, 463, 464, 466, 946, 467, 0, 894,
	468, 469, 470, 519, 926, 973, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	843, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 839, 840, 0, 0, 0, 0, 0,
	0, 0, 869, 0, 0, 2171, 867, 899, 856, 857,
	858, 854, 855, 868, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 948, 873, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 914, 893, 925,
	883, 924, 923, 0, 233, 885, 884, 236, 237, 238,
	875, 947, 239, 983, 984, 485, 0, 240, 954, 0,
	937, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 256, 940, 938, 939, 944, 942, 941, 943,
	257, 258, 259, 260, 928, 262, 921, 920, 845, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 919, 269,
	0, 270, 0, 271, 272, 0, 273, 851, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 974, 975, 864,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 918,
	916, 917, 0, 289, 0, 290, 0, 0, 958, 291,
	292, 0, 293, 981, 0, 874, 294, 0, 295, 296,
	297, 298, 949, 950, 953, 350, 960, 299, 300, 0,
	301, 302, 895, 0, 0, 217, 303, 305, 312, 0,
	959, 306, 907, 898, 909, 911, 912, 913, 908, 0,
	900, 0, 313, 961, 951, 962, 314, 315, 316, 963,
	933, 934, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 982, 964, 327, 328, 965, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 887, 341, 966, 344,
	345, 347, 346, 842, 218, 967, 348, 865, 952, 349,
	922, 351, 352, 0, 896, 354, 897, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 968, 362, 969,
	976, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 977, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 915, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 970, 398, 399, 400,
	401, 852, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 888, 889, 891, 892, 415,
	421, 422, 423, 945, 424, 404, 405, 425, 426, 971,
	427, 428, 910, 890, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 956, 436, 437, 438, 978, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 886,
	0, 450, 929, 930, 931, 932, 0, 457, 0, 451,
	452, 979, 453, 980, 863, 454, 455, 456, 0, 458,
	459, 0, 846, 460, 461, 462, 463, 464, 466, 946,
	467, 0, 894, 468, 469, 470, 519, 926, 973, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 843, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 0, 0, 839, 840, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 2159, 867,
	899, 856, 857, 858, 854, 855, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 983, 984, 485, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 845, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	851, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	974, 975, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 981, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 982, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 346, 842, 218, 967, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	968, 362, 969, 976, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 977, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 915,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 970,
	398, 399, 400, 401, 852, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 888, 889,
	891, 892, 415, 421, 422, 423, 945, 424, 404, 405,
	425, 426, 971, 427, 428, 910, 890, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 956, 436, 437, 438,
	978, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 886, 0, 450, 929, 930, 931, 932, 0,
	457, 0, 451, 452, 979, 453, 980, 863, 454, 455,
	456, 0, 458, 459, 0, 846, 460, 461, 462, 463,
	464, 466, 946, 467, 0, 894, 468, 469, 470, 519,
	926, 973, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 843, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 869, 0,
	0, 2148, 867, 899, 856, 857, 858, 854, 855, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 948, 873, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 914, 893, 925, 883, 924, 923, 0,
	233, 885, 884, 236, 237, 238, 875, 947, 239, 983,
	984, 485, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	928, 262, 921, 920, 845, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 919, 269, 0, 270, 0, 271,
	272, 0, 273, 851, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 974, 975, 864, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 918, 916, 917, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 981,
	0, 874, 294, 0, 295, 296, 297, 298, 949, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 895, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 907, 898,
	909, 911, 912, 913, 908, 0, 900, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 933, 934, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	982, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 887, 341, 966, 344, 345, 347, 346, 842,
	218, 967, 348, 865, 952, 349, 922, 351, 352, 0,
	896, 354, 897, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 968, 362, 969, 976, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 977,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 915, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 970, 398, 399, 400, 401, 852, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 888, 889, 891, 892, 415, 421, 422, 423, 945,
	424, 404, 405, 425, 426, 971, 427, 428, 910, 890,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 956,
	436, 437, 438, 978, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 886, 0, 450, 929, 930,
	931, 932, 0, 457, 0, 451, 452, 979, 453, 980,
	863, 454, 455, 456, 0, 458, 459, 0, 846, 460,
	461, 462, 463, 464, 466, 946, 467, 0, 894, 468,
	469, 470, 519, 926, 973, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 843,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 839, 840, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 2146, 867, 2137, 2144, 857, 858,
	854, 855, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 983, 984, 485, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 2140, 921, 920, 845, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 851, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 974, 975, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 981, 0, 874, 294, 0, 295, 296, 297,
	2141, 949, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 895, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 982, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 2142, 2139, 342, 887, 341, 966, 344, 345,
	347, 346, 842, 218, 967, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 976,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 977, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 915, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	852, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	2143, 0, 419, 420, 888, 889, 891, 892, 415, 421,
	422, 423, 945, 424, 404, 405, 425, 426, 971, 427,
	428, 910, 890, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 956, 436, 437, 438, 978, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 886, 0,
	450, 929, 930, 931, 932, 0, 457, 0, 451, 452,
	979, 453, 980, 863, 454, 455, 456, 0, 458, 459,
	0, 846, 460, 461, 462, 463, 464, 466, 946, 467,
	0, 894, 468, 469, 470, 519, 926, 973, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	2138, 477, 843, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 0, 0, 839, 840, 0, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 2134, 867, 2137,
	2144, 857, 858, 854, 855, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 873,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 914,
	893, 925, 883, 924, 923, 0, 233, 885, 884, 236,
	237, 238, 875, 947, 239, 983, 984, 485, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 928, 2140, 921, 920,
	845, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	919, 269, 0, 270, 0, 271, 272, 0, 273, 851,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 974,
	975, 864, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 918, 916, 917, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 981, 0, 874, 294, 0,
	295, 296, 297, 2141, 949, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 895, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 907, 898, 909, 911, 912, 913,
	908, 0, 900, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 933, 934, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 982, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 2142, 2139, 342, 887, 341,
	966, 344, 345, 347, 346, 842, 218, 967, 348, 865,
	952, 349, 922, 351, 352, 0, 896, 354, 897, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 968,
	362, 969, 976, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 977, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 915, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 970, 398,
	399, 400, 401, 852, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 2143, 0, 419, 420, 888, 889, 891,
	892, 415, 421, 422, 423, 945, 424, 404, 405, 425,
	426, 971, 427, 428, 910, 890, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 956, 436, 437, 438, 978,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 886, 0, 450, 929, 930, 931, 932, 0, 457,
	0, 451, 452, 979, 453, 980, 863, 454, 455, 456,
	0, 458, 459, 0, 846, 460, 461, 462, 463, 464,
	466, 946, 467, 0, 894, 468, 469, 470, 519, 926,
	973, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 2138, 477, 843, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 839, 840,
	899, 856, 857, 858, 854, 855, 868, 869, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 948,
	873, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	914, 893, 925, 883, 924, 923, 0, 233, 885, 884,
	236, 237, 238, 875, 947, 239, 983, 984, 485, 0,
	240, 954, 0, 937, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 940, 938, 939, 944,
	942, 941, 943, 257, 258, 259, 260, 928, 262, 921,
	920, 845, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 919, 269, 0, 270, 0, 271, 272, 0, 273,
	851, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	974, 975, 864, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 918, 916, 917, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 981, 0, 874, 294,
	0, 295, 296, 297, 298, 949, 950, 953, 350, 960,
	299, 300, 0, 301, 302, 895, 0, 0, 217, 303,
	305, 312, 0, 959, 306, 907, 898, 909, 911, 912,
	913, 908, 0, 900, 0, 313, 961, 951, 962, 314,
	315, 316, 963, 933, 934, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 982, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 887,
	341, 966, 344, 345, 347, 346, 842, 218, 967, 348,
	865, 952, 349, 922, 351, 352, 0, 896, 354, 897,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	968, 362, 969, 976, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 977, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 915,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 970,
	398, 399, 400, 401, 852, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 888, 889,
	891, 892, 415, 421, 422, 423, 945, 424, 404, 405,
	425, 426, 971, 427, 428, 910, 890, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 956, 436, 437, 438,
	978, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 886, 0, 450, 929, 930, 931, 932, 0,
	457, 0, 451, 452, 979, 453, 980, 863, 454, 455,
	456, 0, 458, 459, 0, 846, 460, 461, 462, 463,
	464, 466, 946, 467, 0, 894, 468, 469, 470, 519,
	926, 973, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 843, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 839,
	840, 0, 0, 0, 0, 0, 1541, 0, 869, 0,
	0, 0, 867, 899, 856, 857, 858, 854, 855, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 1977, 224, 0, 0, 0,
	0, 0, 948, 873, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 914, 893, 925, 883, 924, 923, 0,
	233, 885, 884, 236, 237, 238, 875, 947, 239, 983,
	984, 485, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	928, 262, 921, 920, 845, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 919, 269, 0, 270, 0, 271,
	272, 0, 273, 851, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 974, 975, 864, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 918, 916, 917, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 981,
	0, 874, 294, 0, 295, 296, 297, 298, 949, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 895, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 907, 898,
	909, 911, 912, 913, 908, 0, 900, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 933, 934, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	982, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 887, 341, 966, 344, 345, 347, 346, 842,
	218, 967, 348, 865, 952, 349, 922, 351, 352, 0,
	896, 354, 897, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 968, 362, 969, 976, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 977,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 915, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 970, 398, 399, 400, 401, 852, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 888, 889, 891, 892, 415, 421, 422, 423, 945,
	424, 404, 405, 425, 426, 971, 427, 428, 910, 890,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 956,
	436, 437, 438, 978, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 886, 0, 450, 929, 930,
	931, 932, 0, 457, 0, 451, 452, 979, 453, 980,
	863, 454, 455, 456, 0, 458, 459, 0, 846, 460,
	461, 462, 463, 464, 466, 946, 467, 0, 894, 468,
	469, 470, 519, 926, 973, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 843,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 839, 840, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 1215, 867, 899, 856, 857, 858,
	854, 855, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 983, 984, 485, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 262, 921, 920, 845, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 851, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 974, 975, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 981, 0, 874, 294, 0, 295, 296, 297,
	298, 1214, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 895, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 982, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 887, 341, 966, 344, 345,
	347, 346, 842, 218, 967, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 976,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 977, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 915, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	852, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 888, 889, 891, 892, 415, 421,
	422, 423, 945, 424, 404, 405, 425, 426, 971, 427,
	428, 910, 890, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 956, 436, 437, 438, 978, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 886, 0,
	450, 929, 930, 931, 932, 0, 457, 0, 451, 452,
	979, 453, 980, 863, 454, 455, 456, 0, 458, 459,
	0, 846, 460, 461, 462, 463, 464, 466, 946, 467,
	0, 894, 468, 469, 470, 519, 926, 973, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 843, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 0, 0, 839, 840, 0, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 1209, 867, 899,
	856, 857, 858, 854, 855, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 873,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 914,
	893, 925, 883, 924, 923, 0, 233, 885, 884, 236,
	237, 238, 875, 947, 239, 983, 984, 485, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 928, 262, 921, 920,
	845, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	919, 269, 0, 270, 0, 271, 272, 0, 273, 851,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 974,
	975, 864, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 918, 916, 917, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 981, 0, 874, 294, 0,
	295, 296, 297, 298, 1208, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 895, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 907, 898, 909, 911, 912, 913,
	908, 0, 900, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 933, 934, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 982, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 887, 341,
	966, 344, 345, 347, 346, 842, 218, 967, 348, 865,
	952, 349, 922, 351, 352, 0, 896, 354, 897, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 968,
	362, 969, 976, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 977, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 915, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 970, 398,
	399, 400, 401, 852, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 888, 889, 891,
	892, 415, 421, 422, 423, 945, 424, 404, 405, 425,
	426, 971, 427, 428, 910, 890, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 956, 436, 437, 438, 978,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 886, 0, 450, 929, 930, 931, 932, 0, 457,
	0, 451, 452, 979, 453, 980, 863, 454, 455, 456,
	0, 458, 459, 0, 846, 460, 461, 462, 463, 464,
	466, 946, 467, 0, 894, 468, 469, 470, 519, 926,
	973, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 843, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 839, 840,
	0, 0, 0, 0, 0, 0, 0, 869, 0, 0,
	1204, 867, 899, 856, 857, 858, 854, 855, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 948, 873, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 914, 893, 925, 883, 924, 923, 0, 233,
	885, 884, 236, 237, 238, 875, 947, 239, 983, 984,
	485, 0, 240, 954, 0, 937, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 256, 940, 938,
	939, 944, 942, 941, 943, 257, 258, 259, 260, 928,
	262, 921, 920, 845, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 919, 269, 0, 270, 0, 271, 272,
	0, 273, 851, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 974, 975, 864, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 918, 916, 917, 0, 289, 0,
	290, 0, 0, 958, 291, 292, 0, 293, 981, 0,
	874, 294, 0, 295, 296, 297, 298, 949, 950, 953,
	350, 960, 299, 300, 0, 301, 302, 895, 0, 0,
	217, 303, 305, 312, 0, 959, 306, 907, 898, 909,
	911, 912, 913, 908, 0, 900, 0, 313, 961, 951,
	962, 314, 315, 316, 963, 933, 934, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 982,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 887, 341, 966, 344, 345, 347, 346, 842, 218,
	967, 348, 865, 952, 349, 922, 351, 352, 0, 896,
	354, 897, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 968, 362, 969, 976, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 977, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 915, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 970, 398, 399, 400, 401, 852, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	888, 889, 891, 892, 415, 421, 422, 423, 945, 424,
	404, 405, 425, 426, 971, 427, 428, 910, 890, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 956, 436,
	437, 438, 978, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 886, 0, 450, 929, 930, 931,
	932, 0, 457, 0, 451, 452, 979, 453, 980, 863,
	454, 455, 456, 0, 458, 459, 0, 846, 460, 461,
	462, 463, 464, 466, 946, 467, 0, 894, 468, 469,
	470, 519, 926, 973, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 843, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 839, 840, 899, 856, 857, 858, 854, 855, 868,
	869, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 948, 873, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 914, 893, 925, 883, 924, 923, 0,
	233, 885, 884, 236, 237, 238, 875, 947, 239, 983,
	984, 485, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	928, 262, 921, 920, 845, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 919, 269, 0, 270, 0, 271,
	272, 0, 273, 851, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 974, 975, 864, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 918, 916, 917, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 981,
	0, 874, 294, 0, 295, 296, 297, 298, 949, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 895, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 907, 898,
	909, 911, 912, 913, 908, 0, 900, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 933, 934, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	982, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 887, 341, 966, 344, 345, 347, 346, 842,
	218, 967, 348, 865, 952, 349, 922, 351, 352, 0,
	896, 354, 897, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 968, 362, 969, 976, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 977,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 915, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 970, 398, 399, 400, 401, 852, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 888, 889, 891, 892, 415, 421, 422, 423, 945,
	424, 404, 405, 425, 426, 971, 427, 428, 910, 890,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 956,
	436, 437, 438, 978, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 886, 0, 450, 929, 930,
	931, 932, 0, 457, 0, 451, 452, 979, 453, 980,
	863, 454, 455, 456, 0, 458, 459, 0, 846, 460,
	461, 462, 463, 464, 466, 946, 467, 0, 894, 468,
	469, 470, 519, 926, 973, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 843,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 839, 840, 899, 856, 857, 858, 854, 855,
	868, 869, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 948, 873, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 914, 893, 925, 883, 924, 923,
	0, 233, 885, 884, 236, 237, 238, 875, 947, 239,
	983, 984, 485, 0, 240, 954, 0, 937, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 3529,
	940, 938, 939, 944, 942, 941, 943, 257, 258, 259,
	260, 928, 262, 921, 920, 845, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 919, 269, 0, 270, 0,
	271, 272, 0, 273, 851, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 974, 975, 864, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 918, 916, 917, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	981, 0, 874, 294, 0, 295, 296, 297, 298, 949,
	950, 953, 350, 960, 299, 300, 0, 301, 302, 895,
	0, 0, 217, 303, 305, 312, 0, 959, 306, 907,
	898, 909, 911, 912, 913, 908, 0, 900, 0, 313,
	961, 951, 962, 314, 315, 316, 963, 933, 934, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 982, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 887, 341, 966, 344, 345, 347, 346,
	842, 218, 967, 348, 865, 952, 349, 922, 351, 352,
	0, 896, 354, 897, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 968, 362, 969, 976, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	977, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 915, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 970, 398, 399, 400, 401, 852, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 888, 889, 891, 892, 415, 421, 422, 423,
	945, 424, 404, 405, 425, 426, 971, 427, 428, 910,
	890, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	956, 436, 437, 438, 978, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 886, 0, 450, 929,
	930, 931, 932, 0, 457, 0, 451, 452, 979, 453,
	980, 863, 454, 455, 456, 0, 3528, 459, 0, 846,
	460, 461, 462, 463, 464, 466, 946, 467, 0, 894,
	468, 469, 470, 519, 926, 973, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	843, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 839, 840, 899, 856, 857, 858, 854,
	855, 868, 869, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 948, 873, 0, 0, 0, 225,
	227, 226, 228, 229, 3527, 914, 893, 925, 883, 924,
	923, 0, 233, 885, 884, 236, 237, 238, 875, 947,
	239, 983, 984, 485, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	3529, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 928, 262, 921, 920, 845, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 919, 269, 0, 270,
	0, 271, 272, 0, 273, 851, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 974, 975, 864, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 918, 916, 917,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 981, 0, 874, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	895, 0, 0, 217, 303, 305, 312, 0, 959, 306,
	907, 898, 909, 911, 912, 913, 908, 0, 900, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 933, 934,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 982, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 887, 341, 966, 344, 345, 347,
	346, 842, 218, 967, 348, 865, 952, 349, 922, 351,
	352, 0, 896, 354, 897, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 968, 362, 969, 976, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 977, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 915, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 970, 398, 399, 400, 401, 852,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 888, 889, 891, 892, 415, 421, 422,
	423, 945, 424, 404, 405, 425, 426, 971, 427, 428,
	910, 890, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 956, 436, 437, 438, 978, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 886, 0, 450,
	929, 930, 931, 932, 0, 457, 0, 451, 452, 979,
	453, 980, 863, 454, 455, 456, 0, 3528, 459, 0,
	846, 460, 461, 462, 463, 464, 466, 946, 467, 0,
	894, 468, 469, 470, 519, 926, 973, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 843, 0, 0, 0, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 839, 840, 899, 856, 857, 858,
	854, 855, 868, 869, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 948, 873, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 914, 893, 925, 883,
	924, 923, 0, 233, 885, 884, 236, 237, 238, 875,
	947, 239, 983, 984, 485, 0, 240, 954, 0, 937,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 940, 938, 939, 944, 942, 941, 943, 257,
	258, 259, 260, 928, 262, 921, 920, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 919, 269, 0,
	270, 0, 271, 272, 0, 273, 851, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 974, 975, 864, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 918, 916,
	917, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 981, 0, 874, 294, 0, 295, 296, 297,
	298, 949, 950, 953, 350, 960, 299, 300, 0, 301,
	302, 895, 0, 0, 217, 303, 305, 312, 0, 959,
	306, 907, 898, 909, 911, 912, 913, 908, 0, 900,
	0, 313, 961, 951, 962, 314, 315, 316, 963, 933,
	934, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 982, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 887, 341, 966, 344, 345,
	347, 346, 0, 218, 967, 348, 865, 952, 349, 922,
	351, 352, 0, 896, 354, 897, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 976,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 977, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 915, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	852, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 888, 889, 891, 892, 415, 421,
	422, 423, 945, 424, 404, 405, 425, 426, 971, 427,
	428, 910, 890, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 956, 436, 437, 438, 978, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 886, 0,
	450, 929, 930, 931, 932, 0, 457, 0, 451, 452,
	979, 453, 980, 863, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 946, 467,
	0, 894, 468, 469, 470, 519, 926, 973, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 2156, 0,
	0, 0, 0, 0, 0, 2154, 2155, 899, 856, 857,
	858, 854, 855, 868, 869, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 948, 873, 0, 0,
	0, 225, 227, 226, 228, 229, 0, 914, 893, 925,
	883, 924, 923, 0, 233, 885, 884, 236, 237, 238,
	875, 947, 239, 983, 984, 485, 0, 240, 954, 0,
	937, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 3529, 940, 938, 939, 944, 942, 941, 943,
	257, 258, 259, 260, 928, 262, 921, 920, 845, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 919, 269,
	0, 270, 0, 271, 272, 0, 273, 851, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 974, 975, 864,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 918,
	916, 917, 0, 289, 0, 290, 0, 0, 958, 291,
	292, 0, 293, 981, 0, 874, 294, 0, 295, 296,
	297, 298, 949, 950, 953, 350, 0, 299, 300, 0,
	301, 302, 895, 0, 0, 217, 303, 305, 312, 0,
	959, 306, 907, 898, 909, 911, 912, 913, 908, 0,
	900, 0, 313, 0, 951, 0, 314, 315, 316, 963,
	933, 934, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 982, 964, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 887, 341, 966, 344,
	345, 347, 346, 842, 218, 0, 348, 865, 952, 349,
	922, 351, 352, 0, 896, 354, 897, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 968, 362, 969,
	976, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 977, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 915, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 970, 398, 399, 400,
	401, 852, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 888, 889, 891, 892, 415,
	421, 422, 423, 945, 424, 404, 405, 425, 426, 0,
	427, 428, 910, 890, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 956, 436, 437, 438, 978, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 886,
	0, 450, 929, 930, 931, 932, 0, 457, 0, 451,
	452, 979, 453, 980, 863, 454, 455, 456, 0, 3528,
	459, 0, 846, 460, 461, 462, 463, 464, 466, 946,
	467, 0, 894, 468, 469, 470, 519, 926, 973, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 1020, 0, 0, 839, 840, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 0, 867,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 948, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 947, 239, 483,
	484, 485, 0, 240, 954, 0, 937, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 940,
	938, 939, 944, 942, 941, 943, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 974, 975, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 981,
	0, 494, 294, 0, 295, 296, 297, 298, 949, 950,
	953, 350, 960, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 959, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 961,
	951, 962, 314, 315, 316, 963, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1007, 325, 324, 0, 326,
	982, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 966, 344, 345, 347, 346, 0,
	218, 967, 348, 0, 952, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 1012, 357, 358, 359, 0, 0,
	360, 361, 505, 968, 362, 969, 976, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 977,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 970, 398, 399, 400, 401, 510, 1014, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 182, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 945,
	424, 404, 405, 425, 426, 971, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 978, 0, 442, 443, 441, 184, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 979, 453, 980,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 946, 467, 0, 465, 468,
	469, 470, 1325, 520, 521, 0, 472, 471, 522, 1020,
	0, 0, 176, 473, 474, 523, 475, 476, 477, 0,
	177, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 948, 1004,
	0, 1627, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 947, 239, 483, 484, 485, 0, 240,
	954, 0, 937, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 940, 938, 939, 944, 942,
	941, 943, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 974,
	975, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 981, 0, 494, 294, 0,
	295, 296, 297, 298, 949, 950, 953, 350, 960, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 959, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 961, 951, 962, 314, 315,
	316, 963, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1007, 325, 324, 0, 326, 982, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	966, 344, 345, 347, 346, 0, 218, 967, 348, 0,
	952, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	1012, 357, 358, 359, 0, 0, 360, 361, 505, 968,
	362, 969, 976, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 977, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 970, 398,
	399, 400, 401, 510, 1014, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 182, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 945, 424, 404, 405, 425,
	426, 971, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 978,
	0, 442, 443, 441, 184, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 979, 453, 980, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 946, 467, 0, 465, 468, 469, 470, 1325, 520,
	521, 0, 472, 471, 522, 2620, 0, 1020, 176, 473,
	474, 523, 475, 476, 477, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 1004, 948, 1627, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 947, 239, 483, 484, 485, 0, 240, 954, 0,
	937, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 256, 940, 938, 939, 944, 942, 941, 943,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 974, 975, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 958, 291,
	292, 0, 293, 981, 0, 494, 294, 0, 295, 296,
	297, 298, 949, 950, 953, 350, 960, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	959, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 961, 951, 962, 314, 315, 316, 963,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1007,
	325, 324, 0, 326, 982, 964, 327, 328, 965, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 966, 344,
	345, 347, 346, 0, 218, 967, 348, 0, 952, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 1012, 357,
	358, 359, 0, 0, 360, 361, 505, 968, 362, 969,
	976, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 977, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 970, 398, 399, 400,
	401, 510, 1014, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 945, 424, 404, 405, 425, 426, 971,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 978, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 979, 453, 980, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 946,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 1003, 0, 1020, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 1004, 948, 1009, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 947,
	239, 483, 484, 485, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 974, 975, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 981, 0, 494, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 959, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1007, 325, 324,
	0, 326, 982, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	346, 0, 218, 967, 348, 0, 952, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 1012, 357, 358, 359,
	0, 0, 360, 361, 505, 968, 362, 969, 976, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 977, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 970, 398, 399, 400, 401, 510,
	1014, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 945, 424, 404, 405, 425, 426, 971, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 978, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 979,
	453, 980, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 946, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1020, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	948, 1004, 0, 1009, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 947, 239, 483, 484, 485,
	0, 240, 954, 0, 937, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 957, 255, 256, 940, 938, 939,
	944, 942, 941, 943, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 974, 975, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 958, 291, 292, 0, 293, 981, 0, 494,
	294, 0, 295, 296, 297, 298, 949, 950, 953, 350,
	960, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 959, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 961, 951, 962,
	314, 315, 316, 963, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1007, 325, 324, 0, 326, 982, 964,
	327, 328, 965, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 966, 344, 345, 347, 346, 0, 218, 967,
	348, 0, 952, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 1012, 357, 358, 359, 0, 0, 360, 361,
	505, 968, 362, 969, 976, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 977, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	970, 398, 399, 400, 401, 510, 1014, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 945, 424, 404,
	405, 425, 426, 971, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 978, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 979, 453, 980, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 946, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 1020, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 948, 1004, 0, 1009,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 947, 239, 483, 484, 485, 0, 240, 954, 0,
	937, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 256, 940, 938, 939, 944, 942, 941, 943,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 974, 975, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 958, 291,
	292, 0, 293, 981, 0, 494, 294, 0, 295, 296,
	297, 298, 949, 950, 953, 350, 960, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	959, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 961, 951, 962, 314, 315, 316, 963,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 982, 964, 327, 328, 965, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 966, 344,
	345, 347, 346, 0, 218, 967, 348, 0, 952, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 968, 362, 969,
	976, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 977, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 970, 398, 399, 400,
	401, 510, 1014, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 945, 424, 404, 405, 425, 426, 971,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 978, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 979, 453, 980, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 946,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 1322, 0, 1179, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 1522, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 1083, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 960, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 959, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 961, 501, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	346, 0, 0, 967, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 968, 362, 969, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 970, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	182, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 971, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	184, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 1325, 520, 521, 0, 472, 471,
	522, 0, 0, 0, 176, 473, 474, 523, 475, 476,
	477, 0, 177, 0, 0, 0, 0, 1179, 1178, 0,
	0, 0, 0, 1176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	1083, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	957, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 958, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 960, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	959, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 961, 501, 962, 314, 315, 316, 963,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 964, 327, 328, 965, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 966, 344,
	345, 347, 346, 0, 0, 967, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 968, 362, 969,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 970, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 971,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 1179, 1178, 0, 0, 0, 0, 1176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 1807, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 1083, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 957, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 958, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 960, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 959, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 961,
	501, 962, 314, 315, 316, 963, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 964, 327, 328, 965, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 966, 344, 345, 347, 346, 0,
	0, 967, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 968, 362, 969, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 970, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 971, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 1179,
	1178, 0, 0, 0, 0, 1176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 2817, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 1083, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 957, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	958, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 960, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 959, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 961, 501, 962, 314, 315,
	316, 963, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 964, 327, 328,
	965, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	966, 344, 345, 347, 346, 0, 0, 967, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 968,
	362, 969, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 970, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 971, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1020, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 948, 0, 0, 1331, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 947,
	239, 483, 484, 485, 0, 240, 954, 0, 937, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 957, 255,
	256, 940, 938, 939, 944, 942, 941, 943, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 974, 975, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 958, 291, 292, 0,
	293, 981, 0, 494, 294, 0, 295, 296, 297, 298,
	949, 950, 953, 350, 960, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 959, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 961, 951, 962, 314, 315, 316, 963, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 982, 964, 327, 328, 965, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 966, 344, 345, 347,
	346, 0, 218, 967, 348, 0, 952, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 968, 362, 969, 976, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 977, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 970, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 945, 424, 404, 405, 425, 426, 971, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 978, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 979,
	453, 980, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 946, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 832, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 182, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 184, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 1325, 520, 521, 0, 472, 471, 522, 213,
	0, 0, 176, 473, 474, 523, 475, 476, 477, 0,
	177, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 151, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 346, 0, 218, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 213, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 1632, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	346, 0, 218, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 213, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 2769, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 213, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 2391,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 213, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 2903, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 700,
	0, 590, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 1898, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 596, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 595, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 0, 589, 0,
	590, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 599, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 596, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 218, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 595, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 590, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 599, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 596, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 1928, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 595, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 590, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 599, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 596, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 595, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 213, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 599, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 218, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 1356, 0, 1179, 1178, 0, 0,
	0, 0, 1176, 0, 0, 0, 0, 0, 0, 599,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 1083,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 1355, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 960, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 959,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 961, 501, 962, 314, 315, 316, 963, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 966, 344, 345,
	347, 346, 0, 0, 967, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 1354, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 1353, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 971, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 1320, 0, 1179, 1178, 0, 0, 0, 0,
	1176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 1083, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 1319,
	496, 497, 350, 960, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 959, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	961, 501, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 346,
	0, 0, 967, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 968, 362, 969, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 970, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 971, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	1316, 0, 1179, 1178, 0, 0, 0, 0, 1176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 1083, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 958, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 1315, 496, 497,
	350, 960, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 959, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 961, 501,
	962, 314, 315, 316, 963, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 966, 344, 345, 347, 346, 0, 0,
	967, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 968, 362, 969, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 970, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 971, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 1254, 0,
	1179, 1178, 0, 0, 0, 0, 1176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 1083, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 957, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 958, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 1253, 496, 497, 350, 960,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 959, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 961, 501, 962, 314,
	315, 316, 963, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 964, 327,
	328, 965, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 966, 344, 345, 347, 346, 0, 0, 967, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	968, 362, 969, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 970,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 971, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 1251, 0, 1179, 1178,
	0, 0, 0, 0, 1176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 1083, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 957, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 958,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 1250, 496, 497, 350, 960, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 959, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 961, 501, 962, 314, 315, 316,
	963, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 964, 327, 328, 965,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 966,
	344, 345, 347, 346, 0, 0, 967, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 968, 362,
	969, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 970, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	971, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 1172, 0, 1179, 1178, 0, 0,
	0, 0, 1176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 1083,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 1174, 496, 497, 350, 960, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 959,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 961, 501, 962, 314, 315, 316, 963, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 966, 344, 345,
	347, 346, 0, 0, 967, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 971, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 1179, 1178, 0, 0, 0, 0, 1176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 1083, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 957, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 958, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 960, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 959, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 961, 501,
	962, 314, 315, 316, 963, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	964, 327, 328, 965, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 966, 344, 345, 347, 346, 0, 0,
	967, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 968, 362, 969, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 970, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 971, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 1179, 1178,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 1083, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 957, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 1721,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 958,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 960, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 959, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 961, 501, 962, 314, 315, 316,
	963, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 964, 327, 328, 965,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 966,
	344, 345, 347, 346, 0, 0, 967, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 968, 362,
	969, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 970, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	971, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 1179, 1178, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 1083, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 957, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 958, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 960, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 959, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	961, 501, 962, 314, 315, 316, 963, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 964, 327, 328, 965, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 966, 344, 345, 347, 346,
	0, 0, 967, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 968, 362, 969, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 970, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 971, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 1179, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 1083,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 957,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 958, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 960, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 959,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 961, 501, 962, 314, 315, 316, 963, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 964, 327, 328, 965, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 966, 344, 345,
	347, 346, 0, 0, 967, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 968, 362, 969, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 970, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 971, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 2280, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 2277, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 2427, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 2283, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 2424, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 2426, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 2423,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 2282, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 2425, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 2280,
	240, 486, 0, 0, 2274, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 2277, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 2283,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 2273, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	2282, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 2281, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 1409, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 218, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 1412, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 1410, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 1411, 471, 522, 1167, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 1169, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 1012, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 1164, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 1166,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 1012, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1071, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 1073, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 1012, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 552, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	551, 223, 541, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 544, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 545, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 546, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 540, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	541, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	544, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 545, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 546, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 218, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 1012, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 2356, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 218, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 1907, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 218, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 1840, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 1833, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 1832, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 1828, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 1830,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1309, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 1308, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 1306, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 1305, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 218, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 1303, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 1302, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 218, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 1299, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 1298, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 1274, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1189, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 1191, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 213, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 544, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	545, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 546, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 1935, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 218, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 1933, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 218, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 213, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 1931, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 692, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 691, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 690, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 213, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 2427, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 3236, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 531, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 530, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 529,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 213, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 2214, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 213, 2414,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 3027, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 213, 2414, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	2411, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	1914, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 1905, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 572, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 1049,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 1047, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 573, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 569, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 1050, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 568,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1852, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 1851, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 572, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	562, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	573, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	569, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 1330, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 568, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 1313, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 1312, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 1262, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 1261, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 1246, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1183, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 572, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 1049, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 1047, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	573, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	569, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 1050, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 568, 514, 515, 516, 0,
	457, 0, 451, 1048, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 213, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 219,
	220, 221, 222, 223, 1031, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 572, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	562, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 560, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 561, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	573, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 563, 402, 0, 403, 407, 408,
	569, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 564, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 568, 514, 515, 516, 0,
	457, 0, 451, 566, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 556, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 557, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 554, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 548, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	526, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 213, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 2709, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 2707, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 2695, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 213, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 2374, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 213, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 557, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 1864, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 0, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 1282, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 1224, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 213, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 986, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 213, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 0, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 0, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	0, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 0,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	1458, 1459, 0, 1491, 1492, 1493, 1501, 1502, 1503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	1489, 0, 0, 0, 0, 0, 0, 1461, 0, 0,
	0, 0, 1507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 1459, 0, 1491,
	1492, 1493, 1501, 1502, 1503, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 1494, 1489, 0, 0, 0,
	0, 1477, 0, 1461, 0, 0, 0, 0, 1507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1483, 1484,
	1485, 1486, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 0, 0, 1508, 0, 0, 0, 1488,
	1490, 0, 0, 0, 1483, 1484, 1485, 1486, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 1504,
	0, 1505, 0, 0, 0, 0, 0, 0, 1475, 1476,
	0, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 1508, 0, 0, 1496, 1488, 1490, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 1505, 0, 0,
	0, 1506, 0, 0, 1475, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1487, 0, 0, 1495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 0, 1491, 1492, 1493,
	1501, 1502, 1503, 0, 0, 1499, 0, 1487, 0, 0,
	0, 0, 0, 1494, 1489, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 1482, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 1499, 0, 0, 0, 0, 0, 0, 1480, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 1472, 1473, 1479, 1500, 1478, 1474, 0, 1471,
	1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 2564, 0, 0, 0,
	0, 0, 1483, 1484, 1485, 1486, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 1497, 0, 0, 1472, 1473,
	1479, 1500, 1478, 1474, 0, 1471, 1469, 1470, 1462, 1463,
	1464, 1465, 1467, 1468, 0, 0, 1498, 0, 0, 1508,
	0, 0, 2563, 1488, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 1505, 0, 0, 0, 0,
	0, 0, 1475, 1476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 1458, 1459, 0, 1491, 1492,
	1493, 1501, 1502, 1503, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1494, 1489, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 0, 0, 1507, 0, 0,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 1482, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 1459, 1499,
	1491, 1492, 1493, 1501, 1502, 1503, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 1489, 0, 0,
	0, 0, 0, 0, 1461, 0, 0, 0, 0, 1507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 1484, 1485, 1486, 0, 0, 0,
	0, 0, 1460, 1466, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	1508, 0, 0, 1497, 1488, 1490, 1472, 1473, 1479, 1500,
	1478, 1474, 0, 1471, 1469, 1470, 1462, 1463, 1464, 1465,
	1467, 1468, 0, 0, 1504, 0, 1505, 0, 0, 0,
	2560, 0, 0, 1475, 1476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 1484, 1485, 1486, 1496,
	0, 0, 0, 0, 0, 1466, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 0, 0, 1498,
	0, 0, 1508, 0, 0, 0, 1488, 1490, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 1505, 0,
	0, 0, 0, 0, 0, 1475, 1476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 1487, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 1458, 1459,
	1499, 1491, 1492, 1493, 1501, 1502, 1503, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 1489, 0,
	0, 0, 0, 0, 0, 1461, 0, 0, 0, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 0, 0, 1482, 0, 0, 0,
	0, 0, 1480, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 1497, 0, 0, 1472, 1473, 1479,
	1500, 1478, 1474, 0, 1471, 1469, 1470, 1462, 1463, 1464,
	1465, 1467, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 2559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 1484, 1485, 1486,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 0, 0, 1508, 0, 0, 1497, 1488, 1490, 1472,
	1473, 1479, 1500, 1478, 1474, 0, 1471, 1469, 1470, 1462,
	1463, 1464, 1465, 1467, 1468, 0, 0, 1504, 0, 1505,
	0, 0, 0, 2558, 0, 0, 1475, 1476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 1458,
	1459, 0, 1491, 1492, 1493, 1501, 1502, 1503, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 1489,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 0,
	0, 1507, 0, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 1482, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 1459, 1499, 1491, 1492, 1493, 1501, 1502, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 1489, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 1484, 1485,
	1486, 0, 0, 0, 0, 0, 1460, 1466, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 1498, 0, 0, 1508, 0, 0, 1497, 1488, 1490,
	1472, 1473, 1479, 1500, 1478, 1474, 0, 1471, 1469, 1470,
	1462, 1463, 1464, 1465, 1467, 1468, 0, 0, 1504, 0,
	1505, 0, 0, 0, 2089, 0, 0, 1475, 1476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1483,
	1484, 1485, 1486, 1496, 0, 0, 0, 0, 0, 1466,
	0, 0, 1481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 0, 1498, 0, 0, 1508, 0, 0, 0,
	1488, 1490, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 1505, 0, 0, 0, 0, 0, 0, 1475,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	1487, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 0, 1506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 1497, 0,
	0, 1472, 1473, 1479, 1500, 1478, 1474, 0, 1471, 1469,
	1470, 1462, 1463, 1464, 1465, 1467, 1468, 0, 0, 0,
	0, 3483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 0, 1491, 1492, 1493,
	1501, 1502, 1503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 1489, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 1507, 0, 0, 0,
	1497, 0, 0, 1472, 1473, 1479, 1500, 1478, 1474, 0,
	1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 1460,
	0, 0, 0, 3479, 0, 0, 0, 0, 1480, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 1458, 1459, 0, 1491, 1492, 1493, 1501, 1502, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 1489, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1483, 1484, 1485, 1486, 1460, 0, 0, 0,
	0, 0, 1466, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 1508,
	0, 0, 0, 1488, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 1505, 0, 0, 0, 0,
	0, 0, 1475, 1476, 0, 0, 0, 0, 0, 1483,
	1484, 1485, 1486, 0, 0, 0, 0, 0, 1496, 1466,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1498, 0, 1506, 1508, 0, 0, 0,
	1488, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 1505, 0, 0, 0, 0, 0, 0, 1475,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 1472, 1473, 1479, 1500,
	1478, 1474, 0, 1471, 1469, 1470, 1462, 1463, 1464, 1465,
	1467, 1468, 0, 0, 0, 0, 3408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 0, 1491, 1492, 1493,
	1501, 1502, 1503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 1489, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 1507, 0, 0, 0,
	1497, 0, 0, 1472, 1473, 1479, 1500, 1478, 1474, 0,
	1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 1460,
	0, 0, 0, 3407, 0, 0, 0, 0, 1480, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 1458, 1459, 0, 1491, 1492, 1493, 1501, 1502, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 1489, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1483, 1484, 1485, 1486, 1460, 0, 0, 0,
	0, 0, 1466, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 1508,
	0, 0, 0, 1488, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 1505, 0, 0, 0, 0,
	0, 0, 1475, 1476, 0, 0, 0, 0, 0, 1483,
	1484, 1485, 1486, 0, 0, 0, 0, 0, 1496, 1466,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1498, 0, 1506, 1508, 0, 0, 0,
	1488, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 1505, 0, 0, 0, 0, 0, 0, 1475,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 1472, 1473, 1479, 1500,
	1478, 1474, 0, 1471, 1469, 1470, 1462, 1463, 1464, 1465,
	1467, 1468, 0, 0, 0, 0, 3297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 0, 1491, 1492, 1493,
	1501, 1502, 1503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 1489, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 1507, 0, 0, 0,
	1497, 0, 0, 1472, 1473, 1479, 1500, 1478, 1474, 0,
	1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 1460,
	0, 0, 0, 3198, 0, 0, 0, 0, 1480, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 1458, 1459, 0, 1491, 1492, 1493, 1501, 1502, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 1489, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1483, 1484, 1485, 1486, 1460, 0, 0, 0,
	0, 0, 1466, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 1508,
	0, 0, 0, 1488, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 1505, 0, 0, 0, 0,
	0, 0, 1475, 1476, 0, 0, 0, 0, 0, 1483,
	1484, 1485, 1486, 0, 0, 0, 0, 0, 1496, 1466,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1498, 0, 1506, 1508, 0, 0, 0,
	1488, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 1505, 0, 0, 0, 0, 0, 0, 1475,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 1472, 1473, 1479, 1500,
	1478, 1474, 0, 1471, 1469, 1470, 1462, 1463, 1464, 1465,
	1467, 1468, 0, 0, 0, 0, 3150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 0, 1491, 1492, 1493,
	1501, 1502, 1503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 1489, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 1507, 0, 0, 0,
	1497, 0, 0, 1472, 1473, 1479, 1500, 1478, 1474, 0,
	1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 1460,
	0, 0, 0, 3149, 0, 0, 0, 0, 1480, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 1458, 1459, 0, 1491, 1492, 1493, 1501, 1502, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 1489, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1483, 1484, 1485, 1486, 1460, 0, 0, 0,
	0, 0, 1466, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 1508,
	0, 0, 0, 1488, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 1505, 0, 0, 0, 0,
	0, 0, 1475, 1476, 0, 0, 0, 0, 0, 1483,
	1484, 1485, 1486, 0, 0, 0, 0, 0, 1496, 1466,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1498, 0, 1506, 1508, 0, 0, 0,
	1488, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 1505, 0, 0, 0, 0, 0, 0, 1475,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 1472, 1473, 1479, 1500,
	1478, 1474, 0, 1471, 1469, 1470, 1462, 1463, 1464, 1465,
	1467, 1468, 0, 0, 0, 0, 3148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 0, 1491, 1492, 1493,
	1501, 1502, 1503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 1489, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 1507, 0, 0, 0,
	1497, 0, 0, 1472, 1473, 1479, 1500, 1478, 1474, 0,
	1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 1460,
	0, 0, 0, 3113, 0, 0, 0, 0, 1480, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 1458, 1459, 0, 1491, 1492, 1493, 1501, 1502, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 1489, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1483, 1484, 1485, 1486, 1460, 0, 0, 0,
	0, 0, 1466, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 1508,
	0, 0, 0, 1488, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 1505, 0, 0, 0, 0,
	0, 0, 1475, 1476, 0, 0, 0, 0, 0, 1483,
	1484, 1485, 1486, 0, 0, 0, 0, 0, 1496, 1466,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1498, 0, 1506, 1508, 0, 0, 0,
	1488, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 1505, 0, 0, 0, 0, 0, 0, 1475,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 1472, 1473, 1479, 1500,
	1478, 1474, 0, 1471, 1469, 1470, 1462, 1463, 1464, 1465,
	1467, 1468, 0, 0, 0, 0, 2910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 0, 1491, 1492, 1493,
	1501, 1502, 1503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 1489, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 1507, 0, 0, 0,
	1497, 0, 0, 1472, 1473, 1479, 1500, 1478, 1474, 0,
	1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 1460,
	0, 2515, 0, 0, 0, 0, 0, 0, 1480, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 1458, 1459, 0, 1491, 1492, 1493, 1501, 1502, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 1489, 0, 0, 0, 0, 2486, 0, 1461, 0,
	0, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1483, 1484, 1485, 1486, 1460, 0, 0, 0,
	0, 0, 1466, 3581, 0, 1480, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 1508,
	0, 0, 0, 1488, 1490, 0, 0, 0, 0, 0,
	2487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 1505, 0, 0, 0, 0,
	0, 0, 1475, 1476, 0, 0, 0, 0, 0, 1483,
	1484, 1485, 1486, 0, 0, 0, 0, 0, 1496, 1466,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1498, 0, 1506, 1508, 0, 0, 0,
	1488, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 1505, 0, 0, 0, 0, 0, 0, 1475,
	1476, 0, 0, 0, 3580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 1458, 1459, 0, 1491, 1492, 1493, 1501, 1502,
	1503, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 1489, 0, 0, 0, 1499, 0, 0, 1461,
	0, 0, 0, 1497, 1507, 0, 1472, 1473, 1479, 1500,
	1478, 1474, 0, 1471, 1469, 1470, 1462, 1463, 1464, 1465,
	1467, 1468, 0, 0, 0, 0, 0, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 1480, 0, 0, 0,
	0, 0, 2181, 1477, 0, 0, 0, 0, 0, 1458,
	1459, 0, 1491, 1492, 1493, 1501, 1502, 1503, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 1489,
	0, 0, 0, 2180, 0, 0, 1461, 0, 0, 0,
	1497, 1507, 0, 1472, 1473, 1479, 1500, 1478, 1474, 0,
	1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 0,
	1483, 1484, 1485, 1486, 1460, 0, 0, 0, 0, 0,
	1466, 0, 2603, 1480, 0, 2602, 0, 0, 0, 0,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 1508, 0, 0,
	0, 1488, 1490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 1505, 0, 0, 0, 0, 0, 0,
	1475, 1476, 0, 0, 0, 0, 0, 1483, 1484, 1485,
	1486, 0, 0, 0, 0, 0, 1496, 1466, 0, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1498, 0, 1506, 1508, 0, 0, 0, 1488, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	1505, 0, 0, 0, 0, 0, 0, 1475, 1476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 1481, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	1458, 1459, 0, 1491, 1492, 1493, 1501, 1502, 1503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	1489, 0, 0, 0, 1499, 0, 0, 1461, 0, 0,
	0, 1497, 1507, 0, 1472, 1473, 1479, 1500, 1478, 1474,
	0, 1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468,
	0, 0, 0, 0, 0, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 1458, 1459, 0,
	1491, 1492, 1493, 1501, 1502, 1503, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 1489, 0, 0,
	0, 0, 0, 0, 1461, 0, 0, 0, 1497, 1507,
	0, 1472, 1473, 1479, 1500, 1478, 1474, 0, 1471, 1469,
	1470, 1462, 1463, 1464, 1465, 1467, 1468, 0, 1483, 1484,
	1485, 1486, 1460, 0, 0, 0, 0, 0, 1466, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 0, 0, 1508, 0, 0, 0, 1488,
	1490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 1505, 0, 0, 0, 0, 0, 0, 1475, 1476,
	0, 0, 0, 0, 0, 1483, 1484, 1485, 1486, 0,
	0, 0, 0, 0, 1496, 1466, 0, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1498,
	0, 1506, 1508, 0, 0, 0, 1488, 1490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 829,
	0, 0, 0, 0, 0, 0, 1504, 0, 1505, 0,
	0, 0, 0, 0, 0, 1475, 1476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 0, 0, 1458,
	1459, 0, 1491, 1492, 1493, 1501, 1502, 1503, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 1489,
	0, 0, 1499, 0, 0, 0, 1461, 0, 0, 1497,
	0, 1507, 1472, 1473, 1479, 1500, 1478, 1474, 0, 1471,
	1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 0, 0,
	0, 0, 0, 2898, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	1477, 0, 0, 0, 0, 0, 1458, 1459, 0, 1491,
	1492, 1493, 1501, 1502, 1503, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 1489, 0, 0, 0,
	2604, 0, 0, 1461, 0, 0, 1497, 0, 1507, 1472,
	1473, 1479, 1500, 1478, 1474, 0, 1471, 1469, 1470, 1462,
	1463, 1464, 1465, 1467, 1468, 0, 0, 1483, 1484, 1485,
	1486, 1460, 0, 0, 0, 0, 0, 1466, 0, 0,
	1480, 0, 2609, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1498, 0, 0, 1508, 0, 0, 0, 1488, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	1505, 0, 0, 0, 0, 0, 0, 1475, 1476, 0,
	0, 0, 0, 0, 1483, 1484, 1485, 1486, 0, 0,
	0, 0, 0, 1496, 1466, 0, 0, 0, 0, 0,
	0, 0, 1481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	1506, 1508, 0, 0, 0, 1488, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 1505, 0, 0,
	0, 0, 0, 0, 1475, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 1458, 1459, 0,
	1491, 1492, 1493, 1501, 1502, 1503, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 1489, 0, 0,
	0, 1499, 0, 0, 1461, 0, 0, 0, 1497, 1507,
	0, 1472, 1473, 1479, 1500, 1478, 1474, 0, 1471, 1469,
	1470, 1462, 1463, 1464, 1465, 1467, 1468, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 0, 0, 1472, 1473,
	1479, 1500, 1478, 1474, 0, 1471, 1469, 1470, 1462, 1463,
	1464, 1465, 1467, 1468, 0, 1483, 1484, 1485, 1486, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 1459, 0, 1491, 1492, 1493, 1501, 1502, 1503, 1498,
	0, 0, 1508, 0, 0, 0, 1488, 1490, 0, 1494,
	1489, 0, 0, 0, 2557, 0, 0, 1461, 0, 0,
	0, 0, 1507, 0, 0, 0, 1504, 0, 1505, 0,
	0, 0, 0, 0, 0, 1475, 1476, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 0, 0, 0, 0,
	0, 1496, 0, 0, 1480, 0, 0, 0, 0, 0,
	1481, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2571, 0, 0, 0, 0, 1483, 1484,
	1485, 1486, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 0, 0, 1508, 1482, 0, 0, 1488,
	1490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 1505, 1499, 0, 0, 0, 0, 0, 1475, 1476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 1472,
	1473, 1479, 1500, 1478, 1474, 0, 1471, 1469, 1470, 1462,
	1463, 1464, 1465, 1467, 1468, 0, 0, 0, 0, 0,
	0, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1482,
	1458, 1459, 0, 1491, 1492, 1493, 1501, 1502, 1503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	1489, 0, 0, 0, 0, 1499, 0, 1461, 0, 0,
	0, 0, 1507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 1472, 1473, 1479, 1500, 1478, 1474, 0, 1471,
	1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 1483, 1484,
	1485, 1486, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 1459,
	0, 1491, 1492, 1493, 1501, 1502, 1503, 0, 0, 0,
	0, 0, 1498, 0, 0, 1508, 0, 1494, 1489, 1488,
	1490, 0, 0, 0, 0, 1461, 0, 0, 0, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 1505, 0, 0, 0, 0, 0, 0, 1475, 1476,
	0, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 1480, 0, 1496, 0, 0, 0, 0, 1477,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 1484, 1485, 1486,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 0, 0, 1508, 0, 0, 0, 1488, 1490, 1482,
	0, 0, 1458, 1459, 0, 1491, 1492, 1493, 1501, 1502,
	1503, 0, 0, 0, 0, 0, 0, 1504, 0, 1505,
	0, 0, 1489, 0, 0, 1499, 1475, 1476, 0, 1461,
	0, 0, 0, 0, 1507, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 1480, 0, 0, 1506,
	0, 0, 0, 1477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 1472, 1473, 1479, 1500, 1478, 1474, 0, 1471,
	1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468, 0, 1487,
	1483, 1484, 1485, 1486, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 1508, 0, 0,
	0, 1488, 1490, 1499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1475, 1476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 0,
	1472, 1473, 1479, 1500, 1478, 1474, 0, 1471, 1469, 1470,
	1462, 1463, 1464, 1465, 1467, 1468, 0, 0, 0, 0,
	0, 0, 1674, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1482, 1691, 1668, 1675, 1658, 1701, 1700, 0, 0,
	1660, 1659, 0, 0, 0, 0, 0, 0, 1711, 1712,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1702,
	0, 1698, 1697, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1696, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1695, 1693, 1694, 0, 0, 0,
	0, 1497, 0, 0, 1472, 1473, 1479, 1500, 1478, 1474,
	0, 1471, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 1468,
	0, 0, 0, 0, 0, 0, 0, 1670, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1684, 1673, 1686,
	1688, 1689, 1690, 1685, 0, 1678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1707, 1708, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1662, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1699, 0, 0, 0, 1671,
	0, 1672, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1692, 0, 0, 0, 1681, 1679, 1680, 1683, 1682,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1663, 1664, 1666, 1667, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1687, 1665, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1710, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1661, 0, 0, 1703, 1704, 1705,
	1706, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1669, 0, 0,
	0, 0, 1676, 1709,
}
var sqlPact = [...]int{

	5819, -1000, -1000, -1000, -1000, -1000, -1000, 183, 182, 176,
	166, 165, 164, 163, 162, -1000, -1000, -1000, 161, -1000,
	-1000, 158, -1000, 157, 155, 153, 149, -1000, 148, 147,
	146, -1000, -1000, -1000, -1000, 143, 141, 130, 53640, 1813,
	65138, 56606, 1771, 48094, 64710, 47666, 64282, 63854, 129, -1000,
	63426, 127, 126, 125, -1000, -1000, 111, 1721, 39066, 110,
	108, 106, 2072, 105, 104, -1000, 103, -1000, 9080, 1275,
	-1000, 102, 101, -1000, 7902, 493, 55756, 2214, 98, 94,
	38637, 2210, 2238, -1000, -1000, 1652, -1000, -1000, 92, 91,
	90, 86, 85, 84, 79, 77, 76, -1000, 75, 74,
	73, 72, 71, 70, 68, -1000, 67, 66, 63, 62,
	61, 58, 54, 53, 52, 49, 48, -1000, 9958, 1527,
	1415, 1406, 1403, 1401, 1387, 880, 47, 44, 43, 42,
	41, 40, 39, -1000, -1000, 38, 36, 35, 34, -1000,
	29, 27, 137, 26, 25, 24, 17, 16, 1855, 2292,
	1284, 945, 19484, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 69358, 65560, 10, -24,
	9, -1000, 2589, 805, 32631, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 420, -1000, -1000, -1000, 208,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1601, 655, -1000, -1000, -1000, 62998,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1809, -81,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 654, -1000, 1807,
	136, 1746, -1000, -1000, -1000, -1000, -1000, 65560, -1000, -1000,
	2877, 2875, 1660, 652, 62576, -1000, 1324, -1000, 813, 22202,
	-1000, 1000, -1000, 22202, 206, -1000, -1000, -1000, -1000, -1000,
	47238, 15868, 46810, 46382, 42972, 62148, 15430, 53218, 1098, -1000,
	-1000, -1000, -1000, -1000, -13, 40344, 65560, -1000, 205, -1000,
	-1000, -1000, -1000, -1000, -1000, 28648, 541, 28185, 821, 27722,
	314, -1000, -1000, -1000, -1000, 2874, 2873, 975, 2872, 2519,
	68936, 1479, 2871, 1407, 1039, 906, 2870, 2869, 2867, 2866,
	2865, 2864, 2863, 1312, 61720, 2325, 42534, 42096, 53640, 53640,
	2046, 61292, -1000, -1000, 1166, 1126, -1000, -1000, -1000, -1000,
	2402, 2236, 2233, 52790, -1000, -1000, 2862, 2861, 2859, 2858,
	2856, 68514, 1442, 2854, 1965, 2850, 2849, 2848, 2846, 2842,
	2840, 2835, 2833, 2832, -1000, 52362, 51934, 51506, 51078, 60864,
	41658, 41220, -1000, -1000, -1000, 33911, 6404, 4986, 60436, 35225,
	53640, 53640, -1000, -1000, 29099, 131, -1000, -1000, -1000, 2278,
	-1000, 29099, 131, -1000, 65560, -1000, 2322, 1562, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2373, 1369, 2724,
	40782, 1657, 1137, 2399, 2398, 1227, 2028, 2392, 2388, 2384,
	2351, 2345, 1432, 2001, 513, 19021, 1269, 1316, 2333, 2332,
	2742, 1701, 45954, 2831, 2829, 2553, 2305, 2304, 2276, -1000,
	-1000, -1000, -1000, 1188, -1000, -1000, 48516, -1000, -1000, 985,
	-1000, -1000, 985, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1092, 67670, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1336, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1909, -1000, 1600,
	-1000, -1000, 1839, 1140, 2292, 1944, 2497, 2497, 2497, 2597,
	406, 399, -1000, 137, -1000, -1000, 76299, -1000, -1000, 29099,
	29099, 29099, 29099, 29099, 1603, -1000, 651, -1000, -1000, 689,
	-1000, 649, 578, -1000, -1000, -1000, -1000, -1000, -1000, 647,
	2746, -1000, 859, -1000, -1000, -1000, -1000, 2704, -1000, 18107,
	-1000, -1000, -1000, 380, 642, 29099, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 203, 824, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 554, 1522,
	553, 553, 553, -1000, -1000, 897, -1000, -1000, -1000, 274,
	549, 223, 548, -1000, -1000, -1000, -1000, 2320, 638, 635,
	-1000, 631, 626, 624, -1000, -1000, -1000, 623, 620, 618,
	616, 615, 613, 611, 610, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 894, -1000, 606, 602, 594, 593, 592, 589,
	587, 586, 583, -1000, -1000, -15, 65560, -1000, 420, -15,
	-1000, -1000, 580, -1000, 22653, 22653, 22653, -1000, -1000, 1805,
	29099, -1000, 2005, -1000, 222, -10, 729, 33483, -1000, 31775,
	729, 682, 36505, -1000, 2273, -1000, -1000, 579, 202, -1000,
	-1000, 2269, 65560, 16304, 65560, 53640, 53640, 53640, 2475, 29099,
	-1000, -1000, 39918, 65560, 54062, 2668, 76908, 39918, 65560, 2310,
	-1000, -1000, -1000, 65560, -1000, 29099, -1000, 2661, 1248, 43834,
	2615, -29, -1000, -1000, -1000, -1000, -1000, -1000, 1949, 1952,
	1001, 1837, 1256, -1000, 22202, 2506, -1000, -1000, -1000, 197,
	16304, -1000, 2030, 2452, 1093, -1000, 1836, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1455, 2449, -1000, 1778, 2446,
	1448, -1000, -1000, 852, 2444, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1658, -1000, -1000, 2544, -1000, -1000,
	1757, 2442, -2, -1000, -1000, 34353, 40344, -18, -1000, -1000,
	-96, -1000, 14992, 76299, -1000, -1000, -1000, 76299, 742, -1000,
	-1000, 2440, -1000, 76299, 719, -1000, -1000, 2439, -1000, -1000,
	-1000, 2826, -1000, 2822, 1900, 2811, 2810, 2807, -1000, 1264,
	1505, 2806, -1000, 2804, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 50650, 50222, 902, -1000, 1801, -1000, -1000, 49794, 841,
	1899, -1000, -1000, 1897, -1000, 828, -1000, 2803, 60008, 2080,
	841, 1895, -1000, -1000, -1000, -1000, -1000, 53640, -1000, 53640,
	-1000, 53640, -1000, 1291, -1000, 68092, -10, -1000, -1000, -1000,
	-1000, -1000, 2435, 2801, 2800, 2799, -1000, 65560, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 177, 2433, -1000,
	-1000, 177, 2426, -1000, 177, 2410, -1000, 169, 2407, -1000,
	-1000, 1704, 2406, -1000, -144, 2405, -1000, -1000, -144, 2404,
	-1000, -27, -1000, -1000, -1000, 805, -1000, 10435, -1000, 10435,
	59580, 43408, 823, 617, 38209, 76299, -1000, 34353, 76299, -1000,
	43408, 49794, -1000, 59152, 49372, -1000, -1000, 1173, 1977, -1000,
	-1000, -1000, -1000, 43408, 43408, 43408, -1000, 58724, -1000, 1641,
	1357, 2547, 53640, -1000, 1572, -1000, -1000, -1000, 2562, 2309,
	-1000, 39492, 55328, -1000, 54906, -1000, 54484, -1000, 53640, -1000,
	53640, -1000, 2797, 2796, 2795, -1000, 2794, 2557, 76299, 2552,
	-1000, 2436, 1429, 1420, 65560, -1000, -1000, 65560, -1000, 65560,
	-1000, -1000, -1000, 1947, -1000, -1000, -1000, -1000, 53640, -1000,
	-1000, -1000, -1000, -1000, -1000, 2306, -1000, 1379, -1000, 1552,
	-1000, 1165, -1000, -1000, 179, -1000, -1000, -29, -1000, 67670,
	-1000, -1000, 2292, 1944, -1000, 65560, -1000, 1322, 53640, -1000,
	1985, -1000, 1211, -1000, 2292, 1827, 2034, 27259, 2006, 29099,
	137, -1000, -1000, 137, 137, 21751, -1000, -1000, 76908, 76908,
	16304, 1109, 29099, 29099, 29099, 29099, 29099, 29099, 29099, 29099,
	29099, 29099, 29099, 29099, 29099, 29099, 29099, 29099, 29099, 29099,
	29099, 29099, 29099, 29099, 29099, 29099, 29099, 29099, 29099, 29099,
	29099, 29099, 29099, 29099, 29099, 29099, 29099, 1910, 29099, 1090,
	29099, 29099, 29099, 29099, 1532, -1000, -1000, 1597, 465, 1586,
	-1000, 2705, 2705, 2705, 9076, 9076, 537, 2793, 689, -1000,
	29099, -1000, 131, 29099, 16742, -1000, 2735, 1184, -1000, -1000,
	399, 9772, 1890, -1000, 397, 17205, -1000, -1000, -1000, 18107,
	578, 26796, 29099, 887, 76299, 14556, 2312, 2133, -1000, 2734,
	-1000, -1000, 2717, -1000, -1000, -1000, -1000, 2717, 1106, 1097,
	2733, -1000, 2717, 2717, 570, 757, 750, 711, 710, 704,
	29099, 29099, 29099, 29099, 29099, 29099, 29099, 29099, -1000, 26345,
	25882, 25419, 30452, 24956, 29099, 18558, 24493, 24030, 65560, -15,
	2657, 29099, 113, -1000, 74708, -1000, 113, 113, 569, -28,
	76299, 2000, 2000, 33057, 1911, 1626, 1626, 1626, -1000, 560,
	677, 8, 7, 6, -1000, -1000, 4, 3, 729, 11052,
	57028, 1694, 729, 729, 196, 285, 396, 31349, 2005, 57028,
	-1000, -1000, 53640, 559, 16742, 16304, 1191, -33, 195, 2024,
	2021, 2017, -1000, 2013, 1337, -34, 1088, -55, -1000, 3680,
	-35, -1000, 1033, -1000, -1000, -1000, 312, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 891, 557, 555, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 554, 1522, 553, 553, 553,
	-1000, -1000, -1000, 274, 549, 223, 548, -1000, -1000, -1000,
	-1000, -1000, -1000, 2255, -96, 54062, 790, -36, 993, -29,
	-1000, -1000, -1000, 43834, 985, -1000, 1717, -1000, -1000, -1000,
	-1000, -1000, -1000, 1181, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2745, -1000, 2711, -1000, -1000, 2732, -16, -1000, -1000,
	16304, -1000, -30, 1477, -1000, 45526, 2545, 2539, 2525, 1281,
	-1000, 1194, 2596, 48516, 2637, 2648, 519, -1000, 2252, -1000,
	-1000, 808, 1346, 1082, 48516, 1778, -1000, 76908, -1000, 2066,
	2595, 1145, 1155, 1145, 1145, 1157, -1000, 48516, 1081, 1544,
	43408, -1000, 1079, -1000, -45, 2627, 2626, 491, -1000, 2249,
	1078, -1000, -1000, 53640, 16304, 713, -1000, 43408, -18, 40344,
	65560, 193, -1000, 29099, 131, 29099, 131, -1000, -1000, 2403,
	-1000, -1000, -1000, 2792, 1489, 1961, -1000, -1000, -1000, 547,
	1889, 1778, 1886, -1000, -1000, 48944, 2248, 65560, 2035, -23,
	53640, -1000, -1000, 1535, -1000, 2397, 2395, 545, 2791, -1000,
	1791, 1882, -1000, -1000, -1000, 67248, 1143, 2386, 931, 500,
	2653, 500, 37357, -1000, 65560, -1000, 65560, -1000, -1000, -1000,
	2790, -1000, 53640, -1000, -1000, 53640, -1000, 53640, -1000, 53640,
	-1000, 53640, 53640, -1000, 65560, 43408, 43408, 43408, 4321, 44682,
	-42, -43, 388, -1000, 58302, 65560, 928, 45104, 65560, 2503,
	-205, -1000, 823, 823, 713, -1000, 713, -1000, 53640, 2297,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2789, 2785, -1000,
	840, 53640, 65560, 53640, -1000, -1000, 65560, -1000, 65560, -1000,
	840, 65560, 840, 65560, 840, 65560, -1000, -1000, -1000, -1000,
	-1000, -1000, 131, 29099, 1305, -1000, 2296, -1000, 2293, -1000,
	33, -1000, -1000, -1000, -1000, 1551, 53640, 53640, 53640, 53640,
	65560, 53640, -1000, 48516, -1000, -1000, 2292, -1000, -1000, 1936,
	-1000, -19, 947, -1000, -1000, -1000, -1000, -1000, 76299, 459,
	-1000, -1000, 76299, 1348, 2053, -1000, 2053, -21, -1000, 74310,
	1984, 53640, -1000, -1000, -1000, -1000, -1000, 807, 605, 605,
	1167, 1167, 1167, 1167, 2624, 1058, 1114, 676, 7800, 7800,
	3873, 3873, 3873, 3873, 3873, 7800, 344, 1046, 1046, 344,
	344, 344, 344, 344, 1046, 1046, 1046, 7800, 7800, 7800,
	9076, 76447, 6910, 29099, 29099, 1075, 1570, 465, 6091, 29099,
	856, 856, 856, 856, -1000, 2358, -1000, -1000, -1000, -1000,
	2241, 546, 30452, 30452, -1000, -1000, -1000, -1000, 17656, 29099,
	-1000, -1000, -1000, -1000, 23567, -1000, -1000, 73840, -247, 387,
	-180, -12, -1000, 29099, 29099, 29099, 386, -1000, 384, -1000,
	-1000, 1073, -1000, 1066, 1059, 1056, -1000, 539, 192, 29099,
	65560, -1000, 71147, 675, -128, -1000, -52, 1198, -1000, 29099,
	187, -1000, 1619, 538, 531, 378, -58, -1000, 373, 798,
	770, 368, 366, 365, 29099, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 75979, 70886, 70804, 70543, 9619,
	70255, 70209, -59, 361, -1000, 2239, -180, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 359, -1000, 358, -1000, 75826,
	-180, 356, 6378, -1000, 30452, 30452, 30452, -1000, 355, -1000,
	74631, -1000, 75505, 23116, 23116, 23116, 354, 75428, 29099, -180,
	-60, -1000, -61, -1000, -1000, 529, -66, 862, 22653, 32203,
	16304, -1000, 862, 862, 29099, -1000, 29099, 2004, -1000, -1000,
	-1000, 1996, 1644, 2000, 33057, -1000, -1000, -1000, -1000, 57028,
	644, 729, -1000, -1000, -1000, -1000, -1000, 57028, -1000, 2704,
	2089, -1000, -1000, -1000, 65560, 420, -1000, 57028, 57028, 16304,
	729, -1000, 353, 35651, -12, 185, -1000, -1000, 16304, 2097,
	2097, 2097, 2097, -1000, -1000, 65560, 2684, -1000, 1530, -1000,
	76908, -1000, 688, 986, -1000, 2731, 527, -1000, 2717, 2717,
	65560, 95, 22202, -1000, 985, -1000, -1000, 1290, -1000, 1492,
	-1000, 1043, -1000, -1000, -1000, 22202, -1000, 1943, 65560, 65560,
	53640, -1000, -1000, 1880, 66826, 1879, 76908, 65560, -1000, -1000,
	526, 524, 1983, 1979, 65560, 65560, 66404, 65982, 65560, 1558,
	29099, 1816, 1723, 131, 131, -1000, -1000, 131, 523, 1061,
	53640, 53640, 53640, 1440, -1000, -1000, -1000, -1000, -1000, 53640,
	-1000, -1000, 2729, -1000, 1145, -1000, -1000, -1000, 1145, 1778,
	1405, 53640, 43408, 849, 65560, 1547, 131, 131, -1000, -1000,
	131, 522, 16304, 1524, -1000, 2086, -1000, -67, -1000, -1000,
	14120, 76299, -1000, 76299, -1000, 65560, -1000, 900, 65560, 45104,
	822, 2385, -1000, 1778, 2380, 420, -1000, -1000, 36931, -96,
	823, 43408, 53640, -23, 43408, 43408, 43408, 2783, 521, 2782,
	-1000, 53640, 2379, 1788, 1874, 2465, 716, 65560, 862, 33057,
	1471, -1000, 36079, 914, 65560, 1394, 80, -1000, -1000, -1000,
	20, 65560, -1000, 2781, -1000, -1000, 177, 177, 177, -1000,
	169, 1704, -1000, -144, -144, -1000, -1000, 4321, 4321, 823,
	-25, 518, -1000, 739, 731, 34789, 43408, -68, -1000, -1000,
	-1000, -1000, -1000, 53640, 65560, 632, 2076, 65560, -69, -1000,
	170, 514, -1000, 823, 34353, 2237, -1000, -1000, 848, -1000,
	1152, -1000, -1000, -1000, -1000, -1000, -1000, -3, -96, -96,
	-1000, 840, -1000, 840, -1000, 840, -1000, 76299, -1000, 1301,
	1298, 65560, -1000, 16304, 65560, 53640, 16304, 53640, 2291, 2290,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1348, -1000,
	29099, -1000, -1000, -1000, 21751, 1845, -1000, -1000, 53640, -4,
	29099, 29099, 6048, 5356, 29099, 30452, 30452, -1000, 29099, 4925,
	-1000, -1000, -1000, -1000, -1000, 2234, 511, 29099, 76908, 7042,
	6947, -1000, 349, 8341, 344, -1000, 29099, -1000, 346, 21300,
	-1000, 75029, -44, -75, -1000, 2744, 1920, 1770, 1458, 1318,
	2728, 13684, -180, -76, -1000, -1000, 687, -1000, 2463, -1000,
	29099, 75106, 13248, -1000, 37783, 874, 1707, -1000, -1000, 2717,
	795, -1000, -1000, -1000, 795, -1000, 73763, 76908, 76908, 29099,
	29099, -1000, 29099, 29099, 29099, -1000, -1000, 29099, -1000, -1000,
	2219, 29099, -1000, 76908, 76908, 30452, 30452, 30452, 30452, 30452,
	30452, 30452, 30452, 30452, 30452, 30452, 30452, 30452, 30452, 30452,
	30452, 30452, 30452, 30452, 1972, 30452, 2703, 2703, 2703, -1000,
	2217, 2219, 29099, 29099, 76908, 345, 343, 340, -1000, 29099,
	-180, -1000, -1000, 4321, -1000, 2132, -1000, 29099, -1000, -185,
	-1000, 2005, -1000, -1000, 2132, 2132, -78, 76299, 33057, 33057,
	-1000, 509, 29099, 1991, -1000, 674, -1000, -83, -1000, 57028,
	-1000, 662, -245, -1000, 730, -1000, -1000, -1000, -1000, 420,
	-1000, -1000, -1000, 138, 57028, -1000, -84, -1000, 2652, 325,
	16304, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -96, 1734,
	2743, -1000, 2720, 683, 660, 322, 2717, 320, 318, -96,
	65560, -1000, -29, -1000, -1000, -1000, 29099, -1000, -1000, 2538,
	1044, 1040, -1000, 2378, -1000, 1871, -1000, 919, -1000, 1320,
	-1000, 29099, 29099, 508, 505, 1567, 2778, 2377, 1704, 2369,
	1704, -1000, -1000, 816, -1000, 76299, 504, 503, -1000, -30,
	1462, 845, -1000, -1000, 29099, 29099, 57876, -1000, 367, 2544,
	-7, -1000, 1025, -1000, -1000, -1000, 1778, 1023, -1000, -1000,
	1531, -1000, -1000, 842, -1000, -1000, 29099, -1000, -45, 1011,
	823, 2200, -1000, -1000, 2777, 2776, 2775, 317, -86, -54,
	76908, 2650, 1817, 65560, 53640, 53640, 2649, 792, -1000, 2704,
	-1000, -1000, -1000, -1000, 841, -1000, -1000, 2774, -1000, 925,
	16304, 53640, 2366, 1950, 716, 44260, -1000, 841, 1707, -135,
	-1000, 1394, 20837, 2532, -91, -1000, -1000, -1000, 862, 37357,
	33057, 29099, 2772, -93, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 57454, 57454, 43408, 43408, 43408, 823, 65560,
	65560, 45104, 2771, 499, 65560, 65560, 497, -1000, 65560, 65560,
	2770, 43408, -1000, -1000, 131, -1000, 1732, 53640, 12812, -1000,
	-1000, -1000, -1000, -1000, 840, -1000, -1000, 1560, 1835, 1560,
	1385, 1373, 1753, 73370, -1000, -1000, 2031, 2558, 16304, 2633,
	856, 29099, 29099, 3776, 6867, 4141, 856, 29099, 29099, 76908,
	76621, -94, 29099, 29099, -1000, 29099, 659, 76299, 2741, 29099,
	310, 309, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 307, -1000, -1000, -1000, -1000, -1000, 76299, 29099, 81,
	-1000, -1000, -1000, 69780, -1000, 29099, 306, 304, -1000, -1000,
	-1000, 303, 302, 4835, 277, 73293, 72900, 72823, 76299, 2217,
	76299, -1000, -1000, 843, 843, 1146, 1146, 1146, 1146, 2703,
	1285, 1390, 1130, 244, 244, 244, 449, 957, 957, 244,
	244, 244, 2186, 1973, 495, 7339, -1000, -1000, 76299, 76299,
	299, -1000, -1000, -1000, -180, 298, 2115, 2592, 76299, -1000,
	33057, 2115, 2115, -1000, -1000, 1644, 65560, 76299, 33057, -10,
	-1000, 2704, -1000, -1000, 2089, -1000, 11500, -1000, 16304, -1000,
	-1000, 35651, -1000, 489, -1000, 21, -1000, -1000, 658, 2765,
	680, -1000, 293, -1000, -1000, -96, 76299, 65560, 65560, 65560,
	2364, -1000, 3787, -1000, 72430, -99, -1000, 74310, 29099, 65560,
	-1000, 1574, 2059, 962, -1000, 65560, -1000, 65560, -1000, -1000,
	65560, 65560, 53640, 2354, -100, 76299, -105, -1000, 721, -1000,
	1148, -1000, 12376, 53640, 53640, 43408, 2353, -102, 16304, -1000,
	43408, -1000, -1000, -1000, 2070, -1000, 56178, 1693, 131, -1000,
	2761, 488, 1778, 131, -1000, 1706, -1000, 657, -1000, -1000,
	486, 65560, 1777, 483, 16304, 1957, 716, 44260, -1000, 1143,
	2034, -1000, -118, -1000, 496, 131, 1707, -1000, -135, 76299,
	-1000, 717, -1000, -109, -1000, -1000, 290, -1000, 2501, 2500,
	-1000, -1000, 29099, 482, 478, 65560, 2499, -1000, -1000, -116,
	-1000, 1825, -1000, -1000, -1000, -1000, -1000, 16304, 1326, -1000,
	475, 468, -1000, -1000, -1000, -1000, -1000, 2558, 856, 856,
	29099, 29099, 29099, 856, 76621, -117, -1000, 856, 856, -180,
	-1000, -1000, 75029, -1000, -1000, -1000, 76299, 11940, 1580, -1000,
	72353, -1000, -1000, -1000, -1000, 29099, 29099, -1000, -1000, -1000,
	-1000, -1000, 30452, 2185, 467, 76908, -1000, -1000, 857, 29099,
	29099, 2005, 857, 857, -1000, -119, -1000, 729, -1000, -1000,
	-1000, 2704, 21, -1000, 2759, 16304, 679, -1000, 2756, -1000,
	-1000, -1000, -1000, 65560, -1000, 65560, -1000, 16304, 65560, 2162,
	1859, -1000, -1000, 1976, 466, 30452, 53640, 762, 2135, 1488,
	29099, 1845, -122, -125, 1856, -1000, -1000, 1852, 29099, -1000,
	76908, 1704, 1704, -132, -133, -1000, 29099, 1003, 65560, 20386,
	-1000, 2753, 2544, -1000, -1000, -1000, 29099, 999, -1000, -144,
	1547, 2092, -1000, -1000, -1000, -1000, 1975, -1000, -1000, 65560,
	1969, 838, -1000, 45104, 822, -1000, -1000, 799, -1000, 29099,
	-1000, 53640, 29099, 1768, -1000, 716, 44260, -1000, 2465, 1394,
	-1000, 2472, 65560, 2524, -1000, 2034, 465, -1000, 823, 456,
	455, -139, 29099, 29099, -142, 453, 823, -145, -1000, 732,
	725, -1000, -1000, 53640, 53640, 29099, 29099, -1000, 856, 856,
	856, -1000, 286, -1000, -1000, 1707, 2590, -1000, 71960, 71883,
	5442, 30452, 76908, -149, -1000, 65560, 76299, -180, -1000, -1000,
	-1000, 57028, 450, -1000, 2752, -1000, -1000, 1413, -1000, -1000,
	-1000, 65560, 1865, -1000, -1000, 29099, 7339, 447, 29099, -1000,
	-1000, 2068, 2182, 2070, 435, -1000, -1000, -1000, -1000, -1000,
	1464, -1000, -1000, 76299, 2571, -1000, -1000, 434, 431, 76299,
	429, 714, 2176, -1000, -1000, -1000, 76299, 428, 822, -1000,
	1594, 1693, 426, -1000, -1000, -1000, 2064, 256, 2647, 799,
	-1000, 2712, -1000, -150, 925, -157, 53640, 44260, -1000, 1950,
	-1000, 1108, -158, 65560, 1394, -1000, -1000, 43408, 43408, 1488,
	-163, -164, -1000, 43408, -1000, 1825, -1000, 65560, -1000, 65560,
	-1000, -1000, -165, -166, -1000, 1639, 29099, -1000, -1000, 5442,
	-183, -1000, -156, -1000, 2644, -1000, -1000, -1000, -1000, -1000,
	2361, 71490, 1905, 65560, 71408, 2174, -1000, -1000, 1547, 65560,
	53640, 922, 16304, 1560, 1560, 29099, 19935, 1592, 29099, -1000,
	53640, 65560, -1000, 2498, 2070, 131, -1000, -1000, 1488, 424,
	1488, 423, -1000, 1957, 1278, -1000, 862, -1000, -1000, -184,
	-186, 2070, 1488, -1000, -189, -1000, -191, -194, -1000, -1000,
	253, 30001, 30001, 30001, -180, -1000, 65560, 422, 2340, -1000,
	1762, 1553, 210, 951, -1000, -1000, 2135, -197, 420, -1000,
	29099, -1000, -199, -1000, 913, -204, -1000, 911, -213, -1000,
	2166, -1000, -215, 419, -216, -1000, -1000, -1000, 1547, 838,
	2070, 29099, 2070, 29099, -1000, 37357, -1000, 823, 823, 1547,
	2070, 823, -1000, -1000, -1000, 2393, -1000, 30903, 1699, 1365,
	74233, 2393, 2393, -1000, -1000, 65560, -1000, 1765, 1763, 1241,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1905, 76299,
	-1000, 1560, 2091, -1000, 1560, 2143, -1000, 1591, -1000, 65560,
	-1000, 65560, 822, -1000, 1547, -221, 1547, -222, -202, -1000,
	-1000, -1000, 1547, -1000, -1000, 1452, 2674, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2484, -1000, 940, 1872,
	1872, 1762, -1000, 416, -1000, 412, -1000, -223, -1000, -1000,
	860, 1488, 860, 1488, -1000, -1000, 1345, -1000, -1000, 1691,
	29550, -1000, 2687, -1000, -1000, 1999, -1000, 2135, 29099, 29099,
	1696, -1000, 2750, 2070, -1000, 2070, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -224, -231, -1000, -1000, -1000, -1000, 1547,
	1547, 1547, 989, 860, 860, -1000, 411, -1000, -1000, 29099,
	-236, 1547, -1000,
}
var sqlPgo = [...]int{

	0, 3412, 3409, 3407, 3405, 3404, 3403, 3402, 3401, 3399,
	3397, 3395, 3393, 3392, 3391, 3390, 3387, 3386, 3385, 3383,
	3382, 3381, 3380, 3379, 3375, 3373, 3371, 3370, 3369, 3368,
	3366, 3365, 3364, 3363, 3361, 3360, 3357, 3356, 3354, 3353,
	3352, 3348, 3347, 3346, 3344, 3342, 3339, 3337, 32, 3336,
	3332, 3331, 3329, 3328, 3324, 3318, 3317, 3316, 3308, 3307,
	3304, 3303, 3302, 3298, 3297, 3295, 36, 3291, 217, 3289,
	3288, 3282, 3281, 3279, 3278, 3274, 3273, 3272, 3271, 216,
	3270, 139, 3269, 3268, 3265, 3262, 3261, 214, 3259, 3253,
	3251, 3249, 3247, 3246, 3245, 3242, 127, 3241, 3239, 180,
	3235, 3230, 3228, 3226, 3223, 3221, 3214, 3208, 3207, 3206,
	192, 3205, 213, 3203, 3202, 3200, 3198, 3194, 3193, 3192,
	3191, 3190, 3183, 3181, 3180, 3179, 3171, 3170, 3169, 3167,
	3165, 3164, 3162, 3161, 3159, 3155, 3153, 3152, 3149, 3148,
	211, 149, 3147, 3145, 210, 209, 3144, 3141, 98, 96,
	72, 3140, 88, 134, 186, 7085, 184, 3137, 3135, 3133,
	147, 3131, 3128, 3127, 3126, 67, 62, 140, 136, 128,
	135, 138, 3124, 3123, 76, 52, 34, 26, 103, 3122,
	3113, 3112, 2533, 94, 3111, 3109, 205, 187, 3107, 704,
	3106, 173, 112, 93, 57, 92, 3105, 111, 18, 3103,
	159, 69, 3100, 126, 74, 27, 5665, 7631, 3099, 104,
	221, 84, 198, 194, 179, 188, 172, 142, 181, 3095,
	195, 3093, 87, 155, 3092, 3090, 3088, 50, 151, 82,
	3083, 11, 14, 129, 31, 102, 17, 3081, 9, 3080,
	3078, 3067, 3066, 23, 132, 3064, 110, 66, 3060, 85,
	3059, 64, 161, 3057, 174, 101, 3051, 3049, 202, 158,
	157, 3048, 13, 175, 3046, 3045, 3044, 3042, 3040, 105,
	21, 95, 3038, 3037, 108, 189, 3032, 53, 3030, 133,
	79, 125, 218, 113, 170, 86, 171, 144, 182, 3029,
	3028, 3027, 153, 3026, 3025, 130, 166, 3024, 3020, 220,
	35, 49, 185, 43, 3017, 124, 3014, 152, 3013, 3012,
	3011, 219, 143, 168, 6, 70, 97, 25, 5, 183,
	122, 80, 83, 3009, 3079, 1164, 357, 3008, 120, 99,
	38, 91, 116, 206, 40, 3006, 3005, 1684, 3004, 3003,
	3002, 3001, 145, 2997, 2996, 2994, 114, 55, 63, 2993,
	123, 65, 8, 141, 208, 90, 167, 162, 201, 2992,
	150, 2991, 78, 115, 2990, 164, 196, 75, 2987, 1210,
	121, 2986, 169, 2985, 2984, 2983, 2981, 119, 2980, 2978,
	718, 2976, 109, 2975, 2974, 148, 163, 131, 71, 30,
	2973, 61, 28, 2972, 160, 33, 2970, 340, 56, 0,
	6387, 5385, 6214, 2969, 3777, 2968, 165, 107, 2966, 2965,
	2963, 68, 2962, 54, 2961, 2960, 37, 2957, 16, 4,
	7, 12, 10, 447, 100, 2956, 2955, 89, 106, 117,
	2954, 212, 176, 2932, 2931, 2930, 73, 2929, 24, 2927,
	22, 2926, 2924, 29, 3, 19, 2923, 2921, 190, 2916,
	191, 2915, 2914, 2651, 2913, 203, 60, 2907, 137, 154,
	2906, 2905, 2903, 2900, 197, 2897, 199, 2896, 15, 20,
	2, 2892, 2890, 2886, 156, 1, 2497, 2885, 2883, 58,
	2882, 2881, 146,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 455,
	455, 19, 31, 20, 32, 13, 456, 456, 456, 456,
	24, 21, 33, 22, 22, 22, 22, 22, 151, 151,
	151, 151, 18, 18, 27, 27, 168, 168, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 454,
	454, 170, 170, 169, 164, 164, 457, 457, 171, 171,
	171, 173, 173, 37, 37, 95, 95, 95, 96, 96,
	97, 97, 152, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 83, 83, 397, 397, 398, 398, 147, 147,
	148, 148, 148, 148, 149, 149, 150, 150, 150, 51,
	39, 39, 39, 39, 39, 39, 39, 40, 40, 40,
	40, 41, 41, 41, 41, 41, 41, 42, 42, 42,
	42, 42, 42, 49, 49, 49, 49, 141, 141, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 461, 461,
	461, 461, 461, 461, 461, 461, 461, 461, 461, 461,
	461, 461, 461, 461, 461, 461, 461, 461, 461, 462,
	462, 463, 463, 464, 464, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	63, 63, 245, 245, 221, 221, 64, 64, 64, 65,
	65, 66, 66, 53, 53, 450, 450, 259, 259, 364,
	364, 68, 68, 278, 278, 69, 69, 69, 69, 69,
	69, 70, 70, 70, 70, 70, 70, 70, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 77, 77,
	77, 78, 78, 78, 75, 75, 75, 73, 73, 73,
	72, 72, 72, 76, 76, 76, 74, 74, 74, 260,
	260, 79, 79, 79, 79, 79, 79, 79, 79, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 366, 366, 80, 80, 80, 335,
	335, 84, 84, 84, 293, 293, 85, 85, 85, 85,
	85, 86, 86, 86, 86, 98, 98, 98, 98, 453,
	453, 252, 252, 186, 186, 186, 186, 91, 91, 91,
	91, 92, 92, 92, 93, 93, 146, 146, 104, 104,
	104, 104, 104, 103, 103, 103, 103, 103, 103, 43,
	43, 43, 44, 44, 45, 45, 46, 46, 47, 47,
	48, 48, 48, 48, 48, 106, 106, 458, 458, 108,
	105, 105, 105, 107, 107, 107, 107, 109, 110, 110,
	110, 110, 110, 110, 110, 110, 111, 111, 391, 391,
	268, 268, 389, 389, 405, 405, 390, 390, 225, 225,
	225, 225, 225, 226, 226, 226, 396, 396, 396, 396,
	396, 396, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 131, 131, 131, 140, 140, 140,
	140, 140, 140, 140, 133, 133, 133, 121, 121, 113,
	113, 113, 113, 113, 117, 117, 117, 117, 117, 114,
	114, 123, 123, 123, 123, 123, 118, 118, 120, 120,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 115,
	115, 115, 115, 125, 125, 125, 125, 299, 299, 299,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	136, 136, 136, 136, 136, 136, 349, 349, 132, 132,
	132, 132, 135, 135, 135, 135, 283, 283, 129, 129,
	129, 130, 130, 130, 134, 134, 137, 137, 137, 137,
	116, 116, 116, 467, 467, 467, 138, 138, 128, 128,
	139, 139, 139, 139, 139, 139, 139, 139, 127, 127,
	127, 126, 126, 126, 126, 119, 451, 451, 448, 448,
	448, 448, 448, 448, 448, 449, 449, 452, 452, 89,
	89, 89, 58, 58, 468, 468, 468, 59, 59, 469,
	469, 469, 466, 466, 466, 466, 466, 466, 466, 466,
	227, 227, 228, 228, 316, 316, 316, 316, 316, 231,
	231, 172, 172, 172, 234, 235, 235, 232, 232, 233,
	233, 233, 237, 237, 236, 239, 239, 238, 315, 412,
	412, 414, 414, 414, 414, 414, 414, 414, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 410, 410,
	410, 411, 406, 406, 407, 407, 407, 407, 229, 229,
	230, 230, 230, 230, 408, 409, 250, 250, 352, 413,
	413, 415, 415, 417, 470, 470, 470, 470, 470, 470,
	471, 471, 314, 314, 243, 243, 418, 418, 418, 418,
	419, 419, 419, 419, 419, 422, 421, 420, 420, 420,
	420, 420, 345, 345, 345, 62, 62, 62, 280, 280,
	279, 279, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 143, 143, 60, 60,
	60, 178, 178, 57, 57, 57, 473, 473, 61, 61,
	61, 474, 474, 67, 67, 67, 67, 67, 67, 56,
	56, 56, 56, 56, 475, 475, 300, 300, 298, 298,
	249, 249, 351, 190, 190, 165, 165, 165, 23, 25,
	25, 17, 17, 34, 34, 35, 35, 30, 30, 459,
	459, 460, 460, 90, 90, 94, 94, 94, 102, 102,
	142, 142, 142, 142, 142, 142, 142, 38, 38, 38,
	38, 50, 50, 50, 50, 100, 477, 477, 477, 101,
	101, 476, 476, 185, 185, 185, 185, 187, 187, 311,
	311, 312, 312, 478, 478, 313, 313, 313, 313, 180,
	179, 181, 181, 55, 55, 55, 174, 174, 175, 175,
	176, 176, 177, 177, 479, 479, 87, 87, 87, 145,
	145, 220, 220, 307, 307, 307, 244, 244, 195, 195,
	310, 310, 308, 308, 308, 308, 277, 277, 277, 144,
	144, 257, 257, 270, 270, 271, 271, 361, 361, 272,
	99, 99, 155, 155, 153, 153, 153, 153, 153, 153,
	160, 160, 261, 261, 161, 161, 161, 161, 162, 162,
	162, 154, 154, 154, 156, 156, 156, 156, 156, 156,
	156, 159, 159, 159, 159, 163, 163, 163, 158, 158,
	429, 429, 429, 431, 431, 432, 428, 428, 430, 430,
	472, 472, 282, 282, 282, 241, 242, 240, 240, 247,
	247, 246, 248, 248, 350, 350, 350, 166, 166, 166,
	275, 275, 275, 275, 303, 303, 301, 301, 301, 302,
	302, 304, 304, 304, 305, 305, 306, 306, 274, 274,
	331, 331, 157, 157, 157, 254, 254, 254, 255, 255,
	322, 322, 322, 322, 322, 322, 323, 323, 321, 321,
	321, 321, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 354, 354, 256, 256, 355, 309, 309, 446, 446,
	446, 447, 447, 348, 348, 356, 356, 356, 356, 356,
	356, 346, 346, 347, 347, 362, 363, 363, 286, 286,
	286, 286, 284, 284, 287, 287, 287, 287, 285, 285,
	357, 357, 357, 357, 276, 276, 358, 358, 358, 359,
	317, 318, 318, 367, 367, 367, 367, 382, 253, 253,
	253, 253, 253, 480, 480, 368, 368, 368, 368, 368,
	368, 368, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 372, 372, 372, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 381, 381, 381, 381, 381,
	373, 373, 378, 378, 379, 379, 379, 374, 375, 380,
	380, 380, 380, 481, 481, 384, 384, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 370, 370, 370, 377,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 294, 294, 295, 295, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 326, 326, 326, 326, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 423, 423, 423, 423, 423, 423, 423, 423, 426,
	426, 427, 427, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 433, 433, 434, 434, 436, 436, 437, 437,
	438, 439, 439, 439, 440, 441, 441, 435, 435, 442,
	442, 442, 442, 443, 443, 444, 444, 444, 444, 444,
	445, 445, 445, 445, 445, 337, 337, 338, 338, 344,
	344, 344, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 188, 188,
	188, 188, 188, 266, 266, 264, 264, 264, 267, 267,
	265, 265, 263, 263, 262, 262, 334, 334, 332, 332,
	336, 336, 288, 288, 383, 383, 383, 383, 383, 383,
	383, 383, 289, 289, 289, 297, 290, 290, 291, 291,
	291, 291, 291, 328, 329, 292, 292, 292, 330, 330,
	339, 343, 343, 342, 341, 341, 340, 340, 319, 319,
	320, 320, 273, 273, 482, 482, 269, 269, 360, 360,
	360, 360, 223, 223, 258, 258, 222, 222, 215, 215,
	216, 216, 216, 216, 251, 251, 385, 385, 385, 386,
	387, 388, 333, 205, 204, 192, 193, 203, 202, 201,
	191, 194, 198, 199, 200, 196, 197, 211, 210, 209,
	207, 208, 365, 217, 217, 218, 218, 218, 219, 219,
	219, 219, 189, 189, 212, 212, 213, 214, 214, 206,
	206, 206, 182, 182, 182, 183, 183, 184, 184, 395,
	395, 393, 393, 393, 394, 394, 394, 394, 392, 392,
	392, 392, 392, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 401, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 404, 404,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 2, 0, 1, 1,
	0, 2, 0, 7, 2, 5, 6, 2, 1, 3,
	1, 3, 1, 6, 4, 9, 7, 12, 12, 12,
	9, 2, 7, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 5,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 6, 6, 6, 6, 1, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 3, 3,
	4, 3, 4, 7, 4, 4, 4, 3, 5, 7,
	4, 3, 3, 4, 3, 3, 3, 3, 3, 2,
	0, 1, 0, 1, 0, 3, 3, 3, 3, 3,
	6, 4, 4, 4, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 1, 1, 2, 1, 2,
	7, 3, 2, 0, 1, 3, 3, 1, 0, 1,
	2, 2, 1, 6, 5, 1, 2, 1, 3, 2,
	0, 9, 3, 2, 0, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 2, 2, 5, 3, 3, 6, 6, 3, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 3, 5, 7, 2, 3,
	0, 3, 5, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 3, 1, 1, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 1, 3,
	2, 3, 3, 1, 3, 1, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 1, 1, 1,
	1, 1, 2, 2, 5, 7, 3, 3, 3, 3,
	4, 4, 4, 3, 4, 4, 3, 4, 4, 5,
	3, 5, 5, 5, 7, 3, 3, 3, 4, 3,
	5, 3, 6, 5, 6, 3, 5, 6, 3, 4,
	3, 4, 3, 3, 4, 4, 5, 0, 1, 1,
	3, 2, 4, 3, 3, 5, 4, 3, 5, 3,
	5, 4, 6, 4, 6, 4, 1, 0, 3, 4,
	4, 5, 7, 5, 3, 3, 2, 0, 4, 2,
	3, 4, 2, 3, 3, 3, 4, 3, 3, 3,
	3, 4, 3, 1, 1, 1, 2, 3, 2, 3,
	6, 6, 7, 9, 7, 9, 3, 4, 10, 10,
	3, 5, 5, 5, 3, 5, 2, 0, 1, 1,
	1, 1, 3, 2, 2, 2, 1, 2, 0, 3,
	3, 2, 10, 13, 0, 2, 3, 9, 12, 0,
	2, 3, 1, 1, 2, 2, 2, 2, 1, 0,
	1, 0, 1, 3, 1, 1, 1, 1, 3, 8,
	0, 1, 1, 0, 2, 1, 0, 1, 0, 9,
	9, 3, 1, 3, 7, 1, 3, 11, 3, 2,
	0, 3, 1, 2, 2, 3, 2, 6, 2, 1,
	1, 2, 4, 2, 5, 5, 5, 2, 8, 9,
	6, 5, 3, 1, 5, 8, 5, 11, 3, 0,
	2, 4, 3, 3, 1, 5, 1, 3, 1, 2,
	0, 1, 2, 2, 0, 1, 3, 3, 2, 2,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 5, 8, 4, 1, 0,
	1, 2, 2, 1, 2, 3, 2, 2, 3, 2,
	2, 2, 2, 2, 3, 1, 4, 2, 4, 7,
	3, 3, 0, 3, 6, 3, 1, 1, 8, 7,
	5, 0, 1, 6, 7, 6, 5, 3, 4, 14,
	17, 14, 17, 4, 0, 2, 2, 0, 1, 0,
	1, 3, 3, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 0, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 0, 1, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 1, 3, 1, 3,
	8, 5, 3, 4, 3, 0, 2, 2, 0, 10,
	3, 2, 0, 1, 3, 1, 1, 3, 3, 5,
	1, 1, 3, 3, 2, 3, 4, 3, 4, 5,
	0, 3, 0, 2, 2, 4, 2, 3, 0, 2,
	1, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 5, 1, 0, 1,
	0, 3, 1, 3, 3, 4, 5, 2, 2, 0,
	2, 2, 1, 1, 1, 0, 2, 2, 5, 2,
	3, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 1, 1, 1, 3, 2, 4,
	4, 0, 8, 4, 3, 4, 1, 5, 3, 4,
	5, 1, 5, 1, 3, 2, 0, 3, 0, 2,
	3, 1, 3, 2, 0, 3, 5, 6, 4, 6,
	4, 3, 2, 1, 0, 5, 1, 0, 2, 2,
	2, 1, 1, 0, 1, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	2, 1, 0, 2, 5, 7, 2, 1, 2, 4,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 5, 4, 1, 2, 1, 4, 1, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 2, 5,
	1, 4, 2, 5, 1, 4, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 1, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 5, 4, 6, 3, 5, 4, 6, 4,
	6, 5, 7, 3, 3, 3, 3, 3, 4, 3,
	2, 4, 2, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	1, 5, 5, 3, 1, 1, 1, 2, 2, 2,
	4, 3, 5, 6, 8, 6, 5, 4, 3, 4,
	1, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 8, 8, 6, 4, 6,
	6, 6, 4, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 3,
	3, 3, 0, 1, 4, 2, 2, 2, 2, 2,
	3, 2, 2, 3, 0, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 1,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 1, 2, 1, 0, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 3, 1, 1, 1,
	1, 5, 3, 1, 1, 3, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 7, 1, 7,
	5, 3, 1, 1, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 465, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -142, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -143, -144, -145, 84, 70,
	125, 106, 111, 158, 293, 322, 332, 316, -107, -108,
	351, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -461, 86, -430,
	-71, -74, -76, -465, 116, 131, 175, 285, -92, -93,
	318, 320, 132, -45, -44, 126, -153, -155, -105, -106,
	-146, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, -139, 355, 402,
	42, 365, 71, 119, 326, 21, -5, -6, -7, -8,
	-9, -11, -12, -25, -53, -55, -56, -58, -59, -67,
	-61, -62, -429, -72, -73, -75, -77, -78, 317, -156,
	-154, 462, 415, -14, -19, -20, -15, -16, -18, -21,
	-17, -26, -31, -32, -28, -29, -27, -30, -33, -34,
	-35, -36, -23, -24, -13, -22, 433, 441, -159, -157,
	-158, -163, 339, 423, 379, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, -207, -212, -213, -214, -206,
	-182, -401, -404, 4, -399, -402, 137, 182, 251, 21,
	22, 23, 24, 25, 27, 38, 40, 39, 41, 42,
	45, 47, 48, 51, 52, 53, 54, 55, 56, 59,
	64, 69, 70, 71, 72, 73, 74, 79, 76, 77,
	78, 81, 83, 84, 85, 88, 89, 97, 98, 99,
	100, 101, 102, 106, 109, 108, 111, 114, 115, 116,
	118, 120, 121, 123, 125, 126, 129, 127, 385, 128,
	130, 131, 132, 133, 143, 144, 145, 147, 148, 150,
	152, 156, 157, 159, 163, 165, 166, 167, 168, 174,
	175, 177, 178, 183, 179, 184, 188, 191, 190, 192,
	193, 194, 185, 199, 203, 204, 205, 207, 208, 211,
	212, 213, 214, 215, 218, 217, 220, 223, 224, 227,
	228, 231, 232, 233, 235, 236, 239, 237, 240, 238,
	241, 244, 242, 243, 246, 247, 249, 248, 253, 256,
	172, 258, 259, 261, 262, 263, 279, 266, 267, 268,
	271, 272, 275, 278, 280, 281, 282, 283, 284, 285,
	286, 288, 289, 291, 293, 295, 297, 298, 299, 300,
	301, 302, 304, 305, 307, 308, 309, 310, 311, 316,
	313, 314, 315, 317, 318, 319, 320, 322, 324, 325,
	326, 327, 329, 331, 352, 353, 367, 332, 333, 334,
	335, 336, 337, 338, 342, 346, 343, 344, 345, 340,
	341, 347, 348, 349, 351, 354, 355, 357, 358, 360,
	361, 363, 364, 365, 366, 368, 371, 372, 373, 369,
	370, 378, 376, 377, 380, 381, 382, 383, 384, 386,
	388, 396, 397, 399, 402, 403, 404, 394, 406, 407,
	410, 411, 412, 413, 414, 419, 415, 417, 420, 421,
	422, 428, 427, 434, 435, 437, 438, 439, 33, 43,
	44, 46, 49, 60, 61, 62, 65, 103, 104, 124,
	134, 135, 146, 160, 162, 169, 170, 171, 189, 195,
	197, 201, 221, 255, 257, 273, 277, 290, 292, 303,
	328, 359, 374, 389, 390, 391, 392, 398, 400, 423,
	424, 425, 429, 436, 264, -200, 2, -182, -182, 293,
	26, 2, 26, 289, 341, 381, 383, 2, -453, -252,
	2, 26, -186, -182, 86, 158, 339, -200, 2, -453,
	-252, 24, 2, -182, 2, -187, 2, 332, -182, 465,
	81, 228, 64, 328, 348, -110, 397, -109, 389, 334,
	-111, -391, 2, 244, -182, 465, 465, 465, 465, 2,
	379, 282, 427, 340, 416, 99, 300, 182, -448, 2,
	4, -402, -399, -216, -215, 379, 99, -214, -206, 455,
	-213, 465, 465, 465, 2, 204, 205, 299, 298, 348,
	349, 465, 465, 465, 2, 25, 58, 80, 83, 105,
	133, 153, 156, 269, -462, 236, 279, 297, 334, 347,
	378, 386, 399, -466, 366, 59, 416, -473, 404, 114,
	-298, 99, 383, 381, 228, 157, 411, 324, 161, 409,
	109, 188, 414, 413, 465, 465, 25, 58, 67, 83,
	114, 133, 153, 156, -464, 279, 297, 331, 334, 347,
	378, 386, 404, 399, 2, 427, 340, 379, 182, 99,
	416, 324, 296, -81, 2, 462, 29, 28, 351, -152,
	379, 198, 2, -182, 204, 205, 2, 465, 465, -448,
	2, 204, 205, 2, 198, 2, 59, 336, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 2, -140, 348, 366, 167,
	41, 64, 26, 69, 283, 100, 159, 182, 183, 212,
	80, 81, -299, 40, 205, 204, -349, 380, 335, 341,
	376, 397, 86, 417, 325, 439, 300, 301, 127, 4,
	99, 244, 350, 389, 228, 73, -472, 2, 379, -476,
	2, 397, 397, 2, -476, 2, -476, 2, -185, 2,
	397, 393, -477, 397, 436, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, -154, -156,
	-155, 465, 465, 465, 465, 465, -140, 348, 2, 64,
	26, -160, -161, 151, -246, -247, 408, 196, 122, 270,
	-153, -155, 2, -429, -389, 2, -324, -405, -326, 453,
	454, 446, 250, 440, -337, 105, 409, 264, -404, -327,
	-339, 124, 328, -267, 8, 9, 5, 6, 7, -189,
	-369, -333, -377, 401, 136, 254, -219, 466, 10, 462,
	-426, -155, -338, 34, 162, 57, -393, -218, -371, -379,
	-375, -376, -480, 47, 53, 52, 386, 243, 342, 343,
	360, 344, 345, 45, 419, 179, 261, 263, 190, 4,
	197, -217, -206, -423, -424, -399, -400, 189, 195, 191,
	359, 192, 193, 194, 44, 303, 147, 148, 146, 115,
	104, 103, 257, 49, 48, 46, 424, -380, 101, 389,
	390, 391, 392, 207, 208, -182, -401, 67, 91, 92,
	90, 95, 94, 96, 93, 350, 416, 58, 33, 169,
	170, 201, 255, 171, 65, -425, 370, 87, 155, 187,
	173, 200, 202, 206, 222, 225, 245, 252, 274, 276,
	323, 356, -481, 425, 134, 135, 277, 290, 374, 398,
	400, 160, 221, 60, 61, -431, 304, -432, -200, -431,
	465, 465, 467, 465, -240, -241, -242, 2, 26, 112,
	462, 2, -353, 2, 460, -357, -155, 216, -356, 462,
	-354, -207, 265, -427, 329, -423, -424, -189, -206, -218,
	4, -243, 462, 464, 99, 379, 68, 182, -293, 462,
	-182, 26, 264, 393, 467, -335, 462, 264, 154, 267,
	-182, 2, 2, 352, 2, 462, -110, 62, 397, 39,
	348, -312, 2, -313, -179, -180, -181, -362, 203, 295,
	302, 442, 439, -389, -458, 154, 445, 393, -389, -268,
	464, 2, -357, 169, -207, 2, -204, -392, 4, -399,
	-402, -400, -403, 67, -401, 26, 28, 29, 30, 32,
	34, 35, 36, 37, 50, 57, 58, 63, 66, 68,
	80, 86, 90, 91, 93, 92, 94, 95, 96, 105,
	107, 110, 112, 113, 117, 119, 122, 136, 138, 151,
	153, 154, 158, 161, 164, 176, 186, 196, 198, 216,
	219, 226, 229, 230, 250, 254, 260, 264, 265, 269,
	270, 287, 294, 306, 321, 339, 350, 362, 375, 379,
	387, 393, 395, 401, 408, 409, 416, 418, 426, 430,
	431, 432, 433, -404, 2, -357, 169, 2, -209, 169,
	-357, -212, 2, -397, 169, -395, 10, -394, 5, 4,
	-399, -402, -400, 2, -191, -182, 2, -203, -392, 2,
	-222, 169, -207, -208, -212, 393, 467, -258, -215, -216,
	-251, -182, 464, -324, 2, -99, 2, -324, 169, 2,
	-99, 169, 2, -324, 169, 2, -99, 169, 2, 2,
	2, 399, 2, 83, 169, -182, 379, 98, 2, 315,
	-463, 331, 403, 427, 2, 2, 2, 2, 2, 2,
	2, 379, 340, -474, 304, -196, 2, -182, 151, -397,
	169, 2, -397, 169, 2, -210, -212, -210, 182, 199,
	-191, 169, 2, 383, 381, 383, 381, 154, 2, 198,
	2, 198, 2, -358, 2, -359, -207, 2, 2, 2,
	2, 2, 169, -182, 379, 98, 2, 214, 2, 2,
	2, 2, 2, 2, 2, 2, 2, -260, 169, 2,
	-207, -260, 169, 2, -260, 169, 2, -223, 169, 2,
	-222, -191, 169, 2, -398, 169, 2, -397, -398, 169,
	2, -366, 2, -365, -394, 423, -81, 462, -81, 462,
	348, 462, -397, -207, -207, -324, -99, 154, -324, -99,
	-152, 151, 2, 99, 379, -140, 2, 151, 418, 2,
	8, 2, -397, 335, 301, 143, 2, 352, 2, 64,
	-299, 439, 154, 2, 154, 2, -283, 2, 433, -451,
	2, 264, 154, 2, 154, 2, 154, 2, 154, 2,
	154, 2, 298, 349, 205, 2, -99, 430, -324, 430,
	2, 396, 213, 128, 154, -283, 2, 154, 2, 154,
	2, 5, 2, 203, 295, 367, 2, -207, -467, 2,
	379, 427, 340, 2, 2, 76, 77, 154, 2, 154,
	2, 154, 439, 2, -276, -357, -311, -312, -311, 393,
	-187, -160, -246, -247, -140, 352, 2, -261, 258, 413,
	247, 354, 211, -160, -275, -301, -302, 226, 138, 260,
	-282, 26, 112, -282, -282, 51, 463, 463, 11, 12,
	66, 38, 453, 454, 455, 456, 149, 457, 458, 451,
	452, 450, 443, 444, 448, 209, 210, 82, 447, 445,
	75, 234, 330, 139, 140, 141, 142, 312, 180, 31,
	181, 14, 15, 16, 30, 269, 225, 440, 173, 356,
	446, 17, 18, 19, 200, 202, 252, 43, 176, -188,
	-224, -324, -324, -324, -324, -324, 276, 462, -273, -319,
	460, -155, 462, 462, 462, 5, 462, 5, -388, 8,
	-155, -324, -337, 463, -265, 462, -155, -337, -332, 462,
	328, 460, 462, -340, -324, 464, -433, 434, -373, 462,
	292, -372, 462, -372, -372, 428, -370, 462, 441, 435,
	462, -370, 462, 462, 151, 462, 462, 462, 462, 462,
	462, 462, 462, 462, 462, 462, 462, 462, 428, 462,
	462, 462, 462, 462, 462, 462, 462, 462, 467, -431,
	-243, 462, -269, -360, -324, 455, -269, -269, 264, -262,
	-324, 87, -286, 206, 245, 155, 222, 323, 187, -388,
	-82, -68, -79, -87, -99, -112, -144, -145, -321, 466,
	-348, 441, -155, -354, -206, -155, -356, 462, -353, -348,
	455, -207, 462, 154, 462, 464, 154, -251, -392, -191,
	-207, -217, -218, -222, 111, -262, -448, -251, -186, 35,
	-334, -367, -368, -369, -378, -374, -377, -381, 47, 53,
	52, 386, 243, 342, 343, 360, 344, 345, 45, 419,
	179, 261, 263, 190, 4, 46, 424, -380, 197, 308,
	309, 307, 311, 310, 189, 195, 191, 359, 192, 193,
	194, 44, 303, 147, 148, 146, 115, 104, 103, 257,
	49, 48, 101, 389, 390, 391, 392, 207, 208, 425,
	370, 60, 61, -448, -251, 151, -391, -262, 35, -312,
	2, 105, -395, 39, -478, 467, 224, -226, 233, 249,
	166, 265, 437, 258, -396, 5, 4, -333, -345, 105,
	228, -377, 9, 454, -385, 8, 453, -390, -389, 89,
	464, -392, -168, 313, -167, 23, 27, 116, 421, 129,
	-233, 184, 282, 124, 363, 412, -455, -456, 333, 384,
	385, 78, 258, 313, 124, -279, -281, 35, 97, 247,
	278, 54, 177, 238, 239, 365, 429, 124, 313, 433,
	124, -456, 313, -456, -170, 363, 412, -455, -456, 333,
	313, -169, -233, 124, 466, -96, -397, 462, -258, 467,
	467, -392, 455, 124, 124, 124, 124, 2, 2, 250,
	2, 2, 2, 156, -466, -464, 2, 2, 2, -207,
	169, -209, 169, 2, -212, 427, -245, 264, -450, -259,
	379, -207, -178, -428, 433, 250, 250, 35, 462, 2,
	-193, 169, 2, -183, -182, 182, -428, 250, -358, -220,
	-207, -220, 351, -200, 35, -321, 124, 2, 2, 2,
	-182, -171, 467, 56, 319, 124, -171, 124, -171, 124,
	-171, 467, 124, -171, 124, 467, 124, 124, 463, 467,
	-366, -366, -397, -150, 433, 154, 86, 462, 462, -152,
	-97, -96, -397, -450, -191, 2, -207, 2, 379, 207,
	-397, -397, -397, -391, 26, 353, 2, 298, 349, 77,
	-207, 379, 99, 182, 70, -452, 151, -449, 324, -448,
	-207, 99, -207, 99, -207, 99, -207, -207, 2, 2,
	2, 2, 74, 74, 151, 2, 396, 2, 396, 2,
	-182, -182, -182, 224, -207, 151, 379, 182, 379, 182,
	99, 379, -171, 467, -187, -160, -275, -391, -162, 358,
	253, -260, 211, 354, -160, -302, -301, 26, -324, -306,
	145, 246, -324, -326, -154, -154, -154, -248, -350, -324,
	294, 182, -382, -367, -367, -205, -392, 389, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, 225, 173, 356, 43, 176, -324, 393,
	-324, -324, -324, -324, 242, 250, 254, 401, 136, 410,
	112, 258, -482, 375, 37, -330, -155, -266, 462, -344,
	32, 362, 26, -337, 462, 2, -319, -324, -320, -263,
	-262, -262, 463, 426, 26, 112, 455, 2, 8, -294,
	-296, 438, 241, 102, 168, 240, -295, 338, 463, 467,
	35, 463, -324, -263, -336, -332, -262, -343, -342, 430,
	-392, 455, -434, 144, 161, 8, -386, 8, -386, 389,
	389, 8, -386, -386, 462, 463, 2, 463, 2, 463,
	2, 463, 2, 463, 2, -324, -324, -324, -324, -324,
	-324, -324, -262, -288, 2, -383, -262, 4, 438, 241,
	102, 168, 240, 338, 5, -288, 2, -289, 2, -324,
	-262, -290, -325, -326, 453, 454, 446, -337, -291, 2,
	-324, -263, -324, 50, 219, 395, -292, -324, 154, -262,
	-262, 2, -262, 2, -432, 35, -262, -254, 467, 154,
	35, 4, -254, -254, 462, 463, 467, -287, 165, 237,
	232, -287, -353, -286, 206, -284, 274, -284, -284, -446,
	462, 461, 465, 465, 465, 465, 465, -348, -192, 460,
	468, -392, -347, -346, 35, -200, 271, -348, -348, 464,
	463, -347, -207, 462, -262, -392, 368, 463, 464, 200,
	200, 200, 200, 329, 463, 393, 433, -81, 266, 463,
	467, -253, 34, 460, -296, 462, -384, 428, 462, 462,
	154, -252, -458, 463, 397, -313, -225, 302, 361, 314,
	346, 377, 9, 8, 8, 467, -392, 467, -459, 80,
	393, 68, -315, 169, 68, -406, -194, 80, -407, -182,
	63, 409, 294, 153, -459, 80, -459, 80, 80, 351,
	366, 51, -357, 38, 38, 26, -99, 220, 154, 439,
	379, 182, 393, -357, -281, -367, 97, 238, 239, 51,
	-387, -385, 454, -387, 51, -387, -387, -387, 433, -209,
	-357, 393, 284, -397, 393, 467, 38, 38, 26, -99,
	220, 154, 393, -222, -192, -363, -362, -398, -215, -182,
	464, -324, -99, -324, -99, 124, 2, -474, 214, 462,
	-229, 250, -280, -279, 250, -211, 2, -207, 154, -251,
	-364, 198, 467, -259, 284, 124, 124, 462, 120, 300,
	2, 264, 250, -193, 169, -174, 382, 124, -278, 418,
	-307, -99, 462, 105, 35, -307, -270, -271, -361, -272,
	-194, 462, -200, -182, 2, -207, -260, -260, -260, -222,
	-223, -191, -397, -398, -398, -81, -365, 463, 463, 463,
	-149, 268, -148, -182, 5, -152, 418, -228, -316, -315,
	-410, -411, -406, 225, 182, 409, 199, 137, -244, -195,
	-194, 98, -150, -362, 467, -150, -150, -363, -363, -207,
	151, 2, 2, -283, -207, -191, -222, -207, -251, -251,
	-283, -191, -283, -191, -283, -191, -99, -324, 348, 151,
	151, 464, -283, 300, 99, 379, 282, 182, -207, -222,
	-207, -222, -191, -207, -357, -160, 231, 413, -304, -385,
	462, -305, 328, 329, 467, -165, 36, 110, 211, -207,
	439, 121, -324, -324, 393, -482, 375, -330, 121, -324,
	242, 254, 401, 136, 410, 112, 258, 154, 462, -325,
	-325, 463, -264, -324, -324, 461, 470, 463, -247, 467,
	-246, -324, -262, -262, 463, 463, 393, 393, 393, 393,
	462, 464, -262, -251, 461, 461, 467, 463, -341, -342,
	117, -324, 464, -439, 275, 462, 462, 463, 463, 467,
	463, 439, 439, 463, 463, 463, -324, 35, 467, 467,
	467, 463, 467, 467, 467, 463, 463, 154, 463, 463,
	-297, 287, 463, 11, 12, 453, 454, 455, 456, 149,
	457, 458, 451, 452, 450, 443, 444, 445, 75, 234,
	330, 14, 15, 16, 200, 176, -325, -325, -325, 463,
	-328, -329, 154, 151, 35, -292, -292, -292, 463, 154,
	-262, 463, 463, 462, 463, -318, -317, 431, -360, -255,
	2, -353, -202, -392, -318, -318, -262, -324, 206, 206,
	-285, 418, 264, -287, -353, -346, 463, -447, -388, -348,
	-347, -388, -323, -322, 152, 36, 110, 248, 172, -200,
	-243, -347, -347, -392, -348, 463, -256, -355, -427, -247,
	464, -392, -141, 5, 254, -141, -141, -141, -251, 24,
	288, -367, 460, 461, 8, 8, 462, -386, -386, -251,
	154, -389, -312, 407, 72, 302, 389, -389, -167, 313,
	-194, -194, -207, 250, -315, 169, -173, 250, -367, -201,
	-182, 462, 462, 211, 211, -194, -201, 169, -194, 169,
	-201, -201, -454, 302, 259, -324, 227, 300, 251, -168,
	313, -99, -99, -99, 462, -458, 418, 111, -207, -222,
	-207, -211, 313, -217, -387, -387, -279, 313, -209, -397,
	433, -191, -169, -99, -99, -99, 462, -192, -170, 313,
	-147, 178, 463, 455, -182, 427, -182, -227, -230, -228,
	-194, -468, 435, 433, 124, 124, -243, -221, -207, 460,
	-150, -397, -207, -397, -397, -397, 2, 462, 2, -207,
	124, 264, 250, -175, 118, -479, 445, -191, -318, -255,
	-277, -310, 321, 264, -244, 423, -200, -277, -257, 467,
	154, 445, 464, -244, 2, -171, -171, -171, -171, -171,
	-81, -81, -150, 467, 462, 445, 445, 462, -397, -397,
	463, 467, -207, -193, 182, 182, -199, -183, 463, 467,
	464, 462, -150, -96, 154, -46, 433, 379, 466, -283,
	-283, -283, 348, 348, -182, -203, -191, -207, -204, -222,
	151, 151, -305, -324, -350, -166, 256, -207, 466, -324,
	-324, 121, 121, -324, -325, -325, -324, 121, 154, 462,
	-324, -334, 30, 30, 463, 467, -320, -324, 463, 426,
	-247, -247, 463, 5, 241, 168, 240, -295, 240, -295,
	-295, 8, 455, -392, 463, -332, 119, -324, 387, -392,
	455, -440, -197, 462, -182, 431, -246, -386, -370, -370,
	463, -382, -367, -324, -324, -324, -324, -324, -324, -328,
	-324, -382, -367, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, 112, 250, 258, -325, -329, -328, -324, -324,
	-367, 463, 463, 463, -262, -81, -274, 161, -324, -363,
	467, -274, -274, 463, -353, -353, 462, -324, 206, 461,
	463, 467, -347, 461, 467, 469, 445, -243, 464, -346,
	463, 467, -309, 35, 463, -392, 267, 5, 8, 460,
	461, 463, -386, 463, 463, -251, -324, 393, 393, 124,
	250, 420, -412, -407, -324, -249, -351, -324, 462, 462,
	-164, 116, 351, -460, 2, 124, -171, 124, -171, 437,
	462, 462, 393, 433, -262, -324, -151, 105, -391, -456,
	466, -456, 466, 393, 393, 284, 433, -262, 393, -150,
	154, 2, 2, 2, 463, 463, 467, -413, 35, 262,
	-182, -207, -209, 35, -64, 433, -362, -388, -178, 2,
	-300, 418, -192, -207, 124, -176, 218, -479, -395, -428,
	-247, -277, -269, 251, 79, 463, -318, -271, -255, -324,
	2, 463, -148, -149, -397, -397, -397, -150, -152, -152,
	-316, 2, 462, -193, -183, 462, -152, -195, 2, -398,
	-99, 268, -207, 455, -283, -235, -234, 282, 258, -235,
	328, 328, 265, 463, 145, 215, -165, -192, -324, -324,
	121, 30, 30, -324, -324, -334, 463, -324, -324, -262,
	461, 5, -324, 463, 463, 463, -324, 464, -441, -182,
	-324, 463, 463, 463, 463, 467, 467, 463, 463, 463,
	463, -329, 154, 112, 258, 462, 463, 463, -331, 164,
	51, -353, -331, -331, -285, -251, -353, -321, -388, -322,
	-192, 460, -392, -355, 462, 464, 461, 2, 460, 463,
	-194, -194, -315, 124, -414, 80, -416, 66, 137, 86,
	250, 254, 409, 294, 63, 105, 306, 35, 463, 463,
	467, -165, -249, -251, 250, 372, 105, 250, 105, 98,
	404, -194, -201, -251, -251, -207, 130, 463, 467, 445,
	2, 455, 455, -211, -209, -397, 130, 463, -192, -398,
	-231, 185, -194, -411, -408, -409, 294, -415, -417, 137,
	294, -99, 2, 462, -229, -280, -99, 268, 461, 462,
	-182, 264, 462, -192, -177, 217, -479, -395, -174, -303,
	-301, -308, 462, 264, -99, -247, 445, 463, 463, 98,
	98, -249, 462, 462, -251, 98, 463, -47, -48, 182,
	80, 286, -204, 379, 182, 462, 462, -165, -324, -324,
	-324, 463, -247, -392, 455, -435, 282, 463, -324, -324,
	-325, 154, 462, -334, -436, 432, -324, -262, -436, -436,
	463, -348, -388, 2, 460, 2, -315, -201, -205, -198,
	-182, 137, 169, 254, 211, 462, -325, -207, 462, 2,
	-470, 107, 186, -314, -471, 85, 373, -351, -166, 463,
	463, 254, 254, -324, -367, -171, -171, 463, 463, -324,
	393, -391, 84, -389, 2, -456, -324, 393, -232, -233,
	176, -413, 211, -198, 211, -469, 433, -227, -468, -65,
	-66, 394, -362, -249, -207, -249, 264, -479, -395, -175,
	-277, 113, -251, 80, -303, -330, -150, 462, 462, 463,
	-249, -249, 463, 462, -150, 467, 26, 462, 26, 462,
	-207, -222, -262, -262, 463, -247, 51, 463, 463, -325,
	-334, 463, -437, -438, -197, -347, 461, 2, -416, -198,
	250, -324, -184, 462, -324, 186, 108, 174, -231, 462,
	306, -190, 66, 462, 462, 462, 445, 154, 462, -468,
	280, 462, 98, 247, 463, 35, -66, 9, 463, -300,
	463, -207, -395, -176, 413, 251, 463, -201, -277, -398,
	-398, -314, 463, 463, -398, -48, -251, -251, 463, 463,
	-442, 300, 329, 163, -262, 463, 467, 35, 124, 463,
	-418, 235, -182, 463, 108, 174, -232, -251, -207, -457,
	418, -205, -237, -236, -234, -239, -238, -234, -262, -389,
	84, 280, -262, -207, -250, -352, -194, 98, -231, -99,
	-314, 462, -314, 462, -177, 351, -317, 463, 463, -231,
	-314, 463, 463, 463, 463, -443, -444, 43, 406, 89,
	-324, -443, -443, -438, -440, 137, -419, -422, -421, 264,
	357, 155, 281, 463, 372, 429, -470, 463, -243, -324,
	463, 467, 423, 463, 467, 423, 463, 154, 463, 462,
	463, 467, -232, -469, -231, -249, -231, -249, -270, -150,
	-150, -232, -231, -150, -445, 123, -444, 291, 150, 328,
	291, 150, -445, -445, -198, -421, 264, -422, 264, 413,
	109, -418, -236, 176, -238, 154, 280, -251, -352, -468,
	-232, 463, -232, 463, -318, -232, 89, 161, 388, 247,
	30, -420, 247, 319, 56, 351, -420, -419, 462, 462,
	463, -475, 431, -314, -475, -314, 328, 272, -444, 22,
	254, 105, -470, -262, -262, -172, 56, 319, 2, -231,
	-231, 463, 463, -232, -232, -232, 393, -475, -475, 462,
	-262, 463, -232,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 369, 370, 372,
	373, 374, 376, 377, 379, 381, 383, 385, 386, 388,
	390, 392, 393, 394, 395, 396, 398, 400, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 458, 460,
	0, 930, 932, 934, 936, 25, 26, 0, 0, 190,
	192, 194, 0, 219, 221, 223, 224, 226, -2, 0,
	321, 322, 324, 326, -2, -2, 0, 0, 447, 449,
	0, 0, 0, 469, 470, 0, 1020, -2, 463, 465,
	467, 532, 534, 536, 538, 540, 542, 544, 545, 547,
	549, 551, 553, 555, 557, 559, 560, 562, 564, 566,
	568, 570, 572, 574, 576, 578, 580, 582, -2, -2,
	-2, 0, -2, -2, -2, 948, 29, 31, 33, 35,
	37, 39, 41, 61, 275, 276, 278, 280, 282, 285,
	286, 288, 1068, 328, 330, 332, 334, 336, 0, -2,
	1080, 0, 0, 43, 44, 45, 46, 47, 48, 49,
	50, 68, 69, 70, 71, 72, 73, 74, 75, 54,
	56, 57, 63, 64, 66, 52, 0, 0, 1044, 1046,
	1048, 1050, -2, 0, 0, 7, 9, 11, 13, 15,
	17, 19, 21, 371, 375, 378, 380, 382, 384, 387,
	389, 391, 397, 399, 401, 825, 1680, 1694, 1695, 1696,
	1699, 1700, 1701, 1702, 1703, 1704, 2045, 2125, 2126, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943,
	1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
	2024, 2025, 2026, 2027, 0, 425, 423, 1674, 426, 1878,
	428, 430, 315, 316, 317, 318, 319, 320, 0, 440,
	434, 439, 441, 443, 444, 445, 446, 420, 418, 0,
	440, 1726, 438, 928, 929, 923, 924, 1911, 958, 459,
	-2, -2, -2, 2014, -2, 491, -2, 498, 2017, 1913,
	503, 0, 505, -2, 508, 931, 933, 935, 27, 28,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	-2, -2, -2, -2, 0, 0, 1763, 1650, 1696, 1653,
	1648, 191, 193, 195, 196, 0, 0, 0, 0, 0,
	0, 220, 222, 225, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 0, 0, 0, 0, 0,
	0, 0, 0, 881, 0, 0, 0, 0, 0, 0,
	0, 0, 732, 733, 0, 0, 738, 876, 877, 898,
	0, 0, 0, 0, 323, 325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 327, 0, 0, 0, 0, 0,
	0, 0, 253, 361, 362, 0, 1069, 1069, 0, 0,
	0, 0, 171, 162, 0, 0, 721, 448, 450, 0,
	157, 0, 0, 927, 0, 173, 0, 0, 464, 466,
	468, 533, 535, 537, 539, 541, 543, 546, 548, 550,
	552, 554, 556, 558, 561, 563, 565, 567, 569, 571,
	573, 575, 577, 579, 581, 583, 584, 0, 0, 0,
	0, -2, -2, 0, 0, -2, -2, 0, 0, 0,
	0, 0, 0, 0, -2, 0, 0, -2, -2, -2,
	0, 0, 0, -2, -2, 0, 0, 0, 0, 587,
	589, 590, 591, 0, 639, 656, 0, 867, 1070, 960,
	938, 951, 960, 940, 941, 942, 943, 944, 949, 950,
	953, 0, 945, 946, 947, 30, 32, 34, 36, 38,
	40, 42, 277, 279, 281, 283, 287, 289, -2, 1042,
	1043, 329, 331, 333, 335, 337, 451, 0, 453, 0,
	588, 1024, 1032, 0, -2, 0, 1074, 1074, 1074, 0,
	0, 1043, 1041, 0, 456, 457, 512, 513, 1307, 0,
	0, 0, 0, 0, 1547, 1391, 0, 514, -2, 1422,
	1424, 1993, 2014, 1546, 1426, 1427, 1428, 1429, 1430, 0,
	0, 1433, 0, 1435, 1436, 1437, 1438, 0, 1440, 0,
	1444, 1445, 1446, 0, 1998, 1627, 1692, -2, 1212, 1213,
	1214, 1215, 1216, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1688, 0, 1513, 1460, -2, 1713, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1772,
	-2, -2, -2, -2, -2, -2, -2, 1268, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 2028, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 0, 1982, 1999,
	2000, 2005, 2007, 2001, 1990, 1483, -2, 2029, 2030, 2031,
	2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
	2042, 2043, 1269, -2, 1994, 1995, 2010, 2011, 2016, 2021,
	2022, 1997, 2006, -2, -2, 1060, 1886, 1063, 825, 1061,
	1045, 1047, 0, 1049, 0, 0, 0, 1054, 1077, 1075,
	0, 1113, 1058, 1059, 1069, 1131, 1154, 0, 1136, 0,
	1154, 1180, 0, 1141, 1906, 1461, 1462, 0, 1696, 1693,
	-2, 0, 0, 0, 0, 0, 0, 0, 421, 0,
	427, 429, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 461, 462, 0, 486, 0, 490, 1989, -2, 1731,
	1926, -2, 494, 961, 965, 966, 967, 968, 0, 0,
	0, 0, 0, 500, 0, 0, 487, 488, 506, 509,
	0, 51, 0, 1999, 1180, 53, 0, 1664, 1718, 1719,
	1720, 1721, 1722, 2028, 2044, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
	2121, 2122, 2123, 2124, 55, 0, 1999, 58, 0, 1999,
	0, -2, 62, 0, 1999, 174, 175, 1709, 1710, 1714,
	1715, 1716, 1717, 65, 0, 1670, 67, 0, 1667, 76,
	0, 1999, 0, 1647, -2, 0, 0, 713, 1644, 1649,
	714, 1654, 0, 197, 198, 199, 200, 201, 1999, 203,
	204, 0, 206, 207, 1999, 209, 210, 0, 212, 228,
	229, 0, 231, 0, 1999, 0, 0, 0, 237, -2,
	254, 0, 251, 0, 241, 242, 244, 245, 246, 247,
	248, 0, 0, 0, 882, 293, 291, 1675, 0, -2,
	1999, 870, 873, 1999, 875, 887, 1678, 0, -2, 0,
	1067, 1999, 975, 734, 735, 736, 737, 0, 312, 0,
	988, 0, 990, 0, 1010, 1186, 1131, 255, 256, 257,
	258, 259, 1999, 0, 0, 0, 264, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 150, 1999, 340,
	359, 150, 1999, 343, 150, 1999, 346, 150, 1999, 349,
	1642, 150, 1999, 352, 353, 1999, 355, 176, 356, 1999,
	358, 0, -2, 414, 1682, -2, 364, 0, 365, 0,
	-2, 0, 188, 0, 0, 719, 720, 0, 925, 926,
	0, 0, 471, 0, 0, 585, 586, 0, 0, 596,
	597, 598, 599, 1914, 1884, 1788, 603, 0, 606, -2,
	0, 0, 0, 610, 0, 615, 616, 617, 0, 718,
	619, 0, 0, 621, 0, 625, 0, 628, 0, 630,
	0, 632, -2, -2, -2, 643, -2, 0, 647, 0,
	649, 0, 0, 0, 0, 664, 665, 0, 670, 0,
	673, 674, 675, 0, 677, 678, 679, 680, 0, 682,
	683, -2, -2, 687, 689, 0, 696, 0, 700, 0,
	704, 0, 592, 593, 150, 1184, 937, -2, 939, 0,
	955, 1027, -2, 0, 452, 0, 455, 1038, 0, 1034,
	0, 1036, 0, 1025, 1030, 1092, 1093, 0, 0, 0,
	0, 1072, 1073, 0, 0, 0, 1022, 1023, 0, 0,
	0, 0, 1552, 1553, 1554, 1555, 1556, 1557, 1560, 1561,
	1558, 1559, 1562, 1563, 0, 0, 0, 0, 0, 1564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1565, 1566, 1567, 0, 0, 1569, 0, 1571, 0,
	0, 0, 0, 0, 0, 1370, 1372, 1635, 0, 0,
	1568, 1312, 1313, 1314, 1349, 1350, 0, 0, 1423, 1632,
	1631, 1425, 0, 1583, 0, 1432, 0, 1304, 1439, 1661,
	-2, 0, 1547, 1578, 0, 0, 1447, 1448, 1449, 0,
	0, 1583, 0, 0, 1626, 0, 1515, 0, 1248, 0,
	1249, 1250, 0, 1251, 1252, 1265, 1278, 0, 0, 0,
	0, 1282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1270, 0,
	0, 0, 1607, -2, 0, 0, 0, 0, 0, 1062,
	0, 0, 1117, 1636, 1640, 1641, 1117, 1117, 0, 0,
	1584, 1177, 1177, 0, 0, 1173, 1173, 1173, 1171, 1148,
	0, 402, 404, 406, 408, 409, 410, 412, 1154, 0,
	1164, 0, 1154, 1154, 0, -2, 1136, 0, 0, 1164,
	1181, 1182, 0, 0, 0, 0, 0, 0, 1697, 0,
	0, 0, 1684, 0, 0, 0, 0, 432, 442, 1069,
	0, 1586, 1202, 1205, 1206, 1207, 1208, 1211, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, -2, 1266, 1268, 1289, 1255,
	1256, 1257, 1258, 1259, 1237, 1238, 1239, 1240, 1241, 1242,
	1243, 1244, 1245, 1246, 1247, 1261, 0, 1236, 1236, 1236,
	1253, 1254, 1277, 1288, 1280, 1288, 1284, 1203, 1204, 1271,
	1272, 1273, 1274, 0, 436, 0, 0, 0, 0, -2,
	496, 501, 502, 0, 0, 963, 0, 969, 523, 524,
	525, 971, 972, 0, 499, 526, 527, 528, 529, 530,
	531, 0, 842, 0, 844, 1656, 0, 497, 516, 504,
	0, 510, 77, 920, 116, 0, 920, 920, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 101, 112, 89,
	90, 0, 0, 0, 0, 59, 850, 0, 853, 0,
	0, 0, 0, 0, 0, 0, 865, 0, 0, 0,
	0, 100, 0, 95, 79, 0, 0, 0, 102, 114,
	0, 141, 143, 0, 0, 1167, 158, 0, 712, 0,
	0, 1697, 1652, 0, 0, 0, 0, 230, 232, 0,
	234, 235, 236, 0, 881, 0, 243, 240, 284, 799,
	1999, 849, 1999, 847, 1679, 0, 0, 0, 310, 305,
	0, 307, 868, 0, 1066, 0, 0, 0, 0, 888,
	0, 1999, 893, 1666, 1705, 1706, 977, 0, 314, 0,
	991, 0, 0, 1187, 0, 1189, 0, 261, 262, 263,
	0, 338, 0, 148, 149, 0, 341, 0, 344, 0,
	347, 0, 0, 350, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 164, 0, 0, 0, 0, 0, 0,
	188, 160, 188, 188, 1167, 473, 1167, 475, 0, 0,
	600, 601, 602, 604, 605, 607, 608, -2, -2, 697,
	667, 0, 0, 0, 666, 618, 0, 706, 1902, 716,
	667, 1763, 667, 1763, 667, 1763, 629, 631, 634, 659,
	642, 646, 0, 0, 0, 651, 0, 653, 0, 655,
	667, 668, 671, 676, 681, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 954, 1028, 1030, 454, 1031, 0,
	1040, 1033, 0, 1037, 1026, 1090, 1091, 1096, 1097, 1103,
	1106, 1107, 1099, 1307, 1055, 1056, 1057, 1081, 1082, 907,
	0, 2125, 1308, 1197, 1309, 1310, 1663, 0, 1315, 1316,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, -2, -2,
	-2, -2, -2, -2, -2, -2, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, -2, -2, -2,
	1347, 1348, -2, 1570, 1572, 0, 1635, 0, -2, 0,
	-2, -2, -2, -2, 1367, 0, 1369, 1374, 1376, 1378,
	0, 0, 0, 0, 1634, 1388, 1618, 1619, 0, 0,
	1549, 1550, 1551, 1373, 0, 1392, 1633, 1630, 0, 0,
	1582, 1080, 1451, 0, 0, 0, 0, 1458, 0, 1662,
	1303, 1290, 1291, 1292, 1293, 1294, 1295, 1305, 1443, 1580,
	0, 1579, 0, 0, 0, 1590, 0, 1625, 1621, 0,
	1685, 1691, 1523, 0, 0, 0, 0, 1659, 0, 0,
	0, 0, 0, 0, 0, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 0, 1593, -2, -2, -2,
	-2, -2, -2, -2, -2, 0, 1497, 0, 1499, 1584,
	1604, 0, 0, 1393, 0, 0, 0, 1547, 0, 1502,
	1584, 1612, 0, 0, 0, 0, 0, 1584, 0, 1617,
	0, 1509, 0, 1511, 1064, 0, 0, 1192, 0, 0,
	0, 1639, 1192, 1192, 0, 1112, 0, 0, 1174, 1175,
	1176, 0, 0, 1177, 0, 1168, 1172, 1169, 1170, 0,
	0, 1154, 403, 405, 407, 411, 413, 1164, 1128, 0,
	0, 1665, 1134, 1163, 0, 825, 1153, 1164, 1164, 0,
	-2, 1138, 0, 0, 1080, -2, 189, 824, 0, 0,
	0, 0, 0, 422, 424, 0, 0, 416, 0, 419,
	0, 1193, 1196, 0, 1209, 0, 0, -2, 0, 0,
	0, 0, 0, 489, 0, 962, 970, 0, 520, 0,
	522, 0, 843, 1658, 1657, 0, 511, 0, 0, 0,
	0, 919, 120, 1999, 0, 152, 0, 0, 793, 1671,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 91, 0, 0, 0,
	0, 0, 0, 0, 851, 852, 854, 860, 862, 0,
	856, 1660, 0, 857, 0, 859, 861, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 92,
	0, 0, 0, 0, 1646, 179, 1166, 0, 1645, 1655,
	0, 202, 205, 208, 211, 0, 238, 0, 0, 741,
	724, 0, 845, 848, 0, 825, 880, 1677, 0, 292,
	188, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	886, 0, 0, 0, 1999, 979, 985, 0, 1192, 0,
	1008, 993, 0, 0, 0, 1008, 1012, 1013, 1015, 1016,
	0, 0, 1188, 0, 265, 360, 150, 150, 150, 1643,
	150, 150, 177, 354, 357, 363, 415, 1069, 1069, 188,
	186, 1863, 184, 181, 183, 0, 0, 0, 742, 744,
	745, 746, 747, 0, 1706, 0, 1817, 1706, 0, 996,
	998, 0, 155, 188, 0, 0, 304, 472, 477, 594,
	0, 636, 661, 609, 611, 612, 613, 0, 717, 715,
	620, 667, 623, 667, 626, 667, 645, 648, 650, 0,
	0, 0, 663, 0, 0, 0, 0, 0, 0, 0,
	701, 702, 703, 705, 1185, 1029, 1039, 1035, 0, 1101,
	0, 1100, 1104, 1105, 0, 1089, 905, 906, 0, 0,
	0, 0, -2, -2, 0, 0, 0, 1389, 0, -2,
	1368, 1371, 1375, 1377, 1379, 0, 0, 0, 0, 0,
	0, 1573, 0, 1575, 1390, 1628, 1631, 1545, 0, 0,
	1079, 1080, 1080, 0, 1457, 0, 0, 0, 0, 0,
	0, 0, 1581, 0, 1588, 1589, 0, 1450, 0, 1622,
	0, 0, 0, 1459, 0, 0, 0, 1260, 1234, 0,
	1288, 1286, 1287, 1281, 1288, 1285, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 1482, 1494, 0, 1496, 1498,
	0, 0, 1500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1396, 1397, 1398, 1501,
	1610, 1611, 0, 0, 0, 0, 0, 0, 1507, 0,
	1616, 1508, 1510, 1069, 1114, 1109, 1191, 0, 1637, 1167,
	1116, 1118, 1638, 1668, 1109, 1109, 0, 1585, 0, 0,
	1158, 0, 0, 0, 1160, 0, 1149, 0, 1151, 1164,
	1133, 0, 0, 1126, 0, 1122, 1123, 1124, 1125, 825,
	1162, 1135, 1139, 1685, 0, 1183, 0, 1143, 1146, 0,
	0, 1698, 213, 217, 218, 214, 215, 216, 431, 0,
	0, 1587, 0, 1198, 0, 0, 0, 0, 0, 435,
	0, 485, -2, 518, 519, 521, 0, 517, 117, 920,
	0, 0, 911, 0, 122, 1999, 131, 0, 770, 0,
	1669, 0, 0, 0, 0, 922, 0, 1999, 150, 1999,
	150, 133, 136, 0, 140, 138, 0, 0, 761, 78,
	920, 81, 85, 93, 0, 0, 0, 99, 0, 0,
	0, 913, 0, 855, 858, 864, 60, 0, 915, 909,
	0, 908, 142, 83, 87, 94, 0, 917, 80, 0,
	188, 0, 159, 1651, 0, 0, 0, 0, 0, 740,
	810, 0, 0, 0, 0, 0, 0, 298, 294, 0,
	303, 309, 308, 871, -2, 874, 883, 0, 885, 897,
	0, 0, 0, 981, 985, 0, 984, 1067, 1080, 313,
	986, 1008, 0, 0, 0, 995, 992, 989, 1192, 0,
	0, 0, 0, 0, 260, 339, 342, 345, 348, 351,
	366, 367, 163, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 1706, 1706, 0, 1673, 0, 0,
	0, 0, 156, 161, 0, 474, 0, 0, 0, 622,
	624, 627, 652, 654, 667, 690, 691, 756, 0, 756,
	0, 0, 0, 0, 1083, 1084, 0, 907, 0, 1311,
	1352, 0, 0, -2, 0, 0, 1356, 0, 0, 0,
	-2, 0, 0, 0, 1574, 1576, 0, 1630, 1452, 0,
	0, 0, 1456, 1434, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 0, 1441, 1442, 1548, 1591, 1620, 1624, 0, 1686,
	1690, 1521, 1522, 1526, 1676, 0, 0, 0, 1279, 1283,
	1463, 0, 0, 0, 0, 0, 0, 0, 1592, 1603,
	1605, 1394, 1395, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, -2, -2, -2, 1412, 1413, 1414, -2,
	-2, -2, 0, 0, 0, 1606, 1608, 1609, 1613, 1614,
	0, 1504, 1505, 1506, 1615, 0, 1111, 0, 1190, 1115,
	0, 1111, 1111, 1076, 1156, 0, 0, 1179, 0, 1131,
	1150, 0, 1140, 1129, 0, 1130, 0, 1161, 0, 1137,
	1142, 0, 1145, 0, 1452, -2, 433, 417, 0, 0,
	1200, 1210, 0, 1263, 1267, 437, 1165, 0, 0, 0,
	0, 151, 768, 792, 0, 0, 900, 907, 0, 0,
	124, 0, 0, 0, 132, 0, 129, 0, 135, 139,
	0, 0, 0, 0, 0, 96, 97, 98, 0, 103,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 153,
	0, 233, 879, 239, 750, 798, 0, 800, 0, 725,
	0, 799, 849, 0, 290, 0, 297, 0, 869, 884,
	0, 0, 0, 0, 0, 983, 985, 0, 976, 977,
	1095, 987, 1006, -2, 1005, 0, 1080, 1014, 1011, 1017,
	1018, 0, 185, 0, 180, 182, 0, 166, 0, 0,
	743, 748, 0, 0, 0, 0, 0, 997, 999, 0,
	172, 0, 595, 614, 662, 692, 755, 0, 0, 694,
	0, 0, 1098, 1102, 1087, 1088, 1085, 907, 1354, 1358,
	0, 0, 0, 1360, -2, 0, 1382, -2, -2, 1577,
	1629, 1431, 1080, 1453, 1455, 1306, 1623, 0, 1528, 1525,
	0, 1512, 1235, 1473, 1474, 0, 0, 1477, 1479, 1480,
	1481, 1602, 0, 0, 0, 0, 1503, 1065, 1517, 0,
	0, 1119, 1517, 1517, 1157, 0, 1159, 1154, 1152, 1127,
	1120, 0, 1686, 1144, 0, 0, 1194, 1199, 0, 1262,
	118, 119, 121, 0, 769, 0, 772, 0, 0, 0,
	0, 779, 780, 0, 0, 0, 0, 0, 814, 823,
	0, 1089, 0, 0, 0, 126, 145, 0, 0, 921,
	0, 150, 150, 0, 0, 912, 0, 0, 0, 0,
	106, 0, 0, 914, 916, 910, 0, 0, 918, 178,
	758, 0, 810, 802, 803, 804, 0, 809, 811, 0,
	0, 729, 726, 741, 724, 846, 878, 0, 295, 0,
	896, 0, 0, 0, 973, 985, 0, 978, 979, 1008,
	1094, 0, 0, 0, 994, 1095, 0, 187, 188, 0,
	0, 0, 0, 0, 0, 0, 188, 476, 478, 0,
	0, 484, 754, 0, 0, 0, 0, 1086, 1362, -2,
	-2, 1383, 0, 1687, 1689, 1080, 0, 1514, 0, 0,
	-2, 0, 0, 0, 1051, 0, 1110, 1108, 1052, 1053,
	1178, 1164, 0, 1147, 0, 1201, 123, 0, 773, 774,
	1672, 776, 0, 778, 781, 0, 783, 1708, 0, 787,
	794, 815, 0, 750, 0, 820, 821, 901, 902, 796,
	0, 125, 127, 144, 904, 128, 134, 0, 0, 82,
	0, 0, 1757, 109, 107, 105, 84, 0, 724, 757,
	0, 801, 0, 812, 813, 727, 0, 0, 0, 296,
	299, 0, 302, 0, 897, 0, 0, 0, 980, 981,
	311, 0, 0, 0, 1008, 1019, 165, 0, 0, 823,
	0, 0, 791, 0, 170, 0, 480, 0, 482, 0,
	693, 695, 0, 0, 1454, 1532, 0, 1475, 1476, -2,
	0, 1420, 1516, 1518, 0, 1132, 1121, 1195, 771, 775,
	0, 0, 829, 0, 0, 0, 818, 819, 758, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 722,
	0, 0, 730, 0, 750, 0, 300, 301, 823, 0,
	823, 0, 982, 983, 0, 1001, 1002, 1004, 1009, 0,
	0, 750, 823, 790, 0, 479, 0, 0, 698, 699,
	0, 0, 0, 0, 1527, 1421, 0, 0, 0, 782,
	834, 0, 0, 0, 816, 817, 814, 0, 825, 130,
	0, 903, 0, 762, 0, 0, 765, 0, 0, 110,
	1757, 108, 0, 0, 0, 806, 808, 731, 758, 729,
	750, 0, 750, 0, 974, 0, 1003, 188, 188, 758,
	750, 188, 481, 483, 1524, 1544, 1533, -2, 1962, 1760,
	0, 1544, 1544, 1519, 1520, 0, 784, 830, 831, 0,
	826, 827, 828, 1707, 785, 786, 795, 822, 829, 146,
	759, 0, 0, 760, 0, 0, 113, 0, 115, 0,
	805, 0, 724, 728, 758, 0, 758, 0, 1192, 167,
	168, 788, 758, 169, 1529, 0, 0, 1535, 1536, 1537,
	1538, 1539, 1530, 1531, 777, 832, 0, 833, 0, 0,
	0, 834, 763, 0, 766, 0, 111, 0, 807, 723,
	894, 823, 894, 823, 1000, 789, 0, 1541, 1542, 0,
	0, 835, 0, 838, 839, 0, 836, 814, 0, 0,
	753, 889, 0, 750, 891, 750, 1540, 1543, 1534, 837,
	840, 841, 797, 0, 0, 749, 751, 752, 895, 758,
	758, 758, 0, 894, 894, 764, 0, 890, 892, 0,
	0, 758, 767,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 451, 3, 457, 452, 3,
	462, 463, 455, 453, 467, 454, 464, 456, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 470, 3,
	443, 445, 444, 448, 466, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 460, 3, 461, 458, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 468, 450, 469, 446,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 447, 57786, 449, 57787, 459, 57788, 465, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1085
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1094
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1095
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1096
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1098
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1099
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1100
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1101
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1105
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1114
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1115
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1118
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1119
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1120
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1121
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1122
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1123
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1124
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1177
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1203
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1214
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1229
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1233
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1237
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1248
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1260
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1279
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1311
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1315
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1319
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1325
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1329
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1335
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1344
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1355
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1359
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1365
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1373
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1383
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1387
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1397
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1408
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1415
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1427
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1434
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1442
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1447
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1451
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1456
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1462
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1470
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1481
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1491
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1501
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1510
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1521
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1527
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1539
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1547
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1553
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1558
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1573
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1579
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1610
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1615
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1625
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1635
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1640
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1649
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1678
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1688
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1697
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1706
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1711
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1718
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1726
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1727
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1731
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1735
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1741
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1749
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1753
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1759
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1763
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1770
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1774
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1778
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1784
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1788
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1814
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1817
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1840
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1844
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1847
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1851
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1855
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1861
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1865
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1871
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1908
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1913
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1917
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1923
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1928
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1933
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1938
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1943
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1947
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1963
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1966
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1970
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1974
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1982
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1992
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1996
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2002
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2006
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2010
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2014
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2020
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2024
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2030
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2034
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2038
		{
			sqlVAL.union.val = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2044
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2057
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2058
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2059
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2060
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2070
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2080
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2102
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2110
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2112
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2116
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2119
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2129
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2138
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2146
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2148
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2152
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2155
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2159
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2167
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2182
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2188
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2193
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2205
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2206
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2208
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2209
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2210
		{
			return helpWith(sqllex, "CREATE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2213
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2214
		{
			return unimplemented(sqllex, "create cast")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2215
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2216
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2217
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2218
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2219
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2220
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2221
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2222
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2223
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2224
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2225
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2226
		{
			return unimplemented(sqllex, "create operator")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2227
		{
			return unimplemented(sqllex, "create publication")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2228
		{
			return unimplemented(sqllex, "create rule")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2230
		{
			return unimplemented(sqllex, "create server")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2231
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2233
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2236
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2237
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2240
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2241
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2244
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2245
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2248
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2249
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2252
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2253
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2254
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2255
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2256
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2258
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2259
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2260
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2261
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2262
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplemented(sqllex, "drop server")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2264
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2265
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2271
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2272
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2273
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2274
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2276
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2277
		{
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2278
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2279
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2289
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2297
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2301
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2305
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2311
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2315
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2324
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2331
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2337
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2343
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2347
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2358
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2370
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2378
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2386
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2396
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2400
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2406
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2410
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2417
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2421
		{

			sqlVAL.union.val = nil
		}
	case 311:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2435
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2445
		{
			return helpWith(sqllex, "DELETE")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2448
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2449
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2457
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2460
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2461
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2462
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2463
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2464
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2473
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2474
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2475
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2476
		{
			return helpWith(sqllex, "DROP")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2479
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2480
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2481
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2482
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2483
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2491
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2495
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2498
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2510
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2513
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2521
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2525
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2528
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2536
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2544
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2551
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2559
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2567
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2574
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2582
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2586
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2589
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2597
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2601
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2604
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2608
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2613
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2636
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2639
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2641
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2645
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2649
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2653
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2657
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2664
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2668
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2671
		{
			return helpWith(sqllex, "DELETE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2673
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2674
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2675
		{
			return helpWith(sqllex, "INSERT")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2676
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2678
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2679
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2680
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2683
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2689
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2690
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2695
		{
			return helpWith(sqllex, "DELETE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2696
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2697
		{
			return helpWith(sqllex, "INSERT")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2699
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2704
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2708
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2722
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2730
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2738
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2742
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2746
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2756
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2763
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2771
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2775
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2779
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2789
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2793
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2797
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2801
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2804
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2824
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2828
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2832
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2835
		{
			return helpWith(sqllex, "GRANT")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2855
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2859
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2863
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2866
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2871
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2875
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2889
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2903
		{
			return helpWith(sqllex, "RESET")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2904
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2912
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2916
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2919
		{
			return helpWith(sqllex, "RESET")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2927
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2930
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2941
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2944
		{
			return helpWith(sqllex, "USE")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2948
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2949
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2950
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2951
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2955
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2956
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2957
		{
			return helpWith(sqllex, "USE")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2973
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2988
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2991
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3009
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3017
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3021
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3025
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3031
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3035
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3041
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3045
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3049
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3053
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3057
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3068
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3071
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3081
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3097
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3101
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3106
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3123
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3126
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3128
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3131
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3135
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3154
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3161
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3166
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3171
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3176
		{
			return unimplemented(sqllex, "set from current")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3177
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3185
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3190
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3197
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3201
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3207
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3218
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3239
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3243
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3249
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3253
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3257
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3261
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3265
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3271
		{
			sqlVAL.union.val = tree.Low
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3275
		{
			sqlVAL.union.val = tree.Normal
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3279
		{
			sqlVAL.union.val = tree.High
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3294
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3298
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3303
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3307
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3320
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3321
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3322
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3323
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3324
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3325
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3327
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3328
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3329
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3330
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3331
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3332
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3333
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3339
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3340
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3342
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3343
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3344
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3347
		{
			return helpWith(sqllex, "SHOW")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3354
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3355
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3367
		{
			sqlVAL.str = "client_encoding"
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3370
		{
			sqlVAL.str = "timezone"
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3371
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3385
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3389
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3393
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3404
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3412
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3420
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3427
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3435
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3443
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3450
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3464
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3467
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3469
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3472
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3480
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3483
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3491
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3495
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3499
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3503
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3506
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3514
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3517
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3530
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3538
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3546
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3549
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3551
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3555
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3559
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3562
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3564
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3568
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3571
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3579
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3582
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3584
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3587
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3595
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3598
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3600
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3603
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3607
		{
			sqlVAL.union.val = true
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3609
		{
			sqlVAL.union.val = true
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3611
		{
			sqlVAL.union.val = false
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3625
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3628
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3629
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3631
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3635
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3638
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3640
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3648
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3656
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3665
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3668
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3670
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3673
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3675
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3679
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3682
		{
			sqlVAL.union.val = true
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3683
		{
			sqlVAL.union.val = false
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3691
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3694
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3696
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3699
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3707
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3717
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3727
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3730
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3733
		{
			sqlVAL.union.val = true
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3734
		{
			sqlVAL.union.val = false
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3741
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3745
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3748
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3755
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3759
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3762
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3769
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3773
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3781
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3786
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3791
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3795
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3803
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3807
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3811
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3824
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3827
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3835
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3838
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3842
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3846
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3850
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3858
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3866
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3873
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3880
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3884
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3895
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3903
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3909
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3918
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3923
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3927
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3930
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3934
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3941
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3946
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4066
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4070
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4074
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4113
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4117
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4122
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4126
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4135
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4142
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4146
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4158
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4167
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4170
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4206
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4218
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4231
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4232
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4233
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4237
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4248
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4260
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4261
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4262
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4276
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4277
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4278
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4279
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4280
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4281
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4282
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4283
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4288
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4294
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4304
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4313
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4317
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4326
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4333
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4338
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4343
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4349
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4356
		{
			sqlVAL.str = ""
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4363
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4369
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4376
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4383
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4389
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 764:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4399
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4409
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4419
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4433
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4444
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4448
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4458
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4462
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4466
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4470
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4474
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4478
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4496
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4500
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4512
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4516
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4520
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4530
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4534
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4538
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 788:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4545
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4555
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4567
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4577
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4589
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4594
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4600
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4606
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4617
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4627
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4641
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4645
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4651
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4661
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4672
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4676
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4683
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4689
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4700
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4710
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4716
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4720
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4726
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4730
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4736
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4741
		{
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4742
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4743
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4744
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4745
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4746
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4767
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4773
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4777
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4797
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4801
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4805
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4809
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4818
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4822
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4826
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4830
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4834
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4840
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4846
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4854
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4858
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4862
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4866
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4870
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4876
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4880
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4886
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4905
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4910
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4914
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4918
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4921
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4922
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4925
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4926
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4928
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4929
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4930
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4933
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4935
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4937
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4939
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4940
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4942
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4943
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4945
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4947
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4955
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4958
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4966
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4970
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4973
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4977
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4981
		{
			sqlVAL.union.val = nil
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4991
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4995
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4998
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5003
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5004
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5012
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5020
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 880:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5021
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5024
		{
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5025
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5031
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 884:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5033
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5035
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5037
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5039
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5041
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5057
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5071
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5086
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5100
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5114
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5117
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5118
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5122
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5137
		{
			sqlVAL.union.val = false
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5143
		{
			sqlVAL.union.val = true
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5147
		{
			sqlVAL.union.val = false
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5153
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5157
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5166
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5188
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5189
		{
			sqlVAL.str = ""
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5197
		{
			sqlVAL.union.val = tree.Descending
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5201
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 908:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5214
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5218
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5224
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5230
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5238
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5244
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5252
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5258
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5266
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5270
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5275
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5276
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5279
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5280
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5288
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5291
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5301
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5310
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5313
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5321
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5324
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5328
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5329
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5330
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5346
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5349
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5351
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5354
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5364
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5367
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5369
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5372
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5376
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5381
		{
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5382
		{
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5383
		{
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5391
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5398
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5401
		{
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5402
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5406
		{
			sqlVAL.str = ""
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5410
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5414
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5418
		{
			sqlVAL.str = ""
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5424
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5428
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5434
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5438
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5444
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5448
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5461
		{
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5463
		{
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5467
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5472
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5476
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5480
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5486
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5492
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5498
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5502
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 973:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5512
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5522
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5532
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5536
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5540
		{
			sqlVAL.str = ""
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5546
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 979:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5550
		{
			sqlVAL.str = ""
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5556
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 981:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5560
		{
			sqlVAL.str = ""
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5566
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5570
		{
			sqlVAL.str = ""
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5575
		{
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5576
		{
		}
	case 986:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5588
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 987:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5595
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5602
		{
			return helpWith(sqllex, "INSERT")
		}
	case 989:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5613
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5620
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5624
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5633
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5640
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5644
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5648
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5654
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5678
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5682
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5686
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5692
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5695
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5696
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5698
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5704
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5709
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5713
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5730
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5742
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5745
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5748
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5754
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5758
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5771
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5774
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5778
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5821
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5827
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5831
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5846
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5850
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5854
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5858
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5862
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5866
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5871
		{
			sqlVAL.union.val = tree.ForLocked{}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5873
		{
			sqlVAL.union.val = tree.ForLocked{Strength: sqlDollar[1].union.lockingStrength(), Targets: sqlDollar[2].union.tableNames()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5878
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5879
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5882
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5883
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5884
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5885
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5888
		{
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5890
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5891
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5896
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5931
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5932
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5933
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5955
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5968
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5982
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5994
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5998
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6007
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6016
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6031
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6038
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6050
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6054
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6059
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6065
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6075
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6083
		{
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6084
		{
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6088
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6092
		{
			sqlVAL.union.val = nil
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6097
		{
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6098
		{
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6102
		{
			sqlVAL.union.val = true
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6106
		{
			sqlVAL.union.val = false
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6110
		{
			sqlVAL.union.val = false
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6116
		{
			sqlVAL.union.val = true
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6122
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6127
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6128
		{
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6132
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6136
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6142
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6148
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6152
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6158
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6179
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6184
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6196
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6200
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6204
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6213
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6222
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6234
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6238
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6242
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6251
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6257
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6264
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6273
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6277
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6281
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6287
		{
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6288
		{
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6291
		{
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6292
		{
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6309
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6313
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6319
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6323
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6342
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6345
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6347
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6359
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6362
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6364
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6370
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6380
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6384
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6389
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6394
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6400
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6405
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6412
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6417
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6428
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6432
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6436
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6444
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6475
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6489
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6507
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6520
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6524
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6535
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6559
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6565
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6569
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6575
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6581
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6587
		{
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6589
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6592
		{
			sqlVAL.union.val = nil
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6593
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6594
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6598
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6608
		{
			sqlVAL.union.val = true
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6612
		{
			sqlVAL.union.val = false
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6632
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6636
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6640
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6644
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6648
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6652
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6658
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6662
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6669
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6675
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6682
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6688
		{
			sqlVAL.str = tree.AstFull
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6692
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6696
		{
			sqlVAL.str = tree.AstRight
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6700
		{
			sqlVAL.str = tree.AstInner
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6706
		{
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6707
		{
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6728
		{
			sqlVAL.str = tree.AstHash
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6732
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6736
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6740
		{
			sqlVAL.str = ""
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6753
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6757
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6762
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6763
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6764
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6765
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6769
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6774
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6788
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6792
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6798
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6806
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6816
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6823
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6835
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6848
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6856
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6857
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6867
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6874
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6875
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6877
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6885
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6886
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6897
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6899
		{
			prec, err := sqlDollar[3].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			if prec == 6 {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			} else {
				return unimplementedWithIssue(sqllex, 32564)
			}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6927
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6931
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6935
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6939
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6943
		{
			sqlVAL.union.val = types.String
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6947
		{
			sqlVAL.union.val = types.Name
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6951
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6960
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6964
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6976
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = types.INet
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = types.Oid
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6992
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7000
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7031
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7039
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7047
		{
			sqlVAL.union.val = nil
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7054
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7058
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7062
		{
			sqlVAL.union.val = types.Int2
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7066
		{
			sqlVAL.union.val = types.Int2
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7070
		{
			sqlVAL.union.val = types.Int4
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7074
		{
			sqlVAL.union.val = types.Int
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7078
		{
			sqlVAL.union.val = types.Int
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = types.Int
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = types.Float4
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7090
		{
			sqlVAL.union.val = types.Float4
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7094
		{
			sqlVAL.union.val = types.Float
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7098
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7102
		{
			sqlVAL.union.val = types.Float
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7106
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7114
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7122
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7130
		{
			sqlVAL.union.val = types.Bool
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7134
		{
			sqlVAL.union.val = types.Bool
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7145
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7149
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.union.val = types.RegType
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7157
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7163
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7176
		{
			sqlVAL.union.val = types.Float
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7182
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7188
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7196
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7200
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7204
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7210
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7222
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7228
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7232
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7236
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7240
		{
			sqlVAL.union.val = types.String
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7249
		{
			sqlVAL.union.val = true
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7250
		{
			sqlVAL.union.val = false
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = types.Date
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7259
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7264
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7271
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7272
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7274
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7282
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7294
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7298
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7307
		{
			sqlVAL.union.val = true
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7308
		{
			sqlVAL.union.val = false
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7309
		{
			sqlVAL.union.val = false
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7313
		{
			sqlVAL.union.val = types.Interval
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = tree.Year
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = tree.Month
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = tree.Day
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7345
		{
			sqlVAL.union.val = tree.Month
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7349
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7353
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7357
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7361
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7365
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7369
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = nil
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7382
		{
			sqlVAL.union.val = tree.Second
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7385
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7409
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7413
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7417
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7421
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7432
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7437
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7441
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7445
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7449
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7453
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7457
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7461
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7465
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7473
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7481
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7493
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7497
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7501
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7505
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7521
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7533
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7537
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7577
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7589
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7597
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7605
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7609
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7613
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7617
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7621
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7637
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7645
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7649
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7653
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7657
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7665
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7669
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7673
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7676
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7686
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7694
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7726
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7742
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7759
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7764
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7776
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7780
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7788
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7792
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7796
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7808
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7812
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7816
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7820
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7824
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7884
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7898
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7906
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7950
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7954
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7958
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7963
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7965
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7969
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7972
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7986
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7990
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7999
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8006
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8010
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8014
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8023
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8031
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8038
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8049
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8050
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8065
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8076
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8093
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8112
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8116
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8120
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8124
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8130
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8158
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8174
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8178
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8185
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8188
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8193
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8195
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8198
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8200
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8203
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8205
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8208
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8213
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8218
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8220
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8223
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8225
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8229
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8232
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8233
		{
			return unimplemented(sqllex, "treat")
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8239
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8243
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8247
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8251
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8254
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8256
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8259
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8264
		{
			return unimplemented(sqllex, "within group")
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8265
		{
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8269
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8273
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8280
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8300
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8316
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8323
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8343
		{
			sqlVAL.str = ""
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8349
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8353
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8359
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8367
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8375
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8383
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8389
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8402
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8430
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8434
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8438
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8442
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8449
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8458
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8462
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8466
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8470
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8475
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8488
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8492
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8499
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8511
		{
			sqlVAL.union.val = tree.Any
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8515
		{
			sqlVAL.union.val = tree.Some
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8519
		{
			sqlVAL.union.val = tree.All
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8524
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8525
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8526
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8527
		{
			sqlVAL.union.val = tree.Div
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8528
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8529
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8530
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8531
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8532
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8533
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8534
		{
			sqlVAL.union.val = tree.LT
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8535
		{
			sqlVAL.union.val = tree.GT
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8536
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8537
		{
			sqlVAL.union.val = tree.LE
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8538
		{
			sqlVAL.union.val = tree.GE
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8539
		{
			sqlVAL.union.val = tree.NE
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8543
		{
			sqlVAL.union.val = tree.Like
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8544
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8545
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8546
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8569
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8573
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8579
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8583
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8587
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8598
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8602
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8608
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8612
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8619
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8625
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8629
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8635
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8645
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8649
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8655
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8659
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8665
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8669
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8692
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8696
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8700
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8706
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8713
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8717
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8734
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8738
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8742
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8746
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8756
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8762
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8768
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8772
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8776
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8782
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8794
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8801
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8811
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8817
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8821
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8828
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8834
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8838
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8845
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8851
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8860
		{
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8861
		{
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8865
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8869
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8875
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8884
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8888
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8892
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8900
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8904
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8910
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8933
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8941
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8964
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8973
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8977
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8981
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8985
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8991
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8995
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9003
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9007
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9016
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9027
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9036
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9044
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9141
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9148
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9152
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9156
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9170
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9174
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9178
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9191
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9209
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9222
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9229
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9254
		{
			sqlVAL.str = ""
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9260
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9264
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
