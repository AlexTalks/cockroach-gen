// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:554
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8223

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	421, 57,
	-2, 891,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	165, 728,
	-2, 0,
	-1, 60,
	101, 891,
	171, 891,
	369, 891,
	370, 891,
	-2, 0,
	-1, 74,
	113, 865,
	127, 865,
	179, 865,
	205, 865,
	234, 865,
	242, 865,
	366, 865,
	-2, 854,
	-1, 110,
	195, 545,
	356, 545,
	-2, 0,
	-1, 115,
	4, 893,
	20, 893,
	21, 893,
	22, 893,
	23, 893,
	25, 893,
	30, 893,
	35, 893,
	36, 893,
	37, 893,
	38, 893,
	39, 893,
	40, 893,
	41, 893,
	42, 893,
	43, 893,
	44, 893,
	46, 893,
	47, 893,
	48, 893,
	49, 893,
	50, 893,
	51, 893,
	54, 893,
	55, 893,
	56, 893,
	58, 893,
	59, 893,
	63, 893,
	64, 893,
	65, 893,
	66, 893,
	67, 893,
	69, 893,
	70, 893,
	71, 893,
	72, 893,
	74, 893,
	76, 893,
	77, 893,
	80, 893,
	81, 893,
	82, 893,
	90, 893,
	91, 893,
	92, 893,
	93, 893,
	94, 893,
	95, 893,
	96, 893,
	97, 893,
	99, 893,
	101, 893,
	103, 893,
	106, 893,
	107, 893,
	109, 893,
	110, 893,
	114, 893,
	115, 893,
	116, 893,
	117, 893,
	118, 893,
	119, 893,
	120, 893,
	121, 893,
	122, 893,
	123, 893,
	124, 893,
	132, 893,
	133, 893,
	134, 893,
	135, 893,
	136, 893,
	138, 893,
	140, 893,
	144, 893,
	146, 893,
	147, 893,
	149, 893,
	151, 893,
	152, 893,
	153, 893,
	154, 893,
	155, 893,
	156, 893,
	157, 893,
	158, 893,
	161, 893,
	166, 893,
	167, 893,
	168, 893,
	171, 893,
	172, 893,
	173, 893,
	174, 893,
	175, 893,
	176, 893,
	177, 893,
	178, 893,
	180, 893,
	182, 893,
	185, 893,
	186, 893,
	187, 893,
	189, 893,
	190, 893,
	193, 893,
	194, 893,
	195, 893,
	197, 893,
	198, 893,
	200, 893,
	202, 893,
	203, 893,
	206, 893,
	207, 893,
	210, 893,
	212, 893,
	215, 893,
	216, 893,
	217, 893,
	218, 893,
	219, 893,
	221, 893,
	222, 893,
	223, 893,
	224, 893,
	229, 893,
	230, 893,
	231, 893,
	232, 893,
	233, 893,
	235, 893,
	236, 893,
	238, 893,
	239, 893,
	240, 893,
	243, 893,
	244, 893,
	246, 893,
	248, 893,
	249, 893,
	250, 893,
	251, 893,
	252, 893,
	253, 893,
	254, 893,
	255, 893,
	257, 893,
	258, 893,
	259, 893,
	260, 893,
	261, 893,
	263, 893,
	264, 893,
	265, 893,
	266, 893,
	267, 893,
	268, 893,
	269, 893,
	270, 893,
	272, 893,
	273, 893,
	274, 893,
	275, 893,
	276, 893,
	278, 893,
	279, 893,
	280, 893,
	281, 893,
	282, 893,
	283, 893,
	284, 893,
	286, 893,
	288, 893,
	289, 893,
	290, 893,
	291, 893,
	292, 893,
	293, 893,
	295, 893,
	296, 893,
	297, 893,
	298, 893,
	299, 893,
	300, 893,
	301, 893,
	303, 893,
	304, 893,
	305, 893,
	306, 893,
	307, 893,
	308, 893,
	309, 893,
	310, 893,
	311, 893,
	313, 893,
	314, 893,
	315, 893,
	316, 893,
	318, 893,
	319, 893,
	320, 893,
	321, 893,
	323, 893,
	324, 893,
	325, 893,
	326, 893,
	327, 893,
	328, 893,
	329, 893,
	330, 893,
	331, 893,
	332, 893,
	333, 893,
	334, 893,
	336, 893,
	337, 893,
	339, 893,
	340, 893,
	341, 893,
	342, 893,
	343, 893,
	344, 893,
	345, 893,
	346, 893,
	347, 893,
	348, 893,
	350, 893,
	351, 893,
	352, 893,
	353, 893,
	356, 893,
	357, 893,
	358, 893,
	359, 893,
	361, 893,
	362, 893,
	364, 893,
	365, 893,
	368, 893,
	369, 893,
	370, 893,
	371, 893,
	373, 893,
	375, 893,
	376, 893,
	377, 893,
	378, 893,
	379, 893,
	380, 893,
	383, 893,
	384, 893,
	389, 893,
	390, 893,
	391, 893,
	392, 893,
	393, 893,
	394, 893,
	-2, 0,
	-1, 136,
	113, 864,
	127, 864,
	179, 864,
	205, 864,
	234, 864,
	242, 864,
	366, 864,
	-2, 857,
	-1, 141,
	1, 787,
	185, 787,
	263, 787,
	267, 787,
	420, 787,
	421, 787,
	-2, 0,
	-1, 143,
	1, 787,
	420, 787,
	421, 787,
	-2, 0,
	-1, 144,
	1, 787,
	420, 787,
	421, 787,
	-2, 0,
	-1, 145,
	1, 791,
	420, 791,
	421, 791,
	-2, 0,
	-1, 171,
	4, 900,
	5, 900,
	6, 900,
	7, 900,
	8, 900,
	9, 900,
	20, 900,
	21, 900,
	22, 900,
	23, 900,
	25, 900,
	30, 900,
	31, 900,
	35, 900,
	36, 900,
	37, 900,
	38, 900,
	39, 900,
	40, 900,
	41, 900,
	42, 900,
	43, 900,
	44, 900,
	46, 900,
	47, 900,
	48, 900,
	49, 900,
	50, 900,
	51, 900,
	52, 900,
	53, 900,
	54, 900,
	55, 900,
	56, 900,
	58, 900,
	59, 900,
	61, 900,
	63, 900,
	64, 900,
	65, 900,
	66, 900,
	67, 900,
	69, 900,
	70, 900,
	71, 900,
	72, 900,
	74, 900,
	76, 900,
	77, 900,
	79, 900,
	80, 900,
	81, 900,
	82, 900,
	83, 900,
	84, 900,
	85, 900,
	86, 900,
	87, 900,
	88, 900,
	89, 900,
	90, 900,
	91, 900,
	92, 900,
	93, 900,
	94, 900,
	95, 900,
	96, 900,
	97, 900,
	98, 900,
	99, 900,
	101, 900,
	103, 900,
	106, 900,
	107, 900,
	109, 900,
	110, 900,
	114, 900,
	115, 900,
	116, 900,
	117, 900,
	118, 900,
	119, 900,
	120, 900,
	121, 900,
	122, 900,
	123, 900,
	124, 900,
	125, 900,
	126, 900,
	132, 900,
	133, 900,
	134, 900,
	135, 900,
	136, 900,
	138, 900,
	140, 900,
	143, 900,
	144, 900,
	146, 900,
	147, 900,
	149, 900,
	151, 900,
	152, 900,
	153, 900,
	154, 900,
	155, 900,
	156, 900,
	157, 900,
	158, 900,
	159, 900,
	161, 900,
	166, 900,
	167, 900,
	168, 900,
	170, 900,
	171, 900,
	172, 900,
	173, 900,
	174, 900,
	175, 900,
	176, 900,
	177, 900,
	178, 900,
	180, 900,
	182, 900,
	183, 900,
	184, 900,
	185, 900,
	186, 900,
	187, 900,
	188, 900,
	189, 900,
	190, 900,
	193, 900,
	194, 900,
	195, 900,
	197, 900,
	198, 900,
	200, 900,
	201, 900,
	202, 900,
	203, 900,
	204, 900,
	206, 900,
	207, 900,
	210, 900,
	212, 900,
	213, 900,
	214, 900,
	215, 900,
	216, 900,
	217, 900,
	218, 900,
	219, 900,
	220, 900,
	221, 900,
	222, 900,
	223, 900,
	224, 900,
	225, 900,
	227, 900,
	228, 900,
	229, 900,
	230, 900,
	231, 900,
	232, 900,
	233, 900,
	235, 900,
	236, 900,
	239, 900,
	240, 900,
	243, 900,
	244, 900,
	245, 900,
	246, 900,
	247, 900,
	248, 900,
	249, 900,
	250, 900,
	251, 900,
	252, 900,
	253, 900,
	254, 900,
	255, 900,
	257, 900,
	258, 900,
	259, 900,
	260, 900,
	261, 900,
	263, 900,
	264, 900,
	265, 900,
	266, 900,
	267, 900,
	268, 900,
	269, 900,
	270, 900,
	272, 900,
	273, 900,
	274, 900,
	275, 900,
	276, 900,
	278, 900,
	279, 900,
	280, 900,
	281, 900,
	282, 900,
	283, 900,
	284, 900,
	286, 900,
	287, 900,
	288, 900,
	289, 900,
	290, 900,
	291, 900,
	292, 900,
	293, 900,
	295, 900,
	296, 900,
	297, 900,
	298, 900,
	299, 900,
	300, 900,
	301, 900,
	303, 900,
	304, 900,
	305, 900,
	306, 900,
	307, 900,
	308, 900,
	309, 900,
	310, 900,
	311, 900,
	312, 900,
	313, 900,
	314, 900,
	315, 900,
	316, 900,
	317, 900,
	318, 900,
	319, 900,
	320, 900,
	321, 900,
	323, 900,
	324, 900,
	325, 900,
	326, 900,
	327, 900,
	328, 900,
	329, 900,
	330, 900,
	331, 900,
	332, 900,
	333, 900,
	334, 900,
	336, 900,
	337, 900,
	339, 900,
	340, 900,
	341, 900,
	342, 900,
	343, 900,
	344, 900,
	345, 900,
	346, 900,
	347, 900,
	348, 900,
	350, 900,
	351, 900,
	352, 900,
	353, 900,
	356, 900,
	357, 900,
	358, 900,
	359, 900,
	360, 900,
	361, 900,
	362, 900,
	364, 900,
	365, 900,
	368, 900,
	369, 900,
	370, 900,
	371, 900,
	372, 900,
	373, 900,
	375, 900,
	376, 900,
	377, 900,
	378, 900,
	379, 900,
	380, 900,
	383, 900,
	384, 900,
	389, 900,
	390, 900,
	391, 900,
	392, 900,
	393, 900,
	394, 900,
	395, 900,
	403, 900,
	408, 900,
	409, 900,
	410, 900,
	417, 900,
	423, 900,
	-2, 0,
	-1, 174,
	1, 57,
	421, 57,
	-2, 891,
	-1, 207,
	419, 1465,
	422, 1465,
	-2, 588,
	-1, 208,
	419, 1467,
	422, 1467,
	-2, 589,
	-1, 209,
	419, 1466,
	422, 1466,
	-2, 590,
	-1, 210,
	422, 1407,
	-2, 591,
	-1, 613,
	142, 1580,
	354, 1580,
	400, 1580,
	419, 1580,
	-2, 0,
	-1, 614,
	142, 1503,
	354, 1503,
	400, 1503,
	419, 1503,
	-2, 0,
	-1, 616,
	142, 1653,
	354, 1653,
	400, 1653,
	419, 1653,
	-2, 0,
	-1, 618,
	142, 1682,
	354, 1682,
	400, 1682,
	419, 1682,
	-2, 0,
	-1, 625,
	142, 1585,
	354, 1585,
	400, 1585,
	419, 1585,
	-2, 419,
	-1, 660,
	1, 517,
	416, 517,
	418, 517,
	420, 517,
	421, 517,
	-2, 0,
	-1, 661,
	1, 587,
	139, 587,
	416, 587,
	418, 587,
	420, 587,
	421, 587,
	-2, 0,
	-1, 667,
	1, 531,
	416, 531,
	418, 531,
	420, 531,
	421, 531,
	-2, 0,
	-1, 669,
	1, 535,
	416, 535,
	418, 535,
	420, 535,
	421, 535,
	-2, 0,
	-1, 672,
	1, 546,
	416, 546,
	418, 546,
	420, 546,
	421, 546,
	-2, 0,
	-1, 673,
	1, 552,
	416, 552,
	418, 552,
	420, 552,
	421, 552,
	-2, 0,
	-1, 674,
	1, 555,
	416, 555,
	418, 555,
	420, 555,
	421, 555,
	-2, 0,
	-1, 678,
	1, 569,
	416, 569,
	418, 569,
	420, 569,
	421, 569,
	-2, 0,
	-1, 679,
	1, 571,
	416, 571,
	418, 571,
	420, 571,
	421, 571,
	-2, 0,
	-1, 707,
	127, 904,
	205, 904,
	234, 904,
	-2, 860,
	-1, 715,
	127, 903,
	205, 903,
	234, 903,
	-2, 858,
	-1, 742,
	417, 1755,
	-2, 1183,
	-1, 743,
	417, 1756,
	-2, 1184,
	-1, 772,
	417, 1459,
	-2, 1450,
	-1, 773,
	5, 1039,
	417, 1474,
	-2, 1465,
	-1, 774,
	417, 1475,
	-2, 1466,
	-1, 781,
	5, 1023,
	-2, 1495,
	-1, 782,
	5, 1024,
	-2, 1499,
	-1, 783,
	5, 1025,
	-2, 1498,
	-1, 784,
	5, 1026,
	-2, 1678,
	-1, 785,
	5, 1027,
	-2, 1587,
	-1, 786,
	5, 1028,
	-2, 1646,
	-1, 787,
	5, 1029,
	-2, 1648,
	-1, 788,
	5, 1030,
	-2, 1649,
	-1, 789,
	5, 1031,
	-2, 1650,
	-1, 790,
	5, 1032,
	-2, 1658,
	-1, 791,
	5, 1033,
	-2, 1690,
	-1, 792,
	5, 1034,
	-2, 1557,
	-1, 793,
	5, 1035,
	-2, 1494,
	-1, 794,
	5, 1036,
	-2, 1595,
	-1, 795,
	5, 1037,
	-2, 1596,
	-1, 796,
	5, 1038,
	-2, 1561,
	-1, 797,
	5, 1087,
	417, 1087,
	-2, 1723,
	-1, 815,
	5, 1060,
	-2, 1496,
	-1, 816,
	5, 1078,
	-2, 1523,
	-1, 818,
	5, 1052,
	-2, 1544,
	-1, 819,
	5, 1053,
	-2, 1545,
	-1, 820,
	5, 1044,
	-2, 1560,
	-1, 821,
	5, 1045,
	-2, 1562,
	-1, 822,
	5, 1046,
	-2, 1563,
	-1, 823,
	5, 1047,
	-2, 1564,
	-1, 824,
	5, 1011,
	-2, 1570,
	-1, 825,
	5, 1012,
	-2, 1571,
	-1, 826,
	5, 1075,
	-2, 1668,
	-1, 827,
	5, 1085,
	-2, 1680,
	-1, 828,
	5, 1050,
	-2, 1704,
	-1, 829,
	5, 1077,
	-2, 1705,
	-1, 830,
	5, 1059,
	-2, 1706,
	-1, 831,
	5, 1077,
	-2, 1707,
	-1, 832,
	5, 1077,
	-2, 1708,
	-1, 833,
	5, 1042,
	-2, 1711,
	-1, 834,
	5, 1042,
	-2, 1712,
	-1, 837,
	5, 1067,
	-2, 1716,
	-1, 839,
	5, 1043,
	-2, 1721,
	-1, 840,
	5, 1048,
	-2, 1722,
	-1, 842,
	5, 1042,
	-2, 1726,
	-1, 845,
	5, 1051,
	-2, 1731,
	-1, 846,
	5, 1049,
	-2, 1733,
	-1, 848,
	5, 1079,
	-2, 1735,
	-1, 849,
	5, 1081,
	-2, 1736,
	-1, 850,
	5, 1083,
	-2, 1737,
	-1, 853,
	5, 1074,
	-2, 1741,
	-1, 923,
	417, 1474,
	-2, 1465,
	-1, 940,
	278, 1447,
	410, 1447,
	-2, 1446,
	-1, 1089,
	253, 889,
	-2, 714,
	-1, 1098,
	237, 1469,
	-2, 0,
	-1, 1141,
	1, 286,
	416, 286,
	418, 286,
	420, 286,
	421, 286,
	-2, 863,
	-1, 1144,
	4, 1740,
	10, 1740,
	11, 1740,
	13, 1740,
	14, 1740,
	15, 1740,
	16, 1740,
	17, 1740,
	18, 1740,
	20, 1740,
	21, 1740,
	22, 1740,
	23, 1740,
	25, 1740,
	28, 1740,
	30, 1740,
	32, 1740,
	35, 1740,
	36, 1740,
	37, 1740,
	38, 1740,
	39, 1740,
	40, 1740,
	41, 1740,
	42, 1740,
	43, 1740,
	44, 1740,
	46, 1740,
	47, 1740,
	48, 1740,
	49, 1740,
	50, 1740,
	51, 1740,
	54, 1740,
	55, 1740,
	56, 1740,
	58, 1740,
	59, 1740,
	60, 1740,
	63, 1740,
	64, 1740,
	65, 1740,
	66, 1740,
	67, 1740,
	68, 1740,
	69, 1740,
	70, 1740,
	71, 1740,
	72, 1740,
	74, 1740,
	75, 1740,
	76, 1740,
	77, 1740,
	79, 1740,
	80, 1740,
	81, 1740,
	82, 1740,
	90, 1740,
	91, 1740,
	92, 1740,
	93, 1740,
	94, 1740,
	95, 1740,
	96, 1740,
	97, 1740,
	99, 1740,
	101, 1740,
	103, 1740,
	106, 1740,
	107, 1740,
	109, 1740,
	110, 1740,
	114, 1740,
	115, 1740,
	116, 1740,
	117, 1740,
	118, 1740,
	119, 1740,
	120, 1740,
	121, 1740,
	122, 1740,
	123, 1740,
	124, 1740,
	128, 1740,
	129, 1740,
	130, 1740,
	131, 1740,
	132, 1740,
	133, 1740,
	134, 1740,
	135, 1740,
	136, 1740,
	137, 1740,
	138, 1740,
	140, 1740,
	143, 1740,
	144, 1740,
	146, 1740,
	147, 1740,
	149, 1740,
	151, 1740,
	152, 1740,
	153, 1740,
	154, 1740,
	155, 1740,
	156, 1740,
	157, 1740,
	158, 1740,
	159, 1740,
	160, 1740,
	161, 1740,
	162, 1740,
	163, 1740,
	164, 1740,
	166, 1740,
	167, 1740,
	168, 1740,
	170, 1740,
	171, 1740,
	172, 1740,
	173, 1740,
	174, 1740,
	175, 1740,
	176, 1740,
	177, 1740,
	178, 1740,
	180, 1740,
	182, 1740,
	183, 1740,
	184, 1740,
	185, 1740,
	186, 1740,
	187, 1740,
	188, 1740,
	189, 1740,
	190, 1740,
	191, 1740,
	192, 1740,
	193, 1740,
	194, 1740,
	195, 1740,
	197, 1740,
	198, 1740,
	200, 1740,
	201, 1740,
	202, 1740,
	203, 1740,
	204, 1740,
	206, 1740,
	207, 1740,
	210, 1740,
	211, 1740,
	212, 1740,
	215, 1740,
	216, 1740,
	217, 1740,
	218, 1740,
	219, 1740,
	220, 1740,
	221, 1740,
	222, 1740,
	223, 1740,
	224, 1740,
	227, 1740,
	229, 1740,
	230, 1740,
	231, 1740,
	232, 1740,
	233, 1740,
	235, 1740,
	236, 1740,
	239, 1740,
	240, 1740,
	241, 1740,
	243, 1740,
	244, 1740,
	246, 1740,
	248, 1740,
	249, 1740,
	250, 1740,
	251, 1740,
	252, 1740,
	253, 1740,
	254, 1740,
	255, 1740,
	257, 1740,
	258, 1740,
	259, 1740,
	260, 1740,
	261, 1740,
	263, 1740,
	264, 1740,
	265, 1740,
	266, 1740,
	267, 1740,
	268, 1740,
	269, 1740,
	270, 1740,
	272, 1740,
	273, 1740,
	274, 1740,
	275, 1740,
	276, 1740,
	277, 1740,
	278, 1740,
	279, 1740,
	280, 1740,
	281, 1740,
	282, 1740,
	283, 1740,
	284, 1740,
	286, 1740,
	287, 1740,
	288, 1740,
	289, 1740,
	290, 1740,
	291, 1740,
	292, 1740,
	293, 1740,
	294, 1740,
	295, 1740,
	296, 1740,
	297, 1740,
	298, 1740,
	299, 1740,
	300, 1740,
	301, 1740,
	303, 1740,
	304, 1740,
	305, 1740,
	306, 1740,
	307, 1740,
	308, 1740,
	309, 1740,
	310, 1740,
	311, 1740,
	313, 1740,
	314, 1740,
	315, 1740,
	316, 1740,
	317, 1740,
	318, 1740,
	319, 1740,
	320, 1740,
	321, 1740,
	323, 1740,
	324, 1740,
	325, 1740,
	326, 1740,
	327, 1740,
	328, 1740,
	329, 1740,
	330, 1740,
	331, 1740,
	332, 1740,
	333, 1740,
	334, 1740,
	336, 1740,
	337, 1740,
	339, 1740,
	340, 1740,
	341, 1740,
	342, 1740,
	343, 1740,
	344, 1740,
	345, 1740,
	346, 1740,
	347, 1740,
	348, 1740,
	350, 1740,
	351, 1740,
	352, 1740,
	353, 1740,
	356, 1740,
	357, 1740,
	358, 1740,
	359, 1740,
	361, 1740,
	362, 1740,
	364, 1740,
	365, 1740,
	368, 1740,
	369, 1740,
	370, 1740,
	371, 1740,
	373, 1740,
	375, 1740,
	376, 1740,
	377, 1740,
	378, 1740,
	379, 1740,
	380, 1740,
	383, 1740,
	384, 1740,
	389, 1740,
	390, 1740,
	391, 1740,
	392, 1740,
	393, 1740,
	394, 1740,
	395, 1740,
	396, 1740,
	398, 1740,
	399, 1740,
	400, 1740,
	401, 1740,
	402, 1740,
	403, 1740,
	405, 1740,
	406, 1740,
	407, 1740,
	408, 1740,
	409, 1740,
	410, 1740,
	411, 1740,
	412, 1740,
	413, 1740,
	415, 1740,
	418, 1740,
	419, 1740,
	422, 1740,
	423, 1740,
	-2, 0,
	-1, 1162,
	142, 1653,
	354, 1653,
	400, 1653,
	419, 1653,
	-2, 0,
	-1, 1191,
	142, 1682,
	354, 1682,
	400, 1682,
	419, 1682,
	-2, 0,
	-1, 1192,
	185, 799,
	263, 799,
	267, 799,
	-2, 406,
	-1, 1269,
	127, 903,
	205, 903,
	234, 903,
	-2, 861,
	-1, 1353,
	113, 865,
	127, 865,
	179, 865,
	205, 865,
	234, 865,
	242, 865,
	366, 865,
	-2, 1226,
	-1, 1401,
	418, 1342,
	-2, 0,
	-1, 1409,
	185, 799,
	263, 799,
	267, 799,
	-2, 794,
	-1, 1438,
	418, 1342,
	-2, 0,
	-1, 1446,
	113, 865,
	127, 865,
	179, 865,
	205, 865,
	234, 865,
	242, 865,
	366, 865,
	-2, 970,
	-1, 1647,
	185, 799,
	263, 799,
	267, 799,
	-2, 408,
	-1, 1755,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1122,
	-1, 1756,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1123,
	-1, 1757,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1124,
	-1, 1758,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1125,
	-1, 1759,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1126,
	-1, 1760,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1127,
	-1, 1761,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1128,
	-1, 1762,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1129,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1141,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1142,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	402, 0,
	-2, 1143,
	-1, 1779,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1148,
	-1, 1785,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1150,
	-1, 1787,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1154,
	-1, 1788,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1155,
	-1, 1789,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1156,
	-1, 1790,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1157,
	-1, 1869,
	5, 1039,
	142, 1353,
	417, 1474,
	-2, 1465,
	-1, 1870,
	142, 1354,
	-2, 1700,
	-1, 1871,
	142, 1355,
	-2, 1584,
	-1, 1872,
	142, 1356,
	-2, 1524,
	-1, 1873,
	142, 1357,
	-2, 1552,
	-1, 1874,
	142, 1358,
	-2, 1583,
	-1, 1875,
	142, 1359,
	-2, 1645,
	-1, 1943,
	418, 1342,
	-2, 0,
	-1, 1953,
	1, 971,
	79, 971,
	113, 971,
	127, 971,
	143, 971,
	148, 971,
	150, 971,
	170, 971,
	179, 971,
	188, 971,
	201, 971,
	205, 971,
	220, 971,
	234, 971,
	237, 971,
	242, 971,
	285, 971,
	287, 971,
	366, 971,
	374, 971,
	386, 971,
	387, 971,
	397, 971,
	416, 971,
	418, 971,
	420, 971,
	421, 971,
	422, 971,
	-2, 970,
	-1, 1955,
	417, 1451,
	-2, 1463,
	-1, 2037,
	418, 1412,
	422, 1412,
	-2, 1439,
	-1, 2159,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1149,
	-1, 2160,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1151,
	-1, 2165,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1152,
	-1, 2391,
	253, 889,
	-2, 714,
	-1, 2456,
	185, 799,
	263, 799,
	267, 799,
	-2, 405,
	-1, 2471,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1153,
	-1, 2476,
	183, 0,
	184, 0,
	227, 0,
	-2, 1171,
	-1, 2535,
	13, 0,
	14, 0,
	15, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1201,
	-1, 2536,
	13, 0,
	14, 0,
	15, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1202,
	-1, 2537,
	13, 0,
	14, 0,
	15, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1203,
	-1, 2541,
	13, 0,
	14, 0,
	15, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1207,
	-1, 2542,
	13, 0,
	14, 0,
	15, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1208,
	-1, 2543,
	13, 0,
	14, 0,
	15, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1209,
	-1, 2582,
	417, 1452,
	-2, 1464,
	-1, 2696,
	183, 0,
	184, 0,
	227, 0,
	-2, 1172,
	-1, 2699,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1175,
	-1, 2700,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1177,
	-1, 2841,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1176,
	-1, 2842,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1178,
	-1, 2851,
	183, 0,
	-2, 1210,
	-1, 2939,
	183, 0,
	-2, 1211,
	-1, 3037,
	38, 0,
	159, 0,
	204, 0,
	317, 0,
	395, 0,
	403, 0,
	-2, 1703,
}

const sqlPrivate = 57344

const sqlLast = 57821

var sqlAct = [...]int{

	774, 1425, 2794, 2631, 3036, 2879, 3045, 2063, 3099, 2999,
	3012, 3013, 3046, 3015, 3047, 2091, 2507, 2868, 2943, 3035,
	2071, 1742, 2809, 1131, 2649, 2832, 2153, 2644, 2406, 1073,
	2749, 2398, 750, 2591, 2764, 1047, 2654, 2592, 1577, 2593,
	2411, 209, 944, 1802, 2428, 2195, 491, 2193, 2430, 2299,
	2039, 2855, 1578, 491, 2060, 771, 1358, 1436, 2275, 2257,
	491, 716, 1417, 491, 2400, 1272, 491, 209, 2727, 491,
	491, 2035, 959, 2072, 1528, 1529, 491, 1537, 2020, 2038,
	1958, 1445, 1163, 1525, 491, 1134, 1967, 2286, 1948, 1534,
	1733, 2944, 540, 2558, 2256, 1814, 486, 2316, 1409, 1127,
	1361, 1095, 1475, 2149, 953, 1491, 1728, 2410, 1497, 73,
	2374, 1418, 937, 1454, 757, 1824, 1456, 1815, 724, 130,
	1799, 770, 908, 537, 1526, 1906, 1194, 1994, 575, 946,
	1842, 1389, 2021, 1836, 1995, 1124, 2036, 1387, 1142, 210,
	211, 1427, 732, 2065, 2042, 1947, 913, 1114, 1672, 890,
	1914, 1929, 1865, 136, 1348, 1273, 603, 1671, 623, 137,
	1544, 765, 1271, 578, 1051, 1950, 491, 491, 1111, 1467,
	888, 488, 1408, 1277, 2795, 617, 652, 2574, 205, 130,
	2575, 2092, 568, 715, 2180, 1552, 2064, 1552, 487, 1552,
	2022, 3126, 3120, 40, 720, 1923, 1923, 596, 491, 491,
	491, 949, 491, 491, 962, 962, 3119, 44, 1437, 720,
	1923, 2446, 471, 491, 491, 1564, 3096, 3093, 814, 3071,
	2763, 1506, 2417, 2763, 1550, 534, 3065, 2469, 3064, 474,
	1923, 588, 1923, 3061, 2418, 567, 763, 3062, 471, 3058,
	3055, 2022, 3033, 3059, 1506, 590, 1506, 3032, 721, 3031,
	3030, 1506, 2994, 1564, 1564, 474, 2102, 2981, 2974, 2972,
	1500, 1506, 2763, 2763, 569, 1514, 2561, 2970, 2941, 2387,
	1937, 2763, 2102, 59, 571, 2925, 1072, 1923, 60, 2670,
	2995, 2229, 2230, 2915, 708, 2068, 942, 2763, 2910, 730,
	707, 2908, 1506, 130, 2898, 2763, 940, 740, 1506, 2897,
	2890, 2889, 956, 1506, 1506, 2763, 2861, 2928, 2843, 2789,
	1506, 63, 2102, 1923, 2785, 2762, 725, 1916, 1923, 2763,
	930, 934, 939, 2698, 1564, 2229, 2230, 2102, 2247, 2248,
	2249, 891, 891, 1839, 2668, 2660, 2570, 892, 2661, 2661,
	2571, 2564, 2485, 2695, 2480, 1923, 1506, 1816, 1923, 1177,
	2436, 2272, 1053, 1052, 2379, 1923, 2224, 2223, 2217, 2094,
	1923, 1923, 2218, 1288, 1289, 2216, 2186, 2120, 1166, 1923,
	1506, 1923, 2187, 2101, 1923, 2088, 2031, 2102, 1922, 1923,
	1506, 1568, 1923, 2244, 471, 1569, 2561, 1915, 1291, 2194,
	1650, 1840, 911, 1506, 894, 2670, 895, 2010, 171, 1066,
	1060, 474, 1956, 2379, 2152, 2131, 1505, 1413, 2235, 1819,
	909, 64, 1050, 1290, 174, 1161, 2419, 1553, 1160, 1553,
	171, 1553, 1159, 1158, 1449, 1157, 1156, 1155, 1154, 1153,
	1152, 1071, 1151, 1150, 173, 2420, 1167, 1149, 139, 66,
	1669, 67, 1148, 1147, 1146, 1145, 896, 893, 714, 713,
	712, 711, 2235, 1841, 1838, 710, 173, 706, 705, 171,
	704, 1288, 1289, 703, 702, 701, 700, 2462, 699, 698,
	570, 697, 696, 110, 692, 172, 691, 690, 650, 1054,
	649, 1057, 2245, 1061, 165, 1067, 1291, 648, 647, 171,
	1296, 1167, 166, 646, 645, 173, 644, 172, 2250, 643,
	491, 491, 642, 491, 949, 949, 491, 641, 640, 491,
	639, 1290, 491, 138, 2417, 1318, 1319, 1320, 491, 638,
	637, 636, 635, 634, 633, 173, 2245, 632, 491, 491,
	491, 491, 491, 949, 949, 138, 172, 631, 2742, 1843,
	949, 630, 629, 628, 627, 165, 612, 2229, 2230, 1506,
	2247, 2248, 2249, 166, 1065, 611, 1560, 1135, 1551, 610,
	1712, 609, 608, 146, 1311, 2246, 172, 607, 39, 525,
	524, 491, 497, 496, 138, 165, 171, 1359, 495, 40,
	141, 2229, 2230, 166, 491, 477, 476, 1169, 1296, 1089,
	1092, 475, 195, 44, 1174, 1946, 1359, 1915, 905, 1088,
	194, 193, 192, 191, 2067, 2244, 491, 46, 143, 2246,
	190, 189, 173, 1100, 568, 1085, 188, 491, 723, 45,
	187, 51, 186, 732, 185, 40, 184, 732, 183, 1167,
	182, 1837, 181, 180, 179, 178, 1128, 177, 176, 44,
	1113, 175, 52, 2703, 2662, 2579, 54, 1312, 2312, 721,
	58, 2192, 2182, 172, 144, 2107, 2141, 949, 2032, 59,
	72, 2025, 165, 1444, 60, 61, 1857, 567, 1855, 1143,
	166, 2229, 2230, 1675, 2235, 1453, 1118, 1121, 2239, 2231,
	2232, 2233, 2234, 2236, 2237, 1284, 2229, 2230, 62, 1365,
	3052, 138, 2229, 2230, 491, 1853, 569, 63, 1208, 171,
	171, 1851, 1849, 1075, 1056, 59, 571, 3034, 2235, 3017,
	60, 3006, 2935, 2241, 2242, 2243, 2911, 1192, 2830, 2931,
	2240, 2238, 2239, 2231, 2232, 2233, 2234, 2236, 2237, 2244,
	2929, 2878, 2817, 1511, 2726, 173, 173, 1341, 1342, 1343,
	1344, 1345, 1216, 63, 2725, 2719, 2715, 2714, 2245, 2713,
	1354, 2709, 2708, 1269, 2707, 2706, 1288, 1289, 1364, 1299,
	1300, 1292, 1293, 1294, 1295, 1297, 1298, 2681, 2679, 1270,
	1202, 2382, 2578, 2555, 1206, 2554, 172, 172, 2553, 2493,
	2378, 1291, 2245, 2311, 2302, 165, 165, 2268, 2255, 2228,
	2225, 2222, 1189, 166, 166, 2221, 2219, 64, 2235, 2200,
	2199, 1288, 1289, 2181, 65, 1953, 1290, 1284, 1810, 1574,
	904, 1369, 1509, 2235, 138, 138, 1268, 1283, 1362, 2235,
	1351, 3124, 3107, 75, 139, 66, 1291, 67, 3106, 68,
	1209, 2246, 1074, 145, 2509, 3025, 3020, 2976, 69, 2967,
	2966, 1670, 1996, 64, 2962, 171, 2961, 2955, 772, 2952,
	2148, 1290, 2927, 2926, 1804, 2874, 83, 2853, 721, 110,
	2804, 1294, 1295, 1297, 1298, 2246, 2799, 2797, 142, 2784,
	139, 66, 2245, 67, 2768, 2724, 2671, 2647, 708, 2638,
	2637, 173, 2635, 1296, 707, 491, 2612, 2611, 2601, 2600,
	491, 171, 1280, 1281, 2566, 2475, 2442, 2363, 2347, 1419,
	1419, 1419, 570, 1285, 115, 110, 2326, 2325, 1318, 1319,
	1320, 2271, 2816, 2209, 140, 2208, 2205, 491, 171, 1352,
	2440, 1415, 172, 2174, 1390, 1395, 2109, 173, 1296, 1943,
	1934, 165, 1921, 1811, 1847, 2241, 2242, 2243, 1520, 166,
	1377, 1376, 2240, 2238, 2239, 2231, 2232, 2233, 2234, 2236,
	2237, 1375, 1374, 1373, 173, 2246, 1438, 1311, 1416, 1407,
	138, 1421, 1422, 4, 1434, 1406, 1391, 1385, 172, 1401,
	1388, 1288, 1289, 1400, 1398, 1399, 1397, 165, 1396, 2231,
	2232, 2233, 2234, 2236, 2237, 166, 1393, 2104, 2292, 1392,
	1383, 1382, 1381, 1443, 1380, 172, 1291, 1379, 1378, 1366,
	1351, 1188, 1172, 1139, 165, 1362, 138, 2946, 2829, 2701,
	2678, 2573, 166, 2569, 2185, 1935, 2229, 2230, 2438, 1349,
	1669, 1290, 917, 2326, 721, 855, 130, 1450, 1669, 2401,
	1205, 1435, 2822, 138, 2119, 2673, 1380, 2672, 2576, 766,
	1312, 1412, 2022, 1444, 2904, 2367, 1355, 1404, 1410, 1839,
	949, 491, 2362, 1405, 1183, 891, 1266, 962, 1669, 1998,
	1414, 1447, 1474, 2358, 2346, 2263, 2240, 2238, 2239, 2231,
	2232, 2233, 2234, 2236, 2237, 491, 962, 491, 491, 2262,
	2118, 2261, 1856, 2260, 1854, 209, 2233, 2234, 2236, 2237,
	2231, 2232, 2233, 2234, 2236, 2237, 1356, 1402, 2158, 491,
	491, 2610, 1643, 1403, 1201, 1462, 491, 1840, 491, 1521,
	491, 1852, 2932, 1656, 491, 1380, 886, 1850, 1848, 1371,
	2092, 1530, 2448, 2930, 2357, 1533, 1493, 1487, 2856, 1440,
	2064, 1498, 3053, 911, 2511, 1503, 2190, 1825, 1259, 1386,
	3063, 3060, 2413, 2587, 1213, 3009, 2877, 1439, 1575, 2645,
	887, 909, 2095, 1300, 1292, 1293, 1294, 1295, 1297, 1298,
	200, 533, 504, 491, 949, 3086, 209, 491, 491, 1841,
	1838, 2776, 880, 1257, 949, 2121, 1541, 209, 491, 882,
	878, 491, 491, 514, 3054, 2458, 876, 491, 3087, 1539,
	1053, 1052, 1517, 1697, 1245, 3123, 1244, 1633, 873, 1292,
	1293, 1294, 1295, 1297, 1298, 732, 732, 2980, 2903, 962,
	2902, 719, 2900, 2899, 2625, 1504, 2620, 1258, 2619, 491,
	1960, 2584, 471, 1368, 491, 903, 2583, 2793, 1113, 209,
	491, 2615, 491, 2204, 491, 2203, 491, 2202, 491, 474,
	2201, 2161, 1203, 2093, 1468, 532, 503, 2050, 491, 1570,
	491, 1424, 2015, 515, 2009, 1843, 471, 2005, 491, 491,
	491, 764, 1986, 1524, 1786, 1411, 1049, 1657, 1901, 1900,
	1546, 1899, 1898, 474, 1543, 1744, 1717, 718, 1722, 1548,
	2061, 1211, 1709, 1179, 1729, 1637, 2934, 491, 1204, 2461,
	1647, 962, 2030, 2019, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 2439,
	1785, 1573, 1787, 1788, 1789, 1790, 1668, 471, 1189, 1715,
	720, 1734, 1741, 1555, 1571, 1644, 1557, 1837, 471, 1559,
	2979, 1813, 1077, 1562, 474, 1634, 1088, 1243, 1710, 1354,
	1704, 1677, 1673, 1661, 1457, 474, 962, 1458, 2630, 1979,
	2171, 2105, 1706, 1180, 1298, 1660, 1659, 1679, 1669, 1666,
	1858, 1859, 1860, 1861, 1862, 694, 2881, 584, 1960, 602,
	3028, 2169, 1978, 601, 1547, 2603, 1843, 3078, 523, 1959,
	471, 1885, 1801, 1896, 2150, 2151, 1801, 1688, 1902, 1907,
	602, 2408, 491, 1825, 491, 1682, 1464, 474, 1287, 2237,
	518, 1670, 1996, 1469, 1182, 3109, 1552, 2409, 1714, 1670,
	1996, 708, 1572, 1713, 708, 708, 1940, 1724, 962, 2002,
	1725, 1726, 2366, 1635, 491, 1732, 491, 1864, 1265, 1459,
	1466, 517, 516, 491, 962, 1708, 3086, 1187, 491, 1670,
	1996, 721, 1461, 1822, 717, 1256, 491, 721, 1240, 1663,
	1288, 1289, 1470, 1471, 491, 2408, 2354, 1808, 1288, 1289,
	1820, 2349, 1806, 2166, 2457, 1486, 491, 1567, 3102, 949,
	2229, 2230, 1711, 1489, 2167, 1291, 2450, 1965, 2172, 3049,
	491, 962, 1812, 1291, 1472, 2958, 491, 491, 1961, 1463,
	2338, 2026, 2613, 2028, 2459, 1241, 1212, 2503, 1936, 1897,
	1290, 491, 1944, 1945, 491, 2340, 508, 874, 1290, 1989,
	1969, 884, 1219, 734, 883, 874, 1645, 1450, 1384, 1973,
	1975, 875, 2621, 3077, 2337, 2342, 1876, 1696, 491, 501,
	491, 1603, 491, 874, 2052, 491, 1941, 491, 721, 491,
	1965, 491, 491, 1911, 491, 949, 949, 949, 1910, 2453,
	949, 1927, 1919, 1920, 2007, 2006, 491, 1988, 1664, 891,
	1464, 2838, 940, 1931, 1932, 2341, 2991, 2075, 1981, 2086,
	2087, 1952, 2848, 196, 1464, 1447, 1987, 1296, 2003, 2016,
	2760, 2604, 1964, 1843, 2906, 1296, 1346, 3050, 2004, 1997,
	1999, 2000, 2001, 2992, 1972, 1965, 507, 2235, 1818, 1181,
	2344, 1951, 1318, 1319, 1320, 2757, 2168, 2207, 1076, 1988,
	1318, 1319, 1320, 1930, 2170, 720, 2674, 491, 2683, 1178,
	960, 1048, 2882, 3048, 1809, 1053, 2023, 911, 1253, 2110,
	2085, 201, 531, 519, 1490, 1355, 2452, 3110, 1553, 3100,
	2082, 2690, 3085, 1888, 3076, 909, 2758, 911, 2084, 2097,
	2449, 1311, 2500, 3083, 3051, 1648, 962, 471, 491, 1311,
	1957, 1227, 2808, 201, 2806, 909, 491, 130, 491, 2058,
	2070, 2245, 2089, 1457, 474, 130, 1458, 2083, 1893, 1143,
	520, 2056, 2079, 2163, 2080, 1356, 2081, 1800, 2090, 491,
	491, 491, 2096, 491, 1829, 2077, 2114, 2106, 2115, 1460,
	3101, 695, 504, 583, 202, 530, 1254, 1523, 1681, 1783,
	1286, 1863, 491, 1423, 2501, 1971, 521, 502, 522, 2108,
	1868, 1868, 2451, 1176, 1879, 1881, 1165, 1886, 494, 1391,
	3103, 1398, 1276, 2839, 1312, 1909, 202, 682, 2124, 917,
	500, 2371, 1312, 917, 1913, 2113, 2111, 1388, 1275, 1186,
	2126, 2017, 499, 1193, 2246, 1807, 2122, 729, 1459, 1670,
	1667, 1502, 2159, 2160, 2722, 2892, 2375, 1797, 2165, 2049,
	1255, 1461, 2891, 2753, 1220, 2872, 2754, 2772, 2949, 2586,
	2127, 509, 2322, 3115, 2834, 2318, 503, 2178, 1795, 2143,
	2059, 204, 2125, 130, 2057, 1542, 505, 130, 2138, 491,
	1843, 2184, 2140, 1532, 1531, 203, 1527, 2191, 2164, 1522,
	2756, 1198, 2196, 1346, 2544, 2145, 2300, 2499, 1463, 2759,
	1970, 1221, 1720, 204, 1218, 683, 1274, 1990, 533, 2210,
	1781, 1784, 3000, 1926, 2147, 1701, 1651, 203, 1198, 2650,
	2810, 2873, 199, 528, 1678, 1301, 1299, 1300, 1292, 1293,
	1294, 1295, 1297, 1298, 1275, 1276, 1292, 1293, 1294, 1295,
	1297, 1298, 2328, 2327, 1655, 2240, 2238, 2239, 2231, 2232,
	2233, 2234, 2236, 2237, 199, 1780, 2833, 197, 529, 1457,
	1791, 2156, 1458, 2775, 2162, 1907, 1907, 1907, 1792, 1199,
	2774, 1793, 2723, 1200, 721, 1798, 1228, 1419, 962, 2301,
	594, 2034, 2273, 1464, 2771, 2283, 1519, 2280, 2281, 197,
	1721, 200, 532, 3114, 491, 2755, 1199, 491, 2289, 2189,
	1200, 198, 527, 1653, 1925, 491, 491, 962, 1924, 1455,
	491, 2135, 1274, 2136, 718, 2545, 1198, 1654, 491, 491,
	491, 2033, 2546, 200, 491, 2632, 1430, 491, 2380, 1099,
	1991, 1992, 684, 198, 491, 491, 491, 491, 491, 1098,
	2309, 2339, 3090, 2370, 1459, 2796, 2835, 491, 1476, 587,
	2728, 2294, 1110, 1433, 491, 2297, 2559, 1461, 2315, 1846,
	2805, 566, 36, 1965, 3092, 1480, 491, 949, 1782, 2376,
	491, 1928, 3, 2329, 2319, 2332, 962, 2295, 2323, 2870,
	491, 1108, 2291, 573, 1431, 2852, 962, 2274, 1263, 2265,
	2266, 2267, 1250, 962, 1199, 2310, 2721, 2773, 1200, 565,
	35, 2629, 2258, 1794, 1463, 491, 1477, 491, 1460, 491,
	2871, 1796, 491, 949, 949, 949, 1210, 491, 682, 491,
	1695, 2303, 872, 491, 2324, 685, 2405, 2474, 491, 1248,
	491, 2427, 2330, 2313, 2334, 2335, 2220, 491, 729, 1238,
	2173, 2112, 2296, 1236, 2183, 2014, 1234, 1985, 2348, 1513,
	2305, 2306, 2356, 491, 491, 2343, 949, 1893, 1893, 2415,
	478, 1264, 1088, 686, 592, 593, 1173, 2412, 2350, 2404,
	1432, 1481, 2259, 491, 2359, 2308, 2412, 1232, 2355, 2360,
	732, 732, 2365, 2139, 2384, 2403, 2351, 2444, 2353, 1464,
	2352, 1462, 1230, 732, 2381, 911, 2134, 2116, 2390, 2391,
	2392, 1698, 491, 911, 911, 2377, 683, 911, 1088, 1224,
	2466, 1106, 2177, 909, 1729, 2437, 1462, 491, 758, 1356,
	2470, 909, 909, 2471, 2389, 909, 2443, 2402, 1262, 1482,
	1483, 1109, 1249, 585, 586, 2476, 36, 721, 1478, 2197,
	2198, 2435, 2482, 962, 2421, 1498, 1685, 928, 1893, 1893,
	1893, 1498, 2489, 962, 561, 28, 2283, 1694, 1602, 472,
	1107, 1636, 572, 1372, 489, 1479, 877, 879, 491, 1247,
	1845, 510, 1583, 2477, 35, 2516, 2517, 2518, 536, 1237,
	2456, 579, 2520, 1235, 536, 472, 1233, 579, 599, 2522,
	564, 32, 563, 79, 606, 2414, 3044, 562, 78, 559,
	23, 1665, 626, 2627, 2495, 2496, 2497, 560, 24, 1501,
	2465, 1909, 1909, 1909, 1460, 2512, 2270, 1231, 130, 2467,
	2550, 2551, 2997, 2463, 1734, 2515, 2746, 2454, 2455, 2282,
	558, 30, 1229, 684, 2608, 2519, 2481, 917, 2606, 2585,
	2460, 1484, 1734, 2524, 479, 480, 2364, 2397, 2487, 1223,
	2567, 1105, 2395, 557, 21, 2062, 491, 917, 2054, 2508,
	555, 20, 2514, 2053, 2422, 2423, 2424, 2051, 2425, 2426,
	2048, 491, 1566, 962, 1602, 1602, 2548, 2552, 1565, 1563,
	2523, 2521, 556, 19, 536, 536, 1561, 2590, 1583, 1583,
	545, 15, 924, 2502, 2504, 2505, 546, 16, 2580, 1558,
	1556, 2277, 554, 57, 1554, 553, 56, 1512, 1510, 2284,
	2285, 1499, 2549, 2290, 2560, 1488, 489, 489, 489, 2433,
	954, 489, 482, 481, 2557, 492, 685, 1485, 1473, 28,
	1465, 472, 1055, 2565, 2562, 2563, 2488, 2399, 2445, 2616,
	491, 491, 2598, 491, 2577, 2628, 544, 55, 491, 1084,
	130, 2622, 2920, 552, 12, 2623, 962, 2828, 962, 2581,
	2626, 949, 1278, 3087, 686, 32, 208, 79, 483, 484,
	1419, 2589, 78, 1494, 23, 2154, 2639, 2827, 491, 1965,
	1674, 2666, 24, 1164, 2663, 2614, 543, 50, 550, 47,
	551, 48, 208, 1960, 1580, 1960, 2656, 2922, 1977, 2659,
	2791, 2572, 2117, 2652, 1976, 30, 1974, 491, 2597, 2960,
	962, 491, 491, 962, 491, 2018, 1988, 2075, 2634, 2633,
	1893, 1893, 491, 900, 2651, 2013, 2643, 2641, 21, 2655,
	962, 2657, 2636, 2642, 2008, 20, 2696, 2665, 2653, 1984,
	2699, 2700, 1279, 574, 2155, 901, 1641, 1642, 2687, 2765,
	1222, 2664, 2702, 1507, 2937, 2692, 2705, 19, 2729, 2680,
	1993, 1980, 1602, 1282, 2011, 15, 1982, 2996, 911, 2802,
	491, 16, 1515, 2712, 2697, 2069, 1583, 57, 2675, 2676,
	56, 2055, 2684, 2047, 542, 49, 909, 1912, 1646, 1893,
	1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893,
	1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893, 1464, 1893,
	1580, 1580, 595, 2688, 727, 2685, 682, 2607, 1576, 2609,
	3098, 55, 2434, 2599, 3113, 902, 950, 491, 12, 963,
	963, 549, 7, 1359, 1496, 2677, 729, 962, 491, 2506,
	962, 2720, 2441, 2617, 491, 491, 491, 548, 6, 2129,
	1288, 1289, 1495, 1288, 1289, 2617, 2130, 2767, 1878, 2617,
	1835, 50, 491, 47, 2617, 48, 1215, 491, 2704, 491,
	728, 1214, 491, 491, 491, 491, 491, 2556, 1291, 1492,
	491, 491, 949, 2743, 2736, 1965, 962, 2734, 2735, 2766,
	949, 2731, 2732, 2498, 2769, 1369, 2745, 911, 491, 491,
	1290, 1470, 1471, 1290, 683, 1676, 2777, 547, 38, 541,
	37, 1367, 949, 2792, 2782, 909, 2598, 2803, 489, 1083,
	2740, 489, 491, 2388, 489, 2820, 2646, 954, 2648, 2798,
	1103, 491, 491, 949, 949, 1059, 489, 1064, 1965, 1070,
	2667, 2807, 2744, 2814, 2229, 2230, 489, 489, 489, 489,
	954, 2598, 1288, 1289, 2812, 2618, 2841, 2842, 2837, 49,
	1261, 2412, 2819, 2598, 962, 1260, 2778, 2788, 2813, 2404,
	2801, 2624, 2682, 2783, 2568, 2811, 2824, 1088, 2850, 2823,
	2840, 2786, 2597, 2739, 1246, 2821, 1649, 1743, 1242, 626,
	2857, 2129, 2128, 2787, 1252, 1239, 1225, 1251, 1580, 1426,
	2693, 491, 489, 962, 1185, 885, 7, 491, 693, 491,
	2880, 962, 491, 2846, 526, 3008, 2959, 2597, 2825, 2826,
	491, 680, 6, 2854, 1184, 917, 962, 2229, 2230, 2597,
	2336, 684, 2867, 917, 917, 626, 2893, 917, 1684, 1226,
	911, 1170, 1686, 2859, 2860, 2293, 1965, 2885, 1175, 1933,
	2990, 2884, 2710, 2886, 2206, 2863, 2942, 2865, 909, 2847,
	1844, 2883, 1826, 1430, 1370, 53, 2594, 491, 753, 491,
	1723, 2747, 949, 2588, 2041, 2040, 2862, 491, 965, 2598,
	1658, 775, 38, 1867, 37, 1735, 2905, 777, 1581, 2894,
	1433, 2907, 2733, 2909, 780, 779, 778, 2599, 2913, 962,
	1582, 1394, 1519, 2277, 531, 2919, 2866, 2737, 1428, 1426,
	776, 1579, 489, 2598, 2918, 2598, 1140, 491, 2923, 2073,
	2598, 1431, 726, 491, 685, 670, 2924, 2770, 1662, 950,
	950, 491, 2599, 1805, 2933, 2917, 2950, 2779, 2780, 2953,
	1429, 1823, 2188, 2954, 2599, 2597, 2864, 2655, 2948, 1363,
	1955, 745, 2940, 2404, 2235, 1821, 2790, 2947, 950, 950,
	491, 491, 686, 2800, 1171, 950, 744, 491, 2298, 2936,
	2407, 2815, 1719, 1430, 2971, 2973, 2146, 530, 949, 2597,
	1716, 2597, 2956, 491, 2605, 506, 2597, 949, 949, 2226,
	1138, 491, 1894, 491, 1889, 491, 2957, 2968, 1887, 2963,
	1433, 1883, 2975, 1267, 2978, 1347, 2074, 1432, 1207, 2965,
	2984, 2985, 2983, 491, 2986, 2416, 491, 3003, 1428, 491,
	2977, 962, 2103, 1727, 899, 898, 897, 3014, 2245, 3011,
	2836, 1431, 1652, 498, 3016, 3021, 3023, 854, 3022, 2123,
	3024, 1340, 3010, 3005, 749, 2278, 2730, 2383, 1081, 3029,
	1429, 1602, 1339, 3040, 3040, 881, 491, 2951, 2964, 1197,
	2599, 3027, 2895, 2896, 1196, 1583, 1195, 2288, 2945, 2321,
	3026, 3057, 3041, 3043, 3042, 3108, 2602, 170, 167, 1893,
	2982, 491, 950, 169, 3067, 168, 3068, 2369, 3069, 491,
	2617, 82, 2598, 34, 2599, 33, 2599, 3056, 109, 3040,
	533, 2599, 3075, 606, 108, 491, 3073, 3074, 536, 3072,
	107, 2246, 106, 105, 104, 528, 1893, 1432, 103, 3070,
	3084, 3082, 3081, 508, 102, 101, 3088, 100, 2075, 1442,
	3089, 3094, 3095, 924, 3016, 489, 3091, 2858, 99, 98,
	3097, 2598, 2921, 97, 96, 95, 501, 94, 93, 92,
	529, 91, 90, 89, 88, 3105, 3104, 87, 2597, 86,
	3040, 85, 3111, 3112, 84, 622, 619, 81, 80, 31,
	26, 113, 2132, 114, 25, 3118, 2888, 77, 76, 29,
	18, 3121, 3122, 11, 532, 17, 22, 135, 1602, 3127,
	134, 133, 2901, 132, 527, 131, 14, 13, 917, 128,
	129, 2617, 1583, 127, 2287, 126, 125, 2597, 124, 123,
	1893, 10, 8, 507, 112, 9, 2831, 2447, 70, 71,
	27, 43, 42, 2238, 2239, 2231, 2232, 2233, 2234, 2236,
	2237, 915, 41, 111, 161, 917, 160, 159, 951, 158,
	154, 964, 964, 157, 155, 156, 153, 122, 163, 162,
	151, 148, 150, 152, 149, 917, 2987, 147, 2988, 164,
	1602, 121, 120, 119, 118, 117, 116, 917, 5, 472,
	2, 917, 1, 2599, 1583, 0, 917, 485, 0, 0,
	0, 3004, 0, 0, 0, 0, 0, 1580, 0, 0,
	0, 0, 0, 1055, 0, 489, 1518, 1602, 1602, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 0, 0,
	2760, 1583, 1583, 0, 0, 1602, 1602, 1538, 1538, 504,
	0, 0, 2599, 0, 489, 0, 489, 917, 489, 1583,
	1583, 0, 536, 0, 502, 2757, 568, 0, 2750, 0,
	0, 0, 0, 0, 0, 2993, 3066, 40, 0, 0,
	1602, 2748, 0, 0, 0, 0, 2752, 500, 0, 0,
	0, 44, 0, 0, 1583, 0, 0, 0, 0, 499,
	0, 0, 0, 0, 3018, 3019, 2758, 0, 0, 0,
	0, 626, 0, 0, 472, 1055, 579, 0, 0, 567,
	0, 0, 0, 1889, 1889, 472, 1055, 0, 509, 954,
	489, 0, 0, 503, 2751, 626, 0, 0, 0, 0,
	0, 0, 0, 505, 2279, 0, 0, 0, 569, 0,
	0, 0, 0, 0, 1580, 0, 0, 59, 571, 932,
	0, 0, 60, 0, 958, 0, 0, 626, 0, 0,
	0, 0, 489, 2307, 0, 0, 0, 472, 489, 0,
	489, 0, 489, 0, 489, 0, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 1699, 0, 1700, 0,
	917, 0, 0, 0, 0, 950, 489, 489, 489, 0,
	0, 0, 963, 0, 1889, 1889, 1889, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1580, 0, 0, 0,
	0, 963, 0, 2753, 0, 626, 2754, 0, 0, 917,
	208, 0, 0, 0, 3116, 3117, 0, 0, 0, 0,
	0, 0, 2373, 2175, 2176, 0, 0, 0, 0, 2373,
	0, 0, 3125, 1580, 1580, 0, 0, 0, 0, 0,
	2756, 951, 951, 0, 917, 0, 0, 0, 0, 2759,
	0, 1580, 1580, 0, 0, 0, 917, 0, 0, 0,
	0, 1602, 0, 0, 0, 64, 0, 0, 0, 0,
	951, 951, 0, 0, 0, 1583, 0, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 1580, 0, 0, 950,
	0, 208, 139, 66, 0, 67, 0, 0, 0, 950,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 2252, 2253, 2254, 0, 0, 0,
	0, 2137, 0, 0, 570, 0, 0, 110, 0, 0,
	606, 0, 536, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2755, 0, 924, 0, 173,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 536, 0, 536, 0, 0, 924, 0, 0,
	0, 489, 917, 0, 0, 0, 1968, 0, 0, 2484,
	0, 0, 0, 0, 489, 0, 0, 0, 0, 2491,
	172, 0, 489, 0, 951, 0, 0, 0, 0, 165,
	0, 0, 917, 0, 489, 0, 917, 166, 917, 0,
	0, 0, 0, 917, 0, 0, 963, 0, 489, 0,
	0, 0, 1983, 0, 472, 2024, 0, 0, 138, 2229,
	2230, 1079, 2247, 2248, 2249, 0, 0, 1097, 0, 2037,
	0, 0, 1055, 0, 0, 0, 0, 2694, 2012, 0,
	0, 0, 0, 0, 0, 0, 1889, 1889, 0, 1117,
	1117, 1117, 958, 0, 0, 2027, 1968, 2029, 536, 0,
	489, 0, 0, 489, 0, 489, 0, 489, 0, 489,
	489, 0, 954, 0, 0, 0, 0, 2244, 0, 0,
	0, 963, 0, 0, 1968, 0, 0, 1580, 0, 2066,
	0, 2066, 0, 0, 0, 0, 0, 0, 0, 2582,
	1602, 0, 0, 917, 0, 1168, 0, 0, 0, 0,
	0, 0, 0, 0, 1583, 1889, 1889, 1889, 1889, 1889,
	1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889,
	1889, 1889, 1889, 1889, 0, 1889, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 2235, 0, 0, 0,
	0, 0, 1602, 963, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1583, 0, 0, 963,
	0, 0, 0, 0, 0, 917, 2472, 2473, 0, 0,
	0, 0, 0, 0, 0, 0, 489, 0, 0, 0,
	0, 0, 2250, 0, 1055, 0, 1055, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 489, 489, 489,
	2245, 489, 0, 0, 917, 0, 0, 0, 0, 1602,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 1048,
	489, 0, 0, 1583, 0, 2525, 2526, 2527, 2528, 2529,
	2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539,
	2540, 2541, 2542, 2543, 0, 2547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	950, 950, 950, 0, 0, 950, 2229, 2230, 0, 2247,
	2248, 2249, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2246, 2479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 0, 0,
	0, 0, 0, 0, 0, 0, 1580, 0, 0, 0,
	0, 0, 0, 0, 2244, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2741, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 951, 0, 0,
	0, 0, 0, 0, 964, 0, 0, 0, 1580, 0,
	0, 963, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 2241, 2242, 2243,
	0, 0, 0, 2235, 2240, 2238, 2239, 2231, 2232, 2233,
	2234, 2236, 2237, 0, 0, 924, 0, 0, 538, 0,
	0, 0, 0, 924, 924, 0, 0, 924, 1451, 0,
	0, 0, 536, 0, 0, 536, 0, 0, 754, 74,
	0, 568, 0, 536, 536, 0, 0, 0, 536, 2250,
	0, 0, 40, 0, 0, 1580, 489, 1968, 2317, 0,
	0, 0, 1968, 0, 0, 2317, 44, 0, 0, 0,
	0, 0, 1968, 2317, 1968, 2317, 2317, 2245, 0, 0,
	2844, 951, 0, 0, 0, 489, 0, 0, 0, 0,
	0, 951, 1518, 0, 567, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 489, 0, 1288, 1289, 954, 0,
	0, 0, 0, 0, 0, 0, 0, 2345, 489, 2844,
	0, 0, 0, 569, 0, 0, 964, 1743, 0, 0,
	0, 1291, 59, 571, 0, 0, 0, 60, 0, 0,
	0, 0, 1743, 1538, 0, 1538, 2361, 489, 0, 0,
	489, 0, 0, 0, 0, 489, 1290, 489, 0, 0,
	2246, 954, 0, 0, 1310, 0, 1968, 0, 536, 709,
	63, 0, 0, 0, 0, 1968, 0, 722, 0, 0,
	0, 0, 2385, 0, 0, 0, 0, 0, 1516, 0,
	2393, 2431, 1055, 0, 0, 1889, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 964, 0,
	0, 1055, 912, 74, 0, 1048, 0, 0, 0, 1545,
	0, 1545, 0, 963, 1313, 1314, 1315, 1316, 0, 0,
	0, 0, 1889, 1296, 0, 0, 0, 0, 0, 0,
	2464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 489, 0, 0, 1318, 1319,
	1320, 0, 0, 0, 2241, 2242, 2243, 0, 0, 0,
	64, 2240, 2238, 2239, 2231, 2232, 2233, 2234, 2236, 2237,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1639, 0, 0, 0, 139, 66, 0,
	67, 0, 0, 0, 0, 0, 2510, 1311, 0, 0,
	0, 0, 950, 0, 0, 0, 0, 0, 171, 0,
	0, 963, 0, 0, 0, 2851, 1889, 0, 0, 570,
	0, 963, 110, 0, 0, 1683, 0, 1743, 963, 0,
	0, 1689, 0, 1690, 0, 1691, 0, 1692, 0, 1693,
	0, 0, 0, 0, 173, 964, 0, 0, 950, 950,
	950, 0, 2875, 0, 0, 0, 0, 568, 0, 1702,
	1097, 964, 0, 1317, 0, 0, 0, 0, 40, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 924, 0,
	1312, 0, 44, 0, 536, 172, 0, 0, 0, 0,
	0, 950, 0, 0, 165, 0, 951, 0, 0, 536,
	0, 0, 166, 0, 0, 0, 0, 0, 964, 0,
	567, 0, 0, 0, 0, 2596, 0, 0, 0, 0,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 569,
	0, 0, 0, 0, 0, 0, 2939, 1442, 59, 571,
	0, 1442, 0, 60, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1968, 1538,
	0, 1538, 951, 951, 951, 0, 489, 951, 963, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 963, 0,
	0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298,
	0, 0, 0, 0, 0, 0, 1968, 924, 0, 74,
	0, 74, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1055, 0, 0, 0, 954,
	489, 0, 489, 0, 0, 0, 0, 0, 0, 0,
	489, 0, 2669, 0, 1954, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 722, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2711, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 139, 66, 74, 67, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 570, 0, 0, 110, 0,
	924, 0, 0, 2078, 0, 1055, 1117, 0, 1117, 0,
	1117, 0, 958, 958, 0, 0, 536, 0, 0, 0,
	173, 0, 1968, 2317, 1968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2596,
	1055, 963, 0, 963, 0, 1968, 950, 2317, 0, 0,
	1055, 1055, 489, 1968, 2317, 0, 0, 0, 489, 489,
	0, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 2596, 0, 1055, 2037, 166, 0,
	0, 0, 0, 0, 0, 0, 2596, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 963, 138,
	1968, 0, 0, 709, 0, 0, 0, 0, 0, 2431,
	2431, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1350, 0, 1353, 2098, 2133,
	0, 0, 0, 0, 1360, 2818, 0, 0, 0, 40,
	0, 2229, 2230, 0, 2247, 2248, 2249, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 2478,
	2142, 958, 2144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 964, 0, 0, 0, 536,
	0, 2099, 0, 2157, 0, 1968, 0, 2317, 0, 0,
	2869, 0, 0, 0, 0, 0, 0, 0, 489, 2244,
	0, 0, 2596, 0, 964, 0, 0, 0, 0, 0,
	2100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	571, 0, 963, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 1442, 0, 0, 0, 2596, 0, 2596, 0,
	0, 0, 0, 2596, 0, 489, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 1055, 0, 63, 0, 0,
	0, 0, 0, 0, 951, 0, 0, 950, 2235, 0,
	0, 963, 0, 964, 0, 950, 0, 2912, 0, 0,
	0, 0, 0, 964, 0, 0, 74, 0, 0, 1441,
	964, 0, 0, 1446, 0, 2510, 0, 950, 0, 0,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 2869,
	951, 951, 951, 0, 2250, 0, 0, 0, 950, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1968, 2317,
	0, 0, 2245, 1442, 0, 489, 0, 0, 0, 963,
	0, 0, 0, 951, 0, 0, 0, 64, 0, 0,
	0, 2317, 0, 0, 0, 0, 0, 0, 0, 1055,
	0, 1055, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 66, 0, 67, 963, 0,
	0, 3001, 0, 0, 1055, 0, 963, 489, 0, 0,
	0, 0, 0, 0, 0, 171, 0, 0, 0, 2314,
	0, 963, 0, 0, 0, 2596, 570, 0, 0, 110,
	0, 0, 0, 0, 0, 2246, 0, 0, 0, 0,
	0, 0, 0, 0, 2510, 0, 0, 0, 1097, 0,
	964, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 0, 0, 0, 0, 0, 0, 950, 0, 1055,
	0, 0, 0, 0, 2596, 0, 0, 1968, 0, 0,
	0, 2368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 2869, 963, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 0, 0, 0, 166,
	2386, 0, 0, 0, 0, 0, 0, 0, 2394, 0,
	2396, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 2241,
	2242, 2243, 0, 0, 0, 0, 2240, 2238, 2239, 2231,
	2232, 2233, 2234, 2236, 2237, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 0,
	964, 0, 950, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1288, 1289, 0, 1321, 1322,
	1323, 1331, 1332, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 963, 0, 2468, 0,
	1291, 0, 0, 1337, 2229, 2230, 0, 2247, 2248, 2249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1290, 0, 0, 0, 0,
	0, 0, 0, 1310, 2229, 2230, 0, 2247, 2248, 2249,
	1307, 0, 0, 964, 0, 964, 709, 0, 951, 709,
	709, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2244, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2244, 1313, 1314, 1315, 1316, 964, 0, 0,
	964, 0, 1296, 0, 0, 0, 0, 1803, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 0, 0,
	722, 0, 0, 0, 1328, 1338, 1353, 1318, 1319, 1320,
	0, 2235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1334, 1335,
	0, 0, 0, 0, 2251, 0, 1305, 1306, 0, 0,
	0, 2235, 0, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 0, 0, 0, 0, 1311, 2250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 2245, 1325, 2250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 964, 0, 0, 964, 0, 2640,
	0, 0, 0, 0, 0, 2245, 74, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 951,
	0, 0, 0, 964, 0, 0, 0, 951, 0, 74,
	0, 74, 1329, 0, 0, 0, 0, 0, 2246, 0,
	0, 0, 0, 2686, 0, 958, 0, 0, 0, 951,
	0, 0, 0, 2689, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 74, 0, 0, 2246, 0,
	951, 951, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 0, 0, 0, 0,
	1327, 0, 0, 1302, 1303, 1309, 1308, 1304, 1330, 0,
	1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 2716, 0, 0,
	964, 0, 2241, 2242, 2243, 0, 0, 0, 964, 2240,
	2238, 2239, 2231, 2232, 2233, 2234, 2236, 2237, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 0, 2241, 2242, 2243, 0, 0, 0, 0, 2240,
	2238, 2239, 2231, 2232, 2233, 2234, 2236, 2237, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2781, 0, 0, 0, 951,
	0, 1097, 0, 74, 0, 1288, 1289, 74, 1321, 1322,
	1323, 1331, 1332, 1333, 0, 0, 0, 0, 651, 0,
	682, 0, 0, 1324, 0, 0, 964, 0, 0, 0,
	1291, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	658, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 656, 0, 0, 1290, 0, 0, 0, 0,
	0, 0, 0, 1310, 0, 0, 0, 0, 0, 0,
	1307, 0, 0, 0, 657, 0, 0, 0, 0, 659,
	0, 0, 0, 687, 0, 0, 0, 0, 0, 665,
	666, 0, 0, 1803, 677, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 951, 0, 0, 683, 660,
	0, 0, 0, 1353, 951, 951, 0, 0, 0, 0,
	0, 0, 0, 1313, 1314, 1315, 1316, 0, 0, 0,
	0, 0, 1296, 0, 681, 671, 0, 0, 0, 0,
	0, 2876, 0, 0, 0, 0, 0, 0, 964, 0,
	0, 0, 0, 0, 1328, 1338, 0, 1318, 1319, 1320,
	0, 0, 661, 0, 0, 0, 0, 0, 655, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1334, 1335,
	0, 662, 663, 0, 0, 0, 1305, 1306, 2914, 0,
	2916, 0, 0, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 0, 669, 0, 0, 1311, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 668, 0, 912, 0, 0, 0, 0,
	0, 0, 0, 912, 912, 684, 1325, 912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	667, 0, 0, 0, 0, 0, 0, 0, 2969, 1312,
	0, 74, 0, 1288, 1289, 0, 1321, 1322, 1323, 1331,
	1332, 1333, 0, 0, 0, 679, 0, 0, 0, 0,
	0, 1324, 1329, 0, 674, 0, 2989, 0, 1291, 0,
	74, 1337, 0, 0, 0, 0, 653, 672, 685, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3007, 0, 654, 1290, 0, 0, 0, 0, 0, 0,
	0, 1310, 675, 0, 0, 673, 74, 0, 1307, 688,
	689, 0, 0, 0, 74, 0, 686, 0, 0, 0,
	0, 0, 0, 676, 0, 0, 722, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 678,
	1327, 0, 0, 1302, 1303, 1309, 1308, 1304, 1330, 0,
	1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298, 0,
	0, 1313, 1314, 1315, 1316, 0, 0, 2215, 0, 0,
	1296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1288, 1289, 0, 1321, 1322, 1323, 1331, 1332,
	1333, 0, 1328, 1338, 0, 1318, 1319, 1320, 74, 0,
	1324, 0, 0, 0, 0, 0, 0, 1291, 0, 0,
	1337, 0, 0, 0, 0, 0, 1334, 1335, 0, 0,
	0, 0, 0, 0, 1305, 1306, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 1326, 0, 0,
	1310, 0, 0, 0, 1311, 0, 0, 1307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1313, 1314, 1315, 1316, 0, 0, 0, 0, 0, 1296,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	74, 1328, 1338, 0, 1318, 1319, 1320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 912, 0,
	1329, 0, 1288, 1289, 0, 1334, 1335, 0, 1331, 1332,
	1333, 0, 0, 1305, 1306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1326, 1291, 0, 0,
	1337, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 0,
	1310, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301, 1299,
	1300, 1292, 1293, 1294, 1295, 1297, 1298, 0, 0, 1317,
	0, 0, 0, 0, 0, 2214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 0,
	1313, 1314, 1315, 1316, 0, 0, 0, 912, 0, 1296,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 1600, 0, 0,
	0, 1328, 1338, 0, 1318, 1319, 1320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1611, 1596, 1601, 1584, 1621, 1620, 0, 0,
	1586, 1585, 0, 0, 0, 0, 1326, 1630, 1629, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	1302, 1303, 1309, 1308, 1304, 1330, 0, 1301, 1299, 1300,
	1292, 1293, 1294, 1295, 1297, 1298, 0, 1622, 0, 1618,
	1617, 0, 0, 0, 2213, 0, 0, 0, 0, 1616,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	912, 0, 0, 0, 0, 0, 0, 1615, 1613, 1614,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1595, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 1604, 1599, 1605, 1606, 1607,
	1608, 1609, 0, 1603, 0, 0, 0, 0, 0, 0,
	0, 0, 1627, 1628, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1588, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 1619, 0, 0, 0, 1597, 1598,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 1301, 1299, 1300,
	1292, 1293, 1294, 1295, 1297, 1298, 0, 0, 0, 0,
	0, 1612, 0, 0, 0, 1738, 1736, 1737, 1740, 1739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1589, 1590,
	1591, 1592, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1610, 1593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1632, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1587, 0, 0, 1623, 1624, 1625, 1626, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 961, 0, 1594, 0,
	0, 0, 0, 1631, 0, 0, 0, 0, 0, 0,
	0, 1803, 256, 257, 258, 259, 966, 260, 967, 968,
	969, 970, 214, 971, 972, 973, 974, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 975, 267, 268,
	269, 270, 271, 272, 976, 977, 219, 220, 221, 978,
	273, 222, 979, 925, 980, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 981, 283, 0, 284, 285,
	982, 856, 286, 287, 288, 983, 984, 986, 985, 987,
	988, 989, 289, 290, 493, 291, 292, 293, 223, 224,
	990, 294, 991, 295, 992, 296, 993, 994, 297, 298,
	995, 299, 300, 996, 0, 997, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 998, 857, 999,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 1000, 316, 1001, 1002, 858, 317, 1003, 318, 229,
	1004, 230, 1005, 319, 320, 321, 322, 323, 324, 231,
	232, 860, 1006, 326, 0, 0, 0, 1007, 325, 327,
	334, 1008, 859, 328, 233, 330, 329, 331, 332, 333,
	234, 1009, 235, 1010, 335, 861, 862, 336, 337, 338,
	863, 339, 340, 0, 0, 341, 342, 343, 1011, 345,
	344, 1012, 236, 864, 346, 347, 865, 1013, 348, 349,
	1014, 1015, 350, 0, 351, 927, 926, 352, 353, 355,
	356, 354, 866, 357, 358, 360, 359, 1016, 1017, 867,
	1018, 237, 361, 238, 362, 363, 1019, 364, 365, 1020,
	1021, 366, 367, 1022, 1023, 368, 239, 868, 369, 869,
	240, 370, 371, 372, 373, 374, 375, 376, 1024, 377,
	241, 378, 242, 379, 1025, 380, 381, 382, 383, 384,
	243, 385, 386, 1026, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 1027, 399, 870,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 1028, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 1029, 424, 405, 406, 425, 871,
	426, 245, 427, 428, 1030, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 1031, 439, 440,
	1032, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 1033, 247, 248, 249, 449, 1034, 1035, 450, 451,
	250, 251, 1036, 452, 453, 0, 454, 455, 1037, 1038,
	456, 457, 458, 460, 1039, 461, 1040, 459, 462, 463,
	464, 252, 253, 1041, 1042, 465, 254, 1043, 1044, 1045,
	1046, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 0, 0, 0, 0, 0, 1938, 0, 0,
	0, 0, 0, 0, 0, 0, 1939, 256, 257, 258,
	259, 966, 260, 967, 968, 969, 970, 214, 971, 972,
	973, 974, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 975, 267, 268, 269, 270, 271, 272, 976,
	977, 219, 220, 221, 978, 273, 222, 979, 925, 980,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	981, 283, 0, 284, 285, 982, 856, 286, 287, 288,
	983, 984, 986, 985, 987, 988, 989, 289, 290, 493,
	291, 292, 293, 223, 224, 990, 294, 991, 295, 992,
	296, 993, 994, 297, 298, 995, 299, 300, 996, 0,
	997, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 998, 857, 999, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 1000, 316, 1001, 1002,
	858, 317, 1003, 318, 229, 1004, 230, 1005, 319, 320,
	321, 322, 323, 324, 231, 232, 860, 1006, 326, 0,
	0, 0, 1007, 325, 327, 334, 1008, 859, 328, 233,
	330, 329, 331, 332, 333, 234, 1009, 235, 1010, 335,
	861, 862, 336, 337, 338, 863, 339, 340, 0, 0,
	341, 342, 343, 1011, 345, 344, 1012, 236, 864, 346,
	347, 865, 1013, 348, 349, 1014, 1015, 350, 0, 351,
	927, 926, 352, 353, 355, 356, 354, 866, 357, 358,
	360, 359, 1016, 1017, 867, 1018, 237, 361, 238, 362,
	363, 1019, 364, 365, 1020, 1021, 366, 367, 1022, 1023,
	368, 239, 868, 369, 869, 240, 370, 371, 372, 373,
	374, 375, 376, 1024, 377, 241, 378, 242, 379, 1025,
	380, 381, 382, 383, 384, 243, 385, 386, 1026, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 1027, 399, 870, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 1028,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 1029,
	424, 405, 406, 425, 871, 426, 245, 427, 428, 1030,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 1031, 439, 440, 1032, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 1033, 247, 248, 249,
	449, 1034, 1035, 450, 451, 250, 251, 1036, 452, 453,
	0, 454, 455, 1037, 1038, 456, 457, 458, 460, 1039,
	461, 1040, 459, 462, 463, 464, 252, 253, 1041, 1042,
	465, 254, 1043, 1044, 1045, 1046, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2738, 256, 257, 258, 259, 966, 260, 967,
	968, 969, 970, 214, 971, 972, 973, 974, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 975, 267,
	268, 269, 270, 271, 272, 976, 977, 219, 220, 221,
	978, 273, 222, 979, 925, 980, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 981, 283, 0, 284,
	285, 982, 856, 286, 287, 288, 983, 984, 986, 985,
	987, 988, 989, 289, 290, 493, 291, 292, 293, 223,
	224, 990, 294, 991, 295, 992, 296, 993, 994, 297,
	298, 995, 299, 300, 996, 0, 997, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 998, 857,
	999, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 1000, 316, 1001, 1002, 858, 317, 1003, 318,
	229, 1004, 230, 1005, 319, 320, 321, 322, 323, 324,
	231, 232, 860, 1006, 326, 0, 0, 0, 1007, 325,
	327, 334, 1008, 859, 328, 233, 330, 329, 331, 332,
	333, 234, 1009, 235, 1010, 335, 861, 862, 336, 337,
	338, 863, 339, 340, 0, 0, 341, 342, 343, 1011,
	345, 344, 1012, 236, 864, 346, 347, 865, 1013, 348,
	349, 1014, 1015, 350, 0, 351, 927, 926, 352, 353,
	355, 356, 354, 866, 357, 358, 360, 359, 1016, 1017,
	867, 1018, 237, 361, 238, 362, 363, 1019, 364, 365,
	1020, 1021, 366, 367, 1022, 1023, 368, 239, 868, 369,
	869, 240, 370, 371, 372, 373, 374, 375, 376, 1024,
	377, 241, 378, 242, 379, 1025, 380, 381, 382, 383,
	384, 243, 385, 386, 1026, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 1027, 399,
	870, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 1028, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 1029, 424, 405, 406, 425,
	871, 426, 245, 427, 428, 1030, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 1031, 439,
	440, 1032, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 1033, 247, 248, 249, 449, 1034, 1035, 450,
	451, 250, 251, 1036, 452, 453, 0, 454, 455, 1037,
	1038, 456, 457, 458, 460, 1039, 461, 1040, 459, 462,
	463, 464, 252, 253, 1041, 1042, 465, 254, 1043, 1044,
	1045, 1046, 466, 467, 255, 468, 469, 470, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2845, 256, 257, 258, 259, 966, 260,
	967, 968, 969, 970, 214, 971, 972, 973, 974, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 975,
	267, 268, 269, 270, 271, 272, 976, 977, 219, 220,
	221, 978, 273, 222, 979, 925, 980, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 981, 283, 0,
	284, 285, 982, 856, 286, 287, 288, 983, 984, 986,
	985, 987, 988, 989, 289, 290, 493, 291, 292, 293,
	223, 224, 990, 294, 991, 295, 992, 296, 993, 994,
	297, 298, 995, 299, 300, 996, 0, 997, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 998,
	857, 999, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 1000, 316, 1001, 1002, 858, 317, 1003,
	318, 229, 1004, 230, 1005, 319, 320, 321, 322, 323,
	324, 231, 232, 860, 1006, 326, 0, 0, 0, 1007,
	325, 327, 334, 1008, 859, 328, 233, 330, 329, 331,
	332, 333, 234, 1009, 235, 1010, 335, 861, 862, 336,
	337, 338, 863, 339, 340, 0, 0, 341, 342, 343,
	1011, 345, 344, 1012, 236, 864, 346, 347, 865, 1013,
	348, 349, 1014, 1015, 350, 0, 351, 927, 926, 352,
	353, 355, 356, 354, 866, 357, 358, 360, 359, 1016,
	1017, 867, 1018, 237, 361, 238, 362, 363, 1019, 364,
	365, 1020, 1021, 366, 367, 1022, 1023, 368, 239, 868,
	369, 869, 240, 370, 371, 372, 373, 374, 375, 376,
	1024, 377, 241, 378, 242, 379, 1025, 380, 381, 382,
	383, 384, 243, 385, 386, 1026, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 1027,
	399, 870, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 1028, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 1029, 424, 405, 406,
	425, 871, 426, 245, 427, 428, 1030, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 1031,
	439, 440, 1032, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 1033, 247, 248, 249, 449, 1034, 1035,
	450, 451, 250, 251, 1036, 452, 453, 0, 454, 455,
	1037, 1038, 456, 457, 458, 460, 1039, 461, 1040, 459,
	462, 463, 464, 252, 253, 1041, 1042, 465, 254, 1043,
	1044, 1045, 1046, 466, 467, 255, 468, 469, 470, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2492, 256, 257, 258, 259, 966,
	260, 967, 968, 969, 970, 214, 971, 972, 973, 974,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	975, 267, 268, 269, 270, 271, 272, 976, 977, 219,
	220, 221, 978, 273, 222, 979, 925, 980, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 981, 283,
	0, 284, 285, 982, 856, 286, 287, 288, 983, 984,
	986, 985, 987, 988, 989, 289, 290, 493, 291, 292,
	293, 223, 224, 990, 294, 991, 295, 992, 296, 993,
	994, 297, 298, 995, 299, 300, 996, 0, 997, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	998, 857, 999, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 1000, 316, 1001, 1002, 858, 317,
	1003, 318, 229, 1004, 230, 1005, 319, 320, 321, 322,
	323, 324, 231, 232, 860, 1006, 326, 0, 0, 0,
	1007, 325, 327, 334, 1008, 859, 328, 233, 330, 329,
	331, 332, 333, 234, 1009, 235, 1010, 335, 861, 862,
	336, 337, 338, 863, 339, 340, 0, 0, 341, 342,
	343, 1011, 345, 344, 1012, 236, 864, 346, 347, 865,
	1013, 348, 349, 1014, 1015, 350, 0, 351, 927, 926,
	352, 353, 355, 356, 354, 866, 357, 358, 360, 359,
	1016, 1017, 867, 1018, 237, 361, 238, 362, 363, 1019,
	364, 365, 1020, 1021, 366, 367, 1022, 1023, 368, 239,
	868, 369, 869, 240, 370, 371, 372, 373, 374, 375,
	376, 1024, 377, 241, 378, 242, 379, 1025, 380, 381,
	382, 383, 384, 243, 385, 386, 1026, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	1027, 399, 870, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 1028, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 1029, 424, 405,
	406, 425, 871, 426, 245, 427, 428, 1030, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	1031, 439, 440, 1032, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 1033, 247, 248, 249, 449, 1034,
	1035, 450, 451, 250, 251, 1036, 452, 453, 0, 454,
	455, 1037, 1038, 456, 457, 458, 460, 1039, 461, 1040,
	459, 462, 463, 464, 252, 253, 1041, 1042, 465, 254,
	1043, 1044, 1045, 1046, 466, 467, 255, 468, 469, 470,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2483, 256, 257, 258, 259,
	966, 260, 967, 968, 969, 970, 214, 971, 972, 973,
	974, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 975, 267, 268, 269, 270, 271, 272, 976, 977,
	219, 220, 221, 978, 273, 222, 979, 925, 980, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 981,
	283, 0, 284, 285, 982, 856, 286, 287, 288, 983,
	984, 986, 985, 987, 988, 989, 289, 290, 493, 291,
	292, 293, 223, 224, 990, 294, 991, 295, 992, 296,
	993, 994, 297, 298, 995, 299, 300, 996, 0, 997,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 998, 857, 999, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 1000, 316, 1001, 1002, 858,
	317, 1003, 318, 229, 1004, 230, 1005, 319, 320, 321,
	322, 323, 324, 231, 232, 860, 1006, 326, 0, 0,
	0, 1007, 325, 327, 334, 1008, 859, 328, 233, 330,
	329, 331, 332, 333, 234, 1009, 235, 1010, 335, 861,
	862, 336, 337, 338, 863, 339, 340, 0, 0, 341,
	342, 343, 1011, 345, 344, 1012, 236, 864, 346, 347,
	865, 1013, 348, 349, 1014, 1015, 350, 0, 351, 927,
	926, 352, 353, 355, 356, 354, 866, 357, 358, 360,
	359, 1016, 1017, 867, 1018, 237, 361, 238, 362, 363,
	1019, 364, 365, 1020, 1021, 366, 367, 1022, 1023, 368,
	239, 868, 369, 869, 240, 370, 371, 372, 373, 374,
	375, 376, 1024, 377, 241, 378, 242, 379, 1025, 380,
	381, 382, 383, 384, 243, 385, 386, 1026, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 1027, 399, 870, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 1028, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 1029, 424,
	405, 406, 425, 871, 426, 245, 427, 428, 1030, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 1031, 439, 440, 1032, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 1033, 247, 248, 249, 449,
	1034, 1035, 450, 451, 250, 251, 1036, 452, 453, 0,
	454, 455, 1037, 1038, 456, 457, 458, 460, 1039, 461,
	1040, 459, 462, 463, 464, 252, 253, 1041, 1042, 465,
	254, 1043, 1044, 1045, 1046, 466, 467, 255, 468, 469,
	470, 961, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2372, 256, 257, 258,
	259, 966, 260, 967, 968, 969, 970, 214, 971, 972,
	973, 974, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 975, 267, 268, 269, 270, 271, 272, 976,
	977, 219, 220, 221, 978, 273, 222, 979, 925, 980,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	981, 283, 0, 284, 285, 982, 856, 286, 287, 288,
	983, 984, 986, 985, 987, 988, 989, 289, 290, 493,
	291, 292, 293, 223, 224, 990, 294, 991, 295, 992,
	296, 993, 994, 297, 298, 995, 299, 300, 996, 0,
	997, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 998, 857, 999, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 1000, 316, 1001, 1002,
	858, 317, 1003, 318, 229, 1004, 230, 1005, 319, 320,
	321, 322, 323, 324, 231, 232, 860, 1006, 326, 0,
	0, 0, 1007, 325, 327, 334, 1008, 859, 328, 233,
	330, 329, 331, 332, 333, 234, 1009, 235, 1010, 335,
	861, 862, 336, 337, 338, 863, 339, 340, 0, 0,
	341, 342, 343, 1011, 345, 344, 1012, 236, 864, 346,
	347, 865, 1013, 348, 349, 1014, 1015, 350, 0, 351,
	927, 926, 352, 353, 355, 356, 354, 866, 357, 358,
	360, 359, 1016, 1017, 867, 1018, 237, 361, 238, 362,
	363, 1019, 364, 365, 1020, 1021, 366, 367, 1022, 1023,
	368, 239, 868, 369, 869, 240, 370, 371, 372, 373,
	374, 375, 376, 1024, 377, 241, 378, 242, 379, 1025,
	380, 381, 382, 383, 384, 243, 385, 386, 1026, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 1027, 399, 870, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 1028,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 1029,
	424, 405, 406, 425, 871, 426, 245, 427, 428, 1030,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 1031, 439, 440, 1032, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 1033, 247, 248, 249,
	449, 1034, 1035, 450, 451, 250, 251, 1036, 452, 453,
	0, 454, 455, 1037, 1038, 456, 457, 458, 460, 1039,
	461, 1040, 459, 462, 463, 464, 252, 253, 1041, 1042,
	465, 254, 1043, 1044, 1045, 1046, 466, 467, 255, 468,
	469, 470, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1827, 256, 257,
	258, 259, 966, 260, 967, 968, 969, 970, 214, 971,
	972, 973, 974, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 975, 267, 268, 269, 270, 271, 272,
	976, 977, 219, 220, 221, 978, 273, 222, 979, 925,
	980, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 981, 283, 0, 284, 285, 982, 856, 286, 287,
	288, 983, 984, 986, 985, 987, 988, 989, 289, 290,
	493, 291, 292, 293, 223, 224, 990, 294, 991, 295,
	992, 296, 993, 994, 297, 298, 995, 299, 300, 996,
	0, 997, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 998, 857, 999, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 1000, 316, 1001,
	1002, 858, 317, 1003, 318, 229, 1004, 230, 1005, 319,
	320, 321, 322, 323, 324, 231, 232, 860, 1006, 326,
	0, 0, 0, 1007, 325, 327, 334, 1008, 859, 328,
	233, 330, 329, 331, 332, 333, 234, 1009, 235, 1010,
	335, 861, 862, 336, 337, 338, 863, 339, 340, 0,
	0, 341, 342, 343, 1011, 345, 344, 1012, 236, 864,
	346, 347, 865, 1013, 348, 349, 1014, 1015, 350, 0,
	351, 927, 926, 352, 353, 355, 356, 354, 866, 357,
	358, 360, 359, 1016, 1017, 867, 1018, 237, 361, 238,
	362, 363, 1019, 364, 365, 1020, 1021, 366, 367, 1022,
	1023, 368, 239, 868, 369, 869, 240, 370, 371, 372,
	373, 374, 375, 376, 1024, 377, 241, 378, 242, 379,
	1025, 380, 381, 382, 383, 384, 243, 385, 386, 1026,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 1027, 399, 870, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	1028, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	1029, 424, 405, 406, 425, 871, 426, 245, 427, 428,
	1030, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 1031, 439, 440, 1032, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 1033, 247, 248,
	249, 449, 1034, 1035, 450, 451, 250, 251, 1036, 452,
	453, 0, 454, 455, 1037, 1038, 456, 457, 458, 460,
	1039, 461, 1040, 459, 462, 463, 464, 252, 253, 1041,
	1042, 465, 254, 1043, 1044, 1045, 1046, 466, 467, 255,
	468, 469, 470, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1508, 256,
	257, 258, 259, 966, 260, 967, 968, 969, 970, 214,
	971, 972, 973, 974, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 975, 267, 268, 269, 270, 271,
	272, 976, 977, 219, 220, 221, 978, 273, 222, 979,
	925, 980, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 981, 283, 0, 284, 285, 982, 856, 286,
	287, 288, 983, 984, 986, 985, 987, 988, 989, 289,
	290, 493, 291, 292, 293, 223, 224, 990, 294, 991,
	295, 992, 296, 993, 994, 297, 298, 995, 299, 300,
	996, 0, 997, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 998, 857, 999, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 1000, 316,
	1001, 1002, 858, 317, 1003, 318, 229, 1004, 230, 1005,
	319, 320, 321, 322, 323, 324, 231, 232, 860, 1006,
	326, 0, 0, 0, 1007, 325, 327, 334, 1008, 859,
	328, 233, 330, 329, 331, 332, 333, 234, 1009, 235,
	1010, 335, 861, 862, 336, 337, 338, 863, 339, 340,
	0, 0, 341, 342, 343, 1011, 345, 344, 1012, 236,
	864, 346, 347, 865, 1013, 348, 349, 1014, 1015, 350,
	0, 351, 927, 926, 352, 353, 355, 356, 354, 866,
	357, 358, 360, 359, 1016, 1017, 867, 1018, 237, 361,
	238, 362, 363, 1019, 364, 365, 1020, 1021, 366, 367,
	1022, 1023, 368, 239, 868, 369, 869, 240, 370, 371,
	372, 373, 374, 375, 376, 1024, 377, 241, 378, 242,
	379, 1025, 380, 381, 382, 383, 384, 243, 385, 386,
	1026, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 1027, 399, 870, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 1028, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 1029, 424, 405, 406, 425, 871, 426, 245, 427,
	428, 1030, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 1031, 439, 440, 1032, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 1033, 247,
	248, 249, 449, 1034, 1035, 450, 451, 250, 251, 1036,
	452, 453, 0, 454, 455, 1037, 1038, 456, 457, 458,
	460, 1039, 461, 1040, 459, 462, 463, 464, 252, 253,
	1041, 1042, 465, 254, 1043, 1044, 1045, 1046, 466, 467,
	255, 468, 469, 470, 1834, 0, 773, 761, 762, 759,
	760, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 1831, 260, 0, 0,
	0, 0, 809, 755, 0, 0, 0, 261, 262, 263,
	215, 828, 793, 829, 781, 815, 830, 0, 267, 783,
	782, 270, 271, 272, 756, 808, 831, 832, 221, 0,
	273, 813, 0, 798, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 856, 286, 287, 288, 801, 799, 800, 805, 803,
	802, 804, 289, 290, 493, 291, 816, 293, 833, 834,
	741, 294, 0, 295, 0, 296, 1832, 0, 817, 298,
	0, 299, 300, 0, 0, 0, 746, 304, 301, 302,
	305, 308, 303, 309, 310, 835, 836, 768, 857, 0,
	0, 0, 0, 0, 311, 312, 837, 818, 819, 0,
	315, 0, 316, 0, 0, 858, 317, 0, 318, 838,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 810,
	812, 860, 0, 792, 0, 0, 0, 0, 325, 327,
	334, 0, 859, 328, 839, 796, 820, 821, 822, 823,
	840, 0, 797, 0, 335, 861, 862, 336, 337, 338,
	863, 824, 825, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 841, 864, 346, 347, 865, 0, 348, 349,
	0, 0, 350, 0, 351, 743, 742, 352, 353, 355,
	785, 354, 866, 357, 358, 360, 359, 738, 0, 867,
	769, 811, 361, 842, 362, 363, 0, 794, 795, 0,
	0, 366, 367, 0, 0, 368, 239, 868, 369, 869,
	843, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	844, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	845, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 870,
	400, 401, 402, 403, 747, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 786, 787, 788,
	789, 416, 422, 423, 806, 424, 405, 406, 425, 871,
	426, 846, 790, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 826, 433, 434, 435, 847, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 784,
	448, 0, 848, 849, 850, 827, 0, 0, 450, 451,
	851, 852, 767, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 1830, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 739, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 1833, 0, 0, 0, 0, 0, 0, 748,
	1828, 0, 0, 0, 723, 751, 773, 761, 762, 759,
	760, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 809, 755, 0, 0, 0, 261, 262, 263,
	215, 828, 793, 829, 781, 815, 830, 0, 267, 783,
	782, 270, 271, 272, 756, 808, 831, 832, 221, 0,
	273, 813, 0, 798, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 856, 286, 287, 288, 801, 799, 800, 805, 803,
	802, 804, 289, 290, 493, 291, 816, 293, 833, 834,
	741, 294, 0, 295, 0, 296, 0, 0, 817, 298,
	0, 299, 300, 0, 0, 0, 746, 304, 301, 302,
	305, 308, 303, 309, 310, 835, 836, 768, 857, 0,
	0, 0, 0, 0, 311, 312, 837, 818, 819, 0,
	315, 0, 316, 0, 0, 858, 317, 0, 318, 838,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 810,
	812, 860, 0, 792, 0, 0, 0, 0, 325, 327,
	334, 0, 859, 328, 839, 796, 820, 821, 822, 823,
	840, 0, 797, 0, 335, 861, 862, 336, 337, 338,
	863, 824, 825, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 841, 864, 346, 347, 865, 0, 348, 349,
	0, 0, 350, 0, 351, 743, 742, 352, 353, 355,
	785, 354, 866, 357, 358, 360, 359, 738, 0, 867,
	769, 811, 361, 842, 362, 363, 0, 794, 795, 0,
	0, 366, 367, 0, 0, 368, 239, 868, 369, 869,
	843, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	844, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	845, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 870,
	400, 401, 402, 403, 747, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 171, 420, 421, 786, 787, 788,
	789, 416, 422, 423, 806, 424, 405, 406, 425, 871,
	426, 846, 790, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 826, 433, 434, 435, 847, 0, 439, 440,
	173, 441, 442, 443, 444, 445, 306, 446, 307, 784,
	448, 0, 848, 849, 850, 827, 0, 0, 450, 451,
	851, 852, 767, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 1144, 853, 0, 0, 465, 254, 0, 0, 0,
	165, 466, 467, 255, 468, 469, 470, 739, 166, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 773, 761, 762, 759, 760, 752, 0, 1357,
	0, 0, 0, 0, 0, 751, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 809, 755,
	0, 0, 0, 261, 262, 263, 215, 828, 793, 829,
	781, 815, 830, 0, 267, 783, 782, 270, 271, 272,
	756, 808, 831, 832, 221, 0, 273, 813, 0, 798,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 856, 286, 287,
	288, 801, 799, 800, 805, 803, 802, 804, 289, 290,
	493, 291, 816, 293, 833, 834, 741, 294, 0, 295,
	0, 296, 0, 0, 817, 298, 0, 299, 300, 0,
	0, 0, 746, 304, 301, 302, 305, 308, 303, 309,
	310, 835, 836, 768, 857, 0, 0, 0, 0, 0,
	311, 312, 837, 818, 819, 0, 315, 0, 316, 0,
	0, 858, 317, 0, 318, 838, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 810, 812, 860, 0, 792,
	0, 0, 0, 0, 325, 327, 334, 0, 859, 328,
	839, 796, 820, 821, 822, 823, 840, 0, 797, 0,
	335, 861, 862, 336, 337, 338, 863, 824, 825, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 841, 864,
	346, 347, 865, 0, 348, 349, 0, 0, 350, 0,
	351, 743, 742, 352, 353, 355, 785, 354, 866, 357,
	358, 360, 359, 738, 0, 867, 769, 811, 361, 842,
	362, 363, 0, 794, 795, 0, 0, 366, 367, 0,
	0, 368, 239, 868, 369, 869, 843, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 844, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 845, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 870, 400, 401, 402, 403,
	747, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	171, 420, 421, 786, 787, 788, 789, 416, 422, 423,
	806, 424, 405, 406, 425, 871, 426, 846, 790, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 826, 433,
	434, 435, 847, 0, 439, 440, 173, 441, 442, 443,
	444, 445, 306, 446, 307, 784, 448, 0, 848, 849,
	850, 827, 0, 0, 450, 451, 851, 852, 767, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	807, 461, 0, 791, 462, 463, 464, 1144, 853, 0,
	0, 465, 254, 0, 0, 0, 165, 466, 467, 255,
	468, 469, 470, 739, 166, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 735, 736, 773, 761,
	762, 759, 760, 752, 0, 1357, 0, 0, 0, 0,
	0, 751, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 809, 755, 0, 0, 0, 261,
	262, 263, 215, 828, 793, 829, 781, 815, 830, 1903,
	267, 783, 782, 270, 271, 272, 756, 808, 831, 832,
	221, 0, 273, 813, 0, 798, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 856, 286, 287, 288, 801, 799, 800,
	805, 803, 802, 804, 289, 290, 493, 291, 816, 293,
	833, 834, 741, 294, 0, 295, 0, 296, 0, 0,
	817, 298, 0, 299, 300, 0, 0, 0, 746, 304,
	301, 302, 305, 308, 303, 309, 310, 835, 836, 768,
	857, 0, 0, 0, 0, 0, 311, 312, 837, 818,
	819, 0, 315, 0, 316, 0, 1908, 858, 317, 0,
	318, 838, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 810, 812, 860, 0, 792, 0, 0, 0, 0,
	325, 327, 334, 0, 859, 328, 839, 796, 820, 821,
	822, 823, 840, 0, 797, 0, 335, 861, 862, 336,
	337, 338, 863, 824, 825, 0, 0, 341, 342, 343,
	0, 345, 344, 1904, 841, 864, 346, 347, 865, 0,
	348, 349, 0, 0, 350, 0, 351, 743, 742, 352,
	353, 355, 785, 354, 866, 357, 358, 360, 359, 738,
	0, 867, 769, 811, 361, 842, 362, 363, 0, 794,
	795, 0, 0, 366, 367, 0, 0, 368, 239, 868,
	369, 869, 843, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 844, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 845, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 870, 400, 401, 402, 403, 747, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 786,
	787, 788, 789, 416, 422, 423, 806, 424, 405, 406,
	425, 871, 426, 846, 790, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 826, 433, 434, 435, 847, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 784, 448, 0, 848, 849, 850, 827, 0, 1905,
	450, 451, 851, 852, 767, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 807, 461, 0, 791,
	462, 463, 464, 252, 853, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 739,
	0, 0, 0, 0, 0, 0, 0, 737, 0, 0,
	0, 0, 735, 736, 773, 761, 762, 759, 760, 752,
	0, 748, 0, 0, 0, 0, 0, 751, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	809, 755, 0, 0, 0, 261, 262, 263, 215, 828,
	793, 829, 781, 815, 830, 0, 267, 783, 782, 270,
	271, 272, 756, 808, 831, 832, 221, 0, 273, 813,
	0, 798, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 856,
	286, 287, 288, 801, 799, 800, 805, 803, 802, 804,
	289, 290, 493, 291, 816, 293, 833, 834, 741, 294,
	0, 295, 0, 296, 0, 0, 817, 298, 0, 299,
	300, 0, 0, 0, 746, 304, 301, 302, 305, 308,
	303, 309, 310, 835, 836, 768, 857, 0, 0, 0,
	0, 0, 311, 312, 837, 818, 819, 0, 315, 0,
	316, 0, 0, 858, 317, 0, 318, 838, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 810, 812, 860,
	0, 792, 0, 0, 0, 0, 325, 327, 334, 0,
	859, 328, 839, 796, 820, 821, 822, 823, 840, 0,
	797, 0, 335, 861, 862, 336, 337, 338, 863, 824,
	825, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	841, 864, 346, 347, 865, 0, 348, 349, 0, 0,
	350, 0, 351, 743, 742, 352, 353, 355, 785, 354,
	866, 357, 358, 360, 359, 738, 2658, 867, 769, 811,
	361, 842, 362, 363, 0, 794, 795, 0, 0, 366,
	367, 0, 0, 368, 239, 868, 369, 869, 843, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 844, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 845, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 870, 400, 401,
	402, 403, 747, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 786, 787, 788, 789, 416,
	422, 423, 806, 424, 405, 406, 425, 871, 426, 846,
	790, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	826, 433, 434, 435, 847, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 784, 448, 0,
	848, 849, 850, 827, 0, 0, 450, 451, 851, 852,
	767, 452, 453, 0, 454, 455, 0, 0, 456, 457,
	458, 460, 807, 461, 0, 791, 462, 463, 464, 252,
	853, 0, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 739, 0, 0, 0, 0,
	0, 0, 0, 737, 0, 0, 0, 0, 735, 736,
	1420, 773, 761, 762, 759, 760, 752, 748, 0, 0,
	0, 0, 0, 751, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 809, 755, 0,
	0, 0, 261, 262, 263, 215, 828, 793, 829, 781,
	815, 830, 0, 267, 783, 782, 270, 271, 272, 756,
	808, 831, 832, 221, 0, 273, 813, 0, 798, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 856, 286, 287, 288,
	801, 799, 800, 805, 803, 802, 804, 289, 290, 493,
	291, 816, 293, 833, 834, 741, 294, 0, 295, 0,
	296, 0, 0, 817, 298, 0, 299, 300, 0, 0,
	0, 746, 304, 301, 302, 305, 308, 303, 309, 310,
	835, 836, 768, 857, 0, 0, 0, 0, 0, 311,
	312, 837, 818, 819, 0, 315, 0, 316, 0, 0,
	858, 317, 0, 318, 838, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 810, 812, 860, 0, 792, 0,
	0, 0, 1731, 325, 327, 334, 0, 859, 328, 839,
	796, 820, 821, 822, 823, 840, 0, 797, 0, 335,
	861, 862, 336, 337, 338, 863, 824, 825, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 841, 864, 346,
	347, 865, 0, 348, 349, 0, 0, 350, 0, 351,
	743, 742, 352, 353, 355, 785, 354, 866, 357, 358,
	360, 359, 738, 0, 867, 769, 811, 361, 842, 362,
	363, 0, 794, 795, 0, 0, 366, 367, 0, 0,
	368, 239, 868, 369, 869, 843, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 844, 378, 242, 379, 1730,
	380, 381, 382, 383, 384, 845, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 870, 400, 401, 402, 403, 747,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 786, 787, 788, 789, 416, 422, 423, 806,
	424, 405, 406, 425, 871, 426, 846, 790, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 826, 433, 434,
	435, 847, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 784, 448, 0, 848, 849, 850,
	827, 0, 0, 450, 451, 851, 852, 767, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 807,
	461, 0, 791, 462, 463, 464, 252, 853, 0, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 739, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 735, 736, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 0, 731,
	751, 773, 761, 762, 759, 760, 752, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 809, 755, 0,
	0, 0, 261, 262, 263, 215, 828, 793, 829, 781,
	815, 830, 0, 267, 783, 782, 270, 271, 272, 756,
	808, 831, 832, 221, 0, 273, 813, 0, 798, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 856, 286, 287, 288,
	801, 799, 800, 805, 803, 802, 804, 289, 290, 493,
	291, 816, 293, 833, 834, 741, 294, 0, 295, 0,
	296, 0, 0, 817, 298, 0, 299, 300, 0, 0,
	0, 746, 304, 301, 302, 305, 308, 303, 309, 310,
	835, 836, 768, 857, 0, 0, 0, 0, 0, 311,
	312, 837, 818, 819, 0, 315, 0, 316, 0, 0,
	858, 317, 0, 318, 838, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 810, 812, 860, 0, 792, 0,
	0, 0, 0, 325, 327, 334, 0, 859, 328, 839,
	796, 820, 821, 822, 823, 840, 0, 797, 0, 335,
	861, 862, 336, 337, 338, 863, 824, 825, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 841, 864, 346,
	347, 865, 0, 348, 349, 0, 0, 350, 0, 351,
	743, 742, 352, 353, 355, 785, 354, 866, 357, 358,
	360, 359, 738, 0, 867, 769, 811, 361, 842, 362,
	363, 0, 794, 795, 733, 0, 366, 367, 0, 0,
	368, 239, 868, 369, 869, 843, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 844, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 845, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 870, 400, 401, 402, 403, 747,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 786, 787, 788, 789, 416, 422, 423, 806,
	424, 405, 406, 425, 871, 426, 846, 790, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 826, 433, 434,
	435, 847, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 784, 448, 0, 848, 849, 850,
	827, 0, 0, 450, 451, 851, 852, 767, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 807,
	461, 0, 791, 462, 463, 464, 252, 853, 0, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 739, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 735, 736, 773, 761, 762,
	759, 760, 752, 0, 748, 0, 0, 0, 0, 0,
	751, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 809, 755, 0, 0, 0, 261, 262,
	263, 215, 828, 793, 829, 781, 815, 830, 0, 267,
	783, 782, 270, 271, 272, 756, 808, 831, 832, 221,
	0, 273, 813, 0, 798, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 856, 286, 287, 288, 801, 799, 800, 805,
	803, 802, 804, 289, 290, 493, 291, 816, 293, 833,
	834, 741, 294, 0, 295, 0, 296, 0, 0, 817,
	298, 0, 299, 300, 0, 0, 0, 746, 304, 301,
	302, 305, 308, 303, 309, 310, 835, 836, 768, 857,
	0, 0, 0, 0, 0, 311, 312, 837, 818, 819,
	0, 315, 0, 316, 0, 0, 858, 317, 0, 318,
	838, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	810, 812, 860, 0, 792, 0, 0, 0, 0, 325,
	327, 334, 0, 859, 328, 839, 796, 820, 821, 822,
	823, 840, 0, 797, 0, 335, 861, 862, 336, 337,
	338, 863, 824, 825, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 841, 864, 346, 347, 865, 0, 348,
	349, 0, 0, 350, 0, 351, 743, 742, 352, 353,
	355, 785, 354, 866, 357, 358, 360, 359, 738, 0,
	867, 769, 811, 361, 842, 362, 363, 0, 794, 795,
	0, 0, 366, 367, 0, 0, 368, 239, 868, 369,
	869, 843, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 844, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 845, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	870, 400, 401, 402, 403, 747, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 786, 787,
	788, 789, 416, 422, 423, 806, 424, 405, 406, 425,
	871, 426, 846, 790, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 826, 433, 434, 435, 847, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	784, 448, 0, 848, 849, 850, 827, 0, 0, 450,
	451, 851, 852, 767, 452, 453, 0, 454, 455, 0,
	0, 456, 457, 458, 460, 807, 461, 0, 791, 462,
	463, 464, 252, 853, 2494, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 739, 0,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	0, 735, 736, 773, 761, 762, 759, 760, 752, 0,
	748, 0, 0, 0, 0, 0, 751, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 809,
	755, 0, 0, 0, 261, 262, 263, 215, 828, 793,
	829, 781, 815, 830, 0, 267, 783, 782, 270, 271,
	272, 756, 808, 831, 832, 221, 0, 273, 813, 0,
	798, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 856, 286,
	287, 288, 801, 799, 800, 805, 803, 802, 804, 289,
	290, 493, 291, 816, 293, 833, 834, 741, 294, 0,
	295, 0, 296, 0, 0, 817, 298, 0, 299, 300,
	0, 0, 0, 746, 304, 301, 302, 305, 308, 303,
	309, 310, 835, 836, 768, 857, 0, 0, 0, 0,
	0, 311, 312, 837, 818, 819, 0, 315, 0, 316,
	0, 0, 858, 317, 0, 318, 838, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 810, 812, 860, 0,
	792, 0, 0, 0, 0, 325, 327, 334, 0, 859,
	328, 839, 796, 820, 821, 822, 823, 840, 0, 797,
	0, 335, 861, 862, 336, 337, 338, 863, 824, 825,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 841,
	864, 346, 347, 865, 0, 348, 349, 0, 0, 350,
	0, 351, 743, 742, 352, 353, 355, 785, 354, 866,
	357, 358, 360, 359, 738, 0, 867, 769, 811, 361,
	842, 362, 363, 0, 794, 795, 733, 0, 366, 367,
	0, 0, 368, 239, 868, 369, 869, 843, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 844, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 845, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 870, 400, 401, 402,
	403, 747, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 786, 787, 788, 789, 416, 422,
	423, 806, 424, 405, 406, 425, 871, 426, 846, 790,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 826,
	433, 434, 435, 847, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 784, 448, 0, 848,
	849, 850, 827, 0, 0, 450, 451, 851, 852, 767,
	452, 453, 0, 454, 455, 0, 0, 456, 457, 458,
	460, 807, 461, 0, 791, 462, 463, 464, 252, 853,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 739, 0, 0, 0, 0, 0,
	0, 0, 737, 0, 0, 0, 0, 735, 736, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 2304, 751, 773, 761, 762, 759, 760, 752, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 809,
	755, 0, 0, 0, 261, 262, 263, 215, 828, 793,
	829, 781, 815, 830, 0, 267, 783, 782, 270, 271,
	272, 756, 808, 831, 832, 221, 0, 273, 813, 0,
	798, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 856, 286,
	287, 288, 801, 799, 800, 805, 803, 802, 804, 289,
	290, 493, 291, 816, 293, 833, 834, 741, 294, 0,
	295, 0, 296, 0, 0, 817, 298, 0, 299, 300,
	0, 0, 0, 746, 304, 301, 302, 305, 308, 303,
	309, 310, 835, 836, 768, 857, 0, 0, 0, 0,
	0, 311, 312, 837, 818, 819, 0, 315, 0, 316,
	0, 0, 858, 317, 0, 318, 838, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 810, 812, 860, 0,
	792, 0, 0, 0, 0, 325, 327, 334, 0, 859,
	328, 839, 796, 820, 821, 822, 823, 840, 0, 797,
	0, 335, 861, 862, 336, 337, 338, 863, 824, 825,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 841,
	864, 346, 347, 865, 0, 348, 349, 0, 0, 350,
	0, 351, 743, 742, 352, 353, 355, 785, 354, 866,
	357, 358, 360, 359, 738, 0, 867, 769, 811, 361,
	842, 362, 363, 0, 794, 795, 0, 0, 366, 367,
	0, 0, 368, 239, 868, 369, 869, 843, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 844, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 845, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 870, 400, 401, 402,
	403, 747, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 786, 787, 788, 789, 416, 422,
	423, 806, 424, 405, 406, 425, 871, 426, 846, 790,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 826,
	433, 434, 435, 847, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 784, 448, 0, 848,
	849, 850, 827, 0, 0, 450, 451, 851, 852, 767,
	452, 453, 0, 454, 455, 0, 0, 456, 457, 458,
	460, 807, 461, 0, 791, 462, 463, 464, 252, 853,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 739, 0, 0, 0, 0, 0,
	0, 0, 737, 0, 0, 0, 0, 735, 736, 773,
	761, 762, 759, 760, 752, 0, 748, 0, 0, 0,
	0, 0, 751, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 809, 755, 0, 0, 0,
	261, 262, 263, 215, 828, 793, 829, 781, 815, 830,
	0, 267, 783, 782, 270, 271, 272, 756, 808, 831,
	832, 221, 0, 273, 813, 0, 798, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 856, 286, 287, 288, 801, 799,
	800, 805, 803, 802, 804, 289, 290, 493, 291, 816,
	293, 833, 834, 741, 294, 0, 295, 0, 296, 0,
	0, 817, 298, 0, 299, 300, 0, 0, 0, 746,
	304, 301, 302, 305, 308, 303, 309, 310, 835, 836,
	768, 857, 0, 0, 0, 0, 0, 311, 312, 837,
	818, 819, 0, 315, 0, 316, 0, 0, 858, 317,
	0, 318, 838, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 810, 812, 860, 0, 792, 0, 0, 0,
	0, 325, 327, 334, 0, 859, 328, 839, 796, 820,
	821, 822, 823, 840, 0, 797, 0, 335, 861, 862,
	336, 337, 338, 863, 824, 825, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 841, 864, 346, 347, 865,
	0, 348, 349, 0, 0, 350, 0, 351, 743, 742,
	352, 353, 355, 785, 354, 866, 357, 358, 360, 359,
	738, 0, 867, 769, 811, 361, 842, 362, 363, 0,
	794, 795, 0, 0, 366, 367, 0, 0, 368, 239,
	868, 369, 869, 843, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 844, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 845, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 870, 400, 401, 402, 403, 747, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	786, 787, 788, 789, 416, 422, 423, 806, 424, 405,
	406, 425, 871, 426, 846, 790, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 826, 433, 434, 435, 847,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 784, 448, 0, 848, 849, 850, 827, 0,
	0, 450, 451, 851, 852, 767, 452, 453, 0, 454,
	455, 0, 0, 456, 457, 458, 460, 807, 461, 0,
	791, 462, 463, 464, 252, 853, 0, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	739, 0, 0, 0, 0, 0, 0, 0, 737, 0,
	0, 0, 0, 735, 736, 1420, 773, 761, 762, 759,
	760, 752, 748, 0, 0, 0, 0, 0, 751, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 809, 755, 0, 0, 0, 261, 262, 263,
	215, 828, 793, 829, 781, 815, 830, 0, 267, 783,
	782, 270, 271, 272, 756, 808, 831, 832, 221, 0,
	273, 813, 0, 798, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 856, 286, 287, 288, 801, 799, 800, 805, 803,
	802, 804, 289, 290, 493, 291, 816, 293, 833, 834,
	741, 294, 0, 295, 0, 296, 0, 0, 817, 298,
	0, 299, 300, 0, 0, 0, 746, 304, 301, 302,
	305, 308, 303, 309, 310, 835, 836, 768, 857, 0,
	0, 0, 0, 0, 311, 312, 837, 818, 819, 0,
	315, 0, 316, 0, 1908, 858, 317, 0, 318, 838,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 810,
	812, 860, 0, 792, 0, 0, 0, 0, 325, 327,
	334, 0, 859, 328, 839, 796, 820, 821, 822, 823,
	840, 0, 797, 0, 335, 861, 862, 336, 337, 338,
	863, 824, 825, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 841, 864, 346, 347, 865, 0, 348, 349,
	0, 0, 350, 0, 351, 743, 742, 352, 353, 355,
	785, 354, 866, 357, 358, 360, 359, 738, 0, 867,
	769, 811, 361, 842, 362, 363, 0, 794, 795, 0,
	0, 366, 367, 0, 0, 368, 239, 868, 369, 869,
	843, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	844, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	845, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 870,
	400, 401, 402, 403, 747, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 786, 787, 788,
	789, 416, 422, 423, 806, 424, 405, 406, 425, 871,
	426, 846, 790, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 826, 433, 434, 435, 847, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 784,
	448, 0, 848, 849, 850, 827, 0, 0, 450, 451,
	851, 852, 767, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 739, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 1942, 751, 773, 761, 762, 759,
	760, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 809, 755, 0, 0, 0, 261, 262, 263,
	215, 828, 793, 829, 781, 815, 830, 0, 267, 783,
	782, 270, 271, 272, 756, 808, 831, 832, 221, 0,
	273, 813, 0, 798, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 856, 286, 287, 288, 801, 799, 800, 805, 803,
	802, 804, 289, 290, 493, 291, 816, 293, 833, 834,
	741, 294, 0, 295, 0, 296, 0, 0, 817, 298,
	0, 299, 300, 0, 0, 0, 746, 304, 301, 302,
	305, 308, 303, 309, 310, 835, 836, 768, 857, 0,
	0, 0, 0, 0, 311, 312, 837, 818, 819, 0,
	315, 0, 316, 0, 0, 858, 317, 0, 318, 838,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 810,
	812, 860, 0, 792, 0, 0, 0, 0, 325, 327,
	334, 0, 859, 328, 839, 796, 820, 821, 822, 823,
	840, 0, 797, 0, 335, 861, 862, 336, 337, 338,
	863, 824, 825, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 841, 864, 346, 347, 865, 0, 348, 349,
	0, 0, 350, 0, 351, 743, 742, 352, 353, 355,
	785, 354, 866, 357, 358, 360, 359, 738, 0, 867,
	769, 811, 361, 842, 362, 363, 0, 794, 795, 0,
	0, 366, 367, 0, 0, 368, 239, 868, 369, 869,
	843, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	844, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	845, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 870,
	400, 401, 402, 403, 747, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 786, 787, 788,
	789, 416, 422, 423, 806, 424, 405, 406, 425, 871,
	426, 846, 790, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 826, 433, 434, 435, 847, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 784,
	448, 0, 848, 849, 850, 827, 0, 0, 450, 451,
	851, 852, 767, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 739, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 1895, 751, 773, 761, 762, 759,
	760, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 809, 755, 0, 0, 0, 261, 262, 263,
	215, 828, 793, 829, 781, 815, 830, 0, 267, 783,
	782, 270, 271, 272, 756, 808, 831, 832, 221, 0,
	273, 813, 0, 798, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 856, 286, 287, 288, 801, 799, 800, 805, 803,
	802, 804, 289, 290, 493, 291, 816, 293, 833, 834,
	741, 294, 0, 295, 0, 296, 0, 0, 817, 298,
	0, 299, 300, 0, 0, 0, 746, 304, 301, 302,
	305, 308, 303, 309, 310, 835, 836, 768, 857, 0,
	0, 0, 0, 0, 311, 312, 837, 818, 819, 0,
	315, 0, 316, 0, 0, 858, 317, 0, 318, 838,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 810,
	812, 860, 0, 792, 0, 0, 0, 0, 325, 327,
	334, 0, 859, 328, 839, 796, 820, 821, 822, 823,
	840, 0, 797, 0, 335, 861, 862, 336, 337, 338,
	863, 824, 825, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 841, 864, 346, 347, 865, 0, 348, 349,
	0, 0, 350, 0, 351, 743, 742, 352, 353, 355,
	785, 354, 866, 357, 358, 360, 359, 738, 0, 867,
	769, 811, 361, 842, 362, 363, 0, 794, 795, 0,
	0, 366, 367, 0, 0, 368, 239, 868, 369, 869,
	843, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	844, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	845, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 870,
	400, 401, 402, 403, 747, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 786, 787, 788,
	789, 416, 422, 423, 806, 424, 405, 406, 425, 871,
	426, 846, 790, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 826, 433, 434, 435, 847, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 784,
	448, 0, 848, 849, 850, 827, 0, 0, 450, 451,
	851, 852, 767, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 739, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 1884, 751, 773, 761, 762, 759,
	760, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 809, 755, 0, 0, 0, 261, 262, 263,
	215, 828, 793, 829, 781, 815, 830, 0, 267, 783,
	782, 270, 271, 272, 756, 808, 831, 832, 221, 0,
	273, 813, 0, 798, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 856, 286, 287, 288, 801, 799, 800, 805, 803,
	802, 804, 289, 290, 493, 291, 816, 293, 833, 834,
	741, 294, 0, 295, 0, 296, 0, 0, 817, 298,
	0, 299, 300, 0, 0, 0, 746, 304, 301, 302,
	305, 308, 303, 309, 310, 835, 836, 768, 857, 0,
	0, 0, 0, 0, 311, 312, 837, 818, 819, 0,
	315, 0, 316, 0, 0, 858, 317, 0, 318, 838,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 810,
	812, 860, 0, 792, 0, 0, 0, 0, 325, 327,
	334, 0, 859, 328, 839, 796, 820, 821, 822, 823,
	840, 0, 797, 0, 335, 861, 862, 336, 337, 338,
	863, 824, 825, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 841, 864, 346, 347, 865, 0, 348, 349,
	0, 0, 350, 0, 351, 743, 742, 352, 353, 355,
	785, 354, 866, 357, 358, 360, 359, 738, 0, 867,
	769, 811, 361, 842, 362, 363, 0, 794, 795, 0,
	0, 366, 367, 0, 0, 368, 239, 868, 369, 869,
	843, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	844, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	845, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 870,
	400, 401, 402, 403, 747, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 786, 787, 788,
	789, 416, 422, 423, 806, 424, 405, 406, 425, 871,
	426, 846, 790, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 826, 433, 434, 435, 847, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 784,
	448, 0, 848, 849, 850, 827, 0, 0, 450, 451,
	851, 852, 767, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 739, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 1882, 751, 773, 761, 762, 759,
	760, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 809, 755, 0, 0, 0, 261, 262, 263,
	215, 828, 793, 829, 781, 815, 830, 0, 267, 783,
	782, 270, 271, 272, 756, 808, 831, 832, 221, 0,
	273, 813, 0, 798, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 856, 286, 287, 288, 801, 799, 800, 805, 803,
	802, 804, 289, 290, 493, 291, 816, 293, 833, 834,
	741, 294, 0, 295, 0, 296, 0, 0, 817, 298,
	0, 299, 300, 0, 0, 0, 746, 304, 301, 302,
	305, 308, 303, 309, 310, 835, 836, 768, 857, 0,
	0, 0, 0, 0, 311, 312, 837, 818, 819, 0,
	315, 0, 316, 0, 0, 858, 317, 0, 318, 838,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 810,
	812, 860, 0, 792, 0, 0, 0, 0, 325, 327,
	334, 0, 859, 328, 839, 796, 820, 821, 822, 823,
	840, 0, 797, 0, 335, 861, 862, 336, 337, 338,
	863, 824, 825, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 841, 864, 346, 347, 865, 0, 348, 349,
	0, 0, 350, 0, 351, 743, 742, 352, 353, 355,
	785, 354, 866, 357, 358, 360, 359, 738, 0, 867,
	769, 811, 361, 842, 362, 363, 0, 794, 795, 0,
	0, 366, 367, 0, 0, 368, 239, 868, 369, 869,
	843, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	844, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	845, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 870,
	400, 401, 402, 403, 747, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 786, 787, 788,
	789, 416, 422, 423, 806, 424, 405, 406, 425, 871,
	426, 846, 790, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 826, 433, 434, 435, 847, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 784,
	448, 0, 848, 849, 850, 827, 0, 0, 450, 451,
	851, 852, 767, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 739, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 1880, 751, 773, 761, 762, 759,
	760, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 809, 755, 0, 0, 0, 261, 262, 263,
	215, 828, 793, 829, 781, 815, 830, 0, 267, 783,
	782, 270, 271, 272, 756, 808, 831, 832, 221, 0,
	273, 813, 0, 798, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 856, 286, 287, 288, 801, 799, 800, 805, 803,
	802, 804, 289, 290, 493, 291, 816, 293, 833, 834,
	741, 294, 0, 295, 0, 296, 0, 0, 817, 298,
	0, 299, 300, 0, 0, 0, 746, 304, 301, 302,
	305, 308, 303, 309, 310, 835, 836, 768, 857, 0,
	0, 0, 0, 0, 311, 312, 837, 818, 819, 0,
	315, 0, 316, 0, 0, 858, 317, 0, 318, 838,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 810,
	812, 860, 0, 792, 0, 0, 0, 0, 325, 327,
	334, 0, 859, 328, 839, 796, 820, 821, 822, 823,
	840, 0, 797, 0, 335, 861, 862, 336, 337, 338,
	863, 824, 825, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 841, 864, 346, 347, 865, 0, 348, 349,
	0, 0, 350, 0, 351, 743, 742, 352, 353, 355,
	785, 354, 866, 357, 358, 360, 359, 738, 0, 867,
	769, 811, 361, 842, 362, 363, 0, 794, 795, 0,
	0, 366, 367, 0, 0, 368, 239, 868, 369, 869,
	843, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	844, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	845, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 870,
	400, 401, 402, 403, 747, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 786, 787, 788,
	789, 416, 422, 423, 806, 424, 405, 406, 425, 871,
	426, 846, 790, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 826, 433, 434, 435, 847, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 784,
	448, 0, 848, 849, 850, 827, 0, 0, 450, 451,
	851, 852, 767, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 739, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 1877, 751, 1869, 761, 762, 759,
	760, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 809, 755, 0, 0, 0, 261, 262, 263,
	215, 828, 793, 829, 781, 815, 830, 0, 267, 783,
	782, 270, 271, 272, 756, 808, 831, 832, 221, 0,
	273, 813, 0, 798, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 856, 286, 287, 288, 801, 799, 800, 805, 803,
	802, 804, 289, 290, 493, 291, 816, 1872, 833, 834,
	741, 294, 0, 295, 0, 296, 0, 0, 817, 298,
	0, 299, 300, 0, 0, 0, 746, 304, 301, 302,
	305, 308, 303, 309, 310, 835, 836, 768, 857, 0,
	0, 0, 0, 0, 311, 312, 837, 818, 819, 0,
	315, 0, 316, 0, 0, 858, 317, 0, 318, 838,
	0, 230, 0, 319, 320, 1873, 322, 323, 324, 810,
	812, 860, 0, 792, 0, 0, 0, 0, 325, 327,
	334, 0, 859, 328, 839, 796, 820, 821, 822, 823,
	840, 0, 797, 0, 335, 861, 862, 336, 337, 338,
	863, 824, 825, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 841, 864, 346, 347, 865, 0, 348, 349,
	0, 0, 350, 0, 351, 743, 742, 1874, 1871, 355,
	785, 354, 866, 357, 358, 360, 359, 738, 0, 867,
	769, 811, 361, 842, 362, 363, 0, 794, 795, 0,
	0, 366, 367, 0, 0, 368, 239, 868, 369, 869,
	843, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	844, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	845, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 870,
	400, 401, 402, 403, 747, 404, 0, 408, 409, 410,
	411, 412, 413, 1875, 0, 420, 421, 786, 787, 788,
	789, 416, 422, 423, 806, 424, 405, 406, 425, 871,
	426, 846, 790, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 826, 433, 434, 435, 847, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 784,
	448, 0, 848, 849, 850, 827, 0, 0, 450, 451,
	851, 852, 767, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 1870, 470, 739, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 1866, 751, 1869, 761, 762, 759,
	760, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 809, 755, 0, 0, 0, 261, 262, 263,
	215, 828, 793, 829, 781, 815, 830, 0, 267, 783,
	782, 270, 271, 272, 756, 808, 831, 832, 221, 0,
	273, 813, 0, 798, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 856, 286, 287, 288, 801, 799, 800, 805, 803,
	802, 804, 289, 290, 493, 291, 816, 1872, 833, 834,
	741, 294, 0, 295, 0, 296, 0, 0, 817, 298,
	0, 299, 300, 0, 0, 0, 746, 304, 301, 302,
	305, 308, 303, 309, 310, 835, 836, 768, 857, 0,
	0, 0, 0, 0, 311, 312, 837, 818, 819, 0,
	315, 0, 316, 0, 0, 858, 317, 0, 318, 838,
	0, 230, 0, 319, 320, 1873, 322, 323, 324, 810,
	812, 860, 0, 792, 0, 0, 0, 0, 325, 327,
	334, 0, 859, 328, 839, 796, 820, 821, 822, 823,
	840, 0, 797, 0, 335, 861, 862, 336, 337, 338,
	863, 824, 825, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 841, 864, 346, 347, 865, 0, 348, 349,
	0, 0, 350, 0, 351, 743, 742, 1874, 1871, 355,
	785, 354, 866, 357, 358, 360, 359, 738, 0, 867,
	769, 811, 361, 842, 362, 363, 0, 794, 795, 0,
	0, 366, 367, 0, 0, 368, 239, 868, 369, 869,
	843, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	844, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	845, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 870,
	400, 401, 402, 403, 747, 404, 0, 408, 409, 410,
	411, 412, 413, 1875, 0, 420, 421, 786, 787, 788,
	789, 416, 422, 423, 806, 424, 405, 406, 425, 871,
	426, 846, 790, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 826, 433, 434, 435, 847, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 784,
	448, 0, 848, 849, 850, 827, 0, 0, 450, 451,
	851, 852, 767, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 1870, 470, 739, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 773, 761, 762, 759, 760, 752, 0, 748,
	0, 0, 0, 0, 0, 751, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 809, 755,
	0, 0, 0, 261, 262, 263, 215, 828, 793, 829,
	781, 815, 830, 0, 267, 783, 782, 270, 271, 272,
	756, 808, 831, 832, 221, 0, 273, 813, 0, 798,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 856, 286, 287,
	288, 801, 799, 800, 805, 803, 802, 804, 289, 290,
	493, 291, 816, 293, 833, 834, 741, 294, 0, 295,
	0, 296, 0, 0, 817, 298, 0, 299, 300, 0,
	0, 0, 746, 304, 301, 302, 305, 308, 303, 309,
	310, 835, 836, 768, 857, 0, 0, 0, 0, 0,
	311, 312, 837, 818, 819, 0, 315, 0, 316, 0,
	0, 858, 317, 0, 318, 838, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 810, 812, 860, 0, 792,
	0, 0, 0, 0, 325, 327, 334, 0, 859, 328,
	839, 796, 820, 821, 822, 823, 840, 0, 797, 0,
	335, 861, 862, 336, 337, 338, 863, 824, 825, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 841, 864,
	346, 347, 865, 0, 348, 349, 0, 0, 350, 0,
	351, 743, 742, 352, 353, 355, 785, 354, 866, 357,
	358, 360, 359, 738, 0, 867, 769, 811, 361, 842,
	362, 363, 0, 794, 795, 0, 0, 366, 367, 0,
	0, 368, 239, 868, 369, 869, 843, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 844, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 845, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 870, 400, 401, 402, 403,
	747, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 786, 787, 788, 789, 416, 422, 423,
	806, 424, 405, 406, 425, 871, 426, 846, 790, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 826, 433,
	434, 435, 847, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 784, 448, 0, 848, 849,
	850, 827, 0, 0, 450, 451, 851, 852, 767, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	807, 461, 0, 791, 462, 463, 464, 252, 853, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 739, 0, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 735, 736, 0, 0,
	0, 0, 0, 1362, 0, 748, 0, 0, 0, 0,
	0, 751, 773, 761, 762, 759, 760, 752, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 1718, 260, 0, 0, 0, 0, 809, 755,
	0, 0, 0, 261, 262, 263, 215, 828, 793, 829,
	781, 815, 830, 0, 267, 783, 782, 270, 271, 272,
	756, 808, 831, 832, 221, 0, 273, 813, 0, 798,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 856, 286, 287,
	288, 801, 799, 800, 805, 803, 802, 804, 289, 290,
	493, 291, 816, 293, 833, 834, 741, 294, 0, 295,
	0, 296, 0, 0, 817, 298, 0, 299, 300, 0,
	0, 0, 746, 304, 301, 302, 305, 308, 303, 309,
	310, 835, 836, 768, 857, 0, 0, 0, 0, 0,
	311, 312, 837, 818, 819, 0, 315, 0, 316, 0,
	0, 858, 317, 0, 318, 838, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 810, 812, 860, 0, 792,
	0, 0, 0, 0, 325, 327, 334, 0, 859, 328,
	839, 796, 820, 821, 822, 823, 840, 0, 797, 0,
	335, 861, 862, 336, 337, 338, 863, 824, 825, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 841, 864,
	346, 347, 865, 0, 348, 349, 0, 0, 350, 0,
	351, 743, 742, 352, 353, 355, 785, 354, 866, 357,
	358, 360, 359, 738, 0, 867, 769, 811, 361, 842,
	362, 363, 0, 794, 795, 0, 0, 366, 367, 0,
	0, 368, 239, 868, 369, 869, 843, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 844, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 845, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 870, 400, 401, 402, 403,
	747, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 786, 787, 788, 789, 416, 422, 423,
	806, 424, 405, 406, 425, 871, 426, 846, 790, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 826, 433,
	434, 435, 847, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 784, 448, 0, 848, 849,
	850, 827, 0, 0, 450, 451, 851, 852, 767, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	807, 461, 0, 791, 462, 463, 464, 252, 853, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 739, 0, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 735, 736, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	1069, 751, 773, 761, 762, 759, 760, 752, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 809, 755,
	0, 0, 0, 261, 262, 263, 215, 828, 793, 829,
	781, 815, 830, 0, 267, 783, 782, 270, 271, 272,
	756, 808, 831, 832, 221, 0, 273, 813, 0, 798,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 856, 286, 287,
	288, 801, 799, 800, 805, 803, 802, 804, 289, 290,
	493, 291, 816, 293, 833, 834, 741, 294, 0, 295,
	0, 296, 0, 0, 817, 298, 0, 299, 300, 0,
	0, 0, 746, 304, 301, 302, 305, 308, 303, 309,
	310, 835, 836, 768, 857, 0, 0, 0, 0, 0,
	311, 312, 837, 818, 819, 0, 315, 0, 316, 0,
	0, 858, 317, 0, 318, 838, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 1068, 812, 860, 0, 792,
	0, 0, 0, 0, 325, 327, 334, 0, 859, 328,
	839, 796, 820, 821, 822, 823, 840, 0, 797, 0,
	335, 861, 862, 336, 337, 338, 863, 824, 825, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 841, 864,
	346, 347, 865, 0, 348, 349, 0, 0, 350, 0,
	351, 743, 742, 352, 353, 355, 785, 354, 866, 357,
	358, 360, 359, 738, 0, 867, 769, 811, 361, 842,
	362, 363, 0, 794, 795, 0, 0, 366, 367, 0,
	0, 368, 239, 868, 369, 869, 843, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 844, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 845, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 870, 400, 401, 402, 403,
	747, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 786, 787, 788, 789, 416, 422, 423,
	806, 424, 405, 406, 425, 871, 426, 846, 790, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 826, 433,
	434, 435, 847, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 784, 448, 0, 848, 849,
	850, 827, 0, 0, 450, 451, 851, 852, 767, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	807, 461, 0, 791, 462, 463, 464, 252, 853, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 739, 0, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 735, 736, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	1063, 751, 773, 761, 762, 759, 760, 752, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 809, 755,
	0, 0, 0, 261, 262, 263, 215, 828, 793, 829,
	781, 815, 830, 0, 267, 783, 782, 270, 271, 272,
	756, 808, 831, 832, 221, 0, 273, 813, 0, 798,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 856, 286, 287,
	288, 801, 799, 800, 805, 803, 802, 804, 289, 290,
	493, 291, 816, 293, 833, 834, 741, 294, 0, 295,
	0, 296, 0, 0, 817, 298, 0, 299, 300, 0,
	0, 0, 746, 304, 301, 302, 305, 308, 303, 309,
	310, 835, 836, 768, 857, 0, 0, 0, 0, 0,
	311, 312, 837, 818, 819, 0, 315, 0, 316, 0,
	0, 858, 317, 0, 318, 838, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 1062, 812, 860, 0, 792,
	0, 0, 0, 0, 325, 327, 334, 0, 859, 328,
	839, 796, 820, 821, 822, 823, 840, 0, 797, 0,
	335, 861, 862, 336, 337, 338, 863, 824, 825, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 841, 864,
	346, 347, 865, 0, 348, 349, 0, 0, 350, 0,
	351, 743, 742, 352, 353, 355, 785, 354, 866, 357,
	358, 360, 359, 738, 0, 867, 769, 811, 361, 842,
	362, 363, 0, 794, 795, 0, 0, 366, 367, 0,
	0, 368, 239, 868, 369, 869, 843, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 844, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 845, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 870, 400, 401, 402, 403,
	747, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 786, 787, 788, 789, 416, 422, 423,
	806, 424, 405, 406, 425, 871, 426, 846, 790, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 826, 433,
	434, 435, 847, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 784, 448, 0, 848, 849,
	850, 827, 0, 0, 450, 451, 851, 852, 767, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	807, 461, 0, 791, 462, 463, 464, 252, 853, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 739, 0, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 735, 736, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	1058, 751, 773, 761, 762, 759, 760, 752, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 809, 755,
	0, 0, 0, 261, 262, 263, 215, 828, 793, 829,
	781, 815, 830, 0, 267, 783, 782, 270, 271, 272,
	756, 808, 831, 832, 221, 0, 273, 813, 0, 798,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 856, 286, 287,
	288, 801, 799, 800, 805, 803, 802, 804, 289, 290,
	493, 291, 816, 293, 833, 834, 741, 294, 0, 295,
	0, 296, 0, 0, 817, 298, 0, 299, 300, 0,
	0, 0, 746, 304, 301, 302, 305, 308, 303, 309,
	310, 835, 836, 768, 857, 0, 0, 0, 0, 0,
	311, 312, 837, 818, 819, 0, 315, 0, 316, 0,
	0, 858, 317, 0, 318, 838, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 810, 812, 860, 0, 792,
	0, 0, 0, 0, 325, 327, 334, 0, 859, 328,
	839, 796, 820, 821, 822, 823, 840, 0, 797, 0,
	335, 861, 862, 336, 337, 338, 863, 824, 825, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 841, 864,
	346, 347, 865, 0, 348, 349, 0, 0, 350, 0,
	351, 743, 742, 352, 353, 355, 785, 354, 866, 357,
	358, 360, 359, 738, 0, 867, 769, 811, 361, 842,
	362, 363, 0, 794, 795, 0, 0, 366, 367, 0,
	0, 368, 239, 868, 369, 869, 843, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 844, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 845, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 870, 400, 401, 402, 403,
	747, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 786, 787, 788, 789, 416, 422, 423,
	806, 424, 405, 406, 425, 871, 426, 846, 790, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 826, 433,
	434, 435, 847, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 784, 448, 0, 848, 849,
	850, 827, 0, 0, 450, 451, 851, 852, 767, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	807, 461, 0, 791, 462, 463, 464, 252, 853, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 739, 0, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 735, 736, 773, 761,
	762, 759, 760, 752, 0, 748, 0, 0, 0, 0,
	0, 751, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 809, 755, 0, 0, 0, 261,
	262, 263, 215, 828, 793, 829, 781, 815, 830, 0,
	267, 783, 782, 270, 271, 272, 756, 808, 831, 832,
	221, 0, 273, 813, 0, 798, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 856, 286, 287, 288, 801, 799, 800,
	805, 803, 802, 804, 289, 290, 493, 291, 816, 293,
	833, 834, 741, 294, 0, 295, 0, 296, 0, 0,
	817, 298, 0, 299, 300, 0, 0, 0, 746, 304,
	301, 302, 305, 308, 303, 309, 310, 835, 836, 768,
	857, 0, 0, 0, 0, 0, 311, 312, 837, 818,
	819, 0, 315, 0, 316, 0, 0, 858, 317, 0,
	318, 838, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 810, 812, 860, 0, 792, 0, 0, 0, 0,
	325, 327, 334, 0, 859, 328, 839, 796, 820, 821,
	822, 823, 840, 0, 797, 0, 335, 861, 862, 336,
	337, 338, 863, 824, 825, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 841, 864, 346, 347, 865, 0,
	348, 349, 0, 0, 350, 0, 351, 743, 742, 352,
	353, 355, 785, 354, 866, 357, 358, 360, 359, 738,
	0, 867, 769, 811, 361, 842, 362, 363, 0, 794,
	795, 0, 0, 366, 367, 0, 0, 368, 239, 868,
	369, 869, 843, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 844, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 845, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 870, 400, 401, 402, 403, 747, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 786,
	787, 788, 789, 416, 422, 423, 806, 424, 405, 406,
	425, 871, 426, 846, 790, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 826, 433, 434, 435, 847, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 784, 448, 0, 848, 849, 850, 827, 0, 0,
	450, 451, 851, 852, 767, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 807, 461, 0, 791,
	462, 463, 464, 252, 853, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 739,
	0, 0, 0, 0, 0, 0, 0, 737, 0, 0,
	0, 0, 735, 736, 773, 761, 762, 759, 760, 752,
	0, 748, 0, 0, 0, 0, 0, 751, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	809, 755, 0, 0, 0, 261, 262, 263, 215, 828,
	793, 829, 781, 815, 830, 0, 267, 783, 782, 270,
	271, 272, 756, 808, 831, 832, 221, 0, 273, 813,
	0, 798, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 856,
	286, 287, 3039, 801, 799, 800, 805, 803, 802, 804,
	289, 290, 493, 291, 816, 293, 833, 834, 741, 294,
	0, 295, 0, 296, 0, 0, 817, 298, 0, 299,
	300, 0, 0, 0, 746, 304, 301, 302, 305, 308,
	303, 309, 310, 835, 836, 768, 857, 0, 0, 0,
	0, 0, 311, 312, 837, 818, 819, 0, 315, 0,
	316, 0, 0, 858, 317, 0, 318, 838, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 810, 812, 860,
	0, 792, 0, 0, 0, 0, 325, 327, 334, 0,
	859, 328, 839, 796, 820, 821, 822, 823, 840, 0,
	797, 0, 335, 861, 862, 336, 337, 338, 863, 824,
	825, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	841, 864, 346, 347, 865, 0, 348, 349, 0, 0,
	350, 0, 351, 743, 742, 352, 353, 355, 785, 354,
	866, 357, 358, 360, 359, 738, 0, 867, 769, 811,
	361, 842, 362, 363, 0, 794, 795, 0, 0, 366,
	367, 0, 0, 368, 239, 868, 369, 869, 843, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 844, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 845, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 870, 400, 401,
	402, 403, 747, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 786, 787, 788, 789, 416,
	422, 423, 806, 424, 405, 406, 425, 871, 426, 846,
	790, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	826, 433, 434, 435, 847, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 784, 448, 0,
	848, 849, 850, 827, 0, 0, 450, 451, 851, 852,
	767, 452, 453, 0, 3038, 455, 0, 0, 456, 457,
	458, 460, 807, 461, 0, 791, 462, 463, 464, 252,
	853, 0, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 739, 0, 0, 0, 0,
	0, 0, 0, 737, 0, 0, 0, 0, 735, 736,
	773, 761, 762, 759, 760, 752, 0, 748, 0, 0,
	0, 0, 0, 751, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 809, 755, 0, 0,
	0, 261, 262, 263, 3037, 828, 793, 829, 781, 815,
	830, 0, 267, 783, 782, 270, 271, 272, 756, 808,
	831, 832, 221, 0, 273, 813, 0, 798, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 856, 286, 287, 3039, 801,
	799, 800, 805, 803, 802, 804, 289, 290, 493, 291,
	816, 293, 833, 834, 741, 294, 0, 295, 0, 296,
	0, 0, 817, 298, 0, 299, 300, 0, 0, 0,
	746, 304, 301, 302, 305, 308, 303, 309, 310, 835,
	836, 768, 857, 0, 0, 0, 0, 0, 311, 312,
	837, 818, 819, 0, 315, 0, 316, 0, 0, 858,
	317, 0, 318, 838, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 810, 812, 860, 0, 792, 0, 0,
	0, 0, 325, 327, 334, 0, 859, 328, 839, 796,
	820, 821, 822, 823, 840, 0, 797, 0, 335, 861,
	862, 336, 337, 338, 863, 824, 825, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 841, 864, 346, 347,
	865, 0, 348, 349, 0, 0, 350, 0, 351, 743,
	742, 352, 353, 355, 785, 354, 866, 357, 358, 360,
	359, 738, 0, 867, 769, 811, 361, 842, 362, 363,
	0, 794, 795, 0, 0, 366, 367, 0, 0, 368,
	239, 868, 369, 869, 843, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 844, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 845, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 870, 400, 401, 402, 403, 747, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 786, 787, 788, 789, 416, 422, 423, 806, 424,
	405, 406, 425, 871, 426, 846, 790, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 826, 433, 434, 435,
	847, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 784, 448, 0, 848, 849, 850, 827,
	0, 0, 450, 451, 851, 852, 767, 452, 453, 0,
	3038, 455, 0, 0, 456, 457, 458, 460, 807, 461,
	0, 791, 462, 463, 464, 252, 853, 0, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 739, 0, 0, 0, 0, 0, 0, 0, 737,
	0, 0, 0, 0, 735, 736, 773, 761, 762, 759,
	760, 752, 0, 748, 0, 0, 0, 0, 0, 751,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 809, 755, 0, 0, 0, 261, 262, 263,
	215, 828, 793, 829, 781, 815, 830, 0, 267, 783,
	782, 270, 271, 272, 756, 808, 831, 832, 221, 0,
	273, 813, 0, 798, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 856, 286, 287, 288, 801, 799, 800, 805, 803,
	802, 804, 289, 290, 493, 291, 816, 293, 833, 834,
	0, 294, 0, 295, 0, 296, 0, 0, 817, 298,
	0, 299, 300, 0, 0, 0, 746, 304, 301, 302,
	305, 308, 303, 309, 310, 835, 836, 768, 857, 0,
	0, 0, 0, 0, 311, 312, 837, 818, 819, 0,
	315, 0, 316, 0, 0, 858, 317, 0, 318, 838,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 810,
	812, 860, 0, 792, 0, 0, 0, 0, 325, 327,
	334, 0, 859, 328, 839, 796, 820, 821, 822, 823,
	840, 0, 797, 0, 335, 861, 862, 336, 337, 338,
	863, 824, 825, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 841, 864, 346, 347, 865, 0, 348, 349,
	0, 0, 350, 0, 351, 927, 926, 352, 353, 355,
	785, 354, 866, 357, 358, 360, 359, 0, 0, 867,
	769, 811, 361, 842, 362, 363, 0, 794, 795, 0,
	0, 366, 367, 0, 0, 368, 239, 868, 369, 869,
	843, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	844, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	845, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 870,
	400, 401, 402, 403, 747, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 786, 787, 788,
	789, 416, 422, 423, 806, 424, 405, 406, 425, 871,
	426, 846, 790, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 826, 433, 434, 435, 847, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 784,
	448, 0, 848, 849, 850, 827, 0, 0, 450, 451,
	851, 852, 767, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 773, 761, 762,
	759, 760, 752, 0, 0, 1892, 0, 0, 0, 0,
	1890, 1891, 0, 256, 257, 258, 259, 0, 260, 748,
	0, 0, 0, 809, 755, 751, 0, 0, 261, 262,
	263, 0, 828, 793, 829, 781, 815, 830, 0, 267,
	783, 782, 270, 271, 272, 756, 808, 831, 832, 221,
	0, 273, 813, 0, 798, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 856, 286, 287, 3039, 801, 799, 800, 805,
	803, 802, 804, 289, 290, 493, 291, 816, 293, 833,
	834, 741, 294, 0, 295, 0, 296, 0, 0, 817,
	298, 0, 299, 300, 0, 0, 0, 746, 304, 301,
	302, 305, 308, 303, 309, 310, 835, 836, 768, 857,
	0, 0, 0, 0, 0, 311, 312, 837, 818, 819,
	0, 315, 0, 316, 0, 0, 858, 317, 0, 318,
	838, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	810, 812, 0, 0, 792, 0, 0, 0, 0, 325,
	327, 334, 0, 859, 328, 839, 796, 820, 821, 822,
	823, 840, 0, 797, 0, 335, 0, 0, 336, 337,
	338, 863, 824, 825, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 841, 864, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 743, 742, 352, 353,
	355, 785, 354, 866, 357, 358, 360, 359, 738, 0,
	0, 769, 811, 361, 842, 362, 363, 0, 794, 795,
	0, 0, 366, 367, 0, 0, 368, 239, 868, 369,
	869, 843, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 844, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 845, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	870, 400, 401, 402, 403, 747, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 786, 787,
	788, 789, 416, 422, 423, 806, 424, 405, 406, 425,
	0, 426, 846, 790, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 826, 433, 434, 435, 847, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	784, 448, 0, 848, 849, 850, 827, 0, 0, 450,
	451, 851, 852, 767, 452, 453, 0, 3038, 455, 0,
	0, 456, 457, 458, 460, 807, 461, 0, 791, 462,
	463, 464, 252, 853, 0, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 723, 0, 923, 0, 0, 0,
	0, 735, 736, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 256, 257, 258, 259, 751, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 925, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 856, 286, 287, 288, 0, 918, 919, 0, 921,
	920, 922, 289, 290, 493, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 835, 836, 0, 857, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 858, 317, 0, 318, 838,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 860, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 859, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 861, 862, 336, 337, 338,
	863, 339, 340, 0, 0, 341, 342, 343, 910, 345,
	344, 0, 841, 864, 346, 347, 865, 0, 348, 349,
	0, 0, 350, 0, 351, 927, 926, 352, 353, 355,
	356, 354, 866, 357, 358, 360, 359, 0, 0, 867,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	916, 366, 367, 0, 0, 368, 239, 868, 369, 869,
	843, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	844, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 870,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 171, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 871,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 847, 0, 439, 440,
	173, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	851, 852, 0, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 1144, 253, 0, 0, 465, 254, 0, 0, 923,
	165, 466, 467, 255, 468, 469, 470, 0, 166, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 907, 0, 1448,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 925, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 856, 286, 287, 288, 0, 918,
	919, 0, 921, 920, 922, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 835, 836,
	0, 857, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 858, 317,
	0, 318, 838, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 860, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 859, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 861, 862,
	336, 337, 338, 863, 339, 340, 0, 0, 341, 342,
	343, 910, 345, 344, 0, 841, 864, 346, 347, 865,
	0, 348, 349, 0, 0, 350, 0, 351, 927, 926,
	352, 353, 355, 356, 354, 866, 357, 358, 360, 359,
	0, 0, 867, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 916, 366, 367, 0, 0, 368, 239,
	868, 369, 869, 843, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 844, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 870, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 171, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 871, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 847,
	0, 439, 440, 173, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 851, 852, 0, 452, 453, 0, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 1144, 253, 0, 0, 465, 254,
	0, 0, 923, 165, 466, 467, 255, 468, 469, 470,
	0, 166, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 809, 0,
	907, 0, 1448, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 808, 219, 220, 221, 0, 273, 813, 0, 798,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 856, 286, 287,
	288, 801, 799, 800, 805, 803, 802, 804, 289, 290,
	493, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 835, 836, 0, 857, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 858, 317, 0, 318, 838, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 810, 812, 860, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 859, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 861, 862, 336, 337, 338, 863, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 841, 864,
	346, 347, 865, 0, 348, 349, 0, 0, 350, 0,
	351, 927, 926, 352, 353, 355, 356, 354, 866, 357,
	358, 360, 359, 0, 0, 867, 0, 811, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 868, 369, 869, 843, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 844, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 870, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	806, 424, 405, 406, 425, 871, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 847, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 851, 852, 0, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	807, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 2276, 0, 923, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 2595, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 925, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	856, 286, 287, 288, 0, 918, 919, 0, 921, 920,
	922, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 835, 836, 0, 857, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 858, 317, 0, 318, 838, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	860, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 859, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 861, 862, 336, 337, 338, 863,
	339, 340, 0, 0, 341, 342, 343, 910, 345, 344,
	0, 841, 864, 346, 347, 865, 0, 348, 349, 0,
	0, 350, 0, 351, 927, 926, 352, 353, 355, 356,
	354, 866, 357, 358, 360, 359, 0, 0, 867, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 916,
	366, 367, 0, 0, 368, 239, 868, 369, 869, 843,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 844,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 870, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 871, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 847, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 851,
	852, 0, 452, 453, 0, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 906, 0, 923, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 907, 0, 914, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 925, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 856, 286, 287, 288, 0, 918, 919,
	0, 921, 920, 922, 289, 290, 493, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 835, 836, 0,
	857, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 858, 317, 0,
	318, 838, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 860, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 859, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 861, 862, 336,
	337, 338, 863, 339, 340, 0, 0, 341, 342, 343,
	910, 345, 344, 0, 841, 864, 346, 347, 865, 0,
	348, 349, 0, 0, 350, 0, 351, 927, 926, 352,
	353, 355, 356, 354, 866, 357, 358, 360, 359, 0,
	0, 867, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 916, 366, 367, 0, 0, 368, 239, 868,
	369, 869, 843, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 844, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 870, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 871, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 847, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 851, 852, 0, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 0,
	0, 923, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 907,
	0, 914, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 925, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 856, 286, 287, 288,
	0, 918, 919, 0, 921, 920, 922, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	835, 836, 0, 857, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	858, 317, 0, 318, 838, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 860, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 859, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	861, 862, 336, 337, 338, 863, 339, 340, 0, 0,
	341, 342, 343, 910, 345, 344, 0, 841, 864, 346,
	347, 865, 0, 348, 349, 0, 0, 350, 0, 351,
	927, 926, 352, 353, 355, 356, 354, 866, 357, 358,
	360, 359, 0, 0, 867, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 916, 366, 367, 0, 0,
	368, 239, 868, 369, 869, 843, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 844, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 870, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 871, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 847, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 851, 852, 0, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 0, 0, 923, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 907, 0, 914, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 925, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 856,
	286, 287, 288, 0, 918, 919, 0, 921, 920, 922,
	289, 290, 493, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 835, 836, 0, 857, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 858, 317, 0, 318, 838, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 860,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	859, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 861, 862, 336, 337, 338, 863, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	841, 864, 346, 347, 865, 0, 348, 349, 0, 0,
	350, 0, 351, 927, 926, 352, 353, 355, 356, 354,
	866, 357, 358, 360, 359, 0, 0, 867, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 868, 369, 869, 843, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 844, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 870, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 871, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 847, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 851, 852,
	0, 452, 453, 0, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 1141, 0, 948, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 1351, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 925, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 856, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 857,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 858, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 860, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 859, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 861, 862, 336, 337,
	338, 863, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 864, 346, 347, 865, 0, 348,
	349, 0, 0, 350, 0, 351, 927, 926, 352, 353,
	355, 356, 354, 866, 357, 358, 360, 359, 0, 0,
	867, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 868, 369,
	869, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	870, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 171, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	871, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 173, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 0, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 1144, 253, 0, 0, 465, 254, 723, 0,
	490, 165, 466, 467, 255, 468, 469, 470, 0, 166,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	138, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 493, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 171, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 173, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 0,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 1144, 253, 0, 0, 465,
	254, 0, 0, 0, 165, 466, 467, 255, 468, 469,
	470, 0, 166, 773, 761, 762, 759, 760, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 138, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 828, 793,
	829, 781, 815, 830, 0, 267, 783, 782, 270, 271,
	272, 0, 0, 831, 832, 221, 0, 273, 222, 0,
	925, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 856, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 816, 293, 833, 834, 0, 294, 0,
	295, 0, 296, 0, 0, 817, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 768, 857, 0, 0, 0, 0,
	0, 311, 312, 837, 818, 819, 0, 315, 0, 316,
	0, 0, 858, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 860, 0,
	792, 0, 0, 0, 0, 325, 327, 334, 0, 859,
	328, 839, 796, 820, 821, 822, 823, 840, 0, 797,
	0, 335, 861, 862, 336, 337, 338, 863, 824, 825,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	864, 346, 347, 865, 0, 348, 349, 0, 0, 350,
	0, 351, 927, 926, 352, 353, 355, 785, 354, 866,
	357, 358, 360, 359, 0, 0, 867, 769, 237, 361,
	842, 362, 363, 0, 794, 795, 0, 0, 366, 367,
	0, 0, 368, 239, 868, 369, 869, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 845, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 870, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 786, 787, 788, 789, 416, 422,
	423, 0, 424, 405, 406, 425, 871, 426, 846, 790,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 826,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 784, 448, 0, 848,
	849, 850, 827, 0, 0, 450, 451, 250, 251, 767,
	452, 453, 0, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 791, 462, 463, 464, 252, 853,
	490, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 493, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 0,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 0, 0, 490, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 2076, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 0, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	0, 0, 465, 254, 0, 0, 490, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 2509, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 493, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 1217, 0, 948,
	947, 0, 0, 0, 945, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 1452,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 925, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 856, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 857, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 858, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 860, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 859, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 861, 862,
	336, 337, 338, 863, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 864, 346, 347, 865,
	0, 348, 349, 0, 0, 350, 0, 351, 927, 926,
	352, 353, 355, 356, 354, 866, 357, 358, 360, 359,
	0, 0, 867, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	868, 369, 869, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 870, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 871, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 0, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	1137, 0, 948, 947, 0, 0, 0, 945, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 925,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 856, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	493, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 857, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 858, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 1136, 232, 860, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 859, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 861, 862, 336, 337, 338, 863, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 864,
	346, 347, 865, 0, 348, 349, 0, 0, 350, 0,
	351, 927, 926, 352, 353, 355, 356, 354, 866, 357,
	358, 360, 359, 0, 0, 867, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 868, 369, 869, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 870, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 871, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 1133, 0, 948, 947, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 925, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	856, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 857, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 858, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 1132, 232,
	860, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 859, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 861, 862, 336, 337, 338, 863,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 864, 346, 347, 865, 0, 348, 349, 0,
	0, 350, 0, 351, 927, 926, 352, 353, 355, 356,
	354, 866, 357, 358, 360, 359, 0, 0, 867, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 868, 369, 869, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 870, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 871, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 0, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 469, 470, 1094, 0, 948, 947,
	0, 0, 0, 945, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 925, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 856, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 493, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	857, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 858, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 1093, 232, 860, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 859, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 861, 862, 336,
	337, 338, 863, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 864, 346, 347, 865, 0,
	348, 349, 0, 0, 350, 0, 351, 927, 926, 352,
	353, 355, 356, 354, 866, 357, 358, 360, 359, 0,
	0, 867, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 868,
	369, 869, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 870, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 871, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 1091,
	0, 948, 947, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 925, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 856, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 857, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	858, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 1090, 232, 860, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 859, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	861, 862, 336, 337, 338, 863, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 864, 346,
	347, 865, 0, 348, 349, 0, 0, 350, 0, 351,
	927, 926, 352, 353, 355, 356, 354, 866, 357, 358,
	360, 359, 0, 0, 867, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 868, 369, 869, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 870, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 871, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 941, 0, 948, 947, 0, 0, 0, 945,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 925, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 856,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 493, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 857, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 858, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 943, 232, 860,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	859, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 861, 862, 336, 337, 338, 863, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 864, 346, 347, 865, 0, 348, 349, 0, 0,
	350, 0, 351, 927, 926, 352, 353, 355, 356, 354,
	866, 357, 358, 360, 359, 0, 0, 867, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 868, 369, 869, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 870, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 871, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 0, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 948, 947, 465, 254, 0, 945, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 925, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 856, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 857, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	858, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 860, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 859, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	861, 862, 336, 337, 338, 863, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 864, 346,
	347, 865, 0, 348, 349, 0, 0, 350, 0, 351,
	927, 926, 352, 353, 355, 356, 354, 866, 357, 358,
	360, 359, 0, 0, 867, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 868, 369, 869, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 870, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 871, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 948, 947,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 925, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 856, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 493, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	857, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 858, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 860, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 859, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 861, 862, 336,
	337, 338, 863, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 864, 346, 347, 865, 0,
	348, 349, 0, 0, 350, 0, 351, 927, 926, 352,
	353, 355, 356, 354, 866, 357, 358, 360, 359, 0,
	0, 867, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 868,
	369, 869, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 870, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 871, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 948, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 925, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	856, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 857, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 858, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	860, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 859, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 861, 862, 336, 337, 338, 863,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 864, 346, 347, 865, 0, 348, 349, 0,
	0, 350, 0, 351, 927, 926, 352, 353, 355, 356,
	354, 866, 357, 358, 360, 359, 0, 0, 867, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 868, 369, 869, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 870, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 871, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 0, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 591, 0, 207, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 213, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 212, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 206,
	0, 207, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 473, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 213,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 212, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 207, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 473, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 213, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 1687, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 212, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 207, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 473, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 213, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 212,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 0, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 490, 0, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 473, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	493, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 490,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 473, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 1969, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 1966, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 2046, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 1972, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	2044, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 2043, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 1971, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 0, 454,
	455, 0, 2045, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 490, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 1969,
	273, 222, 0, 0, 1963, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 1966, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 493, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 1972, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 1962,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 1971, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 0, 454, 455, 0, 1970,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 598, 0, 490,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 597, 577,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 580, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	581, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 582, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 0, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	576, 0, 490, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 577, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 580, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	493, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 581, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	582, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 490,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 580, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	581, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 582, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 0, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	1112, 0, 490, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	493, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 916, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 936, 0, 490, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 938, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 916,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 0, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 933, 0, 490, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 493, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 935, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 916, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 929,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 931, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 916, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 513, 0, 490, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 512, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 493, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 511, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 0, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 490, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 1949,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 490, 2432,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 493, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 490, 2432, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 2429, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 0, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 490, 0, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	493, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 916, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 1707, 0, 490, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 0, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 1705, 0, 490, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 493, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 1703,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 490, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 256, 257, 258, 259, 1680, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 493, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 1640,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 1638, 0, 490, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 493, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 0, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 624, 0, 490, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 1190,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 625, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	621, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 620, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 0, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 0, 0, 465, 254, 1536, 0,
	490, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 493, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 1535, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 0,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 624, 0, 490, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 1190, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 625, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 621, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 620,
	248, 249, 449, 0, 0, 450, 1191, 250, 251, 0,
	452, 453, 0, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	0, 0, 465, 254, 624, 0, 490, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	614, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 493, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 625, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 621,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 1162, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 620, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 1130, 0, 490,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 1129, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 0, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	1126, 0, 490, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	493, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 1125, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 1123, 0, 490, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 1122, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 0, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 1120, 0, 490, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 493, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 1119, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 1116,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 1115, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 490, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 256, 257, 258, 259, 1104, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 493, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 1102,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 1101, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 1096, 0, 490, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 493, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 0, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 1087, 0, 490, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	1086, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 0, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 0, 0, 465, 254, 1082, 0,
	490, 0, 466, 467, 255, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 493, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 0,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 1078, 0, 490, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 1080, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 0, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	0, 0, 465, 254, 955, 0, 490, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 493, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 957,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 424, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 952, 0, 490,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 0, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 0, 0, 465, 254,
	624, 0, 490, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 614, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	493, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 231, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 613, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 625, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	615, 404, 0, 408, 409, 621, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 616, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 620, 248,
	249, 449, 0, 0, 450, 618, 250, 251, 0, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 604, 0, 490, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 605, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 0, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 0, 0, 465, 254, 600, 0, 490, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 493, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 231, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 589,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 0, 0,
	465, 254, 535, 0, 490, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 261, 262, 263, 215, 216,
	264, 217, 265, 266, 218, 0, 267, 268, 269, 270,
	271, 272, 0, 0, 219, 220, 221, 0, 273, 222,
	0, 0, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 493, 291, 292, 293, 223, 224, 0, 294,
	0, 295, 0, 296, 0, 0, 297, 298, 0, 299,
	300, 0, 0, 0, 225, 304, 301, 302, 305, 308,
	303, 309, 310, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 311, 312, 228, 313, 314, 0, 315, 0,
	316, 0, 0, 0, 317, 0, 318, 229, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 231, 232, 0,
	0, 326, 0, 0, 0, 0, 325, 327, 334, 0,
	0, 328, 233, 330, 329, 331, 332, 333, 234, 0,
	235, 0, 335, 0, 0, 336, 337, 338, 0, 339,
	340, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	236, 0, 346, 347, 0, 0, 348, 349, 0, 0,
	350, 0, 351, 0, 0, 352, 353, 355, 356, 354,
	0, 357, 358, 360, 359, 0, 0, 0, 0, 237,
	361, 238, 362, 363, 0, 364, 365, 0, 0, 366,
	367, 0, 0, 368, 239, 0, 369, 0, 240, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 241, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 243, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 244, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 0, 424, 405, 406, 425, 0, 426, 245,
	427, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	437, 433, 434, 435, 246, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 447, 448, 0,
	247, 248, 249, 449, 0, 0, 450, 451, 250, 251,
	0, 452, 453, 0, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 490, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	0, 454, 455, 0, 0, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 252, 253, 490, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 261,
	262, 263, 215, 216, 264, 217, 265, 266, 218, 0,
	267, 268, 269, 270, 271, 272, 0, 0, 219, 220,
	221, 0, 273, 222, 0, 0, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 0, 286, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 493, 291, 292, 293,
	223, 224, 0, 294, 0, 295, 0, 296, 0, 0,
	297, 298, 0, 299, 300, 0, 0, 0, 225, 304,
	301, 302, 305, 308, 303, 309, 310, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 311, 312, 228, 313,
	314, 0, 315, 0, 316, 0, 0, 0, 317, 0,
	318, 229, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 2333, 232, 0, 0, 326, 0, 0, 0, 0,
	325, 327, 334, 0, 0, 328, 233, 330, 329, 331,
	332, 333, 234, 0, 235, 0, 335, 0, 0, 336,
	337, 338, 0, 339, 340, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 236, 0, 346, 347, 0, 0,
	348, 349, 0, 0, 350, 0, 351, 0, 0, 352,
	353, 355, 356, 354, 0, 357, 358, 360, 359, 0,
	0, 0, 0, 237, 361, 238, 362, 363, 0, 364,
	365, 0, 0, 366, 367, 0, 0, 368, 239, 0,
	369, 0, 240, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 241, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 243, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 244, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 0, 424, 405, 406,
	425, 0, 426, 245, 427, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 437, 433, 434, 435, 246, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 447, 448, 0, 247, 248, 249, 449, 0, 0,
	450, 451, 250, 251, 0, 452, 453, 0, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 490, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 2331, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 0, 454, 455, 0, 0, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	252, 253, 490, 0, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 469, 470, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 0, 267, 268, 269, 270, 271, 272,
	0, 0, 219, 220, 221, 0, 273, 222, 0, 0,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 0, 286, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 290,
	493, 291, 292, 293, 223, 224, 0, 294, 0, 295,
	0, 296, 0, 0, 297, 298, 0, 299, 300, 0,
	0, 0, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 0, 316, 0,
	0, 0, 317, 0, 318, 229, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 2320, 232, 0, 0, 326,
	0, 0, 0, 0, 325, 327, 334, 0, 0, 328,
	233, 330, 329, 331, 332, 333, 234, 0, 235, 0,
	335, 0, 0, 336, 337, 338, 0, 339, 340, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 236, 0,
	346, 347, 0, 0, 348, 349, 0, 0, 350, 0,
	351, 0, 0, 352, 353, 355, 356, 354, 0, 357,
	358, 360, 359, 0, 0, 0, 0, 237, 361, 238,
	362, 363, 0, 364, 365, 0, 0, 366, 367, 0,
	0, 368, 239, 0, 369, 0, 240, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 241, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 243, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	0, 424, 405, 406, 425, 0, 426, 245, 427, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 0, 247, 248,
	249, 449, 0, 0, 450, 451, 250, 251, 0, 452,
	453, 0, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 490,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	605, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 0, 454,
	455, 0, 0, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 252, 253, 490, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 214, 0, 1549, 0, 0, 261, 262, 263,
	215, 216, 264, 217, 265, 266, 218, 0, 267, 268,
	269, 270, 271, 272, 0, 0, 219, 220, 221, 0,
	273, 222, 0, 0, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 289, 290, 493, 291, 292, 293, 223, 224,
	0, 294, 0, 295, 0, 296, 0, 0, 297, 298,
	0, 299, 300, 0, 0, 0, 225, 304, 301, 302,
	305, 308, 303, 309, 310, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 311, 312, 228, 313, 314, 0,
	315, 0, 316, 0, 0, 0, 317, 0, 318, 229,
	0, 230, 0, 319, 320, 321, 322, 323, 324, 231,
	232, 0, 0, 326, 0, 0, 0, 0, 325, 327,
	334, 0, 0, 328, 233, 330, 329, 331, 332, 333,
	234, 0, 235, 0, 335, 0, 0, 336, 337, 338,
	0, 339, 340, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 236, 0, 346, 347, 0, 0, 348, 349,
	0, 0, 350, 0, 351, 0, 0, 352, 353, 355,
	356, 354, 0, 357, 358, 360, 359, 0, 0, 0,
	0, 237, 361, 238, 362, 363, 0, 364, 365, 0,
	0, 366, 367, 0, 0, 368, 239, 0, 369, 0,
	240, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	241, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	243, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 244, 404, 0, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 0, 0, 405, 406, 425, 0,
	426, 245, 427, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 437, 433, 434, 435, 246, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 447,
	448, 0, 247, 248, 249, 449, 0, 0, 450, 451,
	250, 251, 0, 452, 453, 0, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 490, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 1540, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 0, 454, 455, 0, 0, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 252, 253,
	490, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 261, 262, 263, 215, 216, 264, 217, 265, 266,
	218, 0, 267, 268, 269, 270, 271, 272, 0, 0,
	219, 220, 221, 0, 273, 222, 0, 0, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 0, 286, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 493, 291,
	292, 293, 223, 224, 0, 294, 0, 295, 0, 296,
	0, 0, 297, 298, 0, 299, 300, 0, 0, 0,
	225, 304, 301, 302, 305, 308, 303, 309, 310, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 311, 312,
	228, 313, 314, 0, 315, 0, 316, 0, 0, 0,
	317, 0, 318, 229, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 231, 232, 0, 0, 326, 0, 0,
	0, 0, 325, 327, 334, 0, 0, 328, 233, 330,
	329, 331, 332, 333, 234, 0, 235, 0, 335, 0,
	0, 336, 337, 338, 0, 339, 340, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 236, 0, 346, 347,
	0, 0, 348, 349, 0, 0, 350, 0, 351, 0,
	0, 352, 353, 355, 356, 354, 0, 357, 358, 360,
	359, 0, 0, 0, 0, 237, 361, 238, 362, 363,
	0, 364, 365, 0, 0, 366, 367, 0, 0, 368,
	239, 0, 369, 0, 240, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 241, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 243, 889, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 244, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 0, 424,
	405, 406, 425, 0, 426, 245, 427, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 437, 433, 434, 435,
	246, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 447, 448, 0, 247, 248, 249, 449,
	0, 0, 450, 451, 250, 251, 0, 452, 453, 0,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 490, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 0, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 0,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 0, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 0, 454, 455, 0,
	0, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 252, 253, 0, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 1288, 1289,
	0, 1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 1291, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 1289, 0, 1321,
	1322, 1323, 1331, 1332, 1333, 0, 0, 0, 1290, 0,
	0, 0, 0, 0, 1324, 0, 1310, 0, 0, 0,
	0, 1291, 0, 1307, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 0, 0, 0,
	0, 1307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 1314, 1315, 1316,
	0, 0, 0, 0, 0, 1296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1328, 1338, 0,
	1318, 1319, 1320, 0, 1313, 1314, 1315, 1316, 0, 0,
	0, 0, 0, 1296, 0, 0, 0, 0, 0, 0,
	0, 1334, 1335, 0, 0, 0, 0, 0, 0, 1305,
	1306, 0, 0, 0, 0, 1328, 1338, 0, 1318, 1319,
	1320, 0, 1326, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1334,
	1335, 0, 0, 0, 0, 1336, 0, 1305, 1306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	1326, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1317, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1317, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 1288, 1289, 0,
	1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0, 0,
	0, 0, 0, 1329, 0, 1324, 0, 0, 0, 0,
	0, 0, 1291, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 0, 1327, 0, 1310, 1302, 1303, 1309, 1308,
	1304, 1330, 1307, 1301, 1299, 1300, 1292, 1293, 1294, 1295,
	1297, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	2212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304, 1330,
	0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298,
	0, 0, 0, 0, 3002, 1313, 1314, 1315, 1316, 0,
	0, 0, 0, 0, 1296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 1289, 0, 1321, 1322, 1323,
	1331, 1332, 1333, 0, 0, 0, 1328, 1338, 0, 1318,
	1319, 1320, 1324, 0, 0, 0, 0, 0, 0, 1291,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1305, 1306,
	0, 0, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 1326, 1310, 0, 0, 0, 0, 0, 1311, 1307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 1314, 1315, 1316, 0, 0, 0, 0,
	0, 1296, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 1328, 1338, 0, 1318, 1319, 1320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1329, 0, 0, 1334, 1335, 0,
	0, 0, 0, 0, 0, 1305, 1306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1326, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304,
	1330, 0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297,
	1298, 1317, 0, 0, 0, 2998, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 0,
	1288, 1289, 0, 1321, 1322, 1323, 1331, 1332, 1333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 1329, 0, 0, 0, 1291, 0, 0, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 0, 0, 0, 0, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1327,
	0, 0, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301,
	1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298, 1313, 1314,
	1315, 1316, 2938, 0, 0, 0, 0, 1296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 1289, 0,
	1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0, 1328,
	1338, 0, 1318, 1319, 1320, 1324, 0, 0, 0, 0,
	0, 0, 1291, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 1334, 1335, 0, 0, 0, 0, 0,
	0, 1305, 1306, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 0, 0, 1326, 1310, 0, 0, 0, 0,
	0, 1311, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1314, 1315, 1316, 0,
	0, 0, 0, 0, 1296, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 1328, 1338, 0, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1305, 1306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 1302, 1303,
	1309, 1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293,
	1294, 1295, 1297, 1298, 1317, 0, 0, 0, 2887, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 1288, 1289, 0, 1321, 1322, 1323, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 1329, 0, 0, 0, 1291, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 0, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304,
	1330, 0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297,
	1298, 1313, 1314, 1315, 1316, 2849, 0, 0, 0, 0,
	1296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 1289, 0, 1321, 1322, 1323, 1331, 1332, 1333, 0,
	0, 0, 1328, 1338, 0, 1318, 1319, 1320, 1324, 0,
	0, 0, 0, 0, 0, 1291, 0, 0, 1337, 0,
	0, 0, 0, 0, 0, 0, 1334, 1335, 0, 0,
	0, 0, 0, 0, 1305, 1306, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 1326, 1310, 0,
	0, 0, 0, 0, 1311, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 1314,
	1315, 1316, 0, 0, 0, 0, 0, 1296, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 1328,
	1338, 0, 1318, 1319, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1329, 0, 0, 1334, 1335, 0, 0, 0, 0, 0,
	0, 1305, 1306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1326, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301, 1299,
	1300, 1292, 1293, 1294, 1295, 1297, 1298, 1317, 0, 0,
	0, 2761, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 1288, 1289, 0, 1321,
	1322, 1323, 1331, 1332, 1333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1324, 0, 0, 1329, 0, 0,
	0, 1291, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 0, 0, 0,
	0, 1307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 1302, 1303,
	1309, 1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293,
	1294, 1295, 1297, 1298, 1313, 1314, 1315, 1316, 2718, 0,
	0, 0, 0, 1296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1288, 1289, 0, 1321, 1322, 1323, 1331,
	1332, 1333, 0, 0, 0, 1328, 1338, 0, 1318, 1319,
	1320, 1324, 0, 0, 0, 0, 0, 0, 1291, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 1334,
	1335, 0, 0, 0, 0, 0, 0, 1305, 1306, 0,
	0, 0, 0, 1290, 0, 0, 0, 0, 0, 0,
	1326, 1310, 0, 0, 0, 0, 0, 1311, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 1314, 1315, 1316, 0, 0, 0, 0, 0,
	1296, 0, 0, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 1328, 1338, 0, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 0, 0, 1334, 1335, 0, 0,
	0, 0, 0, 0, 1305, 1306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304, 1330,
	0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298,
	1317, 0, 0, 0, 2717, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 1288,
	1289, 0, 1321, 1322, 1323, 1331, 1332, 1333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	1329, 0, 0, 0, 1291, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1290,
	0, 0, 0, 0, 0, 0, 0, 1310, 0, 0,
	0, 0, 0, 0, 1307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301, 1299,
	1300, 1292, 1293, 1294, 1295, 1297, 1298, 1313, 1314, 1315,
	1316, 2691, 0, 0, 0, 0, 1296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 1289, 0, 1321,
	1322, 1323, 1331, 1332, 1333, 0, 0, 0, 1328, 1338,
	0, 1318, 1319, 1320, 1324, 0, 0, 0, 0, 0,
	0, 1291, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 1334, 1335, 0, 0, 0, 0, 0, 0,
	1305, 1306, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 1326, 1310, 0, 0, 0, 0, 0,
	1311, 1307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1313, 1314, 1315, 1316, 0, 0,
	0, 0, 0, 1296, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 1328, 1338, 0, 1318, 1319,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 1334,
	1335, 0, 0, 0, 0, 0, 0, 1305, 1306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 1302, 1303, 1309,
	1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293, 1294,
	1295, 1297, 1298, 1317, 0, 0, 0, 2513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 1288, 1289, 0, 1321, 1322, 1323, 1331, 1332,
	1333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 0, 1329, 0, 0, 0, 1291, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 0,
	1310, 0, 0, 0, 0, 0, 0, 1307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304, 1330,
	0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298,
	1313, 1314, 1315, 1316, 2486, 0, 0, 0, 0, 1296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	1289, 0, 1321, 1322, 1323, 1331, 1332, 1333, 0, 0,
	0, 1328, 1338, 0, 1318, 1319, 1320, 1324, 0, 0,
	0, 0, 0, 0, 1291, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 1334, 1335, 0, 0, 0,
	0, 0, 0, 1305, 1306, 0, 0, 0, 0, 1290,
	0, 0, 0, 0, 0, 0, 1326, 1310, 0, 0,
	0, 0, 0, 1311, 1307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 1314, 1315,
	1316, 0, 0, 0, 0, 0, 1296, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 1328, 1338,
	0, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 1334, 1335, 0, 0, 0, 0, 0, 0,
	1305, 1306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1326, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	1302, 1303, 1309, 1308, 1304, 1330, 0, 1301, 1299, 1300,
	1292, 1293, 1294, 1295, 1297, 1298, 1317, 0, 0, 0,
	1817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 1288,
	1289, 0, 1321, 1322, 1323, 1331, 1332, 1333, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 1324, 0, 0,
	0, 0, 0, 0, 1291, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 1289,
	0, 1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 1290,
	0, 0, 0, 0, 0, 0, 1324, 1310, 0, 0,
	0, 0, 0, 1291, 1307, 0, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 0, 1327, 0, 1310, 1302, 1303, 1309,
	1308, 1304, 1330, 1307, 1301, 1299, 1300, 1292, 1293, 1294,
	1295, 1297, 1298, 0, 0, 2179, 0, 1313, 1314, 1315,
	1316, 0, 0, 0, 0, 0, 1296, 3080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1328, 1338,
	0, 1318, 1319, 1320, 0, 0, 1313, 1314, 1315, 1316,
	0, 0, 0, 0, 0, 1296, 0, 2259, 0, 0,
	2258, 0, 1334, 1335, 0, 0, 0, 0, 0, 0,
	1305, 1306, 0, 0, 0, 0, 0, 1328, 1338, 0,
	1318, 1319, 1320, 1326, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1334, 1335, 0, 0, 0, 1336, 0, 0, 1305,
	1306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 1326, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 0, 0, 3079, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1317, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1288, 1289, 0, 1321, 1322, 1323, 1331,
	1332, 1333, 0, 0, 0, 1317, 1329, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 2154, 0, 1291, 0,
	0, 1337, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 0, 1329, 0, 0, 0, 0,
	0, 1310, 0, 0, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 2155, 0, 1302, 1303, 1309,
	1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293, 1294,
	1295, 1297, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 1314, 1315, 1316, 0, 0, 0, 0, 0,
	1296, 0, 0, 1327, 0, 0, 1302, 1303, 1309, 1308,
	1304, 1330, 0, 1301, 1299, 1300, 1292, 1293, 1294, 1295,
	1297, 1298, 1328, 1338, 0, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 1335, 0, 0,
	0, 0, 0, 0, 1305, 1306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1918, 0, 0, 0, 0, 0, 1288, 1289,
	0, 1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 1324, 0, 0, 0,
	1917, 0, 0, 1291, 0, 0, 1337, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 1289, 0, 1321,
	1322, 1323, 1331, 1332, 1333, 0, 0, 0, 1290, 0,
	1329, 0, 0, 0, 1324, 0, 1310, 0, 0, 0,
	0, 1291, 0, 1307, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 0, 0, 0,
	0, 1307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 1314, 1315, 1316,
	0, 0, 0, 0, 0, 1296, 0, 0, 1327, 0,
	0, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301, 1299,
	1300, 1292, 1293, 1294, 1295, 1297, 1298, 1328, 1338, 0,
	1318, 1319, 1320, 0, 1313, 1314, 1315, 1316, 0, 0,
	0, 0, 0, 1296, 0, 0, 0, 0, 0, 0,
	0, 1334, 1335, 0, 0, 0, 0, 0, 0, 1305,
	1306, 0, 0, 0, 0, 1328, 1338, 0, 1318, 1319,
	1320, 0, 1326, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1334,
	1335, 0, 0, 0, 0, 1336, 0, 1305, 1306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	1326, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1317, 0, 1325, 720, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 1288, 1289, 0, 1321, 1322, 1323, 1331, 1332, 1333,
	0, 0, 0, 1317, 0, 1329, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 1291, 0, 0, 1337,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1290, 0, 1329, 0, 0, 0, 0, 0, 1310,
	0, 0, 0, 0, 0, 0, 1307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 1302, 1303, 1309, 1308,
	1304, 1330, 0, 1301, 1299, 1300, 1292, 1293, 1294, 1295,
	1297, 1298, 0, 0, 0, 0, 0, 0, 0, 1313,
	1314, 1315, 1316, 0, 0, 0, 0, 0, 1296, 0,
	0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304, 1330,
	0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298,
	1328, 1338, 0, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1334, 1335, 0, 0, 0, 0,
	0, 0, 1305, 1306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 1289, 0, 1321,
	1322, 1323, 1331, 1332, 1333, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 1291, 0, 0, 1337, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 1289, 0, 1321, 1322, 1323,
	1331, 1332, 1333, 0, 0, 0, 1290, 0, 1329, 0,
	0, 0, 1324, 0, 1310, 0, 2264, 0, 0, 1291,
	0, 1307, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2490, 0, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 0, 1310, 0, 0, 0, 0, 0, 0, 1307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1313, 1314, 1315, 1316, 0, 0,
	0, 0, 0, 1296, 0, 0, 1327, 0, 2269, 1302,
	1303, 1309, 1308, 1304, 1330, 0, 1301, 1299, 1300, 1292,
	1293, 1294, 1295, 1297, 1298, 1328, 1338, 0, 1318, 1319,
	1320, 0, 1313, 1314, 1315, 1316, 0, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 1334,
	1335, 0, 0, 0, 0, 0, 0, 1305, 1306, 0,
	0, 0, 0, 1328, 1338, 0, 1318, 1319, 1320, 0,
	1326, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1334, 1335, 0,
	0, 0, 0, 1336, 0, 1305, 1306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1325, 1326, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1317, 0, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	1289, 0, 1321, 1322, 1323, 1331, 1332, 1333, 0, 0,
	0, 1317, 0, 1329, 0, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 1291, 0, 0, 1337, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1290,
	0, 1329, 0, 0, 0, 0, 0, 1310, 0, 0,
	0, 0, 0, 0, 1307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304, 1330,
	0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298,
	0, 0, 0, 0, 0, 0, 0, 1313, 1314, 1315,
	1316, 0, 0, 0, 0, 0, 1296, 0, 0, 1327,
	0, 0, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301,
	1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298, 1328, 1338,
	0, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1334, 1335, 0, 0, 0, 0, 0, 0,
	1305, 1306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1326, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2227, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 1289, 0, 1321, 1322, 1323,
	1331, 1332, 1333, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 1324, 0, 0, 0, 2211, 0, 0, 1291,
	0, 0, 1337, 1312, 0, 0, 0, 0, 0, 0,
	0, 0, 1288, 1289, 0, 1321, 1322, 1323, 1331, 1332,
	1333, 0, 0, 0, 1290, 0, 1329, 0, 0, 0,
	1324, 0, 1310, 0, 0, 0, 0, 1291, 0, 1307,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 0,
	1310, 0, 0, 0, 0, 0, 0, 1307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 1314, 1315, 1316, 0, 0, 0, 0,
	0, 1296, 0, 0, 1327, 0, 0, 1302, 1303, 1309,
	1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293, 1294,
	1295, 1297, 1298, 1328, 1338, 0, 1318, 1319, 1320, 0,
	1313, 1314, 1315, 1316, 0, 0, 0, 0, 0, 1296,
	0, 0, 0, 0, 0, 0, 0, 1334, 1335, 0,
	0, 0, 0, 0, 0, 1305, 1306, 0, 0, 0,
	0, 1328, 1338, 0, 1318, 1319, 1320, 0, 1326, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 1335, 0, 0, 0,
	0, 1336, 0, 1305, 1306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 1326, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1317, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 1289, 0,
	1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0, 1317,
	0, 1329, 0, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 1291, 0, 0, 1337, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 1329,
	0, 0, 0, 0, 0, 1310, 0, 0, 0, 0,
	0, 0, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1327,
	0, 0, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301,
	1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298, 0, 0,
	0, 0, 0, 0, 0, 1313, 1314, 1315, 1316, 0,
	0, 0, 0, 0, 1296, 0, 0, 1327, 0, 0,
	1302, 1303, 1309, 1308, 1304, 1330, 0, 1301, 1299, 1300,
	1292, 1293, 1294, 1295, 1297, 1298, 1328, 1338, 0, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 1288, 1289, 0,
	1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0, 0,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1305, 1306,
	0, 0, 1291, 0, 0, 1337, 0, 0, 0, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 0, 0, 1336, 1310, 0, 0, 0, 0,
	0, 0, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1314, 1315, 1316, 0,
	0, 1312, 0, 0, 1296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 1289, 0, 1321, 1322, 1323,
	1331, 1332, 1333, 0, 1329, 0, 1328, 1338, 0, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 1291,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1305, 1306,
	0, 0, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 1326, 1310, 0, 0, 0, 0, 0, 1311, 1307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304,
	1330, 0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 1314, 1315, 1316, 0, 0, 0, 0,
	0, 1296, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1600, 0, 0, 0, 0, 0,
	0, 1312, 0, 1328, 1338, 0, 1318, 1319, 1320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1329, 0, 0, 0, 0, 1611,
	1596, 1601, 1584, 1621, 1620, 1305, 1306, 1586, 1585, 0,
	0, 0, 0, 0, 1630, 1629, 0, 0, 1326, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1622, 0, 1618, 1617, 0, 0,
	0, 0, 0, 0, 0, 0, 1616, 0, 0, 0,
	0, 0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304,
	1330, 0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297,
	1298, 1317, 0, 0, 1615, 1613, 1614, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1595, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1329, 1604, 1599, 1605, 1606, 1607, 1608, 1609, 0,
	1603, 0, 0, 0, 0, 0, 0, 0, 0, 1627,
	1628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1619, 0, 0, 0, 1597, 1598, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1327,
	0, 0, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301,
	1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298, 1612, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1589, 1590, 1591, 1592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1610,
	1593, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1632, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1587, 0, 0,
	1623, 1624, 1625, 1626, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1594, 0, 0, 0, 0,
	1631,
}
var sqlPact = [...]int{

	543, -1000, -7, -1000, -1000, -1000, 221, -1000, -1000, -1000,
	-1000, 218, 217, 215, -1000, 214, 213, 212, 210, 208,
	206, 204, 202, 200, 196, 191, 190, -1000, -1000, 183,
	-1000, -1000, -1000, -1000, 182, 181, 180, -1000, 172, 1591,
	31247, 171, 166, 165, 2098, 48787, 1511, 158, 153, -1000,
	152, 2971, 36190, 1082, 1396, -1000, 150, 149, 2752, 48410,
	4076, 2021, 33898, 1385, 1987, 48027, 30864, 1918, 33515, 47644,
	-1000, -1000, 1094, -1000, -1000, 47261, 147, 142, 141, 139,
	135, -1000, 126, 46878, 124, 123, 122, 121, 117, 107,
	104, 103, -1000, 102, 101, 100, 99, 90, 88, 87,
	82, 79, 76, 74, 73, 68, 67, 60, 58, -1000,
	5806, 57, 56, 54, -1000, 1383, 52, 51, 49, 48,
	46, -1000, -1000, 45, 44, 43, 40, 38, 37, -1000,
	118, 35, 31, 30, 29, 28, -1000, 1098, 616, 2552,
	12907, 1196, 1184, 1178, 1170, 1177, 759, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51426, 48787, 27, -26, 26,
	-1000, 2461, 808, 23924, 543, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35807, 35424, 35041,
	29350, 46495, 46112, 10049, 10049, 912, -1000, -1000, -1000, -1000,
	-1000, -10, 32378, 48787, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 285, -1000, -1000, -1000, -1000, -1000, -1000, 19978,
	398, 19558, 397, 19138, 274, 415, -1000, -1000, -1000, 284,
	-1000, -1000, -1000, -1000, 1290, -1000, -1000, -1000, -1000, 45729,
	45346, 2280, 44963, 28957, 28564, 44580, 1814, 1804, 44197, -1000,
	-1000, 43814, -1000, -1000, 2149, 2019, 1990, 34658, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 43437, 43054, 42671,
	42288, 41905, 28171, 27778, 586, -1000, -1000, -1000, -1000, 25073,
	-1000, -1000, -1000, -1000, -1000, 25, -1000, 24, 23, -1000,
	22, 17, 13, 12, 10, 9, 8, 7, -1000, 6,
	5, -1000, 3, 2, -1000, -2, -5, 1434, 1559, 1560,
	41522, 1073, 2343, -1000, 1509, 14, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 48787, -1000, 20384, 96, -1000, 585, -1000,
	1964, -1000, 20384, 96, -1000, 1506, 207, 1400, -1000, -1000,
	-1000, 1281, 1030, -1000, -1000, 48787, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2742, 1455, 584, 41139, -1000, 1771, -1000,
	710, 13719, -1000, 888, -1000, 13719, 279, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2054, 1142, 2604, 27385, 1530, 2432, 2147,
	2734, 1679, 2130, 2115, 2084, 2081, 2077, 2733, 1204, 2726,
	1001, 838, 2722, 2067, 2030, 2732, 1463, 835, 2703, 2698,
	2026, 1959, -1000, -1000, -1000, -1000, 1054, -1000, -1000, -1000,
	-1000, -1000, -1000, 37698, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1098, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1641, 2378, 2378, 2378,
	2457, 399, 389, -1000, 118, -1000, 1753, -1000, 1416, -1000,
	-1000, -1000, 56742, -1000, -1000, 20384, 20384, 20384, 20384, 20384,
	1359, -1000, -1000, -1000, 604, -1000, 583, 502, 11268, -1000,
	-1000, 2566, -1000, -1000, -1000, 403, 20384, -1000, 270, -1000,
	-1000, -1000, -1000, 582, 2646, -1000, 806, -1000, -1000, -1000,
	730, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2064, 536,
	535, -1000, 534, 524, 523, -1000, -1000, -1000, 581, 580,
	577, 575, 574, 573, -1000, -1000, -1000, 1278, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 756,
	-1000, 756, 756, 507, 507, 572, 569, 508, 561, -1000,
	-1000, 559, 507, 558, 556, -1000, -1000, 552, 707, -1000,
	657, 548, 542, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1646, -1000, -1000, 1646, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 911, 50295, -1000, -1000, -1000, -15, 48787,
	-1000, 415, -15, -1000, -1000, 541, -1000, 14545, 14545, 14545,
	-1000, -1000, 1496, 20384, -1000, 2660, -1000, 589, -215, 539,
	24690, 647, 647, -1000, 22775, 617, 26992, -1000, 536, 535,
	534, 524, 523, -1000, 256, -1000, -1000, -1000, -1000, -1000,
	1671, 2256, 1127, -1000, 1226, 2254, -1000, 1956, 2253, 1207,
	-1000, -1000, 739, 2241, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1376, -1000, -1000, 2296, 2237, -163, 2132,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1549, -1000, 29727,
	32378, -16, -1000, -1000, -52, -1000, 9658, 56742, -1000, -1000,
	-1000, 56742, 698, -1000, -1000, 2234, -1000, 56742, 619, -1000,
	-1000, 2233, -1000, 1947, 48787, 10049, 48787, 48787, -1000, 521,
	1604, 1490, -1000, -1000, 32001, 1956, 1601, -1000, -1000, 733,
	1599, -1000, -1000, 1598, -1000, 415, -1000, -1000, 40756, 51049,
	733, 1590, -1000, -1000, -1000, 37698, -1000, 48787, -1000, 48787,
	-1000, 1081, -1000, 50672, 136, 2230, -1000, -1000, 136, 2226,
	-1000, 136, 2225, -1000, 134, 2212, -1000, -1000, 1375, 2205,
	-1000, -98, 2204, -1000, -1000, -98, 2198, -1000, -1000, 20384,
	-37, -1000, -1000, -1000, 808, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 40373, 29727, -1000, 32001, 48787, 34275, 731, 56742,
	-1000, 2526, 57440, 29727, 56742, -1000, 32001, 48787, 2062, -1000,
	39990, 39607, 2417, 708, -1000, -1000, 48787, -1000, 20384, -1000,
	2496, 1673, -32, -1000, -1000, -1000, -1000, -1000, 1653, 1733,
	875, 1371, -1000, 13719, 13719, 2338, -1000, 254, 10049, -1000,
	-1000, 1023, 1675, -1000, -1000, -1000, -1000, -1000, 39224, -1000,
	-1000, -1000, 1413, 48787, -1000, -1000, 2047, -1000, 31624, 48787,
	-1000, 48787, -1000, 48787, -1000, 48787, -1000, 48787, -1000, -1000,
	-1000, -1000, -1000, 2058, 1191, 2002, -1000, 48787, -1000, 48787,
	-1000, -1000, -1000, 1652, -1000, -1000, -1000, 38847, 38464, 38081,
	-1000, -1000, 1117, -1000, 1020, -1000, -1000, 138, -1000, -1000,
	1641, -1000, 1518, 1747, 18718, 1709, 20384, 118, -1000, -1000,
	118, 118, 12487, -1000, -1000, -1000, 48787, -1000, 6533, 57440,
	10049, 925, 20384, 20384, 20384, 20384, 20384, 20384, 20384, 20384,
	20384, 20384, 20384, 20384, 20384, 20384, 20384, 20384, 20384, 20384,
	20384, 20384, 20384, 20384, 20384, 20384, 20384, 20384, 20384, 20384,
	20384, 20384, 20384, 20384, 20384, 20384, 20384, 1691, 20384, 910,
	20384, 20384, 20384, 20384, 1683, -1000, -1000, 1372, 437, 1453,
	-1000, 2682, 2682, 2682, 57157, 57157, 516, 604, -1000, 20384,
	-1000, 96, 20384, 389, 54632, 1586, -13, 10862, -1000, -1000,
	-1000, -1000, 18298, 752, 56742, 9267, 10442, -1000, 2593, 954,
	2078, 1851, 517, 700, 699, 693, 666, 664, 20384, 20384,
	20384, 20384, 20384, 20384, -1000, -1000, -1000, -1000, -1000, -1000,
	2566, -1000, 17892, 17472, -1000, 2591, 17052, 16632, -1000, 16212,
	21602, 15792, 922, 921, 919, 918, 20384, 11674, -1000, -32,
	-1000, 50295, -1000, 48787, -15, 2495, 20384, 175, -1000, 55608,
	-1000, 175, 175, 515, -40, 56742, 1760, 1756, 24307, 1823,
	1388, 1388, 1388, -1000, 513, 599, 647, 6902, 15372, 512,
	647, 647, 176, 36567, 1378, 36567, 267, 387, 22392, 2660,
	-1000, -1000, 48787, 10049, -20, 1326, -1000, 33132, 2373, 2371,
	2365, 1079, -1000, 1043, 2455, 37698, 2471, 96, 2408, 1945,
	-1000, -1000, 908, 37698, 1956, -1000, 57440, -1000, 1757, 2454,
	1021, 1013, 1021, 1021, 1051, 37698, 903, 1322, 29727, 2403,
	900, -25, 2469, 96, 2394, 1943, 898, -1000, -1000, 48787,
	10049, 2384, 955, 645, -16, 32378, 48787, 242, -1000, 20384,
	96, 20384, 96, 964, -42, 239, 1778, 1738, 176, -1000,
	32755, 2491, 2196, 48787, 893, -1000, 1956, 2193, -1000, 1301,
	-1000, 2189, 2184, 2489, 1464, 1589, -1000, -1000, -1000, 1452,
	1585, 939, 2181, 744, 187, 2483, 187, 26226, -1000, 48787,
	-1000, 48787, -1000, -1000, 48787, -1000, 48787, -1000, 48787, -1000,
	48787, 48787, -1000, 48787, 29727, 29727, 29727, -43, 4402, 30481,
	732, 889, -29, -1000, 778, 32755, 4823, -45, -1000, 956,
	-1000, -1000, -1000, 238, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 756, 509, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 508, 1278, 507, 507, 507,
	-1000, -1000, -1000, 707, -1000, 657, -1000, -1000, -1000, 756,
	756, -1000, -1000, -207, 1939, -52, 34275, 645, -1000, 645,
	-1000, 1998, -1000, 2372, 680, -51, 818, -32, -1000, 1646,
	-1000, 1491, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2630, -1000, 2724, -1000, -1000,
	2589, -17, -1000, -17, -1000, 10049, -1000, 48787, 1997, -1000,
	-1000, -1000, -1000, -1000, -1000, 48787, -1000, 48787, -1000, -1000,
	-1000, -1000, -1000, -1000, 3251, -1000, 1984, -1000, 4402, 237,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 48787, 48787,
	48787, -1000, 37698, -1000, -1000, -1000, -1000, 56742, -1000, 433,
	-1000, -1000, 56742, 1112, 1775, -1000, 1775, -18, -1000, 55353,
	1708, 48787, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 704, 451, 451, 961, 961, 961,
	961, 2583, 746, 1468, 353, 6382, 6382, 6382, 6382, 6382,
	6382, 6382, 6382, 1460, 791, 791, 1460, 1460, 1460, 1460,
	1460, 791, 791, 791, 6382, 6382, 6382, 57157, 56997, 4156,
	20384, 20384, 887, 1368, 437, 4156, 20384, 4156, 4156, 4156,
	4156, -1000, 1266, -1000, -1000, -1000, -1000, 1938, 506, 21602,
	21602, -1000, -1000, -1000, 11268, 20384, -1000, -1000, -1000, -1000,
	502, 20384, -1000, 54769, -242, 385, -145, 233, 48787, 20384,
	598, -50, -1000, 1028, -1000, 20384, 232, -1000, -1000, -33,
	20384, 20384, 20384, 382, -1000, 381, -1000, 886, -1000, 883,
	881, 879, -1000, 499, 1381, 498, 496, 20384, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 56704, 52188,
	6212, 6073, 5785, -53, -60, 378, -1000, 1934, -145, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 377, -1000, 373, -61,
	-1000, -62, -1000, 372, -1000, 56449, -145, 371, 5324, -1000,
	21602, 21602, 21602, -1000, 370, -1000, 55098, -1000, 689, 687,
	685, 671, 56194, 14952, 14952, 14952, 369, 56156, 20384, -145,
	-1000, -1000, 494, -67, 744, 14545, 23541, 10049, -1000, 744,
	744, 20384, -1000, 20384, 24307, 24307, 2770, 1750, 24307, -1000,
	-1000, -1000, -1000, 36567, 570, 647, 36567, -1000, 2566, 1696,
	-1000, 366, -1000, 14139, 36567, 36567, 10049, -1000, -1000, 48787,
	415, -1000, -1000, 647, 365, 229, 1877, 48787, 48787, 48787,
	-1000, -1000, 1580, 49918, 1577, 57440, 48787, -1000, -1000, 490,
	489, 1690, 1689, 48787, 48787, 49541, 49164, 48787, 1277, 20384,
	1319, 1342, 96, -1000, 670, 481, 48787, 1203, -1000, -1000,
	-1000, -1000, -1000, 48787, -1000, -1000, 2582, -1000, 1021, -1000,
	-1000, -1000, 1021, 1956, 1198, 48787, 29727, 736, 669, 48787,
	1328, 96, -1000, 658, 480, 10049, 1164, -1000, 651, 48787,
	1827, -1000, 1529, -1000, -1000, 8876, 56742, -1000, 56742, -1000,
	-1000, -1000, 10049, 1781, 1781, 362, -19, -1000, -1000, -1000,
	-1000, -1000, -1000, 1803, 48787, 606, 48787, 96, 48787, 127,
	2659, 48787, 29727, 29727, 29727, 96, 48787, 2178, 48787, 2173,
	2267, 629, 48787, 1393, 20384, 1190, -1000, 25456, 763, 48787,
	1126, 92, -1000, -1000, -1000, 16, 48787, -1000, -1000, 136,
	136, 136, -1000, 134, 1375, -1000, -98, -98, -1000, -1000,
	-1000, 1929, 37321, 48787, 2539, 29727, -68, -1000, 788, 874,
	873, -1000, 57440, -1000, 603, 913, -1000, 2575, 479, 2566,
	-1000, 732, 48787, 69, -1000, 734, 1404, -1000, 13719, 13719,
	-1000, 1646, -1000, -1000, 1119, -1000, 1247, -1000, -1000, -1000,
	-1000, 13719, -1000, -1000, 951, -52, -52, -1000, -1000, 157,
	-1000, 48787, -1000, -1000, -1000, -1000, 1112, -1000, 20384, -1000,
	-1000, -1000, 12487, -1000, -1000, -1000, 48787, -196, 20384, 4156,
	4156, 20384, 21602, 21602, -1000, 4156, -1000, -1000, -1000, -1000,
	-1000, 1925, 478, 20384, 57440, 4851, 3926, -74, 1460, -1000,
	20384, -1000, 8485, -76, 54346, -1000, -1000, 590, 2265, -1000,
	20384, 55901, 8094, 361, 13313, -1000, 55646, -48, -48, -1000,
	2628, 1621, 1519, 1302, 1095, 2572, -1000, 26609, 748, 1393,
	54209, 6533, 57440, 20384, 20384, 20384, -1000, -1000, 2566, -1000,
	20384, -1000, -1000, -1000, -1000, -1000, 1900, 20384, -1000, 6533,
	57440, 21602, 21602, 21602, 21602, 21602, 21602, 21602, 21602, 21602,
	21602, 21602, 21602, 21602, 21602, 21602, 21602, 21602, 21602, 21602,
	1730, 21602, 2674, 2674, 2674, -1000, 1973, 1900, 20384, 20384,
	-1000, -1000, -1000, -1000, 57440, 360, 357, 355, -1000, 20384,
	-145, 4823, -1000, 1848, -1000, -156, -1000, 2660, -1000, -1000,
	1848, 1848, -77, 56742, -1000, 2770, -1000, 477, 20384, 24307,
	-1000, 597, -1000, -82, -1000, 36567, -1000, 595, -245, -1000,
	638, -1000, 647, 354, -1000, -1000, -1000, 226, 415, -1000,
	36567, -1000, 10049, -1000, -1000, 872, 867, -1000, 2165, -1000,
	1574, -1000, 767, -1000, 1473, 20384, 23158, 472, 471, 1288,
	-1000, 2164, 1375, 2160, 1375, -1000, -1000, 709, -1000, 56742,
	470, 469, -1000, -20, 1158, -1000, 25849, 20384, -1000, 864,
	-1000, -1000, -1000, 1956, 862, -1000, -1000, 1289, 25849, -1000,
	-1000, -1000, 25849, 20384, -1000, -25, 860, 25849, 2126, 732,
	1899, 1031, -1000, -1000, -1000, -1000, -1000, -1000, 1797, 32755,
	48787, 465, 48787, 463, -1000, -1000, 462, 48787, 645, 1956,
	-1000, 733, -1000, -1000, 775, 10049, 460, 10049, 1661, 629,
	30104, -1000, 733, 1747, -1000, 56742, -1000, 1126, 12080, 2367,
	-83, -1000, 225, -1000, -1000, -1000, 744, 26226, 24307, 20384,
	2678, -84, -1000, -1000, -1000, -1000, -1000, 96, -27, 459,
	-1000, 637, 635, -52, 1397, 2343, 2343, -1000, 2568, -1000,
	594, 350, 2566, 349, -1000, -52, 48787, -1000, 1398, 10049,
	48787, 48787, 10049, 48787, -1000, -1000, -32, -1000, -1000, -1000,
	-1000, 48787, -1000, -1000, -1000, 1423, 53923, -1000, 2382, 10049,
	2580, 4156, 3659, 315, 20384, 57440, 57294, -95, 20384, 20384,
	-1000, 593, 56742, -1000, -1000, -1000, -1000, -1000, -1000, 56742,
	20384, 224, -1000, 2603, 20384, 337, 336, 334, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 333, -1000, -1000, 51803,
	-1000, 20384, 331, -1000, 329, 328, 5295, 53786, 53500, 327,
	56742, 1973, 56742, -1000, -1000, 676, 676, 1006, 1006, 1006,
	1006, 2674, 271, 571, 2757, 661, 661, 661, 1480, 682,
	682, 661, 661, 661, 1894, 1680, 458, 5354, -1000, -1000,
	56742, 56742, 326, -1000, -1000, -1000, -145, 316, 1840, 2452,
	-1000, 24307, 1840, 1840, -1000, -1000, 48787, 56742, -1000, -215,
	-1000, 2566, -1000, -1000, 1696, -1000, 7307, 36567, 647, 10049,
	-1000, -1000, 119, 48787, 48787, 48787, 2152, -1000, 3218, -1000,
	53363, -103, -1000, 2429, 2429, 20384, 176, -1000, -1000, 457,
	23158, 48787, -1000, 1699, 1812, 809, 48787, -1000, 48787, -1000,
	-1000, 48787, 48787, 48787, 48787, 48787, -1000, 452, -104, 48787,
	48787, 29727, -1000, -1000, -109, 10049, -1000, 2369, -1000, 29727,
	877, 1328, 1825, -1000, 450, 23158, 449, 48787, 32755, 2477,
	-1000, 732, -1000, -1000, 443, 1856, 1447, 23158, 1445, 1663,
	629, 30104, -1000, 939, 1126, -1000, -1000, -35, -1000, 495,
	96, 48787, 2663, 1393, -1000, -36, 56742, -1000, 632, -1000,
	36944, 36944, 29727, 29727, -1000, 2326, 2306, 592, -1000, -1000,
	300, -1000, -52, 1731, -1000, -1000, 1329, 1521, -1000, -1000,
	-1000, -1000, -1000, 2382, 20384, 20384, 57294, -110, -1000, 4156,
	4156, -1000, 56742, 7703, -1000, 55646, -1000, -1000, -1000, -1000,
	1340, -1000, 53077, -1000, -1000, -1000, 20384, -1000, -1000, -1000,
	-1000, 21602, 1883, 440, 57440, -1000, -1000, 741, 20384, 20384,
	2660, 741, 741, -112, 647, -1000, -1000, -1000, 2566, -1000,
	36567, 119, 10049, -1000, -1000, -1000, 48787, -1000, 48787, -1000,
	10049, 48787, 1893, 1567, -1000, -1000, 1668, 438, 21602, 48787,
	729, -1000, 1309, 23158, 2382, 10049, 2382, 52940, 10442, -117,
	-118, 1564, -1000, 1557, 20384, -1000, 57440, 1375, 1375, -119,
	-124, -1000, 859, 858, 20384, 856, -1000, -1000, -1000, 854,
	-1000, 650, -98, 25849, -1000, -1000, 1354, 23158, -127, 23158,
	-130, 298, 96, -1000, 23158, -1000, 48787, -135, 48787, -1000,
	629, 30104, -1000, 2267, -1000, 2287, 48787, 2364, -1000, -1000,
	-1000, 1747, 437, -1000, -143, -1000, -1000, 436, 435, -1000,
	-1000, -115, -1000, 706, 695, -1000, -1000, -1000, 10049, 948,
	-1000, 4156, 4156, -1000, -1000, -1000, 294, 1393, 2448, -1000,
	52654, 537, 21602, 57440, -150, -1000, 48787, 56742, -145, -1000,
	-1000, -1000, 36567, 591, -1000, -1000, 1568, -1000, -1000, -1000,
	48787, 1573, -1000, -1000, 20384, 5354, 432, 20384, -1000, 1797,
	430, -1000, -1000, -1000, -1000, -1000, -1000, 2429, -33, -1000,
	1234, -1000, -1000, 56742, 2389, -1000, -1000, 429, 427, 48787,
	48787, -48, 423, 422, 25849, -1000, 48787, -151, 1309, -159,
	-1000, 1797, -1000, -160, 775, -1000, 420, 30104, -1000, 1661,
	981, -161, 48787, 1126, -1000, -1000, 29727, 29727, 1731, -1000,
	48787, -1000, 48787, -1000, 48787, -1000, 1320, 20384, -1000, 537,
	-166, -1000, -142, -1000, 2475, -1000, -1000, -1000, -1000, 2148,
	52517, 1640, 48787, 52226, 1328, 48787, 2382, 293, 48787, 771,
	10049, 1329, 1329, -1000, -1000, 291, 20384, 20384, -1000, 419,
	-1000, 1797, 1309, 1328, 1309, 418, 23158, -1000, 1663, 1077,
	-1000, 744, -1000, -1000, -168, -169, -1000, -171, -176, -1000,
	289, 21196, 21196, -145, -1000, 48787, 417, 2110, -1000, 1406,
	1356, 272, 800, -1000, -178, -1000, -1000, 415, -1000, 20384,
	-1000, -179, -1000, 762, -185, -1000, 761, 2603, -190, -192,
	48787, 1328, 1797, -1000, 1797, 23158, -199, -1000, 26226, -1000,
	732, 732, -1000, -1000, -1000, -1000, -1000, 21993, 1405, 1105,
	55059, -1000, -1000, -1000, 48787, -1000, 1436, 1425, 1087, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1640, 56742, -1000, 1329,
	1822, -1000, 1329, 1862, -1000, -1000, -201, -1000, 1328, 1328,
	-202, -1000, -200, -1000, -1000, 2532, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2302, -1000, 796, 1437, 1437, 1406, -1000,
	411, -1000, 405, 1374, -1000, -1000, 1309, -1000, 20790, -1000,
	2543, -1000, -1000, 1705, -1000, -1000, 20384, 20384, -1000, -1000,
	-1000, 1797, -1000, -1000, -1000, -1000, -212, -226, 1328, 1328,
	841, -1000, -1000, 404, 20384, -227, 1328, -1000,
}
var sqlPgo = [...]int{

	0, 3212, 3210, 2012, 3208, 2649, 3206, 3205, 3204, 3203,
	3202, 2647, 3201, 3199, 3197, 3194, 3193, 3192, 3191, 3190,
	3189, 3188, 3187, 3186, 3185, 3184, 3183, 3180, 3179, 3177,
	3176, 3174, 2587, 3173, 2571, 3172, 3162, 3161, 3160, 3159,
	3158, 3157, 3156, 25, 3155, 3154, 3152, 3151, 2524, 3149,
	3148, 2430, 3146, 3145, 2428, 3143, 3140, 3139, 2426, 2393,
	3137, 3136, 2386, 3135, 3133, 2345, 3131, 2342, 3130, 3127,
	2336, 3126, 92, 123, 3125, 2330, 3123, 3120, 2322, 2300,
	2293, 3119, 2270, 3118, 3117, 2247, 2239, 3114, 2194, 3113,
	3111, 3110, 3109, 2237, 2232, 3108, 3107, 3106, 175, 3105,
	2230, 3104, 3101, 3099, 3097, 3094, 3093, 3092, 3091, 3089,
	3088, 3087, 3085, 3084, 3083, 3079, 3078, 3067, 3065, 3064,
	3058, 3054, 3053, 3052, 3050, 3044, 3038, 176, 110, 3035,
	3033, 2039, 2001, 3031, 3027, 48, 44, 15, 82, 109,
	159, 4098, 153, 3025, 3023, 3018, 3017, 3016, 26, 116,
	113, 108, 105, 3016, 224, 3015, 3009, 54, 31, 24,
	22, 74, 3006, 3004, 2999, 2158, 77, 2997, 2995, 163,
	156, 2992, 236, 34, 104, 270, 89, 39, 40, 2988,
	91, 17, 2987, 165, 97, 2985, 72, 35, 21, 3171,
	112, 101, 96, 188, 171, 140, 139, 114, 848, 2984,
	160, 99, 135, 2981, 2979, 2972, 71, 136, 3, 2,
	174, 11, 2970, 10, 2969, 13, 2967, 2966, 2965, 2964,
	29, 107, 45, 61, 2963, 33, 265, 128, 2962, 150,
	2955, 58, 164, 147, 347, 117, 2948, 62, 20, 73,
	2946, 2945, 93, 162, 2943, 28, 124, 83, 102, 173,
	151, 87, 141, 152, 2941, 2938, 2932, 125, 2930, 133,
	130, 2929, 2925, 80, 27, 2924, 65, 155, 36, 2920,
	2916, 103, 2912, 143, 2911, 2910, 172, 98, 126, 5,
	50, 79, 7, 154, 95, 57, 49, 2908, 1, 1663,
	1533, 32, 2906, 94, 59, 43, 68, 100, 161, 38,
	2904, 2895, 297, 2891, 2889, 2882, 115, 2881, 2873, 2868,
	88, 145, 81, 2865, 106, 37, 424, 146, 122, 168,
	111, 2859, 132, 78, 138, 2856, 52, 2851, 1261, 2850,
	131, 2841, 2840, 2836, 2835, 1039, 2834, 2828, 2827, 1025,
	2825, 90, 2823, 137, 134, 127, 56, 148, 157, 158,
	1436, 2821, 129, 42, 2820, 85, 23, 0, 2977, 2365,
	2818, 144, 86, 2815, 2814, 2813, 2811, 30, 9, 6,
	8, 14, 12, 121, 55, 218, 2808, 2806, 75, 118,
	2805, 170, 149, 2804, 2800, 2799, 51, 2796, 18, 2794,
	16, 2792, 2790, 19, 4, 2789, 2785, 178, 2782, 2779,
	2778, 2483, 2770, 169, 2761, 2756, 2755, 2750, 2748, 2062,
	2745, 2726, 64, 47, 120,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 403, 403, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 150,
	150, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 402,
	402, 152, 152, 151, 147, 147, 405, 405, 406, 406,
	154, 154, 154, 156, 156, 153, 153, 32, 32, 86,
	86, 86, 138, 79, 79, 79, 74, 74, 355, 355,
	356, 356, 134, 134, 135, 135, 135, 135, 136, 136,
	137, 137, 137, 46, 34, 34, 34, 34, 34, 34,
	34, 35, 35, 35, 35, 36, 36, 36, 36, 36,
	36, 37, 37, 37, 37, 37, 37, 44, 44, 128,
	128, 47, 47, 47, 47, 47, 47, 47, 47, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 58, 58, 56, 59, 59, 60, 60,
	60, 60, 60, 60, 61, 61, 61, 61, 61, 61,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	68, 68, 68, 69, 69, 69, 66, 66, 66, 64,
	64, 64, 63, 63, 63, 67, 67, 67, 65, 65,
	65, 233, 233, 70, 70, 70, 70, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 73, 73, 73, 73, 73, 73, 73,
	73, 325, 325, 71, 71, 300, 300, 75, 75, 258,
	258, 76, 76, 76, 76, 76, 77, 77, 77, 77,
	87, 87, 87, 87, 401, 401, 227, 227, 169, 169,
	169, 169, 82, 82, 82, 82, 83, 83, 83, 84,
	84, 133, 133, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 38, 38, 38, 39, 39, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 43, 43, 94,
	94, 94, 96, 93, 93, 93, 95, 95, 95, 95,
	97, 97, 98, 98, 98, 98, 98, 98, 99, 99,
	349, 349, 236, 236, 347, 347, 348, 348, 204, 204,
	204, 204, 204, 205, 205, 205, 354, 354, 354, 354,
	354, 354, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 118, 118, 118, 127, 127, 127, 127,
	127, 127, 127, 120, 120, 120, 111, 111, 101, 101,
	107, 107, 107, 107, 107, 102, 102, 108, 108, 110,
	110, 112, 112, 112, 112, 112, 112, 103, 103, 103,
	103, 114, 114, 114, 114, 113, 113, 123, 123, 123,
	123, 123, 123, 123, 313, 313, 119, 119, 119, 119,
	122, 122, 122, 122, 117, 117, 117, 121, 121, 124,
	124, 124, 124, 104, 104, 105, 105, 106, 106, 125,
	125, 116, 116, 126, 126, 126, 126, 126, 126, 126,
	115, 115, 115, 404, 404, 109, 399, 399, 397, 397,
	397, 397, 397, 397, 397, 398, 398, 400, 400, 80,
	80, 80, 52, 52, 53, 53, 206, 206, 207, 207,
	281, 281, 281, 281, 208, 208, 155, 155, 155, 211,
	212, 212, 209, 209, 210, 210, 210, 214, 214, 213,
	216, 216, 215, 280, 365, 365, 366, 366, 366, 366,
	366, 366, 366, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 363, 363, 363, 364, 361, 361, 362,
	362, 362, 362, 407, 407, 279, 279, 220, 220, 368,
	368, 368, 368, 369, 369, 369, 369, 369, 372, 371,
	370, 370, 370, 370, 370, 309, 309, 309, 57, 57,
	57, 247, 247, 246, 246, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 130, 130,
	54, 54, 54, 161, 161, 51, 51, 51, 55, 55,
	50, 50, 50, 50, 50, 264, 264, 262, 262, 225,
	225, 315, 315, 315, 173, 173, 148, 148, 148, 20,
	22, 22, 16, 16, 16, 16, 16, 16, 29, 29,
	30, 30, 26, 26, 263, 263, 265, 265, 81, 81,
	85, 85, 85, 91, 91, 129, 129, 129, 129, 129,
	129, 129, 33, 33, 33, 33, 45, 45, 45, 45,
	89, 410, 410, 410, 90, 90, 409, 409, 168, 168,
	168, 168, 170, 170, 276, 276, 277, 277, 411, 411,
	278, 278, 278, 163, 162, 164, 164, 49, 49, 49,
	157, 157, 158, 158, 159, 159, 160, 160, 412, 412,
	78, 78, 78, 132, 132, 200, 200, 273, 273, 273,
	221, 221, 178, 178, 275, 275, 274, 274, 274, 245,
	245, 245, 131, 131, 230, 230, 238, 238, 239, 239,
	321, 321, 240, 88, 88, 141, 141, 139, 139, 139,
	139, 139, 139, 140, 140, 140, 142, 142, 142, 142,
	142, 142, 142, 145, 145, 145, 145, 146, 146, 146,
	144, 144, 379, 379, 379, 381, 381, 382, 378, 378,
	380, 380, 408, 408, 249, 249, 249, 218, 219, 217,
	217, 413, 413, 223, 223, 222, 224, 224, 314, 314,
	314, 243, 243, 243, 243, 268, 268, 266, 266, 267,
	267, 269, 269, 270, 270, 270, 271, 271, 272, 272,
	242, 242, 296, 296, 143, 143, 143, 229, 229, 229,
	231, 231, 286, 286, 286, 287, 287, 285, 285, 285,
	285, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 395, 395, 395, 396, 396, 312,
	312, 317, 317, 317, 317, 317, 317, 310, 310, 311,
	311, 322, 323, 323, 252, 252, 252, 252, 250, 250,
	251, 251, 318, 318, 318, 318, 244, 244, 319, 319,
	319, 282, 282, 326, 326, 326, 341, 341, 228, 228,
	228, 336, 336, 327, 327, 327, 327, 327, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	330, 330, 330, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 340, 340, 340, 340, 340, 331, 331, 337, 338,
	332, 333, 339, 339, 339, 339, 343, 343, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 335, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 260, 260, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 290, 290, 290, 290, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 373, 373, 373, 373, 373, 373, 373, 373, 376,
	376, 377, 377, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 383, 383,
	384, 384, 386, 386, 387, 387, 388, 389, 389, 389,
	390, 391, 391, 385, 385, 392, 392, 392, 393, 393,
	394, 394, 394, 394, 394, 302, 302, 308, 308, 308,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 171, 171, 171, 171,
	171, 235, 235, 234, 234, 299, 299, 297, 297, 301,
	301, 253, 253, 342, 342, 342, 342, 342, 342, 342,
	254, 254, 254, 261, 255, 255, 256, 256, 256, 256,
	256, 293, 294, 257, 257, 257, 295, 295, 303, 307,
	307, 306, 305, 305, 304, 304, 283, 283, 284, 284,
	241, 241, 414, 414, 237, 237, 320, 320, 320, 320,
	202, 202, 232, 232, 201, 201, 195, 195, 196, 196,
	196, 196, 226, 226, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 344, 344, 344, 345, 346,
	298, 188, 187, 175, 176, 186, 185, 184, 174, 177,
	181, 182, 183, 179, 180, 191, 190, 189, 324, 197,
	197, 198, 198, 198, 199, 199, 199, 199, 172, 172,
	192, 192, 193, 194, 194, 165, 165, 165, 166, 166,
	167, 167, 353, 353, 351, 351, 351, 352, 352, 352,
	352, 350, 350, 350, 350, 350, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 2, 0, 2, 0,
	1, 1, 0, 2, 0, 2, 0, 7, 2, 5,
	6, 2, 1, 12, 12, 2, 7, 2, 1, 1,
	1, 3, 3, 0, 3, 1, 3, 1, 1, 3,
	2, 5, 0, 5, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 3, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 6, 6, 1,
	1, 1, 2, 1, 2, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 1, 7, 3, 8, 8, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 2, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 3, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 3, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 2, 1, 3, 1, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 5, 7, 3, 3, 3, 3, 3,
	4, 4, 3, 4, 4, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 2, 3, 3, 3, 2, 3, 5, 4, 6,
	4, 5, 6, 5, 1, 0, 2, 3, 3, 3,
	6, 4, 2, 3, 4, 2, 3, 3, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 4, 4, 2,
	3, 2, 3, 7, 7, 8, 10, 7, 4, 5,
	5, 5, 3, 1, 1, 5, 2, 0, 1, 1,
	1, 1, 3, 2, 2, 2, 1, 2, 0, 3,
	3, 2, 8, 11, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 2,
	1, 0, 1, 0, 9, 9, 3, 1, 3, 7,
	1, 3, 11, 3, 2, 0, 3, 1, 2, 2,
	3, 2, 6, 2, 1, 1, 2, 4, 2, 5,
	5, 5, 2, 8, 9, 6, 5, 3, 1, 4,
	7, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 7,
	3, 1, 0, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 2, 2, 2, 2, 2, 3, 4, 2,
	4, 7, 3, 3, 0, 3, 6, 3, 6, 3,
	13, 16, 9, 12, 4, 2, 0, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 4, 3, 0, 2,
	2, 0, 10, 3, 2, 0, 1, 3, 1, 1,
	3, 3, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 5, 1,
	0, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 7, 3, 4, 3, 4, 3,
	4, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 2,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 5, 5, 3, 1, 1, 2, 2, 1,
	5, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 8, 6, 6, 4, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	1, 2, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 3, 1, 1, 1, 1, 5,
	3, 1, 1, 3, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 7, 1, 7, 5, 3, 1, 1,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 420, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 76, 64, -54, -51, -48,
	-58, 78, 99, -380, 103, -62, -65, -67, 107, 116,
	121, 122, 145, 154, 254, 261, 282, 284, 286, 295,
	-40, -39, 117, -139, -141, 280, -83, -84, -93, -94,
	-95, -96, -133, 313, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	316, -33, -45, -90, -89, 361, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-379, -63, -64, -66, -68, -69, -142, -140, 417, 281,
	371, 37, 325, 65, 111, 290, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 388, 396, -145, -143, -144,
	-146, 302, 379, 338, 421, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 2, 338, 382, 303,
	372, 92, 165, 266, 252, -397, 2, 4, -359, -357,
	-196, -195, 338, 92, 30, 38, 39, 41, 44, 54,
	55, 56, 59, 96, 97, 114, 123, 124, 134, 147,
	149, 157, 158, 172, 178, 180, 200, 229, 231, 244,
	248, 258, 260, 268, 292, 319, 334, 350, 351, 352,
	358, 359, 379, 380, 384, 391, 20, 21, 22, 23,
	25, 35, 36, 37, 40, 42, 43, 46, 47, 48,
	49, 50, 51, 58, 63, 64, 65, 66, 67, 72,
	69, 70, 71, 74, 76, 77, 80, 81, 82, 90,
	91, 93, 94, 95, 99, 101, 103, 106, 107, 109,
	110, 116, 117, 120, 115, 118, 344, 346, 119, 121,
	122, 132, 133, 135, 136, 138, 140, 144, 146, 151,
	152, 153, 154, 155, 156, 166, 161, 167, 171, 174,
	173, 175, 176, 177, 168, 182, 185, 186, 187, 189,
	190, 193, 194, 195, 198, 197, 202, 203, 206, 207,
	210, 212, 215, 216, 219, 217, 218, 221, 222, 224,
	223, 230, 232, 233, 235, 236, 239, 240, 243, 246,
	249, 250, 251, 252, 253, 254, 255, 257, 259, 261,
	263, 264, 265, 266, 267, 269, 270, 272, 273, 274,
	275, 276, 280, 278, 279, 281, 282, 283, 284, 286,
	288, 289, 290, 291, 293, 314, 315, 327, 295, 296,
	297, 298, 299, 300, 301, 305, 309, 306, 307, 308,
	303, 304, 310, 311, 313, 316, 318, 320, 321, 324,
	325, 326, 328, 331, 332, 333, 329, 330, 323, 336,
	337, 339, 340, 341, 342, 343, 345, 347, 348, 353,
	356, 357, 361, 362, 364, 365, 368, 369, 370, 375,
	371, 373, 376, 377, 378, 383, 389, 390, 392, 393,
	394, -194, -165, 410, -193, 420, 420, 420, 2, 186,
	187, 265, 264, 310, 311, -189, -192, -193, -194, -165,
	4, -357, -359, 92, 237, 420, 420, 420, 2, 338,
	326, 115, 303, 372, 288, 382, -262, 182, 92, 367,
	-165, 261, 24, 2, 101, 171, 370, 369, 24, 257,
	304, 340, 342, 2, 420, 420, 2, 382, 303, 338,
	165, 92, 372, 288, -183, 2, -165, -73, 2, 417,
	-72, -5, -48, -58, -62, -75, -70, -11, -32, -34,
	-54, -51, -59, -65, -67, -79, -78, -80, -82, -86,
	-85, -88, -93, -94, -100, -131, -132, 78, 25, 107,
	313, 117, 181, 2, -401, -227, 2, 24, -169, -165,
	78, 145, 302, 338, 2, 186, 187, 2, -183, 2,
	-397, 2, 186, 187, 2, -401, -227, 23, 2, -165,
	2, 299, 316, -170, 2, 295, -165, 420, 420, 420,
	420, 420, 420, 207, 58, 292, 310, -98, 357, -97,
	350, 297, -99, -349, 2, 219, -165, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 2, -127, 310, 326, 152, 36, 58, 24, 63,
	93, 146, 165, 166, 194, 73, 74, 264, 207, 187,
	-313, 119, 311, 339, 298, 336, 357, 78, 373, 289,
	-404, 118, 4, 92, 219, 312, 350, 67, 343, 344,
	420, 420, 420, -408, 2, 338, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, -140, -142, -141,
	420, 420, 420, 420, 420, -222, -223, 366, 179, 113,
	242, -139, -141, 2, -379, -127, 310, 2, 58, 24,
	-347, 2, -288, 237, -290, 408, 409, 403, 225, 395,
	-302, 98, 214, 213, -292, -303, 114, 292, 417, -199,
	-291, 423, 9, -376, -141, 31, 52, -197, -165, 7,
	8, 5, 6, -172, -328, -298, -335, 360, 125, 228,
	-373, -374, -198, 4, -357, -351, -329, -338, -333, -334,
	-336, 42, 48, 47, 347, 218, 305, 306, 307, 308,
	320, 375, 161, 40, 235, 236, 173, 180, 61, 84,
	85, 83, 88, 87, 89, 86, 312, 372, 53, 30,
	157, 229, 158, 59, -375, 43, 94, 106, 135, 136,
	174, 175, 176, 177, 189, 190, 330, 353, 39, 41,
	44, 54, 55, 96, 97, 123, 124, 134, 147, 172,
	178, 200, 231, 248, 258, 268, 319, 334, 350, 351,
	352, 358, 359, 380, -358, -339, 79, 126, 143, 170,
	159, 183, 184, 188, 201, 204, 220, 227, 245, 247,
	287, 317, -409, 2, 357, 357, 2, -409, 2, -409,
	2, -168, 2, 357, 354, -410, 357, 391, -381, 269,
	-382, -183, -381, 420, 420, 422, 420, -217, -218, -219,
	2, 24, 104, 417, 2, -316, 2, 415, -318, -172,
	196, -375, -141, -317, 417, -189, 238, -198, 84, 85,
	88, 87, 89, 4, -165, 61, 214, 213, -3, 2,
	-318, 157, -189, 2, -318, 157, 2, -190, 157, -318,
	-192, 2, -355, 157, -353, 9, -352, 5, 4, -357,
	-359, -358, 2, -174, -165, 2, -201, 157, -189, -186,
	-350, 4, -357, -359, -358, -360, 24, 26, 27, 28,
	29, 31, 32, 33, 34, 45, 52, 53, 57, 60,
	62, 73, 78, 83, 84, 86, 85, 87, 88, 89,
	98, 100, 102, 104, 105, 108, 111, 113, 125, 127,
	139, 141, 142, 145, 148, 150, 160, 165, 169, 179,
	181, 196, 199, 205, 208, 209, 225, 226, 228, 234,
	237, 238, 241, 242, 256, 262, 271, 285, 302, 312,
	322, 335, 338, 349, 354, 355, 360, 366, 367, 372,
	374, 381, 382, 385, 386, 387, 388, -187, -350, 354,
	422, -232, -195, -196, -226, -165, 419, -288, 2, -88,
	2, -288, 157, 2, -88, 157, 2, -288, 157, 2,
	-88, 157, 2, -220, 417, 419, 338, 62, 2, -189,
	157, -179, 2, -165, 109, -190, 157, 2, -192, -355,
	157, 2, -355, 157, 2, -191, 2, -189, 165, 165,
	-174, 157, 2, -165, 24, 142, 2, 181, 2, 181,
	2, -319, 2, -318, -233, 157, 2, -189, -233, 157,
	2, -233, 157, 2, -202, 157, 2, -201, -174, 157,
	2, -356, 157, 2, -355, -356, 157, 2, -258, 417,
	-325, 2, -324, -352, 379, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 310, -138, 80, 237, 354, 422, -189, -288,
	-88, -300, 417, 142, -288, -88, 237, 142, 239, 2,
	92, 338, 394, 24, -165, 2, 314, 2, 417, -98,
	56, 357, -277, 2, -278, -162, -163, -164, 185, 263,
	267, 394, -347, 354, 400, 142, -347, -236, 419, -127,
	2, 139, 374, 2, 7, 2, -355, 2, 314, 2,
	264, 311, 58, 142, 2, 2, -399, 2, 237, 142,
	2, 142, 2, 142, 2, 142, 2, 142, 2, 2,
	264, 311, 2, 356, 195, 356, 2, 142, 2, 142,
	2, 5, 2, 185, 263, 327, 2, 338, 382, 303,
	2, 2, 142, 2, 142, 394, 2, -244, -318, -222,
	-223, -243, -266, -267, 205, 127, 234, -249, 24, 104,
	-249, -249, 46, 418, 418, -127, 314, 2, 10, 11,
	60, 35, 408, 409, 410, 411, 137, 412, 413, 406,
	407, 405, 398, 399, 402, 191, 192, 75, 401, 400,
	68, 211, 294, 128, 129, 130, 131, 277, 162, 163,
	164, 13, 14, 15, 28, 241, 204, 395, 159, 317,
	403, 16, 17, 18, 183, 184, 227, 38, 160, -171,
	-203, -288, -288, -288, -288, -288, 247, -241, -283, 415,
	-141, 417, 417, -141, -288, -302, -234, 417, -346, 7,
	-141, -297, 415, -304, -288, 419, 417, 5, 417, 5,
	-383, 389, 139, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 260, -343, 383, -343, -343, -330,
	417, -330, 417, 417, -331, 417, 417, 417, -330, 417,
	417, 417, 390, 396, 390, 396, 417, 417, -276, -277,
	-276, 354, -170, 422, -381, -220, 417, -237, -320, -288,
	410, -237, -237, 237, -234, -288, 79, -252, 188, 220,
	143, 201, 287, 170, -346, -73, -285, 423, 417, -172,
	-375, -141, -165, -312, 396, -312, -141, -317, 417, -316,
	410, -189, 417, 419, -150, 278, -149, 22, 25, 107,
	377, 120, -210, 167, 252, 114, 323, -403, 117, 296,
	345, 346, 278, 114, -246, -248, 32, 90, 222, 249,
	49, 155, 213, 214, 325, 114, 278, 388, 114, 117,
	278, -152, 323, -403, 117, 296, 278, -151, -210, 114,
	423, 117, 232, -355, -232, 422, 422, -350, 410, 114,
	114, 114, 114, 142, -226, -350, -189, -197, -165, -198,
	417, -220, 225, 237, -397, -247, -246, 225, -161, -378,
	388, 225, 225, -220, -176, 157, 2, -166, -165, -176,
	157, -378, 225, -319, -200, -189, -200, 313, -183, 32,
	-154, 422, 51, 283, 114, -154, 114, -154, 114, -154,
	422, 114, -154, 114, 422, 114, 114, -234, 418, 422,
	-355, -397, -226, -169, 78, 417, 32, -299, -326, -327,
	-328, -337, -332, -335, 42, 48, 47, 347, 218, 305,
	306, 307, 308, 320, 375, 161, 40, 235, 236, 173,
	4, 41, -339, 180, 172, 174, 175, 176, 177, 178,
	319, 39, 268, 135, 136, 134, 106, 97, 96, 231,
	44, 43, 94, 350, 351, 352, 353, 189, 190, 55,
	54, 380, 330, -356, -397, -226, 139, -174, 2, -189,
	2, 69, 70, 394, -349, -234, 32, -277, 2, -411,
	422, 203, -205, 210, 224, 151, 238, 392, -354, 5,
	4, -298, -309, 98, 207, -335, 8, 409, -344, 7,
	408, -348, -347, -348, 82, 419, -350, 338, 189, -349,
	24, 315, 2, -189, -400, 139, -398, 288, -397, -189,
	-189, -189, -189, -189, 139, 2, 356, 2, 139, -165,
	-165, 203, -189, 2, -191, 2, -190, 2, 338, 165,
	338, -154, 422, -243, -267, -266, -269, -288, 24, -272,
	133, 221, -288, -290, -140, -140, -140, -224, -314, -288,
	262, 165, -349, -341, -326, -340, 273, 274, 272, 276,
	275, -326, -188, -350, 350, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	204, 159, 317, 38, 160, -288, 354, -288, -288, -288,
	-288, 217, 225, 228, 360, 125, 368, 104, 232, -414,
	335, 34, -295, -141, 417, -308, 29, 322, 24, -302,
	292, 417, -283, -288, -284, -235, -234, 418, 32, 422,
	-235, -301, -297, -307, -306, 385, -350, 410, 418, -234,
	381, 24, 104, 410, 2, 7, -259, 393, 216, 95,
	153, 215, -260, 301, -384, 132, 148, 417, 418, 2,
	418, 2, 418, 2, 418, 2, 418, 2, -288, -288,
	-288, -288, -288, -234, -346, -253, 2, -342, -234, 4,
	393, 216, 95, 153, 215, 301, -253, 2, 7, -234,
	2, -234, 2, -254, 2, -288, -234, -255, -289, -290,
	408, 409, 403, -302, -256, 2, -288, -235, 350, 350,
	350, 350, -288, 45, 199, 355, -257, -288, 142, -234,
	-170, -382, 32, -234, -229, 422, 142, 32, 4, -229,
	-229, 417, 418, 422, 188, 188, -316, -252, 188, -250,
	245, -250, -250, -395, 417, 416, -312, -175, 415, 424,
	-350, -235, 2, 417, -312, -312, 419, -311, -310, 32,
	-183, 243, -311, 418, -189, -350, 422, 354, -263, 73,
	62, -280, 157, 62, -361, -177, 73, -362, -165, 57,
	367, 262, 141, -263, 73, -263, 73, 73, 313, 326,
	46, -318, 35, -88, 71, 142, 354, -318, -248, -326,
	90, 213, 214, 46, -345, -344, 409, -345, 46, -345,
	-345, -345, 388, -190, -318, 354, 253, -355, 71, 354,
	422, 35, -88, 71, 142, 354, -201, -175, 71, 338,
	-323, -322, 397, -195, -165, 419, -288, -88, -288, -88,
	328, 418, 419, 183, 183, -206, -207, -165, -281, -280,
	-363, -364, -361, 182, 165, 367, 126, 32, 114, -226,
	354, 114, 253, 114, 114, 32, 237, 225, 237, 225,
	-157, 341, 114, -282, 386, -273, -88, 417, 98, 32,
	-273, -238, -239, -321, -240, -177, 417, -183, -189, -233,
	-233, -233, -201, -202, -174, -355, -356, -356, 418, -73,
	-324, -137, 388, 354, 388, 374, -207, -72, 25, 78,
	107, 418, 422, -228, 31, 415, -259, 417, -343, 417,
	-137, -322, 142, -227, -323, -323, 139, 70, 400, 354,
	418, 357, -278, -204, 267, 321, 279, 309, 8, 7,
	7, 422, -350, -189, 139, -226, -226, 310, -73, 139,
	-73, 419, -189, -201, -189, -318, -270, -344, 417, -271,
	292, 293, 422, -148, 33, 102, 193, -189, 394, -288,
	-288, 354, -414, 335, -295, -288, 217, 228, 360, 125,
	368, 104, 232, 142, 417, -289, -289, -234, -288, 416,
	426, 418, 419, -226, -288, 416, 416, 422, -305, -306,
	108, -288, 419, -413, 422, -222, -288, -234, -234, 418,
	418, 354, 354, 354, 354, 417, -389, 246, 417, 417,
	-288, 32, 422, 422, 422, 422, 418, 418, 422, 418,
	142, 418, 418, 418, 418, 418, -261, 256, 418, 10,
	11, 408, 409, 410, 411, 137, 412, 413, 406, 407,
	405, 398, 399, 400, 68, 211, 294, 13, 14, 15,
	183, 160, -289, -289, -289, 418, -293, -294, 142, 139,
	394, 394, 394, 394, 32, -257, -257, -257, 418, 142,
	-234, 417, 418, -282, -320, -231, 2, -316, -185, -350,
	-282, -282, -234, -288, -316, -316, -251, 374, 237, 188,
	-316, -310, 418, -396, -346, -312, -311, -346, -287, -286,
	140, 223, 418, -235, 2, -311, -311, -350, -183, -220,
	-312, 418, 419, -149, -189, -177, -184, -165, 225, -280,
	157, -156, 225, -326, -184, 417, 417, 193, 193, -177,
	-184, 157, -177, 157, -184, -184, -402, 267, 233, -288,
	206, 266, 226, -150, 278, -88, 394, 417, -191, 278,
	-197, -345, -345, -246, 278, -190, -355, 388, 394, -174,
	-151, -88, 394, 417, -175, -152, 278, 394, -189, -134,
	156, 232, 410, -350, -128, 5, 228, -128, 418, 422,
	165, -176, 165, -182, -166, -88, -189, 142, 4, -190,
	-355, -355, -355, -88, -189, 114, -189, 114, -158, 110,
	-412, 400, -174, -223, -222, -288, -245, -275, 285, 237,
	-221, -178, -177, 379, -183, -245, -230, 422, 142, 400,
	419, -221, -154, -154, -154, -154, -154, 142, -136, 240,
	-135, -165, 5, -226, 23, -355, 418, -326, 415, 416,
	7, 7, 417, -346, -137, -226, 142, -41, 388, 266,
	92, 338, 252, 165, -347, -347, -277, 365, 66, 267,
	-347, 338, 310, -73, -165, -271, -288, -314, -189, 423,
	-288, -288, -289, -289, 142, 417, -288, -299, 28, 28,
	418, -284, -288, 410, -350, 418, 418, -297, 111, -288,
	349, -350, 410, 418, 381, -413, -413, -413, 5, 216,
	153, 215, -260, 215, -260, -260, 7, -390, -180, 417,
	-165, 386, -222, 418, -341, -326, -288, -288, -288, -346,
	-288, -293, -288, -341, -326, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, 104, 225, 232, -289, -294, -293,
	-288, -288, -326, 418, 418, 418, -234, -72, -242, 148,
	-323, 422, -242, -242, 418, -251, 417, -288, -316, 416,
	418, 422, -311, 416, 422, 425, 400, -312, 418, 419,
	-220, -310, -350, 354, 354, 114, 225, 376, -365, -362,
	-288, -225, -315, -177, -377, 417, -165, -373, -374, -172,
	417, 417, -147, 107, 313, -265, 114, -154, 114, -154,
	392, 417, 417, 354, -263, 73, -291, -172, -234, 354,
	354, 253, -291, -291, -234, 354, -291, 117, -137, 142,
	337, -208, 168, -281, -166, 417, -176, 417, 417, -220,
	-189, -323, -247, -161, -264, 374, -175, 417, -175, -159,
	198, -412, -353, -378, -268, -266, -245, -237, 226, 72,
	418, 422, 419, -282, -239, -231, -288, 2, 418, -88,
	422, 417, 400, 400, 239, -138, -138, 7, 416, 418,
	-346, 418, -226, 240, -186, -174, -189, -187, -201, -189,
	238, 418, -148, -175, 28, 28, -288, -299, 418, -288,
	-288, 416, -288, 419, 5, -288, 418, 418, 418, 418,
	-391, -165, -288, 418, 418, 418, 422, 418, 418, 418,
	-294, 142, 104, 232, 417, 418, 418, -296, 150, 46,
	-316, -296, -296, -226, -285, -346, -286, -175, 415, -311,
	-312, -350, 419, -177, -184, -280, 114, -366, 73, -367,
	60, 126, 78, 225, 228, 367, 262, 57, 98, 271,
	32, 418, 418, 422, -173, 60, -173, -288, 417, -225,
	-226, 225, 98, 225, 98, 91, 362, -177, -184, -226,
	-226, -189, -177, -184, 417, 418, -191, -190, -355, 418,
	-175, 71, -356, 350, -209, -210, 160, 417, -225, 417,
	-226, -206, 32, -137, 417, 144, 237, -225, 237, -160,
	197, -412, -353, -157, -245, -274, 417, 237, -88, -178,
	2, -223, 400, -135, -136, -355, -355, 91, 91, 416,
	418, -42, -43, 165, 73, 255, -212, -211, 252, 232,
	-148, -288, -288, 418, -350, 410, -413, -385, 252, 418,
	-288, -289, 142, 417, -299, -386, 387, -288, -234, -386,
	-386, 418, -312, -346, -311, -280, -184, -188, -181, -165,
	126, 157, 228, 193, 417, -289, -189, 417, 2, -279,
	-407, 77, 333, -315, -148, -188, -148, 418, -234, 418,
	418, 228, 228, -288, -326, -154, -154, 418, 418, 354,
	354, -234, 354, 354, 394, -291, 250, -225, 418, -225,
	418, 418, -88, -225, -189, 418, -189, -412, -353, -158,
	105, -226, 73, -268, -295, 418, 417, 417, 422, 24,
	417, 24, 417, -187, 338, 418, -223, 46, 418, -289,
	-299, 418, -387, -388, -180, -311, 416, -367, -181, 225,
	-288, -167, 417, -288, -208, 417, -173, -413, 271, -405,
	60, 417, 417, -177, -184, -413, 417, 417, -291, -189,
	418, -279, 418, -208, 418, -264, 417, -353, -159, 369,
	226, 418, -184, -245, -356, -356, -43, -226, -226, -189,
	-392, 266, 293, -234, 418, 422, 32, 114, 418, -368,
	212, -165, 418, -209, -226, -148, 418, -189, -406, 374,
	-188, -214, -213, -211, -216, -215, -211, 418, -234, -234,
	417, -208, -279, -209, -279, 417, -225, -160, 313, -282,
	418, 418, 418, 418, 418, -393, -394, 38, 364, 82,
	-288, -393, -388, -390, 126, -369, -372, -371, 237, 143,
	251, 318, 418, 332, 384, 418, -220, -288, 418, 422,
	379, 418, 422, 379, 418, 418, -226, -209, -208, -208,
	-225, 418, -238, -137, -137, -394, 259, 138, 292, 259,
	138, -181, -371, 237, -372, 237, 369, 101, -368, -213,
	160, -215, 142, 418, -209, -209, 418, -282, 28, -370,
	222, 283, 51, 313, -370, -369, 417, 417, -155, 51,
	283, -279, -394, 21, 228, 98, -234, -234, -208, 418,
	418, -209, -209, 354, 417, -234, 418, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 184, 186, 188, 0, 0, 0, 211, 213, 215,
	216, -2, 0, 0, 0, 244, 245, 247, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	383, 384, 0, 853, -2, 0, 362, 364, 373, 375,
	377, 379, 380, 0, 442, 444, 446, 448, 450, 452,
	454, 456, 458, 459, 461, 463, 465, 467, 469, 471,
	473, 475, 477, 479, 481, 483, 485, 487, 489, 491,
	-2, 765, 767, 769, 771, -2, 62, 64, 66, 68,
	70, 72, 87, 219, 221, 223, 225, 228, 230, 232,
	890, 250, 252, 254, 256, 258, -2, 904, 0, 0,
	0, -2, 0, -2, -2, -2, 783, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 866, 868, 870,
	872, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 158, -2, -2, -2,
	-2, 0, 0, 1521, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	1520, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530,
	1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,
	1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
	1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
	1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640,
	1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650,
	1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660,
	1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
	1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
	1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690,
	1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700,
	1701, 1408, 1462, 1411, 1406, 185, 187, 189, 190, 0,
	0, 0, 0, 0, 0, 668, 1447, 1460, 1461, 1462,
	1465, 1466, 1467, 1521, 0, 212, 214, 217, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	341, 1610, 343, 345, 0, 0, 0, 0, 238, 239,
	240, 241, 242, 243, 246, 248, 249, 0, 0, 0,
	0, 0, 0, 0, 340, 338, 1442, 283, 284, 0,
	323, 324, 325, 326, 327, 328, 330, 287, 289, 291,
	292, 294, 296, 298, 300, 302, 304, 306, 308, 309,
	311, 313, 314, 316, 318, 319, 321, 728, 0, 0,
	0, 0, 0, 167, 0, 355, 349, 354, 356, 358,
	359, 360, 361, 0, 165, 0, 0, 601, 336, 334,
	0, 161, 0, 0, 762, 0, 355, 1489, 353, 763,
	764, 0, 0, 758, 759, 1639, 793, 363, 365, 374,
	376, 378, 381, -2, -2, 1732, -2, 404, -2, 412,
	1735, 1641, 415, 0, 417, -2, 420, 443, 445, 447,
	449, 451, 453, 455, 457, 460, 462, 464, 466, 468,
	470, 472, 474, 476, 478, 480, 482, 484, 486, 488,
	490, 492, 493, 0, 0, 0, 0, 0, 497, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 496, 498, 499, 500, 0, 544, 583, 584,
	766, 768, 770, 0, 709, 892, 63, 65, 67, 69,
	71, 220, 222, 224, 226, 229, 231, -2, 864, 865,
	251, 253, 255, 257, 259, -2, 0, 896, 896, 896,
	0, 0, 865, 863, 0, 366, 0, 368, 0, 497,
	371, 372, 424, 425, 1104, 0, 0, 0, 0, 0,
	1229, 1182, -2, -2, 1214, 1216, 1713, 1732, 0, 1218,
	1219, 0, 1221, 1225, 1226, 0, 1385, 1454, 1449, 1414,
	1415, 1416, 1417, 0, 0, 1420, 0, 1422, 1423, 1424,
	1289, 1240, -2, -2, -2, 1458, 1018, 1019, 1020, 1021,
	1022, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1744, 1244,
	1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 0, 1702,
	1719, 1725, 1720, 1710, 1259, -2, -2, 1528, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1714, 1715, -2, 1717, -2,
	-2, 1724, -2, 1728, 1729, -2, -2, 1734, -2, -2,
	-2, 1738, 1739, -2, 1476, 1071, 1745, 1746, 1747, 1748,
	1749, 1750, 1751, 1752, 1753, 1754, 1757, 1758, 1759, 1760,
	1761, 1762, 795, 773, 786, 795, 775, 776, 777, 778,
	779, 784, 785, 788, 0, 780, 781, 782, 882, 1616,
	885, 668, 883, 867, 869, 0, 871, 0, 0, 0,
	876, 899, 897, 0, 935, 880, 881, 891, 950, 0,
	0, 970, 970, 961, 0, 992, 0, 1459, 0, 0,
	0, 0, 0, -2, 1462, 1744, 1755, 1756, 2, 79,
	0, 1719, 992, 81, 0, 1719, 84, 0, 1719, 0,
	-2, 88, 0, 1719, 168, 169, 1472, 1473, 1477, 1478,
	1479, 1480, 91, 0, 1438, 99, 0, 1719, 1405, 0,
	1435, 1481, 1482, 1483, 1484, 1485, 1763, 1764, 1765, 1766,
	1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
	1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 0, 1432, 0,
	0, 593, 1402, 1407, 594, 1412, 0, 191, 192, 193,
	194, 195, 1719, 197, 198, 0, 200, 201, 1719, 203,
	204, 0, 206, 0, 0, 0, 0, 0, 227, 668,
	1719, 0, 234, 1443, 0, 692, 1719, 690, 1446, -2,
	1719, 712, 715, 1719, 717, 668, 719, 1445, -2, 1469,
	889, 1719, 809, 342, 344, 0, 237, 0, 822, 0,
	824, 0, 843, 998, 152, 1719, 262, 281, 152, 1719,
	265, 152, 1719, 268, 152, 1719, 271, 1400, 152, 1719,
	274, 275, 1719, 277, 170, 278, 1719, 280, 337, 0,
	0, -2, 331, 1448, -2, 329, 288, 290, 293, 295,
	297, 299, 301, 303, 305, 307, 310, 312, 315, 317,
	320, 322, -2, 0, 162, 0, 0, 0, 0, 599,
	600, 0, 0, 0, 760, 761, 0, 0, 0, 385,
	0, 0, 0, 0, 792, 382, 0, 401, 0, 403,
	1709, -2, -2, 407, 796, 800, 801, 802, 0, 0,
	0, 0, 414, 0, 0, 0, 418, 421, 0, 494,
	495, 0, 0, 505, 506, 507, 508, 509, 0, 512,
	533, 548, 0, 0, 516, 518, 598, 520, 0, 0,
	522, 0, 524, 0, 526, 0, 528, 0, 530, 532,
	534, 549, 536, 0, 0, 0, 547, 0, 553, 0,
	556, 557, 558, 0, 560, 561, 562, 0, 0, 0,
	570, 572, 0, 582, 0, 501, 502, 152, 996, -2,
	0, 859, 913, 914, 0, 0, 0, 0, 894, 895,
	0, 0, 0, 855, 856, 367, 0, 370, 0, 0,
	0, 0, 1320, 1321, 1322, 1323, 1324, 1325, 1328, 1329,
	1326, 1327, 1330, 1331, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 1334, 1335, 0, 0, 1337, 0, 1339, 0,
	0, 0, 0, 0, 0, 1161, 1163, 1393, 0, 0,
	1336, 1109, 1110, 1111, 1146, 1147, 0, 1215, 1390, 1389,
	1217, 0, 1342, -2, 1343, 1229, 0, 0, 1220, 1429,
	1227, 1228, 1342, 0, 1384, 0, 0, 1419, 0, 1101,
	1291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1055, 1069, 1076, 1073, 1072, 1057,
	0, 1056, 0, 0, 1054, 0, 0, 0, 1058, 0,
	1365, -2, 0, 0, 0, 0, 0, 0, 772, -2,
	774, 0, 790, 0, 884, 0, 0, 939, 1394, 1398,
	1399, 939, 939, 0, 0, 1343, 0, 0, 0, 0,
	989, 989, 989, 987, 964, 0, 970, 0, -2, 0,
	970, 970, 0, 980, 0, 980, -2, 961, 0, 0,
	993, 994, 0, 0, 100, 755, 119, 0, 755, 755,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 115,
	107, 108, 0, 0, 85, 693, 0, 696, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 0, 117, 0, 141, 143, 0,
	0, 0, 0, 983, 592, 0, 0, 1463, 1410, 0,
	0, 0, 0, 0, 0, 1463, 0, 0, 1449, 1450,
	607, 0, 0, 0, 0, 688, 691, 0, 710, 0,
	888, 0, 0, 0, 0, 1719, 724, 1434, 1468, 0,
	1719, 811, 0, 1002, 0, 825, 0, 0, 999, 0,
	260, 0, 150, 151, 0, 263, 0, 266, 0, 269,
	0, 0, 272, 0, 0, 0, 0, 0, 891, 0,
	182, 0, 347, 357, 0, 0, 891, 0, 1345, 1010,
	1013, 1014, 1015, 1101, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1077, 1071, 1087, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1067, 0, 1042, 1042, 1042,
	1059, 1060, 1078, 1079, 1081, 1083, 1085, 1011, 1012, 1077,
	1077, 1074, 1075, 182, 0, 351, 0, 983, 387, 983,
	389, 0, 578, 0, 0, 0, 0, -2, 409, 0,
	798, 0, 803, 433, 434, 435, 805, 806, 413, 436,
	437, 438, 439, 440, 441, 0, 685, 0, 687, 1425,
	0, 410, 426, 411, 416, 0, 422, 0, 0, 510,
	511, 513, 514, 515, 519, 0, 586, 1631, 596, 521,
	523, 525, 527, 529, 891, 538, 0, 540, 891, 551,
	554, 559, 563, 564, 565, 566, 567, 568, 0, 0,
	0, 708, 0, 862, 911, 912, 917, 921, 922, 925,
	928, 929, 919, 1104, 877, 878, 879, 905, 906, 738,
	0, 0, 369, 1105, 1006, 1007, 1061, 1062, 1063, 1064,
	1065, 1106, 1107, 1431, 0, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, -2, -2, -2, -2, -2,
	-2, -2, -2, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, -2, -2, -2, 1144, 1145, -2,
	1338, 1340, 0, 1393, 0, -2, 0, -2, -2, -2,
	-2, 1158, 0, 1160, 1165, 1167, 1169, 0, 0, 0,
	0, 1392, 1179, 1376, 0, 0, 1317, 1318, 1319, 1164,
	0, 0, 1391, 1388, 0, 0, 1341, 1224, 0, 0,
	0, 0, 1349, 1383, 1379, 0, 1451, 1457, 1231, 902,
	0, 0, 0, 0, 1238, 0, 1430, 1088, 1089, 1090,
	1091, 1092, 1093, 1102, 1299, 0, 0, 0, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 0, 0,
	0, 0, 0, 0, 0, 0, 1271, 0, 1352, -2,
	-2, -2, -2, -2, -2, -2, 0, 1273, 0, 0,
	1285, 0, 1287, 0, 1275, 1343, 1362, 0, 0, 1185,
	0, 0, 0, 1229, 0, 1278, 1343, 1370, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 1375,
	789, 886, 0, 0, 1002, 0, 0, 0, 1397, 1002,
	1002, 0, 934, 0, 0, 0, 0, 0, 0, 984,
	988, 985, 986, 0, 0, 970, 980, 947, 0, 0,
	1433, 0, 955, -2, 980, 980, 0, 957, 979, 0,
	668, 969, 959, -2, 0, -2, 0, 0, 0, 0,
	754, 121, 1719, 0, 154, 0, 0, 658, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 694, 695,
	697, 703, 705, 0, 699, 1428, 0, 700, 0, 702,
	704, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 1404, 0, 0,
	173, 982, 0, 1403, 1413, 0, 196, 199, 202, 205,
	183, 667, 0, 0, 0, 0, 606, -2, 608, 610,
	611, 612, 613, 1566, 1469, 0, 1469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	813, 819, 0, 904, 0, 841, 827, 0, 0, 0,
	841, 845, 846, 848, 849, 0, 0, 1000, 282, 152,
	152, 152, 1401, 152, 152, 171, 276, 279, 339, 285,
	332, 0, 0, 0, 0, 0, 0, 333, 0, 0,
	0, 335, 0, 1003, 1005, 0, 1016, 0, 1069, 0,
	159, 182, 0, 0, 386, 391, 0, 579, 0, 0,
	402, 0, 797, 804, 0, 430, 0, 432, 686, 1427,
	1426, 0, 423, 503, 0, 597, 595, 537, 541, 891,
	543, 0, 580, 581, 585, 997, 0, 923, 0, 920,
	926, 927, 0, 908, 736, 737, 0, 0, 0, -2,
	-2, 0, 0, 0, 1180, -2, 1159, 1162, 1166, 1168,
	1170, 0, 0, 0, 0, 0, 0, 0, 1181, 1386,
	1389, 1315, 0, 0, 1344, 1347, 1348, 0, 0, 1380,
	0, 0, 0, 0, 0, 901, 902, 902, 902, 1237,
	0, 0, 0, 0, 0, 0, 1239, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1258, 1040, 0, 1270,
	0, 1272, 1066, 1284, 1286, 1274, 0, 0, 1276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1188, 1189, 1190, 1277, 1368, 1369, 0, 0,
	1080, 1082, 1084, 1086, 0, 0, 0, 0, 1283, 0,
	1374, 891, 936, 931, 1395, 983, 938, 940, 1396, 1436,
	931, 931, 0, 1344, 972, 0, 974, 0, 0, 0,
	976, 0, 965, 0, 967, 980, 952, 0, 0, 945,
	0, 944, 970, 0, 956, 958, 960, 1451, 668, 978,
	0, 995, 0, 120, 742, 0, 0, 1437, 0, 123,
	1719, 131, 0, 635, 0, 0, 0, 0, 0, 757,
	132, 1719, 152, 1719, 152, 133, 136, 0, 140, 138,
	0, 0, 626, 101, 755, 104, 0, 0, 748, 0,
	698, 701, 707, 86, 0, 750, 740, 0, 0, 739,
	142, 105, 0, 0, 752, 103, 0, 0, 0, 182,
	0, 0, 1409, 1464, 207, 209, 210, 208, 615, 0,
	1469, 0, 1469, 0, 1441, 604, 668, 0, 983, 692,
	713, -2, 716, 718, 726, 0, 0, 0, 815, 819,
	0, 818, 889, 916, 903, 1001, 820, 841, 0, 0,
	0, 830, 832, 829, 826, 823, 1002, 0, 0, 0,
	0, 0, 261, 264, 267, 270, 273, 0, 180, 1598,
	178, 175, 177, 346, 0, 0, 0, 1346, 0, 1008,
	0, 0, 0, 0, 160, 350, 0, 388, 0, 0,
	0, 0, 0, 0, 399, 400, -2, 428, 429, 431,
	427, 0, 539, 542, 550, 0, 0, 907, 738, 0,
	1108, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	1377, 0, 1388, 1222, 1223, 1230, 1316, 1350, 1378, 1382,
	0, 1452, 1456, 1232, 0, 0, 0, 0, 1421, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 0, 1297, 1298, 1302,
	1444, 0, 0, 1243, 0, 0, 0, 0, 0, 0,
	1351, 1361, 1363, 1186, 1187, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, 1198, 1199, 1200, -2, -2, -2, 1204, 1205,
	1206, -2, -2, -2, 0, 0, 0, 1364, 1366, 1367,
	1371, 1372, 0, 1280, 1281, 1282, 1373, 0, 933, 0,
	937, 0, 933, 933, 898, 973, 0, 991, 975, 950,
	966, 0, 963, 948, 0, 949, 0, 980, 970, 0,
	977, 962, -2, 0, 0, 0, 0, 153, 633, 657,
	0, 0, 729, 735, 735, 0, 1439, 1241, 1242, 0,
	0, 0, 125, 0, 0, 0, 0, 129, 0, 135,
	139, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 111, 114, 0, 0, 110, 0, 157, 0,
	0, 623, 0, 609, 0, 0, 0, 0, 607, 0,
	233, 182, 689, 711, 0, 0, 0, 0, 0, 817,
	819, 0, 810, 811, 841, 915, 821, 839, 840, 838,
	0, 0, 0, 904, 847, 844, 850, 851, 0, 166,
	0, 0, 0, 0, 348, 0, 0, 0, 1009, 1017,
	0, 1070, 352, 0, 573, 574, 621, 0, 577, 504,
	918, 924, 909, 738, 0, 0, -2, 0, 1173, -2,
	-2, 1387, 1381, 0, 1418, 902, 1233, 1235, 1236, 1103,
	1304, 1301, 0, 1288, 1253, 1254, 0, 1256, 1257, 1041,
	1360, 0, 0, 0, 0, 1279, 887, 1293, 0, 0,
	941, 1293, 1293, 0, 970, 968, 946, 942, 0, 953,
	980, 1452, 0, 744, 746, 122, 0, 634, 0, 637,
	0, 0, 0, 0, 644, 645, 0, 0, 0, 0,
	0, 659, 666, 0, 738, 0, 738, 0, 0, 0,
	0, 0, 145, 0, 0, 756, 0, 152, 152, 0,
	0, 743, 0, 0, 0, 0, 749, 751, 741, 0,
	753, 0, 172, 0, 602, 622, 0, 0, 0, 0,
	0, 0, 0, 235, 0, 725, 0, 0, 0, 807,
	819, 0, 812, 813, 236, 0, 0, 0, 828, 831,
	833, 916, 0, 179, 0, 174, 176, 0, 0, 1004,
	1068, 390, 392, 0, 0, 398, 575, 620, 0, 0,
	910, -2, -2, 1174, 1453, 1455, 0, 904, 0, 1290,
	0, -2, 0, 0, 0, 873, 0, 932, 930, 874,
	875, 990, 980, 0, 954, 124, 0, 638, 639, 1440,
	641, 0, 643, 646, 0, 648, 1471, 0, 652, 615,
	0, 663, 664, 730, 731, 734, 732, 735, 902, 661,
	0, 126, 127, 144, 147, 128, 134, 0, 0, 0,
	0, 902, 0, 0, 0, 981, 0, 0, 666, 0,
	656, 615, 605, 0, 726, 722, 0, 0, 814, 815,
	0, 0, 0, 841, 852, 181, 0, 0, 0, 394,
	0, 396, 0, 619, 0, 1234, 1307, 0, 1255, -2,
	0, 1212, 1292, 1294, 0, 951, 943, 636, 640, 0,
	0, 672, 0, 0, 623, 0, 738, 0, 0, 149,
	0, 0, 0, 745, 747, 0, 0, 0, 113, 0,
	655, 615, 666, 623, 666, 0, 0, 816, 817, 0,
	835, 1002, 837, 842, 0, 0, 393, 0, 0, 576,
	0, 0, 0, 1303, 1213, 0, 0, 0, 647, 677,
	0, 0, 0, 660, 0, 733, 1232, 668, 130, 0,
	146, 0, 627, 0, 0, 630, 0, 0, 0, 0,
	0, 623, 615, 603, 615, 0, 0, 808, 0, 836,
	182, 182, 395, 397, 1300, 1305, 1308, -2, 1685, 1518,
	0, 1306, 1295, 1296, 0, 649, 673, 674, 0, 669,
	670, 671, 1470, 650, 651, 665, 672, 148, 624, 0,
	0, 625, 0, 0, 116, 118, 0, 653, 623, 623,
	0, 723, 1002, 163, 164, 0, 1310, 1311, 1312, 1313,
	1314, 642, 675, 0, 676, 0, 0, 0, 677, 628,
	0, 631, 0, 618, 654, 720, 666, 834, 0, 678,
	0, 681, 682, 0, 679, 662, 0, 0, 614, 616,
	617, 615, 1309, 680, 683, 684, 0, 0, 623, 623,
	0, 721, 629, 0, 0, 0, 623, 632,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 406, 3, 412, 407, 3,
	417, 418, 410, 408, 422, 409, 419, 411, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 426, 421,
	398, 400, 399, 402, 423, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 415, 3, 416, 413, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 424, 405, 425, 403,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 401, 57741, 404, 57742, 414, 57743, 420, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1012
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1018
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1024
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1033
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1035
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1040
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1041
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1042
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1044
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1047
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1048
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1058
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1070
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1125
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1136
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1151
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1155
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1159
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1170
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1182
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1207
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1211
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1215
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1221
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1225
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1231
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1237
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1243
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1254
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1261
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1271
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1281
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1291
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1304
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1316
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1320
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1326
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1330
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1336
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1340
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1347
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1352
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1357
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1362
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1367
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1372
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1376
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1379
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1389
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1402
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1414
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1421
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1424
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1431
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1440
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1449
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1454
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1461
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1468
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1469
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1473
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1491
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1495
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1503
		{
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1506
		{
			sqlVAL.union = sqlDollar[2].union
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1507
		{
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1512
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1516
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1520
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1526
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1530
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1535
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1536
		{
		}
	case 157:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1563
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1586
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1593
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1597
		{
			sqlVAL.str = "CSV"
		}
	case 163:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1624
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1628
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1631
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1651
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1655
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1659
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1665
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1669
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1675
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1679
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1685
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1689
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1693
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1697
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1703
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1713
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1717
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1720
		{
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1724
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1736
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1737
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1738
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1739
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1749
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1757
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1759
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1762
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1772
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1781
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1789
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1791
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1795
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1798
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1808
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1817
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1825
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1827
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1831
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1834
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1838
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1843
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1849
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1850
		{
			sqlVAL.str = ""
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1859
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1860
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1862
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1863
		{
			return helpWith(sqllex, "CREATE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1866
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1867
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1868
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1869
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1871
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1872
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1873
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1884
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1891
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1895
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets:  sqlDollar[4].union.targetList(),
				SinkType: sqlDollar[6].str,
				AsOf:     sqlDollar[7].union.asOfClause(),
				Options:  sqlDollar[8].union.kvOptions(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1917
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1927
		{
			return helpWith(sqllex, "DELETE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1934
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1937
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1938
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1939
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1940
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1941
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1950
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1951
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1952
		{
			return helpWith(sqllex, "DROP")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1955
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1956
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1957
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1958
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1959
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1967
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1971
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1982
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1986
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1989
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1997
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2001
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2004
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2012
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2020
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2027
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2035
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2043
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2050
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2058
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2062
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2065
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2073
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2077
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2080
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2084
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2109
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2112
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2114
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2121
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2124
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2125
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2127
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2128
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2129
		{
			return helpWith(sqllex, "DELETE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2130
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2131
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2132
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2133
		{
			return helpWith(sqllex, "INSERT")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2134
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2136
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2137
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2139
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2142
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2143
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2145
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2146
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2154
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2155
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2159
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2173
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2180
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2184
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2188
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2198
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2204
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2210
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2214
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2224
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2228
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2232
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2236
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2239
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2259
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2263
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2267
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2270
		{
			return helpWith(sqllex, "GRANT")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2290
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2294
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2298
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2301
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2306
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2310
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2321
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2339
		{
			return helpWith(sqllex, "RESET")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2340
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2348
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2352
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2355
		{
			return helpWith(sqllex, "RESET")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2363
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2366
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2377
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2380
		{
			return helpWith(sqllex, "USE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2384
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2385
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2386
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2387
		{
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2388
		{
			return helpWith(sqllex, "USE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2389
		{
			return unimplemented(sqllex, "set local")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2405
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2420
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2423
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2441
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2449
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2453
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2457
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2463
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2473
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2477
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2481
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2485
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2489
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2500
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2504
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2507
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2513
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2529
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2533
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2555
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2558
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2560
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2563
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2567
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2577
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2593
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2600
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2606
		{
			return unimplemented(sqllex, "set from current")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2607
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2615
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2620
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2627
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2631
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2637
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2648
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2654
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2664
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2668
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2672
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2676
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2680
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2686
		{
			sqlVAL.union.val = tree.Low
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2690
		{
			sqlVAL.union.val = tree.Normal
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2694
		{
			sqlVAL.union.val = tree.High
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2705
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2709
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2713
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2718
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2722
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2734
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2735
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2736
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2737
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2738
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2739
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2740
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2741
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2743
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2744
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2745
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2746
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2747
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2748
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2749
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2750
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2751
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2752
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2753
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2754
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2755
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2756
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2757
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2758
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2760
		{
			return helpWith(sqllex, "SHOW")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2767
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2768
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2769
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2780
		{
			sqlVAL.str = "client_encoding"
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2783
		{
			sqlVAL.str = "timezone"
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2784
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2798
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2802
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2805
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2816
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2824
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2832
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2835
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2845
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2849
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2852
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2854
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2857
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2865
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2868
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2876
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2879
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2892
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2900
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2908
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2911
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2913
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2916
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2921
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2929
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2932
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2934
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2937
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2945
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2948
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2950
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2954
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2964
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2967
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2977
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2980
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2982
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2985
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2987
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2991
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2995
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3001
		{
			sqlVAL.union.val = true
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3002
		{
			sqlVAL.union.val = false
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3010
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3013
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3015
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3019
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3029
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3038
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3047
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3057
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3061
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3064
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3071
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3075
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3083
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3088
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3093
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3097
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3105
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3108
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3116
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3119
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3126
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3129
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3137
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3140
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3148
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3151
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3155
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3160
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3165
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3172
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3180
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3187
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3192
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3204
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3208
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3211
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3219
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3226
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3231
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3351
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3355
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3359
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3398
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3402
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3407
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3411
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3420
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3427
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3431
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3443
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3452
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3455
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3491
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3503
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3517
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3528
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3542
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3548
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3558
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3564
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3570
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3578
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3585
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3590
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3595
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3601
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3608
		{
			sqlVAL.str = ""
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3615
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 624:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3628
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3635
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3641
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3645
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 629:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3651
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3661
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3665
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 632:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3671
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3682
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3693
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3697
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3703
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3707
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3711
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3715
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3719
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3723
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3727
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3745
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3749
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3753
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3757
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3761
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3765
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3769
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3777
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3781
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3785
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 653:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3792
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3802
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3814
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3824
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3836
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3841
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3847
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3853
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3864
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3874
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3898
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3902
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3908
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3912
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3917
		{
			return unimplemented(sqllex, "match full")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3918
		{
			return unimplemented(sqllex, "match partial")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3919
		{
			return unimplemented(sqllex, "match simple")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3920
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3927
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3931
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3935
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3939
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3943
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3949
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3955
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3963
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3967
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3971
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3975
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3979
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3985
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3989
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3993
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4011
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 689:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4019
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4027
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4031
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4034
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4035
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4038
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4039
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4041
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4042
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4043
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4046
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4048
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4050
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4052
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4053
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4055
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4056
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4058
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4067
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4070
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4078
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4082
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4085
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4089
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4093
		{
			sqlVAL.union.val = nil
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4103
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4107
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4110
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4118
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4125
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4143
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4156
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4170
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4179
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4188
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4193
		{
			sqlVAL.union.val = true
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4197
		{
			sqlVAL.union.val = false
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4203
		{
			sqlVAL.union.val = true
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4207
		{
			sqlVAL.union.val = false
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4213
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4226
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4229
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4230
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4233
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4234
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4238
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4242
		{
			sqlVAL.union.val = tree.Descending
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4246
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4252
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4259
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4263
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4269
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4273
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4277
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4281
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4285
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 747:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4287
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4291
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4295
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4301
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4305
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4311
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4315
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4321
		{
			sqlVAL.union.val = true
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4325
		{
			sqlVAL.union.val = false
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4330
		{
			sqlVAL.union.val = true
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4331
		{
			sqlVAL.union.val = false
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4339
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4342
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4352
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4361
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4364
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4372
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4375
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4379
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4380
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4381
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4397
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4400
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4402
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4405
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4415
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4418
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4420
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4423
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4427
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4432
		{
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4433
		{
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4434
		{
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4442
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4449
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4452
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4453
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4457
		{
			sqlVAL.str = ""
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4461
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4465
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4469
		{
			sqlVAL.str = ""
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4475
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4479
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4485
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4489
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4495
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4499
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4512
		{
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4514
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4518
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4522
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4526
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4532
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4538
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4544
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4548
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 807:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4558
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4568
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4578
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4582
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4586
		{
			sqlVAL.str = ""
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4592
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4596
		{
			sqlVAL.str = ""
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4602
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4606
		{
			sqlVAL.str = ""
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4612
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4616
		{
			sqlVAL.str = ""
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4621
		{
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4622
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4634
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4641
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4648
		{
			return helpWith(sqllex, "INSERT")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4659
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4666
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4670
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4678
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4684
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4688
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4692
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4698
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4702
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4722
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4726
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4730
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4736
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4740
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4742
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4748
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4753
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4757
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 842:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4774
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4785
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4789
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4790
		{
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4794
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4798
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4811
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4814
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4818
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4861
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4867
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4871
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4886
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4890
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4894
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4898
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4902
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4906
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4913
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4948
		{
			return helpWith(sqllex, "SELECT")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4949
		{
			return helpWith(sqllex, "VALUES")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4950
		{
			return helpWith(sqllex, "TABLE")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4972
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4985
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4999
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5011
		{
			return helpWith(sqllex, "SELECT")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5015
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5024
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5033
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5048
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5055
		{
			return helpWith(sqllex, "TABLE")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5067
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5070
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5071
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5075
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5079
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 887:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5085
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5093
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5094
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5098
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5101
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5104
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5105
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5109
		{
			sqlVAL.union.val = true
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5113
		{
			sqlVAL.union.val = false
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5117
		{
			sqlVAL.union.val = false
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5123
		{
			sqlVAL.union.val = true
		}
	case 898:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5129
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5134
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5135
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5138
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5139
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5143
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5147
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5153
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5159
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5169
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5173
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5177
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5186
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5195
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5206
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5210
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5219
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5225
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5232
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5239
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5248
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5252
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5256
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5262
		{
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5263
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5266
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5267
		{
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5284
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5288
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5294
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5298
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5317
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5320
		{
			return helpWith(sqllex, "VALUES")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5322
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5334
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5337
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5339
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5345
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5355
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5359
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5365
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5371
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5376
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5399
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5403
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5407
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5411
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5438
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5452
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5456
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:5459
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5460
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5461
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5463
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5466
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5468
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5471
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5473
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5477
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5497
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5502
		{
			sqlVAL.union.val = nil
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5503
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5504
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5508
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5518
		{
			sqlVAL.union.val = true
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5522
		{
			sqlVAL.union.val = false
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5542
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5546
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5550
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5554
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5558
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5562
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5568
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5572
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5579
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5585
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5592
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5598
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5602
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5606
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5610
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5616
		{
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5617
		{
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5628
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5632
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5637
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5638
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5639
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5640
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5644
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5648
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5661
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5665
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5669
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5675
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5679
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5691
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5705
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5714
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5725
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5729
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5736
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5738
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5747
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5751
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5755
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5764
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5782
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5786
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5790
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5794
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5798
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5802
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5806
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5810
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5814
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5818
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5822
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5826
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5830
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5834
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5838
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5842
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5846
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5866
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5870
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5874
		{
			sqlVAL.union.val = nil
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5881
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5885
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5889
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5893
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5897
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5901
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5905
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5909
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5913
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5917
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5921
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5925
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5935
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5939
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5948
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5957
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5966
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5970
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5977
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5981
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5985
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5989
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5993
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5999
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6003
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6009
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6020
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6026
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6038
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6044
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6048
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6052
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6056
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6061
		{
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6062
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6067
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6071
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6075
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6079
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6083
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6087
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6091
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6095
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6099
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6104
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6110
		{
			sqlVAL.union.val = tree.Year
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6114
		{
			sqlVAL.union.val = tree.Month
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6118
		{
			sqlVAL.union.val = tree.Day
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6122
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6126
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6130
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6136
		{
			sqlVAL.union.val = tree.Month
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6140
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6144
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6148
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6152
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6156
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6160
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6164
		{
			sqlVAL.union.val = nil
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6170
		{
			sqlVAL.union.val = tree.Second
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6173
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6197
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6201
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6205
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6208
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6217
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6221
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6225
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6229
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6233
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6237
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6241
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6245
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6249
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6253
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6257
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6261
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6265
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6269
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6273
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6277
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6281
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6285
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6289
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6293
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6297
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6301
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6305
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6309
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6313
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6317
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6321
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6325
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6329
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6333
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6337
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6341
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6345
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6349
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6353
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6357
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6361
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6365
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6369
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6373
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6377
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6381
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6385
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6389
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6393
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6397
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6401
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6405
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6409
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6413
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6417
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6425
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6429
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6433
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6436
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6438
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6442
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6446
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6450
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6454
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6458
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6462
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6466
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6470
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6474
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6478
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6482
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6486
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6490
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6494
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6498
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6502
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6519
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6523
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6527
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6542
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6546
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6550
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6554
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6558
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6562
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6566
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6570
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6574
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6578
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6582
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6586
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6590
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6594
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6598
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6602
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6606
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6610
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6614
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6618
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6622
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6626
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6630
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6634
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6638
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6642
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6646
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6650
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6664
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6672
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6708
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6713
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6722
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6727
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), Star: true}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6731
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6735
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6740
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6744
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6748
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6752
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6757
		{
			t := sqlDollar[2].union.tuple()
			t.Labels = sqlDollar[4].union.nameList()
			sqlVAL.union.val = &t
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6768
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6772
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6775
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6776
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6778
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6782
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6786
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6789
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6800
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6807
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6816
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6817
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6821
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6823
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6827
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6833
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6837
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6841
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6845
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6851
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6855
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6859
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6863
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6867
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6871
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6875
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6879
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6883
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6890
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6893
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6895
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6898
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6900
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6903
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6905
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6908
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6910
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6913
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6915
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6918
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6920
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6923
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6925
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6928
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6930
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6934
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6937
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6938
		{
			return unimplemented(sqllex, "treat")
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6940
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6944
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6948
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6952
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6956
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6959
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6961
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6964
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6969
		{
			return unimplemented(sqllex, "within group")
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6970
		{
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6974
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6978
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6985
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6989
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6995
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6999
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7005
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7013
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7017
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7021
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7028
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7047
		{
			sqlVAL.str = ""
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7053
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7057
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7067
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7068
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7069
		{
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7072
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7073
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7079
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7080
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7081
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7082
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7083
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7094
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7098
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7104
		{
			sqlVAL.union.val = tree.Any
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7108
		{
			sqlVAL.union.val = tree.Some
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7112
		{
			sqlVAL.union.val = tree.All
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7117
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7118
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7119
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7120
		{
			sqlVAL.union.val = tree.Div
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7121
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7122
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7123
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7124
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7125
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7126
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7127
		{
			sqlVAL.union.val = tree.LT
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7128
		{
			sqlVAL.union.val = tree.GT
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7129
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7130
		{
			sqlVAL.union.val = tree.LE
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7131
		{
			sqlVAL.union.val = tree.GE
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7132
		{
			sqlVAL.union.val = tree.NE
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7136
		{
			sqlVAL.union.val = tree.Like
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7137
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7138
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7139
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7151
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7157
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7167
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7171
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7177
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7181
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7187
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7191
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7197
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7201
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7223
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7227
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7231
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7237
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7244
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7248
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7265
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7269
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7273
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7277
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7281
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7287
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7293
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7299
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7303
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7307
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7313
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7317
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7328
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7335
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7339
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7345
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7351
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7355
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7362
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7368
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7372
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7379
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7385
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7389
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7394
		{
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7395
		{
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7399
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7403
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7409
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7418
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7422
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7426
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7434
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7444
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7448
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7454
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7461
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7489
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7493
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7497
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7503
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7507
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7514
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7518
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7522
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7526
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7529
		{
			return unimplemented(sqllex, "func const")
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7531
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7535
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7538
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7540
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7544
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7548
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7555
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7559
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7568
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7579
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7589
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7685
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7692
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7696
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7700
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7735
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7753
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7763
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7767
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7781
		{
			sqlVAL.str = ""
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7787
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7791
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
